<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/operators/CpuElementwise.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_cpu_elementwise_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuElementwise.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_elementwise_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_CPU_ELEMENTWISE_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_CPU_ELEMENTWISE_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_cpu_operator_8h.xhtml">src/cpu/ICpuOperator.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">   33</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">ICpuOperator</a></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml#a684a54d1fb1634a348a585c6b5e76df0">run</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors) <span class="keyword">override</span>;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;};<span class="comment"></span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/** Class to run @ref cpu::kernels::CpuArithmeticKernel except for division and power</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * @note Max/Min/Squared difference supports input data type of QASYMM8/QASYMM8_SIGNED/S16/F16/S32/F32</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * @note PRelu supports inpute data type of QASYMM8/QASYMM8_SIGNED/F16/F32.</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">template</span> &lt;ArithmeticOperation op&gt;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** Configure the operator</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     * @param[in]  src0 The first source tensor information.</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     * @param[in]  src1 The second source tensor information. With PRelu, this is used as alpha tensor.</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     * @param[out] dst  The output tensor information.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml#abaa7c687413b5a67403a4df97c1189b2">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);<span class="comment"></span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     * Similar to @ref CpuElementwiseArithmetic::configure()</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;};</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/** Class to run @ref cpu::kernels::CpuArithmeticKernel except for maximum operation */</span></div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#adb6ece39851b42c09fe28c2ab0b27adf">   65</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseMax</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic&lt;ArithmeticOperation::MAX&gt;</a>;<span class="comment"></span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/** Class to run @ref cpu::kernels::CpuArithmeticKernel except for minimum operation */</span></div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#adbd129adc090ebe5de9f015531e4c7cf">   67</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseMin</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic&lt;ArithmeticOperation::MIN&gt;</a>;<span class="comment"></span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/** Class to run @ref cpu::kernels::CpuArithmeticKernel except for squared difference operation */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a8e9db85fa6787c18e9bccc8a45c206f9">   69</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseSquaredDiff</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic&lt;ArithmeticOperation::SQUARED_DIFF&gt;</a>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/** Basic function to run @ref cpu::kernels::CpuArithmeticKernel for division</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * @note The tensor data type for the inputs must be S32/F16/F32.</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * @note The function performs a division operation between two tensors (i.e., out[i] = in1[i] / in2[i])</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml">   76</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml">CpuElementwiseDivision</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">    /** Initialise the kernel&#39;s inputs, dst and conversion policy.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">     * @param[in, out] src0 First tensor input info. Data types supported: S32/F16/F32.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     * @param[in, out] src1 Second tensor input info. Data types supported: Same as @p src0.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     * @param[out]     dst  Output tensor info. Data types supported: Same as @p src0.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml#abaa7c687413b5a67403a4df97c1189b2">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);<span class="comment"></span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     * Similar to @ref CpuElementwiseDivision::configure()</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;};</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">/** Basic function to run @ref cpu::kernels::CpuArithmeticKernel for power</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * @note The tensor data type for the inputs must be F16/F32.</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> * @note The function performs a elementwise power of in1 to in2 (i.e., out[i] = in1[i] ^ in2[i])</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> * @note For an exponent that is a float, this function will only work with a positive base.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml">  101</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml">CpuElementwisePower</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">    /** Initialise the kernel&#39;s inputs, dst and conversion policy.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">     * @param[in, out] src0 First tensor input info. Data types supported: F16/F32.</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">     * @param[in, out] src1 Second tensor input info. Data types supported: Same as @p src0.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">     * @param[out]     dst  Output tensor info. Data types supported: Same as @p src0.</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml#abaa7c687413b5a67403a4df97c1189b2">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);<span class="comment"></span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">     * Similar to @ref CpuElementwisePower::configure()</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;};</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/** Basic function to run @ref cpu::kernels::CpuComparisonKernel.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * @note The tensor data type for the inputs must be QASYMM8/QASYMM8_SIGNED/S16/F16/S32/F32.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * @note The function performs a comparison operation between two tensors.</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml">  125</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml">CpuElementwiseComparison</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">    /** Initialise the kernel&#39;s inputs, dst and conversion policy.</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">     * @param[in, out] src0 First tensor input info. Data types supported: QASYMM8/QASYMM8_SIGNED/S16/F16/S32/F32.</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">     * @param[in, out] src1 Second tensor input info. Data types supported: Same as @p src0.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">     * @param[out]     dst  Output tensor info. Data types supported: U16/U32.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">     * @param[in]      op   Comparison Operation to be performed.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml#ab655faf171fb4d6911a66c632977347f">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op);<span class="comment"></span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">     * Similar to @ref CpuElementwiseComparison::configure()</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml#a32a353df59aa3ac200ff09feaf36d6db">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;};</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">/** Basic function to run @ref cpu::kernels::CpuComparisonKernel</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> * @note The tensor data type for the inputs must be QASYMM8/QASYMM8_SIGNED/S16/F16/S32/F32.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"> * @note The function performs a comparison operation between two tensors.</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">template</span> &lt;ComparisonOperation op&gt;</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">  152</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">    /** Initialise the kernel&#39;s inputs, dst and conversion policy.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * @param[in, out] src0 First tensor input info. Data types supported: QASYMM8/QASYMM8_SIGNED/S16/F16/S32/F32.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     * @param[in, out] src1 Second tensor input info. Data types supported: Same as @p src0.</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">     * @param[out]     dst  Output tensor info. Data types supported: U16/U32.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml#abaa7c687413b5a67403a4df97c1189b2">configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);<span class="comment"></span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">    /** Static function to check if given info will lead to a valid configuration</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">     * Similar to @ref CpuElementwiseComparisonStatic::configure()</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">     * @return a status</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">static</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;};</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">/** Basic function to run equal comparison. */</span></div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#aa0a37b068450a7e7c63b0bf5d65dbf0e">  172</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">NEEqual</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic&lt;ComparisonOperation::Equal&gt;</a>;<span class="comment"></span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">/** Basic function to run not equal comparison. */</span></div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a3fa32460d63a4499680df2b5933ea01f">  174</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">NENotEqual</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic&lt;ComparisonOperation::NotEqual&gt;</a>;<span class="comment"></span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">/** Basic function to run greater comparison. */</span></div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#acb9428c08ab9b91d102ca6269364eda9">  176</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">NEGreater</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic&lt;ComparisonOperation::Greater&gt;</a>;<span class="comment"></span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">/** Basic function to run greater-equal comparison. */</span></div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a308bbf4b2dd91df7ce97f856f62865a0">  178</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">NEGreaterEqual</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic&lt;ComparisonOperation::GreaterEqual&gt;</a>;<span class="comment"></span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">/** Basic function to run less comparison. */</span></div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a242490d7db27c65f3dd63bd2fe55d7f6">  180</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">NELess</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic&lt;ComparisonOperation::Less&gt;</a>;<span class="comment"></span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">/** Basic function to run less-equal comparison. */</span></div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a6a21c9cce9003a875ff3163bf7752abe">  182</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">NELessEqual</a> = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic&lt;ComparisonOperation::LessEqual&gt;</a>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_CPU_ELEMENTWISE_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static_xhtml_abaa7c687413b5a67403a4df97c1189b2"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml#abaa7c687413b5a67403a4df97c1189b2">arm_compute::cpu::CpuElementwiseComparisonStatic::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src0, const ITensorInfo *src1, ITensorInfo *dst)</div><div class="ttdoc">Initialise the kernel's inputs, dst and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00096">CpuElementwise.cpp:96</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">arm_compute::cpu::CpuElementwiseComparisonStatic</a></div><div class="ttdoc">Basic function to run cpu::kernels::CpuComparisonKernel.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8h_source.xhtml#l00152">CpuElementwise.h:152</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_power_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml">arm_compute::cpu::CpuElementwisePower</a></div><div class="ttdoc">Basic function to run cpu::kernels::CpuArithmeticKernel for power.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8h_source.xhtml#l00101">CpuElementwise.h:101</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic_xhtml_ade7f7ca859a4bc67b2a7f4588940dcd8"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">arm_compute::cpu::CpuElementwiseArithmetic::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00059">CpuElementwise.cpp:59</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_base_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">arm_compute::cpu::CpuElementwiseBase</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8h_source.xhtml#l00033">CpuElementwise.h:33</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a2d299363c9fc33334c571fa29ca4f58c"><div class="ttname"><a href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">arm_compute::ComparisonOperation</a></div><div class="ttdeci">ComparisonOperation</div><div class="ttdoc">Supported comparison operations.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00132">Types.h:132</a></div></div>
<div class="ttc" id="a_i_cpu_operator_8h_xhtml"><div class="ttname"><a href="_i_cpu_operator_8h.xhtml">ICpuOperator.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_division_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml">arm_compute::cpu::CpuElementwiseDivision</a></div><div class="ttdoc">Basic function to run cpu::kernels::CpuArithmeticKernel for division.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8h_source.xhtml#l00076">CpuElementwise.h:76</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml">arm_compute::cpu::CpuElementwiseComparison</a></div><div class="ttdoc">Basic function to run cpu::kernels::CpuComparisonKernel.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8h_source.xhtml#l00125">CpuElementwise.h:125</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_power_xhtml_ade7f7ca859a4bc67b2a7f4588940dcd8"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">arm_compute::cpu::CpuElementwisePower::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00090">CpuElementwise.cpp:90</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic_xhtml_abaa7c687413b5a67403a4df97c1189b2"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml#abaa7c687413b5a67403a4df97c1189b2">arm_compute::cpu::CpuElementwiseArithmetic::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src0, const ITensorInfo *src1, ITensorInfo *dst)</div><div class="ttdoc">Configure the operator.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00050">CpuElementwise.cpp:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_xhtml_a32a353df59aa3ac200ff09feaf36d6db"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml#a32a353df59aa3ac200ff09feaf36d6db">arm_compute::cpu::CpuElementwiseComparison::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst, ComparisonOperation op)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00122">CpuElementwise.cpp:122</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1_i_n_e_operator_xhtml"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">arm_compute::experimental::INEOperator</a></div><div class="ttdoc">Basic interface for functions which have a single async CPU kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_i_n_e_operator_8h_source.xhtml#l00043">INEOperator.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static_xhtml_ade7f7ca859a4bc67b2a7f4588940dcd8"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">arm_compute::cpu::CpuElementwiseComparisonStatic::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00106">CpuElementwise.cpp:106</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_base_xhtml_a684a54d1fb1634a348a585c6b5e76df0"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml#a684a54d1fb1634a348a585c6b5e76df0">arm_compute::cpu::CpuElementwiseBase::run</a></div><div class="ttdeci">void run(ITensorPack &amp;tensors) override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00034">CpuElementwise.cpp:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_division_xhtml_abaa7c687413b5a67403a4df97c1189b2"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml#abaa7c687413b5a67403a4df97c1189b2">arm_compute::cpu::CpuElementwiseDivision::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src0, const ITensorInfo *src1, ITensorInfo *dst)</div><div class="ttdoc">Initialise the kernel's inputs, dst and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00069">CpuElementwise.cpp:69</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_power_xhtml_abaa7c687413b5a67403a4df97c1189b2"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml#abaa7c687413b5a67403a4df97c1189b2">arm_compute::cpu::CpuElementwisePower::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src0, const ITensorInfo *src1, ITensorInfo *dst)</div><div class="ttdoc">Initialise the kernel's inputs, dst and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00082">CpuElementwise.cpp:82</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic_xhtml"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">arm_compute::cpu::CpuElementwiseArithmetic</a></div><div class="ttdoc">Class to run cpu::kernels::CpuArithmeticKernel except for division and power.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8h_source.xhtml#l00045">CpuElementwise.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_xhtml_ab655faf171fb4d6911a66c632977347f"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml#ab655faf171fb4d6911a66c632977347f">arm_compute::cpu::CpuElementwiseComparison::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *src0, const ITensorInfo *src1, ITensorInfo *dst, ComparisonOperation op)</div><div class="ttdoc">Initialise the kernel's inputs, dst and conversion policy.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00111">CpuElementwise.cpp:111</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1_cpu_elementwise_division_xhtml_ade7f7ca859a4bc67b2a7f4588940dcd8"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml#ade7f7ca859a4bc67b2a7f4588940dcd8">arm_compute::cpu::CpuElementwiseDivision::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_elementwise_8cpp_source.xhtml#l00077">CpuElementwise.cpp:77</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_e639157fd988cab7c102f16994a5c7d6.xhtml">operators</a></li><li class="navelem"><a class="el" href="_cpu_elementwise_8h.xhtml">CpuElementwise.h</a></li>
    <li class="footer">Generated on Tue May 28 2024 09:01:02 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
