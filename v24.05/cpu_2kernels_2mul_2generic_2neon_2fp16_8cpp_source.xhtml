<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/mul/generic/neon/fp16.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('cpu_2kernels_2mul_2generic_2neon_2fp16_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">fp16.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="cpu_2kernels_2mul_2generic_2neon_2fp16_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#if defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml">src/core/CPP/Validate.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_types_8h.xhtml">src/cpu/CpuTypes.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aca645d55b58aed670b5fea206486df9a">mul_F16_F16_F16</a>(<span class="keyword">const</span> ITensor *src1, <span class="keyword">const</span> ITensor *src2, ITensor *out, <span class="keyword">const</span> Window &amp;window, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src1-&gt;info()-&gt;tensor_shape().x() != src2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        non_broadcast_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            win,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value         = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keyword">const</span> float16x8x2_t broadcast_value_vec = {{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                    vdupq_n_f16(broadcast_value),</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                    vdupq_n_f16(broadcast_value),</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                }};</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>          scale_vec           = vdupq_n_f16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="keyword">const</span> float16x8x2_t non_broadcast_v = {{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                        vld1q_f16(non_broadcast_input_ptr + x),</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                        vld1q_f16(non_broadcast_input_ptr + x + 8),</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    }};</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    <span class="keyword">const</span> float16x8x2_t result          = {{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                                 <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(broadcast_value_vec.val[0], non_broadcast_v.val[0]), scale_vec),</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                                 <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(broadcast_value_vec.val[1], non_broadcast_v.val[1]), scale_vec),</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    }};</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    vst1q_f16(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    vst1q_f16(output_ptr + x + 8, result.val[1]);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = *(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    *(output_ptr + x)          = broadcast_value * non_broadcast_v * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            },</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            broadcast_input, non_broadcast_input, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        input1_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        input2_win.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            win,</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>float16_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>float16_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    <span class="keyword">const</span> float16x8x2_t ta1       = {{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                              vld1q_f16(input1_ptr + x),</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                              vld1q_f16(input1_ptr + x + 8),</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    }};</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="keyword">const</span> float16x8x2_t ta2       = {{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                              vld1q_f16(input2_ptr + x),</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                              vld1q_f16(input2_ptr + x + 8),</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    }};</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="keyword">const</span> float16x8_t   scale_vec = vdupq_n_f16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keyword">const</span> float16x8x2_t result    = {{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                           <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(ta1.val[0], ta2.val[0]), scale_vec),</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                           <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(ta1.val[1], ta2.val[1]), scale_vec),</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    }};</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    vst1q_f16(output_ptr + x, result.val[0]);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    vst1q_f16(output_ptr + x + 8, result.val[1]);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ta1    = *(input1_ptr + x);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ta2    = *(input2_ptr + x);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    *(output_ptr + x) = ta1 * ta2 * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            },</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS) */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a2c2032af67addd543930e3027b04e8d4"><div class="ttname"><a href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a></div><div class="ttdeci">float16x8_t vmulq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00085">clang-tidy.h:85</a></div></div>
<div class="ttc" id="a_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="a_cpu_types_8h_xhtml"><div class="ttname"><a href="_cpu_types_8h.xhtml">CpuTypes.h</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="asrc_2core_2_c_p_p_2_validate_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aca645d55b58aed670b5fea206486df9a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aca645d55b58aed670b5fea206486df9a">arm_compute::cpu::mul_F16_F16_F16</a></div><div class="ttdeci">void mul_F16_F16_F16(const ITensor *src1, const ITensor *src2, ITensor *out, const Window &amp;window, float scale)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="a_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_04ce38e1f4847bed027248c2c273a188.xhtml">mul</a></li><li class="navelem"><a class="el" href="dir_89d3f7f8f3cdef7c8c8b3e3a2edd49d0.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_a92f7819ef242cf8de3f96b604be563a.xhtml">neon</a></li><li class="navelem"><a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp16_8cpp.xhtml">fp16.cpp</a></li>
    <li class="footer">Generated on Tue May 28 2024 09:01:00 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
