<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ClWorkloadRuntime Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">ClWorkloadRuntime Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>OpenCL runtime to run a workload.  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_cl_workload_runtime_8h_source.xhtml">ClWorkloadRuntime.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aeddb6a30d1277caee87697af24485cff"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#aeddb6a30d1277caee87697af24485cff">ClWorkloadRuntime</a> ()</td></tr>
<tr class="memdesc:aeddb6a30d1277caee87697af24485cff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#aeddb6a30d1277caee87697af24485cff">More...</a><br /></td></tr>
<tr class="separator:aeddb6a30d1277caee87697af24485cff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac1e3a0d6a55b9caddccd76d08942628"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#aac1e3a0d6a55b9caddccd76d08942628">~ClWorkloadRuntime</a> ()</td></tr>
<tr class="memdesc:aac1e3a0d6a55b9caddccd76d08942628"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#aac1e3a0d6a55b9caddccd76d08942628">More...</a><br /></td></tr>
<tr class="separator:aac1e3a0d6a55b9caddccd76d08942628"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30c8cbe95b94fd542e1afcca523f71d6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#a30c8cbe95b94fd542e1afcca523f71d6">ClWorkloadRuntime</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> &amp;&amp;)</td></tr>
<tr class="memdesc:a30c8cbe95b94fd542e1afcca523f71d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructor.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#a30c8cbe95b94fd542e1afcca523f71d6">More...</a><br /></td></tr>
<tr class="separator:a30c8cbe95b94fd542e1afcca523f71d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5324c9fd0a5b0182e5fac645a5e4a18d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#a5324c9fd0a5b0182e5fac645a5e4a18d">operator=</a> (<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> &amp;&amp;)</td></tr>
<tr class="memdesc:a5324c9fd0a5b0182e5fac645a5e4a18d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assignment.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#a5324c9fd0a5b0182e5fac645a5e4a18d">More...</a><br /></td></tr>
<tr class="separator:a5324c9fd0a5b0182e5fac645a5e4a18d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8665c744767b2ab05d269ef0980ff3aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#a8665c744767b2ab05d269ef0980ff3aa">configure</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml">GpuWorkloadSketch</a> &amp;sketch)</td></tr>
<tr class="memdesc:a8665c744767b2ab05d269ef0980ff3aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a>.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#a8665c744767b2ab05d269ef0980ff3aa">More...</a><br /></td></tr>
<tr class="separator:a8665c744767b2ab05d269ef0980ff3aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0237ff2579d4a80ea42f8ed5b1f7e9c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#ae0237ff2579d4a80ea42f8ed5b1f7e9c">run</a> (const std::vector&lt; <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> * &gt; &amp;tensors)</td></tr>
<tr class="memdesc:ae0237ff2579d4a80ea42f8ed5b1f7e9c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform run workload.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#ae0237ff2579d4a80ea42f8ed5b1f7e9c">More...</a><br /></td></tr>
<tr class="separator:ae0237ff2579d4a80ea42f8ed5b1f7e9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0c93a82ec0a274eb57334b36db9f889"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::tuple&lt; <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> *, <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml">AuxMemoryInfo</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#ac0c93a82ec0a274eb57334b36db9f889">get_auxiliary_tensors</a> ()</td></tr>
<tr class="memdesc:ac0c93a82ec0a274eb57334b36db9f889"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get auxiliary tensors of the workload and their memory requirement.  <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml#ac0c93a82ec0a274eb57334b36db9f889">More...</a><br /></td></tr>
<tr class="separator:ac0c93a82ec0a274eb57334b36db9f889"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>OpenCL runtime to run a workload. </p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_runtime_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_cl_workload_runtime_8h_source.xhtml">ClWorkloadRuntime.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aeddb6a30d1277caee87697af24485cff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeddb6a30d1277caee87697af24485cff">&#9670;&nbsp;</a></span>ClWorkloadRuntime() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00286">286</a> of file <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml">ClWorkloadRuntime.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                     : _impl{std::make_unique&lt;Implementation&gt;()}</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aac1e3a0d6a55b9caddccd76d08942628"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac1e3a0d6a55b9caddccd76d08942628">&#9670;&nbsp;</a></span>~ClWorkloadRuntime()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<a id="a30c8cbe95b94fd542e1afcca523f71d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30c8cbe95b94fd542e1afcca523f71d6">&#9670;&nbsp;</a></span>ClWorkloadRuntime() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a8665c744767b2ab05d269ef0980ff3aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8665c744767b2ab05d269ef0980ff3aa">&#9670;&nbsp;</a></span>configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml">GpuWorkloadSketch</a> &amp;&#160;</td>
          <td class="paramname"><em>sketch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a>. </p>
<dl class="section note"><dt>Note</dt><dd>A runtime cannot be re-configured</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sketch</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml">GpuWorkloadSketch</a> with which to configure </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00296">296</a> of file <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml">ClWorkloadRuntime.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;{</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(_impl-&gt;_is_configured, <span class="stringliteral">&quot;ClWorkloadRuntime cannot be re-configured&quot;</span>);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf7ec1cdc18b3461c0a44ceb3b73801c">sketch</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#aa6a3fb7ad46d8c320fc0c6a45992af8a">gpu_context</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml#a9e7e0490811678cc8185650bad2b218b">gpu_language</a>() != <a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">GpuLanguage::OpenCL</a>,</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                    <span class="stringliteral">&quot;ClWorkloadRuntime cannot be configured with non-OpenCL workload sketch&quot;</span>);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">// Generate source code</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    _impl-&gt;_source_code = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf7ec1cdc18b3461c0a44ceb3b73801c">sketch</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#a8908bd4e3667b458f53bb21b5e564b4f">implementation</a>().<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch_1_1_implementation.xhtml#a503d1467801eeb14035d6421c39e74f1">generate_source_code</a>();</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="comment">// Configure unit workload from source code</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> uwk_id : _impl-&gt;_source_code.unit_workloads())</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> work  = _impl-&gt;_source_code.query_unit_workload(uwk_id);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> stage = work.stage().stage;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keyword">auto</span>       k     = std::make_unique&lt;ClKernelRuntime&gt;();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        k-&gt;configure(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf7ec1cdc18b3461c0a44ceb3b73801c">sketch</a>.<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#aa6a3fb7ad46d8c320fc0c6a45992af8a">gpu_context</a>()-&gt;<a class="code" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml#a6b52eff757cb062107b174b8ab900073">cl_compile_context</a>(), work.code());</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">switch</span> (stage)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d">UnitWorkloadStage::Stage::Run</a>:</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                _impl-&gt;_kernels.emplace(work.id(), std::move(k));</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1">UnitWorkloadStage::Stage::Prepare</a>:</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                _impl-&gt;_kernels_prep.emplace(work.id(), std::move(k));</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid unit workload stage&quot;</span>);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">// Create auxiliary tensor objects</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    create_aux_tensors(&amp;_impl-&gt;_aux_tensors, _impl-&gt;_source_code);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    _impl-&gt;_is_configured = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00245">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>, <a class="el" href="_gpu_workload_context_8cpp_source.xhtml#l00058">GpuWorkloadContext::cl_compile_context()</a>, <a class="el" href="_gpu_workload_sketch_impl_8h_source.xhtml#l00096">GpuWorkloadSketch::Implementation::generate_source_code()</a>, <a class="el" href="_gpu_workload_sketch_8cpp_source.xhtml#l00047">GpuWorkloadSketch::gpu_context()</a>, <a class="el" href="_gpu_workload_context_8cpp_source.xhtml#l00053">GpuWorkloadContext::gpu_language()</a>, <a class="el" href="_gpu_workload_sketch_8cpp_source.xhtml#l00057">GpuWorkloadSketch::implementation()</a>, <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">arm_compute::experimental::dynamic_fusion::OpenCL</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1">UnitWorkloadStage::Prepare</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d">UnitWorkloadStage::Run</a>, and <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00168">arm_compute::test::validation::sketch</a>.</p>

<p class="reference">Referenced by <a class="el" href="_integration_8cpp_source.xhtml#l00067">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="ac0c93a82ec0a274eb57334b36db9f889"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0c93a82ec0a274eb57334b36db9f889">&#9670;&nbsp;</a></span>get_auxiliary_tensors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::tuple&lt; <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> *, <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>, <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_aux_memory_info.xhtml">AuxMemoryInfo</a> &gt; &gt; get_auxiliary_tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get auxiliary tensors of the workload and their memory requirement. </p>

<p class="definition">Definition at line <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00369">369</a> of file <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml">ClWorkloadRuntime.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;{</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    std::vector&lt;std::tuple&lt;CLTensor *, TensorInfo, AuxMemoryInfo&gt;&gt; aux_tensors;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;data : _impl-&gt;_aux_tensors.get_tensors())</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    {</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        aux_tensors.emplace_back(data.tensor, data.tensor_info, data.memory_info);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">return</span> aux_tensors;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_integration_8cpp_source.xhtml#l00067">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a5324c9fd0a5b0182e5fac645a5e4a18d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5324c9fd0a5b0182e5fac645a5e4a18d">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Move assignment. </p>

</div>
</div>
<a id="ae0237ff2579d4a80ea42f8ed5b1f7e9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0237ff2579d4a80ea42f8ed5b1f7e9c">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> run </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>tensors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform run workload. </p>
<dl class="section note"><dt>Note</dt><dd>If the runtime is not configured, this method will not perform any action</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">tensors</td><td>Tensors required by the run workloads</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_status.xhtml" title="Status class.">Status</a> If the run is successful </dd></dl>

<p class="definition">Definition at line <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00351">351</a> of file <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml">ClWorkloadRuntime.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="comment">// Need to create the tensor lut in every run, unless the user can guarantee the binding remains fixed,</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="comment">// in which case the lut can be cached during prepare</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> st = create_tensor_lut(&amp;_impl-&gt;_tensor_lut, _impl-&gt;_source_code, tensors, _impl-&gt;_aux_tensors);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(st);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    prepare();</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;id_kernel_pair : _impl-&gt;_kernels)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="comment">// Flush the command queue on the last kernel</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> flush_queue = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> uwk_id      = id_kernel_pair.first;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keyword">auto</span>       kernel      = id_kernel_pair.second.get();</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">enqueue_op</a>(*kernel, _impl-&gt;_tensor_lut.get_tensor_pack(uwk_id), flush_queue);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00238">CLScheduler::enqueue_op()</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_integration_8cpp_source.xhtml#l00067">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/dynamic_fusion/runtime/gpu/cl/<a class="el" href="_cl_workload_runtime_8h_source.xhtml">ClWorkloadRuntime.h</a></li>
<li>src/dynamic_fusion/runtime/gpu/cl/<a class="el" href="_cl_workload_runtime_8cpp_source.xhtml">ClWorkloadRuntime.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage_xhtml_aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebac5301693c4e792bcd5a479ef38fb8f8d">arm_compute::experimental::dynamic_fusion::UnitWorkloadStage::Stage::Run</a></div><div class="ttdeci">@ Run</div><div class="ttdoc">Run every time after the first time.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adf7ec1cdc18b3461c0a44ceb3b73801c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adf7ec1cdc18b3461c0a44ceb3b73801c">arm_compute::test::validation::sketch</a></div><div class="ttdeci">GpuWorkloadSketch sketch</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00168">DirectConv2d.cpp:168</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch_1_1_implementation_xhtml_a503d1467801eeb14035d6421c39e74f1"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch_1_1_implementation.xhtml#a503d1467801eeb14035d6421c39e74f1">arm_compute::experimental::dynamic_fusion::GpuWorkloadSketch::Implementation::generate_source_code</a></div><div class="ttdeci">GpuWorkloadSourceCode generate_source_code() const</div><div class="ttdoc">Generate GpuWorkloadSourceCode from the workload sketch.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_sketch_impl_8h_source.xhtml#l00096">GpuWorkloadSketchImpl.h:96</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch_xhtml_aa6a3fb7ad46d8c320fc0c6a45992af8a"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#aa6a3fb7ad46d8c320fc0c6a45992af8a">arm_compute::experimental::dynamic_fusion::GpuWorkloadSketch::gpu_context</a></div><div class="ttdeci">const GpuWorkloadContext * gpu_context() const</div><div class="ttdoc">Get the gpu workload context of this sketch.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_sketch_8cpp_source.xhtml#l00047">GpuWorkloadSketch.cpp:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch_xhtml_a8908bd4e3667b458f53bb21b5e564b4f"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_sketch.xhtml#a8908bd4e3667b458f53bb21b5e564b4f">arm_compute::experimental::dynamic_fusion::GpuWorkloadSketch::implementation</a></div><div class="ttdeci">Implementation &amp; implementation()</div><div class="ttdoc">Get the implementation.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_sketch_8cpp_source.xhtml#l00057">GpuWorkloadSketch.cpp:57</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00205">Error.h:205</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context_xhtml_a6b52eff757cb062107b174b8ab900073"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml#a6b52eff757cb062107b174b8ab900073">arm_compute::experimental::dynamic_fusion::GpuWorkloadContext::cl_compile_context</a></div><div class="ttdeci">const CLCompileContext * cl_compile_context() const</div><div class="ttdoc">Get CLCompileContext If the gpu language is not OpenCL, then return nullptr.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_context_8cpp_source.xhtml#l00058">GpuWorkloadContext.cpp:58</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler.cpp:112</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00245">Error.h:245</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context_xhtml_a9e7e0490811678cc8185650bad2b218b"><div class="ttname"><a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_context.xhtml#a9e7e0490811678cc8185650bad2b218b">arm_compute::experimental::dynamic_fusion::GpuWorkloadContext::gpu_language</a></div><div class="ttdeci">GpuLanguage gpu_language() const</div><div class="ttdoc">Get GpuLanguage of the context.</div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_context_8cpp_source.xhtml#l00053">GpuWorkloadContext.cpp:53</a></div></div>
<div class="ttc" id="astructarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage_xhtml_aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml#aca8133200c1122e29b87b314d82604ebaf8199556cf6a62ca9268aa50c99b34a1">arm_compute::experimental::dynamic_fusion::UnitWorkloadStage::Stage::Prepare</a></div><div class="ttdeci">@ Prepare</div><div class="ttdoc">Only run once at the beginning.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a5c0fc6f465cae029d60ffdfc7f3e99d9"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a5c0fc6f465cae029d60ffdfc7f3e99d9">arm_compute::CLScheduler::enqueue_op</a></div><div class="ttdeci">void enqueue_op(ICLKernel &amp;kernel, ITensorPack &amp;tensors, bool flush=true)</div><div class="ttdoc">Schedule the execution of the passed kernel if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00238">CLScheduler.cpp:238</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#aa334134c2d2596d8de13df6f9cb67d1da7982b09a852b37f2afb1227eaf552e47">arm_compute::experimental::dynamic_fusion::GpuLanguage::OpenCL</a></div><div class="ttdeci">@ OpenCL</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_cl_workload_runtime.xhtml">ClWorkloadRuntime</a></li>
    <li class="footer">Generated on Tue May 28 2024 09:01:13 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
