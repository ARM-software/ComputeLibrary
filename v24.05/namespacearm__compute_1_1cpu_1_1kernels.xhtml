<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::cpu::kernels Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1cpu_1_1kernels.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::cpu::kernels Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_activation_data_type_i_s_a_selector_data.xhtml">ActivationDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_cast_data_type_i_s_a_selector_data.xhtml">CastDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml">CpuActivationKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the activation kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml">CpuAddKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform addition between two tensors.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel_data_type_i_s_a_selector_data.xhtml">CpuAddKernelDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_mul_add_kernel.xhtml">CpuAddMulAddKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform addition between two tensors.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_mul_add_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">CpuArithmeticKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml">CpuCastKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts a given tensor to a new type.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_col2_im_kernel.xhtml">CpuCol2ImKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform col2im reshaping.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_col2_im_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_comparison_kernel.xhtml">CpuComparisonKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml">CpuComplexMulKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the complex pixelwise multiplication kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_batch_kernel.xhtml">CpuConcatenateBatchKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the batch concatenate kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_batch_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_depth_kernel.xhtml">CpuConcatenateDepthKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the depth concatenate kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_depth_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_height_kernel.xhtml">CpuConcatenateHeightKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the height concatenate kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_height_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_width_kernel.xhtml">CpuConcatenateWidthKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the width concatenate kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_width_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_fully_connected_weights_kernel.xhtml">CpuConvertFullyConnectedWeightsKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to convert the 2D Fully Connected weights from NCHW to NHWC or vice versa.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_fully_connected_weights_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_quantized_signedness_kernel.xhtml">CpuConvertQuantizedSignednessKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to convert asymmetric signed to asymmetric signed and vice-versa.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_quantized_signedness_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_copy_kernel.xhtml">CpuCopyKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform a copy between two tensors.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_copy_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_assembly_wrapper_kernel.xhtml">CpuDepthwiseConv2dAssemblyWrapperKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is a wrapper for the depthwise convolution assembly kernels.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_assembly_wrapper_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml">CpuDepthwiseConv2dNativeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to run a depthwise convolution native on a tensor.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_dequantize_kernel.xhtml">CpuDequantizeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the dequantization layer kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_dequantize_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_kernel.xhtml">CpuDirectConv2dKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform Direct Convolution Layer.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_output_stage_kernel.xhtml">CpuDirectConv2dOutputStageKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to accumulate the biases, if provided, or downscale in case of quantized input.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_output_stage_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv3d_kernel.xhtml">CpuDirectConv3dKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform 3D Direct Convolution Layer.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv3d_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_division_kernel.xhtml">CpuDivisionKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_kernel.xhtml">CpuElementwiseKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for an element-wise operation kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml">CpuElementwiseUnaryKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for an element-wise unary operation kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_fill_kernel.xhtml">CpuFillKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> for filling a tensor with a given constant value.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_fill_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_floor_kernel.xhtml">CpuFloorKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cpu accelarated kernel to perform a floor operation.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_floor_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_interleave4x4_kernel.xhtml">CpuGemmInterleave4x4Kernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to interleave the elements of a matrix.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_interleave4x4_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_a_reduction_kernel.xhtml">CpuGemmLowpMatrixAReductionKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to compute the row-vectors of sums of all the entries in each row of Matrix A.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_a_reduction_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_b_reduction_kernel.xhtml">CpuGemmLowpMatrixBReductionKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to compute the row-vectors of sums of all the entries in each column of Matrix B.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_b_reduction_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml">CpuGemmLowpMatrixMultiplyKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to multiply matrices.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml">CpuGemmLowpOffsetContributionKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to add the offset contribution after <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml">CpuGemmLowpMatrixMultiplyKernel</a>.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_output_stage_kernel.xhtml">CpuGemmLowpOffsetContributionOutputStageKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to add the offset contribution and perform the output stage after <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml">CpuGemmLowpMatrixMultiplyKernel</a>.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_output_stage_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_scale_kernel.xhtml">CpuGemmLowpQuantizeDownInt32ScaleKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8/QASYMM8_SIGNED.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_scale_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel.xhtml">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to quantize down the int32 accumulator values of GEMMLowp to QSYMM16.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel.xhtml">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8_SIGNED.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.xhtml">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> used to quantize down the int32 accumulator values of GEMMLowp to QASYMM8.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_addition_kernel.xhtml">CpuGemmMatrixAdditionKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform the in-place matrix addition between 2 matrices taking into account that the second matrix might be weighted by a scalar value beta:  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_addition_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_multiply_kernel.xhtml">CpuGemmMatrixMultiplyKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to multiply two input matrices "A" and "B".  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_multiply_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_transpose1x_w_kernel.xhtml">CpuGemmTranspose1xWKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> which transposes the elements of a matrix in chunks of 1xW, where W is equal to (16 / element size of the tensor)  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_transpose1x_w_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_im2_col_kernel.xhtml">CpuIm2ColKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the im2col reshape kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_im2_col_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_max_unpooling_layer_kernel.xhtml">CpuMaxUnpoolingLayerKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the pooling layer kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_max_unpooling_layer_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml">CpuMulKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform multiplication between two tensors.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_permute_kernel.xhtml">CpuPermuteKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform tensor permutation given a permutation vector.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_permute_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_assembly_wrapper_kernel.xhtml">CpuPool2dAssemblyWrapperKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is a wrapper for the assembly kernels.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_assembly_wrapper_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_kernel.xhtml">CpuPool2dKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the pooling layer kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool3d_kernel.xhtml">CpuPool3dKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform Pooling 3D.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool3d_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_power_kernel.xhtml">CpuPowerKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_quantize_kernel.xhtml">CpuQuantizeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the quantization layer kernel.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_quantize_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml">CpuReshapeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform tensor reshaping.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_scale_kernel.xhtml">CpuScaleKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Arm(R) Neon(TM) kernel to perform scaling on a tensor.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_scale_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_softmax_kernel.xhtml">CpuSoftmaxKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for softmax computation.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_softmax_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml">CpuSubKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for the kernel to perform subtraction between two tensors.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml">CpuTransposeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> which transposes the elements of a matrix.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_weights_reshape_kernel.xhtml">CpuWeightsReshapeKernel</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to perform reshaping on the weights used by convolution and locally connected layer.  <a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_weights_reshape_kernel.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_data_type_data_layout_i_s_a_selector_data.xhtml">DataTypeDataLayoutISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_data_type_i_s_a_selector_data.xhtml">DataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_depthwise_conv2d_native_data_type_i_s_a_selector_data.xhtml">DepthwiseConv2dNativeDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_elementwise_data_type_i_s_a_selector_data.xhtml">ElementwiseDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_pool_data_type_i_s_a_selector_data.xhtml">PoolDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_scale_kernel_data_type_i_s_a_selector_data.xhtml">ScaleKernelDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_softmax_kernel_data_type_i_s_a_selector_data.xhtml">SoftmaxKernelDataTypeISASelectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:aaaf57088b1cced4263da533eafa10034"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aaaf57088b1cced4263da533eafa10034">DataTypeISASelectorPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_data_type_i_s_a_selector_data.xhtml">DataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:aaaf57088b1cced4263da533eafa10034"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b21150c829c630e35e908b4fcbb76fd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a1b21150c829c630e35e908b4fcbb76fd">DataTypeDataLayoutSelectorPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_data_type_data_layout_i_s_a_selector_data.xhtml">DataTypeDataLayoutISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:a1b21150c829c630e35e908b4fcbb76fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9a77b3e3986125be8fad6cb6e2b39c7"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aa9a77b3e3986125be8fad6cb6e2b39c7">PoolDataTypeISASelectorPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_pool_data_type_i_s_a_selector_data.xhtml">PoolDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:aa9a77b3e3986125be8fad6cb6e2b39c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c1922f3747f3777f95a4eaefe4e6449"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a0c1922f3747f3777f95a4eaefe4e6449">ElementwiseDataTypeISASelectorPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_elementwise_data_type_i_s_a_selector_data.xhtml">ElementwiseDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:a0c1922f3747f3777f95a4eaefe4e6449"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab43a8d80452e4e9e7590280b63440f1c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#ab43a8d80452e4e9e7590280b63440f1c">DepthwiseConv2dNativeDataTypeISASelectorPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_depthwise_conv2d_native_data_type_i_s_a_selector_data.xhtml">DepthwiseConv2dNativeDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:ab43a8d80452e4e9e7590280b63440f1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50a154006ff15c3ed1a492f5cc48958c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a50a154006ff15c3ed1a492f5cc48958c">CastDataTypeISASelectorDataPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_cast_data_type_i_s_a_selector_data.xhtml">CastDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:a50a154006ff15c3ed1a492f5cc48958c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc54bf72bfb2d0f9ed9afe3d4921b0ce"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#abc54bf72bfb2d0f9ed9afe3d4921b0ce">ActivationDataTypeISASelectorDataPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_activation_data_type_i_s_a_selector_data.xhtml">ActivationDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:abc54bf72bfb2d0f9ed9afe3d4921b0ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af82e846a842044ccf9089cb6b5ff39f4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#af82e846a842044ccf9089cb6b5ff39f4">CpuAddKernelDataTypeISASelectorDataPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel_data_type_i_s_a_selector_data.xhtml">CpuAddKernelDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:af82e846a842044ccf9089cb6b5ff39f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18d3496f0abd3cb7ad194f0ef6a61c27"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a18d3496f0abd3cb7ad194f0ef6a61c27">ScaleKernelDataTypeISASelectorDataPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_scale_kernel_data_type_i_s_a_selector_data.xhtml">ScaleKernelDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:a18d3496f0abd3cb7ad194f0ef6a61c27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f285dd0956a0da6c5e6b44f6546e4cc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a7f285dd0956a0da6c5e6b44f6546e4cc">SoftmaxKernelDataTypeISASelectorDataPtr</a> = std::add_pointer&lt; bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_softmax_kernel_data_type_i_s_a_selector_data.xhtml">SoftmaxKernelDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td></tr>
<tr class="separator:a7f285dd0956a0da6c5e6b44f6546e4cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:acf9ea6633274730cd08b8b8fab3a6fe6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:acf9ea6633274730cd08b8b8fab3a6fe6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a5b4a350adf47cb50f854c45a5e7048"><td class="memItemLeft" align="right" valign="top">std::pair&lt; <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a9a5b4a350adf47cb50f854c45a5e7048">validate_and_configure_window</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst)</td></tr>
<tr class="separator:a9a5b4a350adf47cb50f854c45a5e7048"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35d27349ace37fa3b1eac208bd59eba7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a35d27349ace37fa3b1eac208bd59eba7">run_im2col_fp32_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a35d27349ace37fa3b1eac208bd59eba7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79e6d18bb67d5043cf86c2a52ebdacd8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a79e6d18bb67d5043cf86c2a52ebdacd8">run_im2col_fp32_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a79e6d18bb67d5043cf86c2a52ebdacd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5040ec4c40822b435343afadbcc2c3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#afd5040ec4c40822b435343afadbcc2c3">run_im2col_int8_nopad_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:afd5040ec4c40822b435343afadbcc2c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d98e5c4986590c071189ca093aa7484"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a5d98e5c4986590c071189ca093aa7484">run_im2col_uint8_nopad_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a5d98e5c4986590c071189ca093aa7484"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a595a5b2aec6d5aec7db0748e40e37705"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a595a5b2aec6d5aec7db0748e40e37705">run_im2col_qasymm8_pad_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a595a5b2aec6d5aec7db0748e40e37705"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e184454a8c723efbdcd8d3afce3e5d7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a0e184454a8c723efbdcd8d3afce3e5d7">internal_run_im2col_fp16_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a0e184454a8c723efbdcd8d3afce3e5d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a563b246dfe611b31ed6fceefe3d86db2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a563b246dfe611b31ed6fceefe3d86db2">internal_run_im2col_fp16_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a563b246dfe611b31ed6fceefe3d86db2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5d305b5131c91519184325dc21df462"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aa5d305b5131c91519184325dc21df462">internal_run_im2col_fp16_nchw_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:aa5d305b5131c91519184325dc21df462"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8feaee7a9cc90e8bed509936ee67a399"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a8feaee7a9cc90e8bed509936ee67a399">internal_run_im2col_fp16_nchw_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a8feaee7a9cc90e8bed509936ee67a399"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf6d6d1d8233985a0c738d021c76c246"><td class="memTemplParams" colspan="2">template&lt;typename T , bool has_pads&gt; </td></tr>
<tr class="memitem:aaf6d6d1d8233985a0c738d021c76c246"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aaf6d6d1d8233985a0c738d021c76c246">linearize_volume_nchw</a> (const uint8_t *const in_ptr, T *out_ptr, bool has_bias, int top_left_x, int top_left_y, int kernel_width, int kernel_height, int kernel_depth, int input_w, int input_h, int input_stride_x, int input_stride_y, int input_stride_z, int pad_value, int dilation_x, int dilation_y)</td></tr>
<tr class="separator:aaf6d6d1d8233985a0c738d021c76c246"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44933f348338f8a4049d4ef0f641abc7"><td class="memTemplParams" colspan="2">template&lt;typename T , bool has_pads&gt; </td></tr>
<tr class="memitem:a44933f348338f8a4049d4ef0f641abc7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a44933f348338f8a4049d4ef0f641abc7">linearize_volume_nhwc</a> (const uint8_t *const in_ptr, T *out_ptr, bool has_bias, int start_x, int start_y, int kernel_width, int kernel_height, int input_w, int input_h, int input_c, int input_stride_y, int input_stride_z, int pad_value, int dilation_x, int dilation_y)</td></tr>
<tr class="separator:a44933f348338f8a4049d4ef0f641abc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b64c1f52fa0c0ea22f0d0d51730d499"><td class="memTemplParams" colspan="2">template&lt;typename T , bool has_pads&gt; </td></tr>
<tr class="memitem:a8b64c1f52fa0c0ea22f0d0d51730d499"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a8b64c1f52fa0c0ea22f0d0d51730d499">linearize_volume_nhwc</a> (const uint8_t *const in_ptr, T *out_ptr, bool has_bias, int start_x, int start_y, int kernel_width, int kernel_height, int input_w, int input_h, int input_c, int input_stride_y, int input_stride_z, int pad_value, int dilation_x, int dilation_y, int pad_right)</td></tr>
<tr class="separator:a8b64c1f52fa0c0ea22f0d0d51730d499"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b9591f4e6b392de155eeaa188124f9b"><td class="memTemplParams" colspan="2">template&lt;typename T , bool has_pads, bool is_nchw&gt; </td></tr>
<tr class="memitem:a2b9591f4e6b392de155eeaa188124f9b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a2b9591f4e6b392de155eeaa188124f9b">run_im2col</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a2b9591f4e6b392de155eeaa188124f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2db831058c0290f2c92a3fde0a1c5e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aab2db831058c0290f2c92a3fde0a1c5e">neon_fp32_nhwc_directconv2d</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:aab2db831058c0290f2c92a3fde0a1c5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7960bee7752a705979ffbb1517349ce8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a7960bee7752a705979ffbb1517349ce8">neon_fp16_nchw_directconv2d</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:a7960bee7752a705979ffbb1517349ce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1187fbb160f74d1e828ee75f35922fec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a1187fbb160f74d1e828ee75f35922fec">neon_fp32_nchw_directconv2d</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:a1187fbb160f74d1e828ee75f35922fec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee834b7d6673add62d26e96a4f5d4853"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aee834b7d6673add62d26e96a4f5d4853">run_im2col_fp32_nchw_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:aee834b7d6673add62d26e96a4f5d4853"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43a9afe7e7202432341abf09d0fd95ca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a43a9afe7e7202432341abf09d0fd95ca">run_im2col_fp32_nchw_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a43a9afe7e7202432341abf09d0fd95ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fe5e27c72f5d0d2af17fce8dd64a80c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a5fe5e27c72f5d0d2af17fce8dd64a80c">run_im2col_fp16_nchw_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a5fe5e27c72f5d0d2af17fce8dd64a80c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa871b54de15a08f84d819c4a26289c1a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aa871b54de15a08f84d819c4a26289c1a">run_im2col_fp16_nchw_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:aa871b54de15a08f84d819c4a26289c1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94c225e998a7dc84dfc9419521282307"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a94c225e998a7dc84dfc9419521282307">run_im2col_bf16_nchw_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a94c225e998a7dc84dfc9419521282307"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50910250d4a1c7e2beabac96a0258395"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a50910250d4a1c7e2beabac96a0258395">run_im2col_bf16_nchw_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a50910250d4a1c7e2beabac96a0258395"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f387e09ff96cfa0981409921a7692ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a3f387e09ff96cfa0981409921a7692ab">run_im2col_qasymm8_nchw_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a3f387e09ff96cfa0981409921a7692ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb64a58abbdcc61c56bde1b955003ad3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acb64a58abbdcc61c56bde1b955003ad3">run_im2col_qasymm8_nchw_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:acb64a58abbdcc61c56bde1b955003ad3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59a6db253b0b97d1452d636201921878"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a59a6db253b0b97d1452d636201921878">run_im2col_fp16_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a59a6db253b0b97d1452d636201921878"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab174d42becf4a5afd71c42439846cb10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#ab174d42becf4a5afd71c42439846cb10">run_im2col_fp16_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:ab174d42becf4a5afd71c42439846cb10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0757b345eb8d771c2419c22e7d07ebe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#af0757b345eb8d771c2419c22e7d07ebe">run_im2col_bf16_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:af0757b345eb8d771c2419c22e7d07ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f29cab405eaf12bfc2c6f38673ff151"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a6f29cab405eaf12bfc2c6f38673ff151">run_im2col_bf16_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:a6f29cab405eaf12bfc2c6f38673ff151"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b222d7e565964b7420e2d2f2b80c65b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6b222d7e565964b7420e2d2f2b80c65b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a6b222d7e565964b7420e2d2f2b80c65b">convolve_nchw</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:a6b222d7e565964b7420e2d2f2b80c65b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06bbf3a07cdad1c075940af44568ccd1"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a06bbf3a07cdad1c075940af44568ccd1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a06bbf3a07cdad1c075940af44568ccd1">convolve_nhwc</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:a06bbf3a07cdad1c075940af44568ccd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fa5aa980323a460612700ef7c84bc99"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a9fa5aa980323a460612700ef7c84bc99">convolve_nhwc&lt; float &gt;</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info)</td></tr>
<tr class="separator:a9fa5aa980323a460612700ef7c84bc99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1dc5749606a9baea48ea819b0e00eb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#af1dc5749606a9baea48ea819b0e00eb3">run_im2col_qasymm8_pad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:af1dc5749606a9baea48ea819b0e00eb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdea1aa79cd9762e1fb7aa360b77c80c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#abdea1aa79cd9762e1fb7aa360b77c80c">run_im2col_qasymm8_nopad</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;kernel_dims, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, uint32_t input_pad_right, bool has_bias)</td></tr>
<tr class="separator:abdea1aa79cd9762e1fb7aa360b77c80c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="abc54bf72bfb2d0f9ed9afe3d4921b0ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc54bf72bfb2d0f9ed9afe3d4921b0ce">&#9670;&nbsp;</a></span>ActivationDataTypeISASelectorDataPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#abc54bf72bfb2d0f9ed9afe3d4921b0ce">ActivationDataTypeISASelectorDataPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_activation_data_type_i_s_a_selector_data.xhtml">ActivationDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00120">120</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="a50a154006ff15c3ed1a492f5cc48958c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50a154006ff15c3ed1a492f5cc48958c">&#9670;&nbsp;</a></span>CastDataTypeISASelectorDataPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a50a154006ff15c3ed1a492f5cc48958c">CastDataTypeISASelectorDataPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_cast_data_type_i_s_a_selector_data.xhtml">CastDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00118">118</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="af82e846a842044ccf9089cb6b5ff39f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af82e846a842044ccf9089cb6b5ff39f4">&#9670;&nbsp;</a></span>CpuAddKernelDataTypeISASelectorDataPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#af82e846a842044ccf9089cb6b5ff39f4">CpuAddKernelDataTypeISASelectorDataPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel_data_type_i_s_a_selector_data.xhtml">CpuAddKernelDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00122">122</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="a1b21150c829c630e35e908b4fcbb76fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b21150c829c630e35e908b4fcbb76fd">&#9670;&nbsp;</a></span>DataTypeDataLayoutSelectorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a1b21150c829c630e35e908b4fcbb76fd">DataTypeDataLayoutSelectorPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_data_type_data_layout_i_s_a_selector_data.xhtml">DataTypeDataLayoutISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00113">113</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="aaaf57088b1cced4263da533eafa10034"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaf57088b1cced4263da533eafa10034">&#9670;&nbsp;</a></span>DataTypeISASelectorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aaaf57088b1cced4263da533eafa10034">DataTypeISASelectorPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_data_type_i_s_a_selector_data.xhtml">DataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00112">112</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="ab43a8d80452e4e9e7590280b63440f1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab43a8d80452e4e9e7590280b63440f1c">&#9670;&nbsp;</a></span>DepthwiseConv2dNativeDataTypeISASelectorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#ab43a8d80452e4e9e7590280b63440f1c">DepthwiseConv2dNativeDataTypeISASelectorPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_depthwise_conv2d_native_data_type_i_s_a_selector_data.xhtml">DepthwiseConv2dNativeDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00117">117</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="a0c1922f3747f3777f95a4eaefe4e6449"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c1922f3747f3777f95a4eaefe4e6449">&#9670;&nbsp;</a></span>ElementwiseDataTypeISASelectorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a0c1922f3747f3777f95a4eaefe4e6449">ElementwiseDataTypeISASelectorPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_elementwise_data_type_i_s_a_selector_data.xhtml">ElementwiseDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00115">115</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="aa9a77b3e3986125be8fad6cb6e2b39c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9a77b3e3986125be8fad6cb6e2b39c7">&#9670;&nbsp;</a></span>PoolDataTypeISASelectorPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aa9a77b3e3986125be8fad6cb6e2b39c7">PoolDataTypeISASelectorPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_pool_data_type_i_s_a_selector_data.xhtml">PoolDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00114">114</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="a18d3496f0abd3cb7ad194f0ef6a61c27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18d3496f0abd3cb7ad194f0ef6a61c27">&#9670;&nbsp;</a></span>ScaleKernelDataTypeISASelectorDataPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a18d3496f0abd3cb7ad194f0ef6a61c27">ScaleKernelDataTypeISASelectorDataPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_scale_kernel_data_type_i_s_a_selector_data.xhtml">ScaleKernelDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00124">124</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<a id="a7f285dd0956a0da6c5e6b44f6546e4cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f285dd0956a0da6c5e6b44f6546e4cc">&#9670;&nbsp;</a></span>SoftmaxKernelDataTypeISASelectorDataPtr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a7f285dd0956a0da6c5e6b44f6546e4cc">SoftmaxKernelDataTypeISASelectorDataPtr</a> =  std::add_pointer&lt;bool(const <a class="el" href="structarm__compute_1_1cpu_1_1kernels_1_1_softmax_kernel_data_type_i_s_a_selector_data.xhtml">SoftmaxKernelDataTypeISASelectorData</a> &amp;data)&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml#l00126">126</a> of file <a class="el" href="_cpu_kernel_selection_types_8h_source.xhtml">CpuKernelSelectionTypes.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a6b222d7e565964b7420e2d2f2b80c65b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b222d7e565964b7420e2d2f2b80c65b">&#9670;&nbsp;</a></span>convolve_nchw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::convolve_nchw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">47</a> of file <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Declare useful types</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">using</span> vtype       = wrapper::traits::neon_bitvector&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a324e868d35ee9cec67b7dd8ad0b1ad05">vector_type</a> = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">vtype::type</a>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">using</span> tag_type    = <span class="keyword">typename</span> vtype::tag_type;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Scalar quantities</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> element_size   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[0] / element_size;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[1] / element_size;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_c = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[2] / element_size;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_n = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3] / element_size;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> output_stride_c = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_w = weights-&gt;info()-&gt;strides_in_bytes().x() / element_size;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_h = weights-&gt;info()-&gt;strides_in_bytes().y() / element_size;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_c = weights-&gt;info()-&gt;strides_in_bytes().z() / element_size;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> kernel_dim_w = weights-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> kernel_dim_h = weights-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_top  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_left = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_w = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_h = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="comment">// Setup input window for the output iterator</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    Window window_out = window;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    window_out.set(Window::DimZ, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// Setup input window for the weights iterator</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    Window window_w = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*weights-&gt;info(), Steps());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    window_w.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    window_w.set(Window::DimY, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    window_w.set(Window::DimZ, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window_out);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    Iterator wei(weights, window_w);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    constexpr <span class="keywordtype">int</span> num_elems_read_per_iteration = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        window_out,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// We are computing the theoretical starting input starting points</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.x()) * conv_stride_w - conv_pad_left;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * conv_stride_h - conv_pad_top;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end_t   = in_w_start_t + kernel_dim_w;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end_t   = in_h_start_t + kernel_dim_h;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="comment">// We are computing the valid initial and ending input points by checking the borders</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start = std::max(in_w_start_t, 0);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start = std::max(in_h_start_t, 0);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end   = std::min(in_w_end_t, input_dim_w);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end   = std::min(in_h_end_t, input_dim_h);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="comment">// We use the input points to select the valid weight points to use</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_w_start = in_w_start - in_w_start_t;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_start = in_h_start - in_h_start_t;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_end   = kernel_dim_h - (in_h_end_t - in_h_end);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>      index_c_end = weights-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_start =</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes()) +</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordtype">id</span>[3] * input_stride_n;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                window_w,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                [&amp;](<span class="keyword">const</span> Coordinates &amp;id_w)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keyword">const</span> T *<span class="keyword">const</span> weights_ptr_start = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(wei.ptr());</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    uint8_t       *out_ptr           = out.ptr() + id_w[3] * output_stride_c;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    T              out_temp          = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_c = 0, index_in_c = 0; index_wei_c &lt; index_c_end; ++index_wei_c, ++index_in_c)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_row_0      = in_ptr_start + index_in_c * input_stride_c;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> weights_ptr_row_0 = weights_ptr_start + index_wei_c * kernel_stride_c;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_h = wei_h_start, index_in_h = in_h_start; index_wei_h &lt; wei_h_end;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                             ++index_wei_h, ++index_in_h)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            <span class="keyword">const</span> T    *in_ptr_row      = in_ptr_row_0 + index_in_h * input_stride_h;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                            <span class="keyword">const</span> T    *weights_ptr_row = weights_ptr_row_0 + index_wei_h * kernel_stride_h;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                            <span class="keywordtype">int</span>         index_w         = in_w_start;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            <span class="keywordtype">int</span>         index_wei_w     = wei_w_start;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a324e868d35ee9cec67b7dd8ad0b1ad05">vector_type</a> out_temp_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                            <span class="keywordflow">for</span> (; index_w &lt;= ((in_w_end - num_elems_read_per_iteration));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                 index_w += num_elems_read_per_iteration, index_wei_w += num_elems_read_per_iteration)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                            {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> src_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_row + index_w * input_stride_w);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> w_vec   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr_row + index_wei_w * kernel_stride_w);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                out_temp_vec       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_temp_vec, w_vec, src_vec);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                            out_temp += <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(out_temp_vec);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            <span class="keywordflow">for</span> (; index_w &lt; in_w_end; ++index_w, ++index_wei_w)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                            {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> src_val = *(in_ptr_row + index_w * input_stride_w);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> w_val   = *(weights_ptr_row + index_wei_w * kernel_stride_w);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                                out_temp += src_val * w_val;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                            }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr)) = out_temp;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                },</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                wei);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        },</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        out);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00347">type</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="_n_e_math_8inl_source.xhtml#l00537">arm_compute::vreduce()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00091">Dimensions&lt; T &gt;::y()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00096">Dimensions&lt; T &gt;::z()</a>.</p>

</div>
</div>
<a id="a06bbf3a07cdad1c075940af44568ccd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06bbf3a07cdad1c075940af44568ccd1">&#9670;&nbsp;</a></span>convolve_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void convolve_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Declare useful types</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">using</span> vtype       = wrapper::traits::neon_bitvector&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">using</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a324e868d35ee9cec67b7dd8ad0b1ad05">vector_type</a> = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">vtype::type</a>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">using</span> tag_type    = <span class="keyword">typename</span> vtype::tag_type;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Scalar quantities</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> element_size   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y() / element_size;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z() / element_size;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_n = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3] / element_size;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> output_stride_c = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes().x();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_w = weights-&gt;info()-&gt;strides_in_bytes().y() / element_size;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_h = weights-&gt;info()-&gt;strides_in_bytes().z() / element_size;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_w    = weights-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_h    = weights-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_top  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_left = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_w = std::get&lt;0&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_h = std::get&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride());</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Setup input window for the output iterator</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    Window window_out = window;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Setup input window for the weights iterator</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    Window window_w = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*weights-&gt;info(), Steps());</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    window_w.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    window_w.set(Window::DimY, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    window_w.set(Window::DimZ, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window_out);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    Iterator wei(weights, window_w);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    constexpr <span class="keywordtype">int</span> num_elems_read_per_iteration = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// nhwc optimized</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">if</span> (have_zero_x_internal_padding(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info(), weights-&gt;info()))</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// This function assumes that input and weights have not padding in channel</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">        * This implementation parallelize the full WC plane of input and weights by</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">        * treating them as series of elements. So for example, a 3x3 weights and</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">        * floating point vector operations of 4 elements per time, the first 3</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">        * channel elements of the first row would be taken and additionally the first</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">        * element of the second row. The 9 elements in each single WC weight plane</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">        * would require 2 4-element vector operations and a last single element operation.</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">        *</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">        * This works since when we create the input vector to multiply with the weights,</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">        * the exact required elements are loaded in the same order. Therefore the</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">        * multiplication works on the correct input/weight elements.</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            window_out,</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="comment">/*</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">            * In here we create theoretical indexes which then we validate for both</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">            * inputs and weights.</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">            * As a reminder, this loop take each output point in NHW, C is treated</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">            * in the weights loop.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">            */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="comment">// We are computing the theoretical starting input starting points</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * conv_stride_w - conv_pad_left;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * conv_stride_h - conv_pad_top;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end_t   = in_w_start_t + kernel_dim_w;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end_t   = in_h_start_t + kernel_dim_h;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="comment">// We are computing the valid initial and ending input points by checking the borders</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start = std::max(in_w_start_t, 0);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start = std::max(in_h_start_t, 0);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end   = std::min(in_w_end_t, input_dim_w);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end   = std::min(in_h_end_t, input_dim_h);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="comment">// We use the input points to select the valid weight points to use</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> index_wc_start = (in_w_start - in_w_start_t) * kernel_stride_w;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> index_h_start  = in_h_start - in_h_start_t;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> index_wc_end   = (kernel_dim_w - (in_w_end_t - in_w_end)) * kernel_stride_w;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> index_h_end    = kernel_dim_h - (in_h_end_t - in_h_end);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    window_w,</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    [&amp;](<span class="keyword">const</span> Coordinates &amp;id_w)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <span class="comment">/*</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">                * This is the loop in the weights, and it goes along N (the batches)</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">                * As a reminder, the batches of the weights are translated into the</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">                * channels of the output</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">                */</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <span class="keyword">const</span> T *in_ptr_row =</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes()) +</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                            <span class="keywordtype">id</span>[3] * input_stride_n + in_w_start * input_stride_w + in_h_start * input_stride_h;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="keyword">const</span> T *weights_ptr_row =</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(wei.ptr()) + index_h_start * kernel_stride_h;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        uint8_t *out_ptr = out.ptr() + id_w[3] * output_stride_c;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        T out_temp = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_h = index_h_start; index_h &lt; index_h_end;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                             ++index_h, in_ptr_row += input_stride_h, weights_ptr_row += kernel_stride_h)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                            <span class="keyword">const</span> T    *in_ptr_mover = in_ptr_row;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                            <span class="keywordtype">int</span>         index_wc     = index_wc_start;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a324e868d35ee9cec67b7dd8ad0b1ad05">vector_type</a> out_temp_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                            <span class="keywordflow">for</span> (; index_wc &lt;= index_wc_end - num_elems_read_per_iteration;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                 index_wc += num_elems_read_per_iteration, in_ptr_mover += num_elems_read_per_iteration)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                            {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> src_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_mover);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> w_vec   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr_row + index_wc);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                out_temp_vec       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_temp_vec, w_vec, src_vec);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                            }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                            out_temp += <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(out_temp_vec);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                            <span class="keywordflow">for</span> (; index_wc &lt; index_wc_end; ++index_wc, ++in_ptr_mover)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                            {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> src_val = *(in_ptr_mover);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> w_val   = *(weights_ptr_row + index_wc);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                out_temp += src_val * w_val;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                            }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                        }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr)) = out_temp;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    },</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    wei);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            },</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            out);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// nhwc non optimized</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            window_out,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="comment">// We are computing the theoretical starting input starting points</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * conv_stride_w - conv_pad_left;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * conv_stride_h - conv_pad_top;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end_t   = in_w_start_t + kernel_dim_w;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end_t   = in_h_start_t + kernel_dim_h;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="comment">// We are computing the valid initial and ending input points by checking the borders</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start = std::max(in_w_start_t, 0);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start = std::max(in_h_start_t, 0);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end   = std::min(in_w_end_t, input_dim_w);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end   = std::min(in_h_end_t, input_dim_h);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="comment">// We use the input points to select the valid weight points to use</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> wei_w_start = in_w_start - in_w_start_t;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_start = in_h_start - in_h_start_t;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> wei_w_end   = kernel_dim_w - (in_w_end_t - in_w_end);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_end   = kernel_dim_h - (in_h_end_t - in_h_end);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>      index_c_end = weights-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_start =</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes()) +</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    <span class="keywordtype">id</span>[3] * input_stride_n;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    window_w,</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    [&amp;](<span class="keyword">const</span> Coordinates &amp;id_w)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> weights_ptr_start = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(wei.ptr());</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        uint8_t       *out_ptr           = out.ptr() + id_w[3] * output_stride_c;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        T out_temp = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_h = wei_h_start, index_in_h = in_h_start; index_wei_h &lt; wei_h_end;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                             ++index_wei_h, ++index_in_h)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                            <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_row      = in_ptr_start + index_in_h * input_stride_h;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                            <span class="keyword">const</span> T *<span class="keyword">const</span> weights_ptr_row = weights_ptr_start + index_wei_h * kernel_stride_h;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_w = wei_w_start, index_in_w = in_w_start; index_wei_w &lt; wei_w_end;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                 ++index_wei_w, ++index_in_w)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                            {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                <span class="keyword">const</span> T    *in_ptr_mover      = in_ptr_row + index_in_w * input_stride_w;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                <span class="keyword">const</span> T    *weights_ptr_mover = weights_ptr_row + index_wei_w * kernel_stride_w;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                <span class="keywordtype">int</span>         index_c           = 0;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a324e868d35ee9cec67b7dd8ad0b1ad05">vector_type</a> out_temp_vec      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                <span class="keywordflow">for</span> (; index_c &lt;= index_c_end - num_elems_read_per_iteration;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                     index_c += num_elems_read_per_iteration,</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                     in_ptr_mover += num_elems_read_per_iteration,</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                     weights_ptr_mover += num_elems_read_per_iteration)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_mover);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> w_vec   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(weights_ptr_mover);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                    out_temp_vec       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_temp_vec, w_vec, src_vec);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                out_temp += <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(out_temp_vec);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                <span class="keywordflow">for</span> (; index_c &lt; index_c_end; ++index_c, ++in_ptr_mover, ++weights_ptr_mover)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_val = *(in_ptr_mover);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> w_val   = *(weights_ptr_mover);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                    out_temp += src_val * w_val;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                            }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr)) = out_temp;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    },</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    wei);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            },</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            out);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00347">type</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="_n_e_math_8inl_source.xhtml#l00537">arm_compute::vreduce()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00091">Dimensions&lt; T &gt;::y()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00096">Dimensions&lt; T &gt;::z()</a>.</p>

</div>
</div>
<a id="a9fa5aa980323a460612700ef7c84bc99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fa5aa980323a460612700ef7c84bc99">&#9670;&nbsp;</a></span>convolve_nhwc&lt; float &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a06bbf3a07cdad1c075940af44568ccd1">arm_compute::cpu::kernels::convolve_nhwc</a>&lt; float &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp32_8cpp_source.xhtml#l00033">neon_fp32_nhwc_directconv2d()</a>.</p>

</div>
</div>
<a id="a8feaee7a9cc90e8bed509936ee67a399"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8feaee7a9cc90e8bed509936ee67a399">&#9670;&nbsp;</a></span>internal_run_im2col_fp16_nchw_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::internal_run_im2col_fp16_nchw_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00226">226</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor">#if defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aa871b54de15a08f84d819c4a26289c1a">arm_compute::cpu::kernels::run_im2col_fp16_nchw_nopad</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                          kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#else  //  defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="preprocessor">#endif // defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00062">run_im2col_fp16_nchw_nopad()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="aa5d305b5131c91519184325dc21df462"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5d305b5131c91519184325dc21df462">&#9670;&nbsp;</a></span>internal_run_im2col_fp16_nchw_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::internal_run_im2col_fp16_nchw_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00206">206</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">#if defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a5fe5e27c72f5d0d2af17fce8dd64a80c">arm_compute::cpu::kernels::run_im2col_fp16_nchw_pad</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                                        kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#else  // defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">#endif // defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00042">run_im2col_fp16_nchw_pad()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a563b246dfe611b31ed6fceefe3d86db2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a563b246dfe611b31ed6fceefe3d86db2">&#9670;&nbsp;</a></span>internal_run_im2col_fp16_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::internal_run_im2col_fp16_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00186">186</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#if defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#ab174d42becf4a5afd71c42439846cb10">arm_compute::cpu::kernels::run_im2col_fp16_nopad</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                                     kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#else  // defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#endif // defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00054">run_im2col_fp16_nopad()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a0e184454a8c723efbdcd8d3afce3e5d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e184454a8c723efbdcd8d3afce3e5d7">&#9670;&nbsp;</a></span>internal_run_im2col_fp16_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::internal_run_im2col_fp16_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">   Note that when building with the option data_type_support=fp32 the fp16.cpp files won&#39;t be compiled and the linker</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">   would fail with the error undefined arm_compute::cpu::kernels::run_im2col_fp16_pad.</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">   To avoid this problem we only call to the actual fp16 kernel if ENABLE_FP16_KERNELS is defined.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#if defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a59a6db253b0b97d1452d636201921878">arm_compute::cpu::kernels::run_im2col_fp16_pad</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                                   kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#else  // defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#endif // defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00034">run_im2col_fp16_pad()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="aaf6d6d1d8233985a0c738d021c76c246"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf6d6d1d8233985a0c738d021c76c246">&#9670;&nbsp;</a></span>linearize_volume_nchw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::linearize_volume_nchw </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const&#160;</td>
          <td class="paramname"><em>in_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>out_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>top_left_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>top_left_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_stride_z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pad_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dilation_y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00047">47</a> of file <a class="el" href="directconv2d_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> kernel_size2 = kernel_width * kernel_height;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> x_e          = top_left_x + kernel_width * dilation_x;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y_e          = top_left_y + kernel_height * dilation_y;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Linearize volume</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">int</span> d = 0;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// This for loop linearize a volume with 3 slices. This allows:</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// 1) to reduce the iterations of the outer for loop &quot;d&quot;</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// 2) to have an optimized im2col for the first convolution layer where usually we have 3 IFMs</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">for</span> (; d &lt;= (kernel_depth - 3); d += 3)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = top_left_y; y &lt; y_e; y += dilation_y)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">if</span> ((y &lt; 0 || y &gt;= input_h) &amp;&amp; has_pads)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="comment">// All the values will be the offset (will be zeros when not quantized)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = top_left_x; x &lt; x_e; x += dilation_x, ++out_ptr)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    *(out_ptr + 0 * kernel_size2) = pad_value;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    *(out_ptr + 1 * kernel_size2) = pad_value;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    *(out_ptr + 2 * kernel_size2) = pad_value;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = top_left_x; x &lt; x_e; x += dilation_x, ++out_ptr)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="keywordflow">if</span> ((x &lt; 0 || x &gt;= input_w) &amp;&amp; has_pads)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        *(out_ptr + 0 * kernel_size2) = pad_value;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                        *(out_ptr + 1 * kernel_size2) = pad_value;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        *(out_ptr + 2 * kernel_size2) = pad_value;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                        *(out_ptr + 0 * kernel_size2) = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                            in_ptr + ((d + 0) * input_stride_z + y * input_stride_y + x * input_stride_x)));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        *(out_ptr + 1 * kernel_size2) = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                            in_ptr + ((d + 1) * input_stride_z + y * input_stride_y + x * input_stride_x)));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        *(out_ptr + 2 * kernel_size2) = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                            in_ptr + ((d + 2) * input_stride_z + y * input_stride_y + x * input_stride_x)));</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        out_ptr += 2 * kernel_size2;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Left over</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">for</span> (; d &lt; kernel_depth; d++)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = top_left_y; y &lt; y_e; y += dilation_y)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span> ((y &lt; 0 || y &gt;= input_h) &amp;&amp; has_pads)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="comment">// All the values will be the offset (will be zeros when not quantized)</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                memset(<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(out_ptr), pad_value, kernel_width * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                out_ptr += kernel_width;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = top_left_x; x &lt; x_e; x += dilation_x, ++out_ptr)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">if</span> ((x &lt; 0 || x &gt;= input_w) &amp;&amp; has_pads)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                        *out_ptr = pad_value;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                        *out_ptr = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                            in_ptr + (d * input_stride_z + y * input_stride_y + x * input_stride_x)));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="comment">// Append 1 if the convolution layer has biases</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        *out_ptr = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>.</p>

</div>
</div>
<a id="a44933f348338f8a4049d4ef0f641abc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44933f348338f8a4049d4ef0f641abc7">&#9670;&nbsp;</a></span>linearize_volume_nhwc() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::linearize_volume_nhwc </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const&#160;</td>
          <td class="paramname"><em>in_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>out_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>start_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_stride_z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pad_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dilation_y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00149">149</a> of file <a class="el" href="directconv2d_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_x        = start_x + kernel_width * dilation_x;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_y        = start_y + kernel_height * dilation_y;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_quant    = kernel_width * input_c;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> element_size = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> ((start_y &gt;= 0) &amp;&amp; (end_y &lt; input_h) &amp;&amp; (start_x &gt;= 0) &amp;&amp; (end_x &lt; input_w) &amp;&amp; (dilation_x == 1) &amp;&amp;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        (input_stride_y == input_c * element_size))</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = start_y; y &lt; end_y; y += dilation_y)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="comment">//optimized for no dilation and no boundary pixels</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            memcpy(out_ptr, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + (y * input_stride_z + start_x * input_stride_y)),</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                   input_c * kernel_width * element_size);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            out_ptr += input_c * kernel_width;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = start_y; y &lt; end_y; y += dilation_y)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">if</span> (y &lt; 0 || y &gt;= input_h)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                memset(<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(out_ptr), pad_value, pad_quant * element_size);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                out_ptr += pad_quant;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dilation_x &gt; 1 || start_x &lt; 0 || end_x &gt;= input_w || input_stride_y != input_c * element_size)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = start_x; x &lt; end_x; x += dilation_x)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <span class="keywordflow">if</span> (x &lt; 0 || x &gt;= input_w)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        memset(<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(out_ptr), pad_value, input_c * element_size);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        out_ptr += input_c;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        memcpy(out_ptr, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + (y * input_stride_z + x * input_stride_y)),</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                               input_c * element_size);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        out_ptr += input_c;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="comment">//optimized for no dilation and no boundary pixels</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                memcpy(out_ptr, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + (y * input_stride_z + start_x * input_stride_y)),</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                       input_c * kernel_width * element_size);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                out_ptr += input_c * kernel_width;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="comment">// Append 1 if the convolution layer has biases</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        *out_ptr = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>.</p>

</div>
</div>
<a id="a8b64c1f52fa0c0ea22f0d0d51730d499"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b64c1f52fa0c0ea22f0d0d51730d499">&#9670;&nbsp;</a></span>linearize_volume_nhwc() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::linearize_volume_nhwc </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *const&#160;</td>
          <td class="paramname"><em>in_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>out_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>start_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>kernel_height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_stride_z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pad_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dilation_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pad_right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00223">223</a> of file <a class="el" href="directconv2d_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_x              = start_x + kernel_width * dilation_x;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_y              = start_y + kernel_height * dilation_y;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_quant          = kernel_width * (input_c + pad_right);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> element_size       = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> channel_chunk_size = input_c * element_size;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">if</span> ((start_y &gt;= 0) &amp;&amp; (end_y &lt; input_h) &amp;&amp; (start_x &gt;= 0) &amp;&amp; (end_x &lt; input_w) &amp;&amp; (dilation_x == 1) &amp;&amp;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        (input_stride_y == channel_chunk_size))</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = start_y; y &lt; end_y; y += dilation_y)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="keyword">const</span> uint8_t *offset_ptr = in_ptr + (y * input_stride_z + start_x * input_stride_y);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> e = 0; e &lt; kernel_width; e++)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                memcpy(out_ptr, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(offset_ptr + e * channel_chunk_size), channel_chunk_size);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                out_ptr += input_c + pad_right;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = start_y; y &lt; end_y; y += dilation_y)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">if</span> (y &lt; 0 || y &gt;= input_h)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                memset(<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(out_ptr), pad_value, pad_quant * element_size);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                out_ptr += pad_quant;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (dilation_x &gt; 1 || start_x &lt; 0 || end_x &gt;= input_w || input_stride_y != channel_chunk_size)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = start_x; x &lt; end_x; x += dilation_x)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                {</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keywordflow">if</span> (x &lt; 0 || x &gt;= input_w)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        memset(<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(out_ptr), pad_value, (input_c + pad_right) * element_size);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        out_ptr += input_c + pad_right;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                        memcpy(out_ptr, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + (y * input_stride_z + x * input_stride_y)),</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                               channel_chunk_size);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                        out_ptr += input_c + pad_right;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                <span class="keyword">const</span> uint8_t *offset_ptr = in_ptr + (y * input_stride_z + start_x * input_stride_y);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> e = 0; e &lt; kernel_width; e++)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    memcpy(out_ptr, <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(offset_ptr + e * channel_chunk_size),</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                           channel_chunk_size);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    out_ptr += input_c + pad_right;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// Append 1 if the convolution layer has biases</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        *out_ptr = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>.</p>

</div>
</div>
<a id="a7960bee7752a705979ffbb1517349ce8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7960bee7752a705979ffbb1517349ce8">&#9670;&nbsp;</a></span>neon_fp16_nchw_directconv2d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::neon_fp16_nchw_directconv2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1187fbb160f74d1e828ee75f35922fec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1187fbb160f74d1e828ee75f35922fec">&#9670;&nbsp;</a></span>neon_fp32_nchw_directconv2d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_nchw_directconv2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml">all.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    convolve_nchw&lt;float&gt;(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="aab2db831058c0290f2c92a3fde0a1c5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab2db831058c0290f2c92a3fde0a1c5e">&#9670;&nbsp;</a></span>neon_fp32_nhwc_directconv2d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_nhwc_directconv2d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp32_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a9fa5aa980323a460612700ef7c84bc99">convolve_nhwc&lt;float&gt;</a>(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a9fa5aa980323a460612700ef7c84bc99">convolve_nhwc&lt; float &gt;()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a2b9591f4e6b392de155eeaa188124f9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b9591f4e6b392de155eeaa188124f9b">&#9670;&nbsp;</a></span>run_im2col()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">305</a> of file <a class="el" href="directconv2d_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::WIDTH);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::HEIGHT);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a> = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::CHANNEL);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_w        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_h        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_c        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_x = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().x();</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y();</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z();</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_left();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.pad_top();</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride().first;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y       = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride().second;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_value =</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;data_type()) ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().offset : 0;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> kernel_width  = kernel_dims.width;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> kernel_height = kernel_dims.height;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    Window window_in_out(window);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">// The first three dimensions of the input and output are increased by the inner loops</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    window_in_out.set(Window::DimX, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    window_in_out.set(Window::DimY, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    window_in_out.set(Window::DimZ, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Create iterators</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, window_in_out);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window_in_out);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        window,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> start_w = <span class="keywordtype">id</span>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>] * stride_x - pad_left;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> start_h = <span class="keywordtype">id</span>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>] * stride_y - pad_top;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="comment">// Get pointers</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keyword">const</span> uint8_t *<span class="keyword">const</span> input_ptr = in.ptr();</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keyword">auto</span>                 output_ptr =</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr() + (<span class="keywordtype">id</span>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>] + <span class="keywordtype">id</span>[<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>] * convolved_dims.first) *</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                                      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <span class="comment">// Linearize volume</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">if</span> (is_nchw)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                linearize_volume_nchw&lt;T, has_pads&gt;(</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    input_ptr, output_ptr, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>, start_w, start_h, kernel_width, kernel_height, input_c, input_w,</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    input_h, input_stride_x, input_stride_y, input_stride_z, pad_value, dilation.x(), dilation.y());</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                <span class="keywordflow">if</span> (input_pad_right &gt; 0)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    linearize_volume_nhwc&lt;T, has_pads&gt;(input_ptr, output_ptr, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>, start_w, start_h, kernel_width,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                                       kernel_height, input_w, input_h, input_c, input_stride_y,</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                       input_stride_z, pad_value, dilation.x(), dilation.y(),</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                                       input_pad_right);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    linearize_volume_nhwc&lt;T, has_pads&gt;(input_ptr, output_ptr, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>, start_w, start_h, kernel_width,</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                                                       kernel_height, input_w, input_h, input_c, input_stride_y,</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                                       input_stride_z, pad_value, dilation.x(), dilation.y());</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        },</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        in, out);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::channel_idx</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::height_idx</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00324">arm_compute::is_data_type_quantized()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">arm_compute::cpu::width_idx</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00073">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00082">Size2D::y()</a>.</p>

</div>
</div>
<a id="a50910250d4a1c7e2beabac96a0258395"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50910250d4a1c7e2beabac96a0258395">&#9670;&nbsp;</a></span>run_im2col_bf16_nchw_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_bf16_nchw_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a94c225e998a7dc84dfc9419521282307"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94c225e998a7dc84dfc9419521282307">&#9670;&nbsp;</a></span>run_im2col_bf16_nchw_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_bf16_nchw_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a6f29cab405eaf12bfc2c6f38673ff151"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f29cab405eaf12bfc2c6f38673ff151">&#9670;&nbsp;</a></span>run_im2col_bf16_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_bf16_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="af0757b345eb8d771c2419c22e7d07ebe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0757b345eb8d771c2419c22e7d07ebe">&#9670;&nbsp;</a></span>run_im2col_bf16_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_bf16_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="aa871b54de15a08f84d819c4a26289c1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa871b54de15a08f84d819c4a26289c1a">&#9670;&nbsp;</a></span>run_im2col_fp16_nchw_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp16_nchw_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00062">62</a> of file <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml">fp16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#if defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float16_t, false, true&gt;(</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#else  // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#endif // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00226">internal_run_im2col_fp16_nchw_nopad()</a>.</p>

</div>
</div>
<a id="a5fe5e27c72f5d0d2af17fce8dd64a80c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fe5e27c72f5d0d2af17fce8dd64a80c">&#9670;&nbsp;</a></span>run_im2col_fp16_nchw_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp16_nchw_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml">fp16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#if defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float16_t, true, true&gt;(</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#else  // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">#endif // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00206">internal_run_im2col_fp16_nchw_pad()</a>.</p>

</div>
</div>
<a id="ab174d42becf4a5afd71c42439846cb10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab174d42becf4a5afd71c42439846cb10">&#9670;&nbsp;</a></span>run_im2col_fp16_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp16_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml">fp16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#if defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float16_t, false, false&gt;(</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#else  // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#endif // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00186">internal_run_im2col_fp16_nopad()</a>.</p>

</div>
</div>
<a id="a59a6db253b0b97d1452d636201921878"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59a6db253b0b97d1452d636201921878">&#9670;&nbsp;</a></span>run_im2col_fp16_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp16_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml">fp16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#if defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float16_t, true, false&gt;(</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#else  // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#endif // defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) &amp;&amp; defined(ENABLE_FP16_KERNELS)</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00161">internal_run_im2col_fp16_pad()</a>.</p>

</div>
</div>
<a id="a43a9afe7e7202432341abf09d0fd95ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43a9afe7e7202432341abf09d0fd95ca">&#9670;&nbsp;</a></span>run_im2col_fp32_nchw_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp32_nchw_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml">all.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float, false, true&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                                              kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="aee834b7d6673add62d26e96a4f5d4853"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee834b7d6673add62d26e96a4f5d4853">&#9670;&nbsp;</a></span>run_im2col_fp32_nchw_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp32_nchw_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml">all.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float, true, true&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                                             kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a79e6d18bb67d5043cf86c2a52ebdacd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79e6d18bb67d5043cf86c2a52ebdacd8">&#9670;&nbsp;</a></span>run_im2col_fp32_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp32_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float, false, false&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                                                               kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a35d27349ace37fa3b1eac208bd59eba7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35d27349ace37fa3b1eac208bd59eba7">&#9670;&nbsp;</a></span>run_im2col_fp32_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_fp32_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00054">54</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;float, true, false&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                                              kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="afd5040ec4c40822b435343afadbcc2c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd5040ec4c40822b435343afadbcc2c3">&#9670;&nbsp;</a></span>run_im2col_int8_nopad_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_int8_nopad_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00116">116</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;int8_t, false, false&gt;(</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="acb64a58abbdcc61c56bde1b955003ad3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb64a58abbdcc61c56bde1b955003ad3">&#9670;&nbsp;</a></span>run_im2col_qasymm8_nchw_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_qasymm8_nchw_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00099">99</a> of file <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml">all.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;qasymm8_t, false, true&gt;(</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a3f387e09ff96cfa0981409921a7692ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f387e09ff96cfa0981409921a7692ab">&#9670;&nbsp;</a></span>run_im2col_qasymm8_nchw_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_im2col_qasymm8_nchw_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml">all.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;qasymm8_t, true, true&gt;(</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="abdea1aa79cd9762e1fb7aa360b77c80c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdea1aa79cd9762e1fb7aa360b77c80c">&#9670;&nbsp;</a></span>run_im2col_qasymm8_nopad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_qasymm8_nopad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nhwc_2neon_2qasymm8_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="directconv2d_2nhwc_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;qasymm8_t, false, false&gt;(</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="af1dc5749606a9baea48ea819b0e00eb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1dc5749606a9baea48ea819b0e00eb3">&#9670;&nbsp;</a></span>run_im2col_qasymm8_pad()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_qasymm8_pad </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="directconv2d_2nhwc_2neon_2qasymm8_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="directconv2d_2nhwc_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;qasymm8_t, true, false&gt;(</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a595a5b2aec6d5aec7db0748e40e37705"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a595a5b2aec6d5aec7db0748e40e37705">&#9670;&nbsp;</a></span>run_im2col_qasymm8_pad_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_qasymm8_pad_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00146">146</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;qasymm8_t, true, false&gt;(</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a5d98e5c4986590c071189ca093aa7484"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d98e5c4986590c071189ca093aa7484">&#9670;&nbsp;</a></span>run_im2col_uint8_nopad_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::kernels::run_im2col_uint8_nopad_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::pair&lt; unsigned int, unsigned int &gt;&#160;</td>
          <td class="paramname"><em>convolved_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_dims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>input_pad_right</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_bias</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00131">131</a> of file <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml">CpuIm2ColKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    arm_compute::cpu::kernels::run_im2col&lt;uint8_t, false, false&gt;(</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, convolved_dims, kernel_dims, dilation, input_pad_right, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>.</p>

</div>
</div>
<a id="a9a5b4a350adf47cb50f854c45a5e7048"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a5b4a350adf47cb50f854c45a5e7048">&#9670;&nbsp;</a></span>validate_and_configure_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;<a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>, <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&gt; arm_compute::cpu::kernels::validate_and_configure_window </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00092">92</a> of file <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml">CpuDirectConv2dKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_layout() == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    Window win{};</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">bool</span>   window_changed = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Configure window without any padding</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, Steps());</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    Status err =</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        (window_changed) ? <a class="code" href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a>(ErrorCode::RUNTIME_ERROR, <span class="stringliteral">&quot;Insufficient Padding!&quot;</span>) : Status{};</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> std::make_pair(err, win);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00158">ARM_COMPUTE_CREATE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a59e56af19e754a6aa26a612ebf91d05fa62be47fdd89da032cf78dfce82239579">arm_compute::RUNTIME_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00077">CpuConvertQuantizedSignednessKernel::configure()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00082">CpuCopyKernel::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00301">CpuPool2dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00183">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">NEInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00108">CpuDirectConv2dKernel::configure()</a>, <a class="el" href="_n_e_f_f_t_scale_kernel_8cpp_source.xhtml#l00092">NEFFTScaleKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_n_e_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00082">NEFFTDigitReverseKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00228">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00108">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00143">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00159">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00097">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00127">NEMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00091">CLGatherKernel::configure()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01082">NEFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00158">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00101">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00092">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00125">ClGemmReshapeRhsMatrixKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00104">ClCol2ImKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00091">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00102">NEStridedSliceKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00317">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00190">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00126">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00093">CLStackLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00191">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00103">CpuCopyKernel::validate()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00319">CpuActivationKernel::validate()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00351">CpuPool2dKernel::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00136">CpuDirectConv2dKernel::validate()</a>, <a class="el" href="_n_e_f_f_t_scale_kernel_8cpp_source.xhtml#l00109">NEFFTScaleKernel::validate()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00286">ClGemmLowpMatrixMultiplyNativeKernel::validate()</a>, <a class="el" href="_n_e_instance_normalization_layer_kernel_8cpp_source.xhtml#l00159">NEInstanceNormalizationLayerKernel::validate()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00155">ClWinogradFilterTransformKernel::validate()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00253">ClWinogradInputTransformKernel::validate()</a>, <a class="el" href="_n_e_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00145">NEFFTDigitReverseKernel::validate()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00193">CLChannelShuffleLayerKernel::validate()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01121">NEFFTRadixStageKernel::validate()</a>, <a class="el" href="_n_e_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00144">NEMeanStdDevNormalizationKernel::validate()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00293">ClWinogradOutputTransformKernel::validate()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00353">ClGemmMatrixMultiplyNativeKernel::validate()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00159">ClGemmReshapeRhsMatrixKernel::validate()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00320">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::validate()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00243">CLNormalizationLayerKernel::validate()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00162">CLQLSTMLayerNormalizationKernel::validate()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00256">ClGemmLowpMatrixMultiplyReshapedKernel::validate()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00167">CLComparisonKernel::validate()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00126">CLGatherKernel::validate()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00130">CLFFTDigitReverseKernel::validate()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00149">ClCol2ImKernel::validate()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00145">CLFFTRadixStageKernel::validate()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00436">ClGemmLowpMatrixMultiplyReshapedOnlyRhsMMULKernel::validate()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00475">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::validate()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00127">NEStridedSliceKernel::validate()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00221">CLPriorBoxLayerKernel::validate()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00393">ClIm2ColKernel::validate()</a>, and <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00126">CLStackLayerKernel::validate()</a>.</p>

</div>
</div>
<a id="acf9ea6633274730cd08b8b8fab3a6fe6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf9ea6633274730cd08b8b8fab3a6fe6">&#9670;&nbsp;</a></span>validate_arguments()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> arm_compute::cpu::kernels::validate_arguments </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml">CpuDirectConv2dKernel.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_layout() == <a class="code" href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">DataLayout::UNKNOWN</a>);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, 1, DataType::F16, DataType::F32);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_layout();</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>   = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::WIDTH);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::HEIGHT);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a> = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::CHANNEL);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(weights-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>) != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(weights-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>) != weights-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a>));</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(weights-&gt;num_dimensions() &gt; 4);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == DataLayout::NHWC &amp;&amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_type() != DataType::F32);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a>);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// Checks performed when output is configured</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;total_size() != 0)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = <a class="code" href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">misc::shape_calculator::compute_deep_convolution_shape</a>(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, *weights, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;data_type();</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;tensor_shape(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;data_type() != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00298">ARM_COMPUTE_RETURN_ERROR_ON</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00117">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00677">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00294">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::channel_idx</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00784">arm_compute::misc::shape_calculator::compute_deep_convolution_shape()</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::data_layout</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::F16</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::height_idx</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00469">arm_compute::test::validation::output_shape</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::UNKNOWN</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">arm_compute::cpu::width_idx</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00077">CpuConvertQuantizedSignednessKernel::configure()</a>, <a class="el" href="_cpu_dequantize_kernel_8cpp_source.xhtml#l00069">CpuDequantizeKernel::configure()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00173">CpuReshapeKernel::configure()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00082">CpuCopyKernel::configure()</a>, <a class="el" href="_cpu_concatenate_batch_kernel_8cpp_source.xhtml#l00159">CpuConcatenateBatchKernel::configure()</a>, <a class="el" href="_cpu_permute_kernel_8cpp_source.xhtml#l00230">CpuPermuteKernel::configure()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00070">CpuFloorKernel::configure()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00066">CpuConcatenateHeightKernel::configure()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00059">CpuConcatenateWidthKernel::configure()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00067">CpuQuantizeKernel::configure()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00269">CpuActivationKernel::configure()</a>, <a class="el" href="_cpu_concatenate_depth_kernel_8cpp_source.xhtml#l00161">CpuConcatenateDepthKernel::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00301">CpuPool2dKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00410">CpuDirectConv2dOutputStageKernel::configure()</a>, <a class="el" href="_cpu_max_unpooling_layer_kernel_8cpp_source.xhtml#l00093">CpuMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00715">CpuGemmLowpMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00116">CpuPool3dKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00118">CpuSubKernel::configure()</a>, <a class="el" href="_cpu_add_mul_add_kernel_8cpp_source.xhtml#l00121">CpuAddMulAddKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00267">CpuGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00128">CpuDepthwiseConv2dNativeKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00630">CpuGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00174">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00163">CpuCastKernel::configure()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00125">CpuGemmMatrixMultiplyKernel::configure()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00145">CpuAddKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00183">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00184">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01503">CpuMulKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00904">CpuGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00090">CpuFloorKernel::infer_window()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00087">CpuConvertQuantizedSignednessKernel::validate()</a>, <a class="el" href="_cpu_dequantize_kernel_8cpp_source.xhtml#l00096">CpuDequantizeKernel::validate()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00103">CpuCopyKernel::validate()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00186">CpuReshapeKernel::validate()</a>, <a class="el" href="_cpu_concatenate_batch_kernel_8cpp_source.xhtml#l00194">CpuConcatenateBatchKernel::validate()</a>, <a class="el" href="_cpu_permute_kernel_8cpp_source.xhtml#l00250">CpuPermuteKernel::validate()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00100">CpuFloorKernel::validate()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00073">CpuConcatenateWidthKernel::validate()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00079">CpuConcatenateHeightKernel::validate()</a>, <a class="el" href="_cpu_quantize_kernel_8cpp_source.xhtml#l00144">CpuQuantizeKernel::validate()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00319">CpuActivationKernel::validate()</a>, <a class="el" href="_cpu_concatenate_depth_kernel_8cpp_source.xhtml#l00192">CpuConcatenateDepthKernel::validate()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00351">CpuPool2dKernel::validate()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00746">CpuGemmLowpMatrixMultiplyKernel::validate()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00152">CpuPool3dKernel::validate()</a>, <a class="el" href="_cpu_direct_conv2d_output_stage_kernel_8cpp_source.xhtml#l00512">CpuDirectConv2dOutputStageKernel::validate()</a>, <a class="el" href="_cpu_max_unpooling_layer_kernel_8cpp_source.xhtml#l00114">CpuMaxUnpoolingLayerKernel::validate()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00188">CpuSubKernel::validate()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00309">CpuGemmLowpQuantizeDownInt32ScaleKernel::validate()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00180">CpuCastKernel::validate()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00173">CpuAddKernel::validate()</a>, <a class="el" href="_cpu_depthwise_conv2d_native_kernel_8cpp_source.xhtml#l00156">CpuDepthwiseConv2dNativeKernel::validate()</a>, <a class="el" href="_cpu_add_mul_add_kernel_8cpp_source.xhtml#l00161">CpuAddMulAddKernel::validate()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00100">CpuWeightsReshapeKernel::validate()</a>, <a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00677">CpuGemmLowpOffsetContributionKernel::validate()</a>, <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00489">CpuScaleKernel::validate()</a>, <a class="el" href="_cpu_gemm_matrix_multiply_kernel_8cpp_source.xhtml#l00174">CpuGemmMatrixMultiplyKernel::validate()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01721">CpuMulKernel::validate()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00204">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel::validate()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00216">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel::validate()</a>, <a class="el" href="_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00217">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel::validate()</a>, and <a class="el" href="_cpu_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00946">CpuGemmLowpOffsetContributionOutputStageKernel::validate()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00347">gemm_interleaved.hpp:347</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:110</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">TensorShape output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00469">LSTMLayerQuantized.cpp:469</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_1_1kernels_xhtml_a5fe5e27c72f5d0d2af17fce8dd64a80c"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a5fe5e27c72f5d0d2af17fce8dd64a80c">arm_compute::cpu::kernels::run_im2col_fp16_nchw_pad</a></div><div class="ttdeci">void run_im2col_fp16_nchw_pad(const ITensor *src, ITensor *dst, const Window &amp;window, DataLayout data_layout, const PadStrideInfo &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const Size2D &amp;kernel_dims, const Size2D &amp;dilation, uint32_t input_pad_right, bool has_bias)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00042">fp16.cpp:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_1_1kernels_xhtml_a59a6db253b0b97d1452d636201921878"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a59a6db253b0b97d1452d636201921878">arm_compute::cpu::kernels::run_im2col_fp16_pad</a></div><div class="ttdeci">void run_im2col_fp16_pad(const ITensor *src, ITensor *dst, const Window &amp;window, DataLayout data_layout, const PadStrideInfo &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const Size2D &amp;kernel_dims, const Size2D &amp;dilation, uint32_t input_pad_right, bool has_bias)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00034">fp16.cpp:34</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">acl::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00482">Acl.hpp:482</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00677">Validate.h:677</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">Validate.h:952</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a9aeced5a5128f60a31ea3e327a45ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">arm_compute::test::validation::has_bias</a></div><div class="ttdeci">const bool has_bias</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">Im2Col.cpp:152</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="asrc_2core_2_c_p_p_2_validate_8h_xhtml_ad2633f3560322e1f8d926949dec1b730"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00117">Validate.h:117</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a324e868d35ee9cec67b7dd8ad0b1ad05"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a324e868d35ee9cec67b7dd8ad0b1ad05">arm_compute::cpu::vector_type</a></div><div class="ttdeci">wrapper::traits::neon_vector_t&lt; element_type, window_step &gt; vector_type</div><div class="ttdef"><b>Definition:</b> <a href="quantize_2generic_2neon_2impl_8h_source.xhtml#l00063">impl.h:63</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_1_1kernels_xhtml_aa871b54de15a08f84d819c4a26289c1a"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#aa871b54de15a08f84d819c4a26289c1a">arm_compute::cpu::kernels::run_im2col_fp16_nchw_nopad</a></div><div class="ttdeci">void run_im2col_fp16_nchw_nopad(const ITensor *src, ITensor *dst, const Window &amp;window, DataLayout data_layout, const PadStrideInfo &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const Size2D &amp;kernel_dims, const Size2D &amp;dilation, uint32_t input_pad_right, bool has_bias)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00062">fp16.cpp:62</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a62947a5a80433465f50372c441be3c8c"><div class="ttname"><a href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">arm_compute::vreduce</a></div><div class="ttdeci">float vreduce(const float32x4_t &amp;v)</div><div class="ttdoc">Reduce a vector to be a scalar by accumulating all lanes in the vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00537">NEMath.inl:537</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">Cast.cpp:222</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00201">Helpers.inl:201</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_1_1kernels_xhtml_a9fa5aa980323a460612700ef7c84bc99"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#a9fa5aa980323a460612700ef7c84bc99">arm_compute::cpu::kernels::convolve_nhwc&lt; float &gt;</a></div><div class="ttdeci">template void convolve_nhwc&lt; float &gt;(const Window &amp;window, const ITensor *src, const ITensor *weights, ITensor *dst, const PadStrideInfo &amp;conv_info)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a1da797d2762c1cdbb73bfc83136c3a38"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1da797d2762c1cdbb73bfc83136c3a38">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DIMENSIONS(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00294">Validate.h:294</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c"><div class="ttname"><a href="namespacearm__compute.xhtml#a6df16a1b3b5af590a14f55e983d3428ea6ce26a62afab55d7606ad4e92428b30c">arm_compute::UNKNOWN</a></div><div class="ttdeci">@ UNKNOWN</div><div class="ttdoc">Unknown CL kernel type.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_types_8h_source.xhtml#l00080">CLTypes.h:80</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00161">Validate.h:161</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00324">DataTypeUtils.h:324</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2065fcea8e34c2f3ee039d5a0332348b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">arm_compute::cpu::channel_idx</a></div><div class="ttdeci">const size_t channel_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">impl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2daf774ab1f2b95de283245a361d455f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">arm_compute::cpu::width_idx</a></div><div class="ttdeci">const size_t width_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">impl.h:37</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_af1b8ff8eb557a2ad11272f1505f45d34"><div class="ttname"><a href="_error_8h.xhtml#af1b8ff8eb557a2ad11272f1505f45d34">ARM_COMPUTE_CREATE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_CREATE_ERROR(error_code, msg)</div><div class="ttdoc">Creates an error with a given message.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00158">Error.h:158</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1misc_1_1shape__calculator_xhtml_ac93cc76b563b366f030b8310a46046c3"><div class="ttname"><a href="namespacearm__compute_1_1misc_1_1shape__calculator.xhtml#ac93cc76b563b366f030b8310a46046c3">arm_compute::misc::shape_calculator::compute_deep_convolution_shape</a></div><div class="ttdeci">TensorShape compute_deep_convolution_shape(const TensorShape &amp;input_shape, DataLayout input_data_layout, const TensorShape &amp;weights_shape, const PadStrideInfo &amp;conv_info)</div><div class="ttdoc">Calculate the deep convolution shape output shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_shape_calculator_8h_source.xhtml#l00784">ShapeCalculator.h:784</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_1_1kernels_xhtml_ab174d42becf4a5afd71c42439846cb10"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#ab174d42becf4a5afd71c42439846cb10">arm_compute::cpu::kernels::run_im2col_fp16_nopad</a></div><div class="ttdeci">void run_im2col_fp16_nopad(const ITensor *src, ITensor *dst, const Window &amp;window, DataLayout data_layout, const PadStrideInfo &amp;conv_info, std::pair&lt; unsigned int, unsigned int &gt; convolved_dims, const Size2D &amp;kernel_dims, const Size2D &amp;dilation, uint32_t input_pad_right, bool has_bias)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00054">fp16.cpp:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa6d92f521dc4f05ac7f4c856dcfe263e"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">arm_compute::cpu::height_idx</a></div><div class="ttdeci">const size_t height_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">impl.h:38</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">cpu</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml">kernels</a></li>
    <li class="footer">Generated on Tue May 28 2024 09:01:12 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
