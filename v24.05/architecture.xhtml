<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Library Architecture</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('architecture.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Library Architecture </div>  </div>
</div><!--header-->
<div class="contents">
<div class="toc"><h3>Table of Contents</h3>
<ul><li class="level1"><a href="#architecture_compute_library">Compute Library architecture</a></li>
<li class="level1"><a href="#architecture_fast_math">Fast-math support</a></li>
<li class="level1"><a href="#bf16_acceleration">BF16 acceleration</a></li>
<li class="level1"><a href="#architecture_thread_safety">Thread-safety</a></li>
<li class="level1"><a href="#architecture__algorithms">Algorithms</a></li>
<li class="level1"><a href="#architecture_images_tensors">Images, padding, border modes and tensors</a><ul><li class="level2"><a href="#architecture_images_tensors_padding_and_border">Padding and border modes</a><ul><li class="level3"><a href="#architecture_images_tensors_padding">Padding</a></li>
<li class="level3"><a href="#architecture_images_tensors_valid_region">Valid regions</a></li>
</ul>
</li>
<li class="level2"><a href="#architecture_images_tensors_tensors">Tensors</a></li>
<li class="level2"><a href="#architecture_images_tensors_description_conventions">Images and Tensors description conventions</a></li>
<li class="level2"><a href="#architecture_images_tensors_working_with_objects">Working with Images and Tensors using iterators</a></li>
<li class="level2"><a href="#architecture_images_tensors_sub_tensors">Sub-tensors</a></li>
</ul>
</li>
<li class="level1"><a href="#architecture_memory_manager">MemoryManager</a><ul><li class="level2"><a href="#architecture_memory_manager_component">MemoryGroup, MemoryPool and MemoryManager Components</a><ul><li class="level3"><a href="#architecture_memory_manager_component_memory_group">MemoryGroup</a></li>
<li class="level3"><a href="#architecture_memory_manager_component_memory_pool">MemoryPool</a></li>
<li class="level3"><a href="#architecture_memory_manager_component_memory_manager_components">MemoryManager Components</a></li>
</ul>
</li>
<li class="level2"><a href="#architecture_memory_manager_working_with_memory_manager">Working with the Memory Manager</a></li>
<li class="level2"><a href="#architecture_memory_manager_function_support">Function support</a></li>
</ul>
</li>
<li class="level1"><a href="#architecture_import_memory">Import Memory Interface</a></li>
<li class="level1"><a href="#architecture_opencl_tuner">OpenCL Tuner</a></li>
<li class="level1"><a href="#architecture_cl_queue_priorities">OpenCL Queue Priorities</a></li>
<li class="level1"><a href="#architecture_weights_manager">Weights Manager</a><ul><li class="level2"><a href="#architecture_weights_manager_working_with_weights_manager">Working with the Weights Manager</a></li>
</ul>
</li>
<li class="level1"><a href="#programming_model">Programming Model</a><ul><li class="level2"><a href="#programming_model_functions">Functions</a></li>
<li class="level2"><a href="#programming_model_scheduler">OpenCL Scheduler</a></li>
<li class="level2"><a href="#programming_model__events_sync">OpenCL events and synchronization</a></li>
<li class="level2"><a href="#programming_model_cl_neon">OpenCL / Arm® Neon™ interoperability</a></li>
</ul>
</li>
<li class="level1"><a href="#architecture_experimental">Experimental Features</a><ul><li class="level2"><a href="#architecture_experimental_run_time_context">Run-time Context</a></li>
<li class="level2"><a href="#architecture_experimental_clvk">CLVK</a></li>
</ul>
</li>
<li class="level1"><a href="#architecture_experimental_api">Experimental Application Programming Interface</a><ul><li class="level2"><a href="#architecture_experimental_api_overview">Overview</a></li>
<li class="level2"><a href="#architecture_experimental_api_objects">Fundamental objects</a><ul><li class="level3"><a href="#architecture_experimental_api_objects_context">AclContext or Context</a><ul><li class="level4"><a href="#architecture_experimental_api_object_context_target">AclTarget</a></li>
<li class="level4"><a href="#architecture_experimental_api_object_context_execution_mode">AclExecutionMode</a></li>
<li class="level4"><a href="#architecture_experimental_api_object_context_capabilities">AclTargetCapabilities</a></li>
<li class="level4"><a href="#architecture_experimental_api_object_context_allocator">Allocator</a></li>
</ul>
</li>
<li class="level3"><a href="#architecture_experimental_api_objects_tensor">AclTensor or Tensor</a></li>
<li class="level3"><a href="#architecture_experimental_api_objects_queue">AclQueue or Queue</a></li>
</ul>
</li>
<li class="level2"><a href="#architecture_experimental_api_internal">Internal</a><ul><li class="level3"><a href="#architecture_experimental_api_internal_operator_vs_kernels">Operators vs Kernels</a></li>
</ul>
</li>
<li class="level2"><a href="#architecture_experimental_build_multi_isa">Build multi-ISA binary</a></li>
<li class="level2"><a href="#architecture_experimental_per_operator_build">Per-operator build</a></li>
<li class="level2"><a href="#architecture_experimental_build_high_priority_operators">Build high priority operators</a></li>
</ul>
</li>
</ul>
</div>
<div class="textblock"><h1><a class="anchor" id="architecture_compute_library"></a>
Compute Library architecture</h1>
<p>The Compute Library is a collection of low level algorithm implementations known as kernels <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a>. These kernels are implemented as operators <a class="el" href="classarm__compute_1_1_i_operator.xhtml">IOperator</a> that do not allocate any memory (i.e. all the memory allocations/mappings have to be handled by the caller) and are are designed to be embedded in existing projects and applications.</p>
<p>A higher-level interface wraps the operators into functions <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a> that:</p><ul>
<li>Performs memory allocation of images and tensors through the use of standard malloc().</li>
<li>Enables multi-threading of Arm® Neon™ code in a very basic way using a very simple pool of threads.</li>
<li>For OpenCL, uses the default <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a> command queue for all mapping operations and kernels.</li>
</ul>
<p>For maximum performance, it is expected that the users would re-implement an equivalent to the function interface which suits better their needs (With a more clever multi-threading strategy, load-balancing between Arm® Neon™ and OpenCL, etc.)</p>
<h1><a class="anchor" id="architecture_fast_math"></a>
Fast-math support</h1>
<p>Compute Library supports different types of convolution methods, fast-math flag is only used for the Winograd algorithm. When the fast-math flag is enabled, both Arm® Neon™ and CL convolution layers will try to dispatch the fastest implementation available, which may introduce a drop in accuracy as well. The different scenarios involving the fast-math flag are presented below:</p><ul>
<li>For FP32:<ul>
<li>no-fast-math: Only supports Winograd 3x3,3x1,1x3,5x1,1x5,7x1,1x7</li>
<li>fast-math: Supports Winograd 3x3,3x1,1x3,5x1,1x5,7x1,1x7,5x5,7x7</li>
</ul>
</li>
<li>For fp16:<ul>
<li>no-fast-math: No Winograd support</li>
<li>fast-math: Supports Winograd 3x3,3x1,1x3,5x1,1x5,7x1,1x7,5x5,7x7</li>
</ul>
</li>
</ul>
<h1><a class="anchor" id="bf16_acceleration"></a>
BF16 acceleration</h1>
<p>Required toolchain: android-ndk-r23-beta5 or later.</p>
<p>To build for BF16: "neon" flag should be set "=1" and "arch" has to be "=armv8.6-a", "=armv8.6-a-sve", or "=armv8.6-a-sve2". For example: </p><pre class="fragment">scons arch=armv8.6-a-sve neon=1 opencl=0 extra_cxx_flags="-fPIC" benchmark_tests=0 validation_tests=0 validation_examples=1 os=android Werror=0 toolchain_prefix=aarch64-linux-android29
</pre><p>To enable BF16 acceleration when running FP32 "fast-math" has to be enabled and that works only for Neon convolution layer using cpu gemm. In this scenario on CPU: the CpuGemmConv2d kernel performs the conversion from FP32, type of input tensor, to BF16 at block level to exploit the arithmetic capabilities dedicated to BF16. Then transforms back to FP32, the output tensor type.</p>
<h1><a class="anchor" id="architecture_thread_safety"></a>
Thread-safety</h1>
<p>Although the library supports multi-threading during workload dispatch, thus parallelizing the execution of the workload at multiple threads, the current runtime module implementation is not thread-safe in the sense of executing different functions from separate threads. This lies to the fact that the provided scheduling mechanism wasn't designed with thread-safety in mind. As it is true with the rest of the runtime library a custom scheduling mechanism can be re-implemented to account for thread-safety if needed and be injected as the library's default scheduler.</p>
<h1><a class="anchor" id="architecture__algorithms"></a>
Algorithms</h1>
<p>All computer vision algorithms in this library have been implemented following the <a href="https://www.khronos.org/registry/vx/specs/1.1/html/">OpenVX 1.1 specifications</a>. Please refer to the Khronos documentation for more information.</p>
<h1><a class="anchor" id="architecture_images_tensors"></a>
Images, padding, border modes and tensors</h1>
<p>Most kernels and functions in the library process images, however, in order to be future proof most of the kernels actually accept tensors. See below for more information about how they are related.</p>
<dl class="section attention"><dt>Attention</dt><dd>Each memory object can be written by only one kernel, however it can be read by several kernels. Writing to the same object from several kernels will result in undefined behavior. The kernel writing to an object must be configured before the kernel(s) reading from it.</dd></dl>
<h2><a class="anchor" id="architecture_images_tensors_padding_and_border"></a>
Padding and border modes</h2>
<p>Several algorithms require a neighborhood around the current pixel to compute it's value. This means the algorithm will not be able to process the borders of the image unless you give it more information about how those border pixels should be processed. The <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> enum is used for this purpose.</p>
<p>You have 3 types of <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> :</p>
<ul>
<li><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a> : Neighbor pixels outside of the image are treated as undefined. As a result all the pixels which are on the border will have a value which is undefined.</li>
<li><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">BorderMode::REPLICATE</a> : Neighbor pixels outside of the image are treated as having the same value as the closest valid pixel.</li>
<li><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">BorderMode::CONSTANT</a> : Neighbor pixels outside of the image are treated as having the same constant value. (The user can choose what this value should be).</li>
</ul>
<p>Moreover both OpenCL and Arm® Neon™ use vector loads and stores instructions to access the data in buffers, so in order to avoid having special cases to handle for the borders all the images and tensors used in this library must be padded.</p>
<h3><a class="anchor" id="architecture_images_tensors_padding"></a>
Padding</h3>
<p>There are different ways padding can be calculated:</p>
<ul>
<li>Accurate padding:</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>It's important to call allocate <b>after</b> the function is configured: if the image / tensor is already allocated then the function will shrink its execution window instead of increasing the padding. (See below for more details).</dd></dl>
<ul>
<li>Manual padding / no padding / auto padding: You can allocate your images / tensors up front (before configuring your functions). In that case the function will use whatever padding is available and will shrink its execution window if there isn't enough padding available (which translates into a smaller valid region for the output). See also <a class="el" href="architecture.xhtml#architecture_images_tensors_valid_region">Valid regions</a>). If you don't want to manually set the padding but still want to allocate your objects upfront then you can use auto_padding. It guarantees that the allocation will have enough padding to run any of the provided functions.</li>
</ul>
<div class="fragment"><div class="line"><a class="code" href="struct_image.xhtml">Image</a>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>{}, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>{};</div>
<div class="line">NEScale     <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>{};</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Create an empty grayscale 640x480 image</span></div>
<div class="line"><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.allocator()-&gt;init(TensorInfo(640, 480, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>));</div>
<div class="line"> </div>
<div class="line">constexpr <span class="keywordtype">int</span> scale_factor = 2;</div>
<div class="line">TensorInfo dst_tensor_info(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.info()-&gt;dimension(0) / scale_factor, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.info()-&gt;dimension(1) / scale_factor,</div>
<div class="line">                           <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">Format::U8</a>);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Configure the destination image</span></div>
<div class="line"><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.allocator()-&gt;init(dst_tensor_info);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Configure Scale function object:</span></div>
<div class="line"><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>.<a class="code" href="classarm__compute_1_1_n_e_scale.xhtml#afe4c55cb7564734d41554649f80df061">configure</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, ScaleKernelInfo{</div>
<div class="line">            <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">InterpolationPolicy::NEAREST_NEIGHBOR</a>,</div>
<div class="line">            <a class="code" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">BorderMode::UNDEFINED</a>,</div>
<div class="line">            PixelValue(),</div>
<div class="line">            <a class="code" href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">SamplingPolicy::CENTER</a>,</div>
<div class="line">            <span class="keyword">false</span></div>
<div class="line">});</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Allocate all the images</span></div>
<div class="line"><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.allocator()-&gt;allocate();</div>
<div class="line"><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.allocator()-&gt;allocate();</div>
<div class="line"><span class="comment">// Fill the input image with the content of the PPM image if a filename was provided:</span></div>
<div class="line">fill_image(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Run the scale operation:</span></div>
<div class="line"><a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>.<a class="code" href="classarm__compute_1_1_n_e_scale.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a>();</div>
</div><!-- fragment --><p>The full example is provided in <a class="el" href="neon__scale_8cpp.xhtml">examples/neon_scale.cpp</a></p>
<dl class="section warning"><dt>Warning</dt><dd>Some kernels need up to 3 neighbor values to calculate the value of a given pixel. Therefore, to be safe, we use a 4-pixel padding all around the image. In addition, some kernels read and write up to 32 pixels at the same time. To cover that case as well we add an extra 32 pixels of padding at the end of each row. As a result auto padded buffers waste a lot of memory and are less cache friendly. It is therefore recommended to use accurate padding or manual padding wherever possible.</dd></dl>
<h3><a class="anchor" id="architecture_images_tensors_valid_region"></a>
Valid regions</h3>
<p>Some kernels (like edge detectors for example) need to read values of neighboring pixels to calculate the value of a given pixel, it is therefore not possible to calculate the values of the pixels on the edges.</p>
<p>Another case is: if a kernel processes 8 pixels per iteration and the image's dimensions are not a multiple of 8 and not enough padding is available then the kernel will not be able to process the pixels near the right edge. As a result these pixels will be left undefined.</p>
<p>In order to know which pixels have been calculated, each kernel sets a valid region for each output image or tensor. See also <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a3c20d908342087484d883574d55dd482">TensorInfo::valid_region()</a>, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a></p>
<h2><a class="anchor" id="architecture_images_tensors_tensors"></a>
Tensors</h2>
<p>Tensors are multi-dimensional arrays with a maximum of <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a> dimensions.</p>
<p>Depending on the number of dimensions tensors can be interpreted as various objects. A scalar can be represented as a zero-dimensional tensor and a vector of numbers can be represented as an one-dimensional tensor. Further, an image is actually just a 2D tensor, a 3D tensor can be seen as an array of images and a 4D tensor as a 2D array of images, etc.</p>
<dl class="section note"><dt>Note</dt><dd>Most algorithms process images (i.e a 2D slice of the tensor), therefore only padding along the X and Y axes is required (2D slices can be stored contiguously in memory).</dd></dl>
<h2><a class="anchor" id="architecture_images_tensors_description_conventions"></a>
Images and Tensors description conventions</h2>
<p><a class="el" href="struct_image.xhtml" title="Structure to hold Image information.">Image</a> objects are defined by a <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> and dimensions expressed as [width, height, batch]</p>
<p>Tensors are defined by a <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> plus a number of channels (Always expected to be 1 for now) and their dimensions are expressed as [width, height, feature_maps, batch].</p>
<p>In other words, the lower three dimensions of a tensor specify a single input in [width, height, feature_maps], while any other specified dimension represents a batch in the appropriate dimension space. For example, a tensor with dimensions [128, 128, 64, 16] represents a 1D batch space with 16 batches of 128 elements in width and height and 64 feature maps each. Each kernel specifies the expected layout of each of its tensors in its documentation.</p>
<dl class="section note"><dt>Note</dt><dd>Unless specified otherwise in the kernel's or function's documentation all tensors and images parameters passed must have identical dimensions.</dd>
<dd>
Unless specified otherwise in the kernel's or function's documentation the number of channels for tensors is expected to be 1 (For images, the number of channels is inferred from the <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>).</dd></dl>
<dl class="section attention"><dt>Attention</dt><dd>Regardless of the <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> used by a tensor the <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a> method will always return a uint8_t pointer, and all the metadata in <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> will be expressed in bytes. It is the user's responsibility to cast the pointer to the correct type.</dd></dl>
<p>For example, to read the element located at the coordinates (x,y) of a float tensor:</p>
<div class="fragment"><div class="line"><span class="keywordtype">float</span> value = *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.info()-&gt;offset_element_in_bytes(Coordinates(x,y)));</div>
</div><!-- fragment --><h2><a class="anchor" id="architecture_images_tensors_working_with_objects"></a>
Working with Images and Tensors using iterators</h2>
<p>The library provides some iterators to access objects' data. Iterators are created by associating a data object (An image or a tensor for example) with an iteration window.</p>
<p>Iteration windows are defined by an array of dimensions, each of which consists of a start, end and step.</p>
<p>The <a class="el" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a> function takes an execution window, a lambda function and one or more iterators. It will iterate through every element of the execution window and for each element it will update the iterators accordingly and call the lambda function.</p>
<p>Here are a couple of examples of how to use the iterators to fill / read tensors:</p>
<div class="fragment"><div class="line">        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width  = 4;</div>
<div class="line">        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height = 3;</div>
<div class="line">        constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch  = 2;</div>
<div class="line"> </div>
<div class="line">        src_data = <span class="keyword">new</span> <span class="keywordtype">float</span>[width * height * batch];</div>
<div class="line">        dst_data = <span class="keyword">new</span> <span class="keywordtype">float</span>[width * height * batch];</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Fill src_data with pseudo(meaningless) values:</span></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> &lt; batch; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>++)</div>
<div class="line">        {</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> h = 0; h &lt; height; h++)</div>
<div class="line">            {</div>
<div class="line">                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; width; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>++)</div>
<div class="line">                {</div>
<div class="line">                    src_data[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * (width * height) + h * width + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(100 * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> + 10 * h + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>);</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Initialize the tensors dimensions and type:</span></div>
<div class="line">        <span class="keyword">const</span> TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>(width, height, batch);</div>
<div class="line">        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.allocator()-&gt;init(TensorInfo(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div>
<div class="line">        output.allocator()-&gt;init(TensorInfo(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Configure softmax:</span></div>
<div class="line">        softmax.configure(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, &amp;output);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Allocate the input / output tensors:</span></div>
<div class="line">        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.allocator()-&gt;allocate();</div>
<div class="line">        output.allocator()-&gt;allocate();</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Fill the input tensor:</span></div>
<div class="line">        <span class="comment">// Simplest way: create an iterator to iterate through each element of the input tensor:</span></div>
<div class="line">        Window input_window;</div>
<div class="line">        input_window.use_tensor_dimensions(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.info()-&gt;tensor_shape());</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; Dimensions of the input&#39;s iterator:\n&quot;</span>;</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; X = [start=&quot;</span> &lt;&lt; input_window.x().start() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; input_window.x().end()</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; input_window.x().step() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; Y = [start=&quot;</span> &lt;&lt; input_window.y().start() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; input_window.y().end()</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; input_window.y().step() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; Z = [start=&quot;</span> &lt;&lt; input_window.z().start() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; input_window.z().end()</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; input_window.z().step() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Create an iterator:</span></div>
<div class="line">        Iterator input_it(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, input_window);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Iterate through the elements of src_data and copy them one by one to the input tensor:</span></div>
<div class="line">        <span class="comment">// This is equivalent to:</span></div>
<div class="line">        <span class="comment">// for( unsigned int z = 0; z &lt; batch; ++z)</span></div>
<div class="line">        <span class="comment">// {</span></div>
<div class="line">        <span class="comment">//   for( unsigned int y = 0; y &lt; height; ++y)</span></div>
<div class="line">        <span class="comment">//   {</span></div>
<div class="line">        <span class="comment">//     for( unsigned int x = 0; x &lt; width; ++x)</span></div>
<div class="line">        <span class="comment">//     {</span></div>
<div class="line">        <span class="comment">//       *reinterpret_cast&lt;float*&gt;( input.buffer() + input.info()-&gt;offset_element_in_bytes(Coordinates(x,y,z))) = src_data[ z * (width*height) + y * width + x];</span></div>
<div class="line">        <span class="comment">//     }</span></div>
<div class="line">        <span class="comment">//   }</span></div>
<div class="line">        <span class="comment">// }</span></div>
<div class="line">        <span class="comment">// Except it works for an arbitrary number of dimensions</span></div>
<div class="line">        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line">            input_window,</div>
<div class="line">            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line">            {</div>
<div class="line">                std::cout &lt;&lt; <span class="stringliteral">&quot;Setting item [&quot;</span> &lt;&lt; <span class="keywordtype">id</span>.x() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <span class="keywordtype">id</span>.y() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <span class="keywordtype">id</span>.z() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line">                *<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(input_it.ptr()) =</div>
<div class="line">                    src_data[<span class="keywordtype">id</span>.z() * (width * height) + <span class="keywordtype">id</span>.y() * width + <span class="keywordtype">id</span>.x()];</div>
<div class="line">            },</div>
<div class="line">            input_it);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// More efficient way: create an iterator to iterate through each row (instead of each element) of the output tensor:</span></div>
<div class="line">        Window output_window;</div>
<div class="line">        output_window.use_tensor_dimensions(</div>
<div class="line">            output.info()-&gt;tensor_shape(),</div>
<div class="line">            <span class="comment">/* first_dimension =*/</span><a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>); <span class="comment">// Iterate through the rows (not each element)</span></div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; Dimensions of the output&#39;s iterator:\n&quot;</span>;</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; X = [start=&quot;</span> &lt;&lt; output_window.x().start() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; output_window.x().end()</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; output_window.x().step() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; Y = [start=&quot;</span> &lt;&lt; output_window.y().start() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; output_window.y().end()</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; output_window.y().step() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line">        std::cout &lt;&lt; <span class="stringliteral">&quot; Z = [start=&quot;</span> &lt;&lt; output_window.z().start() &lt;&lt; <span class="stringliteral">&quot;, end=&quot;</span> &lt;&lt; output_window.z().end()</div>
<div class="line">                  &lt;&lt; <span class="stringliteral">&quot;, step=&quot;</span> &lt;&lt; output_window.z().step() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Create an iterator:</span></div>
<div class="line">        Iterator output_it(&amp;output, output_window);</div>
<div class="line"> </div>
<div class="line">        <span class="comment">// Iterate through the rows of the output tensor and copy them to dst_data:</span></div>
<div class="line">        <span class="comment">// This is equivalent to:</span></div>
<div class="line">        <span class="comment">// for( unsigned int z = 0; z &lt; batch; ++z)</span></div>
<div class="line">        <span class="comment">// {</span></div>
<div class="line">        <span class="comment">//   for( unsigned int y = 0; y &lt; height; ++y)</span></div>
<div class="line">        <span class="comment">//   {</span></div>
<div class="line">        <span class="comment">//     memcpy( dst_data + z * (width*height) + y * width, input.buffer() + input.info()-&gt;offset_element_in_bytes(Coordinates(0,y,z)), width * sizeof(float));</span></div>
<div class="line">        <span class="comment">//   }</span></div>
<div class="line">        <span class="comment">// }</span></div>
<div class="line">        <span class="comment">// Except it works for an arbitrary number of dimensions</span></div>
<div class="line">        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line">            output_window,</div>
<div class="line">            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line">            {</div>
<div class="line">                std::cout &lt;&lt; <span class="stringliteral">&quot;Copying one row starting from [&quot;</span> &lt;&lt; <span class="keywordtype">id</span>.x() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <span class="keywordtype">id</span>.y() &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <span class="keywordtype">id</span>.z() &lt;&lt; <span class="stringliteral">&quot;]\n&quot;</span>;</div>
<div class="line">                <span class="comment">// Copy one whole row:</span></div>
<div class="line">                memcpy(dst_data + <span class="keywordtype">id</span>.z() * (width * height) + <span class="keywordtype">id</span>.y() * width, output_it.ptr(), width * <span class="keyword">sizeof</span>(<span class="keywordtype">float</span>));</div>
<div class="line">            },</div>
<div class="line">            output_it);</div>
<div class="line"> </div>
</div><!-- fragment --> <h2><a class="anchor" id="architecture_images_tensors_sub_tensors"></a>
Sub-tensors</h2>
<p>Sub-tensors are aliases to existing Tensors, as a result creating a sub-tensor does not result in any underlying memory allocation.</p>
<p>Sub-tensors can be used to access a sub-set of the parent tensor, something that can be useful in case different operations need to be performed on different parts of a tensor.</p>
<p>Moreover, sub-tensors can be used to perform zero copy tensor concatenation.</p>
<p>The API for creating a sub-tensor is the following: </p><div class="fragment"><div class="line">SubTensor(ITensor *parent, <span class="keyword">const</span> TensorShape &amp;tensor_shape, <span class="keyword">const</span> Coordinates &amp;coords)</div>
</div><!-- fragment --><p>Where <em>parent</em> is the parent tensor which we want to create an alias for, <em>tensor_shape</em> is the shape of the sub-tensor and <em>coords</em> are the starting indexing coordinates of the sub-tensor within the parent tensor.</p>
<dl class="section note"><dt>Note</dt><dd>Two sub-tensor concrete classes for different targets are currently supported : <a class="el" href="classarm__compute_1_1_c_l_sub_tensor.xhtml">CLSubTensor</a> and <a class="el" href="classarm__compute_1_1_sub_tensor.xhtml">SubTensor</a></dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Limitation of the sub-tensor is that it cannot be extracted spatially, meaning sub-tensors should have the same width and height as the parent tensor. The main reasons for this is the fact that individual kernels might need to operate with a step size that is not a multiple of the sub-tensor spatial dimension. This could lead to elements being overwritten by different kernels operating on different sub-tensors of the same underlying tensor.</dd></dl>
<h1><a class="anchor" id="architecture_memory_manager"></a>
MemoryManager</h1>
<p><a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> is a memory managing interface that can be used to reduce the memory requirements of a given pipeline by recycling temporary buffers.</p>
<h2><a class="anchor" id="architecture_memory_manager_component"></a>
MemoryGroup, MemoryPool and MemoryManager Components</h2>
<h3><a class="anchor" id="architecture_memory_manager_component_memory_group"></a>
MemoryGroup</h3>
<p><a class="el" href="classarm__compute_1_1_i_memory_group.xhtml">IMemoryGroup</a> defines the memory managing granularity.</p>
<p><a class="el" href="classarm__compute_1_1_memory_group.xhtml" title="Memory group.">MemoryGroup</a> binds a number of objects to a bucket of memory requirements that need to be fulfilled in order for an operation or list of operations to be executed.</p>
<p>Requesting backing memory for a specific group can be done using <a class="el" href="classarm__compute_1_1_i_memory_group.xhtml#accdbc89f54447d25dfc018d38070f4ea">IMemoryGroup::acquire</a> and releasing the memory back using <a class="el" href="classarm__compute_1_1_i_memory_group.xhtml#aab0a52fdd148a54108e7bf49287d7c47">IMemoryGroup::release</a>.</p>
<h3><a class="anchor" id="architecture_memory_manager_component_memory_pool"></a>
MemoryPool</h3>
<p><a class="el" href="classarm__compute_1_1_i_memory_pool.xhtml">IMemoryPool</a> defines a pool of memory that can be used to provide backing memory to a memory group.</p>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_blob_memory_pool.xhtml">BlobMemoryPool</a> is currently implemented which models the memory requirements as a vector of distinct memory blobs.</dd></dl>
<h3><a class="anchor" id="architecture_memory_manager_component_memory_manager_components"></a>
MemoryManager Components</h3>
<p><a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> consists of two components:</p><ul>
<li><a class="el" href="classarm__compute_1_1_i_lifetime_manager.xhtml">ILifetimeManager</a> that keeps track of the lifetime of the registered objects of the memory groups and given an <a class="el" href="classarm__compute_1_1_i_allocator.xhtml">IAllocator</a> creates an appropriate memory pool that fulfils the memory requirements of all the registered memory groups.</li>
<li><a class="el" href="classarm__compute_1_1_i_pool_manager.xhtml">IPoolManager</a> that safely manages the registered memory pools.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_blob_lifetime_manager.xhtml">BlobLifetimeManager</a> is currently implemented which models the memory requirements as a vector of distinct memory blobs.</dd></dl>
<h2><a class="anchor" id="architecture_memory_manager_working_with_memory_manager"></a>
Working with the Memory Manager</h2>
<p>Using a memory manager to reduce the memory requirements of a pipeline can be summed in the following steps:</p>
<p>Initially a memory manager must be set-up: </p><div class="fragment"><div class="line">Allocator  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">allocator</a>{};                                                               <span class="comment">// Create an allocator to use for the backing memory allocation</span></div>
<div class="line"><span class="keyword">auto</span> lifetime_mgr  = std::make_shared&lt;BlobLifetimeManager&gt;();                         <span class="comment">// Create Lifetime Manager</span></div>
<div class="line"><span class="keyword">auto</span> pool_mgr      = std::make_shared&lt;PoolManager&gt;();                                 <span class="comment">// Create Pool Manager</span></div>
<div class="line"><span class="keyword">auto</span> mm            = std::make_shared&lt;MemoryManagerOnDemand&gt;(lifetime_mgr, pool_mgr); <span class="comment">// Create Memory Manager</span></div>
</div><!-- fragment --><p>Once done, memory groups can be registered to use the memory manager: </p><div class="fragment"><div class="line">MemoryGroup memory_group(mm); <span class="comment">// Create a memory group and set the memory manager to use</span></div>
</div><!-- fragment --><dl class="section note"><dt>Note</dt><dd>If a memory manager is not specified then all allocation will be immediate instead of deferred through the memory manager.</dd></dl>
<p>Next step is to set objects to be managed by the memory group. It is important though to note that the lifetime of an object is tracked from the <a class="el" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">MemoryGroup::manage()</a> and the <a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">TensorAllocator::allocate</a> calls. <a class="el" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">MemoryGroup::manage</a> flags that the object will be needed starting now and when <a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">TensorAllocator::allocate</a> is called it signals the end of the object lifetime. </p><div class="fragment"><div class="line"><a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a> tmp1, tmp2, tmp3;            <span class="comment">// Create example tensors</span></div>
<div class="line">memory_group.manage(&amp;tmp1);         <span class="comment">// Start managing object tmp1 and start its lifetime</span></div>
<div class="line">memory_group.manage(&amp;tmp2);         <span class="comment">// Start managing object tmp2 and start its lifetime</span></div>
<div class="line"> </div>
<div class="line">operation1.configure(&amp;tmp1, &amp;tmp2); <span class="comment">// Configure a function/kernel using tmp1 and tmp2</span></div>
<div class="line"> </div>
<div class="line">tmp1.allocator()-&gt;allocate();       <span class="comment">// Flag that the lifetime of object tmp1 has ended</span></div>
<div class="line"> </div>
<div class="line">memory_group.manage(&amp;tmp3);         <span class="comment">// Start managing object tmp3 and start its lifetime</span></div>
<div class="line"> </div>
<div class="line">operation2.configure(&amp;tmp2, &amp;tmp3); <span class="comment">// Configure a function/kernel using tmp2 and tmp3</span></div>
<div class="line"> </div>
<div class="line">tmp2.allocator()-&gt;allocate();       <span class="comment">// Flag that the lifetime of object tmp2 has ended</span></div>
<div class="line">tmp3.allocator()-&gt;allocate();       <span class="comment">// Flag that the lifetime of object tmp3 has ended</span></div>
</div><!-- fragment --><dl class="section warning"><dt>Warning</dt><dd>The configuration step should be done sequentially by a single thread so that all the lifetimes are captured correctly.</dd></dl>
<p>When configuration of all the operations is finished then the memory manager have to be populated: </p><div class="fragment"><div class="line">mm-&gt;populate(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">allocator</a>), 2 <span class="comment">/* num_pools */</span>); <span class="comment">// Populate memory manager pools</span></div>
</div><!-- fragment --><p>Finally, during execution of the pipeline the memory of the appropriate memory group should be requested before running: </p><div class="fragment"><div class="line">memory_group.acquire(); <span class="comment">// Request memory for the group</span></div>
<div class="line"> </div>
<div class="line">operation1.run();       <span class="comment">// Run operation1</span></div>
<div class="line">operation2.run();       <span class="comment">// Run operation2</span></div>
<div class="line"> </div>
<div class="line">memory_group.release(); <span class="comment">// Release memory so that it can be reused</span></div>
</div><!-- fragment --> <dl class="section note"><dt>Note</dt><dd>Execution of a pipeline can be done in a multi-threading environment as memory acquisition/release are thread safe. </dd>
<dd>
If you are handling sensitive data and it's required to zero out the memory buffers before freeing, make sure to also zero out the intermediate buffers. You can access the buffers through the memory group's mappings.</dd></dl>
<h2><a class="anchor" id="architecture_memory_manager_function_support"></a>
Function support</h2>
<p>Most of the library's function have been ported to use <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> for their internal temporary buffers.</p>
<p>If that is the case, a memory manager can be passed to them during construction to reuse memory among these functions. </p><div class="fragment"><div class="line"><span class="comment">// Setup Memory Manager</span></div>
<div class="line">CLBufferAllocator  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">allocator</a>{};                                                       <span class="comment">// Create an allocator to use for the backing memory allocation</span></div>
<div class="line"><span class="keyword">auto</span> lifetime_mgr  = std::make_shared&lt;BlobLifetimeManager&gt;();                         <span class="comment">// Create Lifetime Manager</span></div>
<div class="line"><span class="keyword">auto</span> pool_mgr      = std::make_shared&lt;PoolManager&gt;();                                 <span class="comment">// Create Pool Manager</span></div>
<div class="line"><span class="keyword">auto</span> mm            = std::make_shared&lt;MemoryManagerOnDemand&gt;(lifetime_mgr, pool_mgr); <span class="comment">// Create Memory Manager</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Create two convolution layers and use the memory manager to manager their internal temporary buffers</span></div>
<div class="line">CLConvolutionLayer conv1(mm), conv2(mm);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Configure layers</span></div>
<div class="line">conv1.configure(...);</div>
<div class="line">conv2.configure(...);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Populate memory manager</span></div>
<div class="line">mm-&gt;populate(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">allocator</a>), 1 <span class="comment">/* num_pools */</span>); <span class="comment">// Populate memory manager pools</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Run layers (Memory will be recycled for internal buffers for conv1 and conv2</span></div>
<div class="line">conv1.run();</div>
<div class="line">conv2.run();</div>
</div><!-- fragment --><h1><a class="anchor" id="architecture_import_memory"></a>
Import Memory Interface</h1>
<p>The implemented <a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml">TensorAllocator</a> and <a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml">CLTensorAllocator</a> objects provide an interface capable of importing existing memory to a tensor as backing memory.</p>
<p>A simple Arm® Neon™ example can be the following: </p><div class="fragment"><div class="line"><span class="comment">// External backing memory</span></div>
<div class="line"><span class="keywordtype">void</span>* external_ptr = ...;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Create and initialize tensor</span></div>
<div class="line"><a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a> <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">init</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a>);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Import existing pointer as backing memory</span></div>
<div class="line"><a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.<a class="code" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#aee45c9a6939cadf66a6e7d998c6f59df">import_memory</a>(external_ptr);</div>
</div><!-- fragment --><p>It is important to note the following:</p><ul>
<li>Ownership of the backing memory is not transferred to the tensor itself.</li>
<li>The tensor mustn't be memory managed.</li>
<li>Padding requirements should be accounted by the client code. In other words, if padding is required by the tensor after the function configuration step, then the imported backing memory should account for it. Padding can be checked through the <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a79e20eacb1e963e24a21ebd7369effd7">TensorInfo::padding()</a> interface.</li>
</ul>
<h1><a class="anchor" id="architecture_opencl_tuner"></a>
OpenCL Tuner</h1>
<p>OpenCL kernels when dispatched to the GPU take two arguments:</p><ul>
<li>The Global Workgroup Size (GWS): That's the number of times to run an OpenCL kernel to process all the elements we want to process.</li>
<li>The Local Workgroup Size (LWS): That's the number of elements we want to run in parallel on a GPU core at a given point in time.</li>
</ul>
<p>The LWS can be required by an algorithm (For example if it contains memory barriers or uses local memory) but it can also be used for performance reasons to tweak the performance of a kernel: the execution time of the overall kernel might vary significantly depending on how the GWS is broken down.</p>
<p>However, there is no universal rule regarding which LWS is best for a given kernel, so instead we created the <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a>.</p>
<p>When the <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> is enabled ( Target = 2 for the graph examples), the first time an OpenCL kernel is executed the Compute Library will try to run it with a variety of LWS values and will remember which one performed best for subsequent runs. At the end of the run the <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">graph::Graph</a> will try to save these tuning parameters to a file.</p>
<p>However this process takes quite a lot of time, which is why it cannot be enabled all the time. <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> supports three modes of tuning with different trade-offs between the time taken to tune and the kernel execution time achieved using the best LWS found. In the Exhaustive mode, it searches all the supported values of LWS. This mode takes the longest time to tune and is the most likely to find the optimal LWS. Normal mode searches a subset of LWS values to yield a good approximation of the optimal LWS. It takes less time to tune than Exhaustive mode. Rapid mode takes the shortest time to tune and finds an LWS value that is at least as good or better than the default LWS value. The mode affects only the search for the optimal LWS and has no effect when the LWS value is imported from a file.</p>
<p>But, when the <a class="el" href="classarm__compute_1_1_c_l_tuner.xhtml">CLTuner</a> is disabled ( Target = 1 for the graph examples), the <a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">graph::Graph</a> will try to reload the file containing the tuning parameters, then for each executed kernel the Compute Library will use the fine tuned LWS if it was present in the file or use a default LWS value if it's not.</p>
<h1><a class="anchor" id="architecture_cl_queue_priorities"></a>
OpenCL Queue Priorities</h1>
<p>OpenCL 2.1 exposes the <code>cl_khr_priority_hints</code> extensions that if supported by an underlying implementation allows the user to specify priority hints to the created command queues. Is important to note that this does not specify guarantees or the explicit scheduling behavior, this is something that each implementation needs to expose.</p>
<p>In some cases, priority queues can be used when there is an implicit internal priority between graphics and compute queues and thus allow some level of priority control between them. At the moment three priority level can be specified:</p><ul>
<li>CL_QUEUE_PRIORITY_HIGH_KHR</li>
<li>CL_QUEUE_PRIORITY_MED_KHR</li>
<li>CL_QUEUE_PRIORITY_LOW_KHR</li>
</ul>
<p>Compute Library allows extraction of the internal OpenCL queue or the ability to inject directly a user-defined queue to the <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml">CLScheduler</a>. This way the user can utilize this extension to define priorities between the queues and setup the OpenCL scheduler mechanism to utilize them.</p>
<div class="fragment"><div class="line">cl_queue_properties queue_properties[] = {CL_QUEUE_PRIORITY_KHR, CL_QUEUE_PRIORITY_HIGH_KHR, 0};</div>
<div class="line">cl_command_queue priority_queue = <a class="code" href="_open_c_l_8cpp.xhtml#a2b2912c16aeb279ce55dc9c30968b906">clCreateCommandQueueWithProperties</a>(ctx, dev, queue_properties, &amp;error);</div>
<div class="line"><a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">set_queue</a>(::cl::CommandQueue(priority_queue));</div>
</div><!-- fragment --><h1><a class="anchor" id="architecture_weights_manager"></a>
Weights Manager</h1>
<p><a class="el" href="classarm__compute_1_1_i_weights_manager.xhtml">IWeightsManager</a> is a weights managing interface that can be used to reduce the memory requirements of a given pipeline by reusing transformed weights across multiple function executions. <a class="el" href="classarm__compute_1_1_i_weights_manager.xhtml">IWeightsManager</a> is responsible for managing weight tensors alongside with their transformations. <a class="el" href="classarm__compute_1_1_i_transform_weights.xhtml">ITransformWeights</a> provides an interface for running the desired transform function. This interface is used by the weights manager.</p>
<h2><a class="anchor" id="architecture_weights_manager_working_with_weights_manager"></a>
Working with the Weights Manager</h2>
<p>Following is a simple example that uses the weights manager:</p>
<p>Initially a weights manager must be set-up: </p><div class="fragment"><div class="line"><span class="keyword">auto</span>  wm = std::make_shared&lt;IWeightsManager&gt;(); <span class="comment">// Create a weights manager</span></div>
</div><!-- fragment --><p>Once done, weights can be managed, configured and run: </p><div class="fragment"><div class="line">wm-&gt;manage(weights); <span class="comment">// Manage the weights</span></div>
<div class="line">wm-&gt;acquire(weights, &amp;_reshape_weights_managed_function); <span class="comment">// Acquire the address of the transformed weights based on the transform function</span></div>
<div class="line">wm-&gt;run(weights, &amp;_reshape_weights_managed_function);     <span class="comment">// Run the transpose function</span></div>
</div><!-- fragment --><h1><a class="anchor" id="programming_model"></a>
Programming Model</h1>
<h2><a class="anchor" id="programming_model_functions"></a>
Functions</h2>
<p>Functions will automatically allocate the temporary buffers mentioned above, and will automatically multi-thread kernels' executions using the very basic scheduler described in the previous section.</p>
<p>Simple functions only call a single kernel (e.g NEConvolution3x3), while more complex ones consist of several kernels pipelined together (e.g <a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml">NEFullyConnectedLayer</a> ). Check their documentation to find out which kernels are used by each function.</p>
<div class="fragment"><div class="line"><span class="comment">//Create a function object:</span></div>
<div class="line">MyFunction <span class="keyword">function</span>;</div>
<div class="line"><span class="comment">// Initialize the function with the input/output and options you want to use:</span></div>
<div class="line"><span class="keyword">function</span>.configure( <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, option0, option1);</div>
<div class="line"><span class="comment">// Execute the function:</span></div>
<div class="line"><span class="keyword">function</span>.run();</div>
</div><!-- fragment --><dl class="section warning"><dt>Warning</dt><dd>The Compute Library requires Arm® Mali™ OpenCL DDK r8p0 or higher (OpenCL kernels are compiled using the -cl-arm-non-uniform-work-group-size flag)</dd></dl>
<dl class="section note"><dt>Note</dt><dd>All OpenCL functions and objects in the runtime library use the command queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a> for all operations, a real implementation would be expected to use different queues for mapping operations and kernels in order to reach a better GPU utilization.</dd></dl>
<h2><a class="anchor" id="programming_model_scheduler"></a>
OpenCL Scheduler</h2>
<p>The Compute Library runtime uses a single command queue and context for all the operations.</p>
<p>The user can get / set this context and command queue through <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a>'s interface.</p>
<p>The user can get / set the target GPU device through the <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a>'s interface.</p>
<dl class="section attention"><dt>Attention</dt><dd>Make sure the application is using the same context as the library as in OpenCL it is forbidden to share objects across contexts. This is done by calling <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ade56e13dd46cf95a8430a7530ae2cb7f">CLScheduler::init()</a> or <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">CLScheduler::default_init()</a> at the beginning of your application.</dd>
<dd>
Make sure the scheduler's target is not changed after function classes are created.</dd></dl>
<h2><a class="anchor" id="programming_model__events_sync"></a>
OpenCL events and synchronization</h2>
<p>In order to block until all the jobs in the <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue.">CLScheduler</a>'s command queue are done executing the user can call <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#ad55f80ed3cd8b6c4f247763b747016af">CLScheduler::sync()</a> or create a sync event using <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml#a6096d26e8e29e1a7f01b0f083fb7e33f">CLScheduler::enqueue_sync_event()</a></p>
<h2><a class="anchor" id="programming_model_cl_neon"></a>
OpenCL / Arm® Neon™ interoperability</h2>
<p>You can mix OpenCL and Arm® Neon™ kernels and functions. However it is the user's responsibility to handle the mapping/unmapping of OpenCL objects.</p>
<h1><a class="anchor" id="architecture_experimental"></a>
Experimental Features</h1>
<h2><a class="anchor" id="architecture_experimental_run_time_context"></a>
Run-time Context</h2>
<p>Some of the Compute Library components are modelled as singletons thus posing limitations to supporting some use-cases and ensuring a more client-controlled API. Thus, we are introducing an aggregate service interface <a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> which will encapsulate the services that the singletons were providing and allow better control of these by the client code. Run-time context encapsulates a list of mechanisms, some of them are: scheduling, memory management, kernel caching and others. Consequently, this will allow finer control of these services among pipelines when Compute Library is integrated in higher level frameworks.</p>
<p>This feature introduces some changes to our API. All the kernels/functions will now accept a Runtime Context object which will allow the function to use the mentioned services.</p>
<p>Finally, we will try to adapt our code-base progressively to use the new mechanism but will continue supporting the legacy mechanism to allow a smooth transition. Changes will apply to all our backends: Neon™ and OpenCL.</p>
<h2><a class="anchor" id="architecture_experimental_clvk"></a>
CLVK</h2>
<p>Compute Library offers experimental support for <a href="https://github.com/kpet/clvk">CLVK</a>. If CLVK is installed in the system, users can select the backend when running a graph example with &ndash;target=clvk. If no target is specified and more that one OpenCL implementations are present, Compute Library will pick the first available.</p>
<h1><a class="anchor" id="architecture_experimental_api"></a>
Experimental Application Programming Interface</h1>
<h2><a class="anchor" id="architecture_experimental_api_overview"></a>
Overview</h2>
<p>In this section we present Compute Library's experimental application programming interface (API) architecture along with a detailed explanation of its components. Compute Library's API consists of multiple high-level operators and even more internally distinct computational blocks that can be executed on a command queue. Operators can be bound to multiple <a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> objects and executed concurrently or asynchronously if needed. All operators and associated objects are encapsulated in a Context-based mechanism, which provides all related construction services.</p>
<h2><a class="anchor" id="architecture_experimental_api_objects"></a>
Fundamental objects</h2>
<p>Compute Library consists of a list of fundamental objects that are responsible for creating and orchestrating operator execution. Below we present these objects in more detail.</p>
<h3><a class="anchor" id="architecture_experimental_api_objects_context"></a>
AclContext or Context</h3>
<p>AclContext or Context acts as a central creational aggregate service. All other objects are bound to or created from a context. It provides, internally, common facilities such as</p><ul>
<li>allocators for object creation or backing memory allocation</li>
<li>serialization interfaces</li>
<li>any other modules that affect the construction of objects (e.g., program cache for OpenCL).</li>
</ul>
<p>The followings sections will describe parameters that can be given on the creation of Context.</p>
<h4><a class="anchor" id="architecture_experimental_api_object_context_target"></a>
AclTarget</h4>
<p>Context is initialized with a backend target (AclTarget) as different backends might have a different subset of services. Currently the following targets are supported:</p><ul>
<li><a class="el" href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483a71cbccca38c1ea3c257cff95a92d41e2" title="Cpu target that uses SIMD extensions.">AclCpu</a>: a generic CPU target that accelerates primitives through SIMD technologies</li>
<li><a class="el" href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483adb7b44c0ec8957483f3dbf6d63fde846" title="OpenCL target for GPU.">AclGpuOcl</a>: a target for GPU acceleration using OpenCL</li>
</ul>
<h4><a class="anchor" id="architecture_experimental_api_object_context_execution_mode"></a>
AclExecutionMode</h4>
<p>An execution mode (AclExecutionMode) can be passed as an argument that affects the operator creation. At the moment the following execution modes are supported:</p><ul>
<li><a class="el" href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a0c619b2e90be7d83736a8cb49085deee" title="Prioritize performance when multiple iterations are performed.">AclPreferFastRerun</a>: Provides faster re-run. It can be used when the operators are expected to be executed multiple times under the same execution context</li>
<li><a class="el" href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a76a2b4d702182be52cb658037bd55b58" title="Prioritize performance when a single iterations is expected to be performed.">AclPreferFastStart</a>: Provides faster single execution. It can be used when the operators will be executed only once, thus reducing their latency is important (Currently, it is not implemented)</li>
</ul>
<h4><a class="anchor" id="architecture_experimental_api_object_context_capabilities"></a>
AclTargetCapabilities</h4>
<p>Context creation can also have a list of capabilities of hardware as one of its parameters. This is currently available only for the CPU backend. A list of architecture capabilities can be passed to influence the selection of the underlying kernels. Such capabilities can be for example the enablement of SVE or the dot product instruction explicitly. </p><dl class="section note"><dt>Note</dt><dd>The underlying hardware should support the given capability list.</dd></dl>
<h4><a class="anchor" id="architecture_experimental_api_object_context_allocator"></a>
Allocator</h4>
<p>An allocator object that implements <a class="el" href="struct_acl_allocator.xhtml">AclAllocator</a> can be passed to the Context upon its creation. This user-provided allocator will be used for allocation of any internal backing memory.</p>
<dl class="section note"><dt>Note</dt><dd>To enable interoperability with OpenCL, additional entrypoints are provided to extract (<a class="el" href="_acl_open_cl_ext_8cpp.xhtml#aa1c6e00f2d666710db99940ed33c9ba7">AclGetClContext</a>) or set (<a class="el" href="_acl_open_cl_ext_8cpp.xhtml#afd9da7bbb95ab0677bed12f575f686b2">AclSetClContext</a>) the internal OpenCL context.</dd></dl>
<h3><a class="anchor" id="architecture_experimental_api_objects_tensor"></a>
AclTensor or Tensor</h3>
<p>A tensor is a mathematical object that can describe physical properties like matrices. It can be also considered a generalization of matrices that can represent arbitrary dimensionalities. AclTensor is an abstracted interface that represents a tensor.</p>
<p>AclTensor, in addition to the elements of the physical properties they represent, also contains the information such as shape, data type, data layout and strides to not only fully describe the characteristics of the physical properties but also provide information how the object stored in memory should be traversed. <a class="el" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> is a dedicated object to represent such metadata.</p>
<dl class="section note"><dt>Note</dt><dd>The allocation of an AclTensor can be deferred until external memory is imported as backing memory to accomplish a zero-copy context.</dd>
<dd>
To enable interoperability with OpenCL, additional entrypoints are provided to extract (<a class="el" href="_acl_open_cl_ext_8cpp.xhtml#ad77e6f103ee4ded4d4635b8d0ddfddb8">AclGetClMem</a>) the internal OpenCL memory object.</dd></dl>
<p>As Tensors can reside in different memory spaces, <a class="el" href="_acl_tensor_8cpp.xhtml#a84b931d4aee970586e848015411f9a72">AclMapTensor</a> and <a class="el" href="_acl_tensor_8cpp.xhtml#aad23bd297e07691ec3277e9bbcd177cc">AclUnmapTensor</a> entrypoints are provided to map Tensors in and out of the host memory system, respectively.</p>
<h3><a class="anchor" id="architecture_experimental_api_objects_queue"></a>
AclQueue or Queue</h3>
<p>AclQueue acts as a runtime aggregate service. It provides facilities to schedule and execute operators using underlying hardware. It also contains services like tuning mechanisms (e.g., Local workgroup size tuning for OpenCL) that can be specified during operator execution.</p>
<dl class="section note"><dt>Note</dt><dd>To enable interoperability with OpenCL, additional entrypoints are provided to extract (<a class="el" href="_acl_open_cl_ext_8cpp.xhtml#a6fa75243ff08a29226b64111b9e4b90f">AclGetClQueue</a>) or set (<a class="el" href="_acl_open_cl_ext_8cpp.xhtml#a4f9e4107cd43b521ca291226907d02f5">AclSetClQueue</a>) the internal OpenCL queue.</dd></dl>
<h2><a class="anchor" id="architecture_experimental_api_internal"></a>
Internal</h2>
<h3><a class="anchor" id="architecture_experimental_api_internal_operator_vs_kernels"></a>
Operators vs Kernels</h3>
<p>Internally, Compute Library separates the executable primitives in two categories: kernels and operators which operate in a hierarchical way.</p>
<p>A kernel is the lowest-level computation block whose responsibility is performing a task on a given group of data. For design simplicity, kernels computation does NOT involve the following:</p>
<ul>
<li><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> allocation: All the memory manipulation should be handled by the caller.</li>
<li>Multi-threading: The information on how the workload can be split is provided by kernels, so the caller can effectively distribute the workload to multiple threads.</li>
</ul>
<p>On the other hand, operators combine one or multiple kernels to achieve more complex calculations. The responsibilities of the operators can be summarized as follows:</p>
<ul>
<li>Defining the scheduling policy and dispatching of the underlying kernels to the hardware backend</li>
<li>Providing information to the caller required by the computation (e.g., memory requirements)</li>
<li>Allocation of any required auxiliary memory if it isn't given by its caller explicitly</li>
</ul>
<h2><a class="anchor" id="architecture_experimental_build_multi_isa"></a>
Build multi-ISA binary</h2>
<p>Selecting multi_isa when building Compute Library, will create a library that contains all the supported ISA features. Based on the CPU support, the appropriate kernel will be selected at runtime for execution. Currently this option is supported in two configurations: (i) with armv8.2-a (ii) with armv8-a. In both cases all the supported ISA features are enabled in the build.</p>
<p>The arch option in a multi_isa build sets the minimum architecture required to run the resulting binary. For example a multi_isa build for armv8-a will run on any armv8-a or later, when the binary is executed on a armv8.2-a device it will use the additional cpu features present in this architecture: FP16 and dot product. In order to have a binary like this (multi_isa+armv8-a) the FP16 and dot product kernels in the library are compiled for the target armv8.2-a and all other common code for armv8-a.</p>
<h2><a class="anchor" id="architecture_experimental_per_operator_build"></a>
Per-operator build</h2>
<p>Dependencies for all operators have been explicitly defined, this provides the ability to users to generate Compute Library binaries that include a user-defined list of operators.</p>
<p>An experimental flag 'build_config' has been introduced where a JSON configuration file can be provided and consumed. An example config looks like: </p><div class="fragment"><div class="line">{</div>
<div class="line">    <span class="stringliteral">&quot;operators&quot;</span>: [</div>
<div class="line">        <span class="stringliteral">&quot;Activation&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;DepthwiseConv2d&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;Conv2d&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;Permute&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;Pool2d&quot;</span>,</div>
<div class="line">        <span class="stringliteral">&quot;Reshape&quot;</span></div>
<div class="line">    ],</div>
<div class="line">    <span class="stringliteral">&quot;data_types&quot;</span>: [</div>
<div class="line">        <span class="stringliteral">&quot;NHWC&quot;</span></div>
<div class="line">    ]</div>
<div class="line">}</div>
</div><!-- fragment --><p>Supported data-types options are:</p><ul>
<li>"NHWC"</li>
<li>"NCHW"</li>
</ul>
<p>The list of supported operators can be found in filelist.json in the root of Compute Library repo.</p>
<h2><a class="anchor" id="architecture_experimental_build_high_priority_operators"></a>
Build high priority operators</h2>
<p>Selecting high_priority when building Compute Library, one new library will be created: libarm_compute_hp and will contain a selected subset of the libary operators. Currently the operators are staticly set. </p>
</div></div><!-- contents -->
</div><!-- PageDoc -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3"><div class="ttname"><a href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a0db45d2a4141101bdfe48e3314cfbca3">arm_compute::BorderMode::UNDEFINED</a></div><div class="ttdeci">@ UNDEFINED</div><div class="ttdoc">Borders are left undefined.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_allocator_xhtml_af36143939a43fa124312e395975091ed"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#af36143939a43fa124312e395975091ed">arm_compute::ITensorAllocator::init</a></div><div class="ttdeci">void init(const TensorInfo &amp;input, size_t alignment=0)</div><div class="ttdoc">Initialize a tensor based on the passed TensorInfo.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00033">ITensorAllocator.cpp:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="astruct_image_xhtml"><div class="ttname"><a href="struct_image.xhtml">Image</a></div><div class="ttdoc">Structure to hold Image information.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00923">helpers.h:923</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_allocator_xhtml_aee45c9a6939cadf66a6e7d998c6f59df"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#aee45c9a6939cadf66a6e7d998c6f59df">arm_compute::CLTensorAllocator::import_memory</a></div><div class="ttdeci">Status import_memory(cl::Buffer buffer)</div><div class="ttdoc">Import an existing memory as a tensor's backing memory.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00171">CLTensorAllocator.cpp:171</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_n_e_scale_xhtml_afe4c55cb7564734d41554649f80df061"><div class="ttname"><a href="classarm__compute_1_1_n_e_scale.xhtml#afe4c55cb7564734d41554649f80df061">arm_compute::NEScale::configure</a></div><div class="ttdeci">void configure(ITensor *input, ITensor *output, const ScaleKernelInfo &amp;info)</div><div class="ttdoc">Initialize the function's source, destination, interpolation type and border_mode.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_scale_8cpp_source.xhtml#l00050">NEScale.cpp:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">arm_compute::detail::ObjectType::Tensor</a></div><div class="ttdeci">@ Tensor</div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_xhtml_a4083de30daebd6bdee6b35d9c8262108"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">arm_compute::CLTensor::allocator</a></div><div class="ttdeci">CLTensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor's allocator.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00061">CLTensor.cpp:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdeci">@ U8</div><div class="ttdoc">1 channel, 1 U8 per channel</div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler.cpp:112</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_n_e_scale_xhtml_ad1717410afd0be936c6213a63c8005fb"><div class="ttname"><a href="classarm__compute_1_1_n_e_scale.xhtml#ad1717410afd0be936c6213a63c8005fb">arm_compute::NEScale::run</a></div><div class="ttdeci">void run() override</div><div class="ttdoc">Run the kernels contained in the function.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_scale_8cpp_source.xhtml#l00134">NEScale.cpp:134</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::InterpolationPolicy::NEAREST_NEIGHBOR</a></div><div class="ttdeci">@ NEAREST_NEIGHBOR</div><div class="ttdoc">Output values are defined to match the source pixel whose center is nearest to the sample position.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e"><div class="ttname"><a href="namespacearm__compute.xhtml#a16a59381d4d74d17d86d69eb4d286d7bac397289ee45877be0cd49811fe245b4e">arm_compute::SamplingPolicy::CENTER</a></div><div class="ttdeci">@ CENTER</div><div class="ttdoc">Samples are taken at pixel center.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_a2b2912c16aeb279ce55dc9c30968b906"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#a2b2912c16aeb279ce55dc9c30968b906">clCreateCommandQueueWithProperties</a></div><div class="ttdeci">cl_command_queue clCreateCommandQueueWithProperties(cl_context context, cl_device_id device, const cl_queue_properties *properties, cl_int *errcode_ret)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00386">OpenCL.cpp:386</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9608e5af9f3a199f69ca6aa41b94359a"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9608e5af9f3a199f69ca6aa41b94359a">arm_compute::CLScheduler::set_queue</a></div><div class="ttdeci">void set_queue(cl::CommandQueue queue)</div><div class="ttdoc">Accessor to set the CL command queue to be used by the scheduler.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00056">CLScheduler.cpp:56</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a84d9f260af89712132849ff260487ea0"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a84d9f260af89712132849ff260487ea0">tensor_info</a></div><div class="ttdeci">TensorInfo tensor_info</div><div class="ttdoc">Associated tensor info.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00068">ClWorkloadRuntime.cpp:68</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a3d45498be87235b5165d9972b2d0644d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">arm_compute::test::validation::allocator</a></div><div class="ttdeci">input allocator() -&gt; allocate()</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Tue May 28 2024 09:01:08 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
