<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/Acl.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_acl_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Acl.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_acl_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_ACL_HPP_</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_ACL_HPP_</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_acl_8h.xhtml">arm_compute/Acl.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_EXCEPTIONS_ENABLED)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;exception&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_EXCEPTIONS_ENABLED) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// Helper Macros</span></div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="_acl_8hpp.xhtml#ad32638694a2241eb52f0c58f7cd89ed1">   39</a></span>&#160;<span class="preprocessor">#define ARM_COMPUTE_IGNORE_UNUSED(x) (void)(x)</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml">   41</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceacl.xhtml">acl</a></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// Forward declarations</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_context.xhtml">Context</a>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_queue.xhtml">Queue</a>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_tensor.xhtml">Tensor</a>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_tensor_pack.xhtml">TensorPack</a>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/**&lt; Status code enum */</span></div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">   50</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">Success</a>            = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5c0200f51580173c58b156cb6c443dce">AclSuccess</a>,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1">RuntimeError</a>       = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a7586a308543e75989742667676cb102d">AclRuntimeError</a>,</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd">OutOfMemory</a>        = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2aae6e50c78015ae9c9f6c03ef2c88356e">AclOutOfMemory</a>,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee">Unimplemented</a>      = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2ad5aecf6979192fb01d94f1acf4844dcd">AclUnimplemented</a>,</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7">UnsupportedTarget</a>  = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2bab471e86cd1e7951172eeae0855f40">AclUnsupportedTarget</a>,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">InvalidArgument</a>    = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a00f188d1f6cef6e569b31a95964d26ca">AclInvalidArgument</a>,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71">InvalidTarget</a>      = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a92fd9c05491d0e6c9fb94405c8faae11">AclInvalidTarget</a>,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85">UnsupportedConfig</a>  = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2216553ecd7bef833f5e07fdf31ef6c9">AclUnsupportedConfig</a>,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60">InvalidObjectState</a> = <a class="code" href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5d55d1ccc47a605f01b9284b3102e979">AclInvalidObjectState</a>,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;};</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">/**&lt; Utility namespace containing helpers functions */</span></div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="namespaceacl_1_1detail.xhtml">   64</a></span>&#160;<span class="keyword">namespace </span>detail</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/** Construct to handle destruction of objects</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> * @tparam T Object base type</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="structacl_1_1detail_1_1_object_deleter.xhtml">   71</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structacl_1_1detail_1_1_object_deleter.xhtml">ObjectDeleter</a></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;};</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="_acl_8hpp.xhtml#a8b49454fa4cb4a6431702ba544afcea7">   75</a></span>&#160;<span class="preprocessor">#define OBJECT_DELETER(obj, func)              \</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">    template &lt;&gt;                                \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">    struct ObjectDeleter&lt;obj&gt;                  \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">                                               \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">    {                                          \</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">        static inline AclStatus Destroy(obj v) \</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">        {                                      \</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">            return func(v);                    \</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">        }                                      \</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">    };</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="structacl_1_1detail_1_1_object_deleter_3_01_acl_context_01_4.xhtml#a5d46f145a53f86e4f3a36cd5c7fab965">   86</a></span>&#160;<a class="code" href="_acl_8hpp.xhtml#a8b49454fa4cb4a6431702ba544afcea7">OBJECT_DELETER</a>(<a class="code" href="struct_acl_context__.xhtml">AclContext</a>, <a class="code" href="_acl_entrypoints_8h.xhtml#ab28f6d540e919720ad2425dbe67c38c3">AclDestroyContext</a>)</div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="structacl_1_1detail_1_1_object_deleter_3_01_acl_queue_01_4.xhtml#ae1116e3c2c1ff8f374706ff2365e6528">   87</a></span>&#160;<a class="code" href="_acl_8hpp.xhtml#a8b49454fa4cb4a6431702ba544afcea7">OBJECT_DELETER</a>(<a class="code" href="struct_acl_queue__.xhtml">AclQueue</a>, <a class="code" href="_acl_entrypoints_8h.xhtml#a09a6b6162edaca978bd5791ae52fea7d">AclDestroyQueue</a>)</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="structacl_1_1detail_1_1_object_deleter_3_01_acl_tensor_01_4.xhtml#aec486518c9ad7ef7933527a18097e7f4">   88</a></span>&#160;<a class="code" href="_acl_8hpp.xhtml#a8b49454fa4cb4a6431702ba544afcea7">OBJECT_DELETER</a>(<a class="code" href="struct_acl_tensor__.xhtml">AclTensor</a>, <a class="code" href="_acl_entrypoints_8h.xhtml#abb1208d4213183fe5cc0c5742e0df966">AclDestroyTensor</a>)</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="structacl_1_1detail_1_1_object_deleter_3_01_acl_tensor_pack_01_4.xhtml#aa47d0509d69068f356877108b86e7d4e">   89</a></span>&#160;<a class="code" href="_acl_8hpp.xhtml#a8b49454fa4cb4a6431702ba544afcea7">OBJECT_DELETER</a>(<a class="code" href="struct_acl_tensor_pack__.xhtml">AclTensorPack</a>, <a class="code" href="_acl_entrypoints_8h.xhtml#a0dd4cd60a1039b649151ded8f0833baf">AclDestroyTensorPack</a>)</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="structacl_1_1detail_1_1_object_deleter_3_01_acl_operator_01_4.xhtml#a5e56af816a8d6299dbd2376c738e1895">   90</a></span>&#160;<a class="code" href="_acl_8hpp.xhtml#a8b49454fa4cb4a6431702ba544afcea7">OBJECT_DELETER</a>(<a class="code" href="struct_acl_operator__.xhtml">AclOperator</a>, <a class="code" href="_acl_entrypoints_8h.xhtml#a04c8614f16b47287dd772b26434cd879">AclDestroyOperator</a>)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#undef OBJECT_DELETER</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">/** Convert a strongly typed enum to an old plain c enum</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">  * @tparam E  Plain old C enum</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">  * @tparam SE Strongly typed resulting enum</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">  * @param[in] v Value to convert</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  * @return A corresponding plain old C enumeration</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> E, <span class="keyword">typename</span> SE&gt;</div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="namespaceacl_1_1detail.xhtml#a61a321bcf1789872f01b816d3434a207">  104</a></span>&#160;constexpr E <a class="code" href="namespaceacl_1_1detail.xhtml#a61a321bcf1789872f01b816d3434a207">as_cenum</a>(SE v) noexcept</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>E<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span>typename <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">std::underlying_type&lt;SE&gt;::type</a><span class="keyword">&gt;</span>(v));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">/** Convert plain old enumeration to a strongly typed enum</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  * @tparam SE Strongly typed resulting enum</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">  * @tparam E  Plain old C enum</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  * @param[in] val Value to convert</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">  * @return A corresponding strongly typed enumeration</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> SE, <span class="keyword">typename</span> E&gt;</div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="namespaceacl_1_1detail.xhtml#a9018a522b1fb9f7d42d489db1d8bde54">  119</a></span>&#160;constexpr SE <a class="code" href="namespaceacl_1_1detail.xhtml#a9018a522b1fb9f7d42d489db1d8bde54">as_enum</a>(E val) noexcept</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>SE<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">/** Object base class for library objects</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * Class is defining basic common interface for all the library objects</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> * @tparam T Object type to be templated on</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classacl_1_1detail_1_1_object_base.xhtml">  131</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase</a></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">    /** Destructor */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#aade7d4fd73ec27397ca54503f21e8509">~ObjectBase</a>() = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">    /** Copy constructor */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase</a>(<span class="keyword">const</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">    /** Move Constructor */</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase</a>(<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">    /** Copy assignment operator */</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ad5d3c90ad8bbc807c842b5bd0ddf42bf">operator=</a>(<span class="keyword">const</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">    /** Move assignment operator */</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ad5d3c90ad8bbc807c842b5bd0ddf42bf">operator=</a>(<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;&amp;) = <span class="keywordflow">default</span>;<span class="comment"></span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">    /** Reset object value</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">     * @param [in] val Value to set</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">  148</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">reset</a>(T *val)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        _object.reset(val, <a class="code" href="structacl_1_1detail_1_1_object_deleter.xhtml">detail::ObjectDeleter&lt;T *&gt;::Destroy</a>);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">    /** Access uderlying object</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * @return Underlying object</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">  156</a></span>&#160;    <span class="keyword">const</span> T *<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">return</span> _object.get();</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">    /** Access uderlying object</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">     * @return Underlying object</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classacl_1_1detail_1_1_object_base.xhtml#ac051b2568208e363ae2dffb23c0ad9ba">  164</a></span>&#160;    T *<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac051b2568208e363ae2dffb23c0ad9ba">get</a>()</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">return</span> _object.get();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">    /** Constructor */</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    std::shared_ptr&lt;T&gt; _object{<span class="keyword">nullptr</span>}; <span class="comment">/**&lt; Library object */</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;};</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">/** Equality operator for library object</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> * @tparam T Parameter to template on</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> * @param[in] lhs Left hand-side argument</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> * @param[in] rhs Right hand-side argument</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> * @return True if objects are equal, else false</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="namespaceacl_1_1detail.xhtml#af592806fbddc3e9eea79f4c088b087cc">  187</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceacl_1_1detail.xhtml#af592806fbddc3e9eea79f4c088b087cc">operator==</a>(<span class="keyword">const</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;rhs)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">return</span> lhs.<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>() == rhs.<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">/** Inequality operator for library object</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> * @tparam T Parameter to template on</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> * @param[in] lhs Left hand-side argument</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> * @param[in] rhs Right hand-side argument</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> * @return True if objects are equal, else false</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="namespaceacl_1_1detail.xhtml#aac2632af719d9bdcb59e439516bc421b">  202</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceacl_1_1detail.xhtml#aac2632af719d9bdcb59e439516bc421b">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">ObjectBase&lt;T&gt;</a> &amp;rhs)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> !(lhs == rhs);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;} <span class="comment">// namespace detail</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_EXCEPTIONS_ENABLED)</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">/** Status class</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> * Class is an extension of std::exception and contains the underlying</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> * status construct and an error explanatory message to be reported.</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> * @note Class is visible only when exceptions are enabled during compilation</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword">class </span>Status : <span class="keyword">public</span> std::exception</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     * @param[in] status Status returned</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     * @param[in] msg    Error message to be bound with the exception</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    Status(<a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> status, <span class="keyword">const</span> std::string &amp;msg) : _status(status), _msg(msg)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">    /** Returns an explanatory exception message</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment">     * @return Status message</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *what() const noexcept<span class="keyword"> override</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">return</span> _msg.c_str();</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">    /** Underlying status accessor</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     * @return Status code</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> status()<span class="keyword"> const</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> _status;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">    /** Explicit status converter</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">     * @return Status code</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">explicit</span> <span class="keyword">operator</span> <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> _status;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>  _status; <span class="comment">/**&lt; Status code */</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    std::string _msg;    <span class="comment">/**&lt; Status message */</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;};</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">/** Reports an error status and throws an exception object in case of failure</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> * @note This implementation is used when exceptions are enabled during compilation</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"> * @param[in] status Status to report</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"> * @param[in] msg    Explanatory error messaged</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> * @return Status code</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> report_status(<a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> status, <span class="keyword">const</span> std::string &amp;msg)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">if</span> (status != <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">StatusCode::Success</a>)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">throw</span> Status(status, msg);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* defined(ARM_COMPUTE_EXCEPTIONS_ENABLED) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">/** Reports a status code</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"> * @note This implementation is used when exceptions are disabled during compilation</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment"> * @note Message is surpressed and not reported in this case</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"> * @param[in] status Status to report</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> * @param[in] msg    Explanatory error messaged</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> * @return Status code</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> report_status(<a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> status, <span class="keyword">const</span> std::string &amp;msg)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <a class="code" href="_acl_8hpp.xhtml#ad32638694a2241eb52f0c58f7cd89ed1">ARM_COMPUTE_IGNORE_UNUSED</a>(status);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <a class="code" href="_acl_8hpp.xhtml#ad32638694a2241eb52f0c58f7cd89ed1">ARM_COMPUTE_IGNORE_UNUSED</a>(msg);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_EXCEPTIONS_ENABLED) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">/**&lt; Target enum */</span></div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">  292</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e">Cpu</a>    = <a class="code" href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483a71cbccca38c1ea3c257cff95a92d41e2">AclCpu</a>,   <span class="comment">/**&lt; Cpu target that leverages SIMD */</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3">GpuOcl</a> = <a class="code" href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483adb7b44c0ec8957483f3dbf6d63fde846">AclGpuOcl</a> <span class="comment">/**&lt; Gpu target that leverages OpenCL */</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;};</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">/**&lt; Available execution modes */</span></div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">  299</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">ExecutionMode</a></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;{</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df">FastRerun</a> =</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a0c619b2e90be7d83736a8cb49085deee">AclPreferFastRerun</a>, <span class="comment">/**&lt; Prefer minimum latency in consecutive runs, might introduce higher startup times */</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3">FastStart</a> = <a class="code" href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a76a2b4d702182be52cb658037bd55b58">AclPreferFastStart</a>, <span class="comment">/**&lt; Prefer minimizing startup time */</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;};</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">/** Context class</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> * Context acts as a central aggregate service for further objects created from it.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> * It provides, internally, common facilities in order to avoid the use of global</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> * statically initialized objects that can lead to important side-effect under</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> * specific execution contexts.</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> * For example context contains allocators for object creation, for further backing memory allocation,</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> * any serialization interfaces and other modules that affect the construction of objects,</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> * like program caches for OpenCL.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="classacl_1_1_context.xhtml">  317</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_context.xhtml">Context</a> : <span class="keyword">public</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">detail::ObjectBase</a>&lt;AclContext_&gt;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;{</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">    /**&lt; Context options */</span></div>
<div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="structacl_1_1_context_1_1_options.xhtml">  321</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structacl_1_1_context_1_1_options.xhtml">Options</a></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="structacl_1_1_context_1_1_options.xhtml#a0b1b399e8c3c1fee45e3aa5625aefebe">  323</a></span>&#160;        <span class="keyword">static</span> constexpr int32_t <a class="code" href="structacl_1_1_context_1_1_options.xhtml#a0b1b399e8c3c1fee45e3aa5625aefebe">num_threads_auto</a> = -1; <span class="comment">/**&lt; Allow runtime to specify number of threads */</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">        /** Default Constructor</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">         * @note By default no precision loss is enabled for operators</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">         * @note By default the preferred execution mode is to favor multiple consecutive reruns of an operator</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="structacl_1_1_context_1_1_options.xhtml#a28d39a844c3a37ab61d32ab7c6352f09">  330</a></span>&#160;        <a class="code" href="structacl_1_1_context_1_1_options.xhtml#a28d39a844c3a37ab61d32ab7c6352f09">Options</a>()</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            : <a class="code" href="structacl_1_1_context_1_1_options.xhtml">Options</a>(<a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">ExecutionMode</a>::<a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df">FastRerun</a> <span class="comment">/* mode */</span>,</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                      <a class="code" href="_acl_types_8h.xhtml#a9a889dbe454aa7d9ed9785d729c6576ca04f22edb7b95cd18e1af58634b824749">AclCpuCapabilitiesAuto</a> <span class="comment">/* caps */</span>,</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                      false <span class="comment">/* enable_fast_math */</span>,</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                      nullptr <span class="comment">/* kernel_config */</span>,</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                      <a class="code" href="structacl_1_1_context_1_1_options.xhtml#a0b1b399e8c3c1fee45e3aa5625aefebe">num_threads_auto</a> <span class="comment">/* max_compute_units */</span>,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                      nullptr <span class="comment">/* allocator */</span>)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }<span class="comment"></span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">        /** Constructor</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">         * @param[in] mode              Execution mode to be used</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">         * @param[in] caps              Capabilities to be used</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">         * @param[in] enable_fast_math  Allow precision loss in favor of performance</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">         * @param[in] kernel_config     Kernel configuration file containing construction tuning meta-data</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">         * @param[in] max_compute_units Max compute units that are expected to used</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">         * @param[in] allocator         Allocator to be used for internal memory allocation</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="structacl_1_1_context_1_1_options.xhtml#aa266ce6b1e0f6ab74d684c33e1fd6bc9">  348</a></span>&#160;        <a class="code" href="structacl_1_1_context_1_1_options.xhtml#aa266ce6b1e0f6ab74d684c33e1fd6bc9">Options</a>(<a class="code" href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">ExecutionMode</a>         <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>,</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <a class="code" href="_acl_types_8h.xhtml#acc22b5786e09c538c1ed7f159388067d">AclTargetCapabilities</a> caps,</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordtype">bool</span>                  enable_fast_math,</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">char</span>           *kernel_config,</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                int32_t               max_compute_units,</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                <a class="code" href="struct_acl_allocator.xhtml">AclAllocator</a>         *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">allocator</a>)</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>.<a class="code" href="struct_acl_context_options.xhtml#a5622f5b426a90ae94b4e21b889f93b6f">mode</a>               = detail::as_cenum&lt;AclExecutionMode&gt;(<a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>.<a class="code" href="struct_acl_context_options.xhtml#abb94a1222fc5cb627f8d9e517a0a3a83">capabilities</a>       = caps;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            <a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>.<a class="code" href="struct_acl_context_options.xhtml#a94c30e1956b73564d2ea11c8aea6d975">enable_fast_math</a>   = enable_fast_math;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>.<a class="code" href="struct_acl_context_options.xhtml#a11ac16fdc135ced5986c472468eb6779">kernel_config_file</a> = kernel_config;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            <a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>.<a class="code" href="struct_acl_context_options.xhtml#a3043ba49e39a241ec88b961eadc300d5">max_compute_units</a>  = max_compute_units;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>.<a class="code" href="struct_acl_context_options.xhtml#a59ea3ce4c90f7fadd3efd941ea300224">allocator</a>          = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">allocator</a>;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">  363</a></span>&#160;        <a class="code" href="struct_acl_context_options.xhtml">AclContextOptions</a> <a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>{};</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    };</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">     * @note Serves as a simpler delegate constructor</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">     * @note As context options, default conservative options will be used</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">     * @param[in]  target Target to create context for</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">     * @param[out] status Status information if requested</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00375"></a><span class="lineno"><a class="line" href="classacl_1_1_context.xhtml#a7f1d7959f153f2481c12e65391ee51b0">  375</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classacl_1_1_context.xhtml#a7f1d7959f153f2481c12e65391ee51b0">Context</a>(<a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target, <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> *status = <span class="keyword">nullptr</span>) : <a class="code" href="classacl_1_1_context.xhtml">Context</a>(target, <a class="code" href="structacl_1_1_context_1_1_options.xhtml">Options</a>(), status)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">     * @param[in]  target  Target to create context for</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">     * @param[in]  options Context construction options</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">     * @param[out] status  Status information if requested</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classacl_1_1_context.xhtml#af62966a3aecde684e6670b3d224119ec">  384</a></span>&#160;    <a class="code" href="classacl_1_1_context.xhtml#af62966a3aecde684e6670b3d224119ec">Context</a>(<a class="code" href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target, <span class="keyword">const</span> <a class="code" href="structacl_1_1_context_1_1_options.xhtml">Options</a> &amp;options, <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> *status = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <a class="code" href="struct_acl_context__.xhtml">AclContext</a> ctx;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st =</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#a24008433ea6baa1e783ffd60a0a003d9">AclCreateContext</a>(&amp;ctx, detail::as_cenum&lt;AclTarget&gt;(target), &amp;options.<a class="code" href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">copts</a>));</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">reset</a>(ctx);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to create context&quot;</span>);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">if</span> (status)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            *status = st;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;};</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">/**&lt; Available tuning modes */</span></div>
<div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278">  399</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278">TuningMode</a></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;{</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278ab571ef5b2664270d25bea4f4b61ffe68">Rapid</a>      = <a class="code" href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfa997e17122ca0c4fa234eca779ced4dc6">AclRapid</a>,</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <a class="code" href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278a960b44c579bc2f6818d2daaf9e4c16f0">Normal</a>     = <a class="code" href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfa4c57ca145fea59211b9c79881cdd367b">AclNormal</a>,</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <a class="code" href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278afaf34f09ea1e93bfbf591e19dc0dfb9f">Exhaustive</a> = <a class="code" href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfa5eb2856170a1449f705df21cd819562a">AclExhaustive</a></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;};</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">/** Queue class</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="comment"> * Queue is responsible for the execution related aspects, with main responsibilities those of</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="comment"> * scheduling and tuning operators.</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"> * Multiple queues can be created from the same context, and the same operator can be scheduled on each concurrently.</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="comment"> * @note An operator might depend on the maximum possible compute units that are provided in the context,</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"> *       thus in cases where the number of the scheduling units of the queue are greater might lead to errors.</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="classacl_1_1_queue.xhtml">  416</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_queue.xhtml">Queue</a> : <span class="keyword">public</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">detail::ObjectBase</a>&lt;AclQueue_&gt;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;{</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment">    /**&lt; Queue options */</span></div>
<div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="structacl_1_1_queue_1_1_options.xhtml">  420</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structacl_1_1_queue_1_1_options.xhtml">Options</a></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    {<span class="comment"></span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">        /** Default Constructor</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">         * As default options, no tuning will be performed, and the number of scheduling units will</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">         * depends on internal device discovery functionality</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="structacl_1_1_queue_1_1_options.xhtml#a28d39a844c3a37ab61d32ab7c6352f09">  427</a></span>&#160;        <a class="code" href="structacl_1_1_queue_1_1_options.xhtml#a28d39a844c3a37ab61d32ab7c6352f09">Options</a>() : <a class="code" href="structacl_1_1_queue_1_1_options.xhtml#a666bad55fe50b9e041d02bb4112f0651">opts</a>{<a class="code" href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfae1da0b93c2a6ab07f455c07e4716cdf8">AclTuningModeNone</a>, 0} {};<span class="comment"></span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment">        /** Constructor</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">         * @param[in] mode          Tuning mode to be used</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">         * @param[in] compute_units Number of scheduling units to be used</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="structacl_1_1_queue_1_1_options.xhtml#a0f99e19f22aba855435681ba64a2e79a">  433</a></span>&#160;        <a class="code" href="structacl_1_1_queue_1_1_options.xhtml#a0f99e19f22aba855435681ba64a2e79a">Options</a>(<a class="code" href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278">TuningMode</a> <a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>, int32_t compute_units) : <a class="code" href="structacl_1_1_queue_1_1_options.xhtml#a666bad55fe50b9e041d02bb4112f0651">opts</a>{detail::as_cenum&lt;AclTuningMode&gt;(<a class="code" href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">mode</a>), compute_units}</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="structacl_1_1_queue_1_1_options.xhtml#a666bad55fe50b9e041d02bb4112f0651">  437</a></span>&#160;        <a class="code" href="struct_acl_queue_options.xhtml">AclQueueOptions</a> <a class="code" href="structacl_1_1_queue_1_1_options.xhtml#a666bad55fe50b9e041d02bb4112f0651">opts</a>;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    };</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">     * @note Serves as a simpler delegate constructor</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">     * @note As queue options, default conservative options will be used</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">     * @param[in]  ctx    Context to create queue for</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment">     * @param[out] status Status information if requested</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00449"></a><span class="lineno"><a class="line" href="classacl_1_1_queue.xhtml#a37845aa04e73372525e2e697c795f5fd">  449</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classacl_1_1_queue.xhtml#a37845aa04e73372525e2e697c795f5fd">Queue</a>(<a class="code" href="classacl_1_1_context.xhtml">Context</a> &amp;ctx, <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> *status = <span class="keyword">nullptr</span>) : <a class="code" href="classacl_1_1_queue.xhtml">Queue</a>(ctx, <a class="code" href="structacl_1_1_queue_1_1_options.xhtml">Options</a>(), status)</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="comment">     * @note As queue options, default conservative options will be used</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="comment">     * @param[in]  ctx     Context from where the queue will be created from</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">     * @param[in]  options Queue options to be used</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">     * @param[out] status  Status information if requested</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="classacl_1_1_queue.xhtml#ab11a74b4e4fa1f4a7d70c3c1b078cd33">  460</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classacl_1_1_queue.xhtml#ab11a74b4e4fa1f4a7d70c3c1b078cd33">Queue</a>(<a class="code" href="classacl_1_1_context.xhtml">Context</a> &amp;ctx, <span class="keyword">const</span> <a class="code" href="structacl_1_1_queue_1_1_options.xhtml">Options</a> &amp;options = <a class="code" href="structacl_1_1_queue_1_1_options.xhtml">Options</a>(), <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> *status = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <a class="code" href="struct_acl_queue__.xhtml">AclQueue</a>   queue;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#a2d02b31b77acf5b05e5d311bc46b3147">AclCreateQueue</a>(&amp;queue, ctx.<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>(), &amp;options.opts));</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">reset</a>(queue);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to create queue!&quot;</span>);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">if</span> (status)</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        {</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            *status = st;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="comment">    /** Block until all the tasks of the queue have been marked as finished</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="comment">     * @return Status code</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="classacl_1_1_queue.xhtml#ad5c66901c748265b9e2e8edd2996bd17">  475</a></span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> <a class="code" href="classacl_1_1_queue.xhtml#ad5c66901c748265b9e2e8edd2996bd17">finish</a>()</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <span class="keywordflow">return</span> detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#a9f1e3973a09da9eb7e86b96b7bd635c3">AclQueueFinish</a>(_object.get()));</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;};</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment">/**&lt; Data type enumeration */</span></div>
<div class="line"><a name="l00482"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">  482</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</a>  = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baabb7672feb78f1edec1c327b3f43736a4">AclDataTypeUnknown</a>,</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ab31df9c476d20e85ff898121efe11b5a">UInt8</a>    = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa3a845fe5392bc0c30644c2fba5872a15">AclUInt8</a>,</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a7d839b2c12bfd40ac121b4cc9e81c539">Int8</a>     = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baae4b921aaf20bcaf12f37a84a5b2a9ab1">AclInt8</a>,</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a8bd950a9d7779b83f5c30046c9aaf1cf">UInt16</a>   = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baaf2a3dd97bee9535cf5efb612a1d5c161">AclUInt16</a>,</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a39bc2ae44b184207f560ff8619823208">Int16</a>    = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa11b8388b33efad227e2e94bc55c1709a">AclInt16</a>,</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae7956ed7be1c5025a27ed3cb42a396bd">UInt32</a>   = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baadf3ac4262732a4af6afd7bbae1045d13">AclUint32</a>,</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac06129f6e6e15c09328365e553f1dc31">Int32</a>    = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa86bb38b9fe2d282403e99b461ce769c7">AclInt32</a>,</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">Float16</a>  = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baacbcd0bec58ba6aff7835d20afbc780cd">AclFloat16</a>,</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">BFloat16</a> = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa0e60e804ba39f9587a6d7c032471cae0">AclBFloat16</a>,</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">Float32</a>  = <a class="code" href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baab928cfcdc3f0843fdf5e495818cef288">AclFloat32</a>,</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;};</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">/** Tensor Descriptor class</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="comment"> * Structure that contains all the required meta-data to represent a tensor</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00500"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_descriptor.xhtml">  500</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;{</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">     * @param[in] shape Shape of the tensor</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">     * @param[in] data_type Data type of the tensor</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00508"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_descriptor.xhtml#abc369e0bd0ce3425a967621ba6c027bb">  508</a></span>&#160;    <a class="code" href="classacl_1_1_tensor_descriptor.xhtml#abc369e0bd0ce3425a967621ba6c027bb">TensorDescriptor</a>(<span class="keyword">const</span> std::vector&lt;int32_t&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>, <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>) : _shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>), _data_type(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    {</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        _cdesc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#aa38273bb50d742d3862669ae4839b807">ndims</a>     = _shape.size();</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        _cdesc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#a3daf61aa16ccaec801090f1e898051e8">shape</a>     = _shape.data();</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        _cdesc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#aeb8b7e1875910e807e1e4e59bf089dfb">data_type</a> = detail::as_cenum&lt;AclDataType&gt;(_data_type);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        _cdesc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#a67714016c68812e5a17e53eaa9191104">strides</a>   = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        _cdesc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#a46422e4ae10facdacffbc6c5f0b12f09">boffset</a>   = 0;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment">     * @param[in] desc C-type descriptor</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00520"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_descriptor.xhtml#ab73e552eaa3b26e097d2ba81a3a07a53">  520</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml#ab73e552eaa3b26e097d2ba81a3a07a53">TensorDescriptor</a>(<span class="keyword">const</span> <a class="code" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> &amp;desc)</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        _cdesc     = desc;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        _data_type = detail::as_enum&lt;DataType&gt;(desc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#aeb8b7e1875910e807e1e4e59bf089dfb">data_type</a>);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        _shape.reserve(desc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#aa38273bb50d742d3862669ae4839b807">ndims</a>);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordflow">for</span> (int32_t d = 0; d &lt; desc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#aa38273bb50d742d3862669ae4839b807">ndims</a>; ++d)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            _shape.emplace_back(desc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#a3daf61aa16ccaec801090f1e898051e8">shape</a>[d]);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">    /** Get underlying C tensor descriptor</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">     * @return Underlying structure</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00534"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_descriptor.xhtml#a8d286430bfc49c0f5cb3266aa4b94258">  534</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> *<a class="code" href="classacl_1_1_tensor_descriptor.xhtml#a8d286430bfc49c0f5cb3266aa4b94258">get</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keywordflow">return</span> &amp;_cdesc;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">    /** Operator to compare two TensorDescriptor</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">     * @param[in] other The instance to compare against</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">     * @return True if two instances have the same shape and data type</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_descriptor.xhtml#a3a5690bf6b6e8d51b96a50c58fe36d4a">  544</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml#a3a5690bf6b6e8d51b96a50c58fe36d4a">operator==</a>(<span class="keyword">const</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;other)</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordtype">bool</span> is_same = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160; </div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        is_same &amp;= _data_type == other._data_type;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        is_same &amp;= _shape.size() == other._shape.size();</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160; </div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="keywordflow">if</span> (is_same)</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            <span class="keywordflow">for</span> (uint32_t d = 0; d &lt; _shape.size(); ++d)</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            {</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                is_same &amp;= _shape[d] == other._shape[d];</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        }</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160; </div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keywordflow">return</span> is_same;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    std::vector&lt;int32_t&gt; _shape{};</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>             _data_type{};</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a>  _cdesc{};</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;};</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment">/** Import memory types */</span></div>
<div class="line"><a name="l00569"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml#afedf28d42d92fc1609c264c3c8e3f7f1">  569</a></span>&#160;<span class="keyword">enum class</span> <a class="code" href="namespaceacl.xhtml#afedf28d42d92fc1609c264c3c8e3f7f1">ImportType</a></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;{</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <a class="code" href="namespaceacl.xhtml#afedf28d42d92fc1609c264c3c8e3f7f1ac2ca16d048ec66e04bca283eab048ec2">Host</a> = <a class="code" href="_acl_types_8h.xhtml#a7a59b5478ea9250c2d244831c2c4672aae475aad5997d129ce4dab14a28ddb802">AclImportMemoryType::AclHostPtr</a></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;};</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment">/** Tensor class</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment"> * Tensor is an mathematical construct that can represent an N-Dimensional space.</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"> * @note Maximum dimensionality support is 6 internally at the moment</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00580"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml">  580</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_tensor.xhtml">Tensor</a> : <span class="keyword">public</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">detail::ObjectBase</a>&lt;AclTensor_&gt;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;{</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment">     * @note Tensor memory is allocated</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment">     * @param[in]  ctx    Context from where the tensor will be created from</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="comment">     * @param[in]  desc   Tensor descriptor to be used</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="comment">     * @param[out] status Status information if requested</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00591"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml#af71c95744d72572defee0bc3e53530c8">  591</a></span>&#160;    <a class="code" href="classacl_1_1_tensor.xhtml#af71c95744d72572defee0bc3e53530c8">Tensor</a>(<a class="code" href="classacl_1_1_context.xhtml">Context</a> &amp;ctx, <span class="keyword">const</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;desc, <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> *status = <span class="keyword">nullptr</span>) : <a class="code" href="classacl_1_1_tensor.xhtml">Tensor</a>(ctx, desc, true, status)</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    {</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">     * @param[in]  ctx    Context from where the tensor will be created from</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">     * @param[in]  desc   Tensor descriptor to be used</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;<span class="comment">     * @param[in]  allocate Flag to indicate if the tensor needs to be allocated</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="comment">     * @param[out] status Status information if requested</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00601"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml#a993f232f4c79265dde0292b14d827759">  601</a></span>&#160;    <a class="code" href="classacl_1_1_tensor.xhtml#a993f232f4c79265dde0292b14d827759">Tensor</a>(<a class="code" href="classacl_1_1_context.xhtml">Context</a> &amp;ctx, <span class="keyword">const</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;desc, <span class="keywordtype">bool</span> allocate, <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> *status)</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <a class="code" href="struct_acl_tensor__.xhtml">AclTensor</a>  <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#acd5a3091549e64d2259d97113aed9d50">AclCreateTensor</a>(&amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, ctx.<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>(), desc.<a class="code" href="classacl_1_1_tensor_descriptor.xhtml#a8d286430bfc49c0f5cb3266aa4b94258">get</a>(), allocate));</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">reset</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to create tensor!&quot;</span>);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keywordflow">if</span> (status)</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        {</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            *status = st;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment">    /** Maps the backing memory of a given tensor that can be used by the host to access any contents</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment">     * @return A valid non-zero pointer in case of success else nullptr</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml#ad4dae3db20740c9ffda9e83e73e373ff">  616</a></span>&#160;    <span class="keywordtype">void</span> *<a class="code" href="classacl_1_1_tensor.xhtml#ad4dae3db20740c9ffda9e83e73e373ff">map</a>()</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    {</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordtype">void</span>      *handle = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st     = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#a94b41b78fd18d9dbff5325f7636c8974">AclMapTensor</a>(_object.get(), &amp;handle));</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to map the tensor and extract the tensor&#39;s backing memory!&quot;</span>);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">return</span> handle;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">    /** Unmaps tensor&#39;s memory</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">     * @param[in] handle Handle to unmap</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">     * @return Status code</span></div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00629"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml#ac1c87d216f8f74cc18176fe86b303ca4">  629</a></span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> <a class="code" href="classacl_1_1_tensor.xhtml#ac1c87d216f8f74cc18176fe86b303ca4">unmap</a>(<span class="keywordtype">void</span> *handle)</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    {</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#a22a4f3406d18376e3d8740c72e3b2a35">AclUnmapTensor</a>(_object.get(), handle));</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to unmap the tensor!&quot;</span>);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="keywordflow">return</span> st;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">    /** Import external memory to a given tensor object</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment">     * @param[in] handle External memory handle</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="comment">     * @param[in] type   Type of memory to be imported</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">     * @return Status code</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00642"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml#a38198174a275be845cdb10bb4e6aca88">  642</a></span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> <span class="keyword">import</span>(<span class="keywordtype">void</span> *handle, <a class="code" href="namespaceacl.xhtml#afedf28d42d92fc1609c264c3c8e3f7f1">ImportType</a> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    {</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = detail::as_enum&lt;StatusCode&gt;(</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            <a class="code" href="_acl_entrypoints_8h.xhtml#a3296c2f66ee36d849ae4d51fdd1d0521">AclTensorImport</a>(_object.get(), handle, detail::as_cenum&lt;AclImportMemoryType&gt;(<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>)));</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to import external memory to tensor!&quot;</span>);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keywordflow">return</span> st;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment">    /** Get the size of the tensor in byte</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment">     * @note The size isn&#39;t based on allocated memory, but based on information in its descriptor (dimensions, data type, etc.).</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="comment">     * @return The size of the tensor in byte</span></div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00655"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml#a8a1f1bfaf3fca05c7743669cfbf80c9d">  655</a></span>&#160;    uint64_t <a class="code" href="classacl_1_1_tensor.xhtml#a8a1f1bfaf3fca05c7743669cfbf80c9d">get_size</a>()</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    {</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        uint64_t   size{0};</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> st = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_utils_8h.xhtml#a3765ad55daa863d5ae9b5aa3b69b29e7">AclGetTensorSize</a>(_object.get(), &amp;size));</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to get the size of the tensor&quot;</span>);</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="keywordflow">return</span> size;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="comment">    /** Get the descriptor of this tensor</span></div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="comment">     * @return The descriptor describing the characteristics of this tensor</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00666"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor.xhtml#a4adeb6061e4e0914bff60a51e493f240">  666</a></span>&#160;    <a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> <a class="code" href="classacl_1_1_tensor.xhtml#a4adeb6061e4e0914bff60a51e493f240">get_descriptor</a>()</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    {</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <a class="code" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> desc;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>          st = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_utils_8h.xhtml#a508c3d453eee61abe6a9beaf36c3a208">AclGetTensorDescriptor</a>(_object.get(), &amp;desc));</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failed to get the descriptor of the tensor&quot;</span>);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>(desc);</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;};</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment">/** Tensor pack class</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="comment"> * Pack is a utility construct that is used to create a collection of tensors that can then</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;<span class="comment"> * be passed into operator as inputs.</span></div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00680"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_pack.xhtml">  680</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_tensor_pack.xhtml">TensorPack</a> : <span class="keyword">public</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">detail::ObjectBase</a>&lt;AclTensorPack_&gt;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;{</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment">    /** Pack pair construct */</span></div>
<div class="line"><a name="l00684"></a><span class="lineno"><a class="line" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml">  684</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml">PackPair</a></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    {<span class="comment"></span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment">        /** Constructor</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment">         *</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment">         * @param[in] tensor_ Tensor to pack</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment">         * @param[in] slot_id_ Slot identification of the tensor in respect with the operator</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment">         */</span></div>
<div class="line"><a name="l00691"></a><span class="lineno"><a class="line" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#ad4a96ae78f0b624ce3fd9df4122d3ecb">  691</a></span>&#160;        <a class="code" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#ad4a96ae78f0b624ce3fd9df4122d3ecb">PackPair</a>(<a class="code" href="classacl_1_1_tensor.xhtml">Tensor</a> *tensor_, int32_t slot_id_) : <a class="code" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a56104a5fbf07dd0724ba94122df99001">tensor</a>(tensor_), <a class="code" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a986ae7f53c6aa34a9387c995614c366b">slot_id</a>(slot_id_)</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        {</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        }</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160; </div>
<div class="line"><a name="l00695"></a><span class="lineno"><a class="line" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a56104a5fbf07dd0724ba94122df99001">  695</a></span>&#160;        <a class="code" href="classacl_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a56104a5fbf07dd0724ba94122df99001">tensor</a>{<span class="keyword">nullptr</span>};         <span class="comment">/**&lt; Tensor object */</span></div>
<div class="line"><a name="l00696"></a><span class="lineno"><a class="line" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a986ae7f53c6aa34a9387c995614c366b">  696</a></span>&#160;        int32_t <a class="code" href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a986ae7f53c6aa34a9387c995614c366b">slot_id</a>{<a class="code" href="_acl_types_8h.xhtml#a3d5fcb1398352b2614a3e3af9705e0afa411b6da60e8d2ca46ed0cedf6c8c4b95">AclSlotUnknown</a>}; <span class="comment">/**&lt; Slot id in respect with the operator */</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    };</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160; </div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="comment">    /** Constructor</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="comment">     * @param[in]  ctx    Context from where the tensor pack will be created from</span></div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="comment">     * @param[out] status Status information if requested</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00705"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_pack.xhtml#ac45972ddd07f1d0726f21198c524e294">  705</a></span>&#160;    <span class="keyword">explicit</span> <a class="code" href="classacl_1_1_tensor_pack.xhtml#ac45972ddd07f1d0726f21198c524e294">TensorPack</a>(<a class="code" href="classacl_1_1_context.xhtml">Context</a> &amp;ctx, <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> *status = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    {</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <a class="code" href="struct_acl_tensor_pack__.xhtml">AclTensorPack</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>    st = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#aa198d7fd208daa37bea62a3284cf05a0">AclCreateTensorPack</a>(&amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>, ctx.<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>()));</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">reset</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>);</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failure during tensor pack creation&quot;</span>);</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        <span class="keywordflow">if</span> (status)</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        {</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            *status = st;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        }</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment">    /** Add tensor to tensor pack</span></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment">     * @param[in] slot_id Slot id of the tensor in respect with the operator</span></div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment">     * @param[in] tensor  Tensor to be added in the pack</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment">     * @return Status code</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00723"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_pack.xhtml#a3166a3578cd36472968d53738b1e1142">  723</a></span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> <a class="code" href="classacl_1_1_tensor_pack.xhtml#a3166a3578cd36472968d53738b1e1142">add</a>(<a class="code" href="classacl_1_1_tensor.xhtml">Tensor</a> &amp;<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, int32_t slot_id)</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    {</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordflow">return</span> detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#adbb0c63266c2acd743a61c5186d76092">AclPackTensor</a>(_object.get(), <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>.get(), slot_id));</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    }<span class="comment"></span></div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="comment">    /** Add a list of tensors to a tensor pack</span></div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="comment">     * @param[in] packed Pair packs to be added</span></div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">     * @return Status code</span></div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00733"></a><span class="lineno"><a class="line" href="classacl_1_1_tensor_pack.xhtml#a0cea51803d9cb91563dea51eef88e991">  733</a></span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> <a class="code" href="classacl_1_1_tensor_pack.xhtml#a0cea51803d9cb91563dea51eef88e991">add</a>(std::initializer_list&lt;PackPair&gt; packed)</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span>           size = packed.size();</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        std::vector&lt;int32_t&gt;   slots(size);</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        std::vector&lt;AclTensor&gt; tensors(size);</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        <span class="keywordtype">int</span>                    i = 0;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;p : packed)</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            slots[i]   = p.slot_id;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            tensors[i] = <a class="code" href="_acl_types_8h.xhtml#a90ea96c40064aa67e45589a99db23e96">AclTensor</a>(p.tensor);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            ++i;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        }</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keywordflow">return</span> detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#aaf77900a1d93e1890afde55699f4b092">AclPackTensors</a>(_object.get(), tensors.data(), slots.data(), size));</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    }</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;};</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;<span class="comment">/** Operator class</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment"> * Operators are the basic algorithmic blocks responsible for performing distinct operations</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00753"></a><span class="lineno"><a class="line" href="classacl_1_1_operator.xhtml">  753</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_operator.xhtml">Operator</a> : <span class="keyword">public</span> <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml">detail::ObjectBase</a>&lt;AclOperator_&gt;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;{</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="comment">    /** Run an operator on a given input list</span></div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="comment">     * @param[in,out] queue Queue to scheduler the operator on</span></div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment">     * @param pack  Tensor list to be used as input</span></div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="comment">     *</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment">     * @return Status Code</span></div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00763"></a><span class="lineno"><a class="line" href="classacl_1_1_operator.xhtml#a6286086a603630f1a906c76b046e9356">  763</a></span>&#160;    <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> <a class="code" href="classacl_1_1_operator.xhtml#a6286086a603630f1a906c76b046e9356">run</a>(<a class="code" href="classacl_1_1_queue.xhtml">Queue</a> &amp;queue, <a class="code" href="classacl_1_1_tensor_pack.xhtml">TensorPack</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>)</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    {</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keywordflow">return</span> detail::as_cenum&lt;StatusCode&gt;(<a class="code" href="_acl_entrypoints_8h.xhtml#aceab9b4db8a76762883b158faec8f636">AclRunOperator</a>(_object.get(), queue.<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>.get()));</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160; </div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment">    /** Constructor */</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <a class="code" href="classacl_1_1_operator.xhtml">Operator</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;};</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="comment">/// Operators</span></div>
<div class="line"><a name="l00774"></a><span class="lineno"><a class="line" href="namespaceacl.xhtml#a02cb9b5f7cdc44527592a9cfb97be065">  774</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="struct_acl_activation_descriptor.xhtml">ActivationDesc</a> = <a class="code" href="struct_acl_activation_descriptor.xhtml">AclActivationDescriptor</a>;</div>
<div class="line"><a name="l00775"></a><span class="lineno"><a class="line" href="classacl_1_1_activation.xhtml">  775</a></span>&#160;<span class="keyword">class </span><a class="code" href="classacl_1_1_activation.xhtml">Activation</a> : <span class="keyword">public</span> <a class="code" href="classacl_1_1_operator.xhtml">Operator</a></div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;{</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00778"></a><span class="lineno"><a class="line" href="classacl_1_1_activation.xhtml#a505c9960029ef2f6b0b74545462bd280">  778</a></span>&#160;    <a class="code" href="classacl_1_1_activation.xhtml#a505c9960029ef2f6b0b74545462bd280">Activation</a>(<a class="code" href="classacl_1_1_context.xhtml">Context</a>                &amp;ctx,</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;               <span class="keyword">const</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;               <span class="keyword">const</span> <a class="code" href="classacl_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;               <span class="keyword">const</span> <a class="code" href="struct_acl_activation_descriptor.xhtml">ActivationDesc</a>   &amp;desc,</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;               <a class="code" href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>             *status = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    {</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <a class="code" href="struct_acl_operator__.xhtml">AclOperator</a> op;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>  st = detail::as_enum&lt;StatusCode&gt;(<a class="code" href="_acl_operators_8h.xhtml#a95b78d2431bb858a9f9e9e6aefeddac3">AclActivation</a>(&amp;op, ctx.<a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">get</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.get(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.get(), desc));</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        <a class="code" href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">reset</a>(op);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        report_status(st, <span class="stringliteral">&quot;[Compute Library] Failure during Activation operator creation&quot;</span>);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <span class="keywordflow">if</span> (status)</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        {</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            *status = st;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        }</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    }</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;};</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;} <span class="comment">// namespace acl</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="preprocessor">#undef ARM_COMPUTE_IGNORE_UNUSED</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_ACL_HPP_ */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a2bab471e86cd1e7951172eeae0855f40"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2bab471e86cd1e7951172eeae0855f40">AclUnsupportedTarget</a></div><div class="ttdeci">@ AclUnsupportedTarget</div><div class="ttdoc">Call failed as an invalid backend was requested.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00056">AclTypes.h:56</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_a46422e4ae10facdacffbc6c5f0b12f09"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#a46422e4ae10facdacffbc6c5f0b12f09">AclTensorDescriptor::boffset</a></div><div class="ttdeci">int64_t boffset</div><div class="ttdoc">Offset in terms of bytes for the first element.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00198">AclTypes.h:198</a></div></div>
<div class="ttc" id="a_acl_operators_8h_xhtml_a95b78d2431bb858a9f9e9e6aefeddac3"><div class="ttname"><a href="_acl_operators_8h.xhtml#a95b78d2431bb858a9f9e9e6aefeddac3">AclActivation</a></div><div class="ttdeci">AclStatus AclActivation(AclOperator *op, AclContext ctx, const AclTensorDescriptor *src, const AclTensorDescriptor *dst, const AclActivationDescriptor info)</div><div class="ttdoc">__cplusplus</div><div class="ttdef"><b>Definition:</b> <a href="_acl_activation_8cpp_source.xhtml#l00030">AclActivation.cpp:30</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da89242cc7c02b5770d2b8c9e6b42fc3f3">acl::Target::GpuOcl</a></div><div class="ttdeci">@ GpuOcl</div><div class="ttdoc">Gpu target that leverages OpenCL.</div></div>
<div class="ttc" id="a_acl_8hpp_xhtml_a8b49454fa4cb4a6431702ba544afcea7"><div class="ttname"><a href="_acl_8hpp.xhtml#a8b49454fa4cb4a6431702ba544afcea7">OBJECT_DELETER</a></div><div class="ttdeci">#define OBJECT_DELETER(obj, func)</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00075">Acl.hpp:75</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a7d839b2c12bfd40ac121b4cc9e81c539"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a7d839b2c12bfd40ac121b4cc9e81c539">acl::DataType::Int8</a></div><div class="ttdeci">@ Int8</div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a04c8614f16b47287dd772b26434cd879"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a04c8614f16b47287dd772b26434cd879">AclDestroyOperator</a></div><div class="ttdeci">AclStatus AclDestroyOperator(AclOperator op)</div><div class="ttdoc">Destroy a given operator object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_operator_8cpp_source.xhtml#l00053">AclOperator.cpp:53</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a0c40e87dd09c38533d746df32e9ca483a71cbccca38c1ea3c257cff95a92d41e2"><div class="ttname"><a href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483a71cbccca38c1ea3c257cff95a92d41e2">AclCpu</a></div><div class="ttdeci">@ AclCpu</div><div class="ttdoc">Cpu target that uses SIMD extensions.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00066">AclTypes.h:66</a></div></div>
<div class="ttc" id="astruct_acl_allocator_xhtml"><div class="ttname"><a href="struct_acl_allocator.xhtml">AclAllocator</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00099">AclTypes.h:99</a></div></div>
<div class="ttc" id="a_acl_8hpp_xhtml_ad32638694a2241eb52f0c58f7cd89ed1"><div class="ttname"><a href="_acl_8hpp.xhtml#ad32638694a2241eb52f0c58f7cd89ed1">ARM_COMPUTE_IGNORE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_IGNORE_UNUSED(x)</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00039">Acl.hpp:39</a></div></div>
<div class="ttc" id="astructacl_1_1_context_1_1_options_xhtml_aa266ce6b1e0f6ab74d684c33e1fd6bc9"><div class="ttname"><a href="structacl_1_1_context_1_1_options.xhtml#aa266ce6b1e0f6ab74d684c33e1fd6bc9">acl::Context::Options::Options</a></div><div class="ttdeci">Options(ExecutionMode mode, AclTargetCapabilities caps, bool enable_fast_math, const char *kernel_config, int32_t max_compute_units, AclAllocator *allocator)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00348">Acl.hpp:348</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00347">gemm_interleaved.hpp:347</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_xhtml_a993f232f4c79265dde0292b14d827759"><div class="ttname"><a href="classacl_1_1_tensor.xhtml#a993f232f4c79265dde0292b14d827759">acl::Tensor::Tensor</a></div><div class="ttdeci">Tensor(Context &amp;ctx, const TensorDescriptor &amp;desc, bool allocate, StatusCode *status)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00601">Acl.hpp:601</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_a67714016c68812e5a17e53eaa9191104"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#a67714016c68812e5a17e53eaa9191104">AclTensorDescriptor::strides</a></div><div class="ttdeci">int64_t * strides</div><div class="ttdoc">Strides on each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00197">AclTypes.h:197</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_pack_xhtml"><div class="ttname"><a href="classacl_1_1_tensor_pack.xhtml">acl::TensorPack</a></div><div class="ttdoc">Tensor pack class.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00680">Acl.hpp:680</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_xhtml_ad4dae3db20740c9ffda9e83e73e373ff"><div class="ttname"><a href="classacl_1_1_tensor.xhtml#ad4dae3db20740c9ffda9e83e73e373ff">acl::Tensor::map</a></div><div class="ttdeci">void * map()</div><div class="ttdoc">Maps the backing memory of a given tensor that can be used by the host to access any contents.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00616">Acl.hpp:616</a></div></div>
<div class="ttc" id="a_acl_utils_8h_xhtml_a3765ad55daa863d5ae9b5aa3b69b29e7"><div class="ttname"><a href="_acl_utils_8h.xhtml#a3765ad55daa863d5ae9b5aa3b69b29e7">AclGetTensorSize</a></div><div class="ttdeci">AclStatus AclGetTensorSize(AclTensor tensor, uint64_t *size)</div><div class="ttdoc">__cplusplus</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_8cpp_source.xhtml#l00158">AclTensor.cpp:158</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baabb7672feb78f1edec1c327b3f43736a4"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baabb7672feb78f1edec1c327b3f43736a4">AclDataTypeUnknown</a></div><div class="ttdeci">@ AclDataTypeUnknown</div><div class="ttdoc">Unknown data type.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00165">AclTypes.h:165</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml"><div class="ttname"><a href="namespaceacl.xhtml">acl</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00041">Acl.hpp:41</a></div></div>
<div class="ttc" id="a_acl_utils_8h_xhtml_a508c3d453eee61abe6a9beaf36c3a208"><div class="ttname"><a href="_acl_utils_8h.xhtml#a508c3d453eee61abe6a9beaf36c3a208">AclGetTensorDescriptor</a></div><div class="ttdeci">AclStatus AclGetTensorDescriptor(AclTensor tensor, AclTensorDescriptor *desc)</div><div class="ttdoc">Get the descriptor of this tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_8cpp_source.xhtml#l00175">AclTensor.cpp:175</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_ac583b03d5acef3d22d0597b214b166bfa5eb2856170a1449f705df21cd819562a"><div class="ttname"><a href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfa5eb2856170a1449f705df21cd819562a">AclExhaustive</a></div><div class="ttdeci">@ AclExhaustive</div><div class="ttdoc">Exhaustive tuning mode, increased tuning time but with best results.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00152">AclTypes.h:152</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="classacl_1_1_tensor_descriptor.xhtml">acl::TensorDescriptor</a></div><div class="ttdoc">Tensor Descriptor class.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00500">Acl.hpp:500</a></div></div>
<div class="ttc" id="anamespaceacl_1_1detail_xhtml_af592806fbddc3e9eea79f4c088b087cc"><div class="ttname"><a href="namespaceacl_1_1detail.xhtml#af592806fbddc3e9eea79f4c088b087cc">acl::detail::operator==</a></div><div class="ttdeci">bool operator==(const ObjectBase&lt; T &gt; &amp;lhs, const ObjectBase&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Equality operator for library object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00187">Acl.hpp:187</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a7a59b5478ea9250c2d244831c2c4672aae475aad5997d129ce4dab14a28ddb802"><div class="ttname"><a href="_acl_types_8h.xhtml#a7a59b5478ea9250c2d244831c2c4672aae475aad5997d129ce4dab14a28ddb802">AclHostPtr</a></div><div class="ttdeci">@ AclHostPtr</div><div class="ttdoc">Host allocated memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00188">AclTypes.h:188</a></div></div>
<div class="ttc" id="aclassacl_1_1_activation_xhtml_a505c9960029ef2f6b0b74545462bd280"><div class="ttname"><a href="classacl_1_1_activation.xhtml#a505c9960029ef2f6b0b74545462bd280">acl::Activation::Activation</a></div><div class="ttdeci">Activation(Context &amp;ctx, const TensorDescriptor &amp;src, const TensorDescriptor &amp;dst, const ActivationDesc &amp;desc, StatusCode *status=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00778">Acl.hpp:778</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_descriptor_xhtml_ab73e552eaa3b26e097d2ba81a3a07a53"><div class="ttname"><a href="classacl_1_1_tensor_descriptor.xhtml#ab73e552eaa3b26e097d2ba81a3a07a53">acl::TensorDescriptor::TensorDescriptor</a></div><div class="ttdeci">TensorDescriptor(const AclTensorDescriptor &amp;desc)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00520">Acl.hpp:520</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baaf2a3dd97bee9535cf5efb612a1d5c161"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baaf2a3dd97bee9535cf5efb612a1d5c161">AclUInt16</a></div><div class="ttdeci">@ AclUInt16</div><div class="ttdoc">16-bit unsigned integer</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00168">AclTypes.h:168</a></div></div>
<div class="ttc" id="astruct_acl_context_options_xhtml_abb94a1222fc5cb627f8d9e517a0a3a83"><div class="ttname"><a href="struct_acl_context_options.xhtml#abb94a1222fc5cb627f8d9e517a0a3a83">AclContextOptions::capabilities</a></div><div class="ttdeci">AclTargetCapabilities capabilities</div><div class="ttdoc">Target capabilities.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00138">AclTypes.h:138</a></div></div>
<div class="ttc" id="aclassacl_1_1_queue_xhtml_ab11a74b4e4fa1f4a7d70c3c1b078cd33"><div class="ttname"><a href="classacl_1_1_queue.xhtml#ab11a74b4e4fa1f4a7d70c3c1b078cd33">acl::Queue::Queue</a></div><div class="ttdeci">Queue(Context &amp;ctx, const Options &amp;options=Options(), StatusCode *status=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00460">Acl.hpp:460</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_aceab9b4db8a76762883b158faec8f636"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#aceab9b4db8a76762883b158faec8f636">AclRunOperator</a></div><div class="ttdeci">AclStatus AclRunOperator(AclOperator op, AclQueue queue, AclTensorPack tensors)</div><div class="ttdoc">Eager execution of a given operator on a list of inputs and outputs.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_operator_8cpp_source.xhtml#l00031">AclOperator.cpp:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="astructacl_1_1_tensor_pack_1_1_pack_pair_xhtml_ad4a96ae78f0b624ce3fd9df4122d3ecb"><div class="ttname"><a href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#ad4a96ae78f0b624ce3fd9df4122d3ecb">acl::TensorPack::PackPair::PackPair</a></div><div class="ttdeci">PackPair(Tensor *tensor_, int32_t slot_id_)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00691">Acl.hpp:691</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a5c0200f51580173c58b156cb6c443dce"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5c0200f51580173c58b156cb6c443dce">AclSuccess</a></div><div class="ttdeci">@ AclSuccess</div><div class="ttdoc">Call succeeded, leading to valid state for all involved objects/data.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00052">AclTypes.h:52</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6ab31df9c476d20e85ff898121efe11b5a"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ab31df9c476d20e85ff898121efe11b5a">acl::DataType::UInt8</a></div><div class="ttdeci">@ UInt8</div></div>
<div class="ttc" id="aclassacl_1_1_tensor_descriptor_xhtml_abc369e0bd0ce3425a967621ba6c027bb"><div class="ttname"><a href="classacl_1_1_tensor_descriptor.xhtml#abc369e0bd0ce3425a967621ba6c027bb">acl::TensorDescriptor::TensorDescriptor</a></div><div class="ttdeci">TensorDescriptor(const std::vector&lt; int32_t &gt; &amp;shape, DataType data_type)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00508">Acl.hpp:508</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a632a44487dc40eeaabc65c039ce4a246a76a2b4d702182be52cb658037bd55b58"><div class="ttname"><a href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a76a2b4d702182be52cb658037bd55b58">AclPreferFastStart</a></div><div class="ttdeci">@ AclPreferFastStart</div><div class="ttdoc">Prioritize performance when a single iterations is expected to be performed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00074">AclTypes.h:74</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35d">acl::Target</a></div><div class="ttdeci">Target</div><div class="ttdoc">&lt; Target enum</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00292">Acl.hpp:292</a></div></div>
<div class="ttc" id="aclassacl_1_1_context_xhtml"><div class="ttname"><a href="classacl_1_1_context.xhtml">acl::Context</a></div><div class="ttdoc">Context class.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00317">Acl.hpp:317</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a2216553ecd7bef833f5e07fdf31ef6c9"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a2216553ecd7bef833f5e07fdf31ef6c9">AclUnsupportedConfig</a></div><div class="ttdeci">@ AclUnsupportedConfig</div><div class="ttdoc">Call failed as configuration is unsupported.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00059">AclTypes.h:59</a></div></div>
<div class="ttc" id="astructacl_1_1_tensor_pack_1_1_pack_pair_xhtml"><div class="ttname"><a href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml">acl::TensorPack::PackPair</a></div><div class="ttdoc">Pack pair construct.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00684">Acl.hpp:684</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a5d55d1ccc47a605f01b9284b3102e979"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a5d55d1ccc47a605f01b9284b3102e979">AclInvalidObjectState</a></div><div class="ttdeci">@ AclInvalidObjectState</div><div class="ttdoc">Call failed as an object has invalid state.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00060">AclTypes.h:60</a></div></div>
<div class="ttc" id="anamespaceacl_1_1detail_xhtml_aac2632af719d9bdcb59e439516bc421b"><div class="ttname"><a href="namespaceacl_1_1detail.xhtml#aac2632af719d9bdcb59e439516bc421b">acl::detail::operator!=</a></div><div class="ttdeci">bool operator!=(const ObjectBase&lt; T &gt; &amp;lhs, const ObjectBase&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Inequality operator for library object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00202">Acl.hpp:202</a></div></div>
<div class="ttc" id="aclassacl_1_1_operator_xhtml"><div class="ttname"><a href="classacl_1_1_operator.xhtml">acl::Operator</a></div><div class="ttdoc">Operator class.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00753">Acl.hpp:753</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad14b0c6d4ed8fcadff6dcf39c5cf17fd"><div class="ttname"><a href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fd">acl::ExecutionMode</a></div><div class="ttdeci">ExecutionMode</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00299">Acl.hpp:299</a></div></div>
<div class="ttc" id="anamespaceacl_1_1detail_xhtml_a61a321bcf1789872f01b816d3434a207"><div class="ttname"><a href="namespaceacl_1_1detail.xhtml#a61a321bcf1789872f01b816d3434a207">acl::detail::as_cenum</a></div><div class="ttdeci">constexpr E as_cenum(SE v) noexcept</div><div class="ttdoc">Convert a strongly typed enum to an old plain c enum.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00104">Acl.hpp:104</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df"><div class="ttname"><a href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fdaf95f14e210df849606f3efdac49759df">acl::ExecutionMode::FastRerun</a></div><div class="ttdeci">@ FastRerun</div><div class="ttdoc">Prefer minimum latency in consecutive runs, might introduce higher startup times.</div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a94b41b78fd18d9dbff5325f7636c8974"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a94b41b78fd18d9dbff5325f7636c8974">AclMapTensor</a></div><div class="ttdeci">AclStatus AclMapTensor(AclTensor tensor, void **handle)</div><div class="ttdoc">Map a tensor's backing memory to the host.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_8cpp_source.xhtml#l00097">AclTensor.cpp:97</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_aa198d7fd208daa37bea62a3284cf05a0"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#aa198d7fd208daa37bea62a3284cf05a0">AclCreateTensorPack</a></div><div class="ttdeci">AclStatus AclCreateTensorPack(AclTensorPack *pack, AclContext ctx)</div><div class="ttdoc">Creates a tensor pack.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_pack_8cpp_source.xhtml#l00051">AclTensorPack.cpp:51</a></div></div>
<div class="ttc" id="astructacl_1_1_context_1_1_options_xhtml_ad51a588c656cbd912fda77c4bb481e9c"><div class="ttname"><a href="structacl_1_1_context_1_1_options.xhtml#ad51a588c656cbd912fda77c4bb481e9c">acl::Context::Options::copts</a></div><div class="ttdeci">AclContextOptions copts</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00363">Acl.hpp:363</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a3fa176f5fa1031628dff44a63112bc85">acl::StatusCode::UnsupportedConfig</a></div><div class="ttdeci">@ UnsupportedConfig</div></div>
<div class="ttc" id="astruct_acl_context_options_xhtml_a11ac16fdc135ced5986c472468eb6779"><div class="ttname"><a href="struct_acl_context_options.xhtml#a11ac16fdc135ced5986c472468eb6779">AclContextOptions::kernel_config_file</a></div><div class="ttdeci">const char * kernel_config_file</div><div class="ttdoc">Kernel cofiguration file.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00140">AclTypes.h:140</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a09a6b6162edaca978bd5791ae52fea7d"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a09a6b6162edaca978bd5791ae52fea7d">AclDestroyQueue</a></div><div class="ttdeci">AclStatus AclDestroyQueue(AclQueue queue)</div><div class="ttdoc">Destroy a given queue object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_queue_8cpp_source.xhtml#l00087">AclQueue.cpp:87</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">acl::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00482">Acl.hpp:482</a></div></div>
<div class="ttc" id="aclassacl_1_1_operator_xhtml_a6286086a603630f1a906c76b046e9356"><div class="ttname"><a href="classacl_1_1_operator.xhtml#a6286086a603630f1a906c76b046e9356">acl::Operator::run</a></div><div class="ttdeci">StatusCode run(Queue &amp;queue, TensorPack &amp;pack)</div><div class="ttdoc">Run an operator on a given input list.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00763">Acl.hpp:763</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_ac583b03d5acef3d22d0597b214b166bfa997e17122ca0c4fa234eca779ced4dc6"><div class="ttname"><a href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfa997e17122ca0c4fa234eca779ced4dc6">AclRapid</a></div><div class="ttdeci">@ AclRapid</div><div class="ttdoc">Fast tuning mode, testing a small portion of the tuning space.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00150">AclTypes.h:150</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_ab28f6d540e919720ad2425dbe67c38c3"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#ab28f6d540e919720ad2425dbe67c38c3">AclDestroyContext</a></div><div class="ttdeci">AclStatus AclDestroyContext(AclContext ctx)</div><div class="ttdoc">Destroy a given context object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_context_8cpp_source.xhtml#l00104">AclContext.cpp:104</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a26e6ed77470c6f2f830ecf874e6c0d55">acl::DataType::Float16</a></div><div class="ttdeci">@ Float16</div></div>
<div class="ttc" id="astruct_acl_operator___xhtml"><div class="ttname"><a href="struct_acl_operator__.xhtml">AclOperator_</a></div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2_i_operator_8h_source.xhtml#l00038">IOperator.h:38</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a22a4f3406d18376e3d8740c72e3b2a35"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a22a4f3406d18376e3d8740c72e3b2a35">AclUnmapTensor</a></div><div class="ttdeci">AclStatus AclUnmapTensor(AclTensor tensor, void *handle)</div><div class="ttdoc">Unmap the tensor's backing memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_8cpp_source.xhtml#l00116">AclTensor.cpp:116</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2aae6e50c78015ae9c9f6c03ef2c88356e"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2aae6e50c78015ae9c9f6c03ef2c88356e">AclOutOfMemory</a></div><div class="ttdeci">@ AclOutOfMemory</div><div class="ttdoc">Call failed due to failure to allocate resources.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00054">AclTypes.h:54</a></div></div>
<div class="ttc" id="astruct_acl_context_options_xhtml"><div class="ttname"><a href="struct_acl_context_options.xhtml">AclContextOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00135">AclTypes.h:135</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a2d02b31b77acf5b05e5d311bc46b3147"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a2d02b31b77acf5b05e5d311bc46b3147">AclCreateQueue</a></div><div class="ttdeci">AclStatus AclCreateQueue(AclQueue *queue, AclContext ctx, const AclQueueOptions *options)</div><div class="ttdoc">Create an operator queue.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_queue_8cpp_source.xhtml#l00045">AclQueue.cpp:45</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_xhtml_af71c95744d72572defee0bc3e53530c8"><div class="ttname"><a href="classacl_1_1_tensor.xhtml#af71c95744d72572defee0bc3e53530c8">acl::Tensor::Tensor</a></div><div class="ttdeci">Tensor(Context &amp;ctx, const TensorDescriptor &amp;desc, StatusCode *status=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00591">Acl.hpp:591</a></div></div>
<div class="ttc" id="astructacl_1_1_queue_1_1_options_xhtml_a28d39a844c3a37ab61d32ab7c6352f09"><div class="ttname"><a href="structacl_1_1_queue_1_1_options.xhtml#a28d39a844c3a37ab61d32ab7c6352f09">acl::Queue::Options::Options</a></div><div class="ttdeci">Options()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00427">Acl.hpp:427</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_xhtml_a8a1f1bfaf3fca05c7743669cfbf80c9d"><div class="ttname"><a href="classacl_1_1_tensor.xhtml#a8a1f1bfaf3fca05c7743669cfbf80c9d">acl::Tensor::get_size</a></div><div class="ttdeci">uint64_t get_size()</div><div class="ttdoc">Get the size of the tensor in byte.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00655">Acl.hpp:655</a></div></div>
<div class="ttc" id="aclassacl_1_1detail_1_1_object_base_xhtml_ad5d3c90ad8bbc807c842b5bd0ddf42bf"><div class="ttname"><a href="classacl_1_1detail_1_1_object_base.xhtml#ad5d3c90ad8bbc807c842b5bd0ddf42bf">acl::detail::ObjectBase::operator=</a></div><div class="ttdeci">ObjectBase&lt; T &gt; &amp; operator=(const ObjectBase&lt; T &gt; &amp;)=default</div><div class="ttdoc">Copy assignment operator.</div></div>
<div class="ttc" id="aclassacl_1_1detail_1_1_object_base_xhtml_a9ae0bb25345787a936c230ec9d3ee2ae"><div class="ttname"><a href="classacl_1_1detail_1_1_object_base.xhtml#a9ae0bb25345787a936c230ec9d3ee2ae">acl::detail::ObjectBase::reset</a></div><div class="ttdeci">void reset(T *val)</div><div class="ttdoc">Reset object value.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00148">Acl.hpp:148</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_abb1208d4213183fe5cc0c5742e0df966"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#abb1208d4213183fe5cc0c5742e0df966">AclDestroyTensor</a></div><div class="ttdeci">AclStatus AclDestroyTensor(AclTensor tensor)</div><div class="ttdoc">Destroy a given tensor object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_8cpp_source.xhtml#l00144">AclTensor.cpp:144</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baa86bb38b9fe2d282403e99b461ce769c7"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa86bb38b9fe2d282403e99b461ce769c7">AclInt32</a></div><div class="ttdeci">@ AclInt32</div><div class="ttdoc">32-bit signed integer</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00171">AclTypes.h:171</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="astruct_acl_context_options_xhtml_a5622f5b426a90ae94b4e21b889f93b6f"><div class="ttname"><a href="struct_acl_context_options.xhtml#a5622f5b426a90ae94b4e21b889f93b6f">AclContextOptions::mode</a></div><div class="ttdeci">AclExecutionMode mode</div><div class="ttdoc">Execution mode to use.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00137">AclTypes.h:137</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a9f1e3973a09da9eb7e86b96b7bd635c3"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a9f1e3973a09da9eb7e86b96b7bd635c3">AclQueueFinish</a></div><div class="ttdeci">AclStatus AclQueueFinish(AclQueue queue)</div><div class="ttdoc">Wait until all elements on the queue have been completed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_queue_8cpp_source.xhtml#l00072">AclQueue.cpp:72</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_pack_xhtml_a0cea51803d9cb91563dea51eef88e991"><div class="ttname"><a href="classacl_1_1_tensor_pack.xhtml#a0cea51803d9cb91563dea51eef88e991">acl::TensorPack::add</a></div><div class="ttdeci">StatusCode add(std::initializer_list&lt; PackPair &gt; packed)</div><div class="ttdoc">Add a list of tensors to a tensor pack.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00733">Acl.hpp:733</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_xhtml"><div class="ttname"><a href="classacl_1_1_tensor.xhtml">acl::Tensor</a></div><div class="ttdoc">Tensor class.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00580">Acl.hpp:580</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a92fd9c05491d0e6c9fb94405c8faae11"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a92fd9c05491d0e6c9fb94405c8faae11">AclInvalidTarget</a></div><div class="ttdeci">@ AclInvalidTarget</div><div class="ttdoc">Call failed as invalid argument was passed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00057">AclTypes.h:57</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baacbcd0bec58ba6aff7835d20afbc780cd"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baacbcd0bec58ba6aff7835d20afbc780cd">AclFloat16</a></div><div class="ttdeci">@ AclFloat16</div><div class="ttdoc">16-bit floating point</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00172">AclTypes.h:172</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_aeb8b7e1875910e807e1e4e59bf089dfb"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#aeb8b7e1875910e807e1e4e59bf089dfb">AclTensorDescriptor::data_type</a></div><div class="ttdeci">AclDataType data_type</div><div class="ttdoc">Tensor Data type.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00196">AclTypes.h:196</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a63674c70cc3037c6ac5a8b4ec8424278a960b44c579bc2f6818d2daaf9e4c16f0"><div class="ttname"><a href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278a960b44c579bc2f6818d2daaf9e4c16f0">acl::TuningMode::Normal</a></div><div class="ttdeci">@ Normal</div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a0dd4cd60a1039b649151ded8f0833baf"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a0dd4cd60a1039b649151ded8f0833baf">AclDestroyTensorPack</a></div><div class="ttdeci">AclStatus AclDestroyTensorPack(AclTensorPack pack)</div><div class="ttdoc">Destroy a given tensor pack object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_pack_8cpp_source.xhtml#l00096">AclTensorPack.cpp:96</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">acl::StatusCode::InvalidArgument</a></div><div class="ttdeci">@ InvalidArgument</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baa3a845fe5392bc0c30644c2fba5872a15"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa3a845fe5392bc0c30644c2fba5872a15">AclUInt8</a></div><div class="ttdeci">@ AclUInt8</div><div class="ttdoc">8-bit unsigned integer</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00166">AclTypes.h:166</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a6f923f50457fdf3e12863922643f9a71">acl::StatusCode::InvalidTarget</a></div><div class="ttdeci">@ InvalidTarget</div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_aaf77900a1d93e1890afde55699f4b092"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#aaf77900a1d93e1890afde55699f4b092">AclPackTensors</a></div><div class="ttdeci">AclStatus AclPackTensors(AclTensorPack pack, AclTensor *tensors, int32_t *slot_ids, size_t num_tensors)</div><div class="ttdoc">A list of tensors to a tensor pack.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_pack_8cpp_source.xhtml#l00082">AclTensorPack.cpp:82</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a632a44487dc40eeaabc65c039ce4a246a0c619b2e90be7d83736a8cb49085deee"><div class="ttname"><a href="_acl_types_8h.xhtml#a632a44487dc40eeaabc65c039ce4a246a0c619b2e90be7d83736a8cb49085deee">AclPreferFastRerun</a></div><div class="ttdeci">@ AclPreferFastRerun</div><div class="ttdoc">Prioritize performance when multiple iterations are performed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00073">AclTypes.h:73</a></div></div>
<div class="ttc" id="astructacl_1_1_queue_1_1_options_xhtml_a666bad55fe50b9e041d02bb4112f0651"><div class="ttname"><a href="structacl_1_1_queue_1_1_options.xhtml#a666bad55fe50b9e041d02bb4112f0651">acl::Queue::Options::opts</a></div><div class="ttdeci">AclQueueOptions opts</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00437">Acl.hpp:437</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9a889dbe454aa7d9ed9785d729c6576ca04f22edb7b95cd18e1af58634b824749"><div class="ttname"><a href="_acl_types_8h.xhtml#a9a889dbe454aa7d9ed9785d729c6576ca04f22edb7b95cd18e1af58634b824749">AclCpuCapabilitiesAuto</a></div><div class="ttdeci">@ AclCpuCapabilitiesAuto</div><div class="ttdoc">Automatic discovery of capabilities.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00080">AclTypes.h:80</a></div></div>
<div class="ttc" id="astructacl_1_1_tensor_pack_1_1_pack_pair_xhtml_a986ae7f53c6aa34a9387c995614c366b"><div class="ttname"><a href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a986ae7f53c6aa34a9387c995614c366b">acl::TensorPack::PackPair::slot_id</a></div><div class="ttdeci">int32_t slot_id</div><div class="ttdoc">Slot id in respect with the operator.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00696">Acl.hpp:696</a></div></div>
<div class="ttc" id="astructacl_1_1_queue_1_1_options_xhtml"><div class="ttname"><a href="structacl_1_1_queue_1_1_options.xhtml">acl::Queue::Options</a></div><div class="ttdoc">&lt; Queue options</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00420">Acl.hpp:420</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a63674c70cc3037c6ac5a8b4ec8424278"><div class="ttname"><a href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278">acl::TuningMode</a></div><div class="ttdeci">TuningMode</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00399">Acl.hpp:399</a></div></div>
<div class="ttc" id="aclassacl_1_1_context_xhtml_af62966a3aecde684e6670b3d224119ec"><div class="ttname"><a href="classacl_1_1_context.xhtml#af62966a3aecde684e6670b3d224119ec">acl::Context::Context</a></div><div class="ttdeci">Context(Target target, const Options &amp;options, StatusCode *status=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00384">Acl.hpp:384</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_acc22b5786e09c538c1ed7f159388067d"><div class="ttname"><a href="_acl_types_8h.xhtml#acc22b5786e09c538c1ed7f159388067d">AclTargetCapabilities</a></div><div class="ttdeci">uint64_t AclTargetCapabilities</div><div class="ttdoc">Error codes returned by the public entry-points.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00047">AclTypes.h:47</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6acdb56b2d2f73c26480207524f2dbe0af">acl::DataType::BFloat16</a></div><div class="ttdeci">@ BFloat16</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a12ddb6a1a15e913daa50def1f393d1d7">acl::StatusCode::UnsupportedTarget</a></div><div class="ttdeci">@ UnsupportedTarget</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baab928cfcdc3f0843fdf5e495818cef288"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baab928cfcdc3f0843fdf5e495818cef288">AclFloat32</a></div><div class="ttdeci">@ AclFloat32</div><div class="ttdoc">32-bit floating point</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00174">AclTypes.h:174</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a7586a308543e75989742667676cb102d"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a7586a308543e75989742667676cb102d">AclRuntimeError</a></div><div class="ttdeci">@ AclRuntimeError</div><div class="ttdoc">Call failed during execution.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00053">AclTypes.h:53</a></div></div>
<div class="ttc" id="astructacl_1_1detail_1_1_object_deleter_xhtml"><div class="ttname"><a href="structacl_1_1detail_1_1_object_deleter.xhtml">acl::detail::ObjectDeleter</a></div><div class="ttdoc">Construct to handle destruction of objects.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00071">Acl.hpp:71</a></div></div>
<div class="ttc" id="astructacl_1_1_queue_1_1_options_xhtml_a0f99e19f22aba855435681ba64a2e79a"><div class="ttname"><a href="structacl_1_1_queue_1_1_options.xhtml#a0f99e19f22aba855435681ba64a2e79a">acl::Queue::Options::Options</a></div><div class="ttdeci">Options(TuningMode mode, int32_t compute_units)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00433">Acl.hpp:433</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_xhtml_ac1c87d216f8f74cc18176fe86b303ca4"><div class="ttname"><a href="classacl_1_1_tensor.xhtml#ac1c87d216f8f74cc18176fe86b303ca4">acl::Tensor::unmap</a></div><div class="ttdeci">StatusCode unmap(void *handle)</div><div class="ttdoc">Unmaps tensor's memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00629">Acl.hpp:629</a></div></div>
<div class="ttc" id="aclassacl_1_1_activation_xhtml"><div class="ttname"><a href="classacl_1_1_activation.xhtml">acl::Activation</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00775">Acl.hpp:775</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baae4b921aaf20bcaf12f37a84a5b2a9ab1"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baae4b921aaf20bcaf12f37a84a5b2a9ab1">AclInt8</a></div><div class="ttdeci">@ AclInt8</div><div class="ttdoc">8-bit signed integer</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00167">AclTypes.h:167</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_adbb0c63266c2acd743a61c5186d76092"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#adbb0c63266c2acd743a61c5186d76092">AclPackTensor</a></div><div class="ttdeci">AclStatus AclPackTensor(AclTensorPack pack, AclTensor tensor, int32_t slot_id)</div><div class="ttdoc">Add a tensor to a tensor pack.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_pack_8cpp_source.xhtml#l00071">AclTensorPack.cpp:71</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baa0e60e804ba39f9587a6d7c032471cae0"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa0e60e804ba39f9587a6d7c032471cae0">AclBFloat16</a></div><div class="ttdeci">@ AclBFloat16</div><div class="ttdoc">16-bit brain floating point</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00173">AclTypes.h:173</a></div></div>
<div class="ttc" id="aclassacl_1_1_queue_xhtml_a37845aa04e73372525e2e697c795f5fd"><div class="ttname"><a href="classacl_1_1_queue.xhtml#a37845aa04e73372525e2e697c795f5fd">acl::Queue::Queue</a></div><div class="ttdeci">Queue(Context &amp;ctx, StatusCode *status=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00449">Acl.hpp:449</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab0ef48cd4482990c4486f4924a7fed60">acl::StatusCode::InvalidObjectState</a></div><div class="ttdeci">@ InvalidObjectState</div></div>
<div class="ttc" id="a_acl_8h_xhtml"><div class="ttname"><a href="_acl_8h.xhtml">Acl.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">Cast.cpp:222</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_ac583b03d5acef3d22d0597b214b166bfae1da0b93c2a6ab07f455c07e4716cdf8"><div class="ttname"><a href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfae1da0b93c2a6ab07f455c07e4716cdf8">AclTuningModeNone</a></div><div class="ttdeci">@ AclTuningModeNone</div><div class="ttdoc">No tuning.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00149">AclTypes.h:149</a></div></div>
<div class="ttc" id="astructacl_1_1_context_1_1_options_xhtml"><div class="ttname"><a href="structacl_1_1_context_1_1_options.xhtml">acl::Context::Options</a></div><div class="ttdoc">&lt; Context options</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00321">Acl.hpp:321</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a166495adc0d0f53bee6baecc577f5204">acl::DataType::Float32</a></div><div class="ttdeci">@ Float32</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a90ea96c40064aa67e45589a99db23e96"><div class="ttname"><a href="_acl_types_8h.xhtml#a90ea96c40064aa67e45589a99db23e96">AclTensor</a></div><div class="ttdeci">struct AclTensor_ * AclTensor</div><div class="ttdoc">Opaque Tensor pack object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00040">AclTypes.h:40</a></div></div>
<div class="ttc" id="aclassacl_1_1detail_1_1_object_base_xhtml_ac2393e8bd15daa23d3cde726fd05fa78"><div class="ttname"><a href="classacl_1_1detail_1_1_object_base.xhtml#ac2393e8bd15daa23d3cde726fd05fa78">acl::detail::ObjectBase::get</a></div><div class="ttdeci">const T * get() const</div><div class="ttdoc">Access uderlying object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00156">Acl.hpp:156</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2a00f188d1f6cef6e569b31a95964d26ca"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2a00f188d1f6cef6e569b31a95964d26ca">AclInvalidArgument</a></div><div class="ttdeci">@ AclInvalidArgument</div><div class="ttdoc">Call failed as invalid argument was passed.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00058">AclTypes.h:58</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa334b8fdd25f8fb3e632228494604ee1">acl::StatusCode::RuntimeError</a></div><div class="ttdeci">@ RuntimeError</div></div>
<div class="ttc" id="astruct_acl_tensor___xhtml"><div class="ttname"><a href="struct_acl_tensor__.xhtml">AclTensor_</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_v2_8h_source.xhtml#l00030">ITensorV2.h:30</a></div></div>
<div class="ttc" id="aclassacl_1_1detail_1_1_object_base_xhtml_aade7d4fd73ec27397ca54503f21e8509"><div class="ttname"><a href="classacl_1_1detail_1_1_object_base.xhtml#aade7d4fd73ec27397ca54503f21e8509">acl::detail::ObjectBase::~ObjectBase</a></div><div class="ttdeci">~ObjectBase()=default</div><div class="ttdoc">Destructor.</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a0c40e87dd09c38533d746df32e9ca483adb7b44c0ec8957483f3dbf6d63fde846"><div class="ttname"><a href="_acl_types_8h.xhtml#a0c40e87dd09c38533d746df32e9ca483adb7b44c0ec8957483f3dbf6d63fde846">AclGpuOcl</a></div><div class="ttdeci">@ AclGpuOcl</div><div class="ttdoc">OpenCL target for GPU.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00067">AclTypes.h:67</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_pack_xhtml_a3166a3578cd36472968d53738b1e1142"><div class="ttname"><a href="classacl_1_1_tensor_pack.xhtml#a3166a3578cd36472968d53738b1e1142">acl::TensorPack::add</a></div><div class="ttdeci">StatusCode add(Tensor &amp;tensor, int32_t slot_id)</div><div class="ttdoc">Add tensor to tensor pack.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00723">Acl.hpp:723</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_afedf28d42d92fc1609c264c3c8e3f7f1"><div class="ttname"><a href="namespaceacl.xhtml#afedf28d42d92fc1609c264c3c8e3f7f1">acl::ImportType</a></div><div class="ttdeci">ImportType</div><div class="ttdoc">Import memory types.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00569">Acl.hpp:569</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a39bc2ae44b184207f560ff8619823208"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a39bc2ae44b184207f560ff8619823208">acl::DataType::Int16</a></div><div class="ttdeci">@ Int16</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">acl::StatusCode</a></div><div class="ttdeci">StatusCode</div><div class="ttdoc">Status code enum.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00050">Acl.hpp:50</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a3296c2f66ee36d849ae4d51fdd1d0521"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a3296c2f66ee36d849ae4d51fdd1d0521">AclTensorImport</a></div><div class="ttdeci">AclStatus AclTensorImport(AclTensor tensor, void *handle, AclImportMemoryType type)</div><div class="ttdoc">Import external memory to a given tensor object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_8cpp_source.xhtml#l00130">AclTensor.cpp:130</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_descriptor_xhtml_a8d286430bfc49c0f5cb3266aa4b94258"><div class="ttname"><a href="classacl_1_1_tensor_descriptor.xhtml#a8d286430bfc49c0f5cb3266aa4b94258">acl::TensorDescriptor::get</a></div><div class="ttdeci">const AclTensorDescriptor * get() const</div><div class="ttdoc">Get underlying C tensor descriptor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00534">Acl.hpp:534</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e"><div class="ttname"><a href="namespaceacl.xhtml#a31488d29805a596498c0234ae392d35da54c82ef76ecbbd4c2293e09bae01b54e">acl::Target::Cpu</a></div><div class="ttdeci">@ Cpu</div><div class="ttdoc">Cpu target that leverages SIMD.</div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00192">AclTypes.h:192</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3"><div class="ttname"><a href="namespaceacl.xhtml#ad14b0c6d4ed8fcadff6dcf39c5cf17fda35d1ce83cbba19d83e2735b102ec28c3">acl::ExecutionMode::FastStart</a></div><div class="ttdeci">@ FastStart</div><div class="ttdoc">Prefer minimizing startup time.</div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_acd5a3091549e64d2259d97113aed9d50"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#acd5a3091549e64d2259d97113aed9d50">AclCreateTensor</a></div><div class="ttdeci">AclStatus AclCreateTensor(AclTensor *tensor, AclContext ctx, const AclTensorDescriptor *desc, bool allocate)</div><div class="ttdoc">Create a Tensor object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_tensor_8cpp_source.xhtml#l00071">AclTensor.cpp:71</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a63674c70cc3037c6ac5a8b4ec8424278ab571ef5b2664270d25bea4f4b61ffe68"><div class="ttname"><a href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278ab571ef5b2664270d25bea4f4b61ffe68">acl::TuningMode::Rapid</a></div><div class="ttdeci">@ Rapid</div></div>
<div class="ttc" id="aclassacl_1_1_queue_xhtml_ad5c66901c748265b9e2e8edd2996bd17"><div class="ttname"><a href="classacl_1_1_queue.xhtml#ad5c66901c748265b9e2e8edd2996bd17">acl::Queue::finish</a></div><div class="ttdeci">StatusCode finish()</div><div class="ttdoc">Block until all the tasks of the queue have been marked as finished.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00475">Acl.hpp:475</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_descriptor_xhtml_a3a5690bf6b6e8d51b96a50c58fe36d4a"><div class="ttname"><a href="classacl_1_1_tensor_descriptor.xhtml#a3a5690bf6b6e8d51b96a50c58fe36d4a">acl::TensorDescriptor::operator==</a></div><div class="ttdeci">bool operator==(const TensorDescriptor &amp;other)</div><div class="ttdoc">Operator to compare two TensorDescriptor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00544">Acl.hpp:544</a></div></div>
<div class="ttc" id="astructacl_1_1_context_1_1_options_xhtml_a0b1b399e8c3c1fee45e3aa5625aefebe"><div class="ttname"><a href="structacl_1_1_context_1_1_options.xhtml#a0b1b399e8c3c1fee45e3aa5625aefebe">acl::Context::Options::num_threads_auto</a></div><div class="ttdeci">static constexpr int32_t num_threads_auto</div><div class="ttdoc">Allow runtime to specify number of threads.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00323">Acl.hpp:323</a></div></div>
<div class="ttc" id="a_acl_entrypoints_8h_xhtml_a24008433ea6baa1e783ffd60a0a003d9"><div class="ttname"><a href="_acl_entrypoints_8h.xhtml#a24008433ea6baa1e783ffd60a0a003d9">AclCreateContext</a></div><div class="ttdeci">AclStatus AclCreateContext(AclContext *ctx, AclTarget target, const AclContextOptions *options)</div><div class="ttdoc">__cplusplus</div><div class="ttdef"><b>Definition:</b> <a href="_acl_context_8cpp_source.xhtml#l00079">AclContext.cpp:79</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_a3daf61aa16ccaec801090f1e898051e8"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#a3daf61aa16ccaec801090f1e898051e8">AclTensorDescriptor::shape</a></div><div class="ttdeci">int32_t * shape</div><div class="ttdoc">Tensor Shape.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00195">AclTypes.h:195</a></div></div>
<div class="ttc" id="aclassacl_1_1_tensor_pack_xhtml_ac45972ddd07f1d0726f21198c524e294"><div class="ttname"><a href="classacl_1_1_tensor_pack.xhtml#ac45972ddd07f1d0726f21198c524e294">acl::TensorPack::TensorPack</a></div><div class="ttdeci">TensorPack(Context &amp;ctx, StatusCode *status=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00705">Acl.hpp:705</a></div></div>
<div class="ttc" id="anamespaceclang__tidy__rules_xhtml_a1a6b6fb557d8d37d59700faf4e4c9167"><div class="ttname"><a href="namespaceclang__tidy__rules.xhtml#a1a6b6fb557d8d37d59700faf4e4c9167">clang_tidy_rules.mode</a></div><div class="ttdeci">mode</div><div class="ttdef"><b>Definition:</b> <a href="clang__tidy__rules_8py_source.xhtml#l00194">clang_tidy_rules.py:194</a></div></div>
<div class="ttc" id="astruct_acl_queue___xhtml"><div class="ttname"><a href="struct_acl_queue__.xhtml">AclQueue_</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_queue_8h_source.xhtml#l00029">IQueue.h:29</a></div></div>
<div class="ttc" id="astructacl_1_1_context_1_1_options_xhtml_a28d39a844c3a37ab61d32ab7c6352f09"><div class="ttname"><a href="structacl_1_1_context_1_1_options.xhtml#a28d39a844c3a37ab61d32ab7c6352f09">acl::Context::Options::Options</a></div><div class="ttdeci">Options()</div><div class="ttdoc">Default Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00330">Acl.hpp:330</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_afedf28d42d92fc1609c264c3c8e3f7f1ac2ca16d048ec66e04bca283eab048ec2"><div class="ttname"><a href="namespaceacl.xhtml#afedf28d42d92fc1609c264c3c8e3f7f1ac2ca16d048ec66e04bca283eab048ec2">acl::ImportType::Host</a></div><div class="ttdeci">@ Host</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_ac583b03d5acef3d22d0597b214b166bfa4c57ca145fea59211b9c79881cdd367b"><div class="ttname"><a href="_acl_types_8h.xhtml#ac583b03d5acef3d22d0597b214b166bfa4c57ca145fea59211b9c79881cdd367b">AclNormal</a></div><div class="ttdeci">@ AclNormal</div><div class="ttdoc">Normal tuning mode, gives a good balance between tuning mode and performance.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00151">AclTypes.h:151</a></div></div>
<div class="ttc" id="astruct_acl_tensor_pack___xhtml"><div class="ttname"><a href="struct_acl_tensor_pack__.xhtml">AclTensorPack_</a></div><div class="ttdef"><b>Definition:</b> <a href="_tensor_pack_8h_source.xhtml#l00031">TensorPack.h:31</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6ac06129f6e6e15c09328365e553f1dc31"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ac06129f6e6e15c09328365e553f1dc31">acl::DataType::Int32</a></div><div class="ttdeci">@ Int32</div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a3d5fcb1398352b2614a3e3af9705e0afa411b6da60e8d2ca46ed0cedf6c8c4b95"><div class="ttname"><a href="_acl_types_8h.xhtml#a3d5fcb1398352b2614a3e3af9705e0afa411b6da60e8d2ca46ed0cedf6c8c4b95">AclSlotUnknown</a></div><div class="ttdeci">@ AclSlotUnknown</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00204">AclTypes.h:204</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_aa38273bb50d742d3862669ae4839b807"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#aa38273bb50d742d3862669ae4839b807">AclTensorDescriptor::ndims</a></div><div class="ttdeci">int32_t ndims</div><div class="ttdoc">Number or dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00194">AclTypes.h:194</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a8bd950a9d7779b83f5c30046c9aaf1cf"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a8bd950a9d7779b83f5c30046c9aaf1cf">acl::DataType::UInt16</a></div><div class="ttdeci">@ UInt16</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113aa6122fbac59d9c4f3fd78b12cfe6c5ee">acl::StatusCode::Unimplemented</a></div><div class="ttdeci">@ Unimplemented</div></div>
<div class="ttc" id="aclassacl_1_1_tensor_xhtml_a4adeb6061e4e0914bff60a51e493f240"><div class="ttname"><a href="classacl_1_1_tensor.xhtml#a4adeb6061e4e0914bff60a51e493f240">acl::Tensor::get_descriptor</a></div><div class="ttdeci">TensorDescriptor get_descriptor()</div><div class="ttdoc">Get the descriptor of this tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00666">Acl.hpp:666</a></div></div>
<div class="ttc" id="aclassacl_1_1detail_1_1_object_base_xhtml"><div class="ttname"><a href="classacl_1_1detail_1_1_object_base.xhtml">acl::detail::ObjectBase</a></div><div class="ttdoc">Object base class for library objects.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00131">Acl.hpp:131</a></div></div>
<div class="ttc" id="astruct_acl_context_options_xhtml_a59ea3ce4c90f7fadd3efd941ea300224"><div class="ttname"><a href="struct_acl_context_options.xhtml#a59ea3ce4c90f7fadd3efd941ea300224">AclContextOptions::allocator</a></div><div class="ttdeci">AclAllocator * allocator</div><div class="ttdoc">Allocator to be used by all the memory internally.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00143">AclTypes.h:143</a></div></div>
<div class="ttc" id="astruct_acl_context___xhtml"><div class="ttname"><a href="struct_acl_context__.xhtml">AclContext_</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_context_8h_source.xhtml#l00034">IContext.h:34</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baadf3ac4262732a4af6afd7bbae1045d13"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baadf3ac4262732a4af6afd7bbae1045d13">AclUint32</a></div><div class="ttdeci">@ AclUint32</div><div class="ttdoc">32-bit unsigned integer</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00170">AclTypes.h:170</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a8703541284a90fc0f612006176c317baa11b8388b33efad227e2e94bc55c1709a"><div class="ttname"><a href="_acl_types_8h.xhtml#a8703541284a90fc0f612006176c317baa11b8388b33efad227e2e94bc55c1709a">AclInt16</a></div><div class="ttdeci">@ AclInt16</div><div class="ttdoc">16-bit signed integer</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00169">AclTypes.h:169</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113ab498327feeb51430af73e07deac268fd">acl::StatusCode::OutOfMemory</a></div><div class="ttdeci">@ OutOfMemory</div></div>
<div class="ttc" id="astructacl_1_1_tensor_pack_1_1_pack_pair_xhtml_a56104a5fbf07dd0724ba94122df99001"><div class="ttname"><a href="structacl_1_1_tensor_pack_1_1_pack_pair.xhtml#a56104a5fbf07dd0724ba94122df99001">acl::TensorPack::PackPair::tensor</a></div><div class="ttdeci">Tensor * tensor</div><div class="ttdoc">Tensor object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00695">Acl.hpp:695</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_a63674c70cc3037c6ac5a8b4ec8424278afaf34f09ea1e93bfbf591e19dc0dfb9f"><div class="ttname"><a href="namespaceacl.xhtml#a63674c70cc3037c6ac5a8b4ec8424278afaf34f09ea1e93bfbf591e19dc0dfb9f">acl::TuningMode::Exhaustive</a></div><div class="ttdeci">@ Exhaustive</div></div>
<div class="ttc" id="anamespaceacl_1_1detail_xhtml_a9018a522b1fb9f7d42d489db1d8bde54"><div class="ttname"><a href="namespaceacl_1_1detail.xhtml#a9018a522b1fb9f7d42d489db1d8bde54">acl::detail::as_enum</a></div><div class="ttdeci">constexpr SE as_enum(E val) noexcept</div><div class="ttdoc">Convert plain old enumeration to a strongly typed enum.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00119">Acl.hpp:119</a></div></div>
<div class="ttc" id="astruct_acl_queue_options_xhtml"><div class="ttname"><a href="struct_acl_queue_options.xhtml">AclQueueOptions</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00156">AclTypes.h:156</a></div></div>
<div class="ttc" id="a_acl_types_8h_xhtml_a9283721ff430c549802798b9909549d2ad5aecf6979192fb01d94f1acf4844dcd"><div class="ttname"><a href="_acl_types_8h.xhtml#a9283721ff430c549802798b9909549d2ad5aecf6979192fb01d94f1acf4844dcd">AclUnimplemented</a></div><div class="ttdeci">@ AclUnimplemented</div><div class="ttdoc">Call failed as requested capability is not implemented.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00055">AclTypes.h:55</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38"><div class="ttname"><a href="namespaceacl.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">acl::StatusCode::Success</a></div><div class="ttdeci">@ Success</div></div>
<div class="ttc" id="astruct_acl_context_options_xhtml_a94c30e1956b73564d2ea11c8aea6d975"><div class="ttname"><a href="struct_acl_context_options.xhtml#a94c30e1956b73564d2ea11c8aea6d975">AclContextOptions::enable_fast_math</a></div><div class="ttdeci">bool enable_fast_math</div><div class="ttdoc">Allow precision loss.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00139">AclTypes.h:139</a></div></div>
<div class="ttc" id="astruct_acl_activation_descriptor_xhtml"><div class="ttname"><a href="struct_acl_activation_descriptor.xhtml">AclActivationDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00053">AclDescriptors.h:53</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a88183b946cc5f0e8c96b2e66e1c74a7e">acl::DataType::Unknown</a></div><div class="ttdeci">@ Unknown</div></div>
<div class="ttc" id="aclassacl_1_1detail_1_1_object_base_xhtml_ac051b2568208e363ae2dffb23c0ad9ba"><div class="ttname"><a href="classacl_1_1detail_1_1_object_base.xhtml#ac051b2568208e363ae2dffb23c0ad9ba">acl::detail::ObjectBase::get</a></div><div class="ttdeci">T * get()</div><div class="ttdoc">Access uderlying object.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00164">Acl.hpp:164</a></div></div>
<div class="ttc" id="aclassacl_1_1_queue_xhtml"><div class="ttname"><a href="classacl_1_1_queue.xhtml">acl::Queue</a></div><div class="ttdoc">Queue class.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00416">Acl.hpp:416</a></div></div>
<div class="ttc" id="aclassacl_1_1_context_xhtml_a7f1d7959f153f2481c12e65391ee51b0"><div class="ttname"><a href="classacl_1_1_context.xhtml#a7f1d7959f153f2481c12e65391ee51b0">acl::Context::Context</a></div><div class="ttdeci">Context(Target target, StatusCode *status=nullptr)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00375">Acl.hpp:375</a></div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6ae7956ed7be1c5025a27ed3cb42a396bd"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6ae7956ed7be1c5025a27ed3cb42a396bd">acl::DataType::UInt32</a></div><div class="ttdeci">@ UInt32</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a3d45498be87235b5165d9972b2d0644d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a3d45498be87235b5165d9972b2d0644d">arm_compute::test::validation::allocator</a></div><div class="ttdeci">input allocator() -&gt; allocate()</div></div>
<div class="ttc" id="astruct_acl_context_options_xhtml_a3043ba49e39a241ec88b961eadc300d5"><div class="ttname"><a href="struct_acl_context_options.xhtml#a3043ba49e39a241ec88b961eadc300d5">AclContextOptions::max_compute_units</a></div><div class="ttdeci">int32_t max_compute_units</div><div class="ttdoc">Max compute units that can be used by a queue created from the context.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00141">AclTypes.h:141</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="_acl_8hpp.xhtml">Acl.hpp</a></li>
    <li class="footer">Generated on Tue May 28 2024 09:00:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
