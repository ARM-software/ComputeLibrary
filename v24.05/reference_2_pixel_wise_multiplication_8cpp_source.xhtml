<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/validation/reference/PixelWiseMultiplication.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('reference_2_pixel_wise_multiplication_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">PixelWiseMultiplication.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="reference_2_pixel_wise_multiplication_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pixel_wise_multiplication_8h.xhtml">PixelWiseMultiplication.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tests_2validation_2_helpers_8h.xhtml">tests/validation/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>test</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>validation</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>reference</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">struct </span>is_floating_point</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    : std::integral_constant &lt; bool,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      std::is_same&lt;float, typename std::remove_cv&lt;T&gt;::type&gt;::value || std::is_same&lt;half_float::half, typename std::remove_cv&lt;T&gt;::type&gt;::value</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      || std::is_same&lt;double, typename std::remove_cv&lt;T&gt;::type&gt;::value || std::is_same&lt;long double, typename std::remove_cv&lt;T&gt;::type&gt;::value &gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;};</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;constexpr <span class="keywordtype">float</span> scale1_constant = 1.f;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/** Compute the result of `src1 * src2 * scale`. The result type always matches the type of @p src2.</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @param[in] src1            An input value. Data types supported: U8/S16/F16/F32.</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * @param[in] src2            An input value. Data types supported: same as @p src1.</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @param[in] scale           Scale to apply after multiplication.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *                            Scale must be positive and its value must be either 1/255 or 1/2^n where n is between 0 and 15.</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * @param[in] convert_policy  Overflow policy. Supported overflow policies: Wrap, Saturate</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * @param[in] rounding_policy Rounding policy. Supported rounding modes: to zero, to nearest even.</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;T3 mul(<span class="keyword">const</span> T1 src1, <span class="keyword">const</span> T2 src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">using</span> intermediate_type = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">common_promoted_signed_type&lt;T1, T2, T3&gt;::intermediate_type</a>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> val = <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(src1) * <span class="keyword">static_cast&lt;</span>intermediate_type<span class="keyword">&gt;</span>(src2) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">if</span>(is_floating_point&lt;T3&gt;::value)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> result = <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>(val);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordtype">double</span> rounded_val = 0;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">switch</span>(rounding_policy)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>):</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                rounded_val = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(val);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>):</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                rounded_val = <a class="code" href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">round_half_up</a>(val);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>):</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                rounded_val = <a class="code" href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">round_half_even</a>(val);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding policy&quot;</span>);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> result = <span class="keyword">static_cast&lt;</span>T3<span class="keyword">&gt;</span>((convert_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>) ? saturate_cast&lt;T3&gt;(rounded_val) : rounded_val);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;int32_t mul(<span class="keyword">const</span> int32_t src1, <span class="keyword">const</span> int32_t src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> int64_t intermediate_val = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(src1) * <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(src2);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span>(std::abs(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a> - scale1_constant) &lt; 0.00001f)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// Use bit-accurate integer arithmetic for scale == 1</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">// Apply conversion</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span>(convert_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">return</span> saturate_cast&lt;int32_t&gt;(intermediate_val);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="comment">// Correct wrapping behaviour for int32_t</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> i32_hi              = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(std::numeric_limits&lt;int32_t&gt;::max());</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> i32_lo              = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int32_t&gt;::lowest</a>());</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> i32_wi              = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(1) &lt;&lt; 32;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            int64_t    wrapped_rounded_val = intermediate_val - i32_wi * <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(intermediate_val) / i32_wi));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">if</span>(wrapped_rounded_val &lt;= i32_hi)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(wrapped_rounded_val);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="comment">// Values beyond i32_hi wrap around to negatives</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((wrapped_rounded_val - i32_hi) + i32_lo - 1);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="comment">// Use double arithmetic for scale != 1; may not be bit-accurate</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment">// Apply scaling</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="comment">// scale == 1 / 2^scale_exponent</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordtype">int</span> scale_exponent = 0;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        std::frexp(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, &amp;scale_exponent);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// Store the positive exponent. We know that we compute 1/2^n</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment">// Additionally we need to subtract 1 to compensate that frexp used a mantissa of 0.5</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        scale_exponent         = std::abs(scale_exponent - 1);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">double</span> scale_inv = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(1) &lt;&lt; scale_exponent;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">double</span> val       = intermediate_val / scale_inv;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment">// Apply rounding</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordtype">double</span> rounded_val = 0;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">switch</span>(rounding_policy)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">RoundingPolicy::TO_ZERO</a>):</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                rounded_val = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(val);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">RoundingPolicy::TO_NEAREST_UP</a>):</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                rounded_val = <a class="code" href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">round_half_up</a>(val);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">case</span>(<a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">RoundingPolicy::TO_NEAREST_EVEN</a>):</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                rounded_val = <a class="code" href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">round_half_even</a>(val);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported rounding policy&quot;</span>);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Apply conversion</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">if</span>(convert_policy == <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">ConvertPolicy::SATURATE</a>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">return</span> saturate_cast&lt;int32_t&gt;(rounded_val);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="comment">// Correct wrapping behaviour for int32_t</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> i32_hi              = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(std::numeric_limits&lt;int32_t&gt;::max());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> i32_lo              = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;int32_t&gt;::lowest</a>());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> i32_wi              = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(1) &lt;&lt; 32);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordtype">double</span>     wrapped_rounded_val = rounded_val - i32_wi * std::floor(rounded_val / i32_wi);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">if</span>(wrapped_rounded_val &lt;= i32_hi)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(wrapped_rounded_val);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="comment">// Values beyond i32_hi wrap around to negatives</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((wrapped_rounded_val - i32_hi) + i32_lo - 1);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> dim&gt;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">struct </span>BroadcastUnroll</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> unroll(<span class="keyword">const</span> SimpleTensor&lt;T1&gt; &amp;src1, <span class="keyword">const</span> SimpleTensor&lt;T2&gt; &amp;src2, SimpleTensor&lt;T3&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                       <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                       Coordinates &amp;id_src1, Coordinates &amp;id_src2, Coordinates &amp;id_dst)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> src1_is_broadcast = (src1.shape()[dim - 1] != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[dim - 1]);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> src2_is_broadcast = (src2.shape()[dim - 1] != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[dim - 1]);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        id_src1.set(dim - 1, 0);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        id_src2.set(dim - 1, 0);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        id_dst.set(dim - 1, 0);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape()[dim - 1]; ++i, ++id_dst[dim - 1])</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            BroadcastUnroll &lt; dim - 1 &gt;::unroll(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, id_src1, id_src2, id_dst);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            id_src1[dim - 1] += !src1_is_broadcast;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            id_src2[dim - 1] += !src2_is_broadcast;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;};</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">struct </span>BroadcastUnroll&lt;0&gt;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> unroll(<span class="keyword">const</span> SimpleTensor&lt;T1&gt; &amp;src1, <span class="keyword">const</span> SimpleTensor&lt;T2&gt; &amp;src2, SimpleTensor&lt;T3&gt; &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                       <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy,</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                       Coordinates &amp;id_src1, Coordinates &amp;id_src2, Coordinates &amp;id_dst)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>[<a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.shape(), id_dst)] = mul&lt;T1, T2, T3&gt;(src1[<a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(src1.shape(), id_src1)], src2[<a class="code" href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">coord2index</a>(src2.shape(), id_src2)], <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;};</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2, <span class="keyword">typename</span> T3&gt;</div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">  217</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T3&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T1&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T2&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy,</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                           <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(qout);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;T3&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), dt_out);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a> &lt; 0)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Scale of pixel-wise multiplication must be non-negative&quot;</span>);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src1{};</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src2{};</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_dst{};</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    BroadcastUnroll&lt;Coordinates::num_max_dimensions&gt;::unroll(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, id_src1, id_src2, id_dst);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9488f01d6f79040805ac4432a493d3c3">  239</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;{</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), dt_out, 1, qout);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">if</span>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> &amp;&amp; src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src1_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(src1);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src2_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(src2);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> dst_tmp  = pixel_wise_multiplication&lt;float, float, float&gt;(src1_tmp, src2_tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, qout);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>                          = convert_to_asymmetric&lt;uint8_t&gt;(dst_tmp, qout);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a> &lt; 0)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Scale of pixel-wise multiplication must be non-negative&quot;</span>);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src1{};</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src2{};</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_dst{};</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        BroadcastUnroll&lt;Coordinates::num_max_dimensions&gt;::unroll(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, id_src1, id_src2, id_dst);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy,</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                                <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), dt_out, 1, qout);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">if</span>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> &amp;&amp; src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src1_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(src1);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src2_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(src2);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> dst_tmp  = pixel_wise_multiplication&lt;float, float, float&gt;(src1_tmp, src2_tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, qout);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>                          = convert_to_symmetric&lt;int16_t&gt;(dst_tmp, qout);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a> &lt; 0)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Scale of pixel-wise multiplication must be non-negative&quot;</span>);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src1{};</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        Coordinates id_src2{};</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        Coordinates id_dst{};</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        BroadcastUnroll&lt;Coordinates::num_max_dimensions&gt;::unroll(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, id_src1, id_src2, id_dst);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a50451e1a02eab6ed1f09afbd32642dc3">  295</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy,</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                               <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;{</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int8_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), dt_out, 1, qout);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">if</span>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a> &amp;&amp; src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src1_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(src1);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src2_tmp = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">convert_from_asymmetric</a>(src2);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> dst_tmp  = pixel_wise_multiplication&lt;float, float, float&gt;(src1_tmp, src2_tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, qout);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>                          = convert_to_asymmetric&lt;int8_t&gt;(dst_tmp, qout);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a> &lt; 0)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Scale of pixel-wise multiplication must be non-negative&quot;</span>);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src1{};</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src2{};</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_dst{};</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        BroadcastUnroll&lt;Coordinates::num_max_dimensions&gt;::unroll(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, id_src1, id_src2, id_dst);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#ad68cc9aa56b7e49482c5d53eaadbc529">  323</a></span>&#160;<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                                <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">TensorShape::broadcast_shape</a>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>(), src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">shape</a>()), dt_out, 1, qout);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span>(src1.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a> &amp;&amp; src2.<a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">DataType::QSYMM16</a>)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src1_tmp = convert_from_symmetric&lt;int16_t&gt;(src1);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> src2_tmp = convert_from_symmetric&lt;int16_t&gt;(src2);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> dst_tmp  = pixel_wise_multiplication&lt;float, float, float&gt;(src1_tmp, src2_tmp, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, qout);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>                          = convert_to_symmetric&lt;int16_t&gt;(dst_tmp, qout);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a> &lt; 0)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Scale of pixel-wise multiplication must be non-negative&quot;</span>);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src1{};</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_src2{};</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> id_dst{};</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        BroadcastUnroll&lt;Coordinates::num_max_dimensions&gt;::unroll(src1, src2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, convert_policy, rounding_policy, id_src1, id_src2, id_dst);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">// *INDENT-OFF*</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">// clang-format off</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;uint8_t&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int16_t&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;int32_t&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;float&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="keyword">template</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half_float::half&gt;</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">pixel_wise_multiplication</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half_float::half&gt;</a> &amp;src1, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">SimpleTensor&lt;half_float::half&gt;</a> &amp;src2, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">scale</a>, <a class="code" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> convert_policy, <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a> rounding_policy, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> dt_out, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;qout);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">// clang-format on</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">// *INDENT-ON*</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;} <span class="comment">// namespace reference</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;} <span class="comment">// namespace validation</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;} <span class="comment">// namespace test</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_pixel_wise_multiplication_8h_xhtml"><div class="ttname"><a href="_pixel_wise_multiplication_8h.xhtml">PixelWiseMultiplication.h</a></div></div>
<div class="ttc" id="astructarm__compute_1_1test_1_1common__promoted__signed__type_xhtml_a6d8309776a9cb10567df1735666919ff"><div class="ttname"><a href="structarm__compute_1_1test_1_1common__promoted__signed__type.xhtml#a6d8309776a9cb10567df1735666919ff">arm_compute::test::common_promoted_signed_type::intermediate_type</a></div><div class="ttdeci">typename traits::make_signed_conditional_t&lt; promoted_type &gt;::type intermediate_type</div><div class="ttdoc">Intermediate type.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00336">Utils.h:336</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdeci">@ TO_NEAREST_EVEN</div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00067">QuantizationInfo.h:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdeci">@ QASYMM8</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_a9be4cb7e6ee20063a4a10bc3abb750b9"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#a9be4cb7e6ee20063a4a10bc3abb750b9">arm_compute::test::coord2index</a></div><div class="ttdeci">int coord2index(const TensorShape &amp;shape, const Coordinates &amp;coord)</div><div class="ttdoc">Linearise the given coordinate.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00388">Utils.h:388</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1_simple_tensor_xhtml_aba5871b3e4a65d057ec1c28fce8b00ba"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#aba5871b3e4a65d057ec1c28fce8b00ba">arm_compute::test::SimpleTensor::shape</a></div><div class="ttdeci">TensorShape shape() const override</div><div class="ttdoc">Shape of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00329">SimpleTensor.h:329</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a07000b60b919e8d30b8f1a6411a0fe7d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a07000b60b919e8d30b8f1a6411a0fe7d">arm_compute::test::validation::convert_from_asymmetric</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; convert_from_asymmetric(const SimpleTensor&lt; uint8_t &gt; &amp;src)</div><div class="ttdef"><b>Definition:</b> <a href="tests_2validation_2_helpers_8cpp_source.xhtml#l00039">Helpers.cpp:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1_simple_tensor_xhtml_a9a3e72153aeb3ed212e9c3698774e881"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml#a9a3e72153aeb3ed212e9c3698774e881">arm_compute::test::SimpleTensor::data_type</a></div><div class="ttdeci">DataType data_type() const override</div><div class="ttdoc">Data type of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00373">SimpleTensor.h:373</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a9423b673e6e0a984f3826e49c06079d7"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a9423b673e6e0a984f3826e49c06079d7">arm_compute::test::validation::reference::pixel_wise_multiplication</a></div><div class="ttdeci">SimpleTensor&lt; T3 &gt; pixel_wise_multiplication(const SimpleTensor&lt; T1 &gt; &amp;src1, const SimpleTensor&lt; T2 &gt; &amp;src2, float scale, ConvertPolicy convert_policy, RoundingPolicy rounding_policy, DataType dt_out, const QuantizationInfo &amp;qout)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_pixel_wise_multiplication_8cpp_source.xhtml#l00217">PixelWiseMultiplication.cpp:217</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a3ca8a4ea8f992df3b462bc7b24d097c6">arm_compute::DataType::QSYMM16</a></div><div class="ttdeci">@ QSYMM16</div><div class="ttdoc">quantized, symmetric fixed-point 16-bit number</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea8c0084566b290fa9e5e429f4ae241f95">arm_compute::RoundingPolicy::TO_NEAREST_UP</a></div><div class="ttdeci">@ TO_NEAREST_UP</div><div class="ttdoc">Rounds to nearest value; half rounds away from zero.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_rounding_8h_source.xhtml#l00030">Rounding.h:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_ae04d407202e3d50ce6a4c79ac00a5d59"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">arm_compute::support::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00215">ToolchainSupport.h:215</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_aabf4ad7d46e311fc04e2d2d32731938e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#aabf4ad7d46e311fc04e2d2d32731938e">arm_compute::test::validation::reference::scale</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; scale(const SimpleTensor&lt; T &gt; &amp;src, float scale_x, float scale_y, InterpolationPolicy policy, BorderMode border_mode, T constant_border_value, SamplingPolicy sampling_policy, bool ceil_policy_scale, bool align_corners, QuantizationInfo output_quantization_info)</div><div class="ttdef"><b>Definition:</b> <a href="validation_2reference_2_scale_8cpp_source.xhtml#l00184">Scale.cpp:184</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_af4bcf30f8c56f547f66d61c7c5ae01db"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#af4bcf30f8c56f547f66d61c7c5ae01db">arm_compute::test::round_half_up</a></div><div class="ttdeci">T round_half_up(T value)</div><div class="ttdoc">Round floating-point value with half value rounding to positive infinity.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00069">Utils.h:69</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdeci">@ QASYMM8_SIGNED</div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::ConvertPolicy::SATURATE</a></div><div class="ttdeci">@ SATURATE</div><div class="ttdoc">Saturate.</div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1_simple_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1_simple_tensor.xhtml">arm_compute::test::SimpleTensor</a></div><div class="ttdoc">Simple tensor object that stores elements in a consecutive chunk of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_simple_tensor_8h_source.xhtml#l00058">SimpleTensor.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_xhtml_ad93bb148a873f19ad7692756e59617f4"><div class="ttname"><a href="namespacearm__compute_1_1test.xhtml#ad93bb148a873f19ad7692756e59617f4">arm_compute::test::round_half_even</a></div><div class="ttdeci">T round_half_even(T value, T epsilon=std::numeric_limits&lt; T &gt;::epsilon())</div><div class="ttdoc">Round floating-point value with half value rounding to nearest even.</div><div class="ttdef"><b>Definition:</b> <a href="tests_2_utils_8h_source.xhtml#l00082">Utils.h:82</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a82b8ac759c804bc1fb4e2d21e178fb6f"><div class="ttname"><a href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">arm_compute::ConvertPolicy</a></div><div class="ttdeci">ConvertPolicy</div><div class="ttdoc">Policy to handle integer overflow.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00353">Types.h:353</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::RoundingPolicy::TO_ZERO</a></div><div class="ttdeci">@ TO_ZERO</div><div class="ttdoc">Truncates the least significant values that are lost in operations.</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_a58838fbdce5b5330d84e62329b45ff7d"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#a58838fbdce5b5330d84e62329b45ff7d">arm_compute::TensorShape::broadcast_shape</a></div><div class="ttdeci">static TensorShape broadcast_shape(const Shapes &amp;...shapes)</div><div class="ttdoc">If shapes are broadcast compatible, return the broadcasted shape.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00214">TensorShape.h:214</a></div></div>
<div class="ttc" id="atests_2validation_2_helpers_8h_xhtml"><div class="ttname"><a href="tests_2validation_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types.</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00083">CoreTypes.h:83</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_e7c7b16542faa38cb4655ff1750d3604.xhtml">validation</a></li><li class="navelem"><a class="el" href="dir_46fdb196cebdbffe77dac340cde62f29.xhtml">reference</a></li><li class="navelem"><a class="el" href="reference_2_pixel_wise_multiplication_8cpp.xhtml">PixelWiseMultiplication.cpp</a></li>
    <li class="footer">Generated on Tue May 28 2024 09:01:06 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
