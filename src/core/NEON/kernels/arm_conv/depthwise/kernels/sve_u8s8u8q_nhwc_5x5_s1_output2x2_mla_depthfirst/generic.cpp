/*
 * Copyright (c) 2021 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "arm_gemm.hpp"

#include <cstddef>
#include <cstdint>

#if defined(__aarch64__) && defined(ARM_COMPUTE_ENABLE_SVE) && defined(ARM_COMPUTE_ENABLE_SVE2)

namespace arm_conv {
namespace depthwise {

void sve_u8s8u8q_nhwc_5x5_s1_output2x2_mla_depthfirst_impl(
  const unsigned int n_channels,
  const uint8_t *const *const inptrs,
  const int8_t *const weights,
  const int32_t *const bias,
  const arm_gemm::Requantize32 &qp,
  const int32_t *const requant_muls,
  const int32_t *const requant_shifts,
  uint8_t *const *const outptrs
)
{
  struct Params
  {
    long unsigned int n_channels;
    const int8_t *weights;
    const int32_t *bias;
    const arm_gemm::Requantize32 *requant;
    const int32_t *const requant_muls;
    const int32_t *const requant_shifts;
    uint8_t *const *const outptrs;
    const uint8_t *inptrs[36];

    Params(
      long unsigned int n_channels,
      const uint8_t *const *inptrs_raw,
      const int8_t *const weights,
      const int32_t *const bias,
      const arm_gemm::Requantize32 &qp,
      const int32_t *const requant_muls,
      const int32_t *const requant_shifts,
      uint8_t *const *outptrs
    ) : n_channels(n_channels), weights(weights), bias(bias),
        requant(&qp), requant_muls(requant_muls),
        requant_shifts(requant_shifts), outptrs(outptrs)
    {
      inptrs[0] = inptrs_raw[0];
      inptrs[1] = inptrs_raw[1];
      inptrs[2] = inptrs_raw[6];
      inptrs[3] = inptrs_raw[7];
      inptrs[4] = inptrs_raw[2];
      inptrs[5] = inptrs_raw[8];
      inptrs[6] = inptrs_raw[3];
      inptrs[7] = inptrs_raw[4];
      inptrs[8] = inptrs_raw[11];
      inptrs[9] = inptrs_raw[12];
      inptrs[10] = inptrs_raw[9];
      inptrs[11] = inptrs_raw[10];
      inptrs[12] = inptrs_raw[5];
      inptrs[13] = inptrs_raw[13];
      inptrs[14] = inptrs_raw[14];
      inptrs[15] = inptrs_raw[15];
      inptrs[16] = inptrs_raw[16];
      inptrs[17] = inptrs_raw[17];
      inptrs[18] = inptrs_raw[18];
      inptrs[19] = inptrs_raw[19];
      inptrs[20] = inptrs_raw[20];
      inptrs[21] = inptrs_raw[21];
      inptrs[22] = inptrs_raw[22];
      inptrs[23] = inptrs_raw[23];
      inptrs[24] = inptrs_raw[24];
      inptrs[25] = inptrs_raw[25];
      inptrs[26] = inptrs_raw[26];
      inptrs[27] = inptrs_raw[27];
      inptrs[28] = inptrs_raw[28];
      inptrs[29] = inptrs_raw[29];
      inptrs[30] = inptrs_raw[30];
      inptrs[31] = inptrs_raw[31];
      inptrs[32] = inptrs_raw[32];
      inptrs[33] = inptrs_raw[33];
      inptrs[34] = inptrs_raw[34];
      inptrs[35] = inptrs_raw[35];

    }
  };

  const Params params(n_channels, inptrs, weights, bias, qp,
                      requant_muls, requant_shifts, outptrs);

  __asm__ __volatile__(
    "ldr x0, [%x[params], %[offsetof_Params_n_channels]]\n"
    "ptrue p4.b\n"
    "ldr x1, [%x[params], %[offsetof_Params_weights]]\n"
    "mov x2, #0x0\n"
    "ldr x22, [%x[params], %[offsetof_Params_requant]]\n"
    "mov x3, #0x0\n"
    "ldr x4, [%x[params], %[offsetof_Params_requant_muls]]\n"
    "add x5, %x[params], %[offsetof_Params_inptrs]\n"
    "ldr x6, [%x[params], %[offsetof_Params_requant_shifts]]\n"
    "add x19, x22, %[offsetof_Requantize32_a_offset]\n"
    "ldr x21, [%x[params], %[offsetof_Params_outptrs]]\n"
    "add x20, x22, %[offsetof_Requantize32_b_offset]\n"
    "ld1rb { z9.b }, p4/Z, [x19]\n"
    "add x19, x22, %[offsetof_Requantize32_c_offset]\n"
    "ld1rb { z14.b }, p4/Z, [x20]\n"
    "add x20, x22, %[offsetof_Requantize32_minval]\n"
    "ld1rw { z17.s }, p4/Z, [x19]\n"
    "add x19, x22, %[offsetof_Requantize32_maxval]\n"
    "ld1rw { z12.s }, p4/Z, [x20]\n"
    "whilelt p3.h, x2, x0\n"
    "ld1rw { z11.s }, p4/Z, [x19]\n"
    "whilelt p2.s, x2, x0\n"
    "ldp x7, x8, [x21, #0x0]\n"
    "mov x19, x2\n"
    "incw x19\n"
    "ldp x17, x16, [x21, #0x10]\n"
    "whilelt p1.s, x19, x0\n"
    "ldr x19, [%x[params], %[offsetof_Params_bias]]\n"
    "ld1w { z4.s }, p2/Z, [x19]\n"
    "ld1w { z16.s }, p1/Z, [x19, #1, MUL VL]\n"
    "uzp1 z15.s, z4.s, z16.s\n"
    "addvl x19, x19, #2\n"
    "str x19, [%x[params], %[offsetof_Params_bias]]\n"
    "uzp2 z18.s, z4.s, z16.s\n"
    "mov z21.d, z15.d\n"
    "ld1sb { z0.h }, p4/Z, [x1]\n"
    "mov z5.d, z15.d\n"
    "ld1sb { z1.h }, p4/Z, [x1, #1, MUL VL]\n"
    "mov z13.d, z18.d\n"
    "ld1sb { z2.h }, p4/Z, [x1, #2, MUL VL]\n"
    "mov z7.d, z18.d\n"
    "ld1sb { z3.h }, p4/Z, [x1, #3, MUL VL]\n"
    "mov z6.d, z15.d\n"
    "ld1sb { z4.h }, p4/Z, [x1, #4, MUL VL]\n"
    "mov z8.d, z18.d\n"
    "ldp x28, x27, [x5, #0x0]\n"
    ".inst 0x454e1000  // ssublb z0.h, z0.b, z14.b\n"
    "ldp x26, x25, [x5, #0x10]\n"
    ".inst 0x454e1021  // ssublb z1.h, z1.b, z14.b\n"
    ".inst 0x454e1042  // ssublb z2.h, z2.b, z14.b\n"
    "ldp x24, x23, [x5, #0x20]\n"
    ".inst 0x454e1063  // ssublb z3.h, z3.b, z14.b\n"
    ".inst 0x454e1084  // ssublb z4.h, z4.b, z14.b\n"
    "ldp x22, x21, [x5, #0x30]\n"
    "ldp x20, x19, [x5, #0x40]\n"
    "ld1b { z31.h }, p3/Z, [x28, x2]\n"
    ".inst 0x45491bff  // usublb z31.h, z31.b, z9.b\n"
    "ld1b { z30.h }, p3/Z, [x27, x2]\n"
    "ld1b { z29.h }, p3/Z, [x26, x2]\n"
    ".inst 0x45491bde  // usublb z30.h, z30.b, z9.b\n"
    "ld1b { z28.h }, p3/Z, [x25, x2]\n"
    ".inst 0x45491bbd  // usublb z29.h, z29.b, z9.b\n"
    "ld1b { z27.h }, p3/Z, [x24, x2]\n"
    "ld1b { z23.h }, p3/Z, [x23, x2]\n"
    ".inst 0x45491b9c  // usublb z28.h, z28.b, z9.b\n"
    "ld1b { z25.h }, p3/Z, [x22, x2]\n"
    "ld1b { z24.h }, p3/Z, [x21, x2]\n"
    ".inst 0x45491b7b  // usublb z27.h, z27.b, z9.b\n"
    ".inst 0x45491af7  // usublb z23.h, z23.b, z9.b\n"
    "ld1b { z26.h }, p3/Z, [x20, x2]\n"
    "ld1b { z22.h }, p3/Z, [x19, x2]\n"
    ".inst 0x45491b39  // usublb z25.h, z25.b, z9.b\n"
    ".inst 0x45491b18  // usublb z24.h, z24.b, z9.b\n"
    ".inst 0x45491b5a  // usublb z26.h, z26.b, z9.b\n"
    ".inst 0x45491ad6  // usublb z22.h, z22.b, z9.b\n"
    "1:"  // Loop
    ".inst 0x448043ef  // smlalb z15.s, p4/M, z31.h, z0.h\n"
    "ldr x20, [x5, #0x50]\n"
    "whilelt p0.h, x3, x0\n"
    ".inst 0x448047f2  // smlalt z18.s, p4/M, z31.h, z0.h\n"
    "ldr x19, [x5, #0x58]\n"
    ".inst 0x448043d5  // smlalb z21.s, p4/M, z30.h, z0.h\n"
    "ldr x25, [x5, #0x60]\n"
    ".inst 0x448047cd  // smlalt z13.s, p4/M, z30.h, z0.h\n"
    "ld1b { z31.h }, p3/Z, [x20, x2]\n"
    ".inst 0x448043a5  // smlalb z5.s, p4/M, z29.h, z0.h\n"
    "ldr x24, [x5, #0x68]\n"
    ".inst 0x448047a7  // smlalt z7.s, p4/M, z29.h, z0.h\n"
    "ldr x23, [x5, #0x70]\n"
    ".inst 0x44804386  // smlalb z6.s, p4/M, z28.h, z0.h\n"
    "ldr x22, [x5, #0x78]\n"
    ".inst 0x45491bff  // usublb z31.h, z31.b, z9.b\n"
    "ldr x15, [x5, #0x80]\n"
    ".inst 0x44804788  // smlalt z8.s, p4/M, z28.h, z0.h\n"
    "ld1sb { z0.h }, p4/Z, [x1, #5, MUL VL]\n"
    ".inst 0x448143cf  // smlalb z15.s, p4/M, z30.h, z1.h\n"
    "ldr x21, [x5, #0x88]\n"
    ".inst 0x448147d2  // smlalt z18.s, p4/M, z30.h, z1.h\n"
    "ld1b { z30.h }, p3/Z, [x19, x2]\n"
    ".inst 0x44814375  // smlalb z21.s, p4/M, z27.h, z1.h\n"
    "ldr x20, [x5, #0x90]\n"
    ".inst 0x454e1000  // ssublb z0.h, z0.b, z14.b\n"
    "ldr x19, [x5, #0x98]\n"
    ".inst 0x4481476d  // smlalt z13.s, p4/M, z27.h, z1.h\n"
    "ldr x14, [x5, #0xa0]\n"
    ".inst 0x45491bde  // usublb z30.h, z30.b, z9.b\n"
    "ldr x13, [x5, #0xa8]\n"
    ".inst 0x44814385  // smlalb z5.s, p4/M, z28.h, z1.h\n"
    "ldr x12, [x5, #0xb0]\n"
    ".inst 0x44814787  // smlalt z7.s, p4/M, z28.h, z1.h\n"
    "ldr x11, [x5, #0xb8]\n"
    ".inst 0x448142e6  // smlalb z6.s, p4/M, z23.h, z1.h\n"
    "ldr x10, [x5, #0xc0]\n"
    ".inst 0x448146e8  // smlalt z8.s, p4/M, z23.h, z1.h\n"
    "ld1sb { z1.h }, p4/Z, [x1, #6, MUL VL]\n"
    ".inst 0x4482436f  // smlalb z15.s, p4/M, z27.h, z2.h\n"
    "ldr x9, [x5, #0xc8]\n"
    ".inst 0x44824772  // smlalt z18.s, p4/M, z27.h, z2.h\n"
    "ld1b { z27.h }, p3/Z, [x25, x2]\n"
    ".inst 0x44824335  // smlalb z21.s, p4/M, z25.h, z2.h\n"
    "ldr x28, [x5, #0xd0]\n"
    ".inst 0x454e1021  // ssublb z1.h, z1.b, z14.b\n"
    "ldr x27, [x5, #0xd8]\n"
    ".inst 0x4482472d  // smlalt z13.s, p4/M, z25.h, z2.h\n"
    "ldr x26, [x5, #0xe0]\n"
    ".inst 0x45491b7b  // usublb z27.h, z27.b, z9.b\n"
    "ld1w { z19.s }, p2/Z, [x4]\n"
    ".inst 0x448242e5  // smlalb z5.s, p4/M, z23.h, z2.h\n"
    "ld1w { z16.s }, p1/Z, [x4, #1, MUL VL]\n"
    "addvl x4, x4, #2\n"
    ".inst 0x448246e7  // smlalt z7.s, p4/M, z23.h, z2.h\n"
    ".inst 0x448243e6  // smlalb z6.s, p4/M, z31.h, z2.h\n"
    ".inst 0x448247e8  // smlalt z8.s, p4/M, z31.h, z2.h\n"
    "ld1sb { z2.h }, p4/Z, [x1, #7, MUL VL]\n"
    "inch x1, ALL, MUL #8\n"
    "uzp1 z10.s, z19.s, z16.s\n"
    "uzp2 z20.s, z19.s, z16.s\n"
    "ld1w { z19.s }, p2/Z, [x6]\n"
    ".inst 0x4483432f  // smlalb z15.s, p4/M, z25.h, z3.h\n"
    "ld1w { z16.s }, p1/Z, [x6, #1, MUL VL]\n"
    "addvl x6, x6, #2\n"
    ".inst 0x454e1042  // ssublb z2.h, z2.b, z14.b\n"
    ".inst 0x44834732  // smlalt z18.s, p4/M, z25.h, z3.h\n"
    "ld1b { z25.h }, p3/Z, [x24, x2]\n"
    ".inst 0x44834315  // smlalb z21.s, p4/M, z24.h, z3.h\n"
    "ldr x25, [x5, #0xe8]\n"
    ".inst 0x4483470d  // smlalt z13.s, p4/M, z24.h, z3.h\n"
    ".inst 0x448343e5  // smlalb z5.s, p4/M, z31.h, z3.h\n"
    ".inst 0x45491b39  // usublb z25.h, z25.b, z9.b\n"
    ".inst 0x448347e7  // smlalt z7.s, p4/M, z31.h, z3.h\n"
    ".inst 0x448343c6  // smlalb z6.s, p4/M, z30.h, z3.h\n"
    ".inst 0x448347c8  // smlalt z8.s, p4/M, z30.h, z3.h\n"
    "ld1sb { z3.h }, p4/Z, [x1]\n"
    ".inst 0x4484430f  // smlalb z15.s, p4/M, z24.h, z4.h\n"
    ".inst 0x44844712  // smlalt z18.s, p4/M, z24.h, z4.h\n"
    "ld1b { z24.h }, p3/Z, [x23, x2]\n"
    ".inst 0x44844375  // smlalb z21.s, p4/M, z27.h, z4.h\n"
    "ldr x24, [x5, #0xf0]\n"
    ".inst 0x454e1063  // ssublb z3.h, z3.b, z14.b\n"
    ".inst 0x4484476d  // smlalt z13.s, p4/M, z27.h, z4.h\n"
    "ld1b { z27.h }, p3/Z, [x22, x2]\n"
    ".inst 0x45491b18  // usublb z24.h, z24.b, z9.b\n"
    "ldr x23, [x5, #0xf8]\n"
    ".inst 0x448443c5  // smlalb z5.s, p4/M, z30.h, z4.h\n"
    ".inst 0x448447c7  // smlalt z7.s, p4/M, z30.h, z4.h\n"
    ".inst 0x45491b7b  // usublb z27.h, z27.b, z9.b\n"
    ".inst 0x44844346  // smlalb z6.s, p4/M, z26.h, z4.h\n"
    ".inst 0x44844748  // smlalt z8.s, p4/M, z26.h, z4.h\n"
    "ld1sb { z4.h }, p4/Z, [x1, #1, MUL VL]\n"
    ".inst 0x448043af  // smlalb z15.s, p4/M, z29.h, z0.h\n"
    ".inst 0x448047b2  // smlalt z18.s, p4/M, z29.h, z0.h\n"
    "uzp1 z29.s, z19.s, z16.s\n"
    ".inst 0x454e1084  // ssublb z4.h, z4.b, z14.b\n"
    "uzp2 z19.s, z19.s, z16.s\n"
    ".inst 0x44804395  // smlalb z21.s, p4/M, z28.h, z0.h\n"
    ".inst 0x4480478d  // smlalt z13.s, p4/M, z28.h, z0.h\n"
    ".inst 0x448042c5  // smlalb z5.s, p4/M, z22.h, z0.h\n"
    ".inst 0x448046c7  // smlalt z7.s, p4/M, z22.h, z0.h\n"
    ".inst 0x44804326  // smlalb z6.s, p4/M, z25.h, z0.h\n"
    ".inst 0x44804728  // smlalt z8.s, p4/M, z25.h, z0.h\n"
    "ld1sb { z0.h }, p4/Z, [x1, #2, MUL VL]\n"
    ".inst 0x4481438f  // smlalb z15.s, p4/M, z28.h, z1.h\n"
    ".inst 0x44814792  // smlalt z18.s, p4/M, z28.h, z1.h\n"
    "ld1b { z28.h }, p3/Z, [x21, x2]\n"
    ".inst 0x448142f5  // smlalb z21.s, p4/M, z23.h, z1.h\n"
    "ldr x22, [x5, #0x100]\n"
    ".inst 0x454e1000  // ssublb z0.h, z0.b, z14.b\n"
    ".inst 0x448146ed  // smlalt z13.s, p4/M, z23.h, z1.h\n"
    ".inst 0x45491b9c  // usublb z28.h, z28.b, z9.b\n"
    ".inst 0x44814325  // smlalb z5.s, p4/M, z25.h, z1.h\n"
    ".inst 0x44814727  // smlalt z7.s, p4/M, z25.h, z1.h\n"
    ".inst 0x44814306  // smlalb z6.s, p4/M, z24.h, z1.h\n"
    ".inst 0x44814708  // smlalt z8.s, p4/M, z24.h, z1.h\n"
    "ld1sb { z1.h }, p4/Z, [x1, #3, MUL VL]\n"
    ".inst 0x448242ef  // smlalb z15.s, p4/M, z23.h, z2.h\n"
    ".inst 0x448246f2  // smlalt z18.s, p4/M, z23.h, z2.h\n"
    "ld1b { z23.h }, p3/Z, [x15, x2]\n"
    ".inst 0x448243f5  // smlalb z21.s, p4/M, z31.h, z2.h\n"
    "ldr x21, [x5, #0x108]\n"
    ".inst 0x454e1021  // ssublb z1.h, z1.b, z14.b\n"
    ".inst 0x448247ed  // smlalt z13.s, p4/M, z31.h, z2.h\n"
    ".inst 0x45491af7  // usublb z23.h, z23.b, z9.b\n"
    ".inst 0x44824305  // smlalb z5.s, p4/M, z24.h, z2.h\n"
    ".inst 0x44824707  // smlalt z7.s, p4/M, z24.h, z2.h\n"
    ".inst 0x44824366  // smlalb z6.s, p4/M, z27.h, z2.h\n"
    ".inst 0x44824768  // smlalt z8.s, p4/M, z27.h, z2.h\n"
    "ld1sb { z2.h }, p4/Z, [x1, #4, MUL VL]\n"
    ".inst 0x448343ef  // smlalb z15.s, p4/M, z31.h, z3.h\n"
    ".inst 0x448347f2  // smlalt z18.s, p4/M, z31.h, z3.h\n"
    "ld1b { z31.h }, p3/Z, [x20, x2]\n"
    ".inst 0x448343d5  // smlalb z21.s, p4/M, z30.h, z3.h\n"
    "ldr x20, [x5, #0x110]\n"
    ".inst 0x454e1042  // ssublb z2.h, z2.b, z14.b\n"
    ".inst 0x448347cd  // smlalt z13.s, p4/M, z30.h, z3.h\n"
    ".inst 0x45491bff  // usublb z31.h, z31.b, z9.b\n"
    ".inst 0x44834365  // smlalb z5.s, p4/M, z27.h, z3.h\n"
    ".inst 0x44834767  // smlalt z7.s, p4/M, z27.h, z3.h\n"
    ".inst 0x448342e6  // smlalb z6.s, p4/M, z23.h, z3.h\n"
    ".inst 0x448346e8  // smlalt z8.s, p4/M, z23.h, z3.h\n"
    "ld1sb { z3.h }, p4/Z, [x1, #5, MUL VL]\n"
    ".inst 0x448443cf  // smlalb z15.s, p4/M, z30.h, z4.h\n"
    ".inst 0x448447d2  // smlalt z18.s, p4/M, z30.h, z4.h\n"
    "ld1b { z30.h }, p3/Z, [x19, x2]\n"
    ".inst 0x44844355  // smlalb z21.s, p4/M, z26.h, z4.h\n"
    "ldr x19, [x5, #0x118]\n"
    ".inst 0x454e1063  // ssublb z3.h, z3.b, z14.b\n"
    ".inst 0x4484474d  // smlalt z13.s, p4/M, z26.h, z4.h\n"
    "ld1b { z26.h }, p3/Z, [x14, x2]\n"
    ".inst 0x45491bde  // usublb z30.h, z30.b, z9.b\n"
    ".inst 0x448442e5  // smlalb z5.s, p4/M, z23.h, z4.h\n"
    ".inst 0x448446e7  // smlalt z7.s, p4/M, z23.h, z4.h\n"
    ".inst 0x45491b5a  // usublb z26.h, z26.b, z9.b\n"
    ".inst 0x44844386  // smlalb z6.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44844788  // smlalt z8.s, p4/M, z28.h, z4.h\n"
    "ld1sb { z4.h }, p4/Z, [x1, #6, MUL VL]\n"
    ".inst 0x448042cf  // smlalb z15.s, p4/M, z22.h, z0.h\n"
    ".inst 0x448046d2  // smlalt z18.s, p4/M, z22.h, z0.h\n"
    "ld1b { z22.h }, p3/Z, [x11, x2]\n"
    ".inst 0x44804335  // smlalb z21.s, p4/M, z25.h, z0.h\n"
    ".inst 0x454e1084  // ssublb z4.h, z4.b, z14.b\n"
    ".inst 0x4480472d  // smlalt z13.s, p4/M, z25.h, z0.h\n"
    ".inst 0x45491ad6  // usublb z22.h, z22.b, z9.b\n"
    ".inst 0x448043e5  // smlalb z5.s, p4/M, z31.h, z0.h\n"
    ".inst 0x448047e7  // smlalt z7.s, p4/M, z31.h, z0.h\n"
    ".inst 0x448043c6  // smlalb z6.s, p4/M, z30.h, z0.h\n"
    ".inst 0x448047c8  // smlalt z8.s, p4/M, z30.h, z0.h\n"
    "ld1sb { z0.h }, p4/Z, [x1, #7, MUL VL]\n"
    "inch x1, ALL, MUL #8\n"
    ".inst 0x4481432f  // smlalb z15.s, p4/M, z25.h, z1.h\n"
    ".inst 0x44814732  // smlalt z18.s, p4/M, z25.h, z1.h\n"
    "ld1b { z25.h }, p3/Z, [x13, x2]\n"
    ".inst 0x44814315  // smlalb z21.s, p4/M, z24.h, z1.h\n"
    ".inst 0x454e1000  // ssublb z0.h, z0.b, z14.b\n"
    ".inst 0x4481470d  // smlalt z13.s, p4/M, z24.h, z1.h\n"
    ".inst 0x45491b39  // usublb z25.h, z25.b, z9.b\n"
    ".inst 0x448143c5  // smlalb z5.s, p4/M, z30.h, z1.h\n"
    ".inst 0x448147c7  // smlalt z7.s, p4/M, z30.h, z1.h\n"
    ".inst 0x44814346  // smlalb z6.s, p4/M, z26.h, z1.h\n"
    ".inst 0x44814748  // smlalt z8.s, p4/M, z26.h, z1.h\n"
    "ld1sb { z1.h }, p4/Z, [x1]\n"
    ".inst 0x4482430f  // smlalb z15.s, p4/M, z24.h, z2.h\n"
    ".inst 0x44824712  // smlalt z18.s, p4/M, z24.h, z2.h\n"
    "ld1b { z24.h }, p3/Z, [x12, x2]\n"
    ".inst 0x44824375  // smlalb z21.s, p4/M, z27.h, z2.h\n"
    ".inst 0x454e1021  // ssublb z1.h, z1.b, z14.b\n"
    ".inst 0x4482476d  // smlalt z13.s, p4/M, z27.h, z2.h\n"
    ".inst 0x45491b18  // usublb z24.h, z24.b, z9.b\n"
    ".inst 0x44824345  // smlalb z5.s, p4/M, z26.h, z2.h\n"
    ".inst 0x44824747  // smlalt z7.s, p4/M, z26.h, z2.h\n"
    ".inst 0x44824326  // smlalb z6.s, p4/M, z25.h, z2.h\n"
    ".inst 0x44824728  // smlalt z8.s, p4/M, z25.h, z2.h\n"
    "ld1sb { z2.h }, p4/Z, [x1, #1, MUL VL]\n"
    ".inst 0x4483436f  // smlalb z15.s, p4/M, z27.h, z3.h\n"
    ".inst 0x44834772  // smlalt z18.s, p4/M, z27.h, z3.h\n"
    "ld1b { z27.h }, p3/Z, [x10, x2]\n"
    ".inst 0x448342f5  // smlalb z21.s, p4/M, z23.h, z3.h\n"
    ".inst 0x454e1042  // ssublb z2.h, z2.b, z14.b\n"
    ".inst 0x448346ed  // smlalt z13.s, p4/M, z23.h, z3.h\n"
    ".inst 0x45491b7b  // usublb z27.h, z27.b, z9.b\n"
    ".inst 0x44834325  // smlalb z5.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834727  // smlalt z7.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834306  // smlalb z6.s, p4/M, z24.h, z3.h\n"
    ".inst 0x44834708  // smlalt z8.s, p4/M, z24.h, z3.h\n"
    "ld1sb { z3.h }, p4/Z, [x1, #2, MUL VL]\n"
    ".inst 0x448442ef  // smlalb z15.s, p4/M, z23.h, z4.h\n"
    ".inst 0x448446f2  // smlalt z18.s, p4/M, z23.h, z4.h\n"
    "ld1b { z23.h }, p3/Z, [x9, x2]\n"
    ".inst 0x44844395  // smlalb z21.s, p4/M, z28.h, z4.h\n"
    ".inst 0x454e1063  // ssublb z3.h, z3.b, z14.b\n"
    ".inst 0x4484478d  // smlalt z13.s, p4/M, z28.h, z4.h\n"
    "ld1b { z28.h }, p3/Z, [x26, x2]\n"
    ".inst 0x45491af7  // usublb z23.h, z23.b, z9.b\n"
    ".inst 0x44844305  // smlalb z5.s, p4/M, z24.h, z4.h\n"
    ".inst 0x44844707  // smlalt z7.s, p4/M, z24.h, z4.h\n"
    ".inst 0x45491b9c  // usublb z28.h, z28.b, z9.b\n"
    ".inst 0x448442c6  // smlalb z6.s, p4/M, z22.h, z4.h\n"
    ".inst 0x448446c8  // smlalt z8.s, p4/M, z22.h, z4.h\n"
    "ld1sb { z4.h }, p4/Z, [x1, #3, MUL VL]\n"
    ".inst 0x448043ef  // smlalb z15.s, p4/M, z31.h, z0.h\n"
    ".inst 0x448047f2  // smlalt z18.s, p4/M, z31.h, z0.h\n"
    "ld1b { z31.h }, p3/Z, [x28, x2]\n"
    ".inst 0x448043d5  // smlalb z21.s, p4/M, z30.h, z0.h\n"
    ".inst 0x454e1084  // ssublb z4.h, z4.b, z14.b\n"
    ".inst 0x448047cd  // smlalt z13.s, p4/M, z30.h, z0.h\n"
    ".inst 0x45491bff  // usublb z31.h, z31.b, z9.b\n"
    ".inst 0x44804365  // smlalb z5.s, p4/M, z27.h, z0.h\n"
    ".inst 0x44804767  // smlalt z7.s, p4/M, z27.h, z0.h\n"
    ".inst 0x448042e6  // smlalb z6.s, p4/M, z23.h, z0.h\n"
    ".inst 0x448046e8  // smlalt z8.s, p4/M, z23.h, z0.h\n"
    "ld1sb { z0.h }, p4/Z, [x1, #4, MUL VL]\n"
    ".inst 0x448143cf  // smlalb z15.s, p4/M, z30.h, z1.h\n"
    ".inst 0x448147d2  // smlalt z18.s, p4/M, z30.h, z1.h\n"
    "ld1b { z30.h }, p3/Z, [x27, x2]\n"
    ".inst 0x44814355  // smlalb z21.s, p4/M, z26.h, z1.h\n"
    ".inst 0x454e1000  // ssublb z0.h, z0.b, z14.b\n"
    ".inst 0x4481474d  // smlalt z13.s, p4/M, z26.h, z1.h\n"
    ".inst 0x45491bde  // usublb z30.h, z30.b, z9.b\n"
    ".inst 0x448142e5  // smlalb z5.s, p4/M, z23.h, z1.h\n"
    ".inst 0x448146e7  // smlalt z7.s, p4/M, z23.h, z1.h\n"
    ".inst 0x448143e6  // smlalb z6.s, p4/M, z31.h, z1.h\n"
    ".inst 0x448147e8  // smlalt z8.s, p4/M, z31.h, z1.h\n"
    "ld1sb { z1.h }, p4/Z, [x1, #5, MUL VL]\n"
    ".inst 0x4482434f  // smlalb z15.s, p4/M, z26.h, z2.h\n"
    ".inst 0x44824752  // smlalt z18.s, p4/M, z26.h, z2.h\n"
    "ld1b { z26.h }, p3/Z, [x25, x2]\n"
    ".inst 0x44824335  // smlalb z21.s, p4/M, z25.h, z2.h\n"
    ".inst 0x454e1021  // ssublb z1.h, z1.b, z14.b\n"
    ".inst 0x4482472d  // smlalt z13.s, p4/M, z25.h, z2.h\n"
    ".inst 0x45491b5a  // usublb z26.h, z26.b, z9.b\n"
    ".inst 0x448243e5  // smlalb z5.s, p4/M, z31.h, z2.h\n"
    ".inst 0x448247e7  // smlalt z7.s, p4/M, z31.h, z2.h\n"
    ".inst 0x448243c6  // smlalb z6.s, p4/M, z30.h, z2.h\n"
    ".inst 0x448247c8  // smlalt z8.s, p4/M, z30.h, z2.h\n"
    "ld1sb { z2.h }, p4/Z, [x1, #6, MUL VL]\n"
    ".inst 0x4483432f  // smlalb z15.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834732  // smlalt z18.s, p4/M, z25.h, z3.h\n"
    "ld1b { z25.h }, p3/Z, [x24, x2]\n"
    ".inst 0x44834315  // smlalb z21.s, p4/M, z24.h, z3.h\n"
    ".inst 0x454e1042  // ssublb z2.h, z2.b, z14.b\n"
    ".inst 0x4483470d  // smlalt z13.s, p4/M, z24.h, z3.h\n"
    ".inst 0x45491b39  // usublb z25.h, z25.b, z9.b\n"
    ".inst 0x448343c5  // smlalb z5.s, p4/M, z30.h, z3.h\n"
    ".inst 0x448347c7  // smlalt z7.s, p4/M, z30.h, z3.h\n"
    ".inst 0x44834386  // smlalb z6.s, p4/M, z28.h, z3.h\n"
    ".inst 0x44834788  // smlalt z8.s, p4/M, z28.h, z3.h\n"
    "ld1sb { z3.h }, p4/Z, [x1, #7, MUL VL]\n"
    "inch x1, ALL, MUL #8\n"
    ".inst 0x4484430f  // smlalb z15.s, p4/M, z24.h, z4.h\n"
    ".inst 0x44844712  // smlalt z18.s, p4/M, z24.h, z4.h\n"
    "ld1b { z24.h }, p3/Z, [x23, x2]\n"
    ".inst 0x448442d5  // smlalb z21.s, p4/M, z22.h, z4.h\n"
    ".inst 0x454e1063  // ssublb z3.h, z3.b, z14.b\n"
    ".inst 0x448446cd  // smlalt z13.s, p4/M, z22.h, z4.h\n"
    ".inst 0x45491b18  // usublb z24.h, z24.b, z9.b\n"
    ".inst 0x44844385  // smlalb z5.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44844787  // smlalt z7.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44844346  // smlalb z6.s, p4/M, z26.h, z4.h\n"
    ".inst 0x44844748  // smlalt z8.s, p4/M, z26.h, z4.h\n"
    "ld1sb { z4.h }, p4/Z, [x1]\n"
    "inch x1\n"
    ".inst 0x4480436f  // smlalb z15.s, p4/M, z27.h, z0.h\n"
    ".inst 0x44804772  // smlalt z18.s, p4/M, z27.h, z0.h\n"
    "ld1b { z27.h }, p3/Z, [x22, x2]\n"
    ".inst 0x448042f5  // smlalb z21.s, p4/M, z23.h, z0.h\n"
    ".inst 0x454e1084  // ssublb z4.h, z4.b, z14.b\n"
    ".inst 0x448046ed  // smlalt z13.s, p4/M, z23.h, z0.h\n"
    ".inst 0x45491b7b  // usublb z27.h, z27.b, z9.b\n"
    ".inst 0x44804325  // smlalb z5.s, p4/M, z25.h, z0.h\n"
    ".inst 0x44804727  // smlalt z7.s, p4/M, z25.h, z0.h\n"
    "ld1b { z25.h }, p3/Z, [x21, x2]\n"
    ".inst 0x44804306  // smlalb z6.s, p4/M, z24.h, z0.h\n"
    ".inst 0x44804708  // smlalt z8.s, p4/M, z24.h, z0.h\n"
    ".inst 0x448142ef  // smlalb z15.s, p4/M, z23.h, z1.h\n"
    ".inst 0x45491b39  // usublb z25.h, z25.b, z9.b\n"
    ".inst 0x448146f2  // smlalt z18.s, p4/M, z23.h, z1.h\n"
    ".inst 0x448143f5  // smlalb z21.s, p4/M, z31.h, z1.h\n"
    ".inst 0x448147ed  // smlalt z13.s, p4/M, z31.h, z1.h\n"
    ".inst 0x44814305  // smlalb z5.s, p4/M, z24.h, z1.h\n"
    ".inst 0x44814707  // smlalt z7.s, p4/M, z24.h, z1.h\n"
    "ld1b { z24.h }, p3/Z, [x20, x2]\n"
    ".inst 0x44814366  // smlalb z6.s, p4/M, z27.h, z1.h\n"
    ".inst 0x44814768  // smlalt z8.s, p4/M, z27.h, z1.h\n"
    ".inst 0x448243ef  // smlalb z15.s, p4/M, z31.h, z2.h\n"
    ".inst 0x45491b18  // usublb z24.h, z24.b, z9.b\n"
    ".inst 0x448247f2  // smlalt z18.s, p4/M, z31.h, z2.h\n"
    ".inst 0x448243d5  // smlalb z21.s, p4/M, z30.h, z2.h\n"
    ".inst 0x448247cd  // smlalt z13.s, p4/M, z30.h, z2.h\n"
    ".inst 0x44824365  // smlalb z5.s, p4/M, z27.h, z2.h\n"
    ".inst 0x44824767  // smlalt z7.s, p4/M, z27.h, z2.h\n"
    "ld1b { z27.h }, p3/Z, [x19, x2]\n"
    "inch x2\n"
    ".inst 0x44824326  // smlalb z6.s, p4/M, z25.h, z2.h\n"
    "whilelt p2.s, x2, x0\n"
    ".inst 0x44824728  // smlalt z8.s, p4/M, z25.h, z2.h\n"
    "mov x19, x2\n"
    ".inst 0x448343cf  // smlalb z15.s, p4/M, z30.h, z3.h\n"
    "incw x19\n"
    ".inst 0x45491b7b  // usublb z27.h, z27.b, z9.b\n"
    "whilelt p1.s, x19, x0\n"
    ".inst 0x448347d2  // smlalt z18.s, p4/M, z30.h, z3.h\n"
    "whilelt p3.h, x2, x0\n"
    ".inst 0x44834395  // smlalb z21.s, p4/M, z28.h, z3.h\n"
    ".inst 0x4483478d  // smlalt z13.s, p4/M, z28.h, z3.h\n"
    ".inst 0x44834325  // smlalb z5.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834727  // smlalt z7.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834306  // smlalb z6.s, p4/M, z24.h, z3.h\n"
    ".inst 0x44834708  // smlalt z8.s, p4/M, z24.h, z3.h\n"
    ".inst 0x4484438f  // smlalb z15.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44844792  // smlalt z18.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44844355  // smlalb z21.s, p4/M, z26.h, z4.h\n"
    ".inst 0x4484474d  // smlalt z13.s, p4/M, z26.h, z4.h\n"
    ".inst 0x04aa75ef  // sqrdmulh z15.s, z15.s, z10.s\n"
    ".inst 0x04b47652  // sqrdmulh z18.s, z18.s, z20.s\n"
    ".inst 0x04aa76b5  // sqrdmulh z21.s, z21.s, z10.s\n"
    ".inst 0x04b475ad  // sqrdmulh z13.s, z13.s, z20.s\n"
    "and z28.d, z15.d, z29.d\n"
    "and z26.d, z18.d, z19.d\n"
    "and z16.d, z21.d, z29.d\n"
    "asr z28.s, z28.s, #0x1f\n"
    "asr z26.s, z26.s, #0x1f\n"
    "asr z16.s, z16.s, #0x1f\n"
    "sqadd z15.s, z15.s, z28.s\n"
    "sqadd z18.s, z18.s, z26.s\n"
    "sqadd z21.s, z21.s, z16.s\n"
    "and z16.d, z13.d, z19.d\n"
    ".inst 0x44844305  // smlalb z5.s, p4/M, z24.h, z4.h\n"
    ".inst 0x44844707  // smlalt z7.s, p4/M, z24.h, z4.h\n"
    "asr z16.s, z16.s, #0x1f\n"
    ".inst 0x44844366  // smlalb z6.s, p4/M, z27.h, z4.h\n"
    ".inst 0x04aa74a5  // sqrdmulh z5.s, z5.s, z10.s\n"
    "sqadd z13.s, z13.s, z16.s\n"
    ".inst 0x04b474e7  // sqrdmulh z7.s, z7.s, z20.s\n"
    ".inst 0x04aa74c6  // sqrdmulh z6.s, z6.s, z10.s\n"
    "and z16.d, z5.d, z29.d\n"
    ".inst 0x44844768  // smlalt z8.s, p4/M, z27.h, z4.h\n"
    "and z25.d, z7.d, z19.d\n"
    "asr z16.s, z16.s, #0x1f\n"
    "and z26.d, z6.d, z29.d\n"
    "asr z25.s, z25.s, #0x1f\n"
    "sqadd z5.s, z5.s, z16.s\n"
    "asr z26.s, z26.s, #0x1f\n"
    "sqadd z7.s, z7.s, z25.s\n"
    ".inst 0x04b47508  // sqrdmulh z8.s, z8.s, z20.s\n"
    "sqadd z6.s, z6.s, z26.s\n"
    ".inst 0x448293af  // srshl z15.s, p4/M, z15.s, z29.s\n"
    ".inst 0x44829272  // srshl z18.s, p4/M, z18.s, z19.s\n"
    "and z16.d, z8.d, z19.d\n"
    ".inst 0x448293b5  // srshl z21.s, p4/M, z21.s, z29.s\n"
    "add z15.s, z15.s, z17.s\n"
    "add z18.s, z18.s, z17.s\n"
    "asr z16.s, z16.s, #0x1f\n"
    "add z21.s, z21.s, z17.s\n"
    "smin z15.s, p4/M, z15.s, z11.s\n"
    "sqadd z8.s, z8.s, z16.s\n"
    "smin z18.s, p4/M, z18.s, z11.s\n"
    "smin z21.s, p4/M, z21.s, z11.s\n"
    "smax z15.s, p4/M, z15.s, z12.s\n"
    ".inst 0x4482926d  // srshl z13.s, p4/M, z13.s, z19.s\n"
    "smax z18.s, p4/M, z18.s, z12.s\n"
    "smax z21.s, p4/M, z21.s, z12.s\n"
    ".inst 0x448293a5  // srshl z5.s, p4/M, z5.s, z29.s\n"
    "add z13.s, z13.s, z17.s\n"
    "trn1 z15.h, z15.h, z18.h\n"
    "st1b { z15.h }, p0, [x7, x3]\n"
    "add z5.s, z5.s, z17.s\n"
    "smin z13.s, p4/M, z13.s, z11.s\n"
    ".inst 0x44829267  // srshl z7.s, p4/M, z7.s, z19.s\n"
    ".inst 0x448293a6  // srshl z6.s, p4/M, z6.s, z29.s\n"
    "smin z5.s, p4/M, z5.s, z11.s\n"
    "smax z13.s, p4/M, z13.s, z12.s\n"
    "add z7.s, z7.s, z17.s\n"
    "add z6.s, z6.s, z17.s\n"
    "smax z5.s, p4/M, z5.s, z12.s\n"
    "trn1 z21.h, z21.h, z13.h\n"
    "st1b { z21.h }, p0, [x8, x3]\n"
    "smin z7.s, p4/M, z7.s, z11.s\n"
    "smin z6.s, p4/M, z6.s, z11.s\n"
    ".inst 0x44829268  // srshl z8.s, p4/M, z8.s, z19.s\n"
    "smax z7.s, p4/M, z7.s, z12.s\n"
    "smax z6.s, p4/M, z6.s, z12.s\n"
    "add z8.s, z8.s, z17.s\n"
    "trn1 z5.h, z5.h, z7.h\n"
    "st1b { z5.h }, p0, [x17, x3]\n"
    "smin z8.s, p4/M, z8.s, z11.s\n"
    "smax z8.s, p4/M, z8.s, z12.s\n"
    "trn1 z6.h, z6.h, z8.h\n"
    "st1b { z6.h }, p0, [x16, x3]\n"
    "inch x3\n"
    "ldr x19, [%x[params], %[offsetof_Params_bias]]\n"
    "ld1w { z4.s }, p2/Z, [x19]\n"
    "ld1w { z16.s }, p1/Z, [x19, #1, MUL VL]\n"
    "uzp1 z15.s, z4.s, z16.s\n"
    "addvl x19, x19, #2\n"
    "str x19, [%x[params], %[offsetof_Params_bias]]\n"
    "uzp2 z18.s, z4.s, z16.s\n"
    "mov z21.d, z15.d\n"
    "ld1sb { z0.h }, p4/Z, [x1]\n"
    "mov z5.d, z15.d\n"
    "ld1sb { z1.h }, p4/Z, [x1, #1, MUL VL]\n"
    "mov z13.d, z18.d\n"
    "ld1sb { z2.h }, p4/Z, [x1, #2, MUL VL]\n"
    "mov z7.d, z18.d\n"
    "ld1sb { z3.h }, p4/Z, [x1, #3, MUL VL]\n"
    "mov z6.d, z15.d\n"
    "ld1sb { z4.h }, p4/Z, [x1, #4, MUL VL]\n"
    "mov z8.d, z18.d\n"
    "ldp x28, x27, [x5, #0x0]\n"
    ".inst 0x454e1000  // ssublb z0.h, z0.b, z14.b\n"
    "ldp x26, x25, [x5, #0x10]\n"
    ".inst 0x454e1021  // ssublb z1.h, z1.b, z14.b\n"
    ".inst 0x454e1042  // ssublb z2.h, z2.b, z14.b\n"
    "ldp x24, x23, [x5, #0x20]\n"
    ".inst 0x454e1063  // ssublb z3.h, z3.b, z14.b\n"
    ".inst 0x454e1084  // ssublb z4.h, z4.b, z14.b\n"
    "ldp x22, x21, [x5, #0x30]\n"
    "ldp x20, x19, [x5, #0x40]\n"
    "ld1b { z31.h }, p3/Z, [x28, x2]\n"
    ".inst 0x45491bff  // usublb z31.h, z31.b, z9.b\n"
    "ld1b { z30.h }, p3/Z, [x27, x2]\n"
    "ld1b { z29.h }, p3/Z, [x26, x2]\n"
    ".inst 0x45491bde  // usublb z30.h, z30.b, z9.b\n"
    "ld1b { z28.h }, p3/Z, [x25, x2]\n"
    ".inst 0x45491bbd  // usublb z29.h, z29.b, z9.b\n"
    "ld1b { z27.h }, p3/Z, [x24, x2]\n"
    "ld1b { z23.h }, p3/Z, [x23, x2]\n"
    ".inst 0x45491b9c  // usublb z28.h, z28.b, z9.b\n"
    "ld1b { z25.h }, p3/Z, [x22, x2]\n"
    "ld1b { z24.h }, p3/Z, [x21, x2]\n"
    ".inst 0x45491b7b  // usublb z27.h, z27.b, z9.b\n"
    ".inst 0x45491af7  // usublb z23.h, z23.b, z9.b\n"
    "ld1b { z26.h }, p3/Z, [x20, x2]\n"
    "ld1b { z22.h }, p3/Z, [x19, x2]\n"
    ".inst 0x45491b39  // usublb z25.h, z25.b, z9.b\n"
    ".inst 0x45491b18  // usublb z24.h, z24.b, z9.b\n"
    ".inst 0x45491b5a  // usublb z26.h, z26.b, z9.b\n"
    ".inst 0x45491ad6  // usublb z22.h, z22.b, z9.b\n"
    "b.any 1b\n"
    :
    : [offsetof_Params_bias] "I" (offsetof(Params, bias)), [offsetof_Params_inptrs] "I" (offsetof(Params, inptrs)), [offsetof_Params_n_channels] "I" (offsetof(Params, n_channels)), [offsetof_Params_outptrs] "I" (offsetof(Params, outptrs)), [offsetof_Params_requant] "I" (offsetof(Params, requant)), [offsetof_Params_requant_muls] "I" (offsetof(Params, requant_muls)), [offsetof_Params_requant_shifts] "I" (offsetof(Params, requant_shifts)), [offsetof_Params_weights] "I" (offsetof(Params, weights)), [offsetof_Requantize32_a_offset] "I" (offsetof(arm_gemm::Requantize32, a_offset)), [offsetof_Requantize32_b_offset] "I" (offsetof(arm_gemm::Requantize32, b_offset)), [offsetof_Requantize32_c_offset] "I" (offsetof(arm_gemm::Requantize32, c_offset)), [offsetof_Requantize32_maxval] "I" (offsetof(arm_gemm::Requantize32, maxval)), [offsetof_Requantize32_minval] "I" (offsetof(arm_gemm::Requantize32, minval)), [params] "r" (&params)
    : "cc", "memory", "p0", "p1", "p2", "p3", "p4", "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
  );
}

}  // namespace depthwise
}  // namespace arm_conv

#endif  // defined(__aarch64__) && defined(ARM_COMPUTE_ENABLE_SVE) && defined(ARM_COMPUTE_ENABLE_SVE2)
