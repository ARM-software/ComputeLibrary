/*
 * Copyright (c) 2022 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#if defined(ARM_COMPUTE_ENABLE_SME2)

#include <algorithm>
#include <cstddef>
#include "arm_gemm.hpp"

using arm_gemm::Requantize32;

namespace arm_conv {
namespace depthwise {

void sme2_u8s8u8q_planar_3x3_s2_2rows_dot_za_impl(
  const uint8_t *inptr,
  size_t ld_in_row,
  size_t ld_in_col,
  unsigned int pad_top,
  unsigned int valid_input_rows,
  unsigned int pad_left,
  unsigned int valid_input_cols,
  const int8_t *weights,
  uint8_t **outptrs,
  const size_t *outlds,
  unsigned int output_cols,
  unsigned int start_channel,
  unsigned int valid_channels,
  const arm_gemm::Requantize32 &qp
)
{
  struct Args
  {
    const uint8_t *inptr;
    long unsigned int pad_top, pad_bottom, pad_left;
    const int8_t *weights;
    long unsigned int input_cols, output_cols;
    uint8_t **outptrs;
    const size_t *ld_out_cols;
    long unsigned int n, n_channels;
  };

  Args args = { inptr, pad_top, 5u - std::min(5u, pad_top + valid_input_rows), pad_left, weights, valid_input_cols, output_cols, outptrs, outlds, start_channel, valid_channels };

  __asm__ __volatile__(
    "ldr x11, [%x[args], %[offsetof_Args_pad_bottom]]\n"
    "mov x19, #0x5\n"
    ".inst 0xd503477f  // SMSTART ZA\n"
    "sub x19, x19, x11\n"
    "ldr x10, [%x[args], %[offsetof_Args_pad_top]]\n"
    "ptrue p0.b\n"
    "mov z12.s, #0x0\n"
    "ldr x22, [%x[args], %[offsetof_Args_n_channels]]\n"
    "whilelt p5.s, XZR, x22\n"
    "whilelt p9.s, XZR, x19\n"
    "ldr x19, [%x[qp], %[offsetof_Requantize32_bias]]\n"
    "whilelt p8.s, XZR, x10\n"
    "eor p8.b, p0/Z, p8.b, p9.b\n"
    "ldr x21, [%x[args], %[offsetof_Args_n]]\n"
    "cbz x19, 1f\n"
    "ld1w { z12.s }, p5/Z, [x19, x21, LSL #2]\n"
    "1:"  // Load bias: Done
    "ldr x20, [%x[args], %[offsetof_Args_weights]]\n"
    "ld1sb { z27.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "mov z0.h, #0x0\n"
    "ld1sb { z16.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "ldr x19, [%x[qp], %[offsetof_Requantize32_per_channel_muls]]\n"
    "mov z13.d, z12.d\n"
    "ld1sb { z22.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "ld1sb { z21.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "ld1sb { z20.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "ld1sb { z18.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "ld1sb { z17.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "ld1sb { z24.s }, p0/Z, [x20]\n"
    "incw x20\n"
    "ld1sb { z19.s }, p0/Z, [x20]\n"
    "ld1rh { z28.h }, p0/Z, [%x[qp], %[offsetof_Requantize32_b_offset]]\n"
    "sub z27.h, z27.h, z28.h\n"
    "sub z16.h, z16.h, z28.h\n"
    "sub z22.h, z22.h, z28.h\n"
    "sub z21.h, z21.h, z28.h\n"
    "trn1 z8.h, z27.h, z21.h\n"
    "sub z20.h, z20.h, z28.h\n"
    "sub z18.h, z18.h, z28.h\n"
    "trn1 z7.h, z16.h, z20.h\n"
    "sub z17.h, z17.h, z28.h\n"
    "sub z24.h, z24.h, z28.h\n"
    "trn1 z6.h, z17.h, z0.h\n"
    "sub z19.h, z19.h, z28.h\n"
    "trn1 z5.h, z24.h, z0.h\n"
    "trn1 z4.h, z22.h, z18.h\n"
    "trn1 z3.h, z19.h, z0.h\n"
    "ld1rh { z21.h }, p0/Z, [%x[qp], %[offsetof_Requantize32_a_offset]]\n"
    "ld1rw { z2.s }, p0/Z, [%x[qp], %[offsetof_Requantize32_c_offset]]\n"
    "ld1rw { z1.s }, p0/Z, [%x[qp], %[offsetof_Requantize32_per_layer_mul]]\n"
    "cbz x19, 2f\n"
    "ld1w { z1.s }, p5/Z, [x19, x21, LSL #2]\n"
    "2:"  // Load mul: End
    "ldr x19, [%x[qp], %[offsetof_Requantize32_per_channel_right_shifts]]\n"
    "ld1rw { z0.s }, p0/Z, [%x[qp], %[offsetof_Requantize32_per_layer_right_shift]]\n"
    "cbz x19, 3f\n"
    "ld1w { z0.s }, p5/Z, [x19, x21, LSL #2]\n"
    "3:"  // Load right_shift: End
    "ldr x28, [%x[args], %[offsetof_Args_input_cols]]\n"
    "orr x21, x28, %x[ld_in_col], LSL #16\n"
    "orr x21, x22, x21, LSL #22\n"
    "ld1rw { z20.s }, p0/Z, [%x[qp], %[offsetof_Requantize32_minval]]\n"
    "ldr x27, [%x[args], %[offsetof_Args_inptr]]\n"
    "mov x20, #0x5\n"
    "add x19, x10, x11\n"
    "ld1rw { z19.s }, p0/Z, [%x[qp], %[offsetof_Requantize32_maxval]]\n"
    "mov x9, #0x0\n"
    "ldr x26, [%x[args], %[offsetof_Args_output_cols]]\n"
    "lsl x21, x21, #0x0\n"
    "sub x20, x20, x19\n"
    "mov x19, x27\n"
    "4:"  // Issue prefetches
    "subs x20, x20, #0x1\n"
    ".inst 0xf8b54a7c  // rprfm pldstrm, x21, [x19]\n"
    "add x19, x19, %x[ld_in_col]\n"
    "bgt 4b\n"
    "ldr x21, [%x[args], %[offsetof_Args_outptrs]]\n"
    "lsl x19, %x[ld_in_row], #0x0\n"
    "msub x27, x10, x19, x27\n"
    ".inst 0xc0042980  // mova za.d[x9, #0], { z12.d-z13.d }\n"
    "ldr x19, [%x[args], %[offsetof_Args_ld_out_cols]]\n"
    ".inst 0xc0042981  // mova za.d[x9, #1], { z12.d-z13.d }\n"
    "mov x25, #0x2\n"
    "ldr x20, [%x[args], %[offsetof_Args_pad_left]]\n"
    ".inst 0xc0042982  // mova za.d[x9, #2], { z12.d-z13.d }\n"
    "ldp x24, x23, [x21], #0x10\n"
    "ldp x22, x21, [x19], #0x10\n"
    "cbz x20, 6f\n"
    "cmp x20, x25\n"
    "csel x19, x20, x25, LT\n"
    "sub x20, x20, x19\n"
    "sub x25, x25, x19\n"
    "cbz x20, 6f\n"
    ".inst 0xc0062818  // mova { z24.d-z25.d }, za.d[x9, #0]\n"
    ".inst 0xc1a1a418  // sqdmulh { z24.s-z25.s }, { z24.s-z25.s }, z1.s\n"
    "and x25, x20, #0x1\n"
    ".inst 0xc1a0a238  // srshl { z24.s-z25.s }, { z24.s-z25.s }, z0.s\n"
    "add x20, x20, #0x1\n"
    "lsr x20, x20, #0x1\n"
    ".inst 0xc1a2a318  // add { z24.s-z25.s }, { z24.s-z25.s }, z2.s\n"
    "sub x26, x26, x20\n"
    ".inst 0xc1b3c698  // sclamp { z24.s-z25.s }, z20.s, z19.s\n"
    "5:"  // Left padding
    "subs x20, x20, #0x1\n"
    "st1b { z24.s }, p5, [x24]\n"
    "add x24, x24, x22\n"
    "st1b { z25.s }, p5, [x23]\n"
    "add x23, x23, x21\n"
    "bgt 5b\n"
    "6:"  // Left padding: End
    "adds XZR, x10, x11\n"
    "bne 11f\n"
    "cbz x25, 9f\n"
    "cmp x25, #0x1\n"
    "sub x28, x28, x25\n"
    "beq 8f\n"
    "7:"  // Unpadded: 2 priming loads
    "add x19, x27, %x[ld_in_row]\n"
    "ld1b { z14.s }, p5/Z, [x27]\n"
    "sub z14.h, z14.h, z21.h\n"
    "add x27, x27, %x[ld_in_col]\n"
    "ld1b { z18.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z18.h, z18.h, z21.h\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "ld1b { z15.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z15.h, z15.h, z21.h\n"
    "ld1b { z17.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z17.h, z17.h, z21.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    "ld1b { z16.s }, p5/Z, [x19]\n"
    "sub z16.h, z16.h, z21.h\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc16835c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z8.h\n"
    ".inst 0xc16635e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z6.h\n"
    "8:"  // Unpadded: 1 priming loads
    "add x19, x27, %x[ld_in_row]\n"
    "ld1b { z14.s }, p5/Z, [x27]\n"
    "sub z14.h, z14.h, z21.h\n"
    "add x27, x27, %x[ld_in_col]\n"
    "ld1b { z18.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z18.h, z18.h, z21.h\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "ld1b { z15.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z15.h, z15.h, z21.h\n"
    "ld1b { z17.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z17.h, z17.h, z21.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    "ld1b { z16.s }, p5/Z, [x19]\n"
    "sub z16.h, z16.h, z21.h\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc16735c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z7.h\n"
    ".inst 0xc16535e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z5.h\n"
    "9:"  // Unpadded: 0 priming loads
    "add x20, x27, %x[ld_in_row]\n"
    "ld1b { z14.s }, p5/Z, [x27]\n"
    "sub z14.h, z14.h, z21.h\n"
    "sub x28, x28, #0x2\n"
    "ld1b { z18.s }, p5/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row]\n"
    "sub z18.h, z18.h, z21.h\n"
    "sub x26, x26, #0x1\n"
    "ld1b { z15.s }, p5/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row]\n"
    "sub z15.h, z15.h, z21.h\n"
    "lsr x19, x28, #0x1\n"
    "ld1b { z17.s }, p5/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row]\n"
    "sub z17.h, z17.h, z21.h\n"
    "cmp x19, x26\n"
    "ld1b { z16.s }, p5/Z, [x20]\n"
    "sub z16.h, z16.h, z21.h\n"
    "csel x20, x19, x26, LT\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    "mov z16.d, z16.d\n"
    "add x27, x27, %x[ld_in_col]\n"
    "and x28, x28, #0x1\n"
    "sub x26, x26, x20\n"
    "cbz x20, 16f\n"
    "10:"  // Unpadded: Main loop
    ".inst 0xc16435c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z4.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    "subs x20, x20, #0x1\n"
    ".inst 0xc16835c9  // sdot za.s[x9, 1], { z14.h-z15.h }, z8.h\n"
    "ld1b { z14.s }, p5/Z, [x27]\n"
    "sub z14.h, z14.h, z21.h\n"
    "add x27, x27, %x[ld_in_col]\n"
    "ld1b { z18.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0xc16335e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z3.h\n"
    "sub z18.h, z18.h, z21.h\n"
    ".inst 0xc16635e9  // sdot za.s[x9, 1], { z15.h-z16.h }, z6.h\n"
    "ld1b { z15.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z15.h, z15.h, z21.h\n"
    "ld1b { z17.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z17.h, z17.h, z21.h\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "ld1b { z16.s }, p5/Z, [x19]\n"
    "sub z16.h, z16.h, z21.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    ".inst 0xc0062818  // mova { z24.d-z25.d }, za.d[x9, #0]\n"
    "add x9, x9, #0x1\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc16735c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z7.h\n"
    ".inst 0xc1a1a418  // sqdmulh { z24.s-z25.s }, { z24.s-z25.s }, z1.s\n"
    "ld1b { z14.s }, p5/Z, [x27]\n"
    ".inst 0xc16535e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z5.h\n"
    ".inst 0xc1a0a238  // srshl { z24.s-z25.s }, { z24.s-z25.s }, z0.s\n"
    "ld1b { z18.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0xc1a2a318  // add { z24.s-z25.s }, { z24.s-z25.s }, z2.s\n"
    "ld1b { z15.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z14.h, z14.h, z21.h\n"
    "sub z18.h, z18.h, z21.h\n"
    "ld1b { z17.s }, p5/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z15.h, z15.h, z21.h\n"
    "sub z17.h, z17.h, z21.h\n"
    "ld1b { z16.s }, p5/Z, [x19]\n"
    "sub z16.h, z16.h, z21.h\n"
    ".inst 0xc1b3c698  // sclamp { z24.s-z25.s }, z20.s, z19.s\n"
    "add x27, x27, %x[ld_in_col]\n"
    "st1b { z24.s }, p5, [x24]\n"
    "add x24, x24, x22\n"
    ".inst 0xc0042982  // mova za.d[x9, #2], { z12.d-z13.d }\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "st1b { z25.s }, p5, [x23]\n"
    "add x23, x23, x21\n"
    "trn1 z15.h, z15.h, z17.h\n"
    "mov z16.d, z16.d\n"
    "bgt 10b\n"
    "b 16f\n"
    "11:"  // Padded
    "cbz x25, 14f\n"
    "cmp x25, #0x1\n"
    "sub x28, x28, x25\n"
    "beq 13f\n"
    "12:"  // Padded: 2 priming loads
    "mov x12, #0x0\n"
    ".inst 0x25305504  // psel p4.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z14.s }, p4/Z, [x27]\n"
    "sub z14.h, p4/M, z14.h, z21.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    ".inst 0x25705503  // psel p3.s, p5.s/Z, p8.s[w12, #1]\n"
    "ld1b { z18.s }, p3/Z, [x19]\n"
    "sub z18.h, p3/M, z18.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25b05502  // psel p2.s, p5.s/Z, p8.s[w12, #2]\n"
    "ld1b { z15.s }, p2/Z, [x19]\n"
    "sub z15.h, p2/M, z15.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25f05501  // psel p1.s, p5.s/Z, p8.s[w12, #3]\n"
    "ld1b { z17.s }, p1/Z, [x19]\n"
    "sub z17.h, p1/M, z17.h, z21.h\n"
    "mov x12, #0x4\n"
    "add x19, x19, %x[ld_in_row]\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    ".inst 0x25305500  // psel p0.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z16.s }, p0/Z, [x19]\n"
    "sub z16.h, p0/M, z16.h, z21.h\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc16835c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z8.h\n"
    "add x27, x27, %x[ld_in_col]\n"
    ".inst 0xc16635e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z6.h\n"
    "13:"  // Padded: 1 priming loads
    "mov x12, #0x0\n"
    ".inst 0x25305504  // psel p4.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z14.s }, p4/Z, [x27]\n"
    "sub z14.h, p4/M, z14.h, z21.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    ".inst 0x25705503  // psel p3.s, p5.s/Z, p8.s[w12, #1]\n"
    "ld1b { z18.s }, p3/Z, [x19]\n"
    "sub z18.h, p3/M, z18.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25b05502  // psel p2.s, p5.s/Z, p8.s[w12, #2]\n"
    "ld1b { z15.s }, p2/Z, [x19]\n"
    "sub z15.h, p2/M, z15.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25f05501  // psel p1.s, p5.s/Z, p8.s[w12, #3]\n"
    "ld1b { z17.s }, p1/Z, [x19]\n"
    "sub z17.h, p1/M, z17.h, z21.h\n"
    "mov x12, #0x4\n"
    "add x19, x19, %x[ld_in_row]\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    ".inst 0x25305500  // psel p0.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z16.s }, p0/Z, [x19]\n"
    "sub z16.h, p0/M, z16.h, z21.h\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc16735c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z7.h\n"
    "add x27, x27, %x[ld_in_col]\n"
    ".inst 0xc16535e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z5.h\n"
    "14:"  // Padded: 0 priming loads
    "mov x12, #0x0\n"
    ".inst 0x25305504  // psel p4.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z14.s }, p4/Z, [x27]\n"
    "sub z14.h, p4/M, z14.h, z21.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    ".inst 0x25705503  // psel p3.s, p5.s/Z, p8.s[w12, #1]\n"
    "ld1b { z18.s }, p3/Z, [x19]\n"
    "sub z18.h, p3/M, z18.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25b05502  // psel p2.s, p5.s/Z, p8.s[w12, #2]\n"
    "ld1b { z15.s }, p2/Z, [x19]\n"
    "sub z15.h, p2/M, z15.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25f05501  // psel p1.s, p5.s/Z, p8.s[w12, #3]\n"
    "ld1b { z17.s }, p1/Z, [x19]\n"
    "sub z17.h, p1/M, z17.h, z21.h\n"
    "mov x12, #0x4\n"
    "add x19, x19, %x[ld_in_row]\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    ".inst 0x25305500  // psel p0.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z16.s }, p0/Z, [x19]\n"
    "sub z16.h, p0/M, z16.h, z21.h\n"
    "sub x28, x28, #0x2\n"
    "sub x26, x26, #0x1\n"
    "lsr x19, x28, #0x1\n"
    "mov z16.d, z16.d\n"
    "cmp x19, x26\n"
    "csel x20, x19, x26, LT\n"
    "add x27, x27, %x[ld_in_col]\n"
    "and x28, x28, #0x1\n"
    "sub x26, x26, x20\n"
    "cbz x20, 16f\n"
    "15:"  // Padded: Main loop
    ".inst 0xc16435c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z4.h\n"
    "mov x12, #0x0\n"
    ".inst 0x25305504  // psel p4.s, p5.s/Z, p8.s[w12]\n"
    ".inst 0xc16835c9  // sdot za.s[x9, 1], { z14.h-z15.h }, z8.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    ".inst 0x25705503  // psel p3.s, p5.s/Z, p8.s[w12, #1]\n"
    "ld1b { z14.s }, p4/Z, [x27]\n"
    "ld1b { z18.s }, p3/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25b05502  // psel p2.s, p5.s/Z, p8.s[w12, #2]\n"
    ".inst 0xc16335e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z3.h\n"
    ".inst 0xc16635e9  // sdot za.s[x9, 1], { z15.h-z16.h }, z6.h\n"
    "ld1b { z15.s }, p2/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25f05501  // psel p1.s, p5.s/Z, p8.s[w12, #3]\n"
    "ld1b { z17.s }, p1/Z, [x19]\n"
    "mov x12, #0x4\n"
    "add x19, x19, %x[ld_in_row]\n"
    "sub z14.h, p4/M, z14.h, z21.h\n"
    ".inst 0x25305500  // psel p0.s, p5.s/Z, p8.s[w12]\n"
    "sub z18.h, p3/M, z18.h, z21.h\n"
    "sub z15.h, p2/M, z15.h, z21.h\n"
    "ld1b { z16.s }, p0/Z, [x19]\n"
    "sub z17.h, p1/M, z17.h, z21.h\n"
    "sub z16.h, p0/M, z16.h, z21.h\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "add x27, x27, %x[ld_in_col]\n"
    "trn1 z15.h, z15.h, z17.h\n"
    ".inst 0xc0062818  // mova { z24.d-z25.d }, za.d[x9, #0]\n"
    "add x9, x9, #0x1\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc16735c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z7.h\n"
    ".inst 0xc1a1a418  // sqdmulh { z24.s-z25.s }, { z24.s-z25.s }, z1.s\n"
    "mov x12, #0x0\n"
    ".inst 0x25305504  // psel p4.s, p5.s/Z, p8.s[w12]\n"
    "add x19, x27, %x[ld_in_row]\n"
    "ld1b { z14.s }, p4/Z, [x27]\n"
    ".inst 0xc16535e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z5.h\n"
    ".inst 0x25705503  // psel p3.s, p5.s/Z, p8.s[w12, #1]\n"
    "ld1b { z18.s }, p3/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0xc1a0a238  // srshl { z24.s-z25.s }, { z24.s-z25.s }, z0.s\n"
    ".inst 0x25b05502  // psel p2.s, p5.s/Z, p8.s[w12, #2]\n"
    "ld1b { z15.s }, p2/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0xc1a2a318  // add { z24.s-z25.s }, { z24.s-z25.s }, z2.s\n"
    ".inst 0x25f05501  // psel p1.s, p5.s/Z, p8.s[w12, #3]\n"
    "mov x12, #0x4\n"
    "ld1b { z17.s }, p1/Z, [x19]\n"
    "sub z14.h, p4/M, z14.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25305500  // psel p0.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z16.s }, p0/Z, [x19]\n"
    "sub z18.h, p3/M, z18.h, z21.h\n"
    "sub z15.h, p2/M, z15.h, z21.h\n"
    "sub z17.h, p1/M, z17.h, z21.h\n"
    "subs x20, x20, #0x1\n"
    ".inst 0xc0042982  // mova za.d[x9, #2], { z12.d-z13.d }\n"
    "sub z16.h, p0/M, z16.h, z21.h\n"
    ".inst 0xc1b3c698  // sclamp { z24.s-z25.s }, z20.s, z19.s\n"
    "st1b { z24.s }, p5, [x24]\n"
    "add x24, x24, x22\n"
    "st1b { z25.s }, p5, [x23]\n"
    "add x23, x23, x21\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    "mov z16.d, z16.d\n"
    "add x27, x27, %x[ld_in_col]\n"
    "bgt 15b\n"
    "16:"  // Main loop tail
    ".inst 0xc16435c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z4.h\n"
    "mov x12, #0x0\n"
    ".inst 0x25305504  // psel p4.s, p5.s/Z, p8.s[w12]\n"
    ".inst 0xc16335e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z3.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    ".inst 0x25705503  // psel p3.s, p5.s/Z, p8.s[w12, #1]\n"
    ".inst 0xc16835c9  // sdot za.s[x9, 1], { z14.h-z15.h }, z8.h\n"
    "ld1b { z14.s }, p4/Z, [x27]\n"
    ".inst 0x25b05502  // psel p2.s, p5.s/Z, p8.s[w12, #2]\n"
    ".inst 0x25f05501  // psel p1.s, p5.s/Z, p8.s[w12, #3]\n"
    "ld1b { z18.s }, p3/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0xc16635e9  // sdot za.s[x9, 1], { z15.h-z16.h }, z6.h\n"
    "mov x12, #0x4\n"
    ".inst 0xc0062818  // mova { z24.d-z25.d }, za.d[x9, #0]\n"
    "ld1b { z15.s }, p2/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0xc1a1a418  // sqdmulh { z24.s-z25.s }, { z24.s-z25.s }, z1.s\n"
    "ld1b { z17.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25305500  // psel p0.s, p5.s/Z, p8.s[w12]\n"
    "sub z14.h, p4/M, z14.h, z21.h\n"
    "sub z18.h, p3/M, z18.h, z21.h\n"
    "sub z15.h, p2/M, z15.h, z21.h\n"
    "ld1b { z16.s }, p0/Z, [x19]\n"
    "add x9, x9, #0x1\n"
    "sub z17.h, p1/M, z17.h, z21.h\n"
    "sub z16.h, p0/M, z16.h, z21.h\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "add x27, x27, %x[ld_in_col]\n"
    ".inst 0xc1a0a238  // srshl { z24.s-z25.s }, { z24.s-z25.s }, z0.s\n"
    "trn1 z15.h, z15.h, z17.h\n"
    ".inst 0xc1a2a318  // add { z24.s-z25.s }, { z24.s-z25.s }, z2.s\n"
    ".inst 0xc16735c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z7.h\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc1b3c698  // sclamp { z24.s-z25.s }, z20.s, z19.s\n"
    "st1b { z24.s }, p5, [x24]\n"
    "add x24, x24, x22\n"
    "st1b { z25.s }, p5, [x23]\n"
    "add x23, x23, x21\n"
    ".inst 0xc0042982  // mova za.d[x9, #2], { z12.d-z13.d }\n"
    ".inst 0xc16535e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z5.h\n"
    "cbz x28, 17f\n"  // Skip remainder inputs
    "mov x12, #0x0\n"
    ".inst 0x25305504  // psel p4.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z14.s }, p4/Z, [x27]\n"
    "sub z14.h, p4/M, z14.h, z21.h\n"
    "add x19, x27, %x[ld_in_row]\n"
    ".inst 0x25705503  // psel p3.s, p5.s/Z, p8.s[w12, #1]\n"
    "ld1b { z18.s }, p3/Z, [x19]\n"
    "sub z18.h, p3/M, z18.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25b05502  // psel p2.s, p5.s/Z, p8.s[w12, #2]\n"
    "ld1b { z15.s }, p2/Z, [x19]\n"
    "sub z15.h, p2/M, z15.h, z21.h\n"
    "add x19, x19, %x[ld_in_row]\n"
    ".inst 0x25f05501  // psel p1.s, p5.s/Z, p8.s[w12, #3]\n"
    "ld1b { z17.s }, p1/Z, [x19]\n"
    "sub z17.h, p1/M, z17.h, z21.h\n"
    "mov x12, #0x4\n"
    "add x19, x19, %x[ld_in_row]\n"
    "trn1 z14.h, z14.h, z18.h\n"
    "trn1 z15.h, z15.h, z17.h\n"
    ".inst 0x25305500  // psel p0.s, p5.s/Z, p8.s[w12]\n"
    "ld1b { z16.s }, p0/Z, [x19]\n"
    "sub z16.h, p0/M, z16.h, z21.h\n"
    "mov z16.d, z16.d\n"
    ".inst 0xc16435c8  // sdot za.s[x9, 0], { z14.h-z15.h }, z4.h\n"
    "sub x26, x26, #0x1\n"
    ".inst 0xc16335e8  // sdot za.s[x9, 0], { z15.h-z16.h }, z3.h\n"
    ".inst 0xc0062818  // mova { z24.d-z25.d }, za.d[x9, #0]\n"
    ".inst 0xc1a1a418  // sqdmulh { z24.s-z25.s }, { z24.s-z25.s }, z1.s\n"
    ".inst 0xc1a0a238  // srshl { z24.s-z25.s }, { z24.s-z25.s }, z0.s\n"
    ".inst 0xc16835c9  // sdot za.s[x9, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xc1a2a318  // add { z24.s-z25.s }, { z24.s-z25.s }, z2.s\n"
    ".inst 0xc16635e9  // sdot za.s[x9, 1], { z15.h-z16.h }, z6.h\n"
    "add x9, x9, #0x1\n"
    ".inst 0xc1b3c698  // sclamp { z24.s-z25.s }, z20.s, z19.s\n"
    "st1b { z24.s }, p5, [x24]\n"
    "add x24, x24, x22\n"
    ".inst 0xc0042982  // mova za.d[x9, #2], { z12.d-z13.d }\n"
    "st1b { z25.s }, p5, [x23]\n"
    "add x23, x23, x21\n"
    "17:"  // Tail input: End
    "cbz x26, 19f\n"
    "18:"  // Right padding loop
    ".inst 0xc0062818  // mova { z24.d-z25.d }, za.d[x9, #0]\n"
    ".inst 0xc1a1a418  // sqdmulh { z24.s-z25.s }, { z24.s-z25.s }, z1.s\n"
    "add x9, x9, #0x1\n"
    ".inst 0xc1a0a238  // srshl { z24.s-z25.s }, { z24.s-z25.s }, z0.s\n"
    "subs x26, x26, #0x1\n"
    ".inst 0xc0042982  // mova za.d[x9, #2], { z12.d-z13.d }\n"
    ".inst 0xc1a2a318  // add { z24.s-z25.s }, { z24.s-z25.s }, z2.s\n"
    ".inst 0xc1b3c698  // sclamp { z24.s-z25.s }, z20.s, z19.s\n"
    "st1b { z24.s }, p5, [x24]\n"
    "add x24, x24, x22\n"
    "st1b { z25.s }, p5, [x23]\n"
    "add x23, x23, x21\n"
    "bgt 18b\n"
    "19:"  // End
    ".inst 0xd503467f  // SMSTOP\n"
    :
    : [args] "r" (&args), [ld_in_col] "r" (ld_in_col), [ld_in_row] "r" (ld_in_row), [offsetof_Args_inptr] "I" (offsetof(Args, inptr)), [offsetof_Args_input_cols] "I" (offsetof(Args, input_cols)), [offsetof_Args_ld_out_cols] "I" (offsetof(Args, ld_out_cols)), [offsetof_Args_n] "I" (offsetof(Args, n)), [offsetof_Args_n_channels] "I" (offsetof(Args, n_channels)), [offsetof_Args_outptrs] "I" (offsetof(Args, outptrs)), [offsetof_Args_output_cols] "I" (offsetof(Args, output_cols)), [offsetof_Args_pad_bottom] "I" (offsetof(Args, pad_bottom)), [offsetof_Args_pad_left] "I" (offsetof(Args, pad_left)), [offsetof_Args_pad_top] "I" (offsetof(Args, pad_top)), [offsetof_Args_weights] "I" (offsetof(Args, weights)), [offsetof_Requantize32_a_offset] "I" (offsetof(arm_gemm::Requantize32, a_offset)), [offsetof_Requantize32_b_offset] "I" (offsetof(arm_gemm::Requantize32, b_offset)), [offsetof_Requantize32_bias] "I" (offsetof(arm_gemm::Requantize32, bias)), [offsetof_Requantize32_c_offset] "I" (offsetof(arm_gemm::Requantize32, c_offset)), [offsetof_Requantize32_maxval] "I" (offsetof(arm_gemm::Requantize32, maxval)), [offsetof_Requantize32_minval] "I" (offsetof(arm_gemm::Requantize32, minval)), [offsetof_Requantize32_per_channel_muls] "I" (offsetof(arm_gemm::Requantize32, per_channel_muls)), [offsetof_Requantize32_per_channel_right_shifts] "I" (offsetof(arm_gemm::Requantize32, per_channel_right_shifts)), [offsetof_Requantize32_per_layer_mul] "I" (offsetof(arm_gemm::Requantize32, per_layer_mul)), [offsetof_Requantize32_per_layer_right_shift] "I" (offsetof(arm_gemm::Requantize32, per_layer_right_shift)), [qp] "r" (&qp)
    : "cc", "memory", "p0", "p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9", "p10", "p11", "p12", "p13", "p14", "p15", "x9", "x10", "x11", "x12", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
  );
}

}  // namespace depthwise
}  // namespace arm_conv

#endif // defined(ARM_COMPUTE_ENABLE_SME2)
