/*
 * Copyright (c) 2022 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#if defined(ARM_COMPUTE_ENABLE_SME2)

#include <algorithm>
#include <cstddef>

namespace arm_conv {
namespace depthwise {

void sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za_impl(
  const float *inptr,
  size_t ld_in_row,
  size_t ld_in_col,
  size_t ld_in_vl,
  unsigned int pad_top,
  unsigned int valid_input_rows,
  unsigned int pad_left,
  unsigned int valid_input_cols,
  const float *weights,
  const float *bias,
  float **outptrs,
  const size_t *outlds,
  const size_t *outvllds,
  unsigned int output_cols,
  unsigned int start_channel,
  unsigned int valid_channels,
  float act_min,
  float act_max
)
{
  struct Args
  {
    const float *inptr;
    size_t ld_in_vl;
    long unsigned int pad_top, pad_bottom, pad_left;
    const float *weights;
    const float *bias;
    long unsigned int input_cols, output_cols;
    float **outptrs;
    const size_t *ld_out_cols;
    const size_t *ld_out_vls;
    long unsigned int current_channel, n_channels;
    float clamp_min, clamp_max;
  };

  Args args = { inptr, ld_in_vl, pad_top, 8u - std::min(8u, pad_top + valid_input_rows), pad_left, weights, bias, valid_input_cols, output_cols, outptrs, outlds, outvllds, start_channel, valid_channels, act_min, act_max };

  __asm__ __volatile__(
    "ldr x6, [%x[args], %[offsetof_Args_pad_bottom]]\n"
    "mov x19, #0x8\n"
    ".inst 0xd503477f  // SMSTART ZA\n"
    "sub x19, x19, x6\n"
    "ldr x5, [%x[args], %[offsetof_Args_pad_top]]\n"
    "ptrue p2.b\n"
    ".inst 0x25207812  // ptrue pn10.b\n"
    "ld1rw { z26.s }, p2/Z, [%x[args], %[offsetof_Args_clamp_min]]\n"
    "ldr x7, [%x[args], %[offsetof_Args_n_channels]]\n"
    "whilelt p1.s, XZR, x7\n"
    "whilelt p9.s, XZR, x19\n"
    "ld1rw { z31.s }, p2/Z, [%x[args], %[offsetof_Args_clamp_max]]\n"
    "whilelt p8.s, XZR, x5\n"
    "addvl SP, SP, #-30\n"
    "ldr x17, [%x[args], %[offsetof_Args_current_channel]]\n"
    "eor p8.b, p2/Z, p8.b, p9.b\n"
    "1:"  // Channel loop
    "ldr x19, [%x[args], %[offsetof_Args_bias]]\n"
    "fmov z24.s, #0x0\n"
    "cbz x19, 2f\n"
    "ld1w { z24.s }, p1/Z, [x19, x17, LSL #2]\n"
    "2:"  // Load bias: Done
    "ldr x19, [%x[args], %[offsetof_Args_weights]]\n"
    "mov x20, x19\n"
    "ld1w { z18.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "ld1w { z11.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "fmov z4.s, #0x0\n"
    "incb x19\n"
    "ld1w { z3.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x658aaa45  // bfcvt z5.h, p2/M, z18.s\n"
    ".inst 0x658aa966  // bfcvt z6.h, p2/M, z11.s\n"
    "ld1w { z17.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "addvl x23, SP, #30\n"
    ".inst 0x648aaa44  // bfcvtnt z4.h, p2/M, z18.s\n"
    "ld1w { z16.s }, p2/Z, [x20]\n"
    "mov x20, x19\n"
    ".inst 0x658aa867  // bfcvt z7.h, p2/M, z3.s\n"
    "addvl x23, x23, #-6\n"
    "ld1w { z18.s }, p2/Z, [x20]\n"
    ".inst 0x658aaa28  // bfcvt z8.h, p2/M, z17.s\n"
    "incb x20, ALL, MUL #5\n"
    "st1h { z4.h }, p2, [x23]\n"
    ".inst 0x648aa965  // bfcvtnt z5.h, p2/M, z11.s\n"
    "ld1w { z11.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "fmov z4.s, #0x0\n"
    "st1h { z5.h }, p2, [x23, #1, MUL VL]\n"
    ".inst 0x648aa866  // bfcvtnt z6.h, p2/M, z3.s\n"
    "ld1w { z3.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x658aaa45  // bfcvt z5.h, p2/M, z18.s\n"
    ".inst 0x648aaa27  // bfcvtnt z7.h, p2/M, z17.s\n"
    "incb x19\n"
    "ld1w { z17.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "st1h { z6.h }, p2, [x23, #2, MUL VL]\n"
    ".inst 0x648aaa08  // bfcvtnt z8.h, p2/M, z16.s\n"
    ".inst 0x658aaa09  // bfcvt z9.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p2/Z, [x20]\n"
    ".inst 0x658aa966  // bfcvt z6.h, p2/M, z11.s\n"
    "mov x20, x19\n"
    "st1h { z7.h }, p2, [x23, #3, MUL VL]\n"
    ".inst 0x648aaa44  // bfcvtnt z4.h, p2/M, z18.s\n"
    ".inst 0x658aa867  // bfcvt z7.h, p2/M, z3.s\n"
    "ld1w { z18.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "st1h { z8.h }, p2, [x23, #4, MUL VL]\n"
    ".inst 0x648aa965  // bfcvtnt z5.h, p2/M, z11.s\n"
    ".inst 0x658aaa28  // bfcvt z8.h, p2/M, z17.s\n"
    "incb x19\n"
    "st1h { z9.h }, p2, [x23, #5, MUL VL]\n"
    "addvl x23, x23, #-6\n"
    "ld1w { z11.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "st1h { z4.h }, p2, [x23]\n"
    "fmov z4.s, #0x0\n"
    ".inst 0x648aa866  // bfcvtnt z6.h, p2/M, z3.s\n"
    "ldr x16, [%x[args], %[offsetof_Args_input_cols]]\n"
    "st1h { z5.h }, p2, [x23, #1, MUL VL]\n"
    "ld1w { z3.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x658aaa45  // bfcvt z5.h, p2/M, z18.s\n"
    "st1h { z6.h }, p2, [x23, #2, MUL VL]\n"
    ".inst 0x648aaa27  // bfcvtnt z7.h, p2/M, z17.s\n"
    "ld1w { z17.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x658aa966  // bfcvt z6.h, p2/M, z11.s\n"
    ".inst 0x648aaa08  // bfcvtnt z8.h, p2/M, z16.s\n"
    "st1h { z7.h }, p2, [x23, #3, MUL VL]\n"
    "ldr x15, [%x[args], %[offsetof_Args_inptr]]\n"
    ".inst 0x658aaa09  // bfcvt z9.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p2/Z, [x20]\n"
    "mov x20, x19\n"
    ".inst 0x648aaa44  // bfcvtnt z4.h, p2/M, z18.s\n"
    ".inst 0x658aa867  // bfcvt z7.h, p2/M, z3.s\n"
    "ld1w { z18.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "st1h { z8.h }, p2, [x23, #4, MUL VL]\n"
    "st1h { z9.h }, p2, [x23, #5, MUL VL]\n"
    "addvl x23, x23, #-6\n"
    ".inst 0x648aa965  // bfcvtnt z5.h, p2/M, z11.s\n"
    ".inst 0x658aaa28  // bfcvt z8.h, p2/M, z17.s\n"
    "ld1w { z11.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "st1h { z4.h }, p2, [x23]\n"
    ".inst 0x648aa866  // bfcvtnt z6.h, p2/M, z3.s\n"
    "ld1w { z3.s }, p2/Z, [x20]\n"
    "fmov z4.s, #0x0\n"
    "st1h { z5.h }, p2, [x23, #1, MUL VL]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x658aaa45  // bfcvt z5.h, p2/M, z18.s\n"
    "st1h { z6.h }, p2, [x23, #2, MUL VL]\n"
    ".inst 0x648aaa27  // bfcvtnt z7.h, p2/M, z17.s\n"
    "incb x19\n"
    "ld1w { z17.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x658aa966  // bfcvt z6.h, p2/M, z11.s\n"
    "st1h { z7.h }, p2, [x23, #3, MUL VL]\n"
    ".inst 0x648aaa08  // bfcvtnt z8.h, p2/M, z16.s\n"
    ".inst 0x658aaa09  // bfcvt z9.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p2/Z, [x20]\n"
    "mov x20, x19\n"
    ".inst 0x658aa867  // bfcvt z7.h, p2/M, z3.s\n"
    ".inst 0x648aaa44  // bfcvtnt z4.h, p2/M, z18.s\n"
    "ld1w { z18.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x648aa965  // bfcvtnt z5.h, p2/M, z11.s\n"
    "ld1w { z11.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    "st1h { z8.h }, p2, [x23, #4, MUL VL]\n"
    ".inst 0x648aa866  // bfcvtnt z6.h, p2/M, z3.s\n"
    ".inst 0x658aaa28  // bfcvt z8.h, p2/M, z17.s\n"
    "ld1w { z3.s }, p2/Z, [x20]\n"
    "incb x20, ALL, MUL #5\n"
    ".inst 0x648aaa27  // bfcvtnt z7.h, p2/M, z17.s\n"
    "ld1w { z17.s }, p2/Z, [x20]\n"
    "st1h { z9.h }, p2, [x23, #5, MUL VL]\n"
    "addvl x23, x23, #-6\n"
    "st1h { z4.h }, p2, [x23]\n"
    ".inst 0x648aaa08  // bfcvtnt z8.h, p2/M, z16.s\n"
    "incb x20, ALL, MUL #5\n"
    "fmov z4.s, #0x0\n"
    "st1h { z5.h }, p2, [x23, #1, MUL VL]\n"
    ".inst 0x658aaa45  // bfcvt z5.h, p2/M, z18.s\n"
    ".inst 0x658aaa09  // bfcvt z9.h, p2/M, z16.s\n"
    "sub x19, x16, #0x1\n"
    "st1h { z6.h }, p2, [x23, #2, MUL VL]\n"
    ".inst 0x658aa966  // bfcvt z6.h, p2/M, z11.s\n"
    "ld1w { z16.s }, p2/Z, [x20]\n"
    "orr x22, x19, %x[ld_in_col], LSL #18\n"
    "st1h { z7.h }, p2, [x23, #3, MUL VL]\n"
    ".inst 0x658aa867  // bfcvt z7.h, p2/M, z3.s\n"
    "orr x22, x7, x22, LSL #20\n"
    "mov x21, #0x8\n"
    "st1h { z8.h }, p2, [x23, #4, MUL VL]\n"
    ".inst 0x658aaa28  // bfcvt z8.h, p2/M, z17.s\n"
    "add x20, x5, x6\n"
    "lsl x19, %x[ld_in_row], #0x2\n"
    "st1h { z9.h }, p2, [x23, #5, MUL VL]\n"
    "addvl x23, x23, #-6\n"
    "mov z25.d, z24.d\n"
    ".inst 0x648aaa44  // bfcvtnt z4.h, p2/M, z18.s\n"
    "st1h { z4.h }, p2, [x23]\n"
    ".inst 0x648aa965  // bfcvtnt z5.h, p2/M, z11.s\n"
    ".inst 0x648aa866  // bfcvtnt z6.h, p2/M, z3.s\n"
    "mov x11, #0x0\n"
    "st1h { z5.h }, p2, [x23, #1, MUL VL]\n"
    ".inst 0x648aaa27  // bfcvtnt z7.h, p2/M, z17.s\n"
    ".inst 0x648aaa08  // bfcvtnt z8.h, p2/M, z16.s\n"
    "mov x8, #0x8\n"
    "st1h { z6.h }, p2, [x23, #2, MUL VL]\n"
    ".inst 0x658aaa09  // bfcvt z9.h, p2/M, z16.s\n"
    "ldr x14, [%x[args], %[offsetof_Args_output_cols]]\n"
    "lsl x22, x22, #0x2\n"
    "st1h { z7.h }, p2, [x23, #3, MUL VL]\n"
    "sub x21, x21, x20\n"
    "madd x19, x19, x5, x15\n"
    "st1h { z8.h }, p2, [x23, #4, MUL VL]\n"
    "st1h { z9.h }, p2, [x23, #5, MUL VL]\n"
    "3:"  // Issue prefetches
    "subs x21, x21, #0x1\n"
    ".inst 0xf8b64a7c  // rprfm pldstrm, x22, [x19]\n"
    "add x19, x19, %x[ld_in_col], LSL #2\n"
    "bgt 3b\n"
    "ldr x24, [%x[args], %[offsetof_Args_outptrs]]\n"
    "lsl x19, %x[ld_in_row], #0x2\n"
    "msub x15, x5, x19, x15\n"
    ".inst 0xc0046b00  // mova za.d[x11, #0], { z24.d-z25.d }\n"
    "ldr x19, [%x[args], %[offsetof_Args_ld_out_cols]]\n"
    ".inst 0xc0046b01  // mova za.d[x11, #1], { z24.d-z25.d }\n"
    "mov x21, #0x4\n"
    "ldp x13, x0, [x24], #0x10\n"
    ".inst 0xc0046b02  // mova za.d[x11, #2], { z24.d-z25.d }\n"
    "ldp x10, x9, [x19], #0x10\n"
    ".inst 0xc0046b03  // mova za.d[x11, #3], { z24.d-z25.d }\n"
    "ldr x20, [%x[args], %[offsetof_Args_pad_left]]\n"
    ".inst 0xc0046b04  // mova za.d[x11, #4], { z24.d-z25.d }\n"
    "ldp x28, x27, [x24], #0x10\n"
    ".inst 0xc0046b05  // mova za.d[x11, #5], { z24.d-z25.d }\n"
    "ldp x26, x25, [x19], #0x10\n"
    ".inst 0xc0046b06  // mova za.d[x11, #6], { z24.d-z25.d }\n"
    ".inst 0xc0046b07  // mova za.d[x11, #7], { z24.d-z25.d }\n"
    ".inst 0xc0040b00  // mova za.d[x8, #0], { z24.d-z25.d }\n"
    ".inst 0xc0040b01  // mova za.d[x8, #1], { z24.d-z25.d }\n"
    "cbz x20, 5f\n"
    "cmp x20, x21\n"
    "csel x19, x20, x21, LT\n"
    "sub x20, x20, x19\n"
    "sub x21, x21, x19\n"
    "cbz x20, 5f\n"
    ".inst 0xc0066800  // mova { z0.d-z1.d }, za.d[x11, #0]\n"
    "sub x14, x14, x20\n"
    ".inst 0xc0066822  // mova { z2.d-z3.d }, za.d[x11, #1]\n"
    ".inst 0xc1bfcb40  // fclamp { z0.s-z3.s }, z26.s, z31.s\n"
    "4:"  // Left padding
    "subs x20, x20, #0x1\n"
    "st1w { z0.s }, p1, [x13]\n"
    "add x13, x13, x10, LSL #2\n"
    "st1w { z2.s }, p1, [x0]\n"
    "add x0, x0, x9, LSL #2\n"
    "st1w { z1.s }, p1, [x28]\n"
    "add x28, x28, x26, LSL #2\n"
    "st1w { z3.s }, p1, [x27]\n"
    "add x27, x27, x25, LSL #2\n"
    "bgt 4b\n"
    "5:"  // Left padding: End
    "adds XZR, x5, x6\n"
    "bne 12f\n"
    "cbz x21, 10f\n"
    "cmp x21, #0x1\n"
    "sub x16, x16, x21\n"
    "beq 9f\n"
    "cmp x21, #0x2\n"
    "beq 8f\n"
    "cmp x21, #0x3\n"
    "beq 7f\n"
    "6:"  // Unpadded: 4 priming loads
    "add x20, x15, %x[ld_in_row], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "addvl x19, SP, #24\n"
    "ld1w { z16.s }, p1/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p1/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    "ld1w { z16.s }, p1/Z, [x20]\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    "7:"  // Unpadded: 3 priming loads
    "add x21, x15, %x[ld_in_row], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "addvl x20, SP, #18\n"
    "ld1w { z16.s }, p1/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "addvl x19, SP, #24\n"
    "ld1w { z16.s }, p1/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p1/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    "ld1w { z16.s }, p1/Z, [x21]\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    "8:"  // Unpadded: 2 priming loads
    "add x22, x15, %x[ld_in_row], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "addvl x21, SP, #12\n"
    "ld1w { z16.s }, p1/Z, [x22]\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "addvl x20, SP, #18\n"
    "ld1w { z16.s }, p1/Z, [x22]\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "addvl x19, SP, #24\n"
    "ld1w { z16.s }, p1/Z, [x22]\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x22]\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x22]\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    ".inst 0xa0402aa4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x21]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p1/Z, [x22]\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    ".inst 0xa0412aa6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x21, #0x2, MUL VL]\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    "ld1w { z16.s }, p1/Z, [x22]\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc1257194  // bfdot za.s[x11, 4], { z12.h-z13.h }, z5.h\n"
    ".inst 0xa0422aa8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x21, #0x4, MUL VL]\n"
    ".inst 0xc1247195  // bfdot za.s[x11, 5], { z12.h-z13.h }, z4.h\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12771b4  // bfdot za.s[x11, 4], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b5  // bfdot za.s[x11, 5], { z13.h-z14.h }, z6.h\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d4  // bfdot za.s[x11, 4], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d5  // bfdot za.s[x11, 5], { z14.h-z15.h }, z8.h\n"
    "9:"  // Unpadded: 1 priming loads
    "add x23, x15, %x[ld_in_row], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "addvl x22, SP, #6\n"
    "ld1w { z16.s }, p1/Z, [x23]\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "addvl x21, SP, #12\n"
    "ld1w { z16.s }, p1/Z, [x23]\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "addvl x20, SP, #18\n"
    "ld1w { z16.s }, p1/Z, [x23]\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "addvl x19, SP, #24\n"
    "ld1w { z16.s }, p1/Z, [x23]\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x23]\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    ".inst 0xa0402ac4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x22]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p1/Z, [x23]\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402aa4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x21]\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    ".inst 0xa0412ac6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x22, #0x2, MUL VL]\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    "ld1w { z16.s }, p1/Z, [x23]\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412aa6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x21, #0x2, MUL VL]\n"
    ".inst 0xc1257194  // bfdot za.s[x11, 4], { z12.h-z13.h }, z5.h\n"
    ".inst 0xa0422ac8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x22, #0x4, MUL VL]\n"
    ".inst 0xc1247195  // bfdot za.s[x11, 5], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422aa8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x21, #0x4, MUL VL]\n"
    ".inst 0xc1257196  // bfdot za.s[x11, 6], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1247197  // bfdot za.s[x11, 7], { z12.h-z13.h }, z4.h\n"
    ".inst 0xc12771b4  // bfdot za.s[x11, 4], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b5  // bfdot za.s[x11, 5], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12771b6  // bfdot za.s[x11, 6], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b7  // bfdot za.s[x11, 7], { z13.h-z14.h }, z6.h\n"
    ".inst 0xc12971d4  // bfdot za.s[x11, 4], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d5  // bfdot za.s[x11, 5], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d6  // bfdot za.s[x11, 6], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d7  // bfdot za.s[x11, 7], { z14.h-z15.h }, z8.h\n"
    "10:"  // Unpadded: 0 priming loads
    ".inst 0xa0402be4  // ld1h { z4.h-z5.h }, pn10.b/Z, [SP]\n"
    ".inst 0xa0412be6  // ld1h { z6.h-z7.h }, pn10.b/Z, [SP, #0x2, MUL VL]\n"
    ".inst 0xa0422be8  // ld1h { z8.h-z9.h }, pn10.b/Z, [SP, #0x4, MUL VL]\n"
    "cbz x16, 20f\n"
    "add x19, x15, %x[ld_in_row], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "sub x16, x16, #0x1\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    "sub x14, x14, #0x1\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "cmp x16, x14\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    "csel x24, x16, x14, LT\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    "sub x14, x14, x24\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    "cbz x24, 19f\n"
    "11:"  // Unpadded: Main loop
    "addvl x23, SP, #6\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "addvl x22, SP, #12\n"
    "ld1w { z23.s }, p1/Z, [x15]\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402ae4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x23]\n"
    "addvl x21, SP, #18\n"
    "addvl x20, SP, #24\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    "add x19, x15, %x[ld_in_row], LSL #2\n"
    "ld1w { z22.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402ac4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x22]\n"
    "subs x24, x24, #0x1\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    "ld1w { z21.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412ae6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x23, #0x2, MUL VL]\n"
    ".inst 0xc1257194  // bfdot za.s[x11, 4], { z12.h-z13.h }, z5.h\n"
    "ld1w { z20.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0xc1247195  // bfdot za.s[x11, 5], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402aa4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x21]\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    "ld1w { z19.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412ac6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x22, #0x2, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    "ld1w { z18.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422ae8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x23, #0x4, MUL VL]\n"
    ".inst 0xc1257196  // bfdot za.s[x11, 6], { z12.h-z13.h }, z5.h\n"
    "ld1w { z17.s }, p1/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0xc1247197  // bfdot za.s[x11, 7], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    ".inst 0xc12771b4  // bfdot za.s[x11, 4], { z13.h-z14.h }, z7.h\n"
    "ld1w { z16.s }, p1/Z, [x19]\n"
    ".inst 0xc12671b5  // bfdot za.s[x11, 5], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412aa6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x21, #0x2, MUL VL]\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422ac8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x22, #0x4, MUL VL]\n"
    ".inst 0xc12771b6  // bfdot za.s[x11, 6], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b7  // bfdot za.s[x11, 7], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc12971d4  // bfdot za.s[x11, 4], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d5  // bfdot za.s[x11, 5], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422aa8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x21, #0x4, MUL VL]\n"
    ".inst 0xc12971d6  // bfdot za.s[x11, 6], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d7  // bfdot za.s[x11, 7], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc1251190  // bfdot za.s[x8, 0], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1241191  // bfdot za.s[x8, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0x658aaaec  // bfcvt z12.h, p2/M, z23.s\n"
    ".inst 0xa0402be4  // ld1h { z4.h-z5.h }, pn10.b/Z, [SP]\n"
    ".inst 0xc12711b0  // bfdot za.s[x8, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0x648aaacc  // bfcvtnt z12.h, p2/M, z22.s\n"
    ".inst 0xc12611b1  // bfdot za.s[x8, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0x658aaaad  // bfcvt z13.h, p2/M, z21.s\n"
    ".inst 0xa0412be6  // ld1h { z6.h-z7.h }, pn10.b/Z, [SP, #0x2, MUL VL]\n"
    ".inst 0xc12911d0  // bfdot za.s[x8, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0x648aaa8d  // bfcvtnt z13.h, p2/M, z20.s\n"
    ".inst 0xc12811d1  // bfdot za.s[x8, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0x658aaa6e  // bfcvt z14.h, p2/M, z19.s\n"
    ".inst 0x658aaa2f  // bfcvt z15.h, p2/M, z17.s\n"
    "add x8, x8, #0x2\n"
    ".inst 0xc0066800  // mova { z0.d-z1.d }, za.d[x11, #0]\n"
    ".inst 0xa0422be8  // ld1h { z8.h-z9.h }, pn10.b/Z, [SP, #0x4, MUL VL]\n"
    ".inst 0x648aaa4e  // bfcvtnt z14.h, p2/M, z18.s\n"
    ".inst 0xc0066822  // mova { z2.d-z3.d }, za.d[x11, #1]\n"
    ".inst 0xc1bfcb40  // fclamp { z0.s-z3.s }, z26.s, z31.s\n"
    "st1w { z0.s }, p1, [x13]\n"
    "add x13, x13, x10, LSL #2\n"
    "st1w { z2.s }, p1, [x0]\n"
    "add x0, x0, x9, LSL #2\n"
    "add x11, x11, #0x2\n"
    ".inst 0xc0040b00  // mova za.d[x8, #0], { z24.d-z25.d }\n"
    "st1w { z1.s }, p1, [x28]\n"
    "add x28, x28, x26, LSL #2\n"
    ".inst 0xc0040b01  // mova za.d[x8, #1], { z24.d-z25.d }\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    "st1w { z3.s }, p1, [x27]\n"
    "add x27, x27, x25, LSL #2\n"
    "bgt 11b\n"
    "b 19f\n"
    "12:"  // Padded
    "cbz x21, 17f\n"
    "cmp x21, #0x1\n"
    "sub x16, x16, x21\n"
    "beq 16f\n"
    "cmp x21, #0x2\n"
    "beq 15f\n"
    "cmp x21, #0x3\n"
    "beq 14f\n"
    "13:"  // Padded: 4 priming loads
    "mov x12, #0x0\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "add x20, x15, %x[ld_in_row], LSL #2\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "ld1w { z16.s }, p0/Z, [x20]\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    "ld1w { z16.s }, p0/Z, [x20]\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    "ld1w { z16.s }, p0/Z, [x20]\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "mov x12, #0x4\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "addvl x19, SP, #24\n"
    "ld1w { z16.s }, p0/Z, [x20]\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p0/Z, [x20]\n"
    "add x20, x20, %x[ld_in_row], LSL #2\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p0/Z, [x20]\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    "14:"  // Padded: 3 priming loads
    "mov x12, #0x0\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "add x21, x15, %x[ld_in_row], LSL #2\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "mov x12, #0x4\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "addvl x20, SP, #18\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    "addvl x19, SP, #24\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    "15:"  // Padded: 2 priming loads
    "mov x12, #0x0\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "add x22, x15, %x[ld_in_row], LSL #2\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "ld1w { z16.s }, p0/Z, [x22]\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    "ld1w { z16.s }, p0/Z, [x22]\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    "ld1w { z16.s }, p0/Z, [x22]\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "mov x12, #0x4\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x22]\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "addvl x21, SP, #12\n"
    "ld1w { z16.s }, p0/Z, [x22]\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    ".inst 0xa0402aa4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x21]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p0/Z, [x22]\n"
    "addvl x20, SP, #18\n"
    "add x22, x22, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    "addvl x19, SP, #24\n"
    ".inst 0xa0412aa6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x21, #0x2, MUL VL]\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p0/Z, [x22]\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xa0422aa8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x21, #0x4, MUL VL]\n"
    ".inst 0xc1257194  // bfdot za.s[x11, 4], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1247195  // bfdot za.s[x11, 5], { z12.h-z13.h }, z4.h\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12771b4  // bfdot za.s[x11, 4], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b5  // bfdot za.s[x11, 5], { z13.h-z14.h }, z6.h\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d4  // bfdot za.s[x11, 4], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d5  // bfdot za.s[x11, 5], { z14.h-z15.h }, z8.h\n"
    "16:"  // Padded: 1 priming loads
    "mov x12, #0x0\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "add x23, x15, %x[ld_in_row], LSL #2\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "ld1w { z16.s }, p0/Z, [x23]\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    "ld1w { z16.s }, p0/Z, [x23]\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    "ld1w { z16.s }, p0/Z, [x23]\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "mov x12, #0x4\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x23]\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "addvl x22, SP, #6\n"
    "ld1w { z16.s }, p0/Z, [x23]\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    ".inst 0xa0402ac4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x22]\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "ld1w { z16.s }, p0/Z, [x23]\n"
    "addvl x21, SP, #12\n"
    "add x23, x23, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402aa4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x21]\n"
    "addvl x20, SP, #18\n"
    ".inst 0xa0412ac6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x22, #0x2, MUL VL]\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    "addvl x19, SP, #24\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "ld1w { z16.s }, p0/Z, [x23]\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412aa6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x21, #0x2, MUL VL]\n"
    ".inst 0xa0422ac8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x22, #0x4, MUL VL]\n"
    ".inst 0xc1257194  // bfdot za.s[x11, 4], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1247195  // bfdot za.s[x11, 5], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422aa8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x21, #0x4, MUL VL]\n"
    ".inst 0xc1257196  // bfdot za.s[x11, 6], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1247197  // bfdot za.s[x11, 7], { z12.h-z13.h }, z4.h\n"
    ".inst 0xc12771b4  // bfdot za.s[x11, 4], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b5  // bfdot za.s[x11, 5], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12771b6  // bfdot za.s[x11, 6], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b7  // bfdot za.s[x11, 7], { z13.h-z14.h }, z6.h\n"
    ".inst 0xc12971d4  // bfdot za.s[x11, 4], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d5  // bfdot za.s[x11, 5], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc12971d6  // bfdot za.s[x11, 6], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d7  // bfdot za.s[x11, 7], { z14.h-z15.h }, z8.h\n"
    "17:"  // Padded: 0 priming loads
    ".inst 0xa0402be4  // ld1h { z4.h-z5.h }, pn10.b/Z, [SP]\n"
    ".inst 0xa0412be6  // ld1h { z6.h-z7.h }, pn10.b/Z, [SP, #0x2, MUL VL]\n"
    ".inst 0xa0422be8  // ld1h { z8.h-z9.h }, pn10.b/Z, [SP, #0x4, MUL VL]\n"
    "cbz x16, 20f\n"
    "mov x12, #0x0\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x15]\n"
    ".inst 0x658aaa0c  // bfcvt z12.h, p2/M, z16.s\n"
    "add x19, x15, %x[ld_in_row], LSL #2\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "ld1w { z16.s }, p0/Z, [x19]\n"
    ".inst 0x648aaa0c  // bfcvtnt z12.h, p2/M, z16.s\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    "ld1w { z16.s }, p0/Z, [x19]\n"
    ".inst 0x658aaa0d  // bfcvt z13.h, p2/M, z16.s\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    "ld1w { z16.s }, p0/Z, [x19]\n"
    ".inst 0x648aaa0d  // bfcvtnt z13.h, p2/M, z16.s\n"
    "mov x12, #0x4\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    "ld1w { z16.s }, p0/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0e  // bfcvt z14.h, p2/M, z16.s\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    "ld1w { z16.s }, p0/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x648aaa0e  // bfcvtnt z14.h, p2/M, z16.s\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    "ld1w { z16.s }, p0/Z, [x19]\n"
    "add x19, x19, %x[ld_in_row], LSL #2\n"
    ".inst 0x658aaa0f  // bfcvt z15.h, p2/M, z16.s\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    "ld1w { z16.s }, p0/Z, [x19]\n"
    "sub x16, x16, #0x1\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    "sub x14, x14, #0x1\n"
    "cmp x16, x14\n"
    "csel x24, x16, x14, LT\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    "sub x14, x14, x24\n"
    "cbz x24, 19f\n"
    "18:"  // Padded: Main loop
    "addvl x23, SP, #6\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "addvl x22, SP, #12\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402ae4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x23]\n"
    "mov x12, #0x0\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    "ld1w { z23.s }, p0/Z, [x15]\n"
    "add x21, x15, %x[ld_in_row], LSL #2\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402ac4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x22]\n"
    "addvl x20, SP, #18\n"
    "addvl x19, SP, #24\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    "ld1w { z22.s }, p0/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412ae6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x23, #0x2, MUL VL]\n"
    "subs x24, x24, #0x1\n"
    "add x15, x15, %x[ld_in_col], LSL #2\n"
    ".inst 0xc1257194  // bfdot za.s[x11, 4], { z12.h-z13.h }, z5.h\n"
    "ld1w { z21.s }, p0/Z, [x21]\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    "mov x12, #0x4\n"
    ".inst 0xc1247195  // bfdot za.s[x11, 5], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    "ld1w { z20.s }, p0/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25304500  // psel p0.s, p1.s/Z, p8.s[w12]\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412ac6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x22, #0x2, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    "ld1w { z19.s }, p0/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25704500  // psel p0.s, p1.s/Z, p8.s[w12, #1]\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422ae8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x23, #0x4, MUL VL]\n"
    ".inst 0xc1257196  // bfdot za.s[x11, 6], { z12.h-z13.h }, z5.h\n"
    "ld1w { z18.s }, p0/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25b04500  // psel p0.s, p1.s/Z, p8.s[w12, #2]\n"
    ".inst 0xc1247197  // bfdot za.s[x11, 7], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc12771b4  // bfdot za.s[x11, 4], { z13.h-z14.h }, z7.h\n"
    "ld1w { z17.s }, p0/Z, [x21]\n"
    "add x21, x21, %x[ld_in_row], LSL #2\n"
    ".inst 0x25f04500  // psel p0.s, p1.s/Z, p8.s[w12, #3]\n"
    ".inst 0xc12671b5  // bfdot za.s[x11, 5], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    "ld1w { z16.s }, p0/Z, [x21]\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422ac8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x22, #0x4, MUL VL]\n"
    ".inst 0xc12771b6  // bfdot za.s[x11, 6], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b7  // bfdot za.s[x11, 7], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12971d4  // bfdot za.s[x11, 4], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d5  // bfdot za.s[x11, 5], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12971d6  // bfdot za.s[x11, 6], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d7  // bfdot za.s[x11, 7], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc1251190  // bfdot za.s[x8, 0], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1241191  // bfdot za.s[x8, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0x658aaaec  // bfcvt z12.h, p2/M, z23.s\n"
    ".inst 0xa0402be4  // ld1h { z4.h-z5.h }, pn10.b/Z, [SP]\n"
    ".inst 0xc12711b0  // bfdot za.s[x8, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0x648aaacc  // bfcvtnt z12.h, p2/M, z22.s\n"
    ".inst 0xc12611b1  // bfdot za.s[x8, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0x658aaaad  // bfcvt z13.h, p2/M, z21.s\n"
    ".inst 0xa0412be6  // ld1h { z6.h-z7.h }, pn10.b/Z, [SP, #0x2, MUL VL]\n"
    ".inst 0xc12911d0  // bfdot za.s[x8, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0x648aaa8d  // bfcvtnt z13.h, p2/M, z20.s\n"
    ".inst 0xc12811d1  // bfdot za.s[x8, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0x658aaa6e  // bfcvt z14.h, p2/M, z19.s\n"
    ".inst 0x658aaa2f  // bfcvt z15.h, p2/M, z17.s\n"
    "add x8, x8, #0x2\n"
    ".inst 0xc0066800  // mova { z0.d-z1.d }, za.d[x11, #0]\n"
    ".inst 0xa0422be8  // ld1h { z8.h-z9.h }, pn10.b/Z, [SP, #0x4, MUL VL]\n"
    ".inst 0x648aaa4e  // bfcvtnt z14.h, p2/M, z18.s\n"
    ".inst 0xc0066822  // mova { z2.d-z3.d }, za.d[x11, #1]\n"
    ".inst 0xc1bfcb40  // fclamp { z0.s-z3.s }, z26.s, z31.s\n"
    "st1w { z0.s }, p1, [x13]\n"
    "add x13, x13, x10, LSL #2\n"
    "st1w { z2.s }, p1, [x0]\n"
    "add x0, x0, x9, LSL #2\n"
    "add x11, x11, #0x2\n"
    ".inst 0xc0040b00  // mova za.d[x8, #0], { z24.d-z25.d }\n"
    "st1w { z1.s }, p1, [x28]\n"
    "add x28, x28, x26, LSL #2\n"
    ".inst 0xc0040b01  // mova za.d[x8, #1], { z24.d-z25.d }\n"
    ".inst 0x648aaa0f  // bfcvtnt z15.h, p2/M, z16.s\n"
    "st1w { z3.s }, p1, [x27]\n"
    "add x27, x27, x25, LSL #2\n"
    "bgt 18b\n"
    "19:"  // Main loop tail
    "addvl x22, SP, #6\n"
    ".inst 0xc1257190  // bfdot za.s[x11, 0], { z12.h-z13.h }, z5.h\n"
    "addvl x21, SP, #12\n"
    ".inst 0xc1247191  // bfdot za.s[x11, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402ac4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x22]\n"
    "addvl x20, SP, #18\n"
    "addvl x19, SP, #24\n"
    ".inst 0xc1257192  // bfdot za.s[x11, 2], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1247193  // bfdot za.s[x11, 3], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402aa4  // ld1h { z4.h-z5.h }, pn10.b/Z, [x21]\n"
    ".inst 0xc12771b0  // bfdot za.s[x11, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b1  // bfdot za.s[x11, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412ac6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x22, #0x2, MUL VL]\n"
    ".inst 0xc1257194  // bfdot za.s[x11, 4], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1247195  // bfdot za.s[x11, 5], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a84  // ld1h { z4.h-z5.h }, pn10.b/Z, [x20]\n"
    ".inst 0xc12771b2  // bfdot za.s[x11, 2], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b3  // bfdot za.s[x11, 3], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412aa6  // ld1h { z6.h-z7.h }, pn10.b/Z, [x21, #0x2, MUL VL]\n"
    ".inst 0xc12971d0  // bfdot za.s[x11, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d1  // bfdot za.s[x11, 1], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422ac8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x22, #0x4, MUL VL]\n"
    ".inst 0xc1257196  // bfdot za.s[x11, 6], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1247197  // bfdot za.s[x11, 7], { z12.h-z13.h }, z4.h\n"
    ".inst 0xa0402a64  // ld1h { z4.h-z5.h }, pn10.b/Z, [x19]\n"
    ".inst 0xc12771b4  // bfdot za.s[x11, 4], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b5  // bfdot za.s[x11, 5], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a86  // ld1h { z6.h-z7.h }, pn10.b/Z, [x20, #0x2, MUL VL]\n"
    ".inst 0xc12971d2  // bfdot za.s[x11, 2], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d3  // bfdot za.s[x11, 3], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422aa8  // ld1h { z8.h-z9.h }, pn10.b/Z, [x21, #0x4, MUL VL]\n"
    ".inst 0xc12771b6  // bfdot za.s[x11, 6], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12671b7  // bfdot za.s[x11, 7], { z13.h-z14.h }, z6.h\n"
    ".inst 0xa0412a66  // ld1h { z6.h-z7.h }, pn10.b/Z, [x19, #0x2, MUL VL]\n"
    ".inst 0xc12971d4  // bfdot za.s[x11, 4], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d5  // bfdot za.s[x11, 5], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a88  // ld1h { z8.h-z9.h }, pn10.b/Z, [x20, #0x4, MUL VL]\n"
    ".inst 0xc12971d6  // bfdot za.s[x11, 6], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12871d7  // bfdot za.s[x11, 7], { z14.h-z15.h }, z8.h\n"
    ".inst 0xa0422a68  // ld1h { z8.h-z9.h }, pn10.b/Z, [x19, #0x4, MUL VL]\n"
    ".inst 0xc1251190  // bfdot za.s[x8, 0], { z12.h-z13.h }, z5.h\n"
    ".inst 0xc1241191  // bfdot za.s[x8, 1], { z12.h-z13.h }, z4.h\n"
    ".inst 0xc12711b0  // bfdot za.s[x8, 0], { z13.h-z14.h }, z7.h\n"
    ".inst 0xc12611b1  // bfdot za.s[x8, 1], { z13.h-z14.h }, z6.h\n"
    ".inst 0xc12911d0  // bfdot za.s[x8, 0], { z14.h-z15.h }, z9.h\n"
    ".inst 0xc12811d1  // bfdot za.s[x8, 1], { z14.h-z15.h }, z8.h\n"
    "add x8, x8, #0x2\n"
    ".inst 0xc0066800  // mova { z0.d-z1.d }, za.d[x11, #0]\n"
    ".inst 0xc0066822  // mova { z2.d-z3.d }, za.d[x11, #1]\n"
    ".inst 0xc1bfcb40  // fclamp { z0.s-z3.s }, z26.s, z31.s\n"
    "st1w { z0.s }, p1, [x13]\n"
    "add x13, x13, x10, LSL #2\n"
    "st1w { z2.s }, p1, [x0]\n"
    "add x0, x0, x9, LSL #2\n"
    "add x11, x11, #0x2\n"
    ".inst 0xc0040b00  // mova za.d[x8, #0], { z24.d-z25.d }\n"
    "st1w { z1.s }, p1, [x28]\n"
    "add x28, x28, x26, LSL #2\n"
    ".inst 0xc0040b01  // mova za.d[x8, #1], { z24.d-z25.d }\n"
    "st1w { z3.s }, p1, [x27]\n"
    "add x27, x27, x25, LSL #2\n"
    "20:"  // Main loop skip tail
    "cbz x14, 22f\n"
    "21:"  // Right padding loop
    ".inst 0xc0066800  // mova { z0.d-z1.d }, za.d[x11, #0]\n"
    "add x8, x8, #0x2\n"
    "subs x14, x14, #0x1\n"
    ".inst 0xc0066822  // mova { z2.d-z3.d }, za.d[x11, #1]\n"
    ".inst 0xc1bfcb40  // fclamp { z0.s-z3.s }, z26.s, z31.s\n"
    "st1w { z0.s }, p1, [x13]\n"
    "add x13, x13, x10, LSL #2\n"
    "st1w { z2.s }, p1, [x0]\n"
    "add x0, x0, x9, LSL #2\n"
    "add x11, x11, #0x2\n"
    ".inst 0xc0040b00  // mova za.d[x8, #0], { z24.d-z25.d }\n"
    "st1w { z1.s }, p1, [x28]\n"
    "add x28, x28, x26, LSL #2\n"
    ".inst 0xc0040b01  // mova za.d[x8, #1], { z24.d-z25.d }\n"
    "st1w { z3.s }, p1, [x27]\n"
    "add x27, x27, x25, LSL #2\n"
    "bgt 21b\n"
    "22:"  // End
    "ldr x19, [%x[args], %[offsetof_Args_weights]]\n"
    "incb x19, ALL, MUL #16\n"
    "incb x19, ALL, MUL #9\n"
    "str x19, [%x[args], %[offsetof_Args_weights]]\n"
    "ldr x19, [%x[args], %[offsetof_Args_ld_in_vl]]\n"
    "incw x17\n"
    "whilelt p1.s, x17, x7\n"
    "ldr x15, [%x[args], %[offsetof_Args_inptr]]\n"
    "add x15, x15, x19, LSL #2\n"
    "str x15, [%x[args], %[offsetof_Args_inptr]]\n"
    "ldr x24, [%x[args], %[offsetof_Args_outptrs]]\n"
    "ldr x23, [%x[args], %[offsetof_Args_ld_out_vls]]\n"
    "ldp x22, x21, [x24, #0x0]\n"
    "ldp x20, x19, [x23, #0x0]\n"
    "add x22, x22, x20, LSL #2\n"
    "add x21, x21, x19, LSL #2\n"
    "stp x22, x21, [x24, #0x0]\n"
    "ldp x22, x21, [x24, #0x10]\n"
    "ldp x20, x19, [x23, #0x10]\n"
    "add x22, x22, x20, LSL #2\n"
    "add x21, x21, x19, LSL #2\n"
    "stp x22, x21, [x24, #0x10]\n"
    "b.any 1b\n"
    "addvl SP, SP, #30\n"
    ".inst 0xd503467f  // SMSTOP\n"
    :
    : [args] "r" (&args), [ld_in_col] "r" (ld_in_col), [ld_in_row] "r" (ld_in_row), [offsetof_Args_bias] "I" (offsetof(Args, bias)), [offsetof_Args_clamp_max] "I" (offsetof(Args, clamp_max)), [offsetof_Args_clamp_min] "I" (offsetof(Args, clamp_min)), [offsetof_Args_current_channel] "I" (offsetof(Args, current_channel)), [offsetof_Args_inptr] "I" (offsetof(Args, inptr)), [offsetof_Args_input_cols] "I" (offsetof(Args, input_cols)), [offsetof_Args_ld_in_vl] "I" (offsetof(Args, ld_in_vl)), [offsetof_Args_ld_out_cols] "I" (offsetof(Args, ld_out_cols)), [offsetof_Args_ld_out_vls] "I" (offsetof(Args, ld_out_vls)), [offsetof_Args_n_channels] "I" (offsetof(Args, n_channels)), [offsetof_Args_outptrs] "I" (offsetof(Args, outptrs)), [offsetof_Args_output_cols] "I" (offsetof(Args, output_cols)), [offsetof_Args_pad_bottom] "I" (offsetof(Args, pad_bottom)), [offsetof_Args_pad_left] "I" (offsetof(Args, pad_left)), [offsetof_Args_pad_top] "I" (offsetof(Args, pad_top)), [offsetof_Args_weights] "I" (offsetof(Args, weights))
    : "cc", "memory", "p0", "p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9", "p10", "p11", "p12", "p13", "p14", "p15", "x0", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
  );
}

}  // namespace depthwise
}  // namespace arm_conv

#endif  // defined(ARM_COMPUTE_ENABLE_SME2)
