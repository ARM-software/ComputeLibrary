/*
 * Copyright (c) 2021-2023 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#if defined(ARM_COMPUTE_ENABLE_SVE)

#include "arm_gemm.hpp"
#include <cstdint>

namespace arm_conv {
namespace depthwise {

void sve_u8q_nhwc_3x3_s1_output2x2_dot_depthfirst_impl(
  const unsigned int n_channels,
  const uint8_t *const *const inptrs,
  const uint8_t *params,
  const int32_t *,  // Bias, should be wrapped into the parameters
  const arm_gemm::Requantize32& qp,
  const int32_t *, const int32_t *,  // Requant parameters, also wrapped
  uint8_t *const *const outptrs
)
{
  __asm__ __volatile__(
    "mov x13, #0x0\n"
    "whilelt p2.b, x13, %x[n_channels]\n"
    "ldp x12, x11, [%x[inptrs], #0x0]\n"
    "ldp x10, x9, [%x[inptrs], #0x10]\n"
    "ldp x28, x27, [%x[inptrs], #0x20]\n"
    "ldp x26, x25, [%x[inptrs], #0x30]\n"
    "mov x20, #0x1\n"
    "ptrue p1.b\n"
    "ldp x24, x23, [%x[outptrs], #0x0]\n"
    "ldp x22, x21, [%x[outptrs], #0x10]\n"
    "orr x20, x20, #0x100\n"
    "orr x20, x20, #0x10000\n"
    "ld1b { z14.b }, p2/Z, [x12, x13]\n"
    "ld1b { z13.b }, p2/Z, [x11, x13]\n"
    "dup z12.s, w20\n"
    "mov x20, #0x0\n"
    "ldp x12, x11, [%x[inptrs], #0x40]\n"
    "ld1b { z11.b }, p2/Z, [x10, x13]\n"
    "zip2 z10.b, z14.b, z11.b\n"
    "zip1 z14.b, z14.b, z11.b\n"
    "ld1b { z9.b }, p2/Z, [x9, x13]\n"
    "ldp x10, x9, [%x[inptrs], #0x50]\n"
    "zip1 z11.b, z13.b, z9.b\n"
    "zip2 z9.b, z13.b, z9.b\n"
    "ld1b { z8.b }, p2/Z, [x28, x13]\n"
    "ld1b { z7.b }, p2/Z, [x27, x13]\n"
    "zip2 z13.b, z14.b, z11.b\n"
    "zip1 z14.b, z14.b, z11.b\n"
    "ldp x28, x27, [%x[inptrs], #0x60]\n"
    "ld1b { z6.b }, p2/Z, [x26, x13]\n"
    "zip1 z11.b, z10.b, z9.b\n"
    "zip2 z9.b, z10.b, z9.b\n"
    "ld1b { z5.b }, p2/Z, [x25, x13]\n"
    "ldp x26, x25, [%x[inptrs], #0x70]\n"
    "zip2 z4.b, z8.b, z6.b\n"
    "zip1 z8.b, z8.b, z6.b\n"
    "ld1b { z3.b }, p2/Z, [x12, x13]\n"
    "ld1b { z2.b }, p2/Z, [x11, x13]\n"
    "zip1 z6.b, z7.b, z5.b\n"
    "zip2 z5.b, z7.b, z5.b\n"
    "ld1b { z1.b }, p2/Z, [x10, x13]\n"
    "ld1b { z0.b }, p2/Z, [x9, x13]\n"
    "zip2 z31.b, z3.b, z1.b\n"
    "zip1 z3.b, z3.b, z1.b\n"
    "ld1b { z30.b }, p2/Z, [x28, x13]\n"
    "ld1b { z29.b }, p2/Z, [x27, x13]\n"
    "zip1 z1.b, z2.b, z0.b\n"
    "zip2 z0.b, z2.b, z0.b\n"
    "ld1b { z28.b }, p2/Z, [x26, x13]\n"
    "ld1b { z27.b }, p2/Z, [x25, x13]\n"
    "zip2 z26.b, z30.b, z28.b\n"
    "zip1 z30.b, z30.b, z28.b\n"
    "zip1 z28.b, z29.b, z27.b\n"
    "zip2 z27.b, z29.b, z27.b\n"
    "ld1w { z10.s }, p1/Z, [%x[params]]\n"
    "ld1rw { z25.s }, p1/Z, [%x[qp], %[offsetof_Requantize32_minval]]\n"
    "ld1rw { z24.s }, p1/Z, [%x[qp], %[offsetof_Requantize32_maxval]]\n"
    "ld1rw { z23.s }, p1/Z, [%x[qp], %[offsetof_Requantize32_b_offset]]\n"
    "zip2 z7.b, z8.b, z6.b\n"
    "zip1 z8.b, z8.b, z6.b\n"
    "ld1rw { z22.s }, p1/Z, [%x[qp], %[offsetof_Requantize32_c_offset]]\n"
    "ldp x12, x11, [%x[inptrs], #0x0]\n"
    "zip1 z6.b, z4.b, z5.b\n"
    "zip2 z5.b, z4.b, z5.b\n"
    "ldp x10, x9, [%x[inptrs], #0x10]\n"
    "ldp x28, x27, [%x[inptrs], #0x20]\n"
    "zip2 z2.b, z3.b, z1.b\n"
    "zip1 z3.b, z3.b, z1.b\n"
    "ldp x26, x25, [%x[inptrs], #0x30]\n"
    "zip1 z1.b, z31.b, z0.b\n"
    "zip2 z0.b, z31.b, z0.b\n"
    "ld1b { z21.b }, p1/Z, [%x[params], #1, MUL VL]\n"
    "zip2 z29.b, z30.b, z28.b\n"
    "zip1 z30.b, z30.b, z28.b\n"
    "ld1b { z16.b }, p1/Z, [%x[params], #2, MUL VL]\n"
    "ld1b { z20.b }, p1/Z, [%x[params], #3, MUL VL]\n"
    "zip1 z28.b, z26.b, z27.b\n"
    "zip2 z27.b, z26.b, z27.b\n"
    "addvl %x[params], %x[params], #4\n"
    "mov z4.d, z10.d\n"
    "mov z31.d, z10.d\n"
    "mov z26.d, z10.d\n"
    "1:"  // Loop
    "mov z19.s, #0x0\n"
    "udot z19.s, z12.b, z8.b\n"
    "udot z10.s, z21.b, z14.b\n"
    "whilelt p0.s, x20, %x[n_channels]\n"
    "udot z19.s, z12.b, z3.b\n"
    "udot z31.s, z21.b, z8.b\n"
    "incw x13, ALL, MUL #4\n"
    "udot z10.s, z16.b, z8.b\n"
    "ext z8.b, z8.b, z8.b, #0x1\n"
    "movprfx z18, z19\n udot z18.s, z12.b, z30.b\n"
    "udot z19.s, z12.b, z14.b\n"
    "ext z14.b, z14.b, z14.b, #0x1\n"
    "udot z31.s, z16.b, z3.b\n"
    "udot z10.s, z20.b, z3.b\n"
    "ext z3.b, z3.b, z3.b, #0x1\n"
    "udot z4.s, z21.b, z14.b\n"
    "udot z26.s, z21.b, z8.b\n"
    "mov z17.s, #0x0\n"
    "udot z17.s, z12.b, z8.b\n"
    "udot z17.s, z12.b, z3.b\n"
    "udot z31.s, z20.b, z30.b\n"
    "ext z30.b, z30.b, z30.b, #0x1\n"
    "udot z4.s, z16.b, z8.b\n"
    "udot z26.s, z16.b, z3.b\n"
    "ld1w { z8.s }, p1/Z, [%x[params], #1, MUL VL]\n"
    "mls z10.s, p1/M, z19.s, z23.s\n"
    "movprfx z16, z17\n udot z16.s, z12.b, z30.b\n"
    "mov z19.s, #0x0\n"
    "udot z17.s, z12.b, z14.b\n"
    "ld1w { z14.s }, p1/Z, [%x[params]]\n"
    "udot z4.s, z20.b, z3.b\n"
    ".inst 0x04ae754a  // sqrdmulh z10.s, z10.s, z14.s\n"
    "udot z26.s, z20.b, z30.b\n"
    "mls z4.s, p1/M, z17.s, z23.s\n"
    "and z21.d, z10.d, z8.d\n"
    "mls z31.s, p1/M, z18.s, z23.s\n"
    "mls z26.s, p1/M, z16.s, z23.s\n"
    "asr z21.s, z21.s, #0x1f\n"
    ".inst 0x04ae7484  // sqrdmulh z4.s, z4.s, z14.s\n"
    ".inst 0x04ae77ff  // sqrdmulh z31.s, z31.s, z14.s\n"
    "udot z19.s, z12.b, z7.b\n"
    ".inst 0x04ae775a  // sqrdmulh z26.s, z26.s, z14.s\n"
    "sqadd z10.s, z10.s, z21.s\n"
    ".inst 0x4482850a  // srshl z10.s, p1/M, z10.s, z8.s\n"
    "udot z19.s, z12.b, z2.b\n"
    "and z16.d, z4.d, z8.d\n"
    "and z20.d, z31.d, z8.d\n"
    "movprfx z18, z19\n udot z18.s, z12.b, z29.b\n"
    "ld1w { z14.s }, p1/Z, [%x[params], #6, MUL VL]\n"
    "and z21.d, z26.d, z8.d\n"
    "asr z16.s, z16.s, #0x1f\n"
    "udot z19.s, z12.b, z13.b\n"
    "asr z20.s, z20.s, #0x1f\n"
    "asr z21.s, z21.s, #0x1f\n"
    "sqadd z4.s, z4.s, z16.s\n"
    "sqadd z31.s, z31.s, z20.s\n"
    ".inst 0x44828504  // srshl z4.s, p1/M, z4.s, z8.s\n"
    ".inst 0x4482851f  // srshl z31.s, p1/M, z31.s, z8.s\n"
    "sqadd z26.s, z26.s, z21.s\n"
    "add z10.s, z10.s, z22.s\n"
    ".inst 0x4482851a  // srshl z26.s, p1/M, z26.s, z8.s\n"
    "smax z10.s, p1/M, z10.s, z25.s\n"
    "add z4.s, z4.s, z22.s\n"
    "add z31.s, z31.s, z22.s\n"
    "smin z10.s, p1/M, z10.s, z24.s\n"
    "smax z4.s, p1/M, z4.s, z25.s\n"
    "add z26.s, z26.s, z22.s\n"
    "smax z31.s, p1/M, z31.s, z25.s\n"
    "smax z26.s, p1/M, z26.s, z25.s\n"
    "st1b { z10.s }, p0, [x24, x20]\n"
    "ld1w { z10.s }, p1/Z, [%x[params], #2, MUL VL]\n"
    "ld1b { z21.b }, p1/Z, [%x[params], #3, MUL VL]\n"
    "smin z4.s, p1/M, z4.s, z24.s\n"
    "smin z31.s, p1/M, z31.s, z24.s\n"
    "smin z26.s, p1/M, z26.s, z24.s\n"
    "st1b { z4.s }, p0, [x23, x20]\n"
    "mov z4.d, z10.d\n"
    "ld1b { z16.b }, p1/Z, [%x[params], #4, MUL VL]\n"
    "st1b { z31.s }, p0, [x22, x20]\n"
    "mov z31.d, z10.d\n"
    "udot z31.s, z21.b, z7.b\n"
    "ld1b { z20.b }, p1/Z, [%x[params], #5, MUL VL]\n"
    "st1b { z26.s }, p0, [x21, x20]\n"
    "mov z26.d, z10.d\n"
    "udot z10.s, z21.b, z13.b\n"
    "udot z10.s, z16.b, z7.b\n"
    "ext z13.b, z13.b, z13.b, #0x1\n"
    "ext z7.b, z7.b, z7.b, #0x1\n"
    "udot z4.s, z21.b, z13.b\n"
    "ld1w { z8.s }, p1/Z, [%x[params], #7, MUL VL]\n"
    "mov z17.s, #0x0\n"
    "udot z26.s, z21.b, z7.b\n"
    "udot z17.s, z12.b, z7.b\n"
    "incw x20\n"
    "udot z31.s, z16.b, z2.b\n"
    "udot z10.s, z20.b, z2.b\n"
    "ext z2.b, z2.b, z2.b, #0x1\n"
    "whilelt p0.s, x20, %x[n_channels]\n"
    "udot z4.s, z16.b, z7.b\n"
    "udot z26.s, z16.b, z2.b\n"
    "addvl %x[params], %x[params], #16\n"
    "udot z17.s, z12.b, z2.b\n"
    "udot z31.s, z20.b, z29.b\n"
    "ext z29.b, z29.b, z29.b, #0x1\n"
    "mls z10.s, p1/M, z19.s, z23.s\n"
    "udot z4.s, z20.b, z2.b\n"
    ".inst 0x04ae754a  // sqrdmulh z10.s, z10.s, z14.s\n"
    "udot z26.s, z20.b, z29.b\n"
    "movprfx z16, z17\n udot z16.s, z12.b, z29.b\n"
    "and z21.d, z10.d, z8.d\n"
    "udot z17.s, z12.b, z13.b\n"
    "mls z4.s, p1/M, z17.s, z23.s\n"
    "asr z21.s, z21.s, #0x1f\n"
    "mls z31.s, p1/M, z18.s, z23.s\n"
    "mls z26.s, p1/M, z16.s, z23.s\n"
    ".inst 0x04ae7484  // sqrdmulh z4.s, z4.s, z14.s\n"
    ".inst 0x04ae77ff  // sqrdmulh z31.s, z31.s, z14.s\n"
    ".inst 0x04ae775a  // sqrdmulh z26.s, z26.s, z14.s\n"
    "ld1w { z14.s }, p1/Z, [%x[params], #-4, MUL VL]\n"
    "sqadd z10.s, z10.s, z21.s\n"
    "and z16.d, z4.d, z8.d\n"
    ".inst 0x4482850a  // srshl z10.s, p1/M, z10.s, z8.s\n"
    "and z20.d, z31.d, z8.d\n"
    "and z21.d, z26.d, z8.d\n"
    "asr z16.s, z16.s, #0x1f\n"
    "asr z20.s, z20.s, #0x1f\n"
    "asr z21.s, z21.s, #0x1f\n"
    "sqadd z4.s, z4.s, z16.s\n"
    ".inst 0x44828504  // srshl z4.s, p1/M, z4.s, z8.s\n"
    "ld1b { z16.b }, p1/Z, [%x[params], #-6, MUL VL]\n"
    "sqadd z31.s, z31.s, z20.s\n"
    "sqadd z26.s, z26.s, z21.s\n"
    ".inst 0x4482851f  // srshl z31.s, p1/M, z31.s, z8.s\n"
    ".inst 0x4482851a  // srshl z26.s, p1/M, z26.s, z8.s\n"
    "add z10.s, z10.s, z22.s\n"
    "smax z10.s, p1/M, z10.s, z25.s\n"
    "add z4.s, z4.s, z22.s\n"
    "smin z10.s, p1/M, z10.s, z24.s\n"
    "add z31.s, z31.s, z22.s\n"
    "add z26.s, z26.s, z22.s\n"
    "smax z4.s, p1/M, z4.s, z25.s\n"
    "smax z31.s, p1/M, z31.s, z25.s\n"
    "mov z19.s, #0x0\n"
    "udot z19.s, z12.b, z6.b\n"
    "smax z26.s, p1/M, z26.s, z25.s\n"
    "st1b { z10.s }, p0, [x24, x20]\n"
    "ld1w { z10.s }, p1/Z, [%x[params], #-8, MUL VL]\n"
    "ld1b { z21.b }, p1/Z, [%x[params], #-7, MUL VL]\n"
    "smin z4.s, p1/M, z4.s, z24.s\n"
    "smin z31.s, p1/M, z31.s, z24.s\n"
    "smin z26.s, p1/M, z26.s, z24.s\n"
    "st1b { z4.s }, p0, [x23, x20]\n"
    "mov z4.d, z10.d\n"
    "udot z19.s, z12.b, z1.b\n"
    "st1b { z31.s }, p0, [x22, x20]\n"
    "mov z31.d, z10.d\n"
    "udot z31.s, z21.b, z6.b\n"
    "movprfx z18, z19\n udot z18.s, z12.b, z28.b\n"
    "st1b { z26.s }, p0, [x21, x20]\n"
    "mov z26.d, z10.d\n"
    "udot z10.s, z21.b, z11.b\n"
    "udot z10.s, z16.b, z6.b\n"
    "udot z19.s, z12.b, z11.b\n"
    "ext z11.b, z11.b, z11.b, #0x1\n"
    "ld1b { z20.b }, p1/Z, [%x[params], #-5, MUL VL]\n"
    "udot z4.s, z21.b, z11.b\n"
    "ext z6.b, z6.b, z6.b, #0x1\n"
    "mov z17.s, #0x0\n"
    "udot z26.s, z21.b, z6.b\n"
    "ld1w { z8.s }, p1/Z, [%x[params], #-3, MUL VL]\n"
    "udot z17.s, z12.b, z6.b\n"
    "udot z31.s, z16.b, z1.b\n"
    "incw x20\n"
    "whilelt p0.s, x20, %x[n_channels]\n"
    "udot z10.s, z20.b, z1.b\n"
    "ext z1.b, z1.b, z1.b, #0x1\n"
    "udot z4.s, z16.b, z6.b\n"
    "udot z26.s, z16.b, z1.b\n"
    "udot z17.s, z12.b, z1.b\n"
    "udot z31.s, z20.b, z28.b\n"
    "ext z28.b, z28.b, z28.b, #0x1\n"
    "mls z10.s, p1/M, z19.s, z23.s\n"
    "udot z4.s, z20.b, z1.b\n"
    "udot z26.s, z20.b, z28.b\n"
    ".inst 0x04ae754a  // sqrdmulh z10.s, z10.s, z14.s\n"
    "movprfx z16, z17\n udot z16.s, z12.b, z28.b\n"
    "udot z17.s, z12.b, z11.b\n"
    "and z21.d, z10.d, z8.d\n"
    "mls z4.s, p1/M, z17.s, z23.s\n"
    "mls z31.s, p1/M, z18.s, z23.s\n"
    "asr z21.s, z21.s, #0x1f\n"
    "mls z26.s, p1/M, z16.s, z23.s\n"
    ".inst 0x04ae7484  // sqrdmulh z4.s, z4.s, z14.s\n"
    ".inst 0x04ae77ff  // sqrdmulh z31.s, z31.s, z14.s\n"
    ".inst 0x04ae775a  // sqrdmulh z26.s, z26.s, z14.s\n"
    "ld1w { z14.s }, p1/Z, [%x[params], #2, MUL VL]\n"
    "sqadd z10.s, z10.s, z21.s\n"
    "and z16.d, z4.d, z8.d\n"
    ".inst 0x4482850a  // srshl z10.s, p1/M, z10.s, z8.s\n"
    "and z20.d, z31.d, z8.d\n"
    "and z21.d, z26.d, z8.d\n"
    "asr z16.s, z16.s, #0x1f\n"
    "asr z20.s, z20.s, #0x1f\n"
    "asr z21.s, z21.s, #0x1f\n"
    "sqadd z4.s, z4.s, z16.s\n"
    ".inst 0x44828504  // srshl z4.s, p1/M, z4.s, z8.s\n"
    "ld1b { z16.b }, p1/Z, [%x[params]]\n"
    "sqadd z31.s, z31.s, z20.s\n"
    "sqadd z26.s, z26.s, z21.s\n"
    ".inst 0x4482851f  // srshl z31.s, p1/M, z31.s, z8.s\n"
    ".inst 0x4482851a  // srshl z26.s, p1/M, z26.s, z8.s\n"
    "add z10.s, z10.s, z22.s\n"
    "smax z10.s, p1/M, z10.s, z25.s\n"
    "add z4.s, z4.s, z22.s\n"
    "smin z10.s, p1/M, z10.s, z24.s\n"
    "add z31.s, z31.s, z22.s\n"
    "add z26.s, z26.s, z22.s\n"
    "smax z4.s, p1/M, z4.s, z25.s\n"
    "smax z31.s, p1/M, z31.s, z25.s\n"
    "mov z19.s, #0x0\n"
    "udot z19.s, z12.b, z5.b\n"
    "smax z26.s, p1/M, z26.s, z25.s\n"
    "st1b { z10.s }, p0, [x24, x20]\n"
    "ld1w { z10.s }, p1/Z, [%x[params], #-2, MUL VL]\n"
    "ld1b { z21.b }, p1/Z, [%x[params], #-1, MUL VL]\n"
    "smin z4.s, p1/M, z4.s, z24.s\n"
    "smin z31.s, p1/M, z31.s, z24.s\n"
    "smin z26.s, p1/M, z26.s, z24.s\n"
    "st1b { z4.s }, p0, [x23, x20]\n"
    "mov z4.d, z10.d\n"
    "udot z19.s, z12.b, z0.b\n"
    "st1b { z31.s }, p0, [x22, x20]\n"
    "mov z31.d, z10.d\n"
    "udot z31.s, z21.b, z5.b\n"
    "movprfx z18, z19\n udot z18.s, z12.b, z27.b\n"
    "st1b { z26.s }, p0, [x21, x20]\n"
    "mov z26.d, z10.d\n"
    "udot z10.s, z21.b, z9.b\n"
    "udot z10.s, z16.b, z5.b\n"
    "udot z19.s, z12.b, z9.b\n"
    "ext z9.b, z9.b, z9.b, #0x1\n"
    "ld1b { z20.b }, p1/Z, [%x[params], #1, MUL VL]\n"
    "udot z4.s, z21.b, z9.b\n"
    "ext z5.b, z5.b, z5.b, #0x1\n"
    "mov z17.s, #0x0\n"
    "udot z26.s, z21.b, z5.b\n"
    "ld1w { z8.s }, p1/Z, [%x[params], #3, MUL VL]\n"
    "udot z17.s, z12.b, z5.b\n"
    "udot z31.s, z16.b, z0.b\n"
    "incw x20\n"
    "whilelt p0.s, x20, %x[n_channels]\n"
    "udot z10.s, z20.b, z0.b\n"
    "ext z0.b, z0.b, z0.b, #0x1\n"
    "udot z4.s, z16.b, z5.b\n"
    "whilelt p2.b, x13, %x[n_channels]\n"
    "udot z26.s, z16.b, z0.b\n"
    "udot z17.s, z12.b, z0.b\n"
    "ld1b { z13.b }, p2/Z, [x11, x13]\n"
    "ld1b { z11.b }, p2/Z, [x10, x13]\n"
    "udot z31.s, z20.b, z27.b\n"
    "ext z27.b, z27.b, z27.b, #0x1\n"
    "mls z10.s, p1/M, z19.s, z23.s\n"
    "ld1b { z7.b }, p2/Z, [x27, x13]\n"
    "udot z4.s, z20.b, z0.b\n"
    "udot z26.s, z20.b, z27.b\n"
    ".inst 0x04ae754a  // sqrdmulh z10.s, z10.s, z14.s\n"
    "ld1b { z6.b }, p2/Z, [x26, x13]\n"
    "movprfx z16, z17\n udot z16.s, z12.b, z27.b\n"
    "udot z17.s, z12.b, z9.b\n"
    "and z21.d, z10.d, z8.d\n"
    "ld1b { z9.b }, p2/Z, [x9, x13]\n"
    "mls z4.s, p1/M, z17.s, z23.s\n"
    "mls z31.s, p1/M, z18.s, z23.s\n"
    "asr z21.s, z21.s, #0x1f\n"
    "ld1b { z5.b }, p2/Z, [x25, x13]\n"
    "mls z26.s, p1/M, z16.s, z23.s\n"
    ".inst 0x04ae7484  // sqrdmulh z4.s, z4.s, z14.s\n"
    ".inst 0x04ae77ff  // sqrdmulh z31.s, z31.s, z14.s\n"
    ".inst 0x04ae775a  // sqrdmulh z26.s, z26.s, z14.s\n"
    "ld1b { z14.b }, p2/Z, [x12, x13]\n"
    "ldp x12, x11, [%x[inptrs], #0x40]\n"
    "sqadd z10.s, z10.s, z21.s\n"
    "and z16.d, z4.d, z8.d\n"
    ".inst 0x4482850a  // srshl z10.s, p1/M, z10.s, z8.s\n"
    "ldp x10, x9, [%x[inptrs], #0x50]\n"
    "and z20.d, z31.d, z8.d\n"
    "and z21.d, z26.d, z8.d\n"
    "ld1b { z3.b }, p2/Z, [x12, x13]\n"
    "ld1b { z2.b }, p2/Z, [x11, x13]\n"
    "asr z16.s, z16.s, #0x1f\n"
    "asr z20.s, z20.s, #0x1f\n"
    "ld1b { z1.b }, p2/Z, [x10, x13]\n"
    "ld1b { z0.b }, p2/Z, [x9, x13]\n"
    "asr z21.s, z21.s, #0x1f\n"
    "sqadd z4.s, z4.s, z16.s\n"
    ".inst 0x44828504  // srshl z4.s, p1/M, z4.s, z8.s\n"
    "ld1b { z16.b }, p1/Z, [%x[params], #6, MUL VL]\n"
    "sqadd z31.s, z31.s, z20.s\n"
    "sqadd z26.s, z26.s, z21.s\n"
    ".inst 0x4482851f  // srshl z31.s, p1/M, z31.s, z8.s\n"
    ".inst 0x4482851a  // srshl z26.s, p1/M, z26.s, z8.s\n"
    "add z10.s, z10.s, z22.s\n"
    "smax z10.s, p1/M, z10.s, z25.s\n"
    "add z4.s, z4.s, z22.s\n"
    "ld1b { z8.b }, p2/Z, [x28, x13]\n"
    "add z31.s, z31.s, z22.s\n"
    "add z26.s, z26.s, z22.s\n"
    "ldp x28, x27, [%x[inptrs], #0x60]\n"
    "ldp x26, x25, [%x[inptrs], #0x70]\n"
    "smin z10.s, p1/M, z10.s, z24.s\n"
    "smax z4.s, p1/M, z4.s, z25.s\n"
    "st1b { z10.s }, p0, [x24, x20]\n"
    "ld1b { z30.b }, p2/Z, [x28, x13]\n"
    "smax z31.s, p1/M, z31.s, z25.s\n"
    "smax z26.s, p1/M, z26.s, z25.s\n"
    "ld1b { z29.b }, p2/Z, [x27, x13]\n"
    "ld1b { z28.b }, p2/Z, [x26, x13]\n"
    "ld1b { z27.b }, p2/Z, [x25, x13]\n"
    "zip2 z10.b, z14.b, z11.b\n"
    "zip1 z14.b, z14.b, z11.b\n"
    "smin z4.s, p1/M, z4.s, z24.s\n"
    "zip1 z11.b, z13.b, z9.b\n"
    "zip2 z9.b, z13.b, z9.b\n"
    "smin z31.s, p1/M, z31.s, z24.s\n"
    "smin z26.s, p1/M, z26.s, z24.s\n"
    "st1b { z4.s }, p0, [x23, x20]\n"
    "zip2 z13.b, z14.b, z11.b\n"
    "zip1 z14.b, z14.b, z11.b\n"
    "ldp x12, x11, [%x[inptrs], #0x0]\n"
    "st1b { z31.s }, p0, [x22, x20]\n"
    "zip1 z11.b, z10.b, z9.b\n"
    "zip2 z9.b, z10.b, z9.b\n"
    "ld1w { z10.s }, p1/Z, [%x[params], #4, MUL VL]\n"
    "st1b { z26.s }, p0, [x21, x20]\n"
    "zip2 z4.b, z8.b, z6.b\n"
    "zip1 z8.b, z8.b, z6.b\n"
    "incw x20\n"
    "zip1 z6.b, z7.b, z5.b\n"
    "zip2 z5.b, z7.b, z5.b\n"
    "ldp x10, x9, [%x[inptrs], #0x10]\n"
    "ldp x28, x27, [%x[inptrs], #0x20]\n"
    "zip2 z31.b, z3.b, z1.b\n"
    "zip1 z3.b, z3.b, z1.b\n"
    "ldp x26, x25, [%x[inptrs], #0x30]\n"
    "ld1b { z21.b }, p1/Z, [%x[params], #5, MUL VL]\n"
    "zip1 z1.b, z2.b, z0.b\n"
    "zip2 z0.b, z2.b, z0.b\n"
    "ld1b { z20.b }, p1/Z, [%x[params], #7, MUL VL]\n"
    "addvl %x[params], %x[params], #8\n"
    "zip2 z26.b, z30.b, z28.b\n"
    "zip1 z30.b, z30.b, z28.b\n"
    "zip1 z28.b, z29.b, z27.b\n"
    "zip2 z27.b, z29.b, z27.b\n"
    "zip2 z7.b, z8.b, z6.b\n"
    "zip1 z8.b, z8.b, z6.b\n"
    "zip1 z6.b, z4.b, z5.b\n"
    "zip2 z5.b, z4.b, z5.b\n"
    "zip2 z2.b, z3.b, z1.b\n"
    "zip1 z3.b, z3.b, z1.b\n"
    "zip1 z1.b, z31.b, z0.b\n"
    "zip2 z0.b, z31.b, z0.b\n"
    "zip2 z29.b, z30.b, z28.b\n"
    "zip1 z30.b, z30.b, z28.b\n"
    "zip1 z28.b, z26.b, z27.b\n"
    "zip2 z27.b, z26.b, z27.b\n"
    "mov z4.d, z10.d\n"
    "mov z31.d, z10.d\n"
    "mov z26.d, z10.d\n"
    "b.any 1b\n"
    : [params] "+&r" (params)
    : [inptrs] "r" (inptrs), [n_channels] "r" (n_channels), [offsetof_Requantize32_b_offset] "I" (offsetof(arm_gemm::Requantize32, b_offset)), [offsetof_Requantize32_c_offset] "I" (offsetof(arm_gemm::Requantize32, c_offset)), [offsetof_Requantize32_maxval] "I" (offsetof(arm_gemm::Requantize32, maxval)), [offsetof_Requantize32_minval] "I" (offsetof(arm_gemm::Requantize32, minval)), [outptrs] "r" (outptrs), [qp] "r" (&qp)
    : "cc", "memory", "p0", "p1", "p2", "x9", "x10", "x11", "x12", "x13", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
  );
}

}  // namespace depthwise
}  // namespace arm_conv

#endif  // defined(ARM_COMPUTE_ENABLE_SVE)
