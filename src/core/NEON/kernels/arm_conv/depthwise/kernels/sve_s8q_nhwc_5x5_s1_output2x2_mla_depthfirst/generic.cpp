/*
 * Copyright (c) 2021-2023 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "arm_gemm.hpp"

#include <cstddef>
#include <cstdint>

#if defined(__aarch64__) && defined(ARM_COMPUTE_ENABLE_SVE)

namespace arm_conv {
namespace depthwise {

void sve_s8q_nhwc_5x5_s1_output2x2_mla_depthfirst_impl(
  const unsigned int n_channels,
  const int8_t *const *const inptrs,
  const int8_t *const weights,
  const int32_t *const bias,
  const arm_gemm::Requantize32 &qp,
  const int32_t *const requant_muls,
  const int32_t *const requant_shifts,
  int8_t *const *const outptrs
)
{
  struct Params
  {
    long unsigned int n_channels;
    const int8_t *weights;
    const int32_t *bias;
    const arm_gemm::Requantize32 *requant;
    const int32_t *const requant_muls;
    const int32_t *const requant_shifts;
    int8_t *const *const outptrs;
    const int8_t *inptrs[36];

    Params(
      long unsigned int n_channels,
      const int8_t *const *inptrs_raw,
      const int8_t *const weights,
      const int32_t *const bias,
      const arm_gemm::Requantize32 &qp,
      const int32_t *const requant_muls,
      const int32_t *const requant_shifts,
      int8_t *const *outptrs
    ) : n_channels(n_channels), weights(weights), bias(bias),
        requant(&qp), requant_muls(requant_muls),
        requant_shifts(requant_shifts), outptrs(outptrs)
    {
      inptrs[0] = inptrs_raw[0];
      inptrs[1] = inptrs_raw[1];
      inptrs[2] = inptrs_raw[6];
      inptrs[3] = inptrs_raw[7];
      inptrs[4] = inptrs_raw[2];
      inptrs[5] = inptrs_raw[8];
      inptrs[6] = inptrs_raw[3];
      inptrs[7] = inptrs_raw[4];
      inptrs[8] = inptrs_raw[11];
      inptrs[9] = inptrs_raw[12];
      inptrs[10] = inptrs_raw[9];
      inptrs[11] = inptrs_raw[10];
      inptrs[12] = inptrs_raw[5];
      inptrs[13] = inptrs_raw[13];
      inptrs[14] = inptrs_raw[14];
      inptrs[15] = inptrs_raw[15];
      inptrs[16] = inptrs_raw[16];
      inptrs[17] = inptrs_raw[17];
      inptrs[18] = inptrs_raw[18];
      inptrs[19] = inptrs_raw[19];
      inptrs[20] = inptrs_raw[20];
      inptrs[21] = inptrs_raw[21];
      inptrs[22] = inptrs_raw[22];
      inptrs[23] = inptrs_raw[23];
      inptrs[24] = inptrs_raw[24];
      inptrs[25] = inptrs_raw[25];
      inptrs[26] = inptrs_raw[26];
      inptrs[27] = inptrs_raw[27];
      inptrs[28] = inptrs_raw[28];
      inptrs[29] = inptrs_raw[29];
      inptrs[30] = inptrs_raw[30];
      inptrs[31] = inptrs_raw[31];
      inptrs[32] = inptrs_raw[32];
      inptrs[33] = inptrs_raw[33];
      inptrs[34] = inptrs_raw[34];
      inptrs[35] = inptrs_raw[35];

    }
  };

  const Params params(n_channels, inptrs, weights, bias, qp,
                      requant_muls, requant_shifts, outptrs);

  __asm__ __volatile__(
    "mov x0, #0x0\n"
    "mov x24, x0\n"
    "ldr x23, [%x[params], %[offsetof_Params_requant]]\n"
    "ldr x1, [%x[params], %[offsetof_Params_n_channels]]\n"
    "ptrue p4.b\n"
    "ldr x22, [%x[params], %[offsetof_Params_outptrs]]\n"
    "incw x24\n"
    "ldr x2, [%x[params], %[offsetof_Params_weights]]\n"
    "add x21, x23, %[offsetof_Requantize32_a_offset]\n"
    "add x20, x23, %[offsetof_Requantize32_b_offset]\n"
    "ld1rb { z15.b }, p4/Z, [x21]\n"
    "ld1rb { z17.b }, p4/Z, [x20]\n"
    "add x21, x23, %[offsetof_Requantize32_c_offset]\n"
    "add x20, x23, %[offsetof_Requantize32_minval]\n"
    "ld1rh { z12.h }, p4/Z, [x21]\n"
    "ld1rh { z13.h }, p4/Z, [x20]\n"
    "add x20, x23, %[offsetof_Requantize32_maxval]\n"
    "ld1rh { z11.h }, p4/Z, [x20]\n"
    "ldp x3, x4, [x22, #0x0]\n"
    "whilelt p3.h, x0, x1\n"
    "ldp x5, x6, [x22, #0x10]\n"
    "whilelt p2.s, x0, x1\n"
    "whilelt p1.s, x24, x1\n"
    "ldr x14, [%x[params], %[offsetof_Params_bias]]\n"
    "add x7, %x[params], %[offsetof_Params_inptrs]\n"
    "ld1w { z30.s }, p2/Z, [x14]\n"
    "ld1w { z16.s }, p1/Z, [x14, #1, MUL VL]\n"
    "uzp1 z14.s, z30.s, z16.s\n"
    "ld1sb { z0.h }, p4/Z, [x2]\n"
    "ld1sb { z1.h }, p4/Z, [x2, #1, MUL VL]\n"
    "uzp2 z10.s, z30.s, z16.s\n"
    "addvl x14, x14, #2\n"
    "ld1sb { z2.h }, p4/Z, [x2, #2, MUL VL]\n"
    "ld1sb { z3.h }, p4/Z, [x2, #3, MUL VL]\n"
    "mov x8, #0x0\n"
    "mov z20.d, z14.d\n"
    "ld1sb { z4.h }, p4/Z, [x2, #4, MUL VL]\n"
    "ldp x9, x28, [x7, #0x0]\n"
    "mov z7.d, z10.d\n"
    "mov z8.d, z14.d\n"
    "ldp x27, x26, [x7, #0x10]\n"
    "ldp x25, x24, [x7, #0x20]\n"
    "mov z16.d, z10.d\n"
    "mov z6.d, z14.d\n"
    "ldp x23, x22, [x7, #0x30]\n"
    "ldp x21, x20, [x7, #0x40]\n"
    "mov z5.d, z10.d\n"
    ".inst 0x45511000  // ssublb z0.h, z0.b, z17.b\n"
    "ld1sb { z31.h }, p3/Z, [x9, x0]\n"
    "ld1sb { z30.h }, p3/Z, [x28, x0]\n"
    ".inst 0x45511021  // ssublb z1.h, z1.b, z17.b\n"
    ".inst 0x45511042  // ssublb z2.h, z2.b, z17.b\n"
    "ld1sb { z29.h }, p3/Z, [x27, x0]\n"
    "ld1sb { z28.h }, p3/Z, [x26, x0]\n"
    ".inst 0x45511063  // ssublb z3.h, z3.b, z17.b\n"
    ".inst 0x45511084  // ssublb z4.h, z4.b, z17.b\n"
    "ld1sb { z27.h }, p3/Z, [x25, x0]\n"
    "ld1sb { z23.h }, p3/Z, [x24, x0]\n"
    ".inst 0x454f13ff  // ssublb z31.h, z31.b, z15.b\n"
    ".inst 0x454f13de  // ssublb z30.h, z30.b, z15.b\n"
    "ld1sb { z25.h }, p3/Z, [x23, x0]\n"
    "ld1sb { z24.h }, p3/Z, [x22, x0]\n"
    ".inst 0x454f13bd  // ssublb z29.h, z29.b, z15.b\n"
    ".inst 0x454f139c  // ssublb z28.h, z28.b, z15.b\n"
    "ld1sb { z26.h }, p3/Z, [x21, x0]\n"
    "ld1sb { z22.h }, p3/Z, [x20, x0]\n"
    ".inst 0x454f137b  // ssublb z27.h, z27.b, z15.b\n"
    ".inst 0x454f12f7  // ssublb z23.h, z23.b, z15.b\n"
    "ldr x17, [%x[params], %[offsetof_Params_requant_muls]]\n"
    "ldr x16, [%x[params], %[offsetof_Params_requant_shifts]]\n"
    "str x14, [%x[params], %[offsetof_Params_bias]]\n"
    ".inst 0x454f1339  // ssublb z25.h, z25.b, z15.b\n"
    ".inst 0x454f1318  // ssublb z24.h, z24.b, z15.b\n"
    ".inst 0x454f135a  // ssublb z26.h, z26.b, z15.b\n"
    ".inst 0x454f12d6  // ssublb z22.h, z22.b, z15.b\n"
    "1:"  // Loop
    ".inst 0x448043ee  // smlalb z14.s, p4/M, z31.h, z0.h\n"
    ".inst 0x448047ea  // smlalt z10.s, p4/M, z31.h, z0.h\n"
    "ldr x20, [x7, #0x50]\n"
    "ld1sb { z31.h }, p3/Z, [x20, x0]\n"
    ".inst 0x448143ce  // smlalb z14.s, p4/M, z30.h, z1.h\n"
    ".inst 0x448043d4  // smlalb z20.s, p4/M, z30.h, z0.h\n"
    "ldr x22, [x7, #0x58]\n"
    ".inst 0x454f13ff  // ssublb z31.h, z31.b, z15.b\n"
    ".inst 0x448043a8  // smlalb z8.s, p4/M, z29.h, z0.h\n"
    ".inst 0x44804386  // smlalb z6.s, p4/M, z28.h, z0.h\n"
    "ldr x21, [x7, #0x60]\n"
    "ldr x20, [x7, #0x68]\n"
    ".inst 0x448147ca  // smlalt z10.s, p4/M, z30.h, z1.h\n"
    ".inst 0x448047c7  // smlalt z7.s, p4/M, z30.h, z0.h\n"
    "ld1sb { z30.h }, p3/Z, [x22, x0]\n"
    ".inst 0x454f13de  // ssublb z30.h, z30.b, z15.b\n"
    ".inst 0x448047b0  // smlalt z16.s, p4/M, z29.h, z0.h\n"
    ".inst 0x4482436e  // smlalb z14.s, p4/M, z27.h, z2.h\n"
    "ldr x25, [x7, #0x70]\n"
    "ldr x24, [x7, #0x78]\n"
    ".inst 0x44804785  // smlalt z5.s, p4/M, z28.h, z0.h\n"
    ".inst 0x44814374  // smlalb z20.s, p4/M, z27.h, z1.h\n"
    "ld1sb { z0.h }, p4/Z, [x2, #5, MUL VL]\n"
    ".inst 0x45511000  // ssublb z0.h, z0.b, z17.b\n"
    ".inst 0x44814388  // smlalb z8.s, p4/M, z28.h, z1.h\n"
    ".inst 0x448142e6  // smlalb z6.s, p4/M, z23.h, z1.h\n"
    "ldr x15, [x7, #0x80]\n"
    "ldr x23, [x7, #0x88]\n"
    ".inst 0x4482476a  // smlalt z10.s, p4/M, z27.h, z2.h\n"
    ".inst 0x44814767  // smlalt z7.s, p4/M, z27.h, z1.h\n"
    "ld1sb { z27.h }, p3/Z, [x21, x0]\n"
    ".inst 0x454f137b  // ssublb z27.h, z27.b, z15.b\n"
    ".inst 0x44814790  // smlalt z16.s, p4/M, z28.h, z1.h\n"
    ".inst 0x4483432e  // smlalb z14.s, p4/M, z25.h, z3.h\n"
    "ldr x22, [x7, #0x90]\n"
    "ldr x21, [x7, #0x98]\n"
    ".inst 0x448146e5  // smlalt z5.s, p4/M, z23.h, z1.h\n"
    ".inst 0x44824334  // smlalb z20.s, p4/M, z25.h, z2.h\n"
    "ld1sb { z1.h }, p4/Z, [x2, #6, MUL VL]\n"
    ".inst 0x45511021  // ssublb z1.h, z1.b, z17.b\n"
    ".inst 0x448242e8  // smlalb z8.s, p4/M, z23.h, z2.h\n"
    ".inst 0x448243e6  // smlalb z6.s, p4/M, z31.h, z2.h\n"
    "ldr x14, [x7, #0xa0]\n"
    "ldr x13, [x7, #0xa8]\n"
    ".inst 0x4483472a  // smlalt z10.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44824727  // smlalt z7.s, p4/M, z25.h, z2.h\n"
    "ld1sb { z25.h }, p3/Z, [x20, x0]\n"
    ".inst 0x454f1339  // ssublb z25.h, z25.b, z15.b\n"
    ".inst 0x448246f0  // smlalt z16.s, p4/M, z23.h, z2.h\n"
    ".inst 0x4484430e  // smlalb z14.s, p4/M, z24.h, z4.h\n"
    "ldr x12, [x7, #0xb0]\n"
    "ldr x20, [x7, #0xb8]\n"
    ".inst 0x448247e5  // smlalt z5.s, p4/M, z31.h, z2.h\n"
    ".inst 0x44834314  // smlalb z20.s, p4/M, z24.h, z3.h\n"
    "ld1sb { z2.h }, p4/Z, [x2, #7, MUL VL]\n"
    "inch x2, ALL, MUL #8\n"
    ".inst 0x448343e8  // smlalb z8.s, p4/M, z31.h, z3.h\n"
    ".inst 0x448343c6  // smlalb z6.s, p4/M, z30.h, z3.h\n"
    ".inst 0x45511042  // ssublb z2.h, z2.b, z17.b\n"
    "ldr x11, [x7, #0xc0]\n"
    ".inst 0x4484470a  // smlalt z10.s, p4/M, z24.h, z4.h\n"
    ".inst 0x44834707  // smlalt z7.s, p4/M, z24.h, z3.h\n"
    "ld1sb { z24.h }, p3/Z, [x25, x0]\n"
    ".inst 0x454f1318  // ssublb z24.h, z24.b, z15.b\n"
    ".inst 0x448347f0  // smlalt z16.s, p4/M, z31.h, z3.h\n"
    ".inst 0x448043ae  // smlalb z14.s, p4/M, z29.h, z0.h\n"
    "ldr x10, [x7, #0xc8]\n"
    "ldr x9, [x7, #0xd0]\n"
    ".inst 0x448347c5  // smlalt z5.s, p4/M, z30.h, z3.h\n"
    ".inst 0x44844374  // smlalb z20.s, p4/M, z27.h, z4.h\n"
    "ld1sb { z3.h }, p4/Z, [x2]\n"
    ".inst 0x45511063  // ssublb z3.h, z3.b, z17.b\n"
    ".inst 0x448443c8  // smlalb z8.s, p4/M, z30.h, z4.h\n"
    ".inst 0x44844346  // smlalb z6.s, p4/M, z26.h, z4.h\n"
    "ldr x28, [x7, #0xd8]\n"
    "ldr x27, [x7, #0xe0]\n"
    ".inst 0x448047aa  // smlalt z10.s, p4/M, z29.h, z0.h\n"
    ".inst 0x44844767  // smlalt z7.s, p4/M, z27.h, z4.h\n"
    "ld1sb { z27.h }, p3/Z, [x24, x0]\n"
    ".inst 0x454f137b  // ssublb z27.h, z27.b, z15.b\n"
    ".inst 0x448447d0  // smlalt z16.s, p4/M, z30.h, z4.h\n"
    ".inst 0x4481438e  // smlalb z14.s, p4/M, z28.h, z1.h\n"
    "ldr x26, [x7, #0xe8]\n"
    "ldr x25, [x7, #0xf0]\n"
    ".inst 0x44844745  // smlalt z5.s, p4/M, z26.h, z4.h\n"
    ".inst 0x44804394  // smlalb z20.s, p4/M, z28.h, z0.h\n"
    "ld1sb { z4.h }, p4/Z, [x2, #1, MUL VL]\n"
    ".inst 0x45511084  // ssublb z4.h, z4.b, z17.b\n"
    ".inst 0x448042c8  // smlalb z8.s, p4/M, z22.h, z0.h\n"
    ".inst 0x44804326  // smlalb z6.s, p4/M, z25.h, z0.h\n"
    "ld1w { z19.s }, p2/Z, [x17]\n"
    "ld1w { z18.s }, p1/Z, [x17, #1, MUL VL]\n"
    ".inst 0x4481478a  // smlalt z10.s, p4/M, z28.h, z1.h\n"
    ".inst 0x44804787  // smlalt z7.s, p4/M, z28.h, z0.h\n"
    "ld1sb { z28.h }, p3/Z, [x23, x0]\n"
    ".inst 0x454f139c  // ssublb z28.h, z28.b, z15.b\n"
    ".inst 0x448046d0  // smlalt z16.s, p4/M, z22.h, z0.h\n"
    ".inst 0x448242ee  // smlalb z14.s, p4/M, z23.h, z2.h\n"
    "ldr x24, [x7, #0xf8]\n"
    "uzp1 z9.s, z19.s, z18.s\n"
    ".inst 0x44804725  // smlalt z5.s, p4/M, z25.h, z0.h\n"
    ".inst 0x448142f4  // smlalb z20.s, p4/M, z23.h, z1.h\n"
    "ld1sb { z0.h }, p4/Z, [x2, #2, MUL VL]\n"
    ".inst 0x45511000  // ssublb z0.h, z0.b, z17.b\n"
    ".inst 0x44814328  // smlalb z8.s, p4/M, z25.h, z1.h\n"
    ".inst 0x44814306  // smlalb z6.s, p4/M, z24.h, z1.h\n"
    "uzp2 z29.s, z19.s, z18.s\n"
    "ld1w { z19.s }, p2/Z, [x16]\n"
    ".inst 0x448246ea  // smlalt z10.s, p4/M, z23.h, z2.h\n"
    ".inst 0x448146e7  // smlalt z7.s, p4/M, z23.h, z1.h\n"
    "ld1sb { z23.h }, p3/Z, [x15, x0]\n"
    ".inst 0x454f12f7  // ssublb z23.h, z23.b, z15.b\n"
    ".inst 0x44814730  // smlalt z16.s, p4/M, z25.h, z1.h\n"
    ".inst 0x448343ee  // smlalb z14.s, p4/M, z31.h, z3.h\n"
    "ldr x23, [x7, #0x100]\n"
    "whilelt p0.h, x8, x1\n"
    ".inst 0x44814705  // smlalt z5.s, p4/M, z24.h, z1.h\n"
    ".inst 0x448243f4  // smlalb z20.s, p4/M, z31.h, z2.h\n"
    "ld1sb { z1.h }, p4/Z, [x2, #3, MUL VL]\n"
    ".inst 0x45511021  // ssublb z1.h, z1.b, z17.b\n"
    ".inst 0x44824308  // smlalb z8.s, p4/M, z24.h, z2.h\n"
    ".inst 0x44824366  // smlalb z6.s, p4/M, z27.h, z2.h\n"
    "addvl x17, x17, #2\n"
    ".inst 0x448347ea  // smlalt z10.s, p4/M, z31.h, z3.h\n"
    ".inst 0x448247e7  // smlalt z7.s, p4/M, z31.h, z2.h\n"
    "ld1sb { z31.h }, p3/Z, [x22, x0]\n"
    ".inst 0x454f13ff  // ssublb z31.h, z31.b, z15.b\n"
    ".inst 0x44824710  // smlalt z16.s, p4/M, z24.h, z2.h\n"
    ".inst 0x448443ce  // smlalb z14.s, p4/M, z30.h, z4.h\n"
    "ldr x22, [x7, #0x108]\n"
    ".inst 0x44824765  // smlalt z5.s, p4/M, z27.h, z2.h\n"
    ".inst 0x448343d4  // smlalb z20.s, p4/M, z30.h, z3.h\n"
    "ld1sb { z2.h }, p4/Z, [x2, #4, MUL VL]\n"
    ".inst 0x45511042  // ssublb z2.h, z2.b, z17.b\n"
    ".inst 0x44834368  // smlalb z8.s, p4/M, z27.h, z3.h\n"
    ".inst 0x448342e6  // smlalb z6.s, p4/M, z23.h, z3.h\n"
    ".inst 0x448447ca  // smlalt z10.s, p4/M, z30.h, z4.h\n"
    ".inst 0x448347c7  // smlalt z7.s, p4/M, z30.h, z3.h\n"
    "ld1sb { z30.h }, p3/Z, [x21, x0]\n"
    ".inst 0x454f13de  // ssublb z30.h, z30.b, z15.b\n"
    ".inst 0x44834770  // smlalt z16.s, p4/M, z27.h, z3.h\n"
    ".inst 0x448042ce  // smlalb z14.s, p4/M, z22.h, z0.h\n"
    "ldr x21, [x7, #0x110]\n"
    ".inst 0x448346e5  // smlalt z5.s, p4/M, z23.h, z3.h\n"
    ".inst 0x44844354  // smlalb z20.s, p4/M, z26.h, z4.h\n"
    "ld1sb { z3.h }, p4/Z, [x2, #5, MUL VL]\n"
    ".inst 0x45511063  // ssublb z3.h, z3.b, z17.b\n"
    ".inst 0x448442e8  // smlalb z8.s, p4/M, z23.h, z4.h\n"
    ".inst 0x44844386  // smlalb z6.s, p4/M, z28.h, z4.h\n"
    ".inst 0x448046ca  // smlalt z10.s, p4/M, z22.h, z0.h\n"
    ".inst 0x44844747  // smlalt z7.s, p4/M, z26.h, z4.h\n"
    "ld1sb { z26.h }, p3/Z, [x14, x0]\n"
    ".inst 0x454f135a  // ssublb z26.h, z26.b, z15.b\n"
    ".inst 0x448446f0  // smlalt z16.s, p4/M, z23.h, z4.h\n"
    ".inst 0x4481432e  // smlalb z14.s, p4/M, z25.h, z1.h\n"
    "ld1sb { z22.h }, p3/Z, [x20, x0]\n"
    ".inst 0x454f12d6  // ssublb z22.h, z22.b, z15.b\n"
    ".inst 0x44844785  // smlalt z5.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44804334  // smlalb z20.s, p4/M, z25.h, z0.h\n"
    "ld1sb { z4.h }, p4/Z, [x2, #6, MUL VL]\n"
    ".inst 0x45511084  // ssublb z4.h, z4.b, z17.b\n"
    ".inst 0x448043e8  // smlalb z8.s, p4/M, z31.h, z0.h\n"
    ".inst 0x448043c6  // smlalb z6.s, p4/M, z30.h, z0.h\n"
    "ldr x20, [x7, #0x118]\n"
    "ldr x14, [%x[params], %[offsetof_Params_bias]]\n"
    ".inst 0x4481472a  // smlalt z10.s, p4/M, z25.h, z1.h\n"
    ".inst 0x44804727  // smlalt z7.s, p4/M, z25.h, z0.h\n"
    "ld1sb { z25.h }, p3/Z, [x13, x0]\n"
    ".inst 0x454f1339  // ssublb z25.h, z25.b, z15.b\n"
    ".inst 0x448047f0  // smlalt z16.s, p4/M, z31.h, z0.h\n"
    ".inst 0x4482430e  // smlalb z14.s, p4/M, z24.h, z2.h\n"
    ".inst 0x448047c5  // smlalt z5.s, p4/M, z30.h, z0.h\n"
    ".inst 0x44814314  // smlalb z20.s, p4/M, z24.h, z1.h\n"
    "ld1sb { z0.h }, p4/Z, [x2, #7, MUL VL]\n"
    "inch x2, ALL, MUL #8\n"
    ".inst 0x448143c8  // smlalb z8.s, p4/M, z30.h, z1.h\n"
    ".inst 0x44814346  // smlalb z6.s, p4/M, z26.h, z1.h\n"
    ".inst 0x45511000  // ssublb z0.h, z0.b, z17.b\n"
    ".inst 0x4482470a  // smlalt z10.s, p4/M, z24.h, z2.h\n"
    ".inst 0x44814707  // smlalt z7.s, p4/M, z24.h, z1.h\n"
    "ld1sb { z24.h }, p3/Z, [x12, x0]\n"
    ".inst 0x454f1318  // ssublb z24.h, z24.b, z15.b\n"
    ".inst 0x448147d0  // smlalt z16.s, p4/M, z30.h, z1.h\n"
    ".inst 0x4483436e  // smlalb z14.s, p4/M, z27.h, z3.h\n"
    ".inst 0x44814745  // smlalt z5.s, p4/M, z26.h, z1.h\n"
    ".inst 0x44824374  // smlalb z20.s, p4/M, z27.h, z2.h\n"
    "ld1sb { z1.h }, p4/Z, [x2]\n"
    ".inst 0x45511021  // ssublb z1.h, z1.b, z17.b\n"
    ".inst 0x44824348  // smlalb z8.s, p4/M, z26.h, z2.h\n"
    ".inst 0x44824326  // smlalb z6.s, p4/M, z25.h, z2.h\n"
    ".inst 0x4483476a  // smlalt z10.s, p4/M, z27.h, z3.h\n"
    ".inst 0x44824767  // smlalt z7.s, p4/M, z27.h, z2.h\n"
    "ld1sb { z27.h }, p3/Z, [x11, x0]\n"
    ".inst 0x454f137b  // ssublb z27.h, z27.b, z15.b\n"
    ".inst 0x44824750  // smlalt z16.s, p4/M, z26.h, z2.h\n"
    ".inst 0x448442ee  // smlalb z14.s, p4/M, z23.h, z4.h\n"
    ".inst 0x44824725  // smlalt z5.s, p4/M, z25.h, z2.h\n"
    ".inst 0x448342f4  // smlalb z20.s, p4/M, z23.h, z3.h\n"
    "ld1sb { z2.h }, p4/Z, [x2, #1, MUL VL]\n"
    ".inst 0x45511042  // ssublb z2.h, z2.b, z17.b\n"
    ".inst 0x44834328  // smlalb z8.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834306  // smlalb z6.s, p4/M, z24.h, z3.h\n"
    ".inst 0x448446ea  // smlalt z10.s, p4/M, z23.h, z4.h\n"
    ".inst 0x448346e7  // smlalt z7.s, p4/M, z23.h, z3.h\n"
    "ld1sb { z23.h }, p3/Z, [x10, x0]\n"
    ".inst 0x454f12f7  // ssublb z23.h, z23.b, z15.b\n"
    ".inst 0x44834730  // smlalt z16.s, p4/M, z25.h, z3.h\n"
    ".inst 0x448043ee  // smlalb z14.s, p4/M, z31.h, z0.h\n"
    ".inst 0x44834705  // smlalt z5.s, p4/M, z24.h, z3.h\n"
    ".inst 0x44844394  // smlalb z20.s, p4/M, z28.h, z4.h\n"
    "ld1sb { z3.h }, p4/Z, [x2, #2, MUL VL]\n"
    ".inst 0x45511063  // ssublb z3.h, z3.b, z17.b\n"
    ".inst 0x44844308  // smlalb z8.s, p4/M, z24.h, z4.h\n"
    ".inst 0x448442c6  // smlalb z6.s, p4/M, z22.h, z4.h\n"
    ".inst 0x448047ea  // smlalt z10.s, p4/M, z31.h, z0.h\n"
    ".inst 0x44844787  // smlalt z7.s, p4/M, z28.h, z4.h\n"
    "ld1sb { z31.h }, p3/Z, [x9, x0]\n"
    ".inst 0x454f13ff  // ssublb z31.h, z31.b, z15.b\n"
    ".inst 0x44844710  // smlalt z16.s, p4/M, z24.h, z4.h\n"
    ".inst 0x448143ce  // smlalb z14.s, p4/M, z30.h, z1.h\n"
    "ld1sb { z28.h }, p3/Z, [x27, x0]\n"
    ".inst 0x454f139c  // ssublb z28.h, z28.b, z15.b\n"
    ".inst 0x448446c5  // smlalt z5.s, p4/M, z22.h, z4.h\n"
    ".inst 0x448043d4  // smlalb z20.s, p4/M, z30.h, z0.h\n"
    "ld1sb { z4.h }, p4/Z, [x2, #3, MUL VL]\n"
    ".inst 0x45511084  // ssublb z4.h, z4.b, z17.b\n"
    ".inst 0x44804368  // smlalb z8.s, p4/M, z27.h, z0.h\n"
    ".inst 0x448042e6  // smlalb z6.s, p4/M, z23.h, z0.h\n"
    ".inst 0x448147ca  // smlalt z10.s, p4/M, z30.h, z1.h\n"
    ".inst 0x448047c7  // smlalt z7.s, p4/M, z30.h, z0.h\n"
    "ld1sb { z30.h }, p3/Z, [x28, x0]\n"
    ".inst 0x454f13de  // ssublb z30.h, z30.b, z15.b\n"
    ".inst 0x44804770  // smlalt z16.s, p4/M, z27.h, z0.h\n"
    ".inst 0x4482434e  // smlalb z14.s, p4/M, z26.h, z2.h\n"
    ".inst 0x448046e5  // smlalt z5.s, p4/M, z23.h, z0.h\n"
    ".inst 0x44814354  // smlalb z20.s, p4/M, z26.h, z1.h\n"
    "ld1sb { z0.h }, p4/Z, [x2, #4, MUL VL]\n"
    ".inst 0x45511000  // ssublb z0.h, z0.b, z17.b\n"
    ".inst 0x448142e8  // smlalb z8.s, p4/M, z23.h, z1.h\n"
    ".inst 0x448143e6  // smlalb z6.s, p4/M, z31.h, z1.h\n"
    ".inst 0x4482474a  // smlalt z10.s, p4/M, z26.h, z2.h\n"
    ".inst 0x44814747  // smlalt z7.s, p4/M, z26.h, z1.h\n"
    "ld1sb { z26.h }, p3/Z, [x26, x0]\n"
    ".inst 0x454f135a  // ssublb z26.h, z26.b, z15.b\n"
    ".inst 0x448146f0  // smlalt z16.s, p4/M, z23.h, z1.h\n"
    ".inst 0x4483432e  // smlalb z14.s, p4/M, z25.h, z3.h\n"
    ".inst 0x448147e5  // smlalt z5.s, p4/M, z31.h, z1.h\n"
    ".inst 0x44824334  // smlalb z20.s, p4/M, z25.h, z2.h\n"
    "ld1sb { z1.h }, p4/Z, [x2, #5, MUL VL]\n"
    ".inst 0x45511021  // ssublb z1.h, z1.b, z17.b\n"
    ".inst 0x448243e8  // smlalb z8.s, p4/M, z31.h, z2.h\n"
    ".inst 0x448243c6  // smlalb z6.s, p4/M, z30.h, z2.h\n"
    ".inst 0x4483472a  // smlalt z10.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44824727  // smlalt z7.s, p4/M, z25.h, z2.h\n"
    "ld1sb { z25.h }, p3/Z, [x25, x0]\n"
    ".inst 0x454f1339  // ssublb z25.h, z25.b, z15.b\n"
    ".inst 0x448247f0  // smlalt z16.s, p4/M, z31.h, z2.h\n"
    ".inst 0x4484430e  // smlalb z14.s, p4/M, z24.h, z4.h\n"
    ".inst 0x448247c5  // smlalt z5.s, p4/M, z30.h, z2.h\n"
    ".inst 0x44834314  // smlalb z20.s, p4/M, z24.h, z3.h\n"
    "ld1sb { z2.h }, p4/Z, [x2, #6, MUL VL]\n"
    ".inst 0x45511042  // ssublb z2.h, z2.b, z17.b\n"
    ".inst 0x448343c8  // smlalb z8.s, p4/M, z30.h, z3.h\n"
    ".inst 0x44834386  // smlalb z6.s, p4/M, z28.h, z3.h\n"
    ".inst 0x4484470a  // smlalt z10.s, p4/M, z24.h, z4.h\n"
    ".inst 0x44834707  // smlalt z7.s, p4/M, z24.h, z3.h\n"
    "ld1sb { z24.h }, p3/Z, [x24, x0]\n"
    ".inst 0x454f1318  // ssublb z24.h, z24.b, z15.b\n"
    ".inst 0x448347d0  // smlalt z16.s, p4/M, z30.h, z3.h\n"
    ".inst 0x4480436e  // smlalb z14.s, p4/M, z27.h, z0.h\n"
    ".inst 0x44834785  // smlalt z5.s, p4/M, z28.h, z3.h\n"
    ".inst 0x448442d4  // smlalb z20.s, p4/M, z22.h, z4.h\n"
    "ld1sb { z3.h }, p4/Z, [x2, #7, MUL VL]\n"
    "inch x2, ALL, MUL #8\n"
    ".inst 0x44844388  // smlalb z8.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44844346  // smlalb z6.s, p4/M, z26.h, z4.h\n"
    ".inst 0x45511063  // ssublb z3.h, z3.b, z17.b\n"
    ".inst 0x4480476a  // smlalt z10.s, p4/M, z27.h, z0.h\n"
    ".inst 0x44844790  // smlalt z16.s, p4/M, z28.h, z4.h\n"
    "ld1sb { z27.h }, p3/Z, [x23, x0]\n"
    ".inst 0x454f137b  // ssublb z27.h, z27.b, z15.b\n"
    ".inst 0x448142ee  // smlalb z14.s, p4/M, z23.h, z1.h\n"
    ".inst 0x448446c7  // smlalt z7.s, p4/M, z22.h, z4.h\n"
    "ld1w { z18.s }, p1/Z, [x16, #1, MUL VL]\n"
    "addvl x16, x16, #2\n"
    ".inst 0x44844745  // smlalt z5.s, p4/M, z26.h, z4.h\n"
    ".inst 0x448042f4  // smlalb z20.s, p4/M, z23.h, z0.h\n"
    "ld1sb { z4.h }, p4/Z, [x2]\n"
    ".inst 0x45511084  // ssublb z4.h, z4.b, z17.b\n"
    ".inst 0x44804328  // smlalb z8.s, p4/M, z25.h, z0.h\n"
    ".inst 0x44804306  // smlalb z6.s, p4/M, z24.h, z0.h\n"
    "inch x2\n"
    ".inst 0x448146ea  // smlalt z10.s, p4/M, z23.h, z1.h\n"
    ".inst 0x44804730  // smlalt z16.s, p4/M, z25.h, z0.h\n"
    "ld1sb { z25.h }, p3/Z, [x22, x0]\n"
    ".inst 0x454f1339  // ssublb z25.h, z25.b, z15.b\n"
    ".inst 0x448243ee  // smlalb z14.s, p4/M, z31.h, z2.h\n"
    ".inst 0x448046e7  // smlalt z7.s, p4/M, z23.h, z0.h\n"
    "uzp1 z23.s, z19.s, z18.s\n"
    ".inst 0x44804705  // smlalt z5.s, p4/M, z24.h, z0.h\n"
    ".inst 0x448143f4  // smlalb z20.s, p4/M, z31.h, z1.h\n"
    "uzp2 z22.s, z19.s, z18.s\n"
    ".inst 0x44814308  // smlalb z8.s, p4/M, z24.h, z1.h\n"
    ".inst 0x44814366  // smlalb z6.s, p4/M, z27.h, z1.h\n"
    ".inst 0x448247ea  // smlalt z10.s, p4/M, z31.h, z2.h\n"
    ".inst 0x44814710  // smlalt z16.s, p4/M, z24.h, z1.h\n"
    "ld1sb { z24.h }, p3/Z, [x21, x0]\n"
    ".inst 0x454f1318  // ssublb z24.h, z24.b, z15.b\n"
    ".inst 0x448343ce  // smlalb z14.s, p4/M, z30.h, z3.h\n"
    ".inst 0x448147e7  // smlalt z7.s, p4/M, z31.h, z1.h\n"
    ".inst 0x44814765  // smlalt z5.s, p4/M, z27.h, z1.h\n"
    ".inst 0x448243d4  // smlalb z20.s, p4/M, z30.h, z2.h\n"
    ".inst 0x44824368  // smlalb z8.s, p4/M, z27.h, z2.h\n"
    ".inst 0x44824326  // smlalb z6.s, p4/M, z25.h, z2.h\n"
    ".inst 0x448347ca  // smlalt z10.s, p4/M, z30.h, z3.h\n"
    ".inst 0x44824770  // smlalt z16.s, p4/M, z27.h, z2.h\n"
    "ld1sb { z27.h }, p3/Z, [x20, x0]\n"
    ".inst 0x454f137b  // ssublb z27.h, z27.b, z15.b\n"
    ".inst 0x4484438e  // smlalb z14.s, p4/M, z28.h, z4.h\n"
    ".inst 0x448247c7  // smlalt z7.s, p4/M, z30.h, z2.h\n"
    ".inst 0x04a975ce  // sqrdmulh z14.s, z14.s, z9.s\n"
    "inch x0\n"
    ".inst 0x44824725  // smlalt z5.s, p4/M, z25.h, z2.h\n"
    ".inst 0x44834394  // smlalb z20.s, p4/M, z28.h, z3.h\n"
    "and z21.d, z14.d, z23.d\n"
    "mov x20, x0\n"
    ".inst 0x44834328  // smlalb z8.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834306  // smlalb z6.s, p4/M, z24.h, z3.h\n"
    "asr z21.s, z21.s, #0x1f\n"
    "incw x20\n"
    ".inst 0x4484478a  // smlalt z10.s, p4/M, z28.h, z4.h\n"
    ".inst 0x44834787  // smlalt z7.s, p4/M, z28.h, z3.h\n"
    ".inst 0x04bd754a  // sqrdmulh z10.s, z10.s, z29.s\n"
    "whilelt p2.s, x0, x1\n"
    ".inst 0x44834730  // smlalt z16.s, p4/M, z25.h, z3.h\n"
    ".inst 0x44834705  // smlalt z5.s, p4/M, z24.h, z3.h\n"
    "and z3.d, z10.d, z22.d\n"
    "whilelt p1.s, x20, x1\n"
    ".inst 0x44844354  // smlalb z20.s, p4/M, z26.h, z4.h\n"
    ".inst 0x44844308  // smlalb z8.s, p4/M, z24.h, z4.h\n"
    ".inst 0x04a97694  // sqrdmulh z20.s, z20.s, z9.s\n"
    "whilelt p3.h, x0, x1\n"
    ".inst 0x44844366  // smlalb z6.s, p4/M, z27.h, z4.h\n"
    ".inst 0x44844747  // smlalt z7.s, p4/M, z26.h, z4.h\n"
    ".inst 0x04a97508  // sqrdmulh z8.s, z8.s, z9.s\n"
    ".inst 0x44844710  // smlalt z16.s, p4/M, z24.h, z4.h\n"
    ".inst 0x44844765  // smlalt z5.s, p4/M, z27.h, z4.h\n"
    ".inst 0x04a974c6  // sqrdmulh z6.s, z6.s, z9.s\n"
    "sqadd z14.s, z14.s, z21.s\n"
    "asr z3.s, z3.s, #0x1f\n"
    ".inst 0x448292ee  // srshl z14.s, p4/M, z14.s, z23.s\n"
    "and z19.d, z20.d, z23.d\n"
    ".inst 0x04bd74e7  // sqrdmulh z7.s, z7.s, z29.s\n"
    "and z18.d, z8.d, z23.d\n"
    ".inst 0x04bd7610  // sqrdmulh z16.s, z16.s, z29.s\n"
    "and z21.d, z6.d, z23.d\n"
    ".inst 0x04bd74a5  // sqrdmulh z5.s, z5.s, z29.s\n"
    "sqadd z10.s, z10.s, z3.s\n"
    "asr z19.s, z19.s, #0x1f\n"
    ".inst 0x448292ca  // srshl z10.s, p4/M, z10.s, z22.s\n"
    "and z1.d, z7.d, z22.d\n"
    "asr z18.s, z18.s, #0x1f\n"
    "and z2.d, z16.d, z22.d\n"
    "asr z21.s, z21.s, #0x1f\n"
    "and z3.d, z5.d, z22.d\n"
    "sqadd z20.s, z20.s, z19.s\n"
    ".inst 0x448292f4  // srshl z20.s, p4/M, z20.s, z23.s\n"
    "asr z1.s, z1.s, #0x1f\n"
    "sqadd z8.s, z8.s, z18.s\n"
    ".inst 0x448292e8  // srshl z8.s, p4/M, z8.s, z23.s\n"
    "asr z2.s, z2.s, #0x1f\n"
    "sqadd z6.s, z6.s, z21.s\n"
    ".inst 0x448292e6  // srshl z6.s, p4/M, z6.s, z23.s\n"
    "asr z3.s, z3.s, #0x1f\n"
    "sqadd z7.s, z7.s, z1.s\n"
    ".inst 0x448292c7  // srshl z7.s, p4/M, z7.s, z22.s\n"
    "sqadd z16.s, z16.s, z2.s\n"
    "sqadd z5.s, z5.s, z3.s\n"
    ".inst 0x448292d0  // srshl z16.s, p4/M, z16.s, z22.s\n"
    ".inst 0x448292c5  // srshl z5.s, p4/M, z5.s, z22.s\n"
    ".inst 0x453041ce  // sqxtnb z14.h, z14.s\n"
    ".inst 0x45304294  // sqxtnb z20.h, z20.s\n"
    ".inst 0x45304108  // sqxtnb z8.h, z8.s\n"
    ".inst 0x453040c6  // sqxtnb z6.h, z6.s\n"
    ".inst 0x4530454e  // sqxtnt z14.h, z10.s\n"
    ".inst 0x453044f4  // sqxtnt z20.h, z7.s\n"
    ".inst 0x45304608  // sqxtnt z8.h, z16.s\n"
    ".inst 0x453044a6  // sqxtnt z6.h, z5.s\n"
    "sqadd z14.h, z14.h, z12.h\n"
    "sqadd z20.h, z20.h, z12.h\n"
    "smax z14.h, p4/M, z14.h, z13.h\n"
    "smax z20.h, p4/M, z20.h, z13.h\n"
    "sqadd z8.h, z8.h, z12.h\n"
    "sqadd z6.h, z6.h, z12.h\n"
    "smax z8.h, p4/M, z8.h, z13.h\n"
    "smax z6.h, p4/M, z6.h, z13.h\n"
    "smin z14.h, p4/M, z14.h, z11.h\n"
    "smin z20.h, p4/M, z20.h, z11.h\n"
    "st1b { z14.h }, p0, [x3, x8]\n"
    "smin z8.h, p4/M, z8.h, z11.h\n"
    "smin z6.h, p4/M, z6.h, z11.h\n"
    "st1b { z20.h }, p0, [x4, x8]\n"
    "st1b { z8.h }, p0, [x5, x8]\n"
    "st1b { z6.h }, p0, [x6, x8]\n"
    "ld1w { z30.s }, p2/Z, [x14]\n"
    "ld1w { z16.s }, p1/Z, [x14, #1, MUL VL]\n"
    "uzp1 z14.s, z30.s, z16.s\n"
    "ld1sb { z0.h }, p4/Z, [x2]\n"
    "ld1sb { z1.h }, p4/Z, [x2, #1, MUL VL]\n"
    "uzp2 z10.s, z30.s, z16.s\n"
    "addvl x14, x14, #2\n"
    "ld1sb { z2.h }, p4/Z, [x2, #2, MUL VL]\n"
    "ld1sb { z3.h }, p4/Z, [x2, #3, MUL VL]\n"
    "inch x8\n"
    "str x14, [%x[params], %[offsetof_Params_bias]]\n"
    "ld1sb { z4.h }, p4/Z, [x2, #4, MUL VL]\n"
    "ldp x9, x28, [x7, #0x0]\n"
    "mov z20.d, z14.d\n"
    "mov z7.d, z10.d\n"
    "ldp x27, x26, [x7, #0x10]\n"
    "ldp x25, x24, [x7, #0x20]\n"
    "mov z8.d, z14.d\n"
    "mov z16.d, z10.d\n"
    "ldp x23, x22, [x7, #0x30]\n"
    "ldp x21, x20, [x7, #0x40]\n"
    "mov z6.d, z14.d\n"
    "mov z5.d, z10.d\n"
    "ld1sb { z31.h }, p3/Z, [x9, x0]\n"
    "ld1sb { z30.h }, p3/Z, [x28, x0]\n"
    ".inst 0x45511000  // ssublb z0.h, z0.b, z17.b\n"
    ".inst 0x45511021  // ssublb z1.h, z1.b, z17.b\n"
    "ld1sb { z29.h }, p3/Z, [x27, x0]\n"
    "ld1sb { z28.h }, p3/Z, [x26, x0]\n"
    ".inst 0x45511042  // ssublb z2.h, z2.b, z17.b\n"
    ".inst 0x45511063  // ssublb z3.h, z3.b, z17.b\n"
    "ld1sb { z27.h }, p3/Z, [x25, x0]\n"
    "ld1sb { z23.h }, p3/Z, [x24, x0]\n"
    ".inst 0x45511084  // ssublb z4.h, z4.b, z17.b\n"
    ".inst 0x454f13ff  // ssublb z31.h, z31.b, z15.b\n"
    "ld1sb { z25.h }, p3/Z, [x23, x0]\n"
    "ld1sb { z24.h }, p3/Z, [x22, x0]\n"
    ".inst 0x454f13de  // ssublb z30.h, z30.b, z15.b\n"
    ".inst 0x454f13bd  // ssublb z29.h, z29.b, z15.b\n"
    "ld1sb { z26.h }, p3/Z, [x21, x0]\n"
    "ld1sb { z22.h }, p3/Z, [x20, x0]\n"
    ".inst 0x454f139c  // ssublb z28.h, z28.b, z15.b\n"
    ".inst 0x454f137b  // ssublb z27.h, z27.b, z15.b\n"
    ".inst 0x454f12f7  // ssublb z23.h, z23.b, z15.b\n"
    ".inst 0x454f1339  // ssublb z25.h, z25.b, z15.b\n"
    ".inst 0x454f1318  // ssublb z24.h, z24.b, z15.b\n"
    ".inst 0x454f135a  // ssublb z26.h, z26.b, z15.b\n"
    ".inst 0x454f12d6  // ssublb z22.h, z22.b, z15.b\n"
    "b.any 1b\n"
    :
    : [offsetof_Params_bias] "I" (offsetof(Params, bias)), [offsetof_Params_inptrs] "I" (offsetof(Params, inptrs)), [offsetof_Params_n_channels] "I" (offsetof(Params, n_channels)), [offsetof_Params_outptrs] "I" (offsetof(Params, outptrs)), [offsetof_Params_requant] "I" (offsetof(Params, requant)), [offsetof_Params_requant_muls] "I" (offsetof(Params, requant_muls)), [offsetof_Params_requant_shifts] "I" (offsetof(Params, requant_shifts)), [offsetof_Params_weights] "I" (offsetof(Params, weights)), [offsetof_Requantize32_a_offset] "I" (offsetof(arm_gemm::Requantize32, a_offset)), [offsetof_Requantize32_b_offset] "I" (offsetof(arm_gemm::Requantize32, b_offset)), [offsetof_Requantize32_c_offset] "I" (offsetof(arm_gemm::Requantize32, c_offset)), [offsetof_Requantize32_maxval] "I" (offsetof(arm_gemm::Requantize32, maxval)), [offsetof_Requantize32_minval] "I" (offsetof(arm_gemm::Requantize32, minval)), [params] "r" (&params)
    : "cc", "memory", "p0", "p1", "p2", "p3", "p4", "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
  );
}

}  // namespace depthwise
}  // namespace arm_conv

#endif  // defined(__aarch64__) && defined(ARM_COMPUTE_ENABLE_SVE)
