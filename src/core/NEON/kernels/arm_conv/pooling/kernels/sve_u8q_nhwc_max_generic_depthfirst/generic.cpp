/*
 * Copyright (c) 2021-2022 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include "pooling.hpp"
#include <cstdint>
#include <cstddef>

#if defined(ARM_COMPUTE_ENABLE_SVE)

namespace arm_conv {
namespace pooling {


void sve_u8q_nhwc_max_generic_depthfirst_impl(
  const uint64_t,
  const uint64_t n_valid_cells,
  uint64_t n_channels,
  const uint8_t *const *const inptrs,
  uint8_t *outptr,
  const Requantize32 &qp
)
{
  __asm__ __volatile__(
    "mov x28, #0x0\n"
    "cntb x27\n"
    "cntb x26, ALL, MUL #2\n"
    "cntb x25, ALL, MUL #3\n"
    "whilelt p4.b, x28, %x[n_channels]\n"
    "whilelt p3.b, x27, %x[n_channels]\n"
    "whilelt p2.b, x26, %x[n_channels]\n"
    "whilelt p1.b, x25, %x[n_channels]\n"
    "ptrue p0.b\n"
    "b.none 7f\n"
    "1:"  // 4-vectors of channels
    "lsr x24, %x[n_valid_cells], #0x2\n"
    "mov z8.b, #0x0\n"
    "mov z7.b, #0x0\n"
    "mov x19, %x[inptrs]\n"
    "mov z6.b, #0x0\n"
    "mov z5.b, #0x0\n"
    "cbz x24, 4f\n"
    "ldp x23, x22, [x19, #0x0]\n"
    "ldp x21, x20, [x19, #0x10]\n"
    "subs x24, x24, #0x1\n"
    "add x19, x19, #0x20\n"
    "ld1b { z4.b }, p4/Z, [x23, x28]\n"
    "ld1b { z3.b }, p4/Z, [x22, x28]\n"
    "ld1b { z2.b }, p4/Z, [x21, x28]\n"
    "ld1b { z1.b }, p4/Z, [x20, x28]\n"
    "ld1b { z0.b }, p3/Z, [x23, x27]\n"
    "ld1b { z31.b }, p3/Z, [x22, x27]\n"
    "ld1b { z22.b }, p3/Z, [x21, x27]\n"
    "ld1b { z30.b }, p3/Z, [x20, x27]\n"
    "ld1b { z29.b }, p2/Z, [x23, x26]\n"
    "ld1b { z28.b }, p2/Z, [x22, x26]\n"
    "ld1b { z21.b }, p2/Z, [x21, x26]\n"
    "ld1b { z27.b }, p2/Z, [x20, x26]\n"
    "ld1b { z26.b }, p1/Z, [x23, x25]\n"
    "ld1b { z25.b }, p1/Z, [x22, x25]\n"
    "ld1b { z20.b }, p1/Z, [x21, x25]\n"
    "ld1b { z24.b }, p1/Z, [x20, x25]\n"
    "beq 3f\n"
    "2:"  // 4-vectors of channels: 4 inputs loop
    "movprfx z19, z4\n umax z19.b, p0/M, z19.b, z3.b\n"
    "movprfx z23, z2\n umax z23.b, p0/M, z23.b, z1.b\n"
    "ldp x23, x22, [x19, #0x0]\n"
    "ldp x21, x20, [x19, #0x10]\n"
    "movprfx z18, z0\n umax z18.b, p0/M, z18.b, z31.b\n"
    "umax z22.b, p0/M, z22.b, z30.b\n"
    "ld1b { z4.b }, p4/Z, [x23, x28]\n"
    "ld1b { z3.b }, p4/Z, [x22, x28]\n"
    "movprfx z17, z29\n umax z17.b, p0/M, z17.b, z28.b\n"
    "umax z21.b, p0/M, z21.b, z27.b\n"
    "ld1b { z2.b }, p4/Z, [x21, x28]\n"
    "ld1b { z1.b }, p4/Z, [x20, x28]\n"
    "movprfx z16, z26\n umax z16.b, p0/M, z16.b, z25.b\n"
    "umax z20.b, p0/M, z20.b, z24.b\n"
    "ld1b { z0.b }, p3/Z, [x23, x27]\n"
    "ld1b { z31.b }, p3/Z, [x22, x27]\n"
    "umax z19.b, p0/M, z19.b, z23.b\n"
    "umax z18.b, p0/M, z18.b, z22.b\n"
    "ld1b { z22.b }, p3/Z, [x21, x27]\n"
    "ld1b { z30.b }, p3/Z, [x20, x27]\n"
    "umax z17.b, p0/M, z17.b, z21.b\n"
    "umax z16.b, p0/M, z16.b, z20.b\n"
    "ld1b { z29.b }, p2/Z, [x23, x26]\n"
    "ld1b { z28.b }, p2/Z, [x22, x26]\n"
    "subs x24, x24, #0x1\n"
    "umax z8.b, p0/M, z8.b, z19.b\n"
    "ld1b { z21.b }, p2/Z, [x21, x26]\n"
    "ld1b { z27.b }, p2/Z, [x20, x26]\n"
    "umax z7.b, p0/M, z7.b, z18.b\n"
    "umax z6.b, p0/M, z6.b, z17.b\n"
    "ld1b { z26.b }, p1/Z, [x23, x25]\n"
    "ld1b { z25.b }, p1/Z, [x22, x25]\n"
    "umax z5.b, p0/M, z5.b, z16.b\n"
    "add x19, x19, #0x20\n"
    "ld1b { z20.b }, p1/Z, [x21, x25]\n"
    "ld1b { z24.b }, p1/Z, [x20, x25]\n"
    "bgt 2b\n"
    "3:"  // 4-vectors of channels: 4 inputs tail
    "movprfx z19, z4\n umax z19.b, p0/M, z19.b, z3.b\n"
    "movprfx z23, z2\n umax z23.b, p0/M, z23.b, z1.b\n"
    "movprfx z18, z0\n umax z18.b, p0/M, z18.b, z31.b\n"
    "umax z22.b, p0/M, z22.b, z30.b\n"
    "movprfx z17, z29\n umax z17.b, p0/M, z17.b, z28.b\n"
    "umax z21.b, p0/M, z21.b, z27.b\n"
    "movprfx z16, z26\n umax z16.b, p0/M, z16.b, z25.b\n"
    "umax z20.b, p0/M, z20.b, z24.b\n"
    "umax z19.b, p0/M, z19.b, z23.b\n"
    "umax z18.b, p0/M, z18.b, z22.b\n"
    "umax z17.b, p0/M, z17.b, z21.b\n"
    "umax z16.b, p0/M, z16.b, z20.b\n"
    "umax z8.b, p0/M, z8.b, z19.b\n"
    "umax z7.b, p0/M, z7.b, z18.b\n"
    "umax z6.b, p0/M, z6.b, z17.b\n"
    "umax z5.b, p0/M, z5.b, z16.b\n"
    "4:"  // 4-vectors of channels: After loop
    "ands x20, %x[n_valid_cells], #0x3\n"
    "beq 6f\n"
    "5:"  // 4-vectors of channels: Single input loop
    "ldr x23, [x19], #0x8\n"
    "ld1b { z4.b }, p4/Z, [x23, x28]\n"
    "subs x20, x20, #0x1\n"
    "umax z8.b, p0/M, z8.b, z4.b\n"
    "ld1b { z0.b }, p3/Z, [x23, x27]\n"
    "ld1b { z29.b }, p2/Z, [x23, x26]\n"
    "umax z7.b, p0/M, z7.b, z0.b\n"
    "umax z6.b, p0/M, z6.b, z29.b\n"
    "ld1b { z26.b }, p1/Z, [x23, x25]\n"
    "umax z5.b, p0/M, z5.b, z26.b\n"
    "bgt 5b\n"
    "6:"  // 4-vectors of channels: Single input loop: End
    "add x19, %x[quant_params], %[offsetof_qp_input_offset]\n"
    "ld1rw { z4.s }, p0/Z, [x19]\n"
    ".inst 0x4508a918  // ushllb z24.h, z8.b, #0x0\n"
    ".inst 0x4508ad17  // ushllt z23.h, z8.b, #0x0\n"
    ".inst 0x4508a8f6  // ushllb z22.h, z7.b, #0x0\n"
    ".inst 0x4508acf5  // ushllt z21.h, z7.b, #0x0\n"
    "neg z4.s, p0/M, z4.s\n"
    "add x19, %x[quant_params], %[offsetof_qp_per_layer_left_shift]\n"
    ".inst 0x4508a8d4  // ushllb z20.h, z6.b, #0x0\n"
    ".inst 0x4508acd3  // ushllt z19.h, z6.b, #0x0\n"
    "ld1rw { z3.s }, p0/Z, [x19]\n"
    "add x19, %x[quant_params], %[offsetof_qp_per_layer_mul]\n"
    ".inst 0x4508a8b2  // ushllb z18.h, z5.b, #0x0\n"
    ".inst 0x4508acb1  // ushllt z17.h, z5.b, #0x0\n"
    "ld1rw { z16.s }, p0/Z, [x19]\n"
    "add x19, %x[quant_params], %[offsetof_qp_per_layer_right_shift]\n"
    ".inst 0x45984082  // saddwb z2.s, z4.s, z24.h\n"
    ".inst 0x45984481  // saddwt z1.s, z4.s, z24.h\n"
    ".inst 0x44828062  // srshl z2.s, p0/M, z2.s, z3.s\n"
    ".inst 0x44828061  // srshl z1.s, p0/M, z1.s, z3.s\n"
    ".inst 0x45974080  // saddwb z0.s, z4.s, z23.h\n"
    ".inst 0x4597449f  // saddwt z31.s, z4.s, z23.h\n"
    ".inst 0x44828060  // srshl z0.s, p0/M, z0.s, z3.s\n"
    ".inst 0x4482807f  // srshl z31.s, p0/M, z31.s, z3.s\n"
    ".inst 0x4596409e  // saddwb z30.s, z4.s, z22.h\n"
    ".inst 0x4596449d  // saddwt z29.s, z4.s, z22.h\n"
    ".inst 0x4482807e  // srshl z30.s, p0/M, z30.s, z3.s\n"
    ".inst 0x4482807d  // srshl z29.s, p0/M, z29.s, z3.s\n"
    ".inst 0x4595409c  // saddwb z28.s, z4.s, z21.h\n"
    ".inst 0x4595449b  // saddwt z27.s, z4.s, z21.h\n"
    ".inst 0x4482807c  // srshl z28.s, p0/M, z28.s, z3.s\n"
    ".inst 0x4482807b  // srshl z27.s, p0/M, z27.s, z3.s\n"
    ".inst 0x4594409a  // saddwb z26.s, z4.s, z20.h\n"
    ".inst 0x45944499  // saddwt z25.s, z4.s, z20.h\n"
    ".inst 0x4482807a  // srshl z26.s, p0/M, z26.s, z3.s\n"
    ".inst 0x44828079  // srshl z25.s, p0/M, z25.s, z3.s\n"
    ".inst 0x45934098  // saddwb z24.s, z4.s, z19.h\n"
    ".inst 0x45934497  // saddwt z23.s, z4.s, z19.h\n"
    ".inst 0x44828078  // srshl z24.s, p0/M, z24.s, z3.s\n"
    ".inst 0x44828077  // srshl z23.s, p0/M, z23.s, z3.s\n"
    ".inst 0x45924096  // saddwb z22.s, z4.s, z18.h\n"
    ".inst 0x45924495  // saddwt z21.s, z4.s, z18.h\n"
    ".inst 0x44828076  // srshl z22.s, p0/M, z22.s, z3.s\n"
    ".inst 0x44828075  // srshl z21.s, p0/M, z21.s, z3.s\n"
    ".inst 0x45914094  // saddwb z20.s, z4.s, z17.h\n"
    ".inst 0x45914493  // saddwt z19.s, z4.s, z17.h\n"
    ".inst 0x44828074  // srshl z20.s, p0/M, z20.s, z3.s\n"
    ".inst 0x44828073  // srshl z19.s, p0/M, z19.s, z3.s\n"
    "ld1rw { z17.s }, p0/Z, [x19]\n"
    ".inst 0x04b07442  // sqrdmulh z2.s, z2.s, z16.s\n"
    ".inst 0x04b07421  // sqrdmulh z1.s, z1.s, z16.s\n"
    "add x19, %x[quant_params], %[offsetof_qp_output_offset]\n"
    ".inst 0x04b07400  // sqrdmulh z0.s, z0.s, z16.s\n"
    ".inst 0x04b077ff  // sqrdmulh z31.s, z31.s, z16.s\n"
    ".inst 0x44828222  // srshl z2.s, p0/M, z2.s, z17.s\n"
    ".inst 0x44828221  // srshl z1.s, p0/M, z1.s, z17.s\n"
    ".inst 0x04b077de  // sqrdmulh z30.s, z30.s, z16.s\n"
    ".inst 0x04b077bd  // sqrdmulh z29.s, z29.s, z16.s\n"
    ".inst 0x44828220  // srshl z0.s, p0/M, z0.s, z17.s\n"
    ".inst 0x4482823f  // srshl z31.s, p0/M, z31.s, z17.s\n"
    ".inst 0x04b0779c  // sqrdmulh z28.s, z28.s, z16.s\n"
    ".inst 0x04b0777b  // sqrdmulh z27.s, z27.s, z16.s\n"
    ".inst 0x4482823e  // srshl z30.s, p0/M, z30.s, z17.s\n"
    ".inst 0x4482823d  // srshl z29.s, p0/M, z29.s, z17.s\n"
    ".inst 0x04b0775a  // sqrdmulh z26.s, z26.s, z16.s\n"
    ".inst 0x04b07739  // sqrdmulh z25.s, z25.s, z16.s\n"
    ".inst 0x4482823c  // srshl z28.s, p0/M, z28.s, z17.s\n"
    ".inst 0x4482823b  // srshl z27.s, p0/M, z27.s, z17.s\n"
    ".inst 0x04b07718  // sqrdmulh z24.s, z24.s, z16.s\n"
    ".inst 0x04b076f7  // sqrdmulh z23.s, z23.s, z16.s\n"
    ".inst 0x4482823a  // srshl z26.s, p0/M, z26.s, z17.s\n"
    ".inst 0x44828239  // srshl z25.s, p0/M, z25.s, z17.s\n"
    ".inst 0x04b076d6  // sqrdmulh z22.s, z22.s, z16.s\n"
    ".inst 0x04b076b5  // sqrdmulh z21.s, z21.s, z16.s\n"
    ".inst 0x44828238  // srshl z24.s, p0/M, z24.s, z17.s\n"
    ".inst 0x44828237  // srshl z23.s, p0/M, z23.s, z17.s\n"
    ".inst 0x04b07694  // sqrdmulh z20.s, z20.s, z16.s\n"
    ".inst 0x04b07673  // sqrdmulh z19.s, z19.s, z16.s\n"
    ".inst 0x44828236  // srshl z22.s, p0/M, z22.s, z17.s\n"
    ".inst 0x44828235  // srshl z21.s, p0/M, z21.s, z17.s\n"
    ".inst 0x44828234  // srshl z20.s, p0/M, z20.s, z17.s\n"
    ".inst 0x44828233  // srshl z19.s, p0/M, z19.s, z17.s\n"
    "ld1rw { z16.s }, p0/Z, [x19]\n"
    "add z2.s, z2.s, z16.s\n"
    "add z1.s, z1.s, z16.s\n"
    "add z0.s, z0.s, z16.s\n"
    "add z31.s, z31.s, z16.s\n"
    "add z30.s, z30.s, z16.s\n"
    "add z29.s, z29.s, z16.s\n"
    "add z28.s, z28.s, z16.s\n"
    "add z27.s, z27.s, z16.s\n"
    "add z26.s, z26.s, z16.s\n"
    "add z25.s, z25.s, z16.s\n"
    "add z24.s, z24.s, z16.s\n"
    "add z23.s, z23.s, z16.s\n"
    "add z22.s, z22.s, z16.s\n"
    "add z21.s, z21.s, z16.s\n"
    "add z20.s, z20.s, z16.s\n"
    "add z19.s, z19.s, z16.s\n"
    "mov z16.s, #0x0\n"
    "smax z2.s, p0/M, z2.s, z16.s\n"
    "smax z1.s, p0/M, z1.s, z16.s\n"
    "smax z0.s, p0/M, z0.s, z16.s\n"
    "smax z31.s, p0/M, z31.s, z16.s\n"
    "mov z18.s, #0xff\n"
    "smax z30.s, p0/M, z30.s, z16.s\n"
    "smax z29.s, p0/M, z29.s, z16.s\n"
    "smax z28.s, p0/M, z28.s, z16.s\n"
    "smax z27.s, p0/M, z27.s, z16.s\n"
    "smax z26.s, p0/M, z26.s, z16.s\n"
    "smax z25.s, p0/M, z25.s, z16.s\n"
    "smax z24.s, p0/M, z24.s, z16.s\n"
    "smax z23.s, p0/M, z23.s, z16.s\n"
    "smax z22.s, p0/M, z22.s, z16.s\n"
    "smax z21.s, p0/M, z21.s, z16.s\n"
    "smax z20.s, p0/M, z20.s, z16.s\n"
    "smax z19.s, p0/M, z19.s, z16.s\n"
    "smin z2.s, p0/M, z2.s, z18.s\n"
    "smin z1.s, p0/M, z1.s, z18.s\n"
    "trn1 z17.h, z2.h, z1.h\n"
    "smin z0.s, p0/M, z0.s, z18.s\n"
    "smin z31.s, p0/M, z31.s, z18.s\n"
    "trn1 z16.h, z0.h, z31.h\n"
    "trn1 z16.b, z17.b, z16.b\n"
    "smin z30.s, p0/M, z30.s, z18.s\n"
    "smin z29.s, p0/M, z29.s, z18.s\n"
    "trn1 z17.h, z30.h, z29.h\n"
    "st1b { z16.b }, p4, [%x[outptr], x28]\n"
    "smin z28.s, p0/M, z28.s, z18.s\n"
    "smin z27.s, p0/M, z27.s, z18.s\n"
    "trn1 z16.h, z28.h, z27.h\n"
    "trn1 z16.b, z17.b, z16.b\n"
    "smin z26.s, p0/M, z26.s, z18.s\n"
    "smin z25.s, p0/M, z25.s, z18.s\n"
    "trn1 z17.h, z26.h, z25.h\n"
    "st1b { z16.b }, p3, [%x[outptr], x27]\n"
    "smin z24.s, p0/M, z24.s, z18.s\n"
    "smin z23.s, p0/M, z23.s, z18.s\n"
    "trn1 z16.h, z24.h, z23.h\n"
    "trn1 z16.b, z17.b, z16.b\n"
    "smin z22.s, p0/M, z22.s, z18.s\n"
    "smin z21.s, p0/M, z21.s, z18.s\n"
    "trn1 z17.h, z22.h, z21.h\n"
    "st1b { z16.b }, p2, [%x[outptr], x26]\n"
    "smin z20.s, p0/M, z20.s, z18.s\n"
    "smin z19.s, p0/M, z19.s, z18.s\n"
    "trn1 z16.h, z20.h, z19.h\n"
    "trn1 z16.b, z17.b, z16.b\n"
    "st1b { z16.b }, p1, [%x[outptr], x25]\n"
    "incb x25, ALL, MUL #4\n"
    "whilelt p1.b, x25, %x[n_channels]\n"
    "incb x28, ALL, MUL #4\n"
    "incb x27, ALL, MUL #4\n"
    "incb x26, ALL, MUL #4\n"
    "b.any 1b\n"
    "7:"  // Single vector of channels
    "whilelt p4.b, x28, %x[n_channels]\n"
    "b.none 14f\n"
    "8:"  // Single vector of channels: Loop
    "lsr x24, %x[n_valid_cells], #0x2\n"
    "mov z8.b, #0x0\n"
    "mov x19, %x[inptrs]\n"
    "cbz x24, 11f\n"
    "ldp x23, x22, [x19, #0x0]\n"
    "ldp x21, x20, [x19, #0x10]\n"
    "subs x24, x24, #0x1\n"
    "add x19, x19, #0x20\n"
    "ld1b { z4.b }, p4/Z, [x23, x28]\n"
    "ld1b { z3.b }, p4/Z, [x22, x28]\n"
    "ld1b { z2.b }, p4/Z, [x21, x28]\n"
    "ld1b { z1.b }, p4/Z, [x20, x28]\n"
    "beq 10f\n"
    "9:"  // Single vector of channels: Loop: 4 inputs loop
    "movprfx z19, z4\n umax z19.b, p0/M, z19.b, z3.b\n"
    "movprfx z23, z2\n umax z23.b, p0/M, z23.b, z1.b\n"
    "ldp x23, x22, [x19, #0x0]\n"
    "ldp x21, x20, [x19, #0x10]\n"
    "umax z19.b, p0/M, z19.b, z23.b\n"
    "subs x24, x24, #0x1\n"
    "ld1b { z4.b }, p4/Z, [x23, x28]\n"
    "ld1b { z3.b }, p4/Z, [x22, x28]\n"
    "umax z8.b, p0/M, z8.b, z19.b\n"
    "add x19, x19, #0x20\n"
    "ld1b { z2.b }, p4/Z, [x21, x28]\n"
    "ld1b { z1.b }, p4/Z, [x20, x28]\n"
    "bgt 9b\n"
    "10:"  // Single vector of channels: Loop: 4 inputs tail
    "movprfx z19, z4\n umax z19.b, p0/M, z19.b, z3.b\n"
    "movprfx z23, z2\n umax z23.b, p0/M, z23.b, z1.b\n"
    "umax z19.b, p0/M, z19.b, z23.b\n"
    "umax z8.b, p0/M, z8.b, z19.b\n"
    "11:"  // Single vector of channels: Loop: After loop
    "ands x20, %x[n_valid_cells], #0x3\n"
    "beq 13f\n"
    "12:"  // Single vector of channels: Loop: Single input loop
    "ldr x23, [x19], #0x8\n"
    "ld1b { z4.b }, p4/Z, [x23, x28]\n"
    "subs x20, x20, #0x1\n"
    "umax z8.b, p0/M, z8.b, z4.b\n"
    "bgt 12b\n"
    "13:"  // Single vector of channels: Loop: Single input loop: End
    "add x19, %x[quant_params], %[offsetof_qp_input_offset]\n"
    "ld1rw { z4.s }, p0/Z, [x19]\n"
    ".inst 0x4508a918  // ushllb z24.h, z8.b, #0x0\n"
    ".inst 0x4508ad17  // ushllt z23.h, z8.b, #0x0\n"
    "neg z4.s, p0/M, z4.s\n"
    "add x19, %x[quant_params], %[offsetof_qp_per_layer_left_shift]\n"
    ".inst 0x45984082  // saddwb z2.s, z4.s, z24.h\n"
    ".inst 0x45984481  // saddwt z1.s, z4.s, z24.h\n"
    ".inst 0x45974080  // saddwb z0.s, z4.s, z23.h\n"
    ".inst 0x4597449f  // saddwt z31.s, z4.s, z23.h\n"
    "ld1rw { z3.s }, p0/Z, [x19]\n"
    "add x19, %x[quant_params], %[offsetof_qp_per_layer_mul]\n"
    "ld1rw { z16.s }, p0/Z, [x19]\n"
    ".inst 0x44828062  // srshl z2.s, p0/M, z2.s, z3.s\n"
    ".inst 0x44828061  // srshl z1.s, p0/M, z1.s, z3.s\n"
    ".inst 0x04b07442  // sqrdmulh z2.s, z2.s, z16.s\n"
    ".inst 0x44828060  // srshl z0.s, p0/M, z0.s, z3.s\n"
    ".inst 0x4482807f  // srshl z31.s, p0/M, z31.s, z3.s\n"
    ".inst 0x04b07421  // sqrdmulh z1.s, z1.s, z16.s\n"
    ".inst 0x04b07400  // sqrdmulh z0.s, z0.s, z16.s\n"
    "add x19, %x[quant_params], %[offsetof_qp_per_layer_right_shift]\n"
    "ld1rw { z17.s }, p0/Z, [x19]\n"
    ".inst 0x04b077ff  // sqrdmulh z31.s, z31.s, z16.s\n"
    "add x19, %x[quant_params], %[offsetof_qp_output_offset]\n"
    ".inst 0x44828222  // srshl z2.s, p0/M, z2.s, z17.s\n"
    ".inst 0x44828221  // srshl z1.s, p0/M, z1.s, z17.s\n"
    "ld1rw { z16.s }, p0/Z, [x19]\n"
    "add z2.s, z2.s, z16.s\n"
    ".inst 0x44828220  // srshl z0.s, p0/M, z0.s, z17.s\n"
    ".inst 0x4482823f  // srshl z31.s, p0/M, z31.s, z17.s\n"
    "add z1.s, z1.s, z16.s\n"
    "add z0.s, z0.s, z16.s\n"
    "add z31.s, z31.s, z16.s\n"
    "mov z16.s, #0x0\n"
    "smax z2.s, p0/M, z2.s, z16.s\n"
    "smax z1.s, p0/M, z1.s, z16.s\n"
    "smax z0.s, p0/M, z0.s, z16.s\n"
    "smax z31.s, p0/M, z31.s, z16.s\n"
    "mov z18.s, #0xff\n"
    "smin z2.s, p0/M, z2.s, z18.s\n"
    "smin z1.s, p0/M, z1.s, z18.s\n"
    "trn1 z17.h, z2.h, z1.h\n"
    "smin z0.s, p0/M, z0.s, z18.s\n"
    "smin z31.s, p0/M, z31.s, z18.s\n"
    "trn1 z16.h, z0.h, z31.h\n"
    "trn1 z16.b, z17.b, z16.b\n"
    "st1b { z16.b }, p4, [%x[outptr], x28]\n"
    "incb x28\n"
    "whilelt p4.b, x28, %x[n_channels]\n"
    "b.any 8b\n"
    "14:"  // End
    :
    : [inptrs] "r" (inptrs), [n_channels] "r" (n_channels), [n_valid_cells] "r" (n_valid_cells), [offsetof_qp_input_offset] "I" (offsetof(Requantize32, input_offset)), [offsetof_qp_output_offset] "I" (offsetof(Requantize32, output_offset)), [offsetof_qp_per_layer_left_shift] "I" (offsetof(Requantize32, per_layer_left_shift)), [offsetof_qp_per_layer_mul] "I" (offsetof(Requantize32, per_layer_mul)), [offsetof_qp_per_layer_right_shift] "I" (offsetof(Requantize32, per_layer_right_shift)), [outptr] "r" (outptr), [quant_params] "r" (&qp)
    : "cc", "memory", "p0", "p1", "p2", "p3", "p4", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
  );
}

}  // namespace pooling
}  // namespace arm_conv

#endif  // defined(ARM_COMPUTE_ENABLE_SVE)
