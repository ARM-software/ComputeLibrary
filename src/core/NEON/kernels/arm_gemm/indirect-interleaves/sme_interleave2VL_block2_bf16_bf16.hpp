/*
 * Copyright (c) 2022 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#if defined(__ARM_FEATURE_SVE)

template <>
void interleave_block<2, 2, VLType::SME, false>(
  bfloat16 * &out, const bfloat16 * const *in,
  size_t width, size_t height, size_t row_offset, bool first
)
{
  ARM_COMPUTE_UNUSED(first);

  __asm__ __volatile__(
      ".inst 0xd503477f  // SMSTART ZA\n"
      "cnth x20\n"
      "cntw x16\n"
      "cntw x15, ALL, MUL #2\n"
      "cntw x14, ALL, MUL #3\n"
      "mov x19, %x[width]\n"
      "inch x19\n"
      "sub x19, x19, #0x1\n"
      "udiv x19, x19, x20\n" // n_passes = ceildiv(width, VL<T>)
      "sub x13, x19, #0x1\n"
      "lsr x13, x13, #0x1\n" // n_loops = (n_passes - 1) / 2
      "and x11, x19, #0x1\n" // odd_tail = bool(n_passes & 0x1)
      "mov x19, %x[width]\n"
      "sub x10, x20, #0x1\n"
      "ands x10, x19, x10\n"
      "csel x10, x10, x20, NE\n"
      "add x10, x10, #0x1\n"
      "lsr x10, x10, #0x1\n"
      "sub x9, x16, #0x2\n"
      "ptrue p13.s\n"
      "lsl x20, %x[height], #0x1\n" // height * 2
      "lsl x19, x16, #0x1\n"
      "whilelt p12.h, XZR, x20\n"
      "whilelt p11.h, x19, x20\n"
      "mov x28, %x[row_offset]\n"
      "mov x27, %x[out]\n"
      "mov x26, #0x0\n"
      "whilelt p10.h, x26, %x[width]\n"
      "whilelt p9.h, x26, %x[width]\n"
      "whilelt p8.h, x26, %x[width]\n"
      "mov x25, %x[in]\n"
      "add x24, %x[in], x16, LSL #3\n"
      "ldr x23, [x25, #0x0]\n"
      "ldr x22, [x24, #0x0]\n"
      "ldr x21, [x25, #0x8]\n"
      "ldr x20, [x24, #0x8]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      "mov x12, #0x0\n"
      "cbz x9, 2f\n"
      "1:"  // K loop: Charge: Loop
      ".inst 0x25286580  // dup p0.h, p9.h/Z, p12.h[w12]\n"
      ".inst 0xe05c02e0  // ld1h { za0h.h[x12] }, p0/Z, [x23, x28, LSL #1]\n"
      ".inst 0x25286160  // dup p0.h, p8.h/Z, p11.h[w12]\n"
      ".inst 0xe05c02c8  // ld1h { za1h.h[x12] }, p0/Z, [x22, x28, LSL #1]\n"
      ".inst 0x25686580  // dup p0.h, p9.h/Z, p12.h[w12, #2]\n"
      ".inst 0xe05c02a2  // ld1h { za0h.h[x12, #2] }, p0/Z, [x21, x28, LSL #1]\n"
      ".inst 0x25686160  // dup p0.h, p8.h/Z, p11.h[w12, #2]\n"
      ".inst 0xe05c028a  // ld1h { za1h.h[x12, #2] }, p0/Z, [x20, x28, LSL #1]\n"
      "ldr x23, [x25, #0x0]\n"
      "ldr x22, [x24, #0x0]\n"
      "ldr x21, [x25, #0x8]\n"
      "ldr x20, [x24, #0x8]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      "add x12, x12, #0x4\n"
      "cmp x12, x9, LSL #1\n"
      "blt 1b\n"
      "2:"  // K loop: Charge: End
      ".inst 0x25286580  // dup p0.h, p9.h/Z, p12.h[w12]\n"
      ".inst 0xe05c02e0  // ld1h { za0h.h[x12] }, p0/Z, [x23, x28, LSL #1]\n"
      ".inst 0x25286160  // dup p0.h, p8.h/Z, p11.h[w12]\n"
      ".inst 0xe05c02c8  // ld1h { za1h.h[x12] }, p0/Z, [x22, x28, LSL #1]\n"
      ".inst 0x25686580  // dup p0.h, p9.h/Z, p12.h[w12, #2]\n"
      ".inst 0xe05c02a2  // ld1h { za0h.h[x12, #2] }, p0/Z, [x21, x28, LSL #1]\n"
      ".inst 0x25686160  // dup p0.h, p8.h/Z, p11.h[w12, #2]\n"
      ".inst 0xe05c028a  // ld1h { za1h.h[x12, #2] }, p0/Z, [x20, x28, LSL #1]\n"
      "mov x25, %x[in]\n"
      "add x24, %x[in], x16, LSL #3\n"
      "ldr x23, [x25, #0x0]\n"
      "ldr x22, [x24, #0x0]\n"
      "ldr x21, [x25, #0x8]\n"
      "ldr x20, [x24, #0x8]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      "inch x28\n"
      "inch x26\n"
      "cbz x13, 8f\n"
      "mov x19, x13\n"
      "3:"  // K loop: Main loop
      "whilelt p9.h, x26, %x[width]\n"
      "whilelt p8.h, x26, %x[width]\n"
      "mov x13, #0x0\n"
      "mov x12, #0x0\n"
      "cbz x9, 5f\n"
      "4:"  // K loop: Main loop: First: Loop
      ".inst 0x25396580  // dup p0.h, p9.h/Z, p12.h[w13, #1]\n"
      ".inst 0xe05c22e1  // ld1h { za0h.h[x13, #1] }, p0/Z, [x23, x28, LSL #1]\n"
      ".inst 0x25396160  // dup p0.h, p8.h/Z, p11.h[w13, #1]\n"
      ".inst 0xe05c22c9  // ld1h { za1h.h[x13, #1] }, p0/Z, [x22, x28, LSL #1]\n"
      ".inst 0x25796580  // dup p0.h, p9.h/Z, p12.h[w13, #3]\n"
      ".inst 0xe05c22a3  // ld1h { za0h.h[x13, #3] }, p0/Z, [x21, x28, LSL #1]\n"
      ".inst 0x25796160  // dup p0.h, p8.h/Z, p11.h[w13, #3]\n"
      ".inst 0xe05c228b  // ld1h { za1h.h[x13, #3] }, p0/Z, [x20, x28, LSL #1]\n"
      "ldr x23, [x25, #0x0]\n"
      "ldr x22, [x24, #0x0]\n"
      "ldr x21, [x25, #0x8]\n"
      "ldr x20, [x24, #0x8]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0bf8360  // st1w { za0v.s[x12] }, p0/Z, [x27, XZR, LSL #2]\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0x25707541  // dup p1.s, p13.s/Z, p10.s[w12, #1]\n"
      ".inst 0xe0b08364  // st1w { za1v.s[x12] }, p0/Z, [x27, x16, LSL #2]\n"
      ".inst 0x25707540  // dup p0.s, p13.s/Z, p10.s[w12, #1]\n"
      "add x13, x13, #0x4\n"
      ".inst 0xe0af8761  // st1w { za0v.s[x12, #1] }, p1/Z, [x27, x15, LSL #2]\n"
      ".inst 0xe0ae8365  // st1w { za1v.s[x12, #1] }, p0/Z, [x27, x14, LSL #2]\n"
      "addvl x27, x27, #4\n"
      "add x12, x12, #0x2\n"
      "cmp x12, x9\n"
      "blt 4b\n"
      "5:"  // K loop: Main loop: First: Tail
      "mov x25, %x[in]\n"
      "add x24, %x[in], x16, LSL #3\n"
      ".inst 0x25396580  // dup p0.h, p9.h/Z, p12.h[w13, #1]\n"
      ".inst 0xe05c22e1  // ld1h { za0h.h[x13, #1] }, p0/Z, [x23, x28, LSL #1]\n"
      ".inst 0x25396160  // dup p0.h, p8.h/Z, p11.h[w13, #1]\n"
      ".inst 0xe05c22c9  // ld1h { za1h.h[x13, #1] }, p0/Z, [x22, x28, LSL #1]\n"
      ".inst 0x25796580  // dup p0.h, p9.h/Z, p12.h[w13, #3]\n"
      ".inst 0xe05c22a3  // ld1h { za0h.h[x13, #3] }, p0/Z, [x21, x28, LSL #1]\n"
      ".inst 0x25796160  // dup p0.h, p8.h/Z, p11.h[w13, #3]\n"
      ".inst 0xe05c228b  // ld1h { za1h.h[x13, #3] }, p0/Z, [x20, x28, LSL #1]\n"
      "ldr x23, [x25, #0x0]\n"
      "ldr x22, [x24, #0x0]\n"
      "ldr x21, [x25, #0x8]\n"
      "ldr x20, [x24, #0x8]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0bf8360  // st1w { za0v.s[x12] }, p0/Z, [x27, XZR, LSL #2]\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0x25707541  // dup p1.s, p13.s/Z, p10.s[w12, #1]\n"
      ".inst 0xe0b08364  // st1w { za1v.s[x12] }, p0/Z, [x27, x16, LSL #2]\n"
      ".inst 0x25707540  // dup p0.s, p13.s/Z, p10.s[w12, #1]\n"
      "whilelt p10.h, x26, %x[width]\n"
      ".inst 0xe0af8761  // st1w { za0v.s[x12, #1] }, p1/Z, [x27, x15, LSL #2]\n"
      "inch x26\n"
      "inch x28\n"
      ".inst 0xe0ae8365  // st1w { za1v.s[x12, #1] }, p0/Z, [x27, x14, LSL #2]\n"
      "addvl x27, x27, #4\n"
      "whilelt p9.h, x26, %x[width]\n"
      "whilelt p8.h, x26, %x[width]\n"
      "mov x13, #0x0\n"
      "mov x12, #0x0\n"
      "cbz x9, 7f\n"
      "6:"  // K loop: Main loop: Second: Loop
      ".inst 0x25296580  // dup p0.h, p9.h/Z, p12.h[w13]\n"
      ".inst 0xe05c22e0  // ld1h { za0h.h[x13] }, p0/Z, [x23, x28, LSL #1]\n"
      ".inst 0x25296160  // dup p0.h, p8.h/Z, p11.h[w13]\n"
      ".inst 0xe05c22c8  // ld1h { za1h.h[x13] }, p0/Z, [x22, x28, LSL #1]\n"
      ".inst 0x25696580  // dup p0.h, p9.h/Z, p12.h[w13, #2]\n"
      ".inst 0xe05c22a2  // ld1h { za0h.h[x13, #2] }, p0/Z, [x21, x28, LSL #1]\n"
      ".inst 0x25696160  // dup p0.h, p8.h/Z, p11.h[w13, #2]\n"
      ".inst 0xe05c228a  // ld1h { za1h.h[x13, #2] }, p0/Z, [x20, x28, LSL #1]\n"
      "ldr x23, [x25, #0x0]\n"
      "ldr x22, [x24, #0x0]\n"
      "ldr x21, [x25, #0x8]\n"
      "ldr x20, [x24, #0x8]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0bf8368  // st1w { za2v.s[x12] }, p0/Z, [x27, XZR, LSL #2]\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0x25707541  // dup p1.s, p13.s/Z, p10.s[w12, #1]\n"
      ".inst 0xe0b0836c  // st1w { za3v.s[x12] }, p0/Z, [x27, x16, LSL #2]\n"
      ".inst 0x25707540  // dup p0.s, p13.s/Z, p10.s[w12, #1]\n"
      "add x13, x13, #0x4\n"
      ".inst 0xe0af8769  // st1w { za2v.s[x12, #1] }, p1/Z, [x27, x15, LSL #2]\n"
      ".inst 0xe0ae836d  // st1w { za3v.s[x12, #1] }, p0/Z, [x27, x14, LSL #2]\n"
      "addvl x27, x27, #4\n"
      "add x12, x12, #0x2\n"
      "cmp x12, x9\n"
      "blt 6b\n"
      "7:"  // K loop: Main loop: Second: Tail
      "mov x25, %x[in]\n"
      "add x24, %x[in], x16, LSL #3\n"
      ".inst 0x25296580  // dup p0.h, p9.h/Z, p12.h[w13]\n"
      ".inst 0xe05c22e0  // ld1h { za0h.h[x13] }, p0/Z, [x23, x28, LSL #1]\n"
      ".inst 0x25296160  // dup p0.h, p8.h/Z, p11.h[w13]\n"
      ".inst 0xe05c22c8  // ld1h { za1h.h[x13] }, p0/Z, [x22, x28, LSL #1]\n"
      ".inst 0x25696580  // dup p0.h, p9.h/Z, p12.h[w13, #2]\n"
      ".inst 0xe05c22a2  // ld1h { za0h.h[x13, #2] }, p0/Z, [x21, x28, LSL #1]\n"
      ".inst 0x25696160  // dup p0.h, p8.h/Z, p11.h[w13, #2]\n"
      ".inst 0xe05c228a  // ld1h { za1h.h[x13, #2] }, p0/Z, [x20, x28, LSL #1]\n"
      "ldr x23, [x25, #0x0]\n"
      "ldr x22, [x24, #0x0]\n"
      "ldr x21, [x25, #0x8]\n"
      "ldr x20, [x24, #0x8]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0bf8368  // st1w { za2v.s[x12] }, p0/Z, [x27, XZR, LSL #2]\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0x25707541  // dup p1.s, p13.s/Z, p10.s[w12, #1]\n"
      ".inst 0xe0b0836c  // st1w { za3v.s[x12] }, p0/Z, [x27, x16, LSL #2]\n"
      ".inst 0x25707540  // dup p0.s, p13.s/Z, p10.s[w12, #1]\n"
      "whilelt p10.h, x26, %x[width]\n"
      ".inst 0xe0af8769  // st1w { za2v.s[x12, #1] }, p1/Z, [x27, x15, LSL #2]\n"
      "inch x26\n"
      "inch x28\n"
      ".inst 0xe0ae836d  // st1w { za3v.s[x12, #1] }, p0/Z, [x27, x14, LSL #2]\n"
      "addvl x27, x27, #4\n"
      "subs x19, x19, #0x1\n"
      "bgt 3b\n"
      "8:"  // K loop: Tails
      "cbnz x11, 11f\n"
      "mov x25, %x[in]\n"
      "whilelt p9.h, x26, %x[width]\n"
      "whilelt p8.h, x26, %x[width]\n"
      "mov x13, #0x0\n"
      "mov x12, #0x0\n"
      "9:"  // K loop: Tails: Even: First
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0bf8360  // st1w { za0v.s[x12] }, p0/Z, [x27, XZR, LSL #2]\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0x25396581  // dup p1.h, p9.h/Z, p12.h[w13, #1]\n"
      ".inst 0xe0b08364  // st1w { za1v.s[x12] }, p0/Z, [x27, x16, LSL #2]\n"
      ".inst 0x25396160  // dup p0.h, p8.h/Z, p11.h[w13, #1]\n"
      "addvl x27, x27, #2\n"
      "ldr x23, [x25, #0x0]\n"
      ".inst 0xe05c26e1  // ld1h { za0h.h[x13, #1] }, p1/Z, [x23, x28, LSL #1]\n"
      "ldr x22, [x25, x16, LSL #0x3]\n"
      ".inst 0xe05c22c9  // ld1h { za1h.h[x13, #1] }, p0/Z, [x22, x28, LSL #1]\n"
      "add x12, x12, #0x1\n"
      "add x25, x25, #0x8\n"
      "add x13, x13, #0x2\n"
      "cmp x12, x16\n"
      "blt 9b\n"
      "whilelt p10.h, x26, %x[width]\n"
      "whilelt p9.h, x26, %x[width]\n"
      "whilelt p8.h, x26, %x[width]\n"
      "mov x19, #0x0\n"
      "mov x12, #0x0\n"
      "10:"  // K loop: Tails: Even: Second
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0bf8368  // st1w { za2v.s[x12] }, p0/Z, [x27, XZR, LSL #2]\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      "add x19, x19, #0x2\n"
      ".inst 0xe0b0836c  // st1w { za3v.s[x12] }, p0/Z, [x27, x16, LSL #2]\n"
      "addvl x27, x27, #2\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x10\n"
      "blt 10b\n"
      "whilelt p10.h, x26, %x[width]\n"
      "b 13f\n"
      "11:"  // K loop: Tails: Odd
      "mov x12, #0x0\n"
      "12:"  // K loop: Tails: Odd: Loop
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0bf8360  // st1w { za0v.s[x12] }, p0/Z, [x27, XZR, LSL #2]\n"
      ".inst 0x25307540  // dup p0.s, p13.s/Z, p10.s[w12]\n"
      ".inst 0xe0b08364  // st1w { za1v.s[x12] }, p0/Z, [x27, x16, LSL #2]\n"
      "addvl x27, x27, #2\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x10\n"
      "blt 12b\n"
      "13:"  // K loop: End
      "mov %x[out], x27\n"
      ".inst 0xd503467f  // SMSTOP\n"
      : [out] "+&r" (out)
      : [height] "r" (height), [in] "r" (in), [row_offset] "r" (row_offset), [width] "r" (width)
      : "cc", "memory", "p0", "p1", "p8", "p9", "p10", "p11", "p12", "p13", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
    );
}

#endif  // defined(__ARM_FEATURE_SVE)
