/*
 * Copyright (c) 2019-2020 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#ifdef __aarch64__

#include "arm_gemm.hpp"
#include "../../utils.hpp"

#include <cassert>
#include <cstdint>

namespace arm_gemm {

void a64_hybrid_s8qs_dot_6x16 (
    unsigned int num_strings, const unsigned int *string_lengths, IndirectInputArg<int8_t> A_arg,
    size_t M, size_t N, const int8_t *B_ptr, IndirectOutputArg<int8_t> output_arg,
    const Requantize32 *qp, const int32_t *col_bias, unsigned int col_base
)
{
    struct KernelArgs {
        const int32_t *multiplier_ptr = {};
        const int32_t *shift_ptr = {};
        unsigned int num_strings = {};
        const unsigned int *string_lengths = {};
        size_t N = {};
        const int8_t *B_ptr = {};
        size_t output_offset = {};
        size_t input_initial_col = {};
        size_t input_offset = {};
    } ka;

    unsigned long flags=0;
    void *output_ptr;
    void *input_ptr;

    if (output_arg.is_indirect) {
        output_ptr=(void *)(output_arg.indirect.ptr);
        ka.output_offset=output_arg.indirect.offset;
        flags |= 0x4;
    } else {
        output_ptr=(void *)(output_arg.direct.base);
        ka.output_offset=output_arg.direct.stride;
    }

    if (A_arg.is_indirect) {
        input_ptr=(void *)(A_arg.indirect.ptr);
        ka.input_offset=A_arg.indirect.start_row;
        ka.input_initial_col=A_arg.indirect.start_col;
        flags |= 0x8;
    } else {
        assert(num_strings==1);
        input_ptr=(void *)(A_arg.direct.base);
        ka.input_offset=A_arg.direct.stride;
    }
    ka.num_strings = num_strings;
    ka.string_lengths = string_lengths;
    ka.N = N;
    ka.B_ptr = B_ptr;
    if (qp->per_channel_requant) {
        flags |= 0x10;
        ka.multiplier_ptr=qp->per_channel_muls + col_base;
        ka.shift_ptr=qp->per_channel_right_shifts + col_base;
    }
    if (qp->c_offset > qp->minval) {
        flags |= 0x20;
    }
    __asm__ __volatile__(

      "1:"  // Row loop
      "cmp %x[M], #0x6\n"
      "bge 141f\n"
      "cmp %x[M], #0x4\n"
      "bgt 113f\n"
      "beq 85f\n"
      "cmp %x[M], #0x2\n"
      "bgt 57f\n"
      "beq 29f\n"
      "ldr x8, [%x[args_ptr], %[offsetof_multiplier_ptr]]\n"
      "ldr x17, [%x[args_ptr], %[offsetof_shift_ptr]]\n"
      "mov x16, %x[col_bias]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 2f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19\n"
      "b 3f\n"
      "2:"  // Height 1: setup direct output
      "mov x13, %x[output_ptr]\n"
      "3:"  // Height 1: Column loop
      "movi v8.4s, #0x0\n"
      "movi v9.4s, #0x0\n"
      "movi v10.4s, #0x0\n"
      "movi v11.4s, #0x0\n"
      "4:"  // Height 1: setup done
      "mov x12, #0x0\n"
      "5:"  // Height 1: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 6f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "cbnz x12, 7f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19\n"
      "b 7f\n"
      "6:"  // Height 1: setup direct input
      "mov x10, %x[input_ptr]\n"
      "7:"  // Height 1: input setup done
      "cmp x11, #0x10\n"
      "blt 10f\n"
      "cmp x11, #0x20\n"
      "blt 9f\n"
      "8:"  // Height 1: Multiply loop: Main loop head
      "ldr q0, [x10, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      "add x10, x10, #0x10\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      "sub x11, x11, #0x10\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      "cmp x11, #0x20\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      "bge 8b\n"
      "9:"  // Height 1: Multiply loop: Single iteration only
      "sub x11, x11, #0x10\n"
      "ldr q0, [x10, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      "add x10, x10, #0x10\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      "10:"  // Height 1: Multiply loop: Main loop skip
      "cbz x11, 15f\n"
      "cmp x11, #0x4\n"
      "blt 12f\n"
      "11:"  // Height 1: Multiply loop: Odd block loop
      "ldr s0, [x10], #0x4\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "sub x11, x11, #0x4\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      "cmp x11, #0x4\n"
      "bge 11b\n"
      "cbz x11, 15f\n"
      "12:"  // Height 1: Multiply loop: Skip odd blocks
      "tbz x11, #1, 13f\n"
      "ldr h0, [x10], #0x2\n"
      "tbz x11, #0, 14f\n"
      "ld1 { v0.b }[2], [x10]\n"
      "b 14f\n"
      "13:"  // Height 1: Multiply loop: Ragged operand read: partial_1_0
      "ldr b0, [x10, #0x0]\n"
      "14:"  // Height 1: Multiply loop: Ragged operand read: Done
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      "15:"  // Height 1: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x19\n"
      "bne 5b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "ldr q0, [x16, #0x0]\n"
      "add v8.4s, v8.4s, v0.4s\n"
      "ldr q1, [x16, #0x10]\n"
      "ldr q2, [x16, #0x20]\n"
      "add v9.4s, v9.4s, v1.4s\n"
      "ldr q3, [x16, #0x30]\n"
      "add v10.4s, v10.4s, v2.4s\n"
      "add x16, x16, #0x40\n"
      "add v11.4s, v11.4s, v3.4s\n"
      "tbz %x[flags], #4, 16f\n"
      "ldr q0, [x17, #0x0]\n"
      "ldr q4, [x8, #0x0]\n"
      "ldr q1, [x17, #0x10]\n"
      "ldr q5, [x8, #0x10]\n"
      "ldr q2, [x17, #0x20]\n"
      "ldr q6, [x8, #0x20]\n"
      "ldr q3, [x17, #0x30]\n"
      "ldr q7, [x8, #0x30]\n"
      "add x17, x17, #0x40\n"
      "add x8, x8, #0x40\n"
      "b 17f\n"
      "16:"  // Height 1: per layer parameters
      "add x19, %x[qp], %[per_layer_right_shift]\n"
      "ld1r { v0.4s }, [x19]\n"
      "mov v1.16b, v0.16b\n"
      "add x19, %x[qp], %[per_layer_mul]\n"
      "ld1r { v4.4s }, [x19]\n"
      "mov v2.16b, v0.16b\n"
      "mov v3.16b, v0.16b\n"
      "mov v5.16b, v4.16b\n"
      "mov v6.16b, v4.16b\n"
      "mov v7.16b, v4.16b\n"
      "17:"  // Height 1: parameters loaded
      "sqrdmulh v8.4s, v8.4s, v4.4s\n"
      "sqrdmulh v9.4s, v9.4s, v5.4s\n"
      "sqrdmulh v10.4s, v10.4s, v6.4s\n"
      "sqrdmulh v11.4s, v11.4s, v7.4s\n"
      "tbz %x[flags], #5, 18f\n"
      "and v4.16b, v8.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "and v5.16b, v9.16b, v1.16b\n"
      "and v6.16b, v10.16b, v2.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "and v7.16b, v11.16b, v3.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v8.4s, v8.4s, v4.4s\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v9.4s, v9.4s, v5.4s\n"
      "sqadd v10.4s, v10.4s, v6.4s\n"
      "sqadd v11.4s, v11.4s, v7.4s\n"
      "18:"  // Height 1: no shift correction
      "srshl v8.4s, v8.4s, v0.4s\n"
      "add x19, %x[qp], %[c_offset]\n"
      "ld1r { v4.4s }, [x19]\n"
      "srshl v9.4s, v9.4s, v1.4s\n"
      "add x19, %x[qp], %[minval]\n"
      "srshl v10.4s, v10.4s, v2.4s\n"
      "ld1r { v5.4s }, [x19]\n"
      "add x19, %x[qp], %[maxval]\n"
      "srshl v11.4s, v11.4s, v3.4s\n"
      "ld1r { v6.4s }, [x19]\n"
      "cmp x15, #0x10\n"
      "add v8.4s, v8.4s, v4.4s\n"
      "add v9.4s, v9.4s, v4.4s\n"
      "add v10.4s, v10.4s, v4.4s\n"
      "add v11.4s, v11.4s, v4.4s\n"
      "smin v8.4s, v8.4s, v6.4s\n"
      "smin v9.4s, v9.4s, v6.4s\n"
      "smin v10.4s, v10.4s, v6.4s\n"
      "smax v8.4s, v8.4s, v5.4s\n"
      "smax v9.4s, v9.4s, v5.4s\n"
      "smax v10.4s, v10.4s, v5.4s\n"
      "smin v11.4s, v11.4s, v6.4s\n"
      "uzp1 v8.8h, v8.8h, v9.8h\n"
      "smax v11.4s, v11.4s, v5.4s\n"
      "uzp1 v9.8h, v10.8h, v11.8h\n"
      "uzp1 v8.16b, v8.16b, v9.16b\n"
      "bge 27f\n"
      "tbz x15, #3, 22f\n"
      "str d8, [x13], #0x8\n"
      "tbz x15, #2, 20f\n"
      "st1 { v8.s }[2], [x13], #0x4\n"
      "tbz x15, #1, 19f\n"
      "st1 { v8.h }[6], [x13], #0x2\n"
      "tbz x15, #0, 26f\n"
      "st1 { v8.b }[14], [x13]\n"
      "b 26f\n"
      "19:"  // Height 1: Partial direct writeback: partial_1_12
      "tbz x15, #0, 26f\n"
      "st1 { v8.b }[12], [x13]\n"
      "b 26f\n"
      "20:"  // Height 1: Partial direct writeback: partial_2_8
      "tbz x15, #1, 21f\n"
      "st1 { v8.h }[4], [x13], #0x2\n"
      "tbz x15, #0, 26f\n"
      "st1 { v8.b }[10], [x13]\n"
      "b 26f\n"
      "21:"  // Height 1: Partial direct writeback: partial_1_8
      "tbz x15, #0, 26f\n"
      "st1 { v8.b }[8], [x13]\n"
      "b 26f\n"
      "22:"  // Height 1: Partial direct writeback: partial_4_0
      "tbz x15, #2, 24f\n"
      "str s8, [x13], #0x4\n"
      "tbz x15, #1, 23f\n"
      "st1 { v8.h }[2], [x13], #0x2\n"
      "tbz x15, #0, 26f\n"
      "st1 { v8.b }[6], [x13]\n"
      "b 26f\n"
      "23:"  // Height 1: Partial direct writeback: partial_1_4
      "tbz x15, #0, 26f\n"
      "st1 { v8.b }[4], [x13]\n"
      "b 26f\n"
      "24:"  // Height 1: Partial direct writeback: partial_2_0
      "tbz x15, #1, 25f\n"
      "str h8, [x13], #0x2\n"
      "tbz x15, #0, 26f\n"
      "st1 { v8.b }[2], [x13]\n"
      "b 26f\n"
      "25:"  // Height 1: Partial direct writeback: partial_1_0
      "str b8, [x13, #0x0]\n"
      "26:"  // Height 1: Partial direct writeback: Done
      "b 28f\n"
      "27:"  // Height 1: Full writeback
      "str q8, [x13, #0x0]\n"
      "add x13, x13, #0x10\n"
      "28:"  // Height 1: Writeback done
      "subs x15, x15, #0x10\n"
      "bgt 3b\n"
      "b 170f\n"
      "29:"  // Height 2
      "ldr x8, [%x[args_ptr], %[offsetof_multiplier_ptr]]\n"
      "mov x16, %x[col_bias]\n"
      "ldr x17, [%x[args_ptr], %[offsetof_shift_ptr]]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 30f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "add x9, x9, x19\n"
      "b 31f\n"
      "30:"  // Height 2: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19\n"
      "31:"  // Height 2: Column loop
      "movi v8.4s, #0x0\n"
      "movi v9.4s, #0x0\n"
      "movi v10.4s, #0x0\n"
      "movi v11.4s, #0x0\n"
      "movi v12.4s, #0x0\n"
      "movi v13.4s, #0x0\n"
      "movi v14.4s, #0x0\n"
      "movi v15.4s, #0x0\n"
      "32:"  // Height 2: setup done
      "mov x12, #0x0\n"
      "33:"  // Height 2: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 34f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "cbnz x12, 35f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19\n"
      "add x28, x28, x19\n"
      "b 35f\n"
      "34:"  // Height 2: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19\n"
      "35:"  // Height 2: input setup done
      "cmp x11, #0x10\n"
      "blt 38f\n"
      "cmp x11, #0x20\n"
      "blt 37f\n"
      "36:"  // Height 2: Multiply loop: Main loop head
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      "add x10, x10, #0x10\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "sub x11, x11, #0x10\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      "cmp x11, #0x20\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      "bge 36b\n"
      "37:"  // Height 2: Multiply loop: Single iteration only
      "sub x11, x11, #0x10\n"
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      "add x10, x10, #0x10\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      "38:"  // Height 2: Multiply loop: Main loop skip
      "cbz x11, 43f\n"
      "cmp x11, #0x4\n"
      "blt 40f\n"
      "39:"  // Height 2: Multiply loop: Odd block loop
      "ldr s0, [x10], #0x4\n"
      "ldr s1, [x28], #0x4\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      "sub x11, x11, #0x4\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "cmp x11, #0x4\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      "bge 39b\n"
      "cbz x11, 43f\n"
      "40:"  // Height 2: Multiply loop: Skip odd blocks
      "tbz x11, #1, 41f\n"
      "ldr h0, [x10], #0x2\n"
      "ldr h1, [x28], #0x2\n"
      "tbz x11, #0, 42f\n"
      "ld1 { v0.b }[2], [x10]\n"
      "ld1 { v1.b }[2], [x28]\n"
      "b 42f\n"
      "41:"  // Height 2: Multiply loop: Ragged operand read: partial_1_0
      "ldr b0, [x10, #0x0]\n"
      "ldr b1, [x28, #0x0]\n"
      "42:"  // Height 2: Multiply loop: Ragged operand read: Done
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      "43:"  // Height 2: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x19\n"
      "bne 33b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "ldr q0, [x16, #0x0]\n"
      "add v8.4s, v8.4s, v0.4s\n"
      "ldr q1, [x16, #0x10]\n"
      "add v12.4s, v12.4s, v0.4s\n"
      "ldr q2, [x16, #0x20]\n"
      "ldr q3, [x16, #0x30]\n"
      "add v9.4s, v9.4s, v1.4s\n"
      "add x16, x16, #0x40\n"
      "add v13.4s, v13.4s, v1.4s\n"
      "add v10.4s, v10.4s, v2.4s\n"
      "add v11.4s, v11.4s, v3.4s\n"
      "add v14.4s, v14.4s, v2.4s\n"
      "add v15.4s, v15.4s, v3.4s\n"
      "tbz %x[flags], #4, 44f\n"
      "ldr q0, [x17, #0x0]\n"
      "ldr q4, [x8, #0x0]\n"
      "ldr q1, [x17, #0x10]\n"
      "ldr q5, [x8, #0x10]\n"
      "ldr q2, [x17, #0x20]\n"
      "ldr q6, [x8, #0x20]\n"
      "ldr q3, [x17, #0x30]\n"
      "ldr q7, [x8, #0x30]\n"
      "add x17, x17, #0x40\n"
      "add x8, x8, #0x40\n"
      "b 45f\n"
      "44:"  // Height 2: per layer parameters
      "add x19, %x[qp], %[per_layer_right_shift]\n"
      "ld1r { v0.4s }, [x19]\n"
      "mov v1.16b, v0.16b\n"
      "add x19, %x[qp], %[per_layer_mul]\n"
      "ld1r { v4.4s }, [x19]\n"
      "mov v2.16b, v0.16b\n"
      "mov v3.16b, v0.16b\n"
      "mov v5.16b, v4.16b\n"
      "mov v6.16b, v4.16b\n"
      "mov v7.16b, v4.16b\n"
      "45:"  // Height 2: parameters loaded
      "sqrdmulh v8.4s, v8.4s, v4.4s\n"
      "sqrdmulh v9.4s, v9.4s, v5.4s\n"
      "sqrdmulh v10.4s, v10.4s, v6.4s\n"
      "sqrdmulh v11.4s, v11.4s, v7.4s\n"
      "sqrdmulh v12.4s, v12.4s, v4.4s\n"
      "sqrdmulh v13.4s, v13.4s, v5.4s\n"
      "sqrdmulh v14.4s, v14.4s, v6.4s\n"
      "sqrdmulh v15.4s, v15.4s, v7.4s\n"
      "tbz %x[flags], #5, 46f\n"
      "and v4.16b, v8.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "and v5.16b, v9.16b, v1.16b\n"
      "and v6.16b, v10.16b, v2.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "and v7.16b, v11.16b, v3.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v8.4s, v8.4s, v4.4s\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "and v4.16b, v12.16b, v0.16b\n"
      "sqadd v9.4s, v9.4s, v5.4s\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v10.4s, v10.4s, v6.4s\n"
      "and v5.16b, v13.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v11.4s, v11.4s, v7.4s\n"
      "and v6.16b, v14.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v12.4s, v12.4s, v4.4s\n"
      "and v7.16b, v15.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v13.4s, v13.4s, v5.4s\n"
      "sqadd v14.4s, v14.4s, v6.4s\n"
      "sqadd v15.4s, v15.4s, v7.4s\n"
      "46:"  // Height 2: no shift correction
      "srshl v8.4s, v8.4s, v0.4s\n"
      "add x19, %x[qp], %[c_offset]\n"
      "ld1r { v4.4s }, [x19]\n"
      "srshl v9.4s, v9.4s, v1.4s\n"
      "add x19, %x[qp], %[minval]\n"
      "srshl v10.4s, v10.4s, v2.4s\n"
      "ld1r { v5.4s }, [x19]\n"
      "add x19, %x[qp], %[maxval]\n"
      "srshl v11.4s, v11.4s, v3.4s\n"
      "ld1r { v6.4s }, [x19]\n"
      "cmp x15, #0x10\n"
      "srshl v12.4s, v12.4s, v0.4s\n"
      "srshl v13.4s, v13.4s, v1.4s\n"
      "srshl v14.4s, v14.4s, v2.4s\n"
      "srshl v15.4s, v15.4s, v3.4s\n"
      "add v8.4s, v8.4s, v4.4s\n"
      "add v9.4s, v9.4s, v4.4s\n"
      "add v10.4s, v10.4s, v4.4s\n"
      "smin v8.4s, v8.4s, v6.4s\n"
      "smin v9.4s, v9.4s, v6.4s\n"
      "smin v10.4s, v10.4s, v6.4s\n"
      "smax v8.4s, v8.4s, v5.4s\n"
      "smax v9.4s, v9.4s, v5.4s\n"
      "smax v10.4s, v10.4s, v5.4s\n"
      "add v11.4s, v11.4s, v4.4s\n"
      "add v12.4s, v12.4s, v4.4s\n"
      "add v13.4s, v13.4s, v4.4s\n"
      "smin v11.4s, v11.4s, v6.4s\n"
      "smin v12.4s, v12.4s, v6.4s\n"
      "smin v13.4s, v13.4s, v6.4s\n"
      "smax v11.4s, v11.4s, v5.4s\n"
      "smax v12.4s, v12.4s, v5.4s\n"
      "smax v13.4s, v13.4s, v5.4s\n"
      "add v14.4s, v14.4s, v4.4s\n"
      "add v15.4s, v15.4s, v4.4s\n"
      "uzp1 v8.8h, v8.8h, v9.8h\n"
      "smin v14.4s, v14.4s, v6.4s\n"
      "smin v15.4s, v15.4s, v6.4s\n"
      "uzp1 v9.8h, v10.8h, v11.8h\n"
      "smax v14.4s, v14.4s, v5.4s\n"
      "smax v15.4s, v15.4s, v5.4s\n"
      "uzp1 v12.8h, v12.8h, v13.8h\n"
      "uzp1 v8.16b, v8.16b, v9.16b\n"
      "uzp1 v13.8h, v14.8h, v15.8h\n"
      "uzp1 v12.16b, v12.16b, v13.16b\n"
      "bge 55f\n"
      "tbz x15, #3, 50f\n"
      "str d8, [x13], #0x8\n"
      "str d12, [x9], #0x8\n"
      "tbz x15, #2, 48f\n"
      "st1 { v8.s }[2], [x13], #0x4\n"
      "st1 { v12.s }[2], [x9], #0x4\n"
      "tbz x15, #1, 47f\n"
      "st1 { v8.h }[6], [x13], #0x2\n"
      "st1 { v12.h }[6], [x9], #0x2\n"
      "tbz x15, #0, 54f\n"
      "st1 { v8.b }[14], [x13]\n"
      "st1 { v12.b }[14], [x9]\n"
      "b 54f\n"
      "47:"  // Height 2: Partial direct writeback: partial_1_12
      "tbz x15, #0, 54f\n"
      "st1 { v8.b }[12], [x13]\n"
      "st1 { v12.b }[12], [x9]\n"
      "b 54f\n"
      "48:"  // Height 2: Partial direct writeback: partial_2_8
      "tbz x15, #1, 49f\n"
      "st1 { v8.h }[4], [x13], #0x2\n"
      "st1 { v12.h }[4], [x9], #0x2\n"
      "tbz x15, #0, 54f\n"
      "st1 { v8.b }[10], [x13]\n"
      "st1 { v12.b }[10], [x9]\n"
      "b 54f\n"
      "49:"  // Height 2: Partial direct writeback: partial_1_8
      "tbz x15, #0, 54f\n"
      "st1 { v8.b }[8], [x13]\n"
      "st1 { v12.b }[8], [x9]\n"
      "b 54f\n"
      "50:"  // Height 2: Partial direct writeback: partial_4_0
      "tbz x15, #2, 52f\n"
      "str s8, [x13], #0x4\n"
      "str s12, [x9], #0x4\n"
      "tbz x15, #1, 51f\n"
      "st1 { v8.h }[2], [x13], #0x2\n"
      "st1 { v12.h }[2], [x9], #0x2\n"
      "tbz x15, #0, 54f\n"
      "st1 { v8.b }[6], [x13]\n"
      "st1 { v12.b }[6], [x9]\n"
      "b 54f\n"
      "51:"  // Height 2: Partial direct writeback: partial_1_4
      "tbz x15, #0, 54f\n"
      "st1 { v8.b }[4], [x13]\n"
      "st1 { v12.b }[4], [x9]\n"
      "b 54f\n"
      "52:"  // Height 2: Partial direct writeback: partial_2_0
      "tbz x15, #1, 53f\n"
      "str h8, [x13], #0x2\n"
      "str h12, [x9], #0x2\n"
      "tbz x15, #0, 54f\n"
      "st1 { v8.b }[2], [x13]\n"
      "st1 { v12.b }[2], [x9]\n"
      "b 54f\n"
      "53:"  // Height 2: Partial direct writeback: partial_1_0
      "str b8, [x13, #0x0]\n"
      "str b12, [x9, #0x0]\n"
      "54:"  // Height 2: Partial direct writeback: Done
      "b 56f\n"
      "55:"  // Height 2: Full writeback
      "str q8, [x13, #0x0]\n"
      "str q12, [x9, #0x0]\n"
      "add x13, x13, #0x10\n"
      "add x9, x9, #0x10\n"
      "56:"  // Height 2: Writeback done
      "subs x15, x15, #0x10\n"
      "bgt 31b\n"
      "b 170f\n"
      "57:"  // Height 3
      "ldr x8, [%x[args_ptr], %[offsetof_multiplier_ptr]]\n"
      "mov x16, %x[col_bias]\n"
      "ldr x17, [%x[args_ptr], %[offsetof_shift_ptr]]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 58f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19\n"
      "add x27, x27, x19\n"
      "b 59f\n"
      "58:"  // Height 3: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19\n"
      "add x27, x9, x19\n"
      "59:"  // Height 3: Column loop
      "movi v8.4s, #0x0\n"
      "movi v9.4s, #0x0\n"
      "movi v10.4s, #0x0\n"
      "movi v11.4s, #0x0\n"
      "movi v12.4s, #0x0\n"
      "movi v13.4s, #0x0\n"
      "movi v14.4s, #0x0\n"
      "movi v15.4s, #0x0\n"
      "movi v16.4s, #0x0\n"
      "movi v17.4s, #0x0\n"
      "movi v18.4s, #0x0\n"
      "movi v19.4s, #0x0\n"
      "60:"  // Height 3: setup done
      "mov x12, #0x0\n"
      "61:"  // Height 3: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 62f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "cbnz x12, 63f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19\n"
      "add x28, x28, x19\n"
      "add x26, x26, x19\n"
      "b 63f\n"
      "62:"  // Height 3: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19\n"
      "add x26, x28, x19\n"
      "63:"  // Height 3: input setup done
      "cmp x11, #0x10\n"
      "blt 66f\n"
      "cmp x11, #0x20\n"
      "blt 65f\n"
      "64:"  // Height 3: Multiply loop: Main loop head
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x28, x28, #0x10\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "sub x11, x11, #0x10\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      "cmp x11, #0x20\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      "bge 64b\n"
      "65:"  // Height 3: Multiply loop: Single iteration only
      "sub x11, x11, #0x10\n"
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x28, x28, #0x10\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      "66:"  // Height 3: Multiply loop: Main loop skip
      "cbz x11, 71f\n"
      "cmp x11, #0x4\n"
      "blt 68f\n"
      "67:"  // Height 3: Multiply loop: Odd block loop
      "ldr s0, [x10], #0x4\n"
      "ldr s1, [x28], #0x4\n"
      "ldr s2, [x26], #0x4\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "sub x11, x11, #0x4\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      "cmp x11, #0x4\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      "bge 67b\n"
      "cbz x11, 71f\n"
      "68:"  // Height 3: Multiply loop: Skip odd blocks
      "tbz x11, #1, 69f\n"
      "ldr h0, [x10], #0x2\n"
      "ldr h1, [x28], #0x2\n"
      "ldr h2, [x26], #0x2\n"
      "tbz x11, #0, 70f\n"
      "ld1 { v0.b }[2], [x10]\n"
      "ld1 { v1.b }[2], [x28]\n"
      "ld1 { v2.b }[2], [x26]\n"
      "b 70f\n"
      "69:"  // Height 3: Multiply loop: Ragged operand read: partial_1_0
      "ldr b0, [x10, #0x0]\n"
      "ldr b1, [x28, #0x0]\n"
      "ldr b2, [x26, #0x0]\n"
      "70:"  // Height 3: Multiply loop: Ragged operand read: Done
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      "71:"  // Height 3: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x19\n"
      "bne 61b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "ldr q0, [x16, #0x0]\n"
      "add v8.4s, v8.4s, v0.4s\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "ldr q1, [x16, #0x10]\n"
      "add v12.4s, v12.4s, v0.4s\n"
      "ldr q2, [x16, #0x20]\n"
      "add v16.4s, v16.4s, v0.4s\n"
      "ldr q3, [x16, #0x30]\n"
      "add x16, x16, #0x40\n"
      "add v9.4s, v9.4s, v1.4s\n"
      "add v13.4s, v13.4s, v1.4s\n"
      "add v10.4s, v10.4s, v2.4s\n"
      "add v11.4s, v11.4s, v3.4s\n"
      "add v14.4s, v14.4s, v2.4s\n"
      "add v15.4s, v15.4s, v3.4s\n"
      "add v17.4s, v17.4s, v1.4s\n"
      "add v18.4s, v18.4s, v2.4s\n"
      "add v19.4s, v19.4s, v3.4s\n"
      "tbz %x[flags], #4, 72f\n"
      "ldr q0, [x17, #0x0]\n"
      "ldr q4, [x8, #0x0]\n"
      "ldr q1, [x17, #0x10]\n"
      "ldr q5, [x8, #0x10]\n"
      "ldr q2, [x17, #0x20]\n"
      "ldr q6, [x8, #0x20]\n"
      "ldr q3, [x17, #0x30]\n"
      "ldr q7, [x8, #0x30]\n"
      "add x17, x17, #0x40\n"
      "add x8, x8, #0x40\n"
      "b 73f\n"
      "72:"  // Height 3: per layer parameters
      "add x19, %x[qp], %[per_layer_right_shift]\n"
      "ld1r { v0.4s }, [x19]\n"
      "mov v1.16b, v0.16b\n"
      "add x19, %x[qp], %[per_layer_mul]\n"
      "ld1r { v4.4s }, [x19]\n"
      "mov v2.16b, v0.16b\n"
      "mov v3.16b, v0.16b\n"
      "mov v5.16b, v4.16b\n"
      "mov v6.16b, v4.16b\n"
      "mov v7.16b, v4.16b\n"
      "73:"  // Height 3: parameters loaded
      "sqrdmulh v8.4s, v8.4s, v4.4s\n"
      "sqrdmulh v9.4s, v9.4s, v5.4s\n"
      "sqrdmulh v10.4s, v10.4s, v6.4s\n"
      "sqrdmulh v11.4s, v11.4s, v7.4s\n"
      "sqrdmulh v12.4s, v12.4s, v4.4s\n"
      "sqrdmulh v13.4s, v13.4s, v5.4s\n"
      "sqrdmulh v14.4s, v14.4s, v6.4s\n"
      "sqrdmulh v15.4s, v15.4s, v7.4s\n"
      "sqrdmulh v16.4s, v16.4s, v4.4s\n"
      "sqrdmulh v17.4s, v17.4s, v5.4s\n"
      "sqrdmulh v18.4s, v18.4s, v6.4s\n"
      "sqrdmulh v19.4s, v19.4s, v7.4s\n"
      "tbz %x[flags], #5, 74f\n"
      "and v4.16b, v8.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "and v5.16b, v9.16b, v1.16b\n"
      "and v6.16b, v10.16b, v2.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "and v7.16b, v11.16b, v3.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v8.4s, v8.4s, v4.4s\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "and v4.16b, v12.16b, v0.16b\n"
      "sqadd v9.4s, v9.4s, v5.4s\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v10.4s, v10.4s, v6.4s\n"
      "and v5.16b, v13.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v11.4s, v11.4s, v7.4s\n"
      "and v6.16b, v14.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v12.4s, v12.4s, v4.4s\n"
      "and v7.16b, v15.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v13.4s, v13.4s, v5.4s\n"
      "and v4.16b, v16.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v14.4s, v14.4s, v6.4s\n"
      "and v5.16b, v17.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v15.4s, v15.4s, v7.4s\n"
      "and v6.16b, v18.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v16.4s, v16.4s, v4.4s\n"
      "and v7.16b, v19.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v17.4s, v17.4s, v5.4s\n"
      "sqadd v18.4s, v18.4s, v6.4s\n"
      "sqadd v19.4s, v19.4s, v7.4s\n"
      "74:"  // Height 3: no shift correction
      "srshl v8.4s, v8.4s, v0.4s\n"
      "add x19, %x[qp], %[c_offset]\n"
      "ld1r { v4.4s }, [x19]\n"
      "srshl v9.4s, v9.4s, v1.4s\n"
      "add x19, %x[qp], %[minval]\n"
      "srshl v10.4s, v10.4s, v2.4s\n"
      "ld1r { v5.4s }, [x19]\n"
      "add x19, %x[qp], %[maxval]\n"
      "srshl v11.4s, v11.4s, v3.4s\n"
      "ld1r { v6.4s }, [x19]\n"
      "cmp x15, #0x10\n"
      "srshl v12.4s, v12.4s, v0.4s\n"
      "srshl v13.4s, v13.4s, v1.4s\n"
      "srshl v14.4s, v14.4s, v2.4s\n"
      "srshl v15.4s, v15.4s, v3.4s\n"
      "add v8.4s, v8.4s, v4.4s\n"
      "add v9.4s, v9.4s, v4.4s\n"
      "add v10.4s, v10.4s, v4.4s\n"
      "smin v8.4s, v8.4s, v6.4s\n"
      "smin v9.4s, v9.4s, v6.4s\n"
      "smin v10.4s, v10.4s, v6.4s\n"
      "smax v8.4s, v8.4s, v5.4s\n"
      "smax v9.4s, v9.4s, v5.4s\n"
      "smax v10.4s, v10.4s, v5.4s\n"
      "add v11.4s, v11.4s, v4.4s\n"
      "add v12.4s, v12.4s, v4.4s\n"
      "add v13.4s, v13.4s, v4.4s\n"
      "smin v11.4s, v11.4s, v6.4s\n"
      "smin v12.4s, v12.4s, v6.4s\n"
      "smin v13.4s, v13.4s, v6.4s\n"
      "smax v11.4s, v11.4s, v5.4s\n"
      "smax v12.4s, v12.4s, v5.4s\n"
      "smax v13.4s, v13.4s, v5.4s\n"
      "add v14.4s, v14.4s, v4.4s\n"
      "add v15.4s, v15.4s, v4.4s\n"
      "srshl v16.4s, v16.4s, v0.4s\n"
      "smin v14.4s, v14.4s, v6.4s\n"
      "smin v15.4s, v15.4s, v6.4s\n"
      "srshl v17.4s, v17.4s, v1.4s\n"
      "smax v14.4s, v14.4s, v5.4s\n"
      "smax v15.4s, v15.4s, v5.4s\n"
      "add v16.4s, v16.4s, v4.4s\n"
      "add v17.4s, v17.4s, v4.4s\n"
      "srshl v18.4s, v18.4s, v2.4s\n"
      "smin v16.4s, v16.4s, v6.4s\n"
      "smin v17.4s, v17.4s, v6.4s\n"
      "srshl v19.4s, v19.4s, v3.4s\n"
      "smax v16.4s, v16.4s, v5.4s\n"
      "smax v17.4s, v17.4s, v5.4s\n"
      "add v18.4s, v18.4s, v4.4s\n"
      "add v19.4s, v19.4s, v4.4s\n"
      "uzp1 v8.8h, v8.8h, v9.8h\n"
      "smin v18.4s, v18.4s, v6.4s\n"
      "smin v19.4s, v19.4s, v6.4s\n"
      "uzp1 v9.8h, v10.8h, v11.8h\n"
      "smax v18.4s, v18.4s, v5.4s\n"
      "smax v19.4s, v19.4s, v5.4s\n"
      "uzp1 v12.8h, v12.8h, v13.8h\n"
      "uzp1 v13.8h, v14.8h, v15.8h\n"
      "uzp1 v16.8h, v16.8h, v17.8h\n"
      "uzp1 v17.8h, v18.8h, v19.8h\n"
      "uzp1 v8.16b, v8.16b, v9.16b\n"
      "uzp1 v12.16b, v12.16b, v13.16b\n"
      "uzp1 v16.16b, v16.16b, v17.16b\n"
      "bge 83f\n"
      "tbz x15, #3, 78f\n"
      "str d8, [x13], #0x8\n"
      "str d12, [x9], #0x8\n"
      "str d16, [x27], #0x8\n"
      "tbz x15, #2, 76f\n"
      "st1 { v8.s }[2], [x13], #0x4\n"
      "st1 { v12.s }[2], [x9], #0x4\n"
      "st1 { v16.s }[2], [x27], #0x4\n"
      "tbz x15, #1, 75f\n"
      "st1 { v8.h }[6], [x13], #0x2\n"
      "st1 { v12.h }[6], [x9], #0x2\n"
      "st1 { v16.h }[6], [x27], #0x2\n"
      "tbz x15, #0, 82f\n"
      "st1 { v8.b }[14], [x13]\n"
      "st1 { v12.b }[14], [x9]\n"
      "st1 { v16.b }[14], [x27]\n"
      "b 82f\n"
      "75:"  // Height 3: Partial direct writeback: partial_1_12
      "tbz x15, #0, 82f\n"
      "st1 { v8.b }[12], [x13]\n"
      "st1 { v12.b }[12], [x9]\n"
      "st1 { v16.b }[12], [x27]\n"
      "b 82f\n"
      "76:"  // Height 3: Partial direct writeback: partial_2_8
      "tbz x15, #1, 77f\n"
      "st1 { v8.h }[4], [x13], #0x2\n"
      "st1 { v12.h }[4], [x9], #0x2\n"
      "st1 { v16.h }[4], [x27], #0x2\n"
      "tbz x15, #0, 82f\n"
      "st1 { v8.b }[10], [x13]\n"
      "st1 { v12.b }[10], [x9]\n"
      "st1 { v16.b }[10], [x27]\n"
      "b 82f\n"
      "77:"  // Height 3: Partial direct writeback: partial_1_8
      "tbz x15, #0, 82f\n"
      "st1 { v8.b }[8], [x13]\n"
      "st1 { v12.b }[8], [x9]\n"
      "st1 { v16.b }[8], [x27]\n"
      "b 82f\n"
      "78:"  // Height 3: Partial direct writeback: partial_4_0
      "tbz x15, #2, 80f\n"
      "str s8, [x13], #0x4\n"
      "str s12, [x9], #0x4\n"
      "str s16, [x27], #0x4\n"
      "tbz x15, #1, 79f\n"
      "st1 { v8.h }[2], [x13], #0x2\n"
      "st1 { v12.h }[2], [x9], #0x2\n"
      "st1 { v16.h }[2], [x27], #0x2\n"
      "tbz x15, #0, 82f\n"
      "st1 { v8.b }[6], [x13]\n"
      "st1 { v12.b }[6], [x9]\n"
      "st1 { v16.b }[6], [x27]\n"
      "b 82f\n"
      "79:"  // Height 3: Partial direct writeback: partial_1_4
      "tbz x15, #0, 82f\n"
      "st1 { v8.b }[4], [x13]\n"
      "st1 { v12.b }[4], [x9]\n"
      "st1 { v16.b }[4], [x27]\n"
      "b 82f\n"
      "80:"  // Height 3: Partial direct writeback: partial_2_0
      "tbz x15, #1, 81f\n"
      "str h8, [x13], #0x2\n"
      "str h12, [x9], #0x2\n"
      "str h16, [x27], #0x2\n"
      "tbz x15, #0, 82f\n"
      "st1 { v8.b }[2], [x13]\n"
      "st1 { v12.b }[2], [x9]\n"
      "st1 { v16.b }[2], [x27]\n"
      "b 82f\n"
      "81:"  // Height 3: Partial direct writeback: partial_1_0
      "str b8, [x13, #0x0]\n"
      "str b12, [x9, #0x0]\n"
      "str b16, [x27, #0x0]\n"
      "82:"  // Height 3: Partial direct writeback: Done
      "b 84f\n"
      "83:"  // Height 3: Full writeback
      "str q8, [x13, #0x0]\n"
      "str q12, [x9, #0x0]\n"
      "str q16, [x27, #0x0]\n"
      "add x13, x13, #0x10\n"
      "add x9, x9, #0x10\n"
      "add x27, x27, #0x10\n"
      "84:"  // Height 3: Writeback done
      "subs x15, x15, #0x10\n"
      "bgt 59b\n"
      "b 170f\n"
      "85:"  // Height 4
      "ldr x8, [%x[args_ptr], %[offsetof_multiplier_ptr]]\n"
      "mov x16, %x[col_bias]\n"
      "ldr x17, [%x[args_ptr], %[offsetof_shift_ptr]]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 86f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19\n"
      "ldr x25, [%x[output_ptr], #0x18]\n"
      "add x27, x27, x19\n"
      "add x25, x25, x19\n"
      "b 87f\n"
      "86:"  // Height 4: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19\n"
      "add x27, x9, x19\n"
      "add x25, x27, x19\n"
      "87:"  // Height 4: Column loop
      "movi v8.4s, #0x0\n"
      "movi v9.4s, #0x0\n"
      "movi v10.4s, #0x0\n"
      "movi v11.4s, #0x0\n"
      "movi v12.4s, #0x0\n"
      "movi v13.4s, #0x0\n"
      "movi v14.4s, #0x0\n"
      "movi v15.4s, #0x0\n"
      "movi v16.4s, #0x0\n"
      "movi v17.4s, #0x0\n"
      "movi v18.4s, #0x0\n"
      "movi v19.4s, #0x0\n"
      "movi v20.4s, #0x0\n"
      "movi v21.4s, #0x0\n"
      "movi v22.4s, #0x0\n"
      "movi v23.4s, #0x0\n"
      "88:"  // Height 4: setup done
      "mov x12, #0x0\n"
      "89:"  // Height 4: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 90f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "ldr x24, [x20, #0x18]\n"
      "cbnz x12, 91f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19\n"
      "add x28, x28, x19\n"
      "add x26, x26, x19\n"
      "add x24, x24, x19\n"
      "b 91f\n"
      "90:"  // Height 4: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19\n"
      "add x26, x28, x19\n"
      "add x24, x26, x19\n"
      "91:"  // Height 4: input setup done
      "cmp x11, #0x10\n"
      "blt 94f\n"
      "cmp x11, #0x20\n"
      "blt 93f\n"
      "92:"  // Height 4: Multiply loop: Main loop head
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x26, x26, #0x10\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "sub x11, x11, #0x10\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "cmp x11, #0x20\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d4  // sdot v20.4s, v6.16b, v3.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f5  // sdot v21.4s, v7.16b, v3.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d6  // sdot v22.4s, v6.16b, v3.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f7  // sdot v23.4s, v7.16b, v3.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d4  // sdot v20.4s, v6.16b, v3.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f5  // sdot v21.4s, v7.16b, v3.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d6  // sdot v22.4s, v6.16b, v3.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f7  // sdot v23.4s, v7.16b, v3.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d4  // sdot v20.4s, v6.16b, v3.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f5  // sdot v21.4s, v7.16b, v3.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d6  // sdot v22.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f7  // sdot v23.4s, v7.16b, v3.4b[3]\n"
      "bge 92b\n"
      "93:"  // Height 4: Multiply loop: Single iteration only
      "sub x11, x11, #0x10\n"
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x26, x26, #0x10\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d4  // sdot v20.4s, v6.16b, v3.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f5  // sdot v21.4s, v7.16b, v3.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d6  // sdot v22.4s, v6.16b, v3.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f7  // sdot v23.4s, v7.16b, v3.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d4  // sdot v20.4s, v6.16b, v3.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f5  // sdot v21.4s, v7.16b, v3.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d6  // sdot v22.4s, v6.16b, v3.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f7  // sdot v23.4s, v7.16b, v3.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d4  // sdot v20.4s, v6.16b, v3.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f5  // sdot v21.4s, v7.16b, v3.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d6  // sdot v22.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f7  // sdot v23.4s, v7.16b, v3.4b[3]\n"
      "94:"  // Height 4: Multiply loop: Main loop skip
      "cbz x11, 99f\n"
      "cmp x11, #0x4\n"
      "blt 96f\n"
      "95:"  // Height 4: Multiply loop: Odd block loop
      "ldr s0, [x10], #0x4\n"
      "ldr s1, [x28], #0x4\n"
      "ldr s2, [x26], #0x4\n"
      "ldr s3, [x24], #0x4\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "sub x11, x11, #0x4\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "cmp x11, #0x4\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      "bge 95b\n"
      "cbz x11, 99f\n"
      "96:"  // Height 4: Multiply loop: Skip odd blocks
      "tbz x11, #1, 97f\n"
      "ldr h0, [x10], #0x2\n"
      "ldr h1, [x28], #0x2\n"
      "ldr h2, [x26], #0x2\n"
      "ldr h3, [x24], #0x2\n"
      "tbz x11, #0, 98f\n"
      "ld1 { v0.b }[2], [x10]\n"
      "ld1 { v1.b }[2], [x28]\n"
      "ld1 { v2.b }[2], [x26]\n"
      "ld1 { v3.b }[2], [x24]\n"
      "b 98f\n"
      "97:"  // Height 4: Multiply loop: Ragged operand read: partial_1_0
      "ldr b0, [x10, #0x0]\n"
      "ldr b1, [x28, #0x0]\n"
      "ldr b2, [x26, #0x0]\n"
      "ldr b3, [x24, #0x0]\n"
      "98:"  // Height 4: Multiply loop: Ragged operand read: Done
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      "99:"  // Height 4: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x19\n"
      "bne 89b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "ldr q0, [x16, #0x0]\n"
      "add v8.4s, v8.4s, v0.4s\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "ldr q1, [x16, #0x10]\n"
      "add v12.4s, v12.4s, v0.4s\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "ldr q2, [x16, #0x20]\n"
      "add v16.4s, v16.4s, v0.4s\n"
      "ldr q3, [x16, #0x30]\n"
      "add v20.4s, v20.4s, v0.4s\n"
      "add x16, x16, #0x40\n"
      "add v9.4s, v9.4s, v1.4s\n"
      "add v13.4s, v13.4s, v1.4s\n"
      "add v10.4s, v10.4s, v2.4s\n"
      "add v11.4s, v11.4s, v3.4s\n"
      "add v14.4s, v14.4s, v2.4s\n"
      "add v15.4s, v15.4s, v3.4s\n"
      "add v17.4s, v17.4s, v1.4s\n"
      "add v18.4s, v18.4s, v2.4s\n"
      "add v19.4s, v19.4s, v3.4s\n"
      "add v21.4s, v21.4s, v1.4s\n"
      "add v22.4s, v22.4s, v2.4s\n"
      "add v23.4s, v23.4s, v3.4s\n"
      "tbz %x[flags], #4, 100f\n"
      "ldr q0, [x17, #0x0]\n"
      "ldr q4, [x8, #0x0]\n"
      "ldr q1, [x17, #0x10]\n"
      "ldr q5, [x8, #0x10]\n"
      "ldr q2, [x17, #0x20]\n"
      "ldr q6, [x8, #0x20]\n"
      "ldr q3, [x17, #0x30]\n"
      "ldr q7, [x8, #0x30]\n"
      "add x17, x17, #0x40\n"
      "add x8, x8, #0x40\n"
      "b 101f\n"
      "100:"  // Height 4: per layer parameters
      "add x19, %x[qp], %[per_layer_right_shift]\n"
      "ld1r { v0.4s }, [x19]\n"
      "mov v1.16b, v0.16b\n"
      "add x19, %x[qp], %[per_layer_mul]\n"
      "ld1r { v4.4s }, [x19]\n"
      "mov v2.16b, v0.16b\n"
      "mov v3.16b, v0.16b\n"
      "mov v5.16b, v4.16b\n"
      "mov v6.16b, v4.16b\n"
      "mov v7.16b, v4.16b\n"
      "101:"  // Height 4: parameters loaded
      "sqrdmulh v8.4s, v8.4s, v4.4s\n"
      "sqrdmulh v9.4s, v9.4s, v5.4s\n"
      "sqrdmulh v10.4s, v10.4s, v6.4s\n"
      "sqrdmulh v11.4s, v11.4s, v7.4s\n"
      "sqrdmulh v12.4s, v12.4s, v4.4s\n"
      "sqrdmulh v13.4s, v13.4s, v5.4s\n"
      "sqrdmulh v14.4s, v14.4s, v6.4s\n"
      "sqrdmulh v15.4s, v15.4s, v7.4s\n"
      "sqrdmulh v16.4s, v16.4s, v4.4s\n"
      "sqrdmulh v17.4s, v17.4s, v5.4s\n"
      "sqrdmulh v18.4s, v18.4s, v6.4s\n"
      "sqrdmulh v19.4s, v19.4s, v7.4s\n"
      "sqrdmulh v20.4s, v20.4s, v4.4s\n"
      "sqrdmulh v21.4s, v21.4s, v5.4s\n"
      "sqrdmulh v22.4s, v22.4s, v6.4s\n"
      "sqrdmulh v23.4s, v23.4s, v7.4s\n"
      "tbz %x[flags], #5, 102f\n"
      "and v4.16b, v8.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "and v5.16b, v9.16b, v1.16b\n"
      "and v6.16b, v10.16b, v2.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "and v7.16b, v11.16b, v3.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v8.4s, v8.4s, v4.4s\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "and v4.16b, v12.16b, v0.16b\n"
      "sqadd v9.4s, v9.4s, v5.4s\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v10.4s, v10.4s, v6.4s\n"
      "and v5.16b, v13.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v11.4s, v11.4s, v7.4s\n"
      "and v6.16b, v14.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v12.4s, v12.4s, v4.4s\n"
      "and v7.16b, v15.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v13.4s, v13.4s, v5.4s\n"
      "and v4.16b, v16.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v14.4s, v14.4s, v6.4s\n"
      "and v5.16b, v17.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v15.4s, v15.4s, v7.4s\n"
      "and v6.16b, v18.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v16.4s, v16.4s, v4.4s\n"
      "and v7.16b, v19.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v17.4s, v17.4s, v5.4s\n"
      "and v4.16b, v20.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v18.4s, v18.4s, v6.4s\n"
      "and v5.16b, v21.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v19.4s, v19.4s, v7.4s\n"
      "and v6.16b, v22.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v20.4s, v20.4s, v4.4s\n"
      "and v7.16b, v23.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v21.4s, v21.4s, v5.4s\n"
      "sqadd v22.4s, v22.4s, v6.4s\n"
      "sqadd v23.4s, v23.4s, v7.4s\n"
      "102:"  // Height 4: no shift correction
      "srshl v8.4s, v8.4s, v0.4s\n"
      "add x19, %x[qp], %[c_offset]\n"
      "ld1r { v4.4s }, [x19]\n"
      "srshl v9.4s, v9.4s, v1.4s\n"
      "add x19, %x[qp], %[minval]\n"
      "srshl v10.4s, v10.4s, v2.4s\n"
      "ld1r { v5.4s }, [x19]\n"
      "add x19, %x[qp], %[maxval]\n"
      "srshl v11.4s, v11.4s, v3.4s\n"
      "ld1r { v6.4s }, [x19]\n"
      "cmp x15, #0x10\n"
      "srshl v12.4s, v12.4s, v0.4s\n"
      "srshl v13.4s, v13.4s, v1.4s\n"
      "srshl v14.4s, v14.4s, v2.4s\n"
      "srshl v15.4s, v15.4s, v3.4s\n"
      "add v8.4s, v8.4s, v4.4s\n"
      "add v9.4s, v9.4s, v4.4s\n"
      "add v10.4s, v10.4s, v4.4s\n"
      "smin v8.4s, v8.4s, v6.4s\n"
      "smin v9.4s, v9.4s, v6.4s\n"
      "smin v10.4s, v10.4s, v6.4s\n"
      "smax v8.4s, v8.4s, v5.4s\n"
      "smax v9.4s, v9.4s, v5.4s\n"
      "smax v10.4s, v10.4s, v5.4s\n"
      "add v11.4s, v11.4s, v4.4s\n"
      "add v12.4s, v12.4s, v4.4s\n"
      "add v13.4s, v13.4s, v4.4s\n"
      "smin v11.4s, v11.4s, v6.4s\n"
      "smin v12.4s, v12.4s, v6.4s\n"
      "smin v13.4s, v13.4s, v6.4s\n"
      "smax v11.4s, v11.4s, v5.4s\n"
      "smax v12.4s, v12.4s, v5.4s\n"
      "smax v13.4s, v13.4s, v5.4s\n"
      "add v14.4s, v14.4s, v4.4s\n"
      "add v15.4s, v15.4s, v4.4s\n"
      "srshl v16.4s, v16.4s, v0.4s\n"
      "smin v14.4s, v14.4s, v6.4s\n"
      "smin v15.4s, v15.4s, v6.4s\n"
      "srshl v17.4s, v17.4s, v1.4s\n"
      "smax v14.4s, v14.4s, v5.4s\n"
      "smax v15.4s, v15.4s, v5.4s\n"
      "add v16.4s, v16.4s, v4.4s\n"
      "add v17.4s, v17.4s, v4.4s\n"
      "srshl v18.4s, v18.4s, v2.4s\n"
      "smin v16.4s, v16.4s, v6.4s\n"
      "smin v17.4s, v17.4s, v6.4s\n"
      "srshl v19.4s, v19.4s, v3.4s\n"
      "smax v16.4s, v16.4s, v5.4s\n"
      "smax v17.4s, v17.4s, v5.4s\n"
      "add v18.4s, v18.4s, v4.4s\n"
      "add v19.4s, v19.4s, v4.4s\n"
      "srshl v20.4s, v20.4s, v0.4s\n"
      "smin v18.4s, v18.4s, v6.4s\n"
      "smin v19.4s, v19.4s, v6.4s\n"
      "srshl v21.4s, v21.4s, v1.4s\n"
      "smax v18.4s, v18.4s, v5.4s\n"
      "smax v19.4s, v19.4s, v5.4s\n"
      "add v20.4s, v20.4s, v4.4s\n"
      "add v21.4s, v21.4s, v4.4s\n"
      "srshl v22.4s, v22.4s, v2.4s\n"
      "smin v20.4s, v20.4s, v6.4s\n"
      "smin v21.4s, v21.4s, v6.4s\n"
      "srshl v23.4s, v23.4s, v3.4s\n"
      "smax v20.4s, v20.4s, v5.4s\n"
      "smax v21.4s, v21.4s, v5.4s\n"
      "add v22.4s, v22.4s, v4.4s\n"
      "add v23.4s, v23.4s, v4.4s\n"
      "uzp1 v8.8h, v8.8h, v9.8h\n"
      "smin v22.4s, v22.4s, v6.4s\n"
      "smin v23.4s, v23.4s, v6.4s\n"
      "uzp1 v9.8h, v10.8h, v11.8h\n"
      "smax v22.4s, v22.4s, v5.4s\n"
      "smax v23.4s, v23.4s, v5.4s\n"
      "uzp1 v12.8h, v12.8h, v13.8h\n"
      "uzp1 v13.8h, v14.8h, v15.8h\n"
      "uzp1 v16.8h, v16.8h, v17.8h\n"
      "uzp1 v17.8h, v18.8h, v19.8h\n"
      "uzp1 v20.8h, v20.8h, v21.8h\n"
      "uzp1 v21.8h, v22.8h, v23.8h\n"
      "uzp1 v8.16b, v8.16b, v9.16b\n"
      "uzp1 v12.16b, v12.16b, v13.16b\n"
      "uzp1 v16.16b, v16.16b, v17.16b\n"
      "uzp1 v20.16b, v20.16b, v21.16b\n"
      "bge 111f\n"
      "tbz x15, #3, 106f\n"
      "str d8, [x13], #0x8\n"
      "str d12, [x9], #0x8\n"
      "str d16, [x27], #0x8\n"
      "str d20, [x25], #0x8\n"
      "tbz x15, #2, 104f\n"
      "st1 { v8.s }[2], [x13], #0x4\n"
      "st1 { v12.s }[2], [x9], #0x4\n"
      "st1 { v16.s }[2], [x27], #0x4\n"
      "st1 { v20.s }[2], [x25], #0x4\n"
      "tbz x15, #1, 103f\n"
      "st1 { v8.h }[6], [x13], #0x2\n"
      "st1 { v12.h }[6], [x9], #0x2\n"
      "st1 { v16.h }[6], [x27], #0x2\n"
      "st1 { v20.h }[6], [x25], #0x2\n"
      "tbz x15, #0, 110f\n"
      "st1 { v8.b }[14], [x13]\n"
      "st1 { v12.b }[14], [x9]\n"
      "st1 { v16.b }[14], [x27]\n"
      "st1 { v20.b }[14], [x25]\n"
      "b 110f\n"
      "103:"  // Height 4: Partial direct writeback: partial_1_12
      "tbz x15, #0, 110f\n"
      "st1 { v8.b }[12], [x13]\n"
      "st1 { v12.b }[12], [x9]\n"
      "st1 { v16.b }[12], [x27]\n"
      "st1 { v20.b }[12], [x25]\n"
      "b 110f\n"
      "104:"  // Height 4: Partial direct writeback: partial_2_8
      "tbz x15, #1, 105f\n"
      "st1 { v8.h }[4], [x13], #0x2\n"
      "st1 { v12.h }[4], [x9], #0x2\n"
      "st1 { v16.h }[4], [x27], #0x2\n"
      "st1 { v20.h }[4], [x25], #0x2\n"
      "tbz x15, #0, 110f\n"
      "st1 { v8.b }[10], [x13]\n"
      "st1 { v12.b }[10], [x9]\n"
      "st1 { v16.b }[10], [x27]\n"
      "st1 { v20.b }[10], [x25]\n"
      "b 110f\n"
      "105:"  // Height 4: Partial direct writeback: partial_1_8
      "tbz x15, #0, 110f\n"
      "st1 { v8.b }[8], [x13]\n"
      "st1 { v12.b }[8], [x9]\n"
      "st1 { v16.b }[8], [x27]\n"
      "st1 { v20.b }[8], [x25]\n"
      "b 110f\n"
      "106:"  // Height 4: Partial direct writeback: partial_4_0
      "tbz x15, #2, 108f\n"
      "str s8, [x13], #0x4\n"
      "str s12, [x9], #0x4\n"
      "str s16, [x27], #0x4\n"
      "str s20, [x25], #0x4\n"
      "tbz x15, #1, 107f\n"
      "st1 { v8.h }[2], [x13], #0x2\n"
      "st1 { v12.h }[2], [x9], #0x2\n"
      "st1 { v16.h }[2], [x27], #0x2\n"
      "st1 { v20.h }[2], [x25], #0x2\n"
      "tbz x15, #0, 110f\n"
      "st1 { v8.b }[6], [x13]\n"
      "st1 { v12.b }[6], [x9]\n"
      "st1 { v16.b }[6], [x27]\n"
      "st1 { v20.b }[6], [x25]\n"
      "b 110f\n"
      "107:"  // Height 4: Partial direct writeback: partial_1_4
      "tbz x15, #0, 110f\n"
      "st1 { v8.b }[4], [x13]\n"
      "st1 { v12.b }[4], [x9]\n"
      "st1 { v16.b }[4], [x27]\n"
      "st1 { v20.b }[4], [x25]\n"
      "b 110f\n"
      "108:"  // Height 4: Partial direct writeback: partial_2_0
      "tbz x15, #1, 109f\n"
      "str h8, [x13], #0x2\n"
      "str h12, [x9], #0x2\n"
      "str h16, [x27], #0x2\n"
      "str h20, [x25], #0x2\n"
      "tbz x15, #0, 110f\n"
      "st1 { v8.b }[2], [x13]\n"
      "st1 { v12.b }[2], [x9]\n"
      "st1 { v16.b }[2], [x27]\n"
      "st1 { v20.b }[2], [x25]\n"
      "b 110f\n"
      "109:"  // Height 4: Partial direct writeback: partial_1_0
      "str b8, [x13, #0x0]\n"
      "str b12, [x9, #0x0]\n"
      "str b16, [x27, #0x0]\n"
      "str b20, [x25, #0x0]\n"
      "110:"  // Height 4: Partial direct writeback: Done
      "b 112f\n"
      "111:"  // Height 4: Full writeback
      "str q8, [x13, #0x0]\n"
      "str q12, [x9, #0x0]\n"
      "str q16, [x27, #0x0]\n"
      "str q20, [x25, #0x0]\n"
      "add x13, x13, #0x10\n"
      "add x9, x9, #0x10\n"
      "add x27, x27, #0x10\n"
      "add x25, x25, #0x10\n"
      "112:"  // Height 4: Writeback done
      "subs x15, x15, #0x10\n"
      "bgt 87b\n"
      "b 170f\n"
      "113:"  // Height 5
      "ldr x8, [%x[args_ptr], %[offsetof_multiplier_ptr]]\n"
      "mov x16, %x[col_bias]\n"
      "ldr x17, [%x[args_ptr], %[offsetof_shift_ptr]]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 114f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19\n"
      "ldr x25, [%x[output_ptr], #0x18]\n"
      "ldr x23, [%x[output_ptr], #0x20]\n"
      "add x27, x27, x19\n"
      "add x25, x25, x19\n"
      "add x23, x23, x19\n"
      "b 115f\n"
      "114:"  // Height 5: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19\n"
      "add x27, x9, x19\n"
      "add x25, x27, x19\n"
      "add x23, x25, x19\n"
      "115:"  // Height 5: Column loop
      "movi v8.4s, #0x0\n"
      "movi v9.4s, #0x0\n"
      "movi v10.4s, #0x0\n"
      "movi v11.4s, #0x0\n"
      "movi v12.4s, #0x0\n"
      "movi v13.4s, #0x0\n"
      "movi v14.4s, #0x0\n"
      "movi v15.4s, #0x0\n"
      "movi v16.4s, #0x0\n"
      "movi v17.4s, #0x0\n"
      "movi v18.4s, #0x0\n"
      "movi v19.4s, #0x0\n"
      "movi v20.4s, #0x0\n"
      "movi v21.4s, #0x0\n"
      "movi v22.4s, #0x0\n"
      "movi v23.4s, #0x0\n"
      "movi v24.4s, #0x0\n"
      "movi v25.4s, #0x0\n"
      "movi v26.4s, #0x0\n"
      "movi v27.4s, #0x0\n"
      "116:"  // Height 5: setup done
      "mov x12, #0x0\n"
      "117:"  // Height 5: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 118f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "ldr x24, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "cbnz x12, 119f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19\n"
      "add x28, x28, x19\n"
      "add x26, x26, x19\n"
      "add x24, x24, x19\n"
      "add x22, x22, x19\n"
      "b 119f\n"
      "118:"  // Height 5: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19\n"
      "add x26, x28, x19\n"
      "add x24, x26, x19\n"
      "add x22, x24, x19\n"
      "119:"  // Height 5: input setup done
      "cmp x11, #0x10\n"
      "blt 122f\n"
      "cmp x11, #0x20\n"
      "blt 121f\n"
      "120:"  // Height 5: Multiply loop: Main loop head
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q4, [x22, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x24, x24, #0x10\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x22, x22, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      "sub x11, x11, #0x10\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      "cmp x11, #0x20\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d4  // sdot v20.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0d8  // sdot v24.4s, v6.16b, v4.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f5  // sdot v21.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0f9  // sdot v25.4s, v7.16b, v4.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d6  // sdot v22.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0da  // sdot v26.4s, v6.16b, v4.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f7  // sdot v23.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0fb  // sdot v27.4s, v7.16b, v4.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d4  // sdot v20.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8d8  // sdot v24.4s, v6.16b, v4.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f5  // sdot v21.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8f9  // sdot v25.4s, v7.16b, v4.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d6  // sdot v22.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8da  // sdot v26.4s, v6.16b, v4.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f7  // sdot v23.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8fb  // sdot v27.4s, v7.16b, v4.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d4  // sdot v20.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8d8  // sdot v24.4s, v6.16b, v4.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f5  // sdot v21.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8f9  // sdot v25.4s, v7.16b, v4.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d6  // sdot v22.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8da  // sdot v26.4s, v6.16b, v4.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f7  // sdot v23.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8fb  // sdot v27.4s, v7.16b, v4.4b[3]\n"
      "bge 120b\n"
      "121:"  // Height 5: Multiply loop: Single iteration only
      "sub x11, x11, #0x10\n"
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q4, [x22, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x24, x24, #0x10\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x22, x22, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d4  // sdot v20.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0d8  // sdot v24.4s, v6.16b, v4.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f5  // sdot v21.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0f9  // sdot v25.4s, v7.16b, v4.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d6  // sdot v22.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0da  // sdot v26.4s, v6.16b, v4.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f7  // sdot v23.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0fb  // sdot v27.4s, v7.16b, v4.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d4  // sdot v20.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8d8  // sdot v24.4s, v6.16b, v4.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f5  // sdot v21.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8f9  // sdot v25.4s, v7.16b, v4.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d6  // sdot v22.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8da  // sdot v26.4s, v6.16b, v4.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f7  // sdot v23.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8fb  // sdot v27.4s, v7.16b, v4.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d4  // sdot v20.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8d8  // sdot v24.4s, v6.16b, v4.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f5  // sdot v21.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8f9  // sdot v25.4s, v7.16b, v4.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d6  // sdot v22.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8da  // sdot v26.4s, v6.16b, v4.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f7  // sdot v23.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8fb  // sdot v27.4s, v7.16b, v4.4b[3]\n"
      "122:"  // Height 5: Multiply loop: Main loop skip
      "cbz x11, 127f\n"
      "cmp x11, #0x4\n"
      "blt 124f\n"
      "123:"  // Height 5: Multiply loop: Odd block loop
      "ldr s0, [x10], #0x4\n"
      "ldr s1, [x28], #0x4\n"
      "ldr s2, [x26], #0x4\n"
      "ldr s3, [x24], #0x4\n"
      "ldr s4, [x22], #0x4\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "sub x11, x11, #0x4\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "cmp x11, #0x4\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      "bge 123b\n"
      "cbz x11, 127f\n"
      "124:"  // Height 5: Multiply loop: Skip odd blocks
      "tbz x11, #1, 125f\n"
      "ldr h0, [x10], #0x2\n"
      "ldr h1, [x28], #0x2\n"
      "ldr h2, [x26], #0x2\n"
      "ldr h3, [x24], #0x2\n"
      "ldr h4, [x22], #0x2\n"
      "tbz x11, #0, 126f\n"
      "ld1 { v0.b }[2], [x10]\n"
      "ld1 { v1.b }[2], [x28]\n"
      "ld1 { v2.b }[2], [x26]\n"
      "ld1 { v3.b }[2], [x24]\n"
      "ld1 { v4.b }[2], [x22]\n"
      "b 126f\n"
      "125:"  // Height 5: Multiply loop: Ragged operand read: partial_1_0
      "ldr b0, [x10, #0x0]\n"
      "ldr b1, [x28, #0x0]\n"
      "ldr b2, [x26, #0x0]\n"
      "ldr b3, [x24, #0x0]\n"
      "ldr b4, [x22, #0x0]\n"
      "126:"  // Height 5: Multiply loop: Ragged operand read: Done
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      "127:"  // Height 5: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x19\n"
      "bne 117b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "ldr q0, [x16, #0x0]\n"
      "add v8.4s, v8.4s, v0.4s\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "ldr q1, [x16, #0x10]\n"
      "add v12.4s, v12.4s, v0.4s\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "ldr q2, [x16, #0x20]\n"
      "add v16.4s, v16.4s, v0.4s\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "ldr q3, [x16, #0x30]\n"
      "add v20.4s, v20.4s, v0.4s\n"
      "add x16, x16, #0x40\n"
      "add v24.4s, v24.4s, v0.4s\n"
      "add v9.4s, v9.4s, v1.4s\n"
      "add v13.4s, v13.4s, v1.4s\n"
      "add v10.4s, v10.4s, v2.4s\n"
      "add v11.4s, v11.4s, v3.4s\n"
      "add v14.4s, v14.4s, v2.4s\n"
      "add v15.4s, v15.4s, v3.4s\n"
      "add v17.4s, v17.4s, v1.4s\n"
      "add v18.4s, v18.4s, v2.4s\n"
      "add v19.4s, v19.4s, v3.4s\n"
      "add v21.4s, v21.4s, v1.4s\n"
      "add v22.4s, v22.4s, v2.4s\n"
      "add v23.4s, v23.4s, v3.4s\n"
      "add v25.4s, v25.4s, v1.4s\n"
      "add v26.4s, v26.4s, v2.4s\n"
      "add v27.4s, v27.4s, v3.4s\n"
      "tbz %x[flags], #4, 128f\n"
      "ldr q0, [x17, #0x0]\n"
      "ldr q4, [x8, #0x0]\n"
      "ldr q1, [x17, #0x10]\n"
      "ldr q5, [x8, #0x10]\n"
      "ldr q2, [x17, #0x20]\n"
      "ldr q6, [x8, #0x20]\n"
      "ldr q3, [x17, #0x30]\n"
      "ldr q7, [x8, #0x30]\n"
      "add x17, x17, #0x40\n"
      "add x8, x8, #0x40\n"
      "b 129f\n"
      "128:"  // Height 5: per layer parameters
      "add x19, %x[qp], %[per_layer_right_shift]\n"
      "ld1r { v0.4s }, [x19]\n"
      "mov v1.16b, v0.16b\n"
      "add x19, %x[qp], %[per_layer_mul]\n"
      "ld1r { v4.4s }, [x19]\n"
      "mov v2.16b, v0.16b\n"
      "mov v3.16b, v0.16b\n"
      "mov v5.16b, v4.16b\n"
      "mov v6.16b, v4.16b\n"
      "mov v7.16b, v4.16b\n"
      "129:"  // Height 5: parameters loaded
      "sqrdmulh v8.4s, v8.4s, v4.4s\n"
      "sqrdmulh v9.4s, v9.4s, v5.4s\n"
      "sqrdmulh v10.4s, v10.4s, v6.4s\n"
      "sqrdmulh v11.4s, v11.4s, v7.4s\n"
      "sqrdmulh v12.4s, v12.4s, v4.4s\n"
      "sqrdmulh v13.4s, v13.4s, v5.4s\n"
      "sqrdmulh v14.4s, v14.4s, v6.4s\n"
      "sqrdmulh v15.4s, v15.4s, v7.4s\n"
      "sqrdmulh v16.4s, v16.4s, v4.4s\n"
      "sqrdmulh v17.4s, v17.4s, v5.4s\n"
      "sqrdmulh v18.4s, v18.4s, v6.4s\n"
      "sqrdmulh v19.4s, v19.4s, v7.4s\n"
      "sqrdmulh v20.4s, v20.4s, v4.4s\n"
      "sqrdmulh v21.4s, v21.4s, v5.4s\n"
      "sqrdmulh v22.4s, v22.4s, v6.4s\n"
      "sqrdmulh v23.4s, v23.4s, v7.4s\n"
      "sqrdmulh v24.4s, v24.4s, v4.4s\n"
      "sqrdmulh v25.4s, v25.4s, v5.4s\n"
      "sqrdmulh v26.4s, v26.4s, v6.4s\n"
      "sqrdmulh v27.4s, v27.4s, v7.4s\n"
      "tbz %x[flags], #5, 130f\n"
      "and v4.16b, v8.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "and v5.16b, v9.16b, v1.16b\n"
      "and v6.16b, v10.16b, v2.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "and v7.16b, v11.16b, v3.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v8.4s, v8.4s, v4.4s\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "and v4.16b, v12.16b, v0.16b\n"
      "sqadd v9.4s, v9.4s, v5.4s\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v10.4s, v10.4s, v6.4s\n"
      "and v5.16b, v13.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v11.4s, v11.4s, v7.4s\n"
      "and v6.16b, v14.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v12.4s, v12.4s, v4.4s\n"
      "and v7.16b, v15.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v13.4s, v13.4s, v5.4s\n"
      "and v4.16b, v16.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v14.4s, v14.4s, v6.4s\n"
      "and v5.16b, v17.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v15.4s, v15.4s, v7.4s\n"
      "and v6.16b, v18.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v16.4s, v16.4s, v4.4s\n"
      "and v7.16b, v19.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v17.4s, v17.4s, v5.4s\n"
      "and v4.16b, v20.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v18.4s, v18.4s, v6.4s\n"
      "and v5.16b, v21.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v19.4s, v19.4s, v7.4s\n"
      "and v6.16b, v22.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v20.4s, v20.4s, v4.4s\n"
      "and v7.16b, v23.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v21.4s, v21.4s, v5.4s\n"
      "and v4.16b, v24.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v22.4s, v22.4s, v6.4s\n"
      "and v5.16b, v25.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v23.4s, v23.4s, v7.4s\n"
      "and v6.16b, v26.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v24.4s, v24.4s, v4.4s\n"
      "and v7.16b, v27.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v25.4s, v25.4s, v5.4s\n"
      "sqadd v26.4s, v26.4s, v6.4s\n"
      "sqadd v27.4s, v27.4s, v7.4s\n"
      "130:"  // Height 5: no shift correction
      "srshl v8.4s, v8.4s, v0.4s\n"
      "add x19, %x[qp], %[c_offset]\n"
      "ld1r { v4.4s }, [x19]\n"
      "srshl v9.4s, v9.4s, v1.4s\n"
      "add x19, %x[qp], %[minval]\n"
      "srshl v10.4s, v10.4s, v2.4s\n"
      "ld1r { v5.4s }, [x19]\n"
      "add x19, %x[qp], %[maxval]\n"
      "srshl v11.4s, v11.4s, v3.4s\n"
      "ld1r { v6.4s }, [x19]\n"
      "cmp x15, #0x10\n"
      "srshl v12.4s, v12.4s, v0.4s\n"
      "srshl v13.4s, v13.4s, v1.4s\n"
      "srshl v14.4s, v14.4s, v2.4s\n"
      "srshl v15.4s, v15.4s, v3.4s\n"
      "add v8.4s, v8.4s, v4.4s\n"
      "add v9.4s, v9.4s, v4.4s\n"
      "add v10.4s, v10.4s, v4.4s\n"
      "smin v8.4s, v8.4s, v6.4s\n"
      "smin v9.4s, v9.4s, v6.4s\n"
      "smin v10.4s, v10.4s, v6.4s\n"
      "smax v8.4s, v8.4s, v5.4s\n"
      "smax v9.4s, v9.4s, v5.4s\n"
      "smax v10.4s, v10.4s, v5.4s\n"
      "add v11.4s, v11.4s, v4.4s\n"
      "add v12.4s, v12.4s, v4.4s\n"
      "add v13.4s, v13.4s, v4.4s\n"
      "smin v11.4s, v11.4s, v6.4s\n"
      "smin v12.4s, v12.4s, v6.4s\n"
      "smin v13.4s, v13.4s, v6.4s\n"
      "smax v11.4s, v11.4s, v5.4s\n"
      "smax v12.4s, v12.4s, v5.4s\n"
      "smax v13.4s, v13.4s, v5.4s\n"
      "add v14.4s, v14.4s, v4.4s\n"
      "add v15.4s, v15.4s, v4.4s\n"
      "srshl v16.4s, v16.4s, v0.4s\n"
      "smin v14.4s, v14.4s, v6.4s\n"
      "smin v15.4s, v15.4s, v6.4s\n"
      "srshl v17.4s, v17.4s, v1.4s\n"
      "smax v14.4s, v14.4s, v5.4s\n"
      "smax v15.4s, v15.4s, v5.4s\n"
      "add v16.4s, v16.4s, v4.4s\n"
      "add v17.4s, v17.4s, v4.4s\n"
      "srshl v18.4s, v18.4s, v2.4s\n"
      "smin v16.4s, v16.4s, v6.4s\n"
      "smin v17.4s, v17.4s, v6.4s\n"
      "srshl v19.4s, v19.4s, v3.4s\n"
      "smax v16.4s, v16.4s, v5.4s\n"
      "smax v17.4s, v17.4s, v5.4s\n"
      "add v18.4s, v18.4s, v4.4s\n"
      "add v19.4s, v19.4s, v4.4s\n"
      "srshl v20.4s, v20.4s, v0.4s\n"
      "smin v18.4s, v18.4s, v6.4s\n"
      "smin v19.4s, v19.4s, v6.4s\n"
      "srshl v21.4s, v21.4s, v1.4s\n"
      "smax v18.4s, v18.4s, v5.4s\n"
      "smax v19.4s, v19.4s, v5.4s\n"
      "add v20.4s, v20.4s, v4.4s\n"
      "add v21.4s, v21.4s, v4.4s\n"
      "srshl v22.4s, v22.4s, v2.4s\n"
      "smin v20.4s, v20.4s, v6.4s\n"
      "smin v21.4s, v21.4s, v6.4s\n"
      "srshl v23.4s, v23.4s, v3.4s\n"
      "smax v20.4s, v20.4s, v5.4s\n"
      "smax v21.4s, v21.4s, v5.4s\n"
      "add v22.4s, v22.4s, v4.4s\n"
      "add v23.4s, v23.4s, v4.4s\n"
      "srshl v24.4s, v24.4s, v0.4s\n"
      "smin v22.4s, v22.4s, v6.4s\n"
      "smin v23.4s, v23.4s, v6.4s\n"
      "srshl v25.4s, v25.4s, v1.4s\n"
      "smax v22.4s, v22.4s, v5.4s\n"
      "smax v23.4s, v23.4s, v5.4s\n"
      "add v24.4s, v24.4s, v4.4s\n"
      "add v25.4s, v25.4s, v4.4s\n"
      "srshl v26.4s, v26.4s, v2.4s\n"
      "smin v24.4s, v24.4s, v6.4s\n"
      "smin v25.4s, v25.4s, v6.4s\n"
      "srshl v27.4s, v27.4s, v3.4s\n"
      "smax v24.4s, v24.4s, v5.4s\n"
      "smax v25.4s, v25.4s, v5.4s\n"
      "add v26.4s, v26.4s, v4.4s\n"
      "add v27.4s, v27.4s, v4.4s\n"
      "uzp1 v8.8h, v8.8h, v9.8h\n"
      "smin v26.4s, v26.4s, v6.4s\n"
      "smin v27.4s, v27.4s, v6.4s\n"
      "uzp1 v9.8h, v10.8h, v11.8h\n"
      "smax v26.4s, v26.4s, v5.4s\n"
      "smax v27.4s, v27.4s, v5.4s\n"
      "uzp1 v12.8h, v12.8h, v13.8h\n"
      "uzp1 v13.8h, v14.8h, v15.8h\n"
      "uzp1 v16.8h, v16.8h, v17.8h\n"
      "uzp1 v17.8h, v18.8h, v19.8h\n"
      "uzp1 v20.8h, v20.8h, v21.8h\n"
      "uzp1 v21.8h, v22.8h, v23.8h\n"
      "uzp1 v24.8h, v24.8h, v25.8h\n"
      "uzp1 v25.8h, v26.8h, v27.8h\n"
      "uzp1 v8.16b, v8.16b, v9.16b\n"
      "uzp1 v12.16b, v12.16b, v13.16b\n"
      "uzp1 v16.16b, v16.16b, v17.16b\n"
      "uzp1 v20.16b, v20.16b, v21.16b\n"
      "uzp1 v24.16b, v24.16b, v25.16b\n"
      "bge 139f\n"
      "tbz x15, #3, 134f\n"
      "str d8, [x13], #0x8\n"
      "str d12, [x9], #0x8\n"
      "str d16, [x27], #0x8\n"
      "str d20, [x25], #0x8\n"
      "str d24, [x23], #0x8\n"
      "tbz x15, #2, 132f\n"
      "st1 { v8.s }[2], [x13], #0x4\n"
      "st1 { v12.s }[2], [x9], #0x4\n"
      "st1 { v16.s }[2], [x27], #0x4\n"
      "st1 { v20.s }[2], [x25], #0x4\n"
      "st1 { v24.s }[2], [x23], #0x4\n"
      "tbz x15, #1, 131f\n"
      "st1 { v8.h }[6], [x13], #0x2\n"
      "st1 { v12.h }[6], [x9], #0x2\n"
      "st1 { v16.h }[6], [x27], #0x2\n"
      "st1 { v20.h }[6], [x25], #0x2\n"
      "st1 { v24.h }[6], [x23], #0x2\n"
      "tbz x15, #0, 138f\n"
      "st1 { v8.b }[14], [x13]\n"
      "st1 { v12.b }[14], [x9]\n"
      "st1 { v16.b }[14], [x27]\n"
      "st1 { v20.b }[14], [x25]\n"
      "st1 { v24.b }[14], [x23]\n"
      "b 138f\n"
      "131:"  // Height 5: Partial direct writeback: partial_1_12
      "tbz x15, #0, 138f\n"
      "st1 { v8.b }[12], [x13]\n"
      "st1 { v12.b }[12], [x9]\n"
      "st1 { v16.b }[12], [x27]\n"
      "st1 { v20.b }[12], [x25]\n"
      "st1 { v24.b }[12], [x23]\n"
      "b 138f\n"
      "132:"  // Height 5: Partial direct writeback: partial_2_8
      "tbz x15, #1, 133f\n"
      "st1 { v8.h }[4], [x13], #0x2\n"
      "st1 { v12.h }[4], [x9], #0x2\n"
      "st1 { v16.h }[4], [x27], #0x2\n"
      "st1 { v20.h }[4], [x25], #0x2\n"
      "st1 { v24.h }[4], [x23], #0x2\n"
      "tbz x15, #0, 138f\n"
      "st1 { v8.b }[10], [x13]\n"
      "st1 { v12.b }[10], [x9]\n"
      "st1 { v16.b }[10], [x27]\n"
      "st1 { v20.b }[10], [x25]\n"
      "st1 { v24.b }[10], [x23]\n"
      "b 138f\n"
      "133:"  // Height 5: Partial direct writeback: partial_1_8
      "tbz x15, #0, 138f\n"
      "st1 { v8.b }[8], [x13]\n"
      "st1 { v12.b }[8], [x9]\n"
      "st1 { v16.b }[8], [x27]\n"
      "st1 { v20.b }[8], [x25]\n"
      "st1 { v24.b }[8], [x23]\n"
      "b 138f\n"
      "134:"  // Height 5: Partial direct writeback: partial_4_0
      "tbz x15, #2, 136f\n"
      "str s8, [x13], #0x4\n"
      "str s12, [x9], #0x4\n"
      "str s16, [x27], #0x4\n"
      "str s20, [x25], #0x4\n"
      "str s24, [x23], #0x4\n"
      "tbz x15, #1, 135f\n"
      "st1 { v8.h }[2], [x13], #0x2\n"
      "st1 { v12.h }[2], [x9], #0x2\n"
      "st1 { v16.h }[2], [x27], #0x2\n"
      "st1 { v20.h }[2], [x25], #0x2\n"
      "st1 { v24.h }[2], [x23], #0x2\n"
      "tbz x15, #0, 138f\n"
      "st1 { v8.b }[6], [x13]\n"
      "st1 { v12.b }[6], [x9]\n"
      "st1 { v16.b }[6], [x27]\n"
      "st1 { v20.b }[6], [x25]\n"
      "st1 { v24.b }[6], [x23]\n"
      "b 138f\n"
      "135:"  // Height 5: Partial direct writeback: partial_1_4
      "tbz x15, #0, 138f\n"
      "st1 { v8.b }[4], [x13]\n"
      "st1 { v12.b }[4], [x9]\n"
      "st1 { v16.b }[4], [x27]\n"
      "st1 { v20.b }[4], [x25]\n"
      "st1 { v24.b }[4], [x23]\n"
      "b 138f\n"
      "136:"  // Height 5: Partial direct writeback: partial_2_0
      "tbz x15, #1, 137f\n"
      "str h8, [x13], #0x2\n"
      "str h12, [x9], #0x2\n"
      "str h16, [x27], #0x2\n"
      "str h20, [x25], #0x2\n"
      "str h24, [x23], #0x2\n"
      "tbz x15, #0, 138f\n"
      "st1 { v8.b }[2], [x13]\n"
      "st1 { v12.b }[2], [x9]\n"
      "st1 { v16.b }[2], [x27]\n"
      "st1 { v20.b }[2], [x25]\n"
      "st1 { v24.b }[2], [x23]\n"
      "b 138f\n"
      "137:"  // Height 5: Partial direct writeback: partial_1_0
      "str b8, [x13, #0x0]\n"
      "str b12, [x9, #0x0]\n"
      "str b16, [x27, #0x0]\n"
      "str b20, [x25, #0x0]\n"
      "str b24, [x23, #0x0]\n"
      "138:"  // Height 5: Partial direct writeback: Done
      "b 140f\n"
      "139:"  // Height 5: Full writeback
      "str q8, [x13, #0x0]\n"
      "str q12, [x9, #0x0]\n"
      "str q16, [x27, #0x0]\n"
      "str q20, [x25, #0x0]\n"
      "str q24, [x23, #0x0]\n"
      "add x13, x13, #0x10\n"
      "add x9, x9, #0x10\n"
      "add x27, x27, #0x10\n"
      "add x25, x25, #0x10\n"
      "add x23, x23, #0x10\n"
      "140:"  // Height 5: Writeback done
      "subs x15, x15, #0x10\n"
      "bgt 115b\n"
      "b 170f\n"
      "141:"  // Height 6
      "ldr x8, [%x[args_ptr], %[offsetof_multiplier_ptr]]\n"
      "mov x16, %x[col_bias]\n"
      "ldr x17, [%x[args_ptr], %[offsetof_shift_ptr]]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 142f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19\n"
      "ldr x25, [%x[output_ptr], #0x18]\n"
      "ldr x23, [%x[output_ptr], #0x20]\n"
      "add x27, x27, x19\n"
      "ldr x21, [%x[output_ptr], #0x28]\n"
      "add %x[output_ptr], %x[output_ptr], #0x30\n"
      "add x25, x25, x19\n"
      "add x23, x23, x19\n"
      "add x21, x21, x19\n"
      "b 143f\n"
      "142:"  // Height 6: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19\n"
      "add x27, x9, x19\n"
      "add x25, x27, x19\n"
      "add x23, x25, x19\n"
      "add x21, x23, x19\n"
      "add %x[output_ptr], x21, x19\n"
      "143:"  // Height 6: Column loop
      "movi v8.4s, #0x0\n"
      "movi v9.4s, #0x0\n"
      "movi v10.4s, #0x0\n"
      "movi v11.4s, #0x0\n"
      "movi v12.4s, #0x0\n"
      "movi v13.4s, #0x0\n"
      "movi v14.4s, #0x0\n"
      "movi v15.4s, #0x0\n"
      "movi v16.4s, #0x0\n"
      "movi v17.4s, #0x0\n"
      "movi v18.4s, #0x0\n"
      "movi v19.4s, #0x0\n"
      "movi v20.4s, #0x0\n"
      "movi v21.4s, #0x0\n"
      "movi v22.4s, #0x0\n"
      "movi v23.4s, #0x0\n"
      "movi v24.4s, #0x0\n"
      "movi v25.4s, #0x0\n"
      "movi v26.4s, #0x0\n"
      "movi v27.4s, #0x0\n"
      "movi v28.4s, #0x0\n"
      "movi v29.4s, #0x0\n"
      "movi v30.4s, #0x0\n"
      "movi v31.4s, #0x0\n"
      "144:"  // Height 6: setup done
      "mov x12, #0x0\n"
      "145:"  // Height 6: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 146f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "ldr x24, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "ldr x20, [x20, #0x28]\n"
      "cbnz x12, 147f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19\n"
      "add x28, x28, x19\n"
      "add x26, x26, x19\n"
      "add x24, x24, x19\n"
      "add x22, x22, x19\n"
      "add x20, x20, x19\n"
      "b 147f\n"
      "146:"  // Height 6: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19\n"
      "add x26, x28, x19\n"
      "add x24, x26, x19\n"
      "add x22, x24, x19\n"
      "add x20, x22, x19\n"
      "147:"  // Height 6: input setup done
      "cmp x11, #0x10\n"
      "blt 150f\n"
      "cmp x11, #0x20\n"
      "blt 149f\n"
      "148:"  // Height 6: Multiply loop: Main loop head
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q4, [x22, #0x0]\n"
      "ldr q5, [x20, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f85e0dc  // sdot v28.4s, v6.16b, v5.4b[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x22, x22, #0x10\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x20, x20, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x20, #0x80]\n"
      "sub x11, x11, #0x10\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      "cmp x11, #0x20\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0fd  // sdot v29.4s, v7.16b, v5.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f85e0de  // sdot v30.4s, v6.16b, v5.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0ff  // sdot v31.4s, v7.16b, v5.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d4  // sdot v20.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0d8  // sdot v24.4s, v6.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0dc  // sdot v28.4s, v6.16b, v5.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f5  // sdot v21.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0f9  // sdot v25.4s, v7.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0fd  // sdot v29.4s, v7.16b, v5.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d6  // sdot v22.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0da  // sdot v26.4s, v6.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0de  // sdot v30.4s, v6.16b, v5.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f7  // sdot v23.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0fb  // sdot v27.4s, v7.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0ff  // sdot v31.4s, v7.16b, v5.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d4  // sdot v20.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8d8  // sdot v24.4s, v6.16b, v4.4b[2]\n"
      ".inst 0x4f85e8dc  // sdot v28.4s, v6.16b, v5.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f5  // sdot v21.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8f9  // sdot v25.4s, v7.16b, v4.4b[2]\n"
      ".inst 0x4f85e8fd  // sdot v29.4s, v7.16b, v5.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d6  // sdot v22.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8da  // sdot v26.4s, v6.16b, v4.4b[2]\n"
      ".inst 0x4f85e8de  // sdot v30.4s, v6.16b, v5.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f7  // sdot v23.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8fb  // sdot v27.4s, v7.16b, v4.4b[2]\n"
      ".inst 0x4f85e8ff  // sdot v31.4s, v7.16b, v5.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d4  // sdot v20.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8d8  // sdot v24.4s, v6.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8dc  // sdot v28.4s, v6.16b, v5.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f5  // sdot v21.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8f9  // sdot v25.4s, v7.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8fd  // sdot v29.4s, v7.16b, v5.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d6  // sdot v22.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8da  // sdot v26.4s, v6.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8de  // sdot v30.4s, v6.16b, v5.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f7  // sdot v23.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8fb  // sdot v27.4s, v7.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8ff  // sdot v31.4s, v7.16b, v5.4b[3]\n"
      "bge 148b\n"
      "149:"  // Height 6: Multiply loop: Single iteration only
      "sub x11, x11, #0x10\n"
      "ldr q0, [x10, #0x0]\n"
      "ldr q1, [x28, #0x0]\n"
      "ldr q2, [x26, #0x0]\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q4, [x22, #0x0]\n"
      "ldr q5, [x20, #0x0]\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "add x10, x10, #0x10\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "add x28, x28, #0x10\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f85e0dc  // sdot v28.4s, v6.16b, v5.4b[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      "add x22, x22, #0x10\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      "add x20, x20, #0x10\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      "prfm pldl1keep, [x20, #0x80]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0fd  // sdot v29.4s, v7.16b, v5.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f85e0de  // sdot v30.4s, v6.16b, v5.4b[0]\n"
      "ldr q6, [x14, #0x40]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0ff  // sdot v31.4s, v7.16b, v5.4b[0]\n"
      "ldr q7, [x14, #0x50]\n"
      ".inst 0x4fa0e0c8  // sdot v8.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0cc  // sdot v12.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d0  // sdot v16.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d4  // sdot v20.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0d8  // sdot v24.4s, v6.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0dc  // sdot v28.4s, v6.16b, v5.4b[1]\n"
      "ldr q6, [x14, #0x60]\n"
      ".inst 0x4fa0e0e9  // sdot v9.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ed  // sdot v13.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f1  // sdot v17.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f5  // sdot v21.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0f9  // sdot v25.4s, v7.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0fd  // sdot v29.4s, v7.16b, v5.4b[1]\n"
      "ldr q7, [x14, #0x70]\n"
      ".inst 0x4fa0e0ca  // sdot v10.4s, v6.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ce  // sdot v14.4s, v6.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0d2  // sdot v18.4s, v6.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0d6  // sdot v22.4s, v6.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0da  // sdot v26.4s, v6.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0de  // sdot v30.4s, v6.16b, v5.4b[1]\n"
      "ldr q6, [x14, #0x80]\n"
      ".inst 0x4fa0e0eb  // sdot v11.4s, v7.16b, v0.4b[1]\n"
      ".inst 0x4fa1e0ef  // sdot v15.4s, v7.16b, v1.4b[1]\n"
      ".inst 0x4fa2e0f3  // sdot v19.4s, v7.16b, v2.4b[1]\n"
      ".inst 0x4fa3e0f7  // sdot v23.4s, v7.16b, v3.4b[1]\n"
      ".inst 0x4fa4e0fb  // sdot v27.4s, v7.16b, v4.4b[1]\n"
      ".inst 0x4fa5e0ff  // sdot v31.4s, v7.16b, v5.4b[1]\n"
      "ldr q7, [x14, #0x90]\n"
      ".inst 0x4f80e8c8  // sdot v8.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8cc  // sdot v12.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d0  // sdot v16.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d4  // sdot v20.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8d8  // sdot v24.4s, v6.16b, v4.4b[2]\n"
      ".inst 0x4f85e8dc  // sdot v28.4s, v6.16b, v5.4b[2]\n"
      "ldr q6, [x14, #0xa0]\n"
      ".inst 0x4f80e8e9  // sdot v9.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ed  // sdot v13.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f1  // sdot v17.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f5  // sdot v21.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8f9  // sdot v25.4s, v7.16b, v4.4b[2]\n"
      ".inst 0x4f85e8fd  // sdot v29.4s, v7.16b, v5.4b[2]\n"
      "ldr q7, [x14, #0xb0]\n"
      ".inst 0x4f80e8ca  // sdot v10.4s, v6.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ce  // sdot v14.4s, v6.16b, v1.4b[2]\n"
      ".inst 0x4f82e8d2  // sdot v18.4s, v6.16b, v2.4b[2]\n"
      ".inst 0x4f83e8d6  // sdot v22.4s, v6.16b, v3.4b[2]\n"
      ".inst 0x4f84e8da  // sdot v26.4s, v6.16b, v4.4b[2]\n"
      ".inst 0x4f85e8de  // sdot v30.4s, v6.16b, v5.4b[2]\n"
      "ldr q6, [x14, #0xc0]\n"
      ".inst 0x4f80e8eb  // sdot v11.4s, v7.16b, v0.4b[2]\n"
      ".inst 0x4f81e8ef  // sdot v15.4s, v7.16b, v1.4b[2]\n"
      ".inst 0x4f82e8f3  // sdot v19.4s, v7.16b, v2.4b[2]\n"
      ".inst 0x4f83e8f7  // sdot v23.4s, v7.16b, v3.4b[2]\n"
      ".inst 0x4f84e8fb  // sdot v27.4s, v7.16b, v4.4b[2]\n"
      ".inst 0x4f85e8ff  // sdot v31.4s, v7.16b, v5.4b[2]\n"
      "ldr q7, [x14, #0xd0]\n"
      ".inst 0x4fa0e8c8  // sdot v8.4s, v6.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8cc  // sdot v12.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d0  // sdot v16.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d4  // sdot v20.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8d8  // sdot v24.4s, v6.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8dc  // sdot v28.4s, v6.16b, v5.4b[3]\n"
      "ldr q6, [x14, #0xe0]\n"
      ".inst 0x4fa0e8e9  // sdot v9.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ed  // sdot v13.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f1  // sdot v17.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f5  // sdot v21.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8f9  // sdot v25.4s, v7.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8fd  // sdot v29.4s, v7.16b, v5.4b[3]\n"
      "ldr q7, [x14, #0xf0]\n"
      ".inst 0x4fa0e8ca  // sdot v10.4s, v6.16b, v0.4b[3]\n"
      "add x14, x14, #0x100\n"
      ".inst 0x4fa1e8ce  // sdot v14.4s, v6.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8d2  // sdot v18.4s, v6.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8d6  // sdot v22.4s, v6.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8da  // sdot v26.4s, v6.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8de  // sdot v30.4s, v6.16b, v5.4b[3]\n"
      ".inst 0x4fa0e8eb  // sdot v11.4s, v7.16b, v0.4b[3]\n"
      ".inst 0x4fa1e8ef  // sdot v15.4s, v7.16b, v1.4b[3]\n"
      ".inst 0x4fa2e8f3  // sdot v19.4s, v7.16b, v2.4b[3]\n"
      ".inst 0x4fa3e8f7  // sdot v23.4s, v7.16b, v3.4b[3]\n"
      ".inst 0x4fa4e8fb  // sdot v27.4s, v7.16b, v4.4b[3]\n"
      ".inst 0x4fa5e8ff  // sdot v31.4s, v7.16b, v5.4b[3]\n"
      "150:"  // Height 6: Multiply loop: Main loop skip
      "cbz x11, 155f\n"
      "cmp x11, #0x4\n"
      "blt 152f\n"
      "151:"  // Height 6: Multiply loop: Odd block loop
      "ldr s0, [x10], #0x4\n"
      "ldr s1, [x28], #0x4\n"
      "ldr s2, [x26], #0x4\n"
      "ldr s3, [x24], #0x4\n"
      "ldr s4, [x22], #0x4\n"
      "ldr s5, [x20], #0x4\n"
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      "sub x11, x11, #0x4\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      "cmp x11, #0x4\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f85e0dc  // sdot v28.4s, v6.16b, v5.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0fd  // sdot v29.4s, v7.16b, v5.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f85e0de  // sdot v30.4s, v6.16b, v5.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0ff  // sdot v31.4s, v7.16b, v5.4b[0]\n"
      "bge 151b\n"
      "cbz x11, 155f\n"
      "152:"  // Height 6: Multiply loop: Skip odd blocks
      "tbz x11, #1, 153f\n"
      "ldr h0, [x10], #0x2\n"
      "ldr h1, [x28], #0x2\n"
      "ldr h2, [x26], #0x2\n"
      "ldr h3, [x24], #0x2\n"
      "ldr h4, [x22], #0x2\n"
      "ldr h5, [x20], #0x2\n"
      "tbz x11, #0, 154f\n"
      "ld1 { v0.b }[2], [x10]\n"
      "ld1 { v1.b }[2], [x28]\n"
      "ld1 { v2.b }[2], [x26]\n"
      "ld1 { v3.b }[2], [x24]\n"
      "ld1 { v4.b }[2], [x22]\n"
      "ld1 { v5.b }[2], [x20]\n"
      "b 154f\n"
      "153:"  // Height 6: Multiply loop: Ragged operand read: partial_1_0
      "ldr b0, [x10, #0x0]\n"
      "ldr b1, [x28, #0x0]\n"
      "ldr b2, [x26, #0x0]\n"
      "ldr b3, [x24, #0x0]\n"
      "ldr b4, [x22, #0x0]\n"
      "ldr b5, [x20, #0x0]\n"
      "154:"  // Height 6: Multiply loop: Ragged operand read: Done
      "ldr q6, [x14, #0x0]\n"
      ".inst 0x4f80e0c8  // sdot v8.4s, v6.16b, v0.4b[0]\n"
      "ldr q7, [x14, #0x10]\n"
      ".inst 0x4f81e0cc  // sdot v12.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d0  // sdot v16.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d4  // sdot v20.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0d8  // sdot v24.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f85e0dc  // sdot v28.4s, v6.16b, v5.4b[0]\n"
      "ldr q6, [x14, #0x20]\n"
      ".inst 0x4f80e0e9  // sdot v9.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ed  // sdot v13.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f1  // sdot v17.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f5  // sdot v21.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0f9  // sdot v25.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0fd  // sdot v29.4s, v7.16b, v5.4b[0]\n"
      "ldr q7, [x14, #0x30]\n"
      ".inst 0x4f80e0ca  // sdot v10.4s, v6.16b, v0.4b[0]\n"
      "add x14, x14, #0x40\n"
      ".inst 0x4f81e0ce  // sdot v14.4s, v6.16b, v1.4b[0]\n"
      ".inst 0x4f82e0d2  // sdot v18.4s, v6.16b, v2.4b[0]\n"
      ".inst 0x4f83e0d6  // sdot v22.4s, v6.16b, v3.4b[0]\n"
      ".inst 0x4f84e0da  // sdot v26.4s, v6.16b, v4.4b[0]\n"
      ".inst 0x4f85e0de  // sdot v30.4s, v6.16b, v5.4b[0]\n"
      ".inst 0x4f80e0eb  // sdot v11.4s, v7.16b, v0.4b[0]\n"
      ".inst 0x4f81e0ef  // sdot v15.4s, v7.16b, v1.4b[0]\n"
      ".inst 0x4f82e0f3  // sdot v19.4s, v7.16b, v2.4b[0]\n"
      ".inst 0x4f83e0f7  // sdot v23.4s, v7.16b, v3.4b[0]\n"
      ".inst 0x4f84e0fb  // sdot v27.4s, v7.16b, v4.4b[0]\n"
      ".inst 0x4f85e0ff  // sdot v31.4s, v7.16b, v5.4b[0]\n"
      "155:"  // Height 6: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x12, x12, #0x1\n"
      "cmp x12, x19\n"
      "bne 145b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "ldr q0, [x16, #0x0]\n"
      "add v8.4s, v8.4s, v0.4s\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "ldr q1, [x16, #0x10]\n"
      "add v12.4s, v12.4s, v0.4s\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "ldr q2, [x16, #0x20]\n"
      "add v16.4s, v16.4s, v0.4s\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "ldr q3, [x16, #0x30]\n"
      "add v20.4s, v20.4s, v0.4s\n"
      "prfm pstl1keep, [x21, #0x0]\n"
      "add x16, x16, #0x40\n"
      "add v24.4s, v24.4s, v0.4s\n"
      "add v28.4s, v28.4s, v0.4s\n"
      "add v9.4s, v9.4s, v1.4s\n"
      "add v10.4s, v10.4s, v2.4s\n"
      "add v11.4s, v11.4s, v3.4s\n"
      "add v13.4s, v13.4s, v1.4s\n"
      "add v14.4s, v14.4s, v2.4s\n"
      "add v15.4s, v15.4s, v3.4s\n"
      "add v17.4s, v17.4s, v1.4s\n"
      "add v18.4s, v18.4s, v2.4s\n"
      "add v19.4s, v19.4s, v3.4s\n"
      "add v21.4s, v21.4s, v1.4s\n"
      "add v22.4s, v22.4s, v2.4s\n"
      "add v23.4s, v23.4s, v3.4s\n"
      "add v25.4s, v25.4s, v1.4s\n"
      "add v26.4s, v26.4s, v2.4s\n"
      "add v27.4s, v27.4s, v3.4s\n"
      "add v29.4s, v29.4s, v1.4s\n"
      "add v30.4s, v30.4s, v2.4s\n"
      "add v31.4s, v31.4s, v3.4s\n"
      "tbz %x[flags], #4, 156f\n"
      "ldr q0, [x17, #0x0]\n"
      "ldr q4, [x8, #0x0]\n"
      "ldr q1, [x17, #0x10]\n"
      "ldr q5, [x8, #0x10]\n"
      "ldr q2, [x17, #0x20]\n"
      "ldr q6, [x8, #0x20]\n"
      "ldr q3, [x17, #0x30]\n"
      "ldr q7, [x8, #0x30]\n"
      "add x17, x17, #0x40\n"
      "add x8, x8, #0x40\n"
      "b 157f\n"
      "156:"  // Height 6: per layer parameters
      "add x19, %x[qp], %[per_layer_right_shift]\n"
      "ld1r { v0.4s }, [x19]\n"
      "mov v1.16b, v0.16b\n"
      "add x19, %x[qp], %[per_layer_mul]\n"
      "ld1r { v4.4s }, [x19]\n"
      "mov v2.16b, v0.16b\n"
      "mov v3.16b, v0.16b\n"
      "mov v5.16b, v4.16b\n"
      "mov v6.16b, v4.16b\n"
      "mov v7.16b, v4.16b\n"
      "157:"  // Height 6: parameters loaded
      "sqrdmulh v8.4s, v8.4s, v4.4s\n"
      "sqrdmulh v9.4s, v9.4s, v5.4s\n"
      "sqrdmulh v10.4s, v10.4s, v6.4s\n"
      "sqrdmulh v11.4s, v11.4s, v7.4s\n"
      "sqrdmulh v12.4s, v12.4s, v4.4s\n"
      "sqrdmulh v13.4s, v13.4s, v5.4s\n"
      "sqrdmulh v14.4s, v14.4s, v6.4s\n"
      "sqrdmulh v15.4s, v15.4s, v7.4s\n"
      "sqrdmulh v16.4s, v16.4s, v4.4s\n"
      "sqrdmulh v17.4s, v17.4s, v5.4s\n"
      "sqrdmulh v18.4s, v18.4s, v6.4s\n"
      "sqrdmulh v19.4s, v19.4s, v7.4s\n"
      "sqrdmulh v20.4s, v20.4s, v4.4s\n"
      "sqrdmulh v21.4s, v21.4s, v5.4s\n"
      "sqrdmulh v22.4s, v22.4s, v6.4s\n"
      "sqrdmulh v23.4s, v23.4s, v7.4s\n"
      "sqrdmulh v24.4s, v24.4s, v4.4s\n"
      "sqrdmulh v25.4s, v25.4s, v5.4s\n"
      "sqrdmulh v26.4s, v26.4s, v6.4s\n"
      "sqrdmulh v27.4s, v27.4s, v7.4s\n"
      "sqrdmulh v28.4s, v28.4s, v4.4s\n"
      "sqrdmulh v29.4s, v29.4s, v5.4s\n"
      "sqrdmulh v30.4s, v30.4s, v6.4s\n"
      "sqrdmulh v31.4s, v31.4s, v7.4s\n"
      "tbz %x[flags], #5, 158f\n"
      "and v4.16b, v8.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "and v5.16b, v9.16b, v1.16b\n"
      "and v6.16b, v10.16b, v2.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "and v7.16b, v11.16b, v3.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v8.4s, v8.4s, v4.4s\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "and v4.16b, v12.16b, v0.16b\n"
      "sqadd v9.4s, v9.4s, v5.4s\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v10.4s, v10.4s, v6.4s\n"
      "and v5.16b, v13.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v11.4s, v11.4s, v7.4s\n"
      "and v6.16b, v14.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v12.4s, v12.4s, v4.4s\n"
      "and v7.16b, v15.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v13.4s, v13.4s, v5.4s\n"
      "and v4.16b, v16.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v14.4s, v14.4s, v6.4s\n"
      "and v5.16b, v17.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v15.4s, v15.4s, v7.4s\n"
      "and v6.16b, v18.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v16.4s, v16.4s, v4.4s\n"
      "and v7.16b, v19.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v17.4s, v17.4s, v5.4s\n"
      "and v4.16b, v20.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v18.4s, v18.4s, v6.4s\n"
      "and v5.16b, v21.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v19.4s, v19.4s, v7.4s\n"
      "and v6.16b, v22.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v20.4s, v20.4s, v4.4s\n"
      "and v7.16b, v23.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v21.4s, v21.4s, v5.4s\n"
      "and v4.16b, v24.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v22.4s, v22.4s, v6.4s\n"
      "and v5.16b, v25.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v23.4s, v23.4s, v7.4s\n"
      "and v6.16b, v26.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v24.4s, v24.4s, v4.4s\n"
      "and v7.16b, v27.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v25.4s, v25.4s, v5.4s\n"
      "and v4.16b, v28.16b, v0.16b\n"
      "sshr v4.4s, v4.4s, #0x1f\n"
      "sqadd v26.4s, v26.4s, v6.4s\n"
      "and v5.16b, v29.16b, v1.16b\n"
      "sshr v5.4s, v5.4s, #0x1f\n"
      "sqadd v27.4s, v27.4s, v7.4s\n"
      "and v6.16b, v30.16b, v2.16b\n"
      "sshr v6.4s, v6.4s, #0x1f\n"
      "sqadd v28.4s, v28.4s, v4.4s\n"
      "and v7.16b, v31.16b, v3.16b\n"
      "sshr v7.4s, v7.4s, #0x1f\n"
      "sqadd v29.4s, v29.4s, v5.4s\n"
      "sqadd v30.4s, v30.4s, v6.4s\n"
      "sqadd v31.4s, v31.4s, v7.4s\n"
      "158:"  // Height 6: no shift correction
      "srshl v8.4s, v8.4s, v0.4s\n"
      "add x19, %x[qp], %[c_offset]\n"
      "ld1r { v4.4s }, [x19]\n"
      "srshl v9.4s, v9.4s, v1.4s\n"
      "add x19, %x[qp], %[minval]\n"
      "srshl v10.4s, v10.4s, v2.4s\n"
      "ld1r { v5.4s }, [x19]\n"
      "add x19, %x[qp], %[maxval]\n"
      "srshl v11.4s, v11.4s, v3.4s\n"
      "ld1r { v6.4s }, [x19]\n"
      "cmp x15, #0x10\n"
      "srshl v12.4s, v12.4s, v0.4s\n"
      "srshl v13.4s, v13.4s, v1.4s\n"
      "srshl v14.4s, v14.4s, v2.4s\n"
      "srshl v15.4s, v15.4s, v3.4s\n"
      "add v8.4s, v8.4s, v4.4s\n"
      "add v9.4s, v9.4s, v4.4s\n"
      "add v10.4s, v10.4s, v4.4s\n"
      "smin v8.4s, v8.4s, v6.4s\n"
      "smin v9.4s, v9.4s, v6.4s\n"
      "smin v10.4s, v10.4s, v6.4s\n"
      "smax v8.4s, v8.4s, v5.4s\n"
      "smax v9.4s, v9.4s, v5.4s\n"
      "smax v10.4s, v10.4s, v5.4s\n"
      "add v11.4s, v11.4s, v4.4s\n"
      "add v12.4s, v12.4s, v4.4s\n"
      "add v13.4s, v13.4s, v4.4s\n"
      "smin v11.4s, v11.4s, v6.4s\n"
      "smin v12.4s, v12.4s, v6.4s\n"
      "smin v13.4s, v13.4s, v6.4s\n"
      "smax v11.4s, v11.4s, v5.4s\n"
      "smax v12.4s, v12.4s, v5.4s\n"
      "smax v13.4s, v13.4s, v5.4s\n"
      "add v14.4s, v14.4s, v4.4s\n"
      "add v15.4s, v15.4s, v4.4s\n"
      "srshl v16.4s, v16.4s, v0.4s\n"
      "smin v14.4s, v14.4s, v6.4s\n"
      "smin v15.4s, v15.4s, v6.4s\n"
      "srshl v17.4s, v17.4s, v1.4s\n"
      "smax v14.4s, v14.4s, v5.4s\n"
      "smax v15.4s, v15.4s, v5.4s\n"
      "add v16.4s, v16.4s, v4.4s\n"
      "add v17.4s, v17.4s, v4.4s\n"
      "srshl v18.4s, v18.4s, v2.4s\n"
      "smin v16.4s, v16.4s, v6.4s\n"
      "smin v17.4s, v17.4s, v6.4s\n"
      "srshl v19.4s, v19.4s, v3.4s\n"
      "smax v16.4s, v16.4s, v5.4s\n"
      "smax v17.4s, v17.4s, v5.4s\n"
      "add v18.4s, v18.4s, v4.4s\n"
      "add v19.4s, v19.4s, v4.4s\n"
      "srshl v20.4s, v20.4s, v0.4s\n"
      "smin v18.4s, v18.4s, v6.4s\n"
      "smin v19.4s, v19.4s, v6.4s\n"
      "srshl v21.4s, v21.4s, v1.4s\n"
      "smax v18.4s, v18.4s, v5.4s\n"
      "smax v19.4s, v19.4s, v5.4s\n"
      "add v20.4s, v20.4s, v4.4s\n"
      "add v21.4s, v21.4s, v4.4s\n"
      "srshl v22.4s, v22.4s, v2.4s\n"
      "smin v20.4s, v20.4s, v6.4s\n"
      "smin v21.4s, v21.4s, v6.4s\n"
      "srshl v23.4s, v23.4s, v3.4s\n"
      "smax v20.4s, v20.4s, v5.4s\n"
      "smax v21.4s, v21.4s, v5.4s\n"
      "add v22.4s, v22.4s, v4.4s\n"
      "add v23.4s, v23.4s, v4.4s\n"
      "srshl v24.4s, v24.4s, v0.4s\n"
      "smin v22.4s, v22.4s, v6.4s\n"
      "smin v23.4s, v23.4s, v6.4s\n"
      "srshl v25.4s, v25.4s, v1.4s\n"
      "smax v22.4s, v22.4s, v5.4s\n"
      "smax v23.4s, v23.4s, v5.4s\n"
      "add v24.4s, v24.4s, v4.4s\n"
      "add v25.4s, v25.4s, v4.4s\n"
      "srshl v26.4s, v26.4s, v2.4s\n"
      "smin v24.4s, v24.4s, v6.4s\n"
      "smin v25.4s, v25.4s, v6.4s\n"
      "srshl v27.4s, v27.4s, v3.4s\n"
      "smax v24.4s, v24.4s, v5.4s\n"
      "smax v25.4s, v25.4s, v5.4s\n"
      "add v26.4s, v26.4s, v4.4s\n"
      "add v27.4s, v27.4s, v4.4s\n"
      "srshl v28.4s, v28.4s, v0.4s\n"
      "smin v26.4s, v26.4s, v6.4s\n"
      "smin v27.4s, v27.4s, v6.4s\n"
      "srshl v29.4s, v29.4s, v1.4s\n"
      "smax v26.4s, v26.4s, v5.4s\n"
      "smax v27.4s, v27.4s, v5.4s\n"
      "add v28.4s, v28.4s, v4.4s\n"
      "add v29.4s, v29.4s, v4.4s\n"
      "srshl v30.4s, v30.4s, v2.4s\n"
      "smin v28.4s, v28.4s, v6.4s\n"
      "smin v29.4s, v29.4s, v6.4s\n"
      "srshl v31.4s, v31.4s, v3.4s\n"
      "smax v28.4s, v28.4s, v5.4s\n"
      "smax v29.4s, v29.4s, v5.4s\n"
      "add v30.4s, v30.4s, v4.4s\n"
      "add v31.4s, v31.4s, v4.4s\n"
      "uzp1 v8.8h, v8.8h, v9.8h\n"
      "smin v30.4s, v30.4s, v6.4s\n"
      "smin v31.4s, v31.4s, v6.4s\n"
      "uzp1 v9.8h, v10.8h, v11.8h\n"
      "smax v30.4s, v30.4s, v5.4s\n"
      "smax v31.4s, v31.4s, v5.4s\n"
      "uzp1 v12.8h, v12.8h, v13.8h\n"
      "uzp1 v13.8h, v14.8h, v15.8h\n"
      "uzp1 v16.8h, v16.8h, v17.8h\n"
      "uzp1 v17.8h, v18.8h, v19.8h\n"
      "uzp1 v20.8h, v20.8h, v21.8h\n"
      "uzp1 v21.8h, v22.8h, v23.8h\n"
      "uzp1 v24.8h, v24.8h, v25.8h\n"
      "uzp1 v25.8h, v26.8h, v27.8h\n"
      "uzp1 v28.8h, v28.8h, v29.8h\n"
      "uzp1 v29.8h, v30.8h, v31.8h\n"
      "uzp1 v8.16b, v8.16b, v9.16b\n"
      "uzp1 v12.16b, v12.16b, v13.16b\n"
      "uzp1 v16.16b, v16.16b, v17.16b\n"
      "uzp1 v20.16b, v20.16b, v21.16b\n"
      "uzp1 v24.16b, v24.16b, v25.16b\n"
      "uzp1 v28.16b, v28.16b, v29.16b\n"
      "bge 167f\n"
      "tbz x15, #3, 162f\n"
      "str d8, [x13], #0x8\n"
      "str d12, [x9], #0x8\n"
      "str d16, [x27], #0x8\n"
      "str d20, [x25], #0x8\n"
      "str d24, [x23], #0x8\n"
      "str d28, [x21], #0x8\n"
      "tbz x15, #2, 160f\n"
      "st1 { v8.s }[2], [x13], #0x4\n"
      "st1 { v12.s }[2], [x9], #0x4\n"
      "st1 { v16.s }[2], [x27], #0x4\n"
      "st1 { v20.s }[2], [x25], #0x4\n"
      "st1 { v24.s }[2], [x23], #0x4\n"
      "st1 { v28.s }[2], [x21], #0x4\n"
      "tbz x15, #1, 159f\n"
      "st1 { v8.h }[6], [x13], #0x2\n"
      "st1 { v12.h }[6], [x9], #0x2\n"
      "st1 { v16.h }[6], [x27], #0x2\n"
      "st1 { v20.h }[6], [x25], #0x2\n"
      "st1 { v24.h }[6], [x23], #0x2\n"
      "st1 { v28.h }[6], [x21], #0x2\n"
      "tbz x15, #0, 166f\n"
      "st1 { v8.b }[14], [x13]\n"
      "st1 { v12.b }[14], [x9]\n"
      "st1 { v16.b }[14], [x27]\n"
      "st1 { v20.b }[14], [x25]\n"
      "st1 { v24.b }[14], [x23]\n"
      "st1 { v28.b }[14], [x21]\n"
      "b 166f\n"
      "159:"  // Height 6: Partial direct writeback: partial_1_12
      "tbz x15, #0, 166f\n"
      "st1 { v8.b }[12], [x13]\n"
      "st1 { v12.b }[12], [x9]\n"
      "st1 { v16.b }[12], [x27]\n"
      "st1 { v20.b }[12], [x25]\n"
      "st1 { v24.b }[12], [x23]\n"
      "st1 { v28.b }[12], [x21]\n"
      "b 166f\n"
      "160:"  // Height 6: Partial direct writeback: partial_2_8
      "tbz x15, #1, 161f\n"
      "st1 { v8.h }[4], [x13], #0x2\n"
      "st1 { v12.h }[4], [x9], #0x2\n"
      "st1 { v16.h }[4], [x27], #0x2\n"
      "st1 { v20.h }[4], [x25], #0x2\n"
      "st1 { v24.h }[4], [x23], #0x2\n"
      "st1 { v28.h }[4], [x21], #0x2\n"
      "tbz x15, #0, 166f\n"
      "st1 { v8.b }[10], [x13]\n"
      "st1 { v12.b }[10], [x9]\n"
      "st1 { v16.b }[10], [x27]\n"
      "st1 { v20.b }[10], [x25]\n"
      "st1 { v24.b }[10], [x23]\n"
      "st1 { v28.b }[10], [x21]\n"
      "b 166f\n"
      "161:"  // Height 6: Partial direct writeback: partial_1_8
      "tbz x15, #0, 166f\n"
      "st1 { v8.b }[8], [x13]\n"
      "st1 { v12.b }[8], [x9]\n"
      "st1 { v16.b }[8], [x27]\n"
      "st1 { v20.b }[8], [x25]\n"
      "st1 { v24.b }[8], [x23]\n"
      "st1 { v28.b }[8], [x21]\n"
      "b 166f\n"
      "162:"  // Height 6: Partial direct writeback: partial_4_0
      "tbz x15, #2, 164f\n"
      "str s8, [x13], #0x4\n"
      "str s12, [x9], #0x4\n"
      "str s16, [x27], #0x4\n"
      "str s20, [x25], #0x4\n"
      "str s24, [x23], #0x4\n"
      "str s28, [x21], #0x4\n"
      "tbz x15, #1, 163f\n"
      "st1 { v8.h }[2], [x13], #0x2\n"
      "st1 { v12.h }[2], [x9], #0x2\n"
      "st1 { v16.h }[2], [x27], #0x2\n"
      "st1 { v20.h }[2], [x25], #0x2\n"
      "st1 { v24.h }[2], [x23], #0x2\n"
      "st1 { v28.h }[2], [x21], #0x2\n"
      "tbz x15, #0, 166f\n"
      "st1 { v8.b }[6], [x13]\n"
      "st1 { v12.b }[6], [x9]\n"
      "st1 { v16.b }[6], [x27]\n"
      "st1 { v20.b }[6], [x25]\n"
      "st1 { v24.b }[6], [x23]\n"
      "st1 { v28.b }[6], [x21]\n"
      "b 166f\n"
      "163:"  // Height 6: Partial direct writeback: partial_1_4
      "tbz x15, #0, 166f\n"
      "st1 { v8.b }[4], [x13]\n"
      "st1 { v12.b }[4], [x9]\n"
      "st1 { v16.b }[4], [x27]\n"
      "st1 { v20.b }[4], [x25]\n"
      "st1 { v24.b }[4], [x23]\n"
      "st1 { v28.b }[4], [x21]\n"
      "b 166f\n"
      "164:"  // Height 6: Partial direct writeback: partial_2_0
      "tbz x15, #1, 165f\n"
      "str h8, [x13], #0x2\n"
      "str h12, [x9], #0x2\n"
      "str h16, [x27], #0x2\n"
      "str h20, [x25], #0x2\n"
      "str h24, [x23], #0x2\n"
      "str h28, [x21], #0x2\n"
      "tbz x15, #0, 166f\n"
      "st1 { v8.b }[2], [x13]\n"
      "st1 { v12.b }[2], [x9]\n"
      "st1 { v16.b }[2], [x27]\n"
      "st1 { v20.b }[2], [x25]\n"
      "st1 { v24.b }[2], [x23]\n"
      "st1 { v28.b }[2], [x21]\n"
      "b 166f\n"
      "165:"  // Height 6: Partial direct writeback: partial_1_0
      "str b8, [x13, #0x0]\n"
      "str b12, [x9, #0x0]\n"
      "str b16, [x27, #0x0]\n"
      "str b20, [x25, #0x0]\n"
      "str b24, [x23, #0x0]\n"
      "str b28, [x21, #0x0]\n"
      "166:"  // Height 6: Partial direct writeback: Done
      "b 168f\n"
      "167:"  // Height 6: Full writeback
      "str q8, [x13, #0x0]\n"
      "str q12, [x9, #0x0]\n"
      "str q16, [x27, #0x0]\n"
      "str q20, [x25, #0x0]\n"
      "str q24, [x23, #0x0]\n"
      "str q28, [x21, #0x0]\n"
      "add x13, x13, #0x10\n"
      "add x9, x9, #0x10\n"
      "add x27, x27, #0x10\n"
      "add x25, x25, #0x10\n"
      "add x23, x23, #0x10\n"
      "add x21, x21, #0x10\n"
      "168:"  // Height 6: Writeback done
      "subs x15, x15, #0x10\n"
      "bgt 143b\n"
      "subs %x[M], %x[M], #0x6\n"
      "beq 170f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 169f\n"
      "add x20, x20, #0x6\n"
      "str x20, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "b 1b\n"
      "169:"  // Update direct input
      "mov x19, #0x6\n"
      "madd %x[input_ptr], x19, x20, %x[input_ptr]\n"
      "b 1b\n"
      "170:"  // Exit

      : [M] "+r" (M), [input_ptr] "+r" (input_ptr), [output_ptr] "+r" (output_ptr)
      : [args_ptr] "r" (&ka), [c_offset] "I" (offsetof(Requantize32, c_offset)), [col_bias] "r" (col_bias), [flags] "r" (flags), [maxval] "I" (offsetof(Requantize32, maxval)), [minval] "I" (offsetof(Requantize32, minval)), [offsetof_B_ptr] "I" (offsetof(KernelArgs, B_ptr)), [offsetof_N] "I" (offsetof(KernelArgs, N)), [offsetof_input_initial_col] "I" (offsetof(KernelArgs, input_initial_col)), [offsetof_input_offset] "I" (offsetof(KernelArgs, input_offset)), [offsetof_multiplier_ptr] "I" (offsetof(KernelArgs, multiplier_ptr)), [offsetof_num_strings] "I" (offsetof(KernelArgs, num_strings)), [offsetof_output_offset] "I" (offsetof(KernelArgs, output_offset)), [offsetof_shift_ptr] "I" (offsetof(KernelArgs, shift_ptr)), [offsetof_string_lengths] "I" (offsetof(KernelArgs, string_lengths)), [per_layer_mul] "I" (offsetof(Requantize32, per_layer_mul)), [per_layer_right_shift] "I" (offsetof(Requantize32, per_layer_right_shift)), [qp] "r" (qp)
      : "cc", "memory", "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15", "v16", "v17", "v18", "v19", "v20", "v21", "v22", "v23", "v24", "v25", "v26", "v27", "v28", "v29", "v30", "v31", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28"
    );
}

} // namespace arm_gemm
#endif // __aarch64__
