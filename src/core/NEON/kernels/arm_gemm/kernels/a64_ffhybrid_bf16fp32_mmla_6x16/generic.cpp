/*
 * Copyright (c) 2022-2023 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#ifdef __aarch64__

#include "arm_gemm.hpp"
#include "../../utils.hpp"
#include "../../bfloat.hpp"

#include <cassert>
#include <limits>

namespace arm_gemm {

void a64_ffhybrid_bf16fp32_mmla_6x16 (
    unsigned int num_strings, const unsigned int *string_lengths, IndirectInputArg<bfloat16> A_arg,
    size_t M, size_t N, const bfloat16 *B_ptr, size_t B_stride, IndirectOutputArg<float> output_arg,
    const float *bias, Activation act, bool accumulate
)
{
    struct KernelArgs {
        float maxval = static_cast<float>(std::numeric_limits<float>::infinity());
        float minval = - static_cast<float>(std::numeric_limits<float>::infinity());
        unsigned int num_strings = {};
        const unsigned int *string_lengths = {};
        size_t N = {};
        const bfloat16 *B_ptr = {};
        const bfloat16 *cur_B_ptr = {};
        size_t B_stride = {};
        size_t output_offset = {};
        size_t input_initial_col = {};
        size_t input_offset = {};
    } ka;

    unsigned long flags=0;
    void *output_ptr;
    void *input_ptr;

    if (output_arg.is_indirect) {
        output_ptr=(void *)(output_arg.indirect.ptr);
        ka.output_offset=output_arg.indirect.offset;
        flags |= 0x4;
    } else {
        output_ptr=(void *)(output_arg.direct.base);
        ka.output_offset=output_arg.direct.stride;
    }

    if (A_arg.is_indirect) {
        input_ptr=(void *)(A_arg.indirect.ptr);
        ka.input_offset=A_arg.indirect.start_row;
        ka.input_initial_col=A_arg.indirect.start_col;
        flags |= 0x8;
    } else {
        assert(num_strings==1);
        input_ptr=(void *)(A_arg.direct.base);
        ka.input_offset=A_arg.direct.stride;
    }
    if (accumulate) {
        flags |= 0x1;
    }
    ka.num_strings = num_strings;
    ka.string_lengths = string_lengths;
    ka.N = N;
    ka.B_ptr = B_ptr;
    ka.B_stride = B_stride;
    switch(act.type) {
        default:
        case Activation::Type::None:
            break;
        case Activation::Type::BoundedReLU:
            ka.maxval = static_cast<float>(act.param1);
            /* fall through */
        case Activation::Type::ReLU:
            ka.minval = 0;
            flags |= 0x2;
            break;
    }
    __asm__ __volatile__(
      "1:"  // Row loop
      "cmp %x[M], #0x6\n"
      "bge 191f\n"
      "cmp %x[M], #0x4\n"
      "bgt 153f\n"
      "beq 115f\n"
      "cmp %x[M], #0x2\n"
      "bgt 77f\n"
      "beq 39f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x15, %x[bias]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_N]]\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "mov x13, %x[output_ptr]\n"
      "2:"  // Height 1: Column loop
      "ldr x12, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "ldr x20, [%x[args_ptr], %[offsetof_B_stride]]\n"
      "add x11, x12, x20, LSL #1\n"
      "add x10, x11, x20, LSL #1\n"
      "add x9, x10, x20, LSL #1\n"
      "add x20, x9, x20, LSL #1\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "cmp x14, #0xc\n"
      "bgt 3f\n"
      "cmp x14, #0x8\n"
      "mov x9, x12\n"
      "bgt 3f\n"
      "cmp x14, #0x4\n"
      "mov x10, x12\n"
      "bgt 3f\n"
      "mov x11, x12\n"
      "3:"  // Height 1: B setup done
      "cbz x15, 4f\n"
      "ldr q8, [x15, #0x0]\n"
      "ldr q9, [x15, #0x10]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x15, #0x20]\n"
      "ldr q11, [x15, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "add x15, x15, #0x40\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "b 16f\n"
      "4:"  // Height 1: no bias
      "tbz %x[flags], #0, 15f\n"
      "cmp x14, #0x10\n"
      "bge 13f\n"
      "tbz x14, #3, 8f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v10.4s }, [x13], #0x10\n"
      "tbz x14, #2, 6f\n"
      "ld1 { v11.4s }, [x13], #0x10\n"
      "tbz x14, #1, 5f\n"
      "ldr d16, [x13], #0x8\n"
      "mov x20, #0x38\n"
      "tbz x14, #0, 12f\n"
      "ld1 { v16.s }[2], [x13]\n"
      "b 12f\n"
      "5:"  // Height 1: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x14, #0, 12f\n"
      "ldr s16, [x13, #0x0]\n"
      "b 12f\n"
      "6:"  // Height 1: Partial accumulate: partial_2_8
      "tbz x14, #1, 7f\n"
      "ldr d11, [x13], #0x8\n"
      "mov x20, #0x28\n"
      "tbz x14, #0, 12f\n"
      "ld1 { v11.s }[2], [x13]\n"
      "b 12f\n"
      "7:"  // Height 1: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x14, #0, 12f\n"
      "ldr s11, [x13, #0x0]\n"
      "b 12f\n"
      "8:"  // Height 1: Partial accumulate: partial_4_0
      "tbz x14, #2, 10f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "tbz x14, #1, 9f\n"
      "ldr d10, [x13], #0x8\n"
      "mov x20, #0x18\n"
      "tbz x14, #0, 12f\n"
      "ld1 { v10.s }[2], [x13]\n"
      "b 12f\n"
      "9:"  // Height 1: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x14, #0, 12f\n"
      "ldr s10, [x13, #0x0]\n"
      "b 12f\n"
      "10:"  // Height 1: Partial accumulate: partial_2_0
      "tbz x14, #1, 11f\n"
      "ldr d9, [x13], #0x8\n"
      "mov x20, #0x8\n"
      "tbz x14, #0, 12f\n"
      "ld1 { v9.s }[2], [x13]\n"
      "b 12f\n"
      "11:"  // Height 1: Partial accumulate: partial_1_0
      "ldr s9, [x13, #0x0]\n"
      "mov x20, #0x0\n"
      "12:"  // Height 1: Partial accumulate: Done
      "sub x13, x13, x20\n"
      "b 14f\n"
      "13:"  // Height 1: full accumulate
      "ldr q9, [x13, #0x0]\n"
      "ldr q10, [x13, #0x10]\n"
      "ldr q11, [x13, #0x20]\n"
      "ldr q16, [x13, #0x30]\n"
      "14:"  // Height 1: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "b 16f\n"
      "15:"  // Height 1: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "16:"  // Height 1: setup done
      "mov x28, #0x0\n"
      "17:"  // Height 1: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 18f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "cbnz x28, 19f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "b 19f\n"
      "18:"  // Height 1: setup direct input
      "mov x26, %x[input_ptr]\n"
      "19:"  // Height 1: input setup done
      "cmp x27, #0x8\n"
      "blt 22f\n"
      "ldr q1, [x26, #0x0]\n"
      "ldr q7, [x12, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q6, [x12, #0x10]\n"
      "blt 21f\n"
      "20:"  // Height 1: Multiply loop: Main loop head
      "trn1 v20.2d, v1.2d, v21.2d\n"
      ".inst 0x6e47ee88  // bfmmla v8.4s, v20.8h, v7.8h\n"
      "ldr q17, [x11, #0x0]\n"
      ".inst 0x6e46ee8c  // bfmmla v12.4s, v20.8h, v6.8h\n"
      "ldr q19, [x11, #0x10]\n"
      ".inst 0x6e51ee89  // bfmmla v9.4s, v20.8h, v17.8h\n"
      "ldr q18, [x10, #0x0]\n"
      ".inst 0x6e53ee8d  // bfmmla v13.4s, v20.8h, v19.8h\n"
      "ldr q17, [x10, #0x10]\n"
      ".inst 0x6e52ee8a  // bfmmla v10.4s, v20.8h, v18.8h\n"
      "ldr q18, [x9, #0x0]\n"
      ".inst 0x6e51ee8e  // bfmmla v14.4s, v20.8h, v17.8h\n"
      "ldr q17, [x9, #0x10]\n"
      "trn2 v1.2d, v1.2d, v21.2d\n"
      ".inst 0x6e52ee8b  // bfmmla v11.4s, v20.8h, v18.8h\n"
      "ldr q18, [x12, #0x20]\n"
      ".inst 0x6e51ee8f  // bfmmla v15.4s, v20.8h, v17.8h\n"
      "ldr q17, [x12, #0x30]\n"
      ".inst 0x6e52ec28  // bfmmla v8.4s, v1.8h, v18.8h\n"
      "ldr q18, [x11, #0x20]\n"
      ".inst 0x6e51ec2c  // bfmmla v12.4s, v1.8h, v17.8h\n"
      "ldr q17, [x11, #0x30]\n"
      ".inst 0x6e52ec29  // bfmmla v9.4s, v1.8h, v18.8h\n"
      "ldr q18, [x10, #0x20]\n"
      ".inst 0x6e51ec2d  // bfmmla v13.4s, v1.8h, v17.8h\n"
      "ldr q17, [x10, #0x30]\n"
      ".inst 0x6e52ec2a  // bfmmla v10.4s, v1.8h, v18.8h\n"
      "ldr q18, [x9, #0x20]\n"
      ".inst 0x6e51ec2e  // bfmmla v14.4s, v1.8h, v17.8h\n"
      "ldr q17, [x9, #0x30]\n"
      "sub x27, x27, #0x8\n"
      "cmp x27, #0x10\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e52ec2b  // bfmmla v11.4s, v1.8h, v18.8h\n"
      ".inst 0x6e51ec2f  // bfmmla v15.4s, v1.8h, v17.8h\n"
      "ldr q1, [x26, #0x0]\n"
      "add x12, x12, #0x40\n"
      "ldr q7, [x12, #0x0]\n"
      "add x11, x11, #0x40\n"
      "ldr q6, [x12, #0x10]\n"
      "add x10, x10, #0x40\n"
      "add x9, x9, #0x40\n"
      "bge 20b\n"
      "21:"  // Height 1: Multiply loop: Single iteration only
      "trn1 v19.2d, v1.2d, v20.2d\n"
      ".inst 0x6e47ee68  // bfmmla v8.4s, v19.8h, v7.8h\n"
      "ldr q17, [x11, #0x0]\n"
      ".inst 0x6e46ee6c  // bfmmla v12.4s, v19.8h, v6.8h\n"
      "ldr q18, [x11, #0x10]\n"
      ".inst 0x6e51ee69  // bfmmla v9.4s, v19.8h, v17.8h\n"
      "ldr q17, [x10, #0x0]\n"
      ".inst 0x6e52ee6d  // bfmmla v13.4s, v19.8h, v18.8h\n"
      "ldr q18, [x10, #0x10]\n"
      ".inst 0x6e51ee6a  // bfmmla v10.4s, v19.8h, v17.8h\n"
      "ldr q17, [x9, #0x0]\n"
      ".inst 0x6e52ee6e  // bfmmla v14.4s, v19.8h, v18.8h\n"
      "ldr q24, [x9, #0x10]\n"
      "trn2 v1.2d, v1.2d, v20.2d\n"
      ".inst 0x6e51ee6b  // bfmmla v11.4s, v19.8h, v17.8h\n"
      "ldr q18, [x12, #0x20]\n"
      ".inst 0x6e58ee6f  // bfmmla v15.4s, v19.8h, v24.8h\n"
      "ldr q17, [x12, #0x30]\n"
      ".inst 0x6e52ec28  // bfmmla v8.4s, v1.8h, v18.8h\n"
      "ldr q19, [x11, #0x20]\n"
      ".inst 0x6e51ec2c  // bfmmla v12.4s, v1.8h, v17.8h\n"
      "ldr q17, [x11, #0x30]\n"
      ".inst 0x6e53ec29  // bfmmla v9.4s, v1.8h, v19.8h\n"
      "ldr q18, [x10, #0x20]\n"
      ".inst 0x6e51ec2d  // bfmmla v13.4s, v1.8h, v17.8h\n"
      "ldr q17, [x10, #0x30]\n"
      ".inst 0x6e52ec2a  // bfmmla v10.4s, v1.8h, v18.8h\n"
      "ldr q18, [x9, #0x20]\n"
      ".inst 0x6e51ec2e  // bfmmla v14.4s, v1.8h, v17.8h\n"
      "ldr q17, [x9, #0x30]\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x6e52ec2b  // bfmmla v11.4s, v1.8h, v18.8h\n"
      ".inst 0x6e51ec2f  // bfmmla v15.4s, v1.8h, v17.8h\n"
      "add x26, x26, #0x10\n"
      "add x12, x12, #0x40\n"
      "add x11, x11, #0x40\n"
      "add x10, x10, #0x40\n"
      "add x9, x9, #0x40\n"
      "22:"  // Height 1: Multiply loop: Main loop skip
      "cbz x27, 27f\n"
      "cmp x27, #0x4\n"
      "blt 24f\n"
      "23:"  // Height 1: Multiply loop: Odd block loop
      "ldr d19, [x26], #0x8\n"
      "ldr q18, [x12, #0x0]\n"
      "trn1 v19.2d, v19.2d, v17.2d\n"
      "ldr q17, [x12, #0x10]\n"
      ".inst 0x6e52ee68  // bfmmla v8.4s, v19.8h, v18.8h\n"
      "ldr q18, [x11, #0x0]\n"
      ".inst 0x6e51ee6c  // bfmmla v12.4s, v19.8h, v17.8h\n"
      "ldr q17, [x11, #0x10]\n"
      ".inst 0x6e52ee69  // bfmmla v9.4s, v19.8h, v18.8h\n"
      "ldr q18, [x10, #0x0]\n"
      ".inst 0x6e51ee6d  // bfmmla v13.4s, v19.8h, v17.8h\n"
      "ldr q17, [x10, #0x10]\n"
      ".inst 0x6e52ee6a  // bfmmla v10.4s, v19.8h, v18.8h\n"
      "ldr q18, [x9, #0x0]\n"
      ".inst 0x6e51ee6e  // bfmmla v14.4s, v19.8h, v17.8h\n"
      "ldr q17, [x9, #0x10]\n"
      "sub x27, x27, #0x4\n"
      "cmp x27, #0x4\n"
      ".inst 0x6e52ee6b  // bfmmla v11.4s, v19.8h, v18.8h\n"
      ".inst 0x6e51ee6f  // bfmmla v15.4s, v19.8h, v17.8h\n"
      "add x12, x12, #0x20\n"
      "add x11, x11, #0x20\n"
      "add x10, x10, #0x20\n"
      "add x9, x9, #0x20\n"
      "bge 23b\n"
      "24:"  // Height 1: Multiply loop: Skip odd blocks
      "cbz x27, 27f\n"
      "tbz x27, #1, 25f\n"
      "ldr s1, [x26], #0x4\n"
      "tbz x27, #0, 26f\n"
      "ld1 { v1.h }[2], [x26]\n"
      "b 26f\n"
      "25:"  // Height 1: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x26, #0x0]\n"
      "26:"  // Height 1: Multiply loop: Ragged operand read: Done
      "ldr q20, [x12, #0x0]\n"
      "ldr q18, [x12, #0x10]\n"
      "trn1 v19.2d, v1.2d, v17.2d\n"
      ".inst 0x6e54ee68  // bfmmla v8.4s, v19.8h, v20.8h\n"
      "ldr q17, [x11, #0x0]\n"
      ".inst 0x6e52ee6c  // bfmmla v12.4s, v19.8h, v18.8h\n"
      "ldr q18, [x11, #0x10]\n"
      ".inst 0x6e51ee69  // bfmmla v9.4s, v19.8h, v17.8h\n"
      "ldr q17, [x10, #0x0]\n"
      ".inst 0x6e52ee6d  // bfmmla v13.4s, v19.8h, v18.8h\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e51ee6a  // bfmmla v10.4s, v19.8h, v17.8h\n"
      "ldr q18, [x9, #0x0]\n"
      ".inst 0x6e46ee6e  // bfmmla v14.4s, v19.8h, v6.8h\n"
      "ldr q17, [x9, #0x10]\n"
      ".inst 0x6e52ee6b  // bfmmla v11.4s, v19.8h, v18.8h\n"
      ".inst 0x6e51ee6f  // bfmmla v15.4s, v19.8h, v17.8h\n"
      "add x12, x12, #0x20\n"
      "add x11, x11, #0x20\n"
      "add x10, x10, #0x20\n"
      "add x9, x9, #0x20\n"
      "27:"  // Height 1: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 17b\n"
      "uzp1 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v11.2d, v11.2d, v15.2d\n"
      "tbz %x[flags], #1, 28f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v18.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v17.4s }, [x20]\n"
      "fmin v8.4s, v8.4s, v18.4s\n"
      "fmin v9.4s, v9.4s, v18.4s\n"
      "fmin v10.4s, v10.4s, v18.4s\n"
      "fmin v11.4s, v11.4s, v18.4s\n"
      "fmax v8.4s, v8.4s, v17.4s\n"
      "fmax v9.4s, v9.4s, v17.4s\n"
      "fmax v10.4s, v10.4s, v17.4s\n"
      "fmax v11.4s, v11.4s, v17.4s\n"
      "28:"  // Height 1: No activation
      "cmp x14, #0x10\n"
      "bge 37f\n"
      "tbz x14, #3, 32f\n"
      "st1 { v8.4s }, [x13], #0x10\n"
      "st1 { v9.4s }, [x13], #0x10\n"
      "tbz x14, #2, 30f\n"
      "st1 { v10.4s }, [x13], #0x10\n"
      "tbz x14, #1, 29f\n"
      "str d11, [x13], #0x8\n"
      "tbz x14, #0, 36f\n"
      "st1 { v11.s }[2], [x13]\n"
      "b 36f\n"
      "29:"  // Height 1: Partial direct writeback: partial_1_12
      "tbz x14, #0, 36f\n"
      "str s11, [x13, #0x0]\n"
      "b 36f\n"
      "30:"  // Height 1: Partial direct writeback: partial_2_8
      "tbz x14, #1, 31f\n"
      "str d10, [x13], #0x8\n"
      "tbz x14, #0, 36f\n"
      "st1 { v10.s }[2], [x13]\n"
      "b 36f\n"
      "31:"  // Height 1: Partial direct writeback: partial_1_8
      "tbz x14, #0, 36f\n"
      "str s10, [x13, #0x0]\n"
      "b 36f\n"
      "32:"  // Height 1: Partial direct writeback: partial_4_0
      "tbz x14, #2, 34f\n"
      "st1 { v8.4s }, [x13], #0x10\n"
      "tbz x14, #1, 33f\n"
      "str d9, [x13], #0x8\n"
      "tbz x14, #0, 36f\n"
      "st1 { v9.s }[2], [x13]\n"
      "b 36f\n"
      "33:"  // Height 1: Partial direct writeback: partial_1_4
      "tbz x14, #0, 36f\n"
      "str s9, [x13, #0x0]\n"
      "b 36f\n"
      "34:"  // Height 1: Partial direct writeback: partial_2_0
      "tbz x14, #1, 35f\n"
      "str d8, [x13], #0x8\n"
      "tbz x14, #0, 36f\n"
      "st1 { v8.s }[2], [x13]\n"
      "b 36f\n"
      "35:"  // Height 1: Partial direct writeback: partial_1_0
      "str s8, [x13, #0x0]\n"
      "36:"  // Height 1: Partial direct writeback: Done
      "b 38f\n"
      "37:"  // Height 1: Full writeback
      "str q8, [x13, #0x0]\n"
      "str q9, [x13, #0x10]\n"
      "str q10, [x13, #0x20]\n"
      "str q11, [x13, #0x30]\n"
      "add x13, x13, #0x40\n"
      "38:"  // Height 1: Writeback done
      "subs x14, x14, #0x10\n"
      "bgt 2b\n"
      "b 230f\n"
      "39:"  // Height 2
      "ldr x20, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x15, %x[bias]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_N]]\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "mov x13, %x[output_ptr]\n"
      "40:"  // Height 2: Column loop
      "ldr x12, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "ldr x20, [%x[args_ptr], %[offsetof_B_stride]]\n"
      "add x11, x12, x20, LSL #1\n"
      "add x10, x11, x20, LSL #1\n"
      "add x9, x10, x20, LSL #1\n"
      "add x20, x9, x20, LSL #1\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "cmp x14, #0xc\n"
      "bgt 41f\n"
      "cmp x14, #0x8\n"
      "mov x9, x12\n"
      "bgt 41f\n"
      "cmp x14, #0x4\n"
      "mov x10, x12\n"
      "bgt 41f\n"
      "mov x11, x12\n"
      "41:"  // Height 2: B setup done
      "cbz x15, 42f\n"
      "ldr q8, [x15, #0x0]\n"
      "ldr q9, [x15, #0x10]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x15, #0x20]\n"
      "ldr q11, [x15, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "add x15, x15, #0x40\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "b 54f\n"
      "42:"  // Height 2: no bias
      "tbz %x[flags], #0, 53f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "cmp x14, #0x10\n"
      "add x25, x13, x20, LSL #2\n"
      "bge 51f\n"
      "tbz x14, #3, 46f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v10.4s }, [x13], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "tbz x14, #2, 44f\n"
      "ld1 { v11.4s }, [x13], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "tbz x14, #1, 43f\n"
      "ldr d16, [x13], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "tbz x14, #0, 50f\n"
      "ld1 { v16.s }[2], [x13]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "b 50f\n"
      "43:"  // Height 2: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x14, #0, 50f\n"
      "ldr s16, [x13, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "b 50f\n"
      "44:"  // Height 2: Partial accumulate: partial_2_8
      "tbz x14, #1, 45f\n"
      "ldr d11, [x13], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "tbz x14, #0, 50f\n"
      "ld1 { v11.s }[2], [x13]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "b 50f\n"
      "45:"  // Height 2: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x14, #0, 50f\n"
      "ldr s11, [x13, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "b 50f\n"
      "46:"  // Height 2: Partial accumulate: partial_4_0
      "tbz x14, #2, 48f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "tbz x14, #1, 47f\n"
      "ldr d10, [x13], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "tbz x14, #0, 50f\n"
      "ld1 { v10.s }[2], [x13]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "b 50f\n"
      "47:"  // Height 2: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x14, #0, 50f\n"
      "ldr s10, [x13, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "b 50f\n"
      "48:"  // Height 2: Partial accumulate: partial_2_0
      "tbz x14, #1, 49f\n"
      "ldr d9, [x13], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "tbz x14, #0, 50f\n"
      "ld1 { v9.s }[2], [x13]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "b 50f\n"
      "49:"  // Height 2: Partial accumulate: partial_1_0
      "ldr s9, [x13, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "50:"  // Height 2: Partial accumulate: Done
      "sub x13, x13, x20\n"
      "b 52f\n"
      "51:"  // Height 2: full accumulate
      "ldr q9, [x13, #0x0]\n"
      "ldr q10, [x13, #0x10]\n"
      "ldr q11, [x13, #0x20]\n"
      "ldr q16, [x13, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "52:"  // Height 2: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "b 54f\n"
      "53:"  // Height 2: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "54:"  // Height 2: setup done
      "mov x28, #0x0\n"
      "55:"  // Height 2: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 56f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "cbnz x28, 57f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "b 57f\n"
      "56:"  // Height 2: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "57:"  // Height 2: input setup done
      "cmp x27, #0x8\n"
      "blt 60f\n"
      "ldr q1, [x26, #0x0]\n"
      "ldr q2, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q7, [x12, #0x0]\n"
      "ldr q6, [x12, #0x10]\n"
      "blt 59f\n"
      "58:"  // Height 2: Multiply loop: Main loop head
      "trn1 v19.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ee68  // bfmmla v8.4s, v19.8h, v7.8h\n"
      "ldr q18, [x11, #0x0]\n"
      ".inst 0x6e46ee6c  // bfmmla v12.4s, v19.8h, v6.8h\n"
      "ldr q17, [x11, #0x10]\n"
      ".inst 0x6e52ee69  // bfmmla v9.4s, v19.8h, v18.8h\n"
      "ldr q18, [x10, #0x0]\n"
      ".inst 0x6e51ee6d  // bfmmla v13.4s, v19.8h, v17.8h\n"
      "ldr q17, [x10, #0x10]\n"
      ".inst 0x6e52ee6a  // bfmmla v10.4s, v19.8h, v18.8h\n"
      "ldr q18, [x9, #0x0]\n"
      ".inst 0x6e51ee6e  // bfmmla v14.4s, v19.8h, v17.8h\n"
      "ldr q17, [x9, #0x10]\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e52ee6b  // bfmmla v11.4s, v19.8h, v18.8h\n"
      "ldr q18, [x12, #0x20]\n"
      ".inst 0x6e51ee6f  // bfmmla v15.4s, v19.8h, v17.8h\n"
      "ldr q17, [x12, #0x30]\n"
      ".inst 0x6e52ec28  // bfmmla v8.4s, v1.8h, v18.8h\n"
      "ldr q18, [x11, #0x20]\n"
      ".inst 0x6e51ec2c  // bfmmla v12.4s, v1.8h, v17.8h\n"
      "ldr q17, [x11, #0x30]\n"
      ".inst 0x6e52ec29  // bfmmla v9.4s, v1.8h, v18.8h\n"
      "ldr q18, [x10, #0x20]\n"
      ".inst 0x6e51ec2d  // bfmmla v13.4s, v1.8h, v17.8h\n"
      "ldr q17, [x10, #0x30]\n"
      ".inst 0x6e52ec2a  // bfmmla v10.4s, v1.8h, v18.8h\n"
      "ldr q18, [x9, #0x20]\n"
      ".inst 0x6e51ec2e  // bfmmla v14.4s, v1.8h, v17.8h\n"
      "ldr q17, [x9, #0x30]\n"
      "sub x27, x27, #0x8\n"
      "cmp x27, #0x10\n"
      "add x26, x26, #0x10\n"
      "add x25, x25, #0x10\n"
      "ldr q2, [x25, #0x0]\n"
      ".inst 0x6e52ec2b  // bfmmla v11.4s, v1.8h, v18.8h\n"
      "add x12, x12, #0x40\n"
      "ldr q7, [x12, #0x0]\n"
      ".inst 0x6e51ec2f  // bfmmla v15.4s, v1.8h, v17.8h\n"
      "ldr q1, [x26, #0x0]\n"
      "ldr q6, [x12, #0x10]\n"
      "add x11, x11, #0x40\n"
      "add x10, x10, #0x40\n"
      "add x9, x9, #0x40\n"
      "bge 58b\n"
      "59:"  // Height 2: Multiply loop: Single iteration only
      "trn1 v19.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ee68  // bfmmla v8.4s, v19.8h, v7.8h\n"
      "ldr q18, [x11, #0x0]\n"
      ".inst 0x6e46ee6c  // bfmmla v12.4s, v19.8h, v6.8h\n"
      "ldr q17, [x11, #0x10]\n"
      ".inst 0x6e52ee69  // bfmmla v9.4s, v19.8h, v18.8h\n"
      "ldr q18, [x10, #0x0]\n"
      ".inst 0x6e51ee6d  // bfmmla v13.4s, v19.8h, v17.8h\n"
      "ldr q17, [x10, #0x10]\n"
      ".inst 0x6e52ee6a  // bfmmla v10.4s, v19.8h, v18.8h\n"
      "ldr q18, [x9, #0x0]\n"
      ".inst 0x6e51ee6e  // bfmmla v14.4s, v19.8h, v17.8h\n"
      "ldr q17, [x9, #0x10]\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e52ee6b  // bfmmla v11.4s, v19.8h, v18.8h\n"
      "ldr q18, [x12, #0x20]\n"
      ".inst 0x6e51ee6f  // bfmmla v15.4s, v19.8h, v17.8h\n"
      "ldr q17, [x12, #0x30]\n"
      ".inst 0x6e52ec28  // bfmmla v8.4s, v1.8h, v18.8h\n"
      "ldr q18, [x11, #0x20]\n"
      ".inst 0x6e51ec2c  // bfmmla v12.4s, v1.8h, v17.8h\n"
      "ldr q17, [x11, #0x30]\n"
      ".inst 0x6e52ec29  // bfmmla v9.4s, v1.8h, v18.8h\n"
      "ldr q18, [x10, #0x20]\n"
      ".inst 0x6e51ec2d  // bfmmla v13.4s, v1.8h, v17.8h\n"
      "ldr q17, [x10, #0x30]\n"
      ".inst 0x6e52ec2a  // bfmmla v10.4s, v1.8h, v18.8h\n"
      "ldr q18, [x9, #0x20]\n"
      ".inst 0x6e51ec2e  // bfmmla v14.4s, v1.8h, v17.8h\n"
      "ldr q17, [x9, #0x30]\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x6e52ec2b  // bfmmla v11.4s, v1.8h, v18.8h\n"
      ".inst 0x6e51ec2f  // bfmmla v15.4s, v1.8h, v17.8h\n"
      "add x26, x26, #0x10\n"
      "add x25, x25, #0x10\n"
      "add x12, x12, #0x40\n"
      "add x11, x11, #0x40\n"
      "add x10, x10, #0x40\n"
      "add x9, x9, #0x40\n"
      "60:"  // Height 2: Multiply loop: Main loop skip
      "cbz x27, 65f\n"
      "cmp x27, #0x4\n"
      "blt 62f\n"
      "61:"  // Height 2: Multiply loop: Odd block loop
      "ldr d18, [x26], #0x8\n"
      "ldr d17, [x25], #0x8\n"
      "trn1 v19.2d, v18.2d, v17.2d\n"
      "sub x27, x27, #0x4\n"
      "ldr q18, [x12, #0x0]\n"
      "ldr q17, [x12, #0x10]\n"
      ".inst 0x6e52ee68  // bfmmla v8.4s, v19.8h, v18.8h\n"
      ".inst 0x6e51ee6c  // bfmmla v12.4s, v19.8h, v17.8h\n"
      "ldr q26, [x11, #0x0]\n"
      "ldr q6, [x11, #0x10]\n"
      ".inst 0x6e5aee69  // bfmmla v9.4s, v19.8h, v26.8h\n"
      ".inst 0x6e46ee6d  // bfmmla v13.4s, v19.8h, v6.8h\n"
      "ldr q18, [x10, #0x0]\n"
      "ldr q17, [x10, #0x10]\n"
      ".inst 0x6e52ee6a  // bfmmla v10.4s, v19.8h, v18.8h\n"
      ".inst 0x6e51ee6e  // bfmmla v14.4s, v19.8h, v17.8h\n"
      "ldr q18, [x9, #0x0]\n"
      "ldr q17, [x9, #0x10]\n"
      "cmp x27, #0x4\n"
      ".inst 0x6e52ee6b  // bfmmla v11.4s, v19.8h, v18.8h\n"
      ".inst 0x6e51ee6f  // bfmmla v15.4s, v19.8h, v17.8h\n"
      "add x12, x12, #0x20\n"
      "add x11, x11, #0x20\n"
      "add x10, x10, #0x20\n"
      "add x9, x9, #0x20\n"
      "bge 61b\n"
      "62:"  // Height 2: Multiply loop: Skip odd blocks
      "cbz x27, 65f\n"
      "tbz x27, #1, 63f\n"
      "ldr s1, [x26], #0x4\n"
      "ldr s2, [x25], #0x4\n"
      "tbz x27, #0, 64f\n"
      "ld1 { v1.h }[2], [x26]\n"
      "ld1 { v2.h }[2], [x25]\n"
      "b 64f\n"
      "63:"  // Height 2: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x26, #0x0]\n"
      "ldr h2, [x25, #0x0]\n"
      "64:"  // Height 2: Multiply loop: Ragged operand read: Done
      "ldr q18, [x12, #0x0]\n"
      "ldr q17, [x12, #0x10]\n"
      "trn1 v19.2d, v1.2d, v2.2d\n"
      ".inst 0x6e52ee68  // bfmmla v8.4s, v19.8h, v18.8h\n"
      "ldr q18, [x11, #0x0]\n"
      ".inst 0x6e51ee6c  // bfmmla v12.4s, v19.8h, v17.8h\n"
      "ldr q17, [x11, #0x10]\n"
      ".inst 0x6e52ee69  // bfmmla v9.4s, v19.8h, v18.8h\n"
      "ldr q3, [x10, #0x0]\n"
      ".inst 0x6e51ee6d  // bfmmla v13.4s, v19.8h, v17.8h\n"
      "ldr q27, [x10, #0x10]\n"
      ".inst 0x6e43ee6a  // bfmmla v10.4s, v19.8h, v3.8h\n"
      "ldr q18, [x9, #0x0]\n"
      ".inst 0x6e5bee6e  // bfmmla v14.4s, v19.8h, v27.8h\n"
      "ldr q17, [x9, #0x10]\n"
      ".inst 0x6e52ee6b  // bfmmla v11.4s, v19.8h, v18.8h\n"
      ".inst 0x6e51ee6f  // bfmmla v15.4s, v19.8h, v17.8h\n"
      "add x12, x12, #0x20\n"
      "add x11, x11, #0x20\n"
      "add x10, x10, #0x20\n"
      "add x9, x9, #0x20\n"
      "65:"  // Height 2: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 55b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "add x25, x13, x20, LSL #2\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "tbz %x[flags], #1, 66f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v18.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v17.4s }, [x20]\n"
      "fmin v7.4s, v7.4s, v18.4s\n"
      "fmin v12.4s, v12.4s, v18.4s\n"
      "fmin v13.4s, v13.4s, v18.4s\n"
      "fmin v14.4s, v14.4s, v18.4s\n"
      "fmin v8.4s, v8.4s, v18.4s\n"
      "fmin v9.4s, v9.4s, v18.4s\n"
      "fmin v10.4s, v10.4s, v18.4s\n"
      "fmin v11.4s, v11.4s, v18.4s\n"
      "fmax v7.4s, v7.4s, v17.4s\n"
      "fmax v12.4s, v12.4s, v17.4s\n"
      "fmax v13.4s, v13.4s, v17.4s\n"
      "fmax v14.4s, v14.4s, v17.4s\n"
      "fmax v8.4s, v8.4s, v17.4s\n"
      "fmax v9.4s, v9.4s, v17.4s\n"
      "fmax v10.4s, v10.4s, v17.4s\n"
      "fmax v11.4s, v11.4s, v17.4s\n"
      "66:"  // Height 2: No activation
      "cmp x14, #0x10\n"
      "bge 75f\n"
      "tbz x14, #3, 70f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v12.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v9.4s }, [x25], #0x10\n"
      "tbz x14, #2, 68f\n"
      "st1 { v13.4s }, [x13], #0x10\n"
      "st1 { v10.4s }, [x25], #0x10\n"
      "tbz x14, #1, 67f\n"
      "str d14, [x13], #0x8\n"
      "str d11, [x25], #0x8\n"
      "tbz x14, #0, 74f\n"
      "st1 { v14.s }[2], [x13]\n"
      "st1 { v11.s }[2], [x25]\n"
      "b 74f\n"
      "67:"  // Height 2: Partial direct writeback: partial_1_12
      "tbz x14, #0, 74f\n"
      "str s14, [x13, #0x0]\n"
      "str s11, [x25, #0x0]\n"
      "b 74f\n"
      "68:"  // Height 2: Partial direct writeback: partial_2_8
      "tbz x14, #1, 69f\n"
      "str d13, [x13], #0x8\n"
      "str d10, [x25], #0x8\n"
      "tbz x14, #0, 74f\n"
      "st1 { v13.s }[2], [x13]\n"
      "st1 { v10.s }[2], [x25]\n"
      "b 74f\n"
      "69:"  // Height 2: Partial direct writeback: partial_1_8
      "tbz x14, #0, 74f\n"
      "str s13, [x13, #0x0]\n"
      "str s10, [x25, #0x0]\n"
      "b 74f\n"
      "70:"  // Height 2: Partial direct writeback: partial_4_0
      "tbz x14, #2, 72f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "tbz x14, #1, 71f\n"
      "str d12, [x13], #0x8\n"
      "str d9, [x25], #0x8\n"
      "tbz x14, #0, 74f\n"
      "st1 { v12.s }[2], [x13]\n"
      "st1 { v9.s }[2], [x25]\n"
      "b 74f\n"
      "71:"  // Height 2: Partial direct writeback: partial_1_4
      "tbz x14, #0, 74f\n"
      "str s12, [x13, #0x0]\n"
      "str s9, [x25, #0x0]\n"
      "b 74f\n"
      "72:"  // Height 2: Partial direct writeback: partial_2_0
      "tbz x14, #1, 73f\n"
      "str d7, [x13], #0x8\n"
      "str d8, [x25], #0x8\n"
      "tbz x14, #0, 74f\n"
      "st1 { v7.s }[2], [x13]\n"
      "st1 { v8.s }[2], [x25]\n"
      "b 74f\n"
      "73:"  // Height 2: Partial direct writeback: partial_1_0
      "str s7, [x13, #0x0]\n"
      "str s8, [x25, #0x0]\n"
      "74:"  // Height 2: Partial direct writeback: Done
      "b 76f\n"
      "75:"  // Height 2: Full writeback
      "str q7, [x13, #0x0]\n"
      "str q12, [x13, #0x10]\n"
      "str q13, [x13, #0x20]\n"
      "str q14, [x13, #0x30]\n"
      "add x13, x13, #0x40\n"
      "str q8, [x25, #0x0]\n"
      "str q9, [x25, #0x10]\n"
      "str q10, [x25, #0x20]\n"
      "str q11, [x25, #0x30]\n"
      "76:"  // Height 2: Writeback done
      "subs x14, x14, #0x10\n"
      "bgt 40b\n"
      "b 230f\n"
      "77:"  // Height 3
      "ldr x20, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x15, %x[bias]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_N]]\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "mov x13, %x[output_ptr]\n"
      "78:"  // Height 3: Column loop
      "ldr x12, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "ldr x20, [%x[args_ptr], %[offsetof_B_stride]]\n"
      "add x11, x12, x20, LSL #1\n"
      "add x10, x11, x20, LSL #1\n"
      "add x9, x10, x20, LSL #1\n"
      "add x20, x9, x20, LSL #1\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "cmp x14, #0xc\n"
      "bgt 79f\n"
      "cmp x14, #0x8\n"
      "mov x9, x12\n"
      "bgt 79f\n"
      "cmp x14, #0x4\n"
      "mov x10, x12\n"
      "bgt 79f\n"
      "mov x11, x12\n"
      "79:"  // Height 3: B setup done
      "cbz x15, 80f\n"
      "ldr q8, [x15, #0x0]\n"
      "ldr q9, [x15, #0x10]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x15, #0x20]\n"
      "ldr q11, [x15, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "add x15, x15, #0x40\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v16.16b, v8.16b\n"
      "mov v20.16b, v12.16b\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "b 92f\n"
      "80:"  // Height 3: no bias
      "tbz %x[flags], #0, 91f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "cmp x14, #0x10\n"
      "add x24, x25, x20, LSL #2\n"
      "bge 89f\n"
      "tbz x14, #3, 84f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v10.4s }, [x13], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "tbz x14, #2, 82f\n"
      "ld1 { v11.4s }, [x13], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v19.4s }, [x24], #0x10\n"
      "tbz x14, #1, 81f\n"
      "ldr d16, [x13], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d24, [x24], #0x8\n"
      "tbz x14, #0, 88f\n"
      "ld1 { v16.s }[2], [x13]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v24.s }[2], [x24]\n"
      "b 88f\n"
      "81:"  // Height 3: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x14, #0, 88f\n"
      "ldr s16, [x13, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s24, [x24, #0x0]\n"
      "b 88f\n"
      "82:"  // Height 3: Partial accumulate: partial_2_8
      "tbz x14, #1, 83f\n"
      "ldr d11, [x13], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d19, [x24], #0x8\n"
      "tbz x14, #0, 88f\n"
      "ld1 { v11.s }[2], [x13]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "b 88f\n"
      "83:"  // Height 3: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x14, #0, 88f\n"
      "ldr s11, [x13, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "b 88f\n"
      "84:"  // Height 3: Partial accumulate: partial_4_0
      "tbz x14, #2, 86f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "tbz x14, #1, 85f\n"
      "ldr d10, [x13], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d18, [x24], #0x8\n"
      "tbz x14, #0, 88f\n"
      "ld1 { v10.s }[2], [x13]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "b 88f\n"
      "85:"  // Height 3: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x14, #0, 88f\n"
      "ldr s10, [x13, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "b 88f\n"
      "86:"  // Height 3: Partial accumulate: partial_2_0
      "tbz x14, #1, 87f\n"
      "ldr d9, [x13], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d17, [x24], #0x8\n"
      "tbz x14, #0, 88f\n"
      "ld1 { v9.s }[2], [x13]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "b 88f\n"
      "87:"  // Height 3: Partial accumulate: partial_1_0
      "ldr s9, [x13, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s17, [x24, #0x0]\n"
      "88:"  // Height 3: Partial accumulate: Done
      "sub x13, x13, x20\n"
      "b 90f\n"
      "89:"  // Height 3: full accumulate
      "ldr q9, [x13, #0x0]\n"
      "ldr q10, [x13, #0x10]\n"
      "ldr q11, [x13, #0x20]\n"
      "ldr q16, [x13, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q17, [x24, #0x0]\n"
      "ldr q18, [x24, #0x10]\n"
      "ldr q19, [x24, #0x20]\n"
      "ldr q24, [x24, #0x30]\n"
      "90:"  // Height 3: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "b 92f\n"
      "91:"  // Height 3: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "92:"  // Height 3: setup done
      "mov x28, #0x0\n"
      "93:"  // Height 3: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 94f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "cbnz x28, 95f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "b 95f\n"
      "94:"  // Height 3: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "95:"  // Height 3: input setup done
      "cmp x27, #0x8\n"
      "blt 98f\n"
      "ldr q1, [x26, #0x0]\n"
      "ldr q2, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q7, [x12, #0x0]\n"
      "ldr q6, [x12, #0x10]\n"
      "blt 97f\n"
      "96:"  // Height 3: Multiply loop: Main loop head
      "trn1 v28.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ef88  // bfmmla v8.4s, v28.8h, v7.8h\n"
      "trn1 v27.2d, v3.2d, v29.2d\n"
      ".inst 0x6e47ef70  // bfmmla v16.4s, v27.8h, v7.8h\n"
      "ldr q26, [x11, #0x0]\n"
      ".inst 0x6e46ef8c  // bfmmla v12.4s, v28.8h, v6.8h\n"
      ".inst 0x6e46ef74  // bfmmla v20.4s, v27.8h, v6.8h\n"
      "ldr q25, [x11, #0x10]\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      "trn2 v3.2d, v3.2d, v29.2d\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      "cmp x27, #0x10\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      "ldr q26, [x12, #0x20]\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "ldr q25, [x12, #0x30]\n"
      "ldr q2, [x25, #0x0]\n"
      ".inst 0x6e5aec28  // bfmmla v8.4s, v1.8h, v26.8h\n"
      ".inst 0x6e5aec70  // bfmmla v16.4s, v3.8h, v26.8h\n"
      "ldr q26, [x11, #0x20]\n"
      ".inst 0x6e59ec2c  // bfmmla v12.4s, v1.8h, v25.8h\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e59ec74  // bfmmla v20.4s, v3.8h, v25.8h\n"
      "ldr q25, [x11, #0x30]\n"
      ".inst 0x6e5aec29  // bfmmla v9.4s, v1.8h, v26.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e5aec71  // bfmmla v17.4s, v3.8h, v26.8h\n"
      "ldr q26, [x10, #0x20]\n"
      ".inst 0x6e59ec2d  // bfmmla v13.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec75  // bfmmla v21.4s, v3.8h, v25.8h\n"
      "ldr q25, [x10, #0x30]\n"
      ".inst 0x6e5aec2a  // bfmmla v10.4s, v1.8h, v26.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e5aec72  // bfmmla v18.4s, v3.8h, v26.8h\n"
      "ldr q26, [x9, #0x20]\n"
      ".inst 0x6e59ec2e  // bfmmla v14.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec76  // bfmmla v22.4s, v3.8h, v25.8h\n"
      "ldr q25, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e5aec2b  // bfmmla v11.4s, v1.8h, v26.8h\n"
      ".inst 0x6e5aec73  // bfmmla v19.4s, v3.8h, v26.8h\n"
      "ldr q7, [x12, #0x0]\n"
      ".inst 0x6e59ec2f  // bfmmla v15.4s, v1.8h, v25.8h\n"
      "ldr q1, [x26, #0x0]\n"
      ".inst 0x6e59ec77  // bfmmla v23.4s, v3.8h, v25.8h\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q6, [x12, #0x10]\n"
      "bge 96b\n"
      "97:"  // Height 3: Multiply loop: Single iteration only
      "trn1 v28.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ef88  // bfmmla v8.4s, v28.8h, v7.8h\n"
      "trn1 v27.2d, v3.2d, v29.2d\n"
      ".inst 0x6e47ef70  // bfmmla v16.4s, v27.8h, v7.8h\n"
      "ldr q26, [x11, #0x0]\n"
      ".inst 0x6e46ef8c  // bfmmla v12.4s, v28.8h, v6.8h\n"
      ".inst 0x6e46ef74  // bfmmla v20.4s, v27.8h, v6.8h\n"
      "ldr q25, [x11, #0x10]\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      "trn2 v3.2d, v3.2d, v29.2d\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      "ldr q26, [x12, #0x20]\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "ldr q25, [x12, #0x30]\n"
      ".inst 0x6e5aec28  // bfmmla v8.4s, v1.8h, v26.8h\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e5aec70  // bfmmla v16.4s, v3.8h, v26.8h\n"
      "ldr q26, [x11, #0x20]\n"
      ".inst 0x6e59ec2c  // bfmmla v12.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec74  // bfmmla v20.4s, v3.8h, v25.8h\n"
      "ldr q25, [x11, #0x30]\n"
      ".inst 0x6e5aec29  // bfmmla v9.4s, v1.8h, v26.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e5aec71  // bfmmla v17.4s, v3.8h, v26.8h\n"
      "ldr q26, [x10, #0x20]\n"
      ".inst 0x6e59ec2d  // bfmmla v13.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec75  // bfmmla v21.4s, v3.8h, v25.8h\n"
      "ldr q25, [x10, #0x30]\n"
      ".inst 0x6e5aec2a  // bfmmla v10.4s, v1.8h, v26.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e5aec72  // bfmmla v18.4s, v3.8h, v26.8h\n"
      "ldr q26, [x9, #0x20]\n"
      ".inst 0x6e59ec2e  // bfmmla v14.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec76  // bfmmla v22.4s, v3.8h, v25.8h\n"
      "ldr q25, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e5aec2b  // bfmmla v11.4s, v1.8h, v26.8h\n"
      ".inst 0x6e5aec73  // bfmmla v19.4s, v3.8h, v26.8h\n"
      ".inst 0x6e59ec2f  // bfmmla v15.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec77  // bfmmla v23.4s, v3.8h, v25.8h\n"
      "98:"  // Height 3: Multiply loop: Main loop skip
      "cbz x27, 103f\n"
      "cmp x27, #0x4\n"
      "blt 100f\n"
      "99:"  // Height 3: Multiply loop: Odd block loop
      "ldr d26, [x26], #0x8\n"
      "ldr d25, [x25], #0x8\n"
      "trn1 v28.2d, v26.2d, v25.2d\n"
      "ldr d25, [x24], #0x8\n"
      "ldr q26, [x12, #0x0]\n"
      "trn1 v27.2d, v25.2d, v27.2d\n"
      ".inst 0x6e5aef88  // bfmmla v8.4s, v28.8h, v26.8h\n"
      "ldr q25, [x12, #0x10]\n"
      ".inst 0x6e5aef70  // bfmmla v16.4s, v27.8h, v26.8h\n"
      "ldr q26, [x11, #0x0]\n"
      ".inst 0x6e59ef8c  // bfmmla v12.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef74  // bfmmla v20.4s, v27.8h, v25.8h\n"
      "ldr q25, [x11, #0x10]\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      "sub x27, x27, #0x4\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      "cmp x27, #0x4\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "bge 99b\n"
      "100:"  // Height 3: Multiply loop: Skip odd blocks
      "cbz x27, 103f\n"
      "tbz x27, #1, 101f\n"
      "ldr s1, [x26], #0x4\n"
      "ldr s2, [x25], #0x4\n"
      "ldr s3, [x24], #0x4\n"
      "tbz x27, #0, 102f\n"
      "ld1 { v1.h }[2], [x26]\n"
      "ld1 { v2.h }[2], [x25]\n"
      "ld1 { v3.h }[2], [x24]\n"
      "b 102f\n"
      "101:"  // Height 3: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x26, #0x0]\n"
      "ldr h2, [x25, #0x0]\n"
      "ldr h3, [x24, #0x0]\n"
      "102:"  // Height 3: Multiply loop: Ragged operand read: Done
      "ldr q26, [x12, #0x0]\n"
      "ldr q29, [x12, #0x10]\n"
      "trn1 v28.2d, v1.2d, v2.2d\n"
      "trn1 v27.2d, v3.2d, v25.2d\n"
      ".inst 0x6e5aef88  // bfmmla v8.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef70  // bfmmla v16.4s, v27.8h, v26.8h\n"
      "ldr q26, [x11, #0x0]\n"
      ".inst 0x6e5def8c  // bfmmla v12.4s, v28.8h, v29.8h\n"
      ".inst 0x6e5def74  // bfmmla v20.4s, v27.8h, v29.8h\n"
      "ldr q25, [x11, #0x10]\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "103:"  // Height 3: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 93b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "add x24, x25, x20, LSL #2\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v19.2d, v19.2d, v23.2d\n"
      "tbz %x[flags], #1, 104f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v26.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v25.4s }, [x20]\n"
      "fmin v7.4s, v7.4s, v26.4s\n"
      "fmin v12.4s, v12.4s, v26.4s\n"
      "fmin v13.4s, v13.4s, v26.4s\n"
      "fmin v14.4s, v14.4s, v26.4s\n"
      "fmin v8.4s, v8.4s, v26.4s\n"
      "fmin v9.4s, v9.4s, v26.4s\n"
      "fmin v10.4s, v10.4s, v26.4s\n"
      "fmin v11.4s, v11.4s, v26.4s\n"
      "fmin v16.4s, v16.4s, v26.4s\n"
      "fmin v17.4s, v17.4s, v26.4s\n"
      "fmin v18.4s, v18.4s, v26.4s\n"
      "fmin v19.4s, v19.4s, v26.4s\n"
      "fmax v7.4s, v7.4s, v25.4s\n"
      "fmax v12.4s, v12.4s, v25.4s\n"
      "fmax v13.4s, v13.4s, v25.4s\n"
      "fmax v14.4s, v14.4s, v25.4s\n"
      "fmax v8.4s, v8.4s, v25.4s\n"
      "fmax v9.4s, v9.4s, v25.4s\n"
      "fmax v10.4s, v10.4s, v25.4s\n"
      "fmax v11.4s, v11.4s, v25.4s\n"
      "fmax v16.4s, v16.4s, v25.4s\n"
      "fmax v17.4s, v17.4s, v25.4s\n"
      "fmax v18.4s, v18.4s, v25.4s\n"
      "fmax v19.4s, v19.4s, v25.4s\n"
      "104:"  // Height 3: No activation
      "cmp x14, #0x10\n"
      "bge 113f\n"
      "tbz x14, #3, 108f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v12.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v9.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v17.4s }, [x24], #0x10\n"
      "tbz x14, #2, 106f\n"
      "st1 { v13.4s }, [x13], #0x10\n"
      "st1 { v10.4s }, [x25], #0x10\n"
      "st1 { v18.4s }, [x24], #0x10\n"
      "tbz x14, #1, 105f\n"
      "str d14, [x13], #0x8\n"
      "str d11, [x25], #0x8\n"
      "str d19, [x24], #0x8\n"
      "tbz x14, #0, 112f\n"
      "st1 { v14.s }[2], [x13]\n"
      "st1 { v11.s }[2], [x25]\n"
      "st1 { v19.s }[2], [x24]\n"
      "b 112f\n"
      "105:"  // Height 3: Partial direct writeback: partial_1_12
      "tbz x14, #0, 112f\n"
      "str s14, [x13, #0x0]\n"
      "str s11, [x25, #0x0]\n"
      "str s19, [x24, #0x0]\n"
      "b 112f\n"
      "106:"  // Height 3: Partial direct writeback: partial_2_8
      "tbz x14, #1, 107f\n"
      "str d13, [x13], #0x8\n"
      "str d10, [x25], #0x8\n"
      "str d18, [x24], #0x8\n"
      "tbz x14, #0, 112f\n"
      "st1 { v13.s }[2], [x13]\n"
      "st1 { v10.s }[2], [x25]\n"
      "st1 { v18.s }[2], [x24]\n"
      "b 112f\n"
      "107:"  // Height 3: Partial direct writeback: partial_1_8
      "tbz x14, #0, 112f\n"
      "str s13, [x13, #0x0]\n"
      "str s10, [x25, #0x0]\n"
      "str s18, [x24, #0x0]\n"
      "b 112f\n"
      "108:"  // Height 3: Partial direct writeback: partial_4_0
      "tbz x14, #2, 110f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "tbz x14, #1, 109f\n"
      "str d12, [x13], #0x8\n"
      "str d9, [x25], #0x8\n"
      "str d17, [x24], #0x8\n"
      "tbz x14, #0, 112f\n"
      "st1 { v12.s }[2], [x13]\n"
      "st1 { v9.s }[2], [x25]\n"
      "st1 { v17.s }[2], [x24]\n"
      "b 112f\n"
      "109:"  // Height 3: Partial direct writeback: partial_1_4
      "tbz x14, #0, 112f\n"
      "str s12, [x13, #0x0]\n"
      "str s9, [x25, #0x0]\n"
      "str s17, [x24, #0x0]\n"
      "b 112f\n"
      "110:"  // Height 3: Partial direct writeback: partial_2_0
      "tbz x14, #1, 111f\n"
      "str d7, [x13], #0x8\n"
      "str d8, [x25], #0x8\n"
      "str d16, [x24], #0x8\n"
      "tbz x14, #0, 112f\n"
      "st1 { v7.s }[2], [x13]\n"
      "st1 { v8.s }[2], [x25]\n"
      "st1 { v16.s }[2], [x24]\n"
      "b 112f\n"
      "111:"  // Height 3: Partial direct writeback: partial_1_0
      "str s7, [x13, #0x0]\n"
      "str s8, [x25, #0x0]\n"
      "str s16, [x24, #0x0]\n"
      "112:"  // Height 3: Partial direct writeback: Done
      "b 114f\n"
      "113:"  // Height 3: Full writeback
      "str q7, [x13, #0x0]\n"
      "str q12, [x13, #0x10]\n"
      "str q13, [x13, #0x20]\n"
      "str q14, [x13, #0x30]\n"
      "add x13, x13, #0x40\n"
      "str q8, [x25, #0x0]\n"
      "str q9, [x25, #0x10]\n"
      "str q10, [x25, #0x20]\n"
      "str q11, [x25, #0x30]\n"
      "str q16, [x24, #0x0]\n"
      "str q17, [x24, #0x10]\n"
      "str q18, [x24, #0x20]\n"
      "str q19, [x24, #0x30]\n"
      "114:"  // Height 3: Writeback done
      "subs x14, x14, #0x10\n"
      "bgt 78b\n"
      "b 230f\n"
      "115:"  // Height 4
      "ldr x20, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x15, %x[bias]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_N]]\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "mov x13, %x[output_ptr]\n"
      "116:"  // Height 4: Column loop
      "ldr x12, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "ldr x20, [%x[args_ptr], %[offsetof_B_stride]]\n"
      "add x11, x12, x20, LSL #1\n"
      "add x10, x11, x20, LSL #1\n"
      "add x9, x10, x20, LSL #1\n"
      "add x20, x9, x20, LSL #1\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "cmp x14, #0xc\n"
      "bgt 117f\n"
      "cmp x14, #0x8\n"
      "mov x9, x12\n"
      "bgt 117f\n"
      "cmp x14, #0x4\n"
      "mov x10, x12\n"
      "bgt 117f\n"
      "mov x11, x12\n"
      "117:"  // Height 4: B setup done
      "cbz x15, 118f\n"
      "ldr q8, [x15, #0x0]\n"
      "ldr q9, [x15, #0x10]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x15, #0x20]\n"
      "ldr q11, [x15, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "add x15, x15, #0x40\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v16.16b, v8.16b\n"
      "mov v20.16b, v12.16b\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "b 130f\n"
      "118:"  // Height 4: no bias
      "tbz %x[flags], #0, 129f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "cmp x14, #0x10\n"
      "add x23, x24, x20, LSL #2\n"
      "bge 127f\n"
      "tbz x14, #3, 122f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v10.4s }, [x13], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "ld1 { v21.4s }, [x23], #0x10\n"
      "tbz x14, #2, 120f\n"
      "ld1 { v11.4s }, [x13], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v19.4s }, [x24], #0x10\n"
      "ld1 { v22.4s }, [x23], #0x10\n"
      "tbz x14, #1, 119f\n"
      "ldr d16, [x13], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d24, [x24], #0x8\n"
      "ldr d23, [x23], #0x8\n"
      "tbz x14, #0, 126f\n"
      "ld1 { v16.s }[2], [x13]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v24.s }[2], [x24]\n"
      "ld1 { v23.s }[2], [x23]\n"
      "b 126f\n"
      "119:"  // Height 4: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x14, #0, 126f\n"
      "ldr s16, [x13, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s24, [x24, #0x0]\n"
      "ldr s23, [x23, #0x0]\n"
      "b 126f\n"
      "120:"  // Height 4: Partial accumulate: partial_2_8
      "tbz x14, #1, 121f\n"
      "ldr d11, [x13], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d19, [x24], #0x8\n"
      "ldr d22, [x23], #0x8\n"
      "tbz x14, #0, 126f\n"
      "ld1 { v11.s }[2], [x13]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "ld1 { v22.s }[2], [x23]\n"
      "b 126f\n"
      "121:"  // Height 4: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x14, #0, 126f\n"
      "ldr s11, [x13, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "ldr s22, [x23, #0x0]\n"
      "b 126f\n"
      "122:"  // Height 4: Partial accumulate: partial_4_0
      "tbz x14, #2, 124f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "tbz x14, #1, 123f\n"
      "ldr d10, [x13], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d18, [x24], #0x8\n"
      "ldr d21, [x23], #0x8\n"
      "tbz x14, #0, 126f\n"
      "ld1 { v10.s }[2], [x13]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "ld1 { v21.s }[2], [x23]\n"
      "b 126f\n"
      "123:"  // Height 4: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x14, #0, 126f\n"
      "ldr s10, [x13, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "ldr s21, [x23, #0x0]\n"
      "b 126f\n"
      "124:"  // Height 4: Partial accumulate: partial_2_0
      "tbz x14, #1, 125f\n"
      "ldr d9, [x13], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d17, [x24], #0x8\n"
      "ldr d20, [x23], #0x8\n"
      "tbz x14, #0, 126f\n"
      "ld1 { v9.s }[2], [x13]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "ld1 { v20.s }[2], [x23]\n"
      "b 126f\n"
      "125:"  // Height 4: Partial accumulate: partial_1_0
      "ldr s9, [x13, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s17, [x24, #0x0]\n"
      "ldr s20, [x23, #0x0]\n"
      "126:"  // Height 4: Partial accumulate: Done
      "sub x13, x13, x20\n"
      "b 128f\n"
      "127:"  // Height 4: full accumulate
      "ldr q9, [x13, #0x0]\n"
      "ldr q10, [x13, #0x10]\n"
      "ldr q11, [x13, #0x20]\n"
      "ldr q16, [x13, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q17, [x24, #0x0]\n"
      "ldr q18, [x24, #0x10]\n"
      "ldr q19, [x24, #0x20]\n"
      "ldr q24, [x24, #0x30]\n"
      "ldr q20, [x23, #0x0]\n"
      "ldr q21, [x23, #0x10]\n"
      "ldr q22, [x23, #0x20]\n"
      "ldr q23, [x23, #0x30]\n"
      "128:"  // Height 4: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "b 130f\n"
      "129:"  // Height 4: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "130:"  // Height 4: setup done
      "mov x28, #0x0\n"
      "131:"  // Height 4: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 132f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "cbnz x28, 133f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "b 133f\n"
      "132:"  // Height 4: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "133:"  // Height 4: input setup done
      "cmp x27, #0x8\n"
      "blt 136f\n"
      "ldr q1, [x26, #0x0]\n"
      "ldr q2, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q4, [x23, #0x0]\n"
      "ldr q7, [x12, #0x0]\n"
      "ldr q6, [x12, #0x10]\n"
      "blt 135f\n"
      "134:"  // Height 4: Multiply loop: Main loop head
      "trn1 v28.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ef88  // bfmmla v8.4s, v28.8h, v7.8h\n"
      "sub x27, x27, #0x8\n"
      "trn1 v27.2d, v3.2d, v4.2d\n"
      ".inst 0x6e47ef70  // bfmmla v16.4s, v27.8h, v7.8h\n"
      "ldr q26, [x11, #0x0]\n"
      ".inst 0x6e46ef8c  // bfmmla v12.4s, v28.8h, v6.8h\n"
      ".inst 0x6e46ef74  // bfmmla v20.4s, v27.8h, v6.8h\n"
      "ldr q25, [x11, #0x10]\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      "cmp x27, #0x10\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      "ldr q26, [x12, #0x20]\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      "add x23, x23, #0x10\n"
      "ldr q4, [x23, #0x0]\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "ldr q25, [x12, #0x30]\n"
      ".inst 0x6e5aec28  // bfmmla v8.4s, v1.8h, v26.8h\n"
      "ldr q2, [x25, #0x0]\n"
      ".inst 0x6e5aec70  // bfmmla v16.4s, v3.8h, v26.8h\n"
      "ldr q26, [x11, #0x20]\n"
      ".inst 0x6e59ec2c  // bfmmla v12.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec74  // bfmmla v20.4s, v3.8h, v25.8h\n"
      "ldr q25, [x11, #0x30]\n"
      ".inst 0x6e5aec29  // bfmmla v9.4s, v1.8h, v26.8h\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e5aec71  // bfmmla v17.4s, v3.8h, v26.8h\n"
      "ldr q26, [x10, #0x20]\n"
      ".inst 0x6e59ec2d  // bfmmla v13.4s, v1.8h, v25.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e59ec75  // bfmmla v21.4s, v3.8h, v25.8h\n"
      "ldr q25, [x10, #0x30]\n"
      ".inst 0x6e5aec2a  // bfmmla v10.4s, v1.8h, v26.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e5aec72  // bfmmla v18.4s, v3.8h, v26.8h\n"
      "ldr q26, [x9, #0x20]\n"
      ".inst 0x6e59ec2e  // bfmmla v14.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec76  // bfmmla v22.4s, v3.8h, v25.8h\n"
      "ldr q25, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e5aec2b  // bfmmla v11.4s, v1.8h, v26.8h\n"
      ".inst 0x6e5aec73  // bfmmla v19.4s, v3.8h, v26.8h\n"
      "ldr q7, [x12, #0x0]\n"
      ".inst 0x6e59ec2f  // bfmmla v15.4s, v1.8h, v25.8h\n"
      "ldr q1, [x26, #0x0]\n"
      ".inst 0x6e59ec77  // bfmmla v23.4s, v3.8h, v25.8h\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q6, [x12, #0x10]\n"
      "bge 134b\n"
      "135:"  // Height 4: Multiply loop: Single iteration only
      "trn1 v28.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ef88  // bfmmla v8.4s, v28.8h, v7.8h\n"
      "sub x27, x27, #0x8\n"
      "trn1 v27.2d, v3.2d, v4.2d\n"
      ".inst 0x6e47ef70  // bfmmla v16.4s, v27.8h, v7.8h\n"
      "ldr q26, [x11, #0x0]\n"
      ".inst 0x6e46ef8c  // bfmmla v12.4s, v28.8h, v6.8h\n"
      ".inst 0x6e46ef74  // bfmmla v20.4s, v27.8h, v6.8h\n"
      "ldr q25, [x11, #0x10]\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      "add x23, x23, #0x10\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      "ldr q26, [x12, #0x20]\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "ldr q25, [x12, #0x30]\n"
      ".inst 0x6e5aec28  // bfmmla v8.4s, v1.8h, v26.8h\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e5aec70  // bfmmla v16.4s, v3.8h, v26.8h\n"
      "ldr q26, [x11, #0x20]\n"
      ".inst 0x6e59ec2c  // bfmmla v12.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec74  // bfmmla v20.4s, v3.8h, v25.8h\n"
      "ldr q25, [x11, #0x30]\n"
      ".inst 0x6e5aec29  // bfmmla v9.4s, v1.8h, v26.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e5aec71  // bfmmla v17.4s, v3.8h, v26.8h\n"
      "ldr q26, [x10, #0x20]\n"
      ".inst 0x6e59ec2d  // bfmmla v13.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec75  // bfmmla v21.4s, v3.8h, v25.8h\n"
      "ldr q25, [x10, #0x30]\n"
      ".inst 0x6e5aec2a  // bfmmla v10.4s, v1.8h, v26.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e5aec72  // bfmmla v18.4s, v3.8h, v26.8h\n"
      "ldr q26, [x9, #0x20]\n"
      ".inst 0x6e59ec2e  // bfmmla v14.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec76  // bfmmla v22.4s, v3.8h, v25.8h\n"
      "ldr q25, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e5aec2b  // bfmmla v11.4s, v1.8h, v26.8h\n"
      ".inst 0x6e5aec73  // bfmmla v19.4s, v3.8h, v26.8h\n"
      ".inst 0x6e59ec2f  // bfmmla v15.4s, v1.8h, v25.8h\n"
      ".inst 0x6e59ec77  // bfmmla v23.4s, v3.8h, v25.8h\n"
      "136:"  // Height 4: Multiply loop: Main loop skip
      "cbz x27, 141f\n"
      "cmp x27, #0x4\n"
      "blt 138f\n"
      "137:"  // Height 4: Multiply loop: Odd block loop
      "ldr d26, [x26], #0x8\n"
      "ldr d25, [x25], #0x8\n"
      "trn1 v28.2d, v26.2d, v25.2d\n"
      "sub x27, x27, #0x4\n"
      "ldr d26, [x24], #0x8\n"
      "ldr d25, [x23], #0x8\n"
      "trn1 v27.2d, v26.2d, v25.2d\n"
      "cmp x27, #0x4\n"
      "ldr q26, [x12, #0x0]\n"
      "ldr q25, [x12, #0x10]\n"
      ".inst 0x6e5aef88  // bfmmla v8.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef70  // bfmmla v16.4s, v27.8h, v26.8h\n"
      "ldr q26, [x11, #0x0]\n"
      ".inst 0x6e59ef8c  // bfmmla v12.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef74  // bfmmla v20.4s, v27.8h, v25.8h\n"
      "ldr q25, [x11, #0x10]\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "bge 137b\n"
      "138:"  // Height 4: Multiply loop: Skip odd blocks
      "cbz x27, 141f\n"
      "tbz x27, #1, 139f\n"
      "ldr s1, [x26], #0x4\n"
      "ldr s2, [x25], #0x4\n"
      "ldr s3, [x24], #0x4\n"
      "ldr s4, [x23], #0x4\n"
      "tbz x27, #0, 140f\n"
      "ld1 { v1.h }[2], [x26]\n"
      "ld1 { v2.h }[2], [x25]\n"
      "ld1 { v3.h }[2], [x24]\n"
      "ld1 { v4.h }[2], [x23]\n"
      "b 140f\n"
      "139:"  // Height 4: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x26, #0x0]\n"
      "ldr h2, [x25, #0x0]\n"
      "ldr h3, [x24, #0x0]\n"
      "ldr h4, [x23, #0x0]\n"
      "140:"  // Height 4: Multiply loop: Ragged operand read: Done
      "ldr q26, [x12, #0x0]\n"
      "ldr q25, [x12, #0x10]\n"
      "trn1 v28.2d, v1.2d, v2.2d\n"
      "trn1 v27.2d, v3.2d, v4.2d\n"
      ".inst 0x6e5aef88  // bfmmla v8.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef70  // bfmmla v16.4s, v27.8h, v26.8h\n"
      "ldr q26, [x11, #0x0]\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e59ef8c  // bfmmla v12.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef74  // bfmmla v20.4s, v27.8h, v25.8h\n"
      "ldr q25, [x11, #0x10]\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e5aef89  // bfmmla v9.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef71  // bfmmla v17.4s, v27.8h, v26.8h\n"
      "ldr q26, [x10, #0x0]\n"
      ".inst 0x6e59ef8d  // bfmmla v13.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef75  // bfmmla v21.4s, v27.8h, v25.8h\n"
      "ldr q25, [x10, #0x10]\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e5aef8a  // bfmmla v10.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef72  // bfmmla v18.4s, v27.8h, v26.8h\n"
      "ldr q26, [x9, #0x0]\n"
      ".inst 0x6e59ef8e  // bfmmla v14.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef76  // bfmmla v22.4s, v27.8h, v25.8h\n"
      "ldr q25, [x9, #0x10]\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e5aef8b  // bfmmla v11.4s, v28.8h, v26.8h\n"
      ".inst 0x6e5aef73  // bfmmla v19.4s, v27.8h, v26.8h\n"
      ".inst 0x6e59ef8f  // bfmmla v15.4s, v28.8h, v25.8h\n"
      ".inst 0x6e59ef77  // bfmmla v23.4s, v27.8h, v25.8h\n"
      "141:"  // Height 4: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 131b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "add x23, x24, x20, LSL #2\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v15.2d, v16.2d, v20.2d\n"
      "uzp2 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v20.2d, v17.2d, v21.2d\n"
      "uzp2 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v21.2d, v18.2d, v22.2d\n"
      "uzp2 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v22.2d, v19.2d, v23.2d\n"
      "uzp2 v19.2d, v19.2d, v23.2d\n"
      "tbz %x[flags], #1, 142f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v26.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v25.4s }, [x20]\n"
      "fmin v7.4s, v7.4s, v26.4s\n"
      "fmin v12.4s, v12.4s, v26.4s\n"
      "fmin v13.4s, v13.4s, v26.4s\n"
      "fmin v14.4s, v14.4s, v26.4s\n"
      "fmin v8.4s, v8.4s, v26.4s\n"
      "fmin v9.4s, v9.4s, v26.4s\n"
      "fmin v10.4s, v10.4s, v26.4s\n"
      "fmin v11.4s, v11.4s, v26.4s\n"
      "fmin v15.4s, v15.4s, v26.4s\n"
      "fmin v20.4s, v20.4s, v26.4s\n"
      "fmin v21.4s, v21.4s, v26.4s\n"
      "fmin v22.4s, v22.4s, v26.4s\n"
      "fmin v16.4s, v16.4s, v26.4s\n"
      "fmin v17.4s, v17.4s, v26.4s\n"
      "fmin v18.4s, v18.4s, v26.4s\n"
      "fmin v19.4s, v19.4s, v26.4s\n"
      "fmax v7.4s, v7.4s, v25.4s\n"
      "fmax v12.4s, v12.4s, v25.4s\n"
      "fmax v13.4s, v13.4s, v25.4s\n"
      "fmax v14.4s, v14.4s, v25.4s\n"
      "fmax v8.4s, v8.4s, v25.4s\n"
      "fmax v9.4s, v9.4s, v25.4s\n"
      "fmax v10.4s, v10.4s, v25.4s\n"
      "fmax v11.4s, v11.4s, v25.4s\n"
      "fmax v15.4s, v15.4s, v25.4s\n"
      "fmax v20.4s, v20.4s, v25.4s\n"
      "fmax v21.4s, v21.4s, v25.4s\n"
      "fmax v22.4s, v22.4s, v25.4s\n"
      "fmax v16.4s, v16.4s, v25.4s\n"
      "fmax v17.4s, v17.4s, v25.4s\n"
      "fmax v18.4s, v18.4s, v25.4s\n"
      "fmax v19.4s, v19.4s, v25.4s\n"
      "142:"  // Height 4: No activation
      "cmp x14, #0x10\n"
      "bge 151f\n"
      "tbz x14, #3, 146f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v12.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v9.4s }, [x25], #0x10\n"
      "st1 { v15.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "st1 { v17.4s }, [x23], #0x10\n"
      "tbz x14, #2, 144f\n"
      "st1 { v13.4s }, [x13], #0x10\n"
      "st1 { v10.4s }, [x25], #0x10\n"
      "st1 { v21.4s }, [x24], #0x10\n"
      "st1 { v18.4s }, [x23], #0x10\n"
      "tbz x14, #1, 143f\n"
      "str d14, [x13], #0x8\n"
      "str d11, [x25], #0x8\n"
      "str d22, [x24], #0x8\n"
      "str d19, [x23], #0x8\n"
      "tbz x14, #0, 150f\n"
      "st1 { v14.s }[2], [x13]\n"
      "st1 { v11.s }[2], [x25]\n"
      "st1 { v22.s }[2], [x24]\n"
      "st1 { v19.s }[2], [x23]\n"
      "b 150f\n"
      "143:"  // Height 4: Partial direct writeback: partial_1_12
      "tbz x14, #0, 150f\n"
      "str s14, [x13, #0x0]\n"
      "str s11, [x25, #0x0]\n"
      "str s22, [x24, #0x0]\n"
      "str s19, [x23, #0x0]\n"
      "b 150f\n"
      "144:"  // Height 4: Partial direct writeback: partial_2_8
      "tbz x14, #1, 145f\n"
      "str d13, [x13], #0x8\n"
      "str d10, [x25], #0x8\n"
      "str d21, [x24], #0x8\n"
      "str d18, [x23], #0x8\n"
      "tbz x14, #0, 150f\n"
      "st1 { v13.s }[2], [x13]\n"
      "st1 { v10.s }[2], [x25]\n"
      "st1 { v21.s }[2], [x24]\n"
      "st1 { v18.s }[2], [x23]\n"
      "b 150f\n"
      "145:"  // Height 4: Partial direct writeback: partial_1_8
      "tbz x14, #0, 150f\n"
      "str s13, [x13, #0x0]\n"
      "str s10, [x25, #0x0]\n"
      "str s21, [x24, #0x0]\n"
      "str s18, [x23, #0x0]\n"
      "b 150f\n"
      "146:"  // Height 4: Partial direct writeback: partial_4_0
      "tbz x14, #2, 148f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v15.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "tbz x14, #1, 147f\n"
      "str d12, [x13], #0x8\n"
      "str d9, [x25], #0x8\n"
      "str d20, [x24], #0x8\n"
      "str d17, [x23], #0x8\n"
      "tbz x14, #0, 150f\n"
      "st1 { v12.s }[2], [x13]\n"
      "st1 { v9.s }[2], [x25]\n"
      "st1 { v20.s }[2], [x24]\n"
      "st1 { v17.s }[2], [x23]\n"
      "b 150f\n"
      "147:"  // Height 4: Partial direct writeback: partial_1_4
      "tbz x14, #0, 150f\n"
      "str s12, [x13, #0x0]\n"
      "str s9, [x25, #0x0]\n"
      "str s20, [x24, #0x0]\n"
      "str s17, [x23, #0x0]\n"
      "b 150f\n"
      "148:"  // Height 4: Partial direct writeback: partial_2_0
      "tbz x14, #1, 149f\n"
      "str d7, [x13], #0x8\n"
      "str d8, [x25], #0x8\n"
      "str d15, [x24], #0x8\n"
      "str d16, [x23], #0x8\n"
      "tbz x14, #0, 150f\n"
      "st1 { v7.s }[2], [x13]\n"
      "st1 { v8.s }[2], [x25]\n"
      "st1 { v15.s }[2], [x24]\n"
      "st1 { v16.s }[2], [x23]\n"
      "b 150f\n"
      "149:"  // Height 4: Partial direct writeback: partial_1_0
      "str s7, [x13, #0x0]\n"
      "str s8, [x25, #0x0]\n"
      "str s15, [x24, #0x0]\n"
      "str s16, [x23, #0x0]\n"
      "150:"  // Height 4: Partial direct writeback: Done
      "b 152f\n"
      "151:"  // Height 4: Full writeback
      "str q7, [x13, #0x0]\n"
      "str q12, [x13, #0x10]\n"
      "str q13, [x13, #0x20]\n"
      "str q14, [x13, #0x30]\n"
      "add x13, x13, #0x40\n"
      "str q8, [x25, #0x0]\n"
      "str q9, [x25, #0x10]\n"
      "str q10, [x25, #0x20]\n"
      "str q11, [x25, #0x30]\n"
      "str q15, [x24, #0x0]\n"
      "str q20, [x24, #0x10]\n"
      "str q21, [x24, #0x20]\n"
      "str q22, [x24, #0x30]\n"
      "str q16, [x23, #0x0]\n"
      "str q17, [x23, #0x10]\n"
      "str q18, [x23, #0x20]\n"
      "str q19, [x23, #0x30]\n"
      "152:"  // Height 4: Writeback done
      "subs x14, x14, #0x10\n"
      "bgt 116b\n"
      "b 230f\n"
      "153:"  // Height 5
      "ldr x20, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x15, %x[bias]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_N]]\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "mov x13, %x[output_ptr]\n"
      "154:"  // Height 5: Column loop
      "ldr x12, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "ldr x20, [%x[args_ptr], %[offsetof_B_stride]]\n"
      "add x11, x12, x20, LSL #1\n"
      "add x10, x11, x20, LSL #1\n"
      "add x9, x10, x20, LSL #1\n"
      "add x20, x9, x20, LSL #1\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "cmp x14, #0xc\n"
      "bgt 155f\n"
      "cmp x14, #0x8\n"
      "mov x9, x12\n"
      "bgt 155f\n"
      "cmp x14, #0x4\n"
      "mov x10, x12\n"
      "bgt 155f\n"
      "mov x11, x12\n"
      "155:"  // Height 5: B setup done
      "cbz x15, 156f\n"
      "ldr q8, [x15, #0x0]\n"
      "ldr q9, [x15, #0x10]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x15, #0x20]\n"
      "ldr q11, [x15, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "add x15, x15, #0x40\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v16.16b, v8.16b\n"
      "mov v20.16b, v12.16b\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "mov v24.16b, v8.16b\n"
      "mov v28.16b, v12.16b\n"
      "mov v25.16b, v9.16b\n"
      "mov v29.16b, v13.16b\n"
      "mov v26.16b, v10.16b\n"
      "mov v30.16b, v14.16b\n"
      "mov v27.16b, v11.16b\n"
      "mov v31.16b, v15.16b\n"
      "b 168f\n"
      "156:"  // Height 5: no bias
      "tbz %x[flags], #0, 167f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "cmp x14, #0x10\n"
      "add x22, x23, x20, LSL #2\n"
      "bge 165f\n"
      "tbz x14, #3, 160f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v25.4s }, [x22], #0x10\n"
      "ld1 { v10.4s }, [x13], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "ld1 { v21.4s }, [x23], #0x10\n"
      "ld1 { v26.4s }, [x22], #0x10\n"
      "tbz x14, #2, 158f\n"
      "ld1 { v11.4s }, [x13], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v19.4s }, [x24], #0x10\n"
      "ld1 { v22.4s }, [x23], #0x10\n"
      "ld1 { v27.4s }, [x22], #0x10\n"
      "tbz x14, #1, 157f\n"
      "ldr d16, [x13], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d24, [x24], #0x8\n"
      "ldr d23, [x23], #0x8\n"
      "ldr d6, [x22], #0x8\n"
      "tbz x14, #0, 164f\n"
      "ld1 { v16.s }[2], [x13]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v24.s }[2], [x24]\n"
      "ld1 { v23.s }[2], [x23]\n"
      "ld1 { v6.s }[2], [x22]\n"
      "b 164f\n"
      "157:"  // Height 5: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x14, #0, 164f\n"
      "ldr s16, [x13, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s24, [x24, #0x0]\n"
      "ldr s23, [x23, #0x0]\n"
      "ldr s6, [x22, #0x0]\n"
      "b 164f\n"
      "158:"  // Height 5: Partial accumulate: partial_2_8
      "tbz x14, #1, 159f\n"
      "ldr d11, [x13], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d19, [x24], #0x8\n"
      "ldr d22, [x23], #0x8\n"
      "ldr d27, [x22], #0x8\n"
      "tbz x14, #0, 164f\n"
      "ld1 { v11.s }[2], [x13]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "ld1 { v22.s }[2], [x23]\n"
      "ld1 { v27.s }[2], [x22]\n"
      "b 164f\n"
      "159:"  // Height 5: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x14, #0, 164f\n"
      "ldr s11, [x13, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "ldr s22, [x23, #0x0]\n"
      "ldr s27, [x22, #0x0]\n"
      "b 164f\n"
      "160:"  // Height 5: Partial accumulate: partial_4_0
      "tbz x14, #2, 162f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v25.4s }, [x22], #0x10\n"
      "tbz x14, #1, 161f\n"
      "ldr d10, [x13], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d18, [x24], #0x8\n"
      "ldr d21, [x23], #0x8\n"
      "ldr d26, [x22], #0x8\n"
      "tbz x14, #0, 164f\n"
      "ld1 { v10.s }[2], [x13]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "ld1 { v21.s }[2], [x23]\n"
      "ld1 { v26.s }[2], [x22]\n"
      "b 164f\n"
      "161:"  // Height 5: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x14, #0, 164f\n"
      "ldr s10, [x13, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "ldr s21, [x23, #0x0]\n"
      "ldr s26, [x22, #0x0]\n"
      "b 164f\n"
      "162:"  // Height 5: Partial accumulate: partial_2_0
      "tbz x14, #1, 163f\n"
      "ldr d9, [x13], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d17, [x24], #0x8\n"
      "ldr d20, [x23], #0x8\n"
      "ldr d25, [x22], #0x8\n"
      "tbz x14, #0, 164f\n"
      "ld1 { v9.s }[2], [x13]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "ld1 { v20.s }[2], [x23]\n"
      "ld1 { v25.s }[2], [x22]\n"
      "b 164f\n"
      "163:"  // Height 5: Partial accumulate: partial_1_0
      "ldr s9, [x13, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s17, [x24, #0x0]\n"
      "ldr s20, [x23, #0x0]\n"
      "ldr s25, [x22, #0x0]\n"
      "164:"  // Height 5: Partial accumulate: Done
      "sub x13, x13, x20\n"
      "b 166f\n"
      "165:"  // Height 5: full accumulate
      "ldr q9, [x13, #0x0]\n"
      "ldr q10, [x13, #0x10]\n"
      "ldr q11, [x13, #0x20]\n"
      "ldr q16, [x13, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q17, [x24, #0x0]\n"
      "ldr q18, [x24, #0x10]\n"
      "ldr q19, [x24, #0x20]\n"
      "ldr q24, [x24, #0x30]\n"
      "ldr q20, [x23, #0x0]\n"
      "ldr q21, [x23, #0x10]\n"
      "ldr q22, [x23, #0x20]\n"
      "ldr q23, [x23, #0x30]\n"
      "ldr q25, [x22, #0x0]\n"
      "ldr q26, [x22, #0x10]\n"
      "ldr q27, [x22, #0x20]\n"
      "ldr q6, [x22, #0x30]\n"
      "166:"  // Height 5: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "zip1 v24.2d, v25.2d, v28.2d\n"
      "zip2 v28.2d, v25.2d, v28.2d\n"
      "zip1 v25.2d, v26.2d, v29.2d\n"
      "zip2 v29.2d, v26.2d, v29.2d\n"
      "zip1 v26.2d, v27.2d, v30.2d\n"
      "zip2 v30.2d, v27.2d, v30.2d\n"
      "zip1 v27.2d, v6.2d, v31.2d\n"
      "zip2 v31.2d, v6.2d, v31.2d\n"
      "b 168f\n"
      "167:"  // Height 5: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "movi v24.16b, #0x0\n"
      "movi v25.16b, #0x0\n"
      "movi v26.16b, #0x0\n"
      "movi v27.16b, #0x0\n"
      "movi v28.16b, #0x0\n"
      "movi v29.16b, #0x0\n"
      "movi v30.16b, #0x0\n"
      "movi v31.16b, #0x0\n"
      "168:"  // Height 5: setup done
      "mov x28, #0x0\n"
      "169:"  // Height 5: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 170f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "cbnz x28, 171f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "add x22, x22, x20, LSL #1\n"
      "b 171f\n"
      "170:"  // Height 5: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "add x22, x23, x21, LSL #1\n"
      "171:"  // Height 5: input setup done
      "cmp x27, #0x8\n"
      "blt 174f\n"
      "ldr q1, [x26, #0x0]\n"
      "ldr q2, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q4, [x23, #0x0]\n"
      "ldr q5, [x22, #0x0]\n"
      "ldr q7, [x12, #0x0]\n"
      "blt 173f\n"
      "172:"  // Height 5: Multiply loop: Main loop head
      "trn1 v6.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ecc8  // bfmmla v8.4s, v6.8h, v7.8h\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "sub x27, x27, #0x8\n"
      "trn1 v4.2d, v5.2d, v0.2d\n"
      "trn2 v5.2d, v5.2d, v0.2d\n"
      "ldr q0, [x12, #0x10]\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x11, #0x0]\n"
      ".inst 0x6e40eccc  // bfmmla v12.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec54  // bfmmla v20.4s, v2.8h, v0.8h\n"
      "cmp x27, #0x10\n"
      ".inst 0x6e40ec9c  // bfmmla v28.4s, v4.8h, v0.8h\n"
      "ldr q0, [x11, #0x10]\n"
      ".inst 0x6e47ecc9  // bfmmla v9.4s, v6.8h, v7.8h\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x0]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e40eccd  // bfmmla v13.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec55  // bfmmla v21.4s, v2.8h, v0.8h\n"
      "add x24, x24, #0x10\n"
      "add x23, x23, #0x10\n"
      ".inst 0x6e40ec9d  // bfmmla v29.4s, v4.8h, v0.8h\n"
      "ldr q0, [x10, #0x10]\n"
      ".inst 0x6e47ecca  // bfmmla v10.4s, v6.8h, v7.8h\n"
      "add x22, x22, #0x10\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x9, #0x0]\n"
      ".inst 0x6e40ecce  // bfmmla v14.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec56  // bfmmla v22.4s, v2.8h, v0.8h\n"
      ".inst 0x6e40ec9e  // bfmmla v30.4s, v4.8h, v0.8h\n"
      "ldr q0, [x9, #0x10]\n"
      ".inst 0x6e47eccb  // bfmmla v11.4s, v6.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x12, #0x20]\n"
      ".inst 0x6e40eccf  // bfmmla v15.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec57  // bfmmla v23.4s, v2.8h, v0.8h\n"
      "ldr q2, [x25, #0x0]\n"
      ".inst 0x6e40ec9f  // bfmmla v31.4s, v4.8h, v0.8h\n"
      "ldr q0, [x12, #0x30]\n"
      "ldr q4, [x23, #0x0]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q6, [x11, #0x20]\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e40ec2c  // bfmmla v12.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec74  // bfmmla v20.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbc  // bfmmla v28.4s, v5.8h, v0.8h\n"
      "ldr q0, [x11, #0x30]\n"
      ".inst 0x6e46ec29  // bfmmla v9.4s, v1.8h, v6.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e46ec71  // bfmmla v17.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecb9  // bfmmla v25.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e40ec2d  // bfmmla v13.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec75  // bfmmla v21.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbd  // bfmmla v29.4s, v5.8h, v0.8h\n"
      "ldr q0, [x10, #0x30]\n"
      ".inst 0x6e46ec2a  // bfmmla v10.4s, v1.8h, v6.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e46ec72  // bfmmla v18.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecba  // bfmmla v26.4s, v5.8h, v6.8h\n"
      "ldr q6, [x9, #0x20]\n"
      ".inst 0x6e40ec2e  // bfmmla v14.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec76  // bfmmla v22.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbe  // bfmmla v30.4s, v5.8h, v0.8h\n"
      "ldr q0, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e46ec2b  // bfmmla v11.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec73  // bfmmla v19.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbb  // bfmmla v27.4s, v5.8h, v6.8h\n"
      "ldr q7, [x12, #0x0]\n"
      ".inst 0x6e40ec2f  // bfmmla v15.4s, v1.8h, v0.8h\n"
      "ldr q1, [x26, #0x0]\n"
      ".inst 0x6e40ec77  // bfmmla v23.4s, v3.8h, v0.8h\n"
      "ldr q3, [x24, #0x0]\n"
      ".inst 0x6e40ecbf  // bfmmla v31.4s, v5.8h, v0.8h\n"
      "ldr q5, [x22, #0x0]\n"
      "bge 172b\n"
      "173:"  // Height 5: Multiply loop: Single iteration only
      "trn1 v6.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ecc8  // bfmmla v8.4s, v6.8h, v7.8h\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "sub x27, x27, #0x8\n"
      "trn1 v4.2d, v5.2d, v0.2d\n"
      "trn2 v5.2d, v5.2d, v0.2d\n"
      "ldr q0, [x12, #0x10]\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x11, #0x0]\n"
      ".inst 0x6e40eccc  // bfmmla v12.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec54  // bfmmla v20.4s, v2.8h, v0.8h\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e40ec9c  // bfmmla v28.4s, v4.8h, v0.8h\n"
      "ldr q0, [x11, #0x10]\n"
      ".inst 0x6e47ecc9  // bfmmla v9.4s, v6.8h, v7.8h\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x0]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e40eccd  // bfmmla v13.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec55  // bfmmla v21.4s, v2.8h, v0.8h\n"
      "add x23, x23, #0x10\n"
      "add x22, x22, #0x10\n"
      ".inst 0x6e40ec9d  // bfmmla v29.4s, v4.8h, v0.8h\n"
      "ldr q0, [x10, #0x10]\n"
      ".inst 0x6e47ecca  // bfmmla v10.4s, v6.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x9, #0x0]\n"
      ".inst 0x6e40ecce  // bfmmla v14.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec56  // bfmmla v22.4s, v2.8h, v0.8h\n"
      ".inst 0x6e40ec9e  // bfmmla v30.4s, v4.8h, v0.8h\n"
      "ldr q0, [x9, #0x10]\n"
      ".inst 0x6e47eccb  // bfmmla v11.4s, v6.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x12, #0x20]\n"
      ".inst 0x6e40eccf  // bfmmla v15.4s, v6.8h, v0.8h\n"
      ".inst 0x6e40ec57  // bfmmla v23.4s, v2.8h, v0.8h\n"
      ".inst 0x6e40ec9f  // bfmmla v31.4s, v4.8h, v0.8h\n"
      "ldr q2, [x12, #0x30]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q0, [x11, #0x20]\n"
      ".inst 0x6e42ec2c  // bfmmla v12.4s, v1.8h, v2.8h\n"
      ".inst 0x6e42ec74  // bfmmla v20.4s, v3.8h, v2.8h\n"
      ".inst 0x6e42ecbc  // bfmmla v28.4s, v5.8h, v2.8h\n"
      "ldr q2, [x11, #0x30]\n"
      ".inst 0x6e40ec29  // bfmmla v9.4s, v1.8h, v0.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e40ec71  // bfmmla v17.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecb9  // bfmmla v25.4s, v5.8h, v0.8h\n"
      "ldr q0, [x10, #0x20]\n"
      ".inst 0x6e42ec2d  // bfmmla v13.4s, v1.8h, v2.8h\n"
      ".inst 0x6e42ec75  // bfmmla v21.4s, v3.8h, v2.8h\n"
      ".inst 0x6e42ecbd  // bfmmla v29.4s, v5.8h, v2.8h\n"
      "ldr q2, [x10, #0x30]\n"
      ".inst 0x6e40ec2a  // bfmmla v10.4s, v1.8h, v0.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e40ec72  // bfmmla v18.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecba  // bfmmla v26.4s, v5.8h, v0.8h\n"
      "ldr q0, [x9, #0x20]\n"
      ".inst 0x6e42ec2e  // bfmmla v14.4s, v1.8h, v2.8h\n"
      ".inst 0x6e42ec76  // bfmmla v22.4s, v3.8h, v2.8h\n"
      ".inst 0x6e42ecbe  // bfmmla v30.4s, v5.8h, v2.8h\n"
      "ldr q6, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e40ec2b  // bfmmla v11.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec73  // bfmmla v19.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbb  // bfmmla v27.4s, v5.8h, v0.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbf  // bfmmla v31.4s, v5.8h, v6.8h\n"
      "174:"  // Height 5: Multiply loop: Main loop skip
      "cbz x27, 179f\n"
      "cmp x27, #0x4\n"
      "blt 176f\n"
      "175:"  // Height 5: Multiply loop: Odd block loop
      "ldr d1, [x26], #0x8\n"
      "ldr d0, [x25], #0x8\n"
      "trn1 v4.2d, v1.2d, v0.2d\n"
      "ldr d1, [x24], #0x8\n"
      "ldr d0, [x23], #0x8\n"
      "trn1 v3.2d, v1.2d, v0.2d\n"
      "sub x27, x27, #0x4\n"
      "ldr d0, [x22], #0x8\n"
      "ldr q1, [x12, #0x0]\n"
      "trn1 v2.2d, v0.2d, v2.2d\n"
      ".inst 0x6e41ec88  // bfmmla v8.4s, v4.8h, v1.8h\n"
      "ldr q0, [x12, #0x10]\n"
      ".inst 0x6e41ec70  // bfmmla v16.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec58  // bfmmla v24.4s, v2.8h, v1.8h\n"
      "ldr q1, [x11, #0x0]\n"
      ".inst 0x6e40ec8c  // bfmmla v12.4s, v4.8h, v0.8h\n"
      ".inst 0x6e40ec74  // bfmmla v20.4s, v3.8h, v0.8h\n"
      "cmp x27, #0x4\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e40ec5c  // bfmmla v28.4s, v2.8h, v0.8h\n"
      "ldr q0, [x11, #0x10]\n"
      ".inst 0x6e41ec89  // bfmmla v9.4s, v4.8h, v1.8h\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e41ec71  // bfmmla v17.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec59  // bfmmla v25.4s, v2.8h, v1.8h\n"
      "ldr q1, [x10, #0x0]\n"
      ".inst 0x6e40ec8d  // bfmmla v13.4s, v4.8h, v0.8h\n"
      ".inst 0x6e40ec75  // bfmmla v21.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5d  // bfmmla v29.4s, v2.8h, v0.8h\n"
      "ldr q0, [x10, #0x10]\n"
      ".inst 0x6e41ec8a  // bfmmla v10.4s, v4.8h, v1.8h\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e41ec72  // bfmmla v18.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec5a  // bfmmla v26.4s, v2.8h, v1.8h\n"
      "ldr q6, [x9, #0x0]\n"
      ".inst 0x6e40ec8e  // bfmmla v14.4s, v4.8h, v0.8h\n"
      ".inst 0x6e40ec76  // bfmmla v22.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5e  // bfmmla v30.4s, v2.8h, v0.8h\n"
      "ldr q0, [x9, #0x10]\n"
      ".inst 0x6e46ec8b  // bfmmla v11.4s, v4.8h, v6.8h\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e46ec73  // bfmmla v19.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ec5b  // bfmmla v27.4s, v2.8h, v6.8h\n"
      ".inst 0x6e40ec8f  // bfmmla v15.4s, v4.8h, v0.8h\n"
      ".inst 0x6e40ec77  // bfmmla v23.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5f  // bfmmla v31.4s, v2.8h, v0.8h\n"
      "bge 175b\n"
      "176:"  // Height 5: Multiply loop: Skip odd blocks
      "cbz x27, 179f\n"
      "tbz x27, #1, 177f\n"
      "ldr s1, [x26], #0x4\n"
      "ldr s2, [x25], #0x4\n"
      "ldr s3, [x24], #0x4\n"
      "ldr s4, [x23], #0x4\n"
      "ldr s5, [x22], #0x4\n"
      "tbz x27, #0, 178f\n"
      "ld1 { v1.h }[2], [x26]\n"
      "ld1 { v2.h }[2], [x25]\n"
      "ld1 { v3.h }[2], [x24]\n"
      "ld1 { v4.h }[2], [x23]\n"
      "ld1 { v5.h }[2], [x22]\n"
      "b 178f\n"
      "177:"  // Height 5: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x26, #0x0]\n"
      "ldr h2, [x25, #0x0]\n"
      "ldr h3, [x24, #0x0]\n"
      "ldr h4, [x23, #0x0]\n"
      "ldr h5, [x22, #0x0]\n"
      "178:"  // Height 5: Multiply loop: Ragged operand read: Done
      "ldr q6, [x12, #0x0]\n"
      "trn1 v7.2d, v1.2d, v2.2d\n"
      "trn1 v3.2d, v3.2d, v4.2d\n"
      "trn1 v2.2d, v5.2d, v0.2d\n"
      "ldr q1, [x12, #0x10]\n"
      ".inst 0x6e46ece8  // bfmmla v8.4s, v7.8h, v6.8h\n"
      ".inst 0x6e46ec70  // bfmmla v16.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ec58  // bfmmla v24.4s, v2.8h, v6.8h\n"
      "ldr q0, [x11, #0x0]\n"
      ".inst 0x6e41ecec  // bfmmla v12.4s, v7.8h, v1.8h\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e41ec74  // bfmmla v20.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec5c  // bfmmla v28.4s, v2.8h, v1.8h\n"
      "ldr q1, [x11, #0x10]\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e40ece9  // bfmmla v9.4s, v7.8h, v0.8h\n"
      ".inst 0x6e40ec71  // bfmmla v17.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec59  // bfmmla v25.4s, v2.8h, v0.8h\n"
      "ldr q0, [x10, #0x0]\n"
      ".inst 0x6e41eced  // bfmmla v13.4s, v7.8h, v1.8h\n"
      ".inst 0x6e41ec75  // bfmmla v21.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec5d  // bfmmla v29.4s, v2.8h, v1.8h\n"
      "ldr q1, [x10, #0x10]\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e40ecea  // bfmmla v10.4s, v7.8h, v0.8h\n"
      ".inst 0x6e40ec72  // bfmmla v18.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5a  // bfmmla v26.4s, v2.8h, v0.8h\n"
      "ldr q0, [x9, #0x0]\n"
      ".inst 0x6e41ecee  // bfmmla v14.4s, v7.8h, v1.8h\n"
      ".inst 0x6e41ec76  // bfmmla v22.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec5e  // bfmmla v30.4s, v2.8h, v1.8h\n"
      "ldr q6, [x9, #0x10]\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e40eceb  // bfmmla v11.4s, v7.8h, v0.8h\n"
      ".inst 0x6e40ec73  // bfmmla v19.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5b  // bfmmla v27.4s, v2.8h, v0.8h\n"
      ".inst 0x6e46ecef  // bfmmla v15.4s, v7.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ec5f  // bfmmla v31.4s, v2.8h, v6.8h\n"
      "179:"  // Height 5: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 169b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "add x23, x24, x20, LSL #2\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "add x22, x23, x20, LSL #2\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v15.2d, v16.2d, v20.2d\n"
      "uzp2 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v20.2d, v17.2d, v21.2d\n"
      "uzp2 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v21.2d, v18.2d, v22.2d\n"
      "uzp2 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v22.2d, v19.2d, v23.2d\n"
      "uzp2 v19.2d, v19.2d, v23.2d\n"
      "uzp1 v24.2d, v24.2d, v28.2d\n"
      "uzp1 v25.2d, v25.2d, v29.2d\n"
      "uzp1 v26.2d, v26.2d, v30.2d\n"
      "uzp1 v27.2d, v27.2d, v31.2d\n"
      "tbz %x[flags], #1, 180f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v1.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v0.4s }, [x20]\n"
      "fmin v7.4s, v7.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v1.4s\n"
      "fmin v13.4s, v13.4s, v1.4s\n"
      "fmin v14.4s, v14.4s, v1.4s\n"
      "fmin v8.4s, v8.4s, v1.4s\n"
      "fmin v9.4s, v9.4s, v1.4s\n"
      "fmin v10.4s, v10.4s, v1.4s\n"
      "fmin v11.4s, v11.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v1.4s\n"
      "fmin v20.4s, v20.4s, v1.4s\n"
      "fmin v21.4s, v21.4s, v1.4s\n"
      "fmin v22.4s, v22.4s, v1.4s\n"
      "fmin v16.4s, v16.4s, v1.4s\n"
      "fmin v17.4s, v17.4s, v1.4s\n"
      "fmin v18.4s, v18.4s, v1.4s\n"
      "fmin v19.4s, v19.4s, v1.4s\n"
      "fmin v24.4s, v24.4s, v1.4s\n"
      "fmin v25.4s, v25.4s, v1.4s\n"
      "fmin v26.4s, v26.4s, v1.4s\n"
      "fmin v27.4s, v27.4s, v1.4s\n"
      "fmax v7.4s, v7.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v0.4s\n"
      "fmax v13.4s, v13.4s, v0.4s\n"
      "fmax v14.4s, v14.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v0.4s\n"
      "fmax v9.4s, v9.4s, v0.4s\n"
      "fmax v10.4s, v10.4s, v0.4s\n"
      "fmax v11.4s, v11.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v0.4s\n"
      "fmax v20.4s, v20.4s, v0.4s\n"
      "fmax v21.4s, v21.4s, v0.4s\n"
      "fmax v22.4s, v22.4s, v0.4s\n"
      "fmax v16.4s, v16.4s, v0.4s\n"
      "fmax v17.4s, v17.4s, v0.4s\n"
      "fmax v18.4s, v18.4s, v0.4s\n"
      "fmax v19.4s, v19.4s, v0.4s\n"
      "fmax v24.4s, v24.4s, v0.4s\n"
      "fmax v25.4s, v25.4s, v0.4s\n"
      "fmax v26.4s, v26.4s, v0.4s\n"
      "fmax v27.4s, v27.4s, v0.4s\n"
      "180:"  // Height 5: No activation
      "cmp x14, #0x10\n"
      "bge 189f\n"
      "tbz x14, #3, 184f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v12.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v9.4s }, [x25], #0x10\n"
      "st1 { v15.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "st1 { v17.4s }, [x23], #0x10\n"
      "st1 { v24.4s }, [x22], #0x10\n"
      "st1 { v25.4s }, [x22], #0x10\n"
      "tbz x14, #2, 182f\n"
      "st1 { v13.4s }, [x13], #0x10\n"
      "st1 { v10.4s }, [x25], #0x10\n"
      "st1 { v21.4s }, [x24], #0x10\n"
      "st1 { v18.4s }, [x23], #0x10\n"
      "st1 { v26.4s }, [x22], #0x10\n"
      "tbz x14, #1, 181f\n"
      "str d14, [x13], #0x8\n"
      "str d11, [x25], #0x8\n"
      "str d22, [x24], #0x8\n"
      "str d19, [x23], #0x8\n"
      "str d27, [x22], #0x8\n"
      "tbz x14, #0, 188f\n"
      "st1 { v14.s }[2], [x13]\n"
      "st1 { v11.s }[2], [x25]\n"
      "st1 { v22.s }[2], [x24]\n"
      "st1 { v19.s }[2], [x23]\n"
      "st1 { v27.s }[2], [x22]\n"
      "b 188f\n"
      "181:"  // Height 5: Partial direct writeback: partial_1_12
      "tbz x14, #0, 188f\n"
      "str s14, [x13, #0x0]\n"
      "str s11, [x25, #0x0]\n"
      "str s22, [x24, #0x0]\n"
      "str s19, [x23, #0x0]\n"
      "str s27, [x22, #0x0]\n"
      "b 188f\n"
      "182:"  // Height 5: Partial direct writeback: partial_2_8
      "tbz x14, #1, 183f\n"
      "str d13, [x13], #0x8\n"
      "str d10, [x25], #0x8\n"
      "str d21, [x24], #0x8\n"
      "str d18, [x23], #0x8\n"
      "str d26, [x22], #0x8\n"
      "tbz x14, #0, 188f\n"
      "st1 { v13.s }[2], [x13]\n"
      "st1 { v10.s }[2], [x25]\n"
      "st1 { v21.s }[2], [x24]\n"
      "st1 { v18.s }[2], [x23]\n"
      "st1 { v26.s }[2], [x22]\n"
      "b 188f\n"
      "183:"  // Height 5: Partial direct writeback: partial_1_8
      "tbz x14, #0, 188f\n"
      "str s13, [x13, #0x0]\n"
      "str s10, [x25, #0x0]\n"
      "str s21, [x24, #0x0]\n"
      "str s18, [x23, #0x0]\n"
      "str s26, [x22, #0x0]\n"
      "b 188f\n"
      "184:"  // Height 5: Partial direct writeback: partial_4_0
      "tbz x14, #2, 186f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v15.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "st1 { v24.4s }, [x22], #0x10\n"
      "tbz x14, #1, 185f\n"
      "str d12, [x13], #0x8\n"
      "str d9, [x25], #0x8\n"
      "str d20, [x24], #0x8\n"
      "str d17, [x23], #0x8\n"
      "str d25, [x22], #0x8\n"
      "tbz x14, #0, 188f\n"
      "st1 { v12.s }[2], [x13]\n"
      "st1 { v9.s }[2], [x25]\n"
      "st1 { v20.s }[2], [x24]\n"
      "st1 { v17.s }[2], [x23]\n"
      "st1 { v25.s }[2], [x22]\n"
      "b 188f\n"
      "185:"  // Height 5: Partial direct writeback: partial_1_4
      "tbz x14, #0, 188f\n"
      "str s12, [x13, #0x0]\n"
      "str s9, [x25, #0x0]\n"
      "str s20, [x24, #0x0]\n"
      "str s17, [x23, #0x0]\n"
      "str s25, [x22, #0x0]\n"
      "b 188f\n"
      "186:"  // Height 5: Partial direct writeback: partial_2_0
      "tbz x14, #1, 187f\n"
      "str d7, [x13], #0x8\n"
      "str d8, [x25], #0x8\n"
      "str d15, [x24], #0x8\n"
      "str d16, [x23], #0x8\n"
      "str d24, [x22], #0x8\n"
      "tbz x14, #0, 188f\n"
      "st1 { v7.s }[2], [x13]\n"
      "st1 { v8.s }[2], [x25]\n"
      "st1 { v15.s }[2], [x24]\n"
      "st1 { v16.s }[2], [x23]\n"
      "st1 { v24.s }[2], [x22]\n"
      "b 188f\n"
      "187:"  // Height 5: Partial direct writeback: partial_1_0
      "str s7, [x13, #0x0]\n"
      "str s8, [x25, #0x0]\n"
      "str s15, [x24, #0x0]\n"
      "str s16, [x23, #0x0]\n"
      "str s24, [x22, #0x0]\n"
      "188:"  // Height 5: Partial direct writeback: Done
      "b 190f\n"
      "189:"  // Height 5: Full writeback
      "str q7, [x13, #0x0]\n"
      "str q12, [x13, #0x10]\n"
      "str q13, [x13, #0x20]\n"
      "str q14, [x13, #0x30]\n"
      "add x13, x13, #0x40\n"
      "str q8, [x25, #0x0]\n"
      "str q9, [x25, #0x10]\n"
      "str q10, [x25, #0x20]\n"
      "str q11, [x25, #0x30]\n"
      "str q15, [x24, #0x0]\n"
      "str q20, [x24, #0x10]\n"
      "str q21, [x24, #0x20]\n"
      "str q22, [x24, #0x30]\n"
      "str q16, [x23, #0x0]\n"
      "str q17, [x23, #0x10]\n"
      "str q18, [x23, #0x20]\n"
      "str q19, [x23, #0x30]\n"
      "str q24, [x22, #0x0]\n"
      "str q25, [x22, #0x10]\n"
      "str q26, [x22, #0x20]\n"
      "str q27, [x22, #0x30]\n"
      "190:"  // Height 5: Writeback done
      "subs x14, x14, #0x10\n"
      "bgt 154b\n"
      "b 230f\n"
      "191:"  // Height 6
      "ldr x20, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x14, [%x[args_ptr], %[offsetof_N]]\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "mov x21, #0x18\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "mov x15, %x[bias]\n"
      "mov x13, %x[output_ptr]\n"
      "madd %x[output_ptr], x20, x21, %x[output_ptr]\n"
      "192:"  // Height 6: Column loop
      "ldr x12, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "ldr x20, [%x[args_ptr], %[offsetof_B_stride]]\n"
      "add x11, x12, x20, LSL #1\n"
      "add x10, x11, x20, LSL #1\n"
      "add x9, x10, x20, LSL #1\n"
      "add x20, x9, x20, LSL #1\n"
      "str x20, [%x[args_ptr], %[offsetof_cur_B_ptr]]\n"
      "cmp x14, #0xc\n"
      "bgt 193f\n"
      "cmp x14, #0x8\n"
      "mov x9, x12\n"
      "bgt 193f\n"
      "cmp x14, #0x4\n"
      "mov x10, x12\n"
      "bgt 193f\n"
      "mov x11, x12\n"
      "193:"  // Height 6: B setup done
      "cbz x15, 194f\n"
      "ldr q8, [x15, #0x0]\n"
      "ldr q9, [x15, #0x10]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x15, #0x20]\n"
      "ldr q11, [x15, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "add x15, x15, #0x40\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v16.16b, v8.16b\n"
      "mov v20.16b, v12.16b\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "mov v24.16b, v8.16b\n"
      "mov v28.16b, v12.16b\n"
      "mov v25.16b, v9.16b\n"
      "mov v29.16b, v13.16b\n"
      "mov v26.16b, v10.16b\n"
      "mov v30.16b, v14.16b\n"
      "mov v27.16b, v11.16b\n"
      "mov v31.16b, v15.16b\n"
      "b 206f\n"
      "194:"  // Height 6: no bias
      "tbz %x[flags], #0, 205f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "cmp x14, #0x10\n"
      "add x21, x22, x20, LSL #2\n"
      "bge 203f\n"
      "tbz x14, #3, 198f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v25.4s }, [x22], #0x10\n"
      "ld1 { v28.4s }, [x21], #0x10\n"
      "ld1 { v10.4s }, [x13], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "ld1 { v21.4s }, [x23], #0x10\n"
      "ld1 { v26.4s }, [x22], #0x10\n"
      "ld1 { v29.4s }, [x21], #0x10\n"
      "tbz x14, #2, 196f\n"
      "ld1 { v11.4s }, [x13], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v19.4s }, [x24], #0x10\n"
      "ld1 { v22.4s }, [x23], #0x10\n"
      "ld1 { v27.4s }, [x22], #0x10\n"
      "ld1 { v30.4s }, [x21], #0x10\n"
      "tbz x14, #1, 195f\n"
      "ldr d16, [x13], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d24, [x24], #0x8\n"
      "ldr d23, [x23], #0x8\n"
      "ldr d6, [x22], #0x8\n"
      "ldr d31, [x21], #0x8\n"
      "tbz x14, #0, 202f\n"
      "ld1 { v16.s }[2], [x13]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v24.s }[2], [x24]\n"
      "ld1 { v23.s }[2], [x23]\n"
      "ld1 { v6.s }[2], [x22]\n"
      "ld1 { v31.s }[2], [x21]\n"
      "b 202f\n"
      "195:"  // Height 6: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x14, #0, 202f\n"
      "ldr s16, [x13, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s24, [x24, #0x0]\n"
      "ldr s23, [x23, #0x0]\n"
      "ldr s6, [x22, #0x0]\n"
      "ldr s31, [x21, #0x0]\n"
      "b 202f\n"
      "196:"  // Height 6: Partial accumulate: partial_2_8
      "tbz x14, #1, 197f\n"
      "ldr d11, [x13], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d19, [x24], #0x8\n"
      "ldr d22, [x23], #0x8\n"
      "ldr d27, [x22], #0x8\n"
      "ldr d30, [x21], #0x8\n"
      "tbz x14, #0, 202f\n"
      "ld1 { v11.s }[2], [x13]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "ld1 { v22.s }[2], [x23]\n"
      "ld1 { v27.s }[2], [x22]\n"
      "ld1 { v30.s }[2], [x21]\n"
      "b 202f\n"
      "197:"  // Height 6: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x14, #0, 202f\n"
      "ldr s11, [x13, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "ldr s22, [x23, #0x0]\n"
      "ldr s27, [x22, #0x0]\n"
      "ldr s30, [x21, #0x0]\n"
      "b 202f\n"
      "198:"  // Height 6: Partial accumulate: partial_4_0
      "tbz x14, #2, 200f\n"
      "ld1 { v9.4s }, [x13], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v25.4s }, [x22], #0x10\n"
      "ld1 { v28.4s }, [x21], #0x10\n"
      "tbz x14, #1, 199f\n"
      "ldr d10, [x13], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d18, [x24], #0x8\n"
      "ldr d21, [x23], #0x8\n"
      "ldr d26, [x22], #0x8\n"
      "ldr d29, [x21], #0x8\n"
      "tbz x14, #0, 202f\n"
      "ld1 { v10.s }[2], [x13]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "ld1 { v21.s }[2], [x23]\n"
      "ld1 { v26.s }[2], [x22]\n"
      "ld1 { v29.s }[2], [x21]\n"
      "b 202f\n"
      "199:"  // Height 6: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x14, #0, 202f\n"
      "ldr s10, [x13, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "ldr s21, [x23, #0x0]\n"
      "ldr s26, [x22, #0x0]\n"
      "ldr s29, [x21, #0x0]\n"
      "b 202f\n"
      "200:"  // Height 6: Partial accumulate: partial_2_0
      "tbz x14, #1, 201f\n"
      "ldr d9, [x13], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d17, [x24], #0x8\n"
      "ldr d20, [x23], #0x8\n"
      "ldr d25, [x22], #0x8\n"
      "ldr d28, [x21], #0x8\n"
      "tbz x14, #0, 202f\n"
      "ld1 { v9.s }[2], [x13]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "ld1 { v20.s }[2], [x23]\n"
      "ld1 { v25.s }[2], [x22]\n"
      "ld1 { v28.s }[2], [x21]\n"
      "b 202f\n"
      "201:"  // Height 6: Partial accumulate: partial_1_0
      "ldr s9, [x13, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s17, [x24, #0x0]\n"
      "ldr s20, [x23, #0x0]\n"
      "ldr s25, [x22, #0x0]\n"
      "ldr s28, [x21, #0x0]\n"
      "202:"  // Height 6: Partial accumulate: Done
      "sub x13, x13, x20\n"
      "b 204f\n"
      "203:"  // Height 6: full accumulate
      "ldr q9, [x13, #0x0]\n"
      "ldr q10, [x13, #0x10]\n"
      "ldr q11, [x13, #0x20]\n"
      "ldr q16, [x13, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q17, [x24, #0x0]\n"
      "ldr q18, [x24, #0x10]\n"
      "ldr q19, [x24, #0x20]\n"
      "ldr q24, [x24, #0x30]\n"
      "ldr q20, [x23, #0x0]\n"
      "ldr q21, [x23, #0x10]\n"
      "ldr q22, [x23, #0x20]\n"
      "ldr q23, [x23, #0x30]\n"
      "ldr q25, [x22, #0x0]\n"
      "ldr q26, [x22, #0x10]\n"
      "ldr q27, [x22, #0x20]\n"
      "ldr q6, [x22, #0x30]\n"
      "ldr q28, [x21, #0x0]\n"
      "ldr q29, [x21, #0x10]\n"
      "ldr q30, [x21, #0x20]\n"
      "ldr q31, [x21, #0x30]\n"
      "204:"  // Height 6: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "zip1 v24.2d, v25.2d, v28.2d\n"
      "zip2 v28.2d, v25.2d, v28.2d\n"
      "zip1 v25.2d, v26.2d, v29.2d\n"
      "zip2 v29.2d, v26.2d, v29.2d\n"
      "zip1 v26.2d, v27.2d, v30.2d\n"
      "zip2 v30.2d, v27.2d, v30.2d\n"
      "zip1 v27.2d, v6.2d, v31.2d\n"
      "zip2 v31.2d, v6.2d, v31.2d\n"
      "b 206f\n"
      "205:"  // Height 6: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "movi v24.16b, #0x0\n"
      "movi v25.16b, #0x0\n"
      "movi v26.16b, #0x0\n"
      "movi v27.16b, #0x0\n"
      "movi v28.16b, #0x0\n"
      "movi v29.16b, #0x0\n"
      "movi v30.16b, #0x0\n"
      "movi v31.16b, #0x0\n"
      "206:"  // Height 6: setup done
      "mov x28, #0x0\n"
      "207:"  // Height 6: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 208f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "ldr x21, [x20, #0x28]\n"
      "cbnz x28, 209f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "add x22, x22, x20, LSL #1\n"
      "add x21, x21, x20, LSL #1\n"
      "b 209f\n"
      "208:"  // Height 6: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "add x22, x23, x21, LSL #1\n"
      "add x21, x22, x21, LSL #1\n"
      "209:"  // Height 6: input setup done
      "cmp x27, #0x8\n"
      "blt 212f\n"
      "ldr q1, [x26, #0x0]\n"
      "ldr q2, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q3, [x24, #0x0]\n"
      "ldr q4, [x23, #0x0]\n"
      "ldr q5, [x22, #0x0]\n"
      "ldr q6, [x21, #0x0]\n"
      "ldr q7, [x12, #0x0]\n"
      "blt 211f\n"
      "210:"  // Height 6: Multiply loop: Main loop head
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "sub x27, x27, #0x8\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "cmp x27, #0x10\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "trn2 v5.2d, v5.2d, v6.2d\n"
      "ldr q6, [x12, #0x10]\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x11, #0x0]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "add x26, x26, #0x10\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x11, #0x10]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x0]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "add x23, x23, #0x10\n"
      "add x22, x22, #0x10\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      "add x21, x21, #0x10\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x9, #0x0]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x9, #0x10]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x12, #0x20]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "ldr q2, [x25, #0x0]\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "ldr q0, [x12, #0x30]\n"
      "ldr q4, [x23, #0x0]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q6, [x11, #0x20]\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e40ec2c  // bfmmla v12.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec74  // bfmmla v20.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbc  // bfmmla v28.4s, v5.8h, v0.8h\n"
      "ldr q0, [x11, #0x30]\n"
      ".inst 0x6e46ec29  // bfmmla v9.4s, v1.8h, v6.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e46ec71  // bfmmla v17.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecb9  // bfmmla v25.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e40ec2d  // bfmmla v13.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec75  // bfmmla v21.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbd  // bfmmla v29.4s, v5.8h, v0.8h\n"
      "ldr q0, [x10, #0x30]\n"
      ".inst 0x6e46ec2a  // bfmmla v10.4s, v1.8h, v6.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e46ec72  // bfmmla v18.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecba  // bfmmla v26.4s, v5.8h, v6.8h\n"
      "ldr q6, [x9, #0x20]\n"
      ".inst 0x6e40ec2e  // bfmmla v14.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec76  // bfmmla v22.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbe  // bfmmla v30.4s, v5.8h, v0.8h\n"
      "ldr q0, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e46ec2b  // bfmmla v11.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec73  // bfmmla v19.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbb  // bfmmla v27.4s, v5.8h, v6.8h\n"
      "ldr q7, [x12, #0x0]\n"
      ".inst 0x6e40ec2f  // bfmmla v15.4s, v1.8h, v0.8h\n"
      "ldr q1, [x26, #0x0]\n"
      ".inst 0x6e40ec77  // bfmmla v23.4s, v3.8h, v0.8h\n"
      "ldr q3, [x24, #0x0]\n"
      ".inst 0x6e40ecbf  // bfmmla v31.4s, v5.8h, v0.8h\n"
      "ldr q5, [x22, #0x0]\n"
      "ldr q6, [x21, #0x0]\n"
      "bge 210b\n"
      "211:"  // Height 6: Multiply loop: Single iteration only
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "sub x27, x27, #0x8\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "add x26, x26, #0x10\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "trn2 v5.2d, v5.2d, v6.2d\n"
      "ldr q6, [x12, #0x10]\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x11, #0x0]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x11, #0x10]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x0]\n"
      "add x23, x23, #0x10\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "add x22, x22, #0x10\n"
      "add x21, x21, #0x10\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x9, #0x0]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x9, #0x10]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x12, #0x20]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "ldr q2, [x12, #0x30]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      "add x12, x12, #0x40\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q0, [x11, #0x20]\n"
      ".inst 0x6e42ec2c  // bfmmla v12.4s, v1.8h, v2.8h\n"
      ".inst 0x6e42ec74  // bfmmla v20.4s, v3.8h, v2.8h\n"
      ".inst 0x6e42ecbc  // bfmmla v28.4s, v5.8h, v2.8h\n"
      "ldr q2, [x11, #0x30]\n"
      ".inst 0x6e40ec29  // bfmmla v9.4s, v1.8h, v0.8h\n"
      "add x11, x11, #0x40\n"
      ".inst 0x6e40ec71  // bfmmla v17.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecb9  // bfmmla v25.4s, v5.8h, v0.8h\n"
      "ldr q0, [x10, #0x20]\n"
      ".inst 0x6e42ec2d  // bfmmla v13.4s, v1.8h, v2.8h\n"
      ".inst 0x6e42ec75  // bfmmla v21.4s, v3.8h, v2.8h\n"
      ".inst 0x6e42ecbd  // bfmmla v29.4s, v5.8h, v2.8h\n"
      "ldr q2, [x10, #0x30]\n"
      ".inst 0x6e40ec2a  // bfmmla v10.4s, v1.8h, v0.8h\n"
      "add x10, x10, #0x40\n"
      ".inst 0x6e40ec72  // bfmmla v18.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecba  // bfmmla v26.4s, v5.8h, v0.8h\n"
      "ldr q0, [x9, #0x20]\n"
      ".inst 0x6e42ec2e  // bfmmla v14.4s, v1.8h, v2.8h\n"
      ".inst 0x6e42ec76  // bfmmla v22.4s, v3.8h, v2.8h\n"
      ".inst 0x6e42ecbe  // bfmmla v30.4s, v5.8h, v2.8h\n"
      "ldr q6, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      ".inst 0x6e40ec2b  // bfmmla v11.4s, v1.8h, v0.8h\n"
      ".inst 0x6e40ec73  // bfmmla v19.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ecbb  // bfmmla v27.4s, v5.8h, v0.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbf  // bfmmla v31.4s, v5.8h, v6.8h\n"
      "212:"  // Height 6: Multiply loop: Main loop skip
      "cbz x27, 217f\n"
      "cmp x27, #0x4\n"
      "blt 214f\n"
      "213:"  // Height 6: Multiply loop: Odd block loop
      "ldr d1, [x26], #0x8\n"
      "ldr d0, [x25], #0x8\n"
      "trn1 v4.2d, v1.2d, v0.2d\n"
      "sub x27, x27, #0x4\n"
      "ldr d1, [x24], #0x8\n"
      "ldr d0, [x23], #0x8\n"
      "trn1 v3.2d, v1.2d, v0.2d\n"
      "cmp x27, #0x4\n"
      "ldr d1, [x22], #0x8\n"
      "ldr d0, [x21], #0x8\n"
      "trn1 v2.2d, v1.2d, v0.2d\n"
      "ldr q1, [x12, #0x0]\n"
      "ldr q0, [x12, #0x10]\n"
      ".inst 0x6e41ec88  // bfmmla v8.4s, v4.8h, v1.8h\n"
      ".inst 0x6e41ec70  // bfmmla v16.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec58  // bfmmla v24.4s, v2.8h, v1.8h\n"
      "ldr q1, [x11, #0x0]\n"
      ".inst 0x6e40ec8c  // bfmmla v12.4s, v4.8h, v0.8h\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e40ec74  // bfmmla v20.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5c  // bfmmla v28.4s, v2.8h, v0.8h\n"
      "ldr q0, [x11, #0x10]\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e41ec89  // bfmmla v9.4s, v4.8h, v1.8h\n"
      ".inst 0x6e41ec71  // bfmmla v17.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec59  // bfmmla v25.4s, v2.8h, v1.8h\n"
      "ldr q1, [x10, #0x0]\n"
      ".inst 0x6e40ec8d  // bfmmla v13.4s, v4.8h, v0.8h\n"
      ".inst 0x6e40ec75  // bfmmla v21.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5d  // bfmmla v29.4s, v2.8h, v0.8h\n"
      "ldr q0, [x10, #0x10]\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e41ec8a  // bfmmla v10.4s, v4.8h, v1.8h\n"
      ".inst 0x6e41ec72  // bfmmla v18.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec5a  // bfmmla v26.4s, v2.8h, v1.8h\n"
      "ldr q6, [x9, #0x0]\n"
      ".inst 0x6e40ec8e  // bfmmla v14.4s, v4.8h, v0.8h\n"
      ".inst 0x6e40ec76  // bfmmla v22.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5e  // bfmmla v30.4s, v2.8h, v0.8h\n"
      "ldr q0, [x9, #0x10]\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e46ec8b  // bfmmla v11.4s, v4.8h, v6.8h\n"
      ".inst 0x6e46ec73  // bfmmla v19.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ec5b  // bfmmla v27.4s, v2.8h, v6.8h\n"
      ".inst 0x6e40ec8f  // bfmmla v15.4s, v4.8h, v0.8h\n"
      ".inst 0x6e40ec77  // bfmmla v23.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5f  // bfmmla v31.4s, v2.8h, v0.8h\n"
      "bge 213b\n"
      "214:"  // Height 6: Multiply loop: Skip odd blocks
      "cbz x27, 217f\n"
      "tbz x27, #1, 215f\n"
      "ldr s1, [x26], #0x4\n"
      "ldr s2, [x25], #0x4\n"
      "ldr s3, [x24], #0x4\n"
      "ldr s4, [x23], #0x4\n"
      "ldr s5, [x22], #0x4\n"
      "ldr s6, [x21], #0x4\n"
      "tbz x27, #0, 216f\n"
      "ld1 { v1.h }[2], [x26]\n"
      "ld1 { v2.h }[2], [x25]\n"
      "ld1 { v3.h }[2], [x24]\n"
      "ld1 { v4.h }[2], [x23]\n"
      "ld1 { v5.h }[2], [x22]\n"
      "ld1 { v6.h }[2], [x21]\n"
      "b 216f\n"
      "215:"  // Height 6: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x26, #0x0]\n"
      "ldr h2, [x25, #0x0]\n"
      "ldr h3, [x24, #0x0]\n"
      "ldr h4, [x23, #0x0]\n"
      "ldr h5, [x22, #0x0]\n"
      "ldr h6, [x21, #0x0]\n"
      "216:"  // Height 6: Multiply loop: Ragged operand read: Done
      "ldr q0, [x12, #0x0]\n"
      "trn1 v7.2d, v1.2d, v2.2d\n"
      "trn1 v3.2d, v3.2d, v4.2d\n"
      ".inst 0x6e40ece8  // bfmmla v8.4s, v7.8h, v0.8h\n"
      "trn1 v2.2d, v5.2d, v6.2d\n"
      "ldr q1, [x12, #0x10]\n"
      ".inst 0x6e40ec70  // bfmmla v16.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec58  // bfmmla v24.4s, v2.8h, v0.8h\n"
      "ldr q0, [x11, #0x0]\n"
      ".inst 0x6e41ecec  // bfmmla v12.4s, v7.8h, v1.8h\n"
      ".inst 0x6e41ec74  // bfmmla v20.4s, v3.8h, v1.8h\n"
      "add x12, x12, #0x20\n"
      ".inst 0x6e41ec5c  // bfmmla v28.4s, v2.8h, v1.8h\n"
      "ldr q1, [x11, #0x10]\n"
      ".inst 0x6e40ece9  // bfmmla v9.4s, v7.8h, v0.8h\n"
      "add x11, x11, #0x20\n"
      ".inst 0x6e40ec71  // bfmmla v17.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec59  // bfmmla v25.4s, v2.8h, v0.8h\n"
      "ldr q0, [x10, #0x0]\n"
      ".inst 0x6e41eced  // bfmmla v13.4s, v7.8h, v1.8h\n"
      ".inst 0x6e41ec75  // bfmmla v21.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec5d  // bfmmla v29.4s, v2.8h, v1.8h\n"
      "ldr q1, [x10, #0x10]\n"
      ".inst 0x6e40ecea  // bfmmla v10.4s, v7.8h, v0.8h\n"
      "add x10, x10, #0x20\n"
      ".inst 0x6e40ec72  // bfmmla v18.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5a  // bfmmla v26.4s, v2.8h, v0.8h\n"
      "ldr q0, [x9, #0x0]\n"
      ".inst 0x6e41ecee  // bfmmla v14.4s, v7.8h, v1.8h\n"
      ".inst 0x6e41ec76  // bfmmla v22.4s, v3.8h, v1.8h\n"
      ".inst 0x6e41ec5e  // bfmmla v30.4s, v2.8h, v1.8h\n"
      "ldr q6, [x9, #0x10]\n"
      ".inst 0x6e40eceb  // bfmmla v11.4s, v7.8h, v0.8h\n"
      "add x9, x9, #0x20\n"
      ".inst 0x6e40ec73  // bfmmla v19.4s, v3.8h, v0.8h\n"
      ".inst 0x6e40ec5b  // bfmmla v27.4s, v2.8h, v0.8h\n"
      ".inst 0x6e46ecef  // bfmmla v15.4s, v7.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ec5f  // bfmmla v31.4s, v2.8h, v6.8h\n"
      "217:"  // Height 6: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 207b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x13, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "add x23, x24, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "add x21, x22, x20, LSL #2\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v15.2d, v16.2d, v20.2d\n"
      "uzp2 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v20.2d, v17.2d, v21.2d\n"
      "uzp2 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v21.2d, v18.2d, v22.2d\n"
      "uzp2 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v22.2d, v19.2d, v23.2d\n"
      "uzp2 v19.2d, v19.2d, v23.2d\n"
      "uzp1 v23.2d, v24.2d, v28.2d\n"
      "uzp2 v24.2d, v24.2d, v28.2d\n"
      "uzp1 v28.2d, v25.2d, v29.2d\n"
      "uzp2 v25.2d, v25.2d, v29.2d\n"
      "uzp1 v29.2d, v26.2d, v30.2d\n"
      "uzp2 v26.2d, v26.2d, v30.2d\n"
      "uzp1 v30.2d, v27.2d, v31.2d\n"
      "uzp2 v27.2d, v27.2d, v31.2d\n"
      "tbz %x[flags], #1, 218f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v1.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v0.4s }, [x20]\n"
      "fmin v7.4s, v7.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v1.4s\n"
      "fmin v13.4s, v13.4s, v1.4s\n"
      "fmin v14.4s, v14.4s, v1.4s\n"
      "fmin v8.4s, v8.4s, v1.4s\n"
      "fmin v9.4s, v9.4s, v1.4s\n"
      "fmin v10.4s, v10.4s, v1.4s\n"
      "fmin v11.4s, v11.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v1.4s\n"
      "fmin v20.4s, v20.4s, v1.4s\n"
      "fmin v21.4s, v21.4s, v1.4s\n"
      "fmin v22.4s, v22.4s, v1.4s\n"
      "fmin v16.4s, v16.4s, v1.4s\n"
      "fmin v17.4s, v17.4s, v1.4s\n"
      "fmin v18.4s, v18.4s, v1.4s\n"
      "fmin v19.4s, v19.4s, v1.4s\n"
      "fmin v23.4s, v23.4s, v1.4s\n"
      "fmin v28.4s, v28.4s, v1.4s\n"
      "fmin v29.4s, v29.4s, v1.4s\n"
      "fmin v30.4s, v30.4s, v1.4s\n"
      "fmin v24.4s, v24.4s, v1.4s\n"
      "fmin v25.4s, v25.4s, v1.4s\n"
      "fmin v26.4s, v26.4s, v1.4s\n"
      "fmin v27.4s, v27.4s, v1.4s\n"
      "fmax v7.4s, v7.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v0.4s\n"
      "fmax v13.4s, v13.4s, v0.4s\n"
      "fmax v14.4s, v14.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v0.4s\n"
      "fmax v9.4s, v9.4s, v0.4s\n"
      "fmax v10.4s, v10.4s, v0.4s\n"
      "fmax v11.4s, v11.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v0.4s\n"
      "fmax v20.4s, v20.4s, v0.4s\n"
      "fmax v21.4s, v21.4s, v0.4s\n"
      "fmax v22.4s, v22.4s, v0.4s\n"
      "fmax v16.4s, v16.4s, v0.4s\n"
      "fmax v17.4s, v17.4s, v0.4s\n"
      "fmax v18.4s, v18.4s, v0.4s\n"
      "fmax v19.4s, v19.4s, v0.4s\n"
      "fmax v23.4s, v23.4s, v0.4s\n"
      "fmax v28.4s, v28.4s, v0.4s\n"
      "fmax v29.4s, v29.4s, v0.4s\n"
      "fmax v30.4s, v30.4s, v0.4s\n"
      "fmax v24.4s, v24.4s, v0.4s\n"
      "fmax v25.4s, v25.4s, v0.4s\n"
      "fmax v26.4s, v26.4s, v0.4s\n"
      "fmax v27.4s, v27.4s, v0.4s\n"
      "218:"  // Height 6: No activation
      "cmp x14, #0x10\n"
      "bge 227f\n"
      "tbz x14, #3, 222f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v12.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v9.4s }, [x25], #0x10\n"
      "st1 { v15.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "st1 { v17.4s }, [x23], #0x10\n"
      "st1 { v23.4s }, [x22], #0x10\n"
      "st1 { v28.4s }, [x22], #0x10\n"
      "st1 { v24.4s }, [x21], #0x10\n"
      "st1 { v25.4s }, [x21], #0x10\n"
      "tbz x14, #2, 220f\n"
      "st1 { v13.4s }, [x13], #0x10\n"
      "st1 { v10.4s }, [x25], #0x10\n"
      "st1 { v21.4s }, [x24], #0x10\n"
      "st1 { v18.4s }, [x23], #0x10\n"
      "st1 { v29.4s }, [x22], #0x10\n"
      "st1 { v26.4s }, [x21], #0x10\n"
      "tbz x14, #1, 219f\n"
      "str d14, [x13], #0x8\n"
      "str d11, [x25], #0x8\n"
      "str d22, [x24], #0x8\n"
      "str d19, [x23], #0x8\n"
      "str d30, [x22], #0x8\n"
      "str d27, [x21], #0x8\n"
      "tbz x14, #0, 226f\n"
      "st1 { v14.s }[2], [x13]\n"
      "st1 { v11.s }[2], [x25]\n"
      "st1 { v22.s }[2], [x24]\n"
      "st1 { v19.s }[2], [x23]\n"
      "st1 { v30.s }[2], [x22]\n"
      "st1 { v27.s }[2], [x21]\n"
      "b 226f\n"
      "219:"  // Height 6: Partial direct writeback: partial_1_12
      "tbz x14, #0, 226f\n"
      "str s14, [x13, #0x0]\n"
      "str s11, [x25, #0x0]\n"
      "str s22, [x24, #0x0]\n"
      "str s19, [x23, #0x0]\n"
      "str s30, [x22, #0x0]\n"
      "str s27, [x21, #0x0]\n"
      "b 226f\n"
      "220:"  // Height 6: Partial direct writeback: partial_2_8
      "tbz x14, #1, 221f\n"
      "str d13, [x13], #0x8\n"
      "str d10, [x25], #0x8\n"
      "str d21, [x24], #0x8\n"
      "str d18, [x23], #0x8\n"
      "str d29, [x22], #0x8\n"
      "str d26, [x21], #0x8\n"
      "tbz x14, #0, 226f\n"
      "st1 { v13.s }[2], [x13]\n"
      "st1 { v10.s }[2], [x25]\n"
      "st1 { v21.s }[2], [x24]\n"
      "st1 { v18.s }[2], [x23]\n"
      "st1 { v29.s }[2], [x22]\n"
      "st1 { v26.s }[2], [x21]\n"
      "b 226f\n"
      "221:"  // Height 6: Partial direct writeback: partial_1_8
      "tbz x14, #0, 226f\n"
      "str s13, [x13, #0x0]\n"
      "str s10, [x25, #0x0]\n"
      "str s21, [x24, #0x0]\n"
      "str s18, [x23, #0x0]\n"
      "str s29, [x22, #0x0]\n"
      "str s26, [x21, #0x0]\n"
      "b 226f\n"
      "222:"  // Height 6: Partial direct writeback: partial_4_0
      "tbz x14, #2, 224f\n"
      "st1 { v7.4s }, [x13], #0x10\n"
      "st1 { v8.4s }, [x25], #0x10\n"
      "st1 { v15.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "st1 { v23.4s }, [x22], #0x10\n"
      "st1 { v24.4s }, [x21], #0x10\n"
      "tbz x14, #1, 223f\n"
      "str d12, [x13], #0x8\n"
      "str d9, [x25], #0x8\n"
      "str d20, [x24], #0x8\n"
      "str d17, [x23], #0x8\n"
      "str d28, [x22], #0x8\n"
      "str d25, [x21], #0x8\n"
      "tbz x14, #0, 226f\n"
      "st1 { v12.s }[2], [x13]\n"
      "st1 { v9.s }[2], [x25]\n"
      "st1 { v20.s }[2], [x24]\n"
      "st1 { v17.s }[2], [x23]\n"
      "st1 { v28.s }[2], [x22]\n"
      "st1 { v25.s }[2], [x21]\n"
      "b 226f\n"
      "223:"  // Height 6: Partial direct writeback: partial_1_4
      "tbz x14, #0, 226f\n"
      "str s12, [x13, #0x0]\n"
      "str s9, [x25, #0x0]\n"
      "str s20, [x24, #0x0]\n"
      "str s17, [x23, #0x0]\n"
      "str s28, [x22, #0x0]\n"
      "str s25, [x21, #0x0]\n"
      "b 226f\n"
      "224:"  // Height 6: Partial direct writeback: partial_2_0
      "tbz x14, #1, 225f\n"
      "str d7, [x13], #0x8\n"
      "str d8, [x25], #0x8\n"
      "str d15, [x24], #0x8\n"
      "str d16, [x23], #0x8\n"
      "str d23, [x22], #0x8\n"
      "str d24, [x21], #0x8\n"
      "tbz x14, #0, 226f\n"
      "st1 { v7.s }[2], [x13]\n"
      "st1 { v8.s }[2], [x25]\n"
      "st1 { v15.s }[2], [x24]\n"
      "st1 { v16.s }[2], [x23]\n"
      "st1 { v23.s }[2], [x22]\n"
      "st1 { v24.s }[2], [x21]\n"
      "b 226f\n"
      "225:"  // Height 6: Partial direct writeback: partial_1_0
      "str s7, [x13, #0x0]\n"
      "str s8, [x25, #0x0]\n"
      "str s15, [x24, #0x0]\n"
      "str s16, [x23, #0x0]\n"
      "str s23, [x22, #0x0]\n"
      "str s24, [x21, #0x0]\n"
      "226:"  // Height 6: Partial direct writeback: Done
      "b 228f\n"
      "227:"  // Height 6: Full writeback
      "str q7, [x13, #0x0]\n"
      "str q12, [x13, #0x10]\n"
      "str q13, [x13, #0x20]\n"
      "str q14, [x13, #0x30]\n"
      "add x13, x13, #0x40\n"
      "str q8, [x25, #0x0]\n"
      "str q9, [x25, #0x10]\n"
      "str q10, [x25, #0x20]\n"
      "str q11, [x25, #0x30]\n"
      "str q15, [x24, #0x0]\n"
      "str q20, [x24, #0x10]\n"
      "str q21, [x24, #0x20]\n"
      "str q22, [x24, #0x30]\n"
      "str q16, [x23, #0x0]\n"
      "str q17, [x23, #0x10]\n"
      "str q18, [x23, #0x20]\n"
      "str q19, [x23, #0x30]\n"
      "str q23, [x22, #0x0]\n"
      "str q28, [x22, #0x10]\n"
      "str q29, [x22, #0x20]\n"
      "str q30, [x22, #0x30]\n"
      "str q24, [x21, #0x0]\n"
      "str q25, [x21, #0x10]\n"
      "str q26, [x21, #0x20]\n"
      "str q27, [x21, #0x30]\n"
      "228:"  // Height 6: Writeback done
      "subs x14, x14, #0x10\n"
      "bgt 192b\n"
      "subs %x[M], %x[M], #0x6\n"
      "beq 230f\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 229f\n"
      "add x21, x21, #0x6\n"
      "str x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "b 1b\n"
      "229:"  // Update direct input
      "mov x20, #0xc\n"
      "madd %x[input_ptr], x20, x21, %x[input_ptr]\n"
      "b 1b\n"
      "230:"  // Exit
      : [M] "+&r" (M), [input_ptr] "+&r" (input_ptr), [output_ptr] "+&r" (output_ptr)
      : [args_ptr] "r" (&ka), [bias] "r" (bias), [flags] "r" (flags), [offset_max] "I" (offsetof(KernelArgs, maxval)), [offset_min] "I" (offsetof(KernelArgs, minval)), [offsetof_B_ptr] "I" (offsetof(KernelArgs, B_ptr)), [offsetof_B_stride] "I" (offsetof(KernelArgs, B_stride)), [offsetof_N] "I" (offsetof(KernelArgs, N)), [offsetof_cur_B_ptr] "I" (offsetof(KernelArgs, cur_B_ptr)), [offsetof_input_initial_col] "I" (offsetof(KernelArgs, input_initial_col)), [offsetof_input_offset] "I" (offsetof(KernelArgs, input_offset)), [offsetof_num_strings] "I" (offsetof(KernelArgs, num_strings)), [offsetof_output_offset] "I" (offsetof(KernelArgs, output_offset)), [offsetof_string_lengths] "I" (offsetof(KernelArgs, string_lengths))
      : "cc", "memory", "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15", "v16", "v17", "v18", "v19", "v20", "v21", "v22", "v23", "v24", "v25", "v26", "v27", "v28", "v29", "v30", "v31", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28"
    );
}

} // namespace arm_gemm
#endif // __aarch64__
