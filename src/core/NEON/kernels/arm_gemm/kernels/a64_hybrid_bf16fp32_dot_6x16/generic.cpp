/*
 * Copyright (c) 2019-2021, 2023 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#ifdef __aarch64__

#include "arm_gemm.hpp"
#include "../../utils.hpp"
#include "../../bfloat.hpp"

#include <cassert>
#include <limits>

namespace arm_gemm {

void a64_hybrid_bf16fp32_dot_6x16 (
    unsigned int num_strings, const unsigned int *string_lengths, IndirectInputArg<bfloat16> A_arg,
    size_t M, size_t N, const bfloat16 *B_ptr, IndirectOutputArg<float> output_arg,
    const float *bias, Activation act, bool accumulate
)
{
    struct KernelArgs {
        float maxval = static_cast<float>(std::numeric_limits<float>::infinity());
        float minval = - static_cast<float>(std::numeric_limits<float>::infinity());
        unsigned int num_strings = {};
        const unsigned int *string_lengths = {};
        size_t N = {};
        const bfloat16 *B_ptr = {};
        size_t output_offset = {};
        size_t input_initial_col = {};
        size_t input_offset = {};
    } ka;

    unsigned long flags=0;
    void *output_ptr;
    void *input_ptr;

    if (output_arg.is_indirect) {
        output_ptr=(void *)(output_arg.indirect.ptr);
        ka.output_offset=output_arg.indirect.offset;
        flags |= 0x4;
    } else {
        output_ptr=(void *)(output_arg.direct.base);
        ka.output_offset=output_arg.direct.stride;
    }

    if (A_arg.is_indirect) {
        input_ptr=(void *)(A_arg.indirect.ptr);
        ka.input_offset=A_arg.indirect.start_row;
        ka.input_initial_col=A_arg.indirect.start_col;
        flags |= 0x8;
    } else {
        assert(num_strings==1);
        input_ptr=(void *)(A_arg.direct.base);
        ka.input_offset=A_arg.direct.stride;
    }
    if (accumulate) {
        flags |= 0x1;
    }
    ka.num_strings = num_strings;
    ka.string_lengths = string_lengths;
    ka.N = N;
    ka.B_ptr = B_ptr;
    switch(act.type) {
        default:
        case Activation::Type::None:
            break;
        case Activation::Type::BoundedReLU:
            ka.maxval = static_cast<float>(act.param1);
            /* fall through */
        case Activation::Type::ReLU:
            ka.minval = 0;
            flags |= 0x2;
            break;
    }
    __asm__ __volatile__(
      "1:"  // Row loop
      "cmp %x[M], #0x6\n"
      "bge 176f\n"
      "cmp %x[M], #0x4\n"
      "bgt 141f\n"
      "beq 106f\n"
      "cmp %x[M], #0x2\n"
      "bgt 71f\n"
      "beq 36f\n"
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "2:"  // Height 1: Column loop
      "cbz x12, 3f\n"
      "ldr q8, [x12, #0x0]\n"
      "ldr q9, [x12, #0x10]\n"
      "ldr q10, [x12, #0x20]\n"
      "ldr q11, [x12, #0x30]\n"
      "add x12, x12, #0x40\n"
      "b 14f\n"
      "3:"  // Height 1: no bias
      "tbz %x[flags], #0, 13f\n"
      "cmp x11, #0x10\n"
      "bge 12f\n"
      "tbz x11, #3, 7f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v9.4s }, [x9], #0x10\n"
      "tbz x11, #2, 5f\n"
      "ld1 { v10.4s }, [x9], #0x10\n"
      "tbz x11, #1, 4f\n"
      "ldr d11, [x9], #0x8\n"
      "mov x20, #0x38\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v11.s }[2], [x9]\n"
      "b 11f\n"
      "4:"  // Height 1: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x11, #0, 11f\n"
      "ldr s11, [x9, #0x0]\n"
      "b 11f\n"
      "5:"  // Height 1: Partial accumulate: partial_2_8
      "tbz x11, #1, 6f\n"
      "ldr d10, [x9], #0x8\n"
      "mov x20, #0x28\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v10.s }[2], [x9]\n"
      "b 11f\n"
      "6:"  // Height 1: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x11, #0, 11f\n"
      "ldr s10, [x9, #0x0]\n"
      "b 11f\n"
      "7:"  // Height 1: Partial accumulate: partial_4_0
      "tbz x11, #2, 9f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "tbz x11, #1, 8f\n"
      "ldr d9, [x9], #0x8\n"
      "mov x20, #0x18\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v9.s }[2], [x9]\n"
      "b 11f\n"
      "8:"  // Height 1: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x11, #0, 11f\n"
      "ldr s9, [x9, #0x0]\n"
      "b 11f\n"
      "9:"  // Height 1: Partial accumulate: partial_2_0
      "tbz x11, #1, 10f\n"
      "ldr d8, [x9], #0x8\n"
      "mov x20, #0x8\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v8.s }[2], [x9]\n"
      "b 11f\n"
      "10:"  // Height 1: Partial accumulate: partial_1_0
      "ldr s8, [x9, #0x0]\n"
      "mov x20, #0x0\n"
      "11:"  // Height 1: Partial accumulate: Done
      "sub x9, x9, x20\n"
      "b 14f\n"
      "12:"  // Height 1: full accumulate
      "ldr q8, [x9, #0x0]\n"
      "ldr q9, [x9, #0x10]\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "b 14f\n"
      "13:"  // Height 1: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "14:"  // Height 1: setup done
      "mov x28, #0x0\n"
      "15:"  // Height 1: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 16f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "cbnz x28, 17f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "b 17f\n"
      "16:"  // Height 1: setup direct input
      "mov x26, %x[input_ptr]\n"
      "17:"  // Height 1: input setup done
      "cmp x27, #0x8\n"
      "blt 20f\n"
      "ldr q0, [x26, #0x0]\n"
      "ldr q6, [x10, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q7, [x10, #0x10]\n"
      "blt 19f\n"
      "18:"  // Height 1: Multiply loop: Main loop head
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      "ldr q17, [x10, #0x20]\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      "ldr q16, [x10, #0x30]\n"
      ".inst 0x4f40f22a  // bfdot v10.4s, v17.8h, v0.h[0]\n"
      "ldr q17, [x10, #0x40]\n"
      ".inst 0x4f40f20b  // bfdot v11.4s, v16.8h, v0.h[0]\n"
      "ldr q16, [x10, #0x50]\n"
      ".inst 0x4f60f228  // bfdot v8.4s, v17.8h, v0.h[1]\n"
      "ldr q17, [x10, #0x60]\n"
      ".inst 0x4f60f209  // bfdot v9.4s, v16.8h, v0.h[1]\n"
      "ldr q16, [x10, #0x70]\n"
      ".inst 0x4f60f22a  // bfdot v10.4s, v17.8h, v0.h[1]\n"
      "ldr q17, [x10, #0x80]\n"
      ".inst 0x4f60f20b  // bfdot v11.4s, v16.8h, v0.h[1]\n"
      "ldr q16, [x10, #0x90]\n"
      ".inst 0x4f40fa28  // bfdot v8.4s, v17.8h, v0.h[2]\n"
      "ldr q17, [x10, #0xa0]\n"
      ".inst 0x4f40fa09  // bfdot v9.4s, v16.8h, v0.h[2]\n"
      "ldr q16, [x10, #0xb0]\n"
      ".inst 0x4f40fa2a  // bfdot v10.4s, v17.8h, v0.h[2]\n"
      "ldr q17, [x10, #0xc0]\n"
      ".inst 0x4f40fa0b  // bfdot v11.4s, v16.8h, v0.h[2]\n"
      "ldr q16, [x10, #0xd0]\n"
      ".inst 0x4f60fa28  // bfdot v8.4s, v17.8h, v0.h[3]\n"
      "ldr q17, [x10, #0xe0]\n"
      ".inst 0x4f60fa09  // bfdot v9.4s, v16.8h, v0.h[3]\n"
      "ldr q16, [x10, #0xf0]\n"
      "sub x27, x27, #0x8\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f60fa2a  // bfdot v10.4s, v17.8h, v0.h[3]\n"
      ".inst 0x4f60fa0b  // bfdot v11.4s, v16.8h, v0.h[3]\n"
      "ldr q0, [x26, #0x0]\n"
      "cmp x27, #0x10\n"
      "add x10, x10, #0x100\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "bge 18b\n"
      "19:"  // Height 1: Multiply loop: Single iteration only
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      "ldr q17, [x10, #0x20]\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      "ldr q16, [x10, #0x30]\n"
      ".inst 0x4f40f22a  // bfdot v10.4s, v17.8h, v0.h[0]\n"
      "ldr q17, [x10, #0x40]\n"
      ".inst 0x4f40f20b  // bfdot v11.4s, v16.8h, v0.h[0]\n"
      "ldr q16, [x10, #0x50]\n"
      ".inst 0x4f60f228  // bfdot v8.4s, v17.8h, v0.h[1]\n"
      "ldr q17, [x10, #0x60]\n"
      ".inst 0x4f60f209  // bfdot v9.4s, v16.8h, v0.h[1]\n"
      "ldr q16, [x10, #0x70]\n"
      ".inst 0x4f60f22a  // bfdot v10.4s, v17.8h, v0.h[1]\n"
      "ldr q17, [x10, #0x80]\n"
      ".inst 0x4f60f20b  // bfdot v11.4s, v16.8h, v0.h[1]\n"
      "ldr q16, [x10, #0x90]\n"
      ".inst 0x4f40fa28  // bfdot v8.4s, v17.8h, v0.h[2]\n"
      "ldr q17, [x10, #0xa0]\n"
      ".inst 0x4f40fa09  // bfdot v9.4s, v16.8h, v0.h[2]\n"
      "ldr q16, [x10, #0xb0]\n"
      ".inst 0x4f40fa2a  // bfdot v10.4s, v17.8h, v0.h[2]\n"
      "ldr q17, [x10, #0xc0]\n"
      ".inst 0x4f40fa0b  // bfdot v11.4s, v16.8h, v0.h[2]\n"
      "ldr q16, [x10, #0xd0]\n"
      ".inst 0x4f60fa28  // bfdot v8.4s, v17.8h, v0.h[3]\n"
      "ldr q17, [x10, #0xe0]\n"
      ".inst 0x4f60fa09  // bfdot v9.4s, v16.8h, v0.h[3]\n"
      "ldr q16, [x10, #0xf0]\n"
      "add x26, x26, #0x10\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x4f60fa2a  // bfdot v10.4s, v17.8h, v0.h[3]\n"
      ".inst 0x4f60fa0b  // bfdot v11.4s, v16.8h, v0.h[3]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "add x10, x10, #0x100\n"
      "20:"  // Height 1: Multiply loop: Main loop skip
      "cbz x27, 24f\n"
      "cmp x27, #0x2\n"
      "blt 22f\n"
      "21:"  // Height 1: Multiply loop: Odd block loop
      "ldr s18, [x26], #0x4\n"
      "ldr q16, [x10, #0x0]\n"
      ".inst 0x4f52f208  // bfdot v8.4s, v16.8h, v18.h[0]\n"
      "sub x27, x27, #0x2\n"
      "ldr q16, [x10, #0x10]\n"
      "ldr q17, [x10, #0x20]\n"
      ".inst 0x4f52f209  // bfdot v9.4s, v16.8h, v18.h[0]\n"
      "cmp x27, #0x2\n"
      "ldr q16, [x10, #0x30]\n"
      ".inst 0x4f52f22a  // bfdot v10.4s, v17.8h, v18.h[0]\n"
      ".inst 0x4f52f20b  // bfdot v11.4s, v16.8h, v18.h[0]\n"
      "add x10, x10, #0x40\n"
      "bge 21b\n"
      "22:"  // Height 1: Multiply loop: Skip odd blocks
      "cbz x27, 24f\n"
      "ldr h0, [x26, #0x0]\n"
      "23:"  // Height 1: Multiply loop: Ragged operand read: Done
      "ldr q17, [x10, #0x0]\n"
      "ldr q16, [x10, #0x10]\n"
      ".inst 0x4f40f228  // bfdot v8.4s, v17.8h, v0.h[0]\n"
      ".inst 0x4f40f209  // bfdot v9.4s, v16.8h, v0.h[0]\n"
      "ldr q17, [x10, #0x20]\n"
      "ldr q16, [x10, #0x30]\n"
      ".inst 0x4f40f22a  // bfdot v10.4s, v17.8h, v0.h[0]\n"
      ".inst 0x4f40f20b  // bfdot v11.4s, v16.8h, v0.h[0]\n"
      "add x10, x10, #0x40\n"
      "24:"  // Height 1: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 15b\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "tbz %x[flags], #1, 25f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v17.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v16.4s }, [x20]\n"
      "fmin v8.4s, v8.4s, v17.4s\n"
      "fmin v9.4s, v9.4s, v17.4s\n"
      "fmin v10.4s, v10.4s, v17.4s\n"
      "fmin v11.4s, v11.4s, v17.4s\n"
      "fmax v8.4s, v8.4s, v16.4s\n"
      "fmax v9.4s, v9.4s, v16.4s\n"
      "fmax v10.4s, v10.4s, v16.4s\n"
      "fmax v11.4s, v11.4s, v16.4s\n"
      "25:"  // Height 1: No activation
      "cmp x11, #0x10\n"
      "bge 34f\n"
      "tbz x11, #3, 29f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v9.4s }, [x9], #0x10\n"
      "tbz x11, #2, 27f\n"
      "st1 { v10.4s }, [x9], #0x10\n"
      "tbz x11, #1, 26f\n"
      "str d11, [x9], #0x8\n"
      "tbz x11, #0, 33f\n"
      "st1 { v11.s }[2], [x9]\n"
      "b 33f\n"
      "26:"  // Height 1: Partial direct writeback: partial_1_12
      "tbz x11, #0, 33f\n"
      "str s11, [x9, #0x0]\n"
      "b 33f\n"
      "27:"  // Height 1: Partial direct writeback: partial_2_8
      "tbz x11, #1, 28f\n"
      "str d10, [x9], #0x8\n"
      "tbz x11, #0, 33f\n"
      "st1 { v10.s }[2], [x9]\n"
      "b 33f\n"
      "28:"  // Height 1: Partial direct writeback: partial_1_8
      "tbz x11, #0, 33f\n"
      "str s10, [x9, #0x0]\n"
      "b 33f\n"
      "29:"  // Height 1: Partial direct writeback: partial_4_0
      "tbz x11, #2, 31f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "tbz x11, #1, 30f\n"
      "str d9, [x9], #0x8\n"
      "tbz x11, #0, 33f\n"
      "st1 { v9.s }[2], [x9]\n"
      "b 33f\n"
      "30:"  // Height 1: Partial direct writeback: partial_1_4
      "tbz x11, #0, 33f\n"
      "str s9, [x9, #0x0]\n"
      "b 33f\n"
      "31:"  // Height 1: Partial direct writeback: partial_2_0
      "tbz x11, #1, 32f\n"
      "str d8, [x9], #0x8\n"
      "tbz x11, #0, 33f\n"
      "st1 { v8.s }[2], [x9]\n"
      "b 33f\n"
      "32:"  // Height 1: Partial direct writeback: partial_1_0
      "str s8, [x9, #0x0]\n"
      "33:"  // Height 1: Partial direct writeback: Done
      "b 35f\n"
      "34:"  // Height 1: Full writeback
      "str q8, [x9, #0x0]\n"
      "str q9, [x9, #0x10]\n"
      "str q10, [x9, #0x20]\n"
      "str q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "35:"  // Height 1: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 2b\n"
      "b 212f\n"
      "36:"  // Height 2
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "37:"  // Height 2: Column loop
      "cbz x12, 38f\n"
      "ldr q8, [x12, #0x0]\n"
      "ldr q9, [x12, #0x10]\n"
      "mov v12.16b, v8.16b\n"
      "mov v13.16b, v9.16b\n"
      "ldr q10, [x12, #0x20]\n"
      "ldr q11, [x12, #0x30]\n"
      "mov v14.16b, v10.16b\n"
      "mov v15.16b, v11.16b\n"
      "add x12, x12, #0x40\n"
      "b 49f\n"
      "38:"  // Height 2: no bias
      "tbz %x[flags], #0, 48f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "cmp x11, #0x10\n"
      "add x25, x9, x20, LSL #2\n"
      "bge 47f\n"
      "tbz x11, #3, 42f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v9.4s }, [x9], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "tbz x11, #2, 40f\n"
      "ld1 { v10.4s }, [x9], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "tbz x11, #1, 39f\n"
      "ldr d11, [x9], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "tbz x11, #0, 46f\n"
      "ld1 { v11.s }[2], [x9]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "b 46f\n"
      "39:"  // Height 2: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x11, #0, 46f\n"
      "ldr s11, [x9, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "b 46f\n"
      "40:"  // Height 2: Partial accumulate: partial_2_8
      "tbz x11, #1, 41f\n"
      "ldr d10, [x9], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "tbz x11, #0, 46f\n"
      "ld1 { v10.s }[2], [x9]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "b 46f\n"
      "41:"  // Height 2: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x11, #0, 46f\n"
      "ldr s10, [x9, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "b 46f\n"
      "42:"  // Height 2: Partial accumulate: partial_4_0
      "tbz x11, #2, 44f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "tbz x11, #1, 43f\n"
      "ldr d9, [x9], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "tbz x11, #0, 46f\n"
      "ld1 { v9.s }[2], [x9]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "b 46f\n"
      "43:"  // Height 2: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x11, #0, 46f\n"
      "ldr s9, [x9, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "b 46f\n"
      "44:"  // Height 2: Partial accumulate: partial_2_0
      "tbz x11, #1, 45f\n"
      "ldr d8, [x9], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "tbz x11, #0, 46f\n"
      "ld1 { v8.s }[2], [x9]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "b 46f\n"
      "45:"  // Height 2: Partial accumulate: partial_1_0
      "ldr s8, [x9, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "46:"  // Height 2: Partial accumulate: Done
      "sub x9, x9, x20\n"
      "b 49f\n"
      "47:"  // Height 2: full accumulate
      "ldr q8, [x9, #0x0]\n"
      "ldr q9, [x9, #0x10]\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "b 49f\n"
      "48:"  // Height 2: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "49:"  // Height 2: setup done
      "mov x28, #0x0\n"
      "50:"  // Height 2: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 51f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "cbnz x28, 52f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "b 52f\n"
      "51:"  // Height 2: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "52:"  // Height 2: input setup done
      "cmp x27, #0x8\n"
      "blt 55f\n"
      "ldr q0, [x26, #0x0]\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "blt 54f\n"
      "53:"  // Height 2: Multiply loop: Main loop head
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "ldr q17, [x10, #0x20]\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      "ldr q16, [x10, #0x30]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f40f22a  // bfdot v10.4s, v17.8h, v0.h[0]\n"
      ".inst 0x4f41f22e  // bfdot v14.4s, v17.8h, v1.h[0]\n"
      "ldr q17, [x10, #0x40]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f40f20b  // bfdot v11.4s, v16.8h, v0.h[0]\n"
      ".inst 0x4f41f20f  // bfdot v15.4s, v16.8h, v1.h[0]\n"
      "ldr q16, [x10, #0x50]\n"
      "cmp x27, #0x10\n"
      ".inst 0x4f60f228  // bfdot v8.4s, v17.8h, v0.h[1]\n"
      ".inst 0x4f61f22c  // bfdot v12.4s, v17.8h, v1.h[1]\n"
      "ldr q17, [x10, #0x60]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f60f209  // bfdot v9.4s, v16.8h, v0.h[1]\n"
      ".inst 0x4f61f20d  // bfdot v13.4s, v16.8h, v1.h[1]\n"
      "ldr q16, [x10, #0x70]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f60f22a  // bfdot v10.4s, v17.8h, v0.h[1]\n"
      ".inst 0x4f61f22e  // bfdot v14.4s, v17.8h, v1.h[1]\n"
      "ldr q17, [x10, #0x80]\n"
      ".inst 0x4f60f20b  // bfdot v11.4s, v16.8h, v0.h[1]\n"
      ".inst 0x4f61f20f  // bfdot v15.4s, v16.8h, v1.h[1]\n"
      "ldr q16, [x10, #0x90]\n"
      ".inst 0x4f40fa28  // bfdot v8.4s, v17.8h, v0.h[2]\n"
      ".inst 0x4f41fa2c  // bfdot v12.4s, v17.8h, v1.h[2]\n"
      "ldr q17, [x10, #0xa0]\n"
      ".inst 0x4f40fa09  // bfdot v9.4s, v16.8h, v0.h[2]\n"
      ".inst 0x4f41fa0d  // bfdot v13.4s, v16.8h, v1.h[2]\n"
      "ldr q16, [x10, #0xb0]\n"
      ".inst 0x4f40fa2a  // bfdot v10.4s, v17.8h, v0.h[2]\n"
      ".inst 0x4f41fa2e  // bfdot v14.4s, v17.8h, v1.h[2]\n"
      "ldr q17, [x10, #0xc0]\n"
      ".inst 0x4f40fa0b  // bfdot v11.4s, v16.8h, v0.h[2]\n"
      ".inst 0x4f41fa0f  // bfdot v15.4s, v16.8h, v1.h[2]\n"
      "ldr q16, [x10, #0xd0]\n"
      ".inst 0x4f60fa28  // bfdot v8.4s, v17.8h, v0.h[3]\n"
      ".inst 0x4f61fa2c  // bfdot v12.4s, v17.8h, v1.h[3]\n"
      "ldr q17, [x10, #0xe0]\n"
      ".inst 0x4f60fa09  // bfdot v9.4s, v16.8h, v0.h[3]\n"
      ".inst 0x4f61fa0d  // bfdot v13.4s, v16.8h, v1.h[3]\n"
      "ldr q16, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60fa2a  // bfdot v10.4s, v17.8h, v0.h[3]\n"
      ".inst 0x4f61fa2e  // bfdot v14.4s, v17.8h, v1.h[3]\n"
      "ldr q6, [x10, #0x0]\n"
      ".inst 0x4f60fa0b  // bfdot v11.4s, v16.8h, v0.h[3]\n"
      "ldr q0, [x26, #0x0]\n"
      ".inst 0x4f61fa0f  // bfdot v15.4s, v16.8h, v1.h[3]\n"
      "ldr q1, [x25, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "bge 53b\n"
      "54:"  // Height 2: Multiply loop: Single iteration only
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "ldr q17, [x10, #0x20]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      "ldr q16, [x10, #0x30]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f40f22a  // bfdot v10.4s, v17.8h, v0.h[0]\n"
      ".inst 0x4f41f22e  // bfdot v14.4s, v17.8h, v1.h[0]\n"
      "ldr q17, [x10, #0x40]\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x4f40f20b  // bfdot v11.4s, v16.8h, v0.h[0]\n"
      ".inst 0x4f41f20f  // bfdot v15.4s, v16.8h, v1.h[0]\n"
      "ldr q16, [x10, #0x50]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f60f228  // bfdot v8.4s, v17.8h, v0.h[1]\n"
      ".inst 0x4f61f22c  // bfdot v12.4s, v17.8h, v1.h[1]\n"
      "ldr q17, [x10, #0x60]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f60f209  // bfdot v9.4s, v16.8h, v0.h[1]\n"
      ".inst 0x4f61f20d  // bfdot v13.4s, v16.8h, v1.h[1]\n"
      "ldr q16, [x10, #0x70]\n"
      ".inst 0x4f60f22a  // bfdot v10.4s, v17.8h, v0.h[1]\n"
      ".inst 0x4f61f22e  // bfdot v14.4s, v17.8h, v1.h[1]\n"
      "ldr q17, [x10, #0x80]\n"
      ".inst 0x4f60f20b  // bfdot v11.4s, v16.8h, v0.h[1]\n"
      ".inst 0x4f61f20f  // bfdot v15.4s, v16.8h, v1.h[1]\n"
      "ldr q16, [x10, #0x90]\n"
      ".inst 0x4f40fa28  // bfdot v8.4s, v17.8h, v0.h[2]\n"
      ".inst 0x4f41fa2c  // bfdot v12.4s, v17.8h, v1.h[2]\n"
      "ldr q17, [x10, #0xa0]\n"
      ".inst 0x4f40fa09  // bfdot v9.4s, v16.8h, v0.h[2]\n"
      ".inst 0x4f41fa0d  // bfdot v13.4s, v16.8h, v1.h[2]\n"
      "ldr q16, [x10, #0xb0]\n"
      ".inst 0x4f40fa2a  // bfdot v10.4s, v17.8h, v0.h[2]\n"
      ".inst 0x4f41fa2e  // bfdot v14.4s, v17.8h, v1.h[2]\n"
      "ldr q17, [x10, #0xc0]\n"
      ".inst 0x4f40fa0b  // bfdot v11.4s, v16.8h, v0.h[2]\n"
      ".inst 0x4f41fa0f  // bfdot v15.4s, v16.8h, v1.h[2]\n"
      "ldr q16, [x10, #0xd0]\n"
      ".inst 0x4f60fa28  // bfdot v8.4s, v17.8h, v0.h[3]\n"
      ".inst 0x4f61fa2c  // bfdot v12.4s, v17.8h, v1.h[3]\n"
      "ldr q17, [x10, #0xe0]\n"
      ".inst 0x4f60fa09  // bfdot v9.4s, v16.8h, v0.h[3]\n"
      ".inst 0x4f61fa0d  // bfdot v13.4s, v16.8h, v1.h[3]\n"
      "ldr q16, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60fa2a  // bfdot v10.4s, v17.8h, v0.h[3]\n"
      ".inst 0x4f61fa2e  // bfdot v14.4s, v17.8h, v1.h[3]\n"
      ".inst 0x4f60fa0b  // bfdot v11.4s, v16.8h, v0.h[3]\n"
      ".inst 0x4f61fa0f  // bfdot v15.4s, v16.8h, v1.h[3]\n"
      "55:"  // Height 2: Multiply loop: Main loop skip
      "cbz x27, 59f\n"
      "cmp x27, #0x2\n"
      "blt 57f\n"
      "56:"  // Height 2: Multiply loop: Odd block loop
      "ldr s19, [x26], #0x4\n"
      "ldr s18, [x25], #0x4\n"
      "sub x27, x27, #0x2\n"
      "cmp x27, #0x2\n"
      "ldr q17, [x10, #0x0]\n"
      "ldr q16, [x10, #0x10]\n"
      ".inst 0x4f53f228  // bfdot v8.4s, v17.8h, v19.h[0]\n"
      ".inst 0x4f52f22c  // bfdot v12.4s, v17.8h, v18.h[0]\n"
      "ldr q17, [x10, #0x20]\n"
      ".inst 0x4f53f209  // bfdot v9.4s, v16.8h, v19.h[0]\n"
      ".inst 0x4f52f20d  // bfdot v13.4s, v16.8h, v18.h[0]\n"
      "ldr q16, [x10, #0x30]\n"
      ".inst 0x4f53f22a  // bfdot v10.4s, v17.8h, v19.h[0]\n"
      ".inst 0x4f52f22e  // bfdot v14.4s, v17.8h, v18.h[0]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f53f20b  // bfdot v11.4s, v16.8h, v19.h[0]\n"
      ".inst 0x4f52f20f  // bfdot v15.4s, v16.8h, v18.h[0]\n"
      "bge 56b\n"
      "57:"  // Height 2: Multiply loop: Skip odd blocks
      "cbz x27, 59f\n"
      "ldr h0, [x26, #0x0]\n"
      "ldr h1, [x25, #0x0]\n"
      "58:"  // Height 2: Multiply loop: Ragged operand read: Done
      "ldr q17, [x10, #0x0]\n"
      "ldr q16, [x10, #0x10]\n"
      ".inst 0x4f40f228  // bfdot v8.4s, v17.8h, v0.h[0]\n"
      ".inst 0x4f41f22c  // bfdot v12.4s, v17.8h, v1.h[0]\n"
      "ldr q17, [x10, #0x20]\n"
      ".inst 0x4f40f209  // bfdot v9.4s, v16.8h, v0.h[0]\n"
      ".inst 0x4f41f20d  // bfdot v13.4s, v16.8h, v1.h[0]\n"
      "ldr q16, [x10, #0x30]\n"
      ".inst 0x4f40f22a  // bfdot v10.4s, v17.8h, v0.h[0]\n"
      ".inst 0x4f41f22e  // bfdot v14.4s, v17.8h, v1.h[0]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f40f20b  // bfdot v11.4s, v16.8h, v0.h[0]\n"
      ".inst 0x4f41f20f  // bfdot v15.4s, v16.8h, v1.h[0]\n"
      "59:"  // Height 2: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 50b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "tbz %x[flags], #1, 60f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v17.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v16.4s }, [x20]\n"
      "fmin v8.4s, v8.4s, v17.4s\n"
      "fmin v9.4s, v9.4s, v17.4s\n"
      "fmin v10.4s, v10.4s, v17.4s\n"
      "fmin v11.4s, v11.4s, v17.4s\n"
      "fmin v12.4s, v12.4s, v17.4s\n"
      "fmin v13.4s, v13.4s, v17.4s\n"
      "fmin v14.4s, v14.4s, v17.4s\n"
      "fmin v15.4s, v15.4s, v17.4s\n"
      "fmax v8.4s, v8.4s, v16.4s\n"
      "fmax v9.4s, v9.4s, v16.4s\n"
      "fmax v10.4s, v10.4s, v16.4s\n"
      "fmax v11.4s, v11.4s, v16.4s\n"
      "fmax v12.4s, v12.4s, v16.4s\n"
      "fmax v13.4s, v13.4s, v16.4s\n"
      "fmax v14.4s, v14.4s, v16.4s\n"
      "fmax v15.4s, v15.4s, v16.4s\n"
      "60:"  // Height 2: No activation
      "cmp x11, #0x10\n"
      "bge 69f\n"
      "tbz x11, #3, 64f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v9.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v13.4s }, [x25], #0x10\n"
      "tbz x11, #2, 62f\n"
      "st1 { v10.4s }, [x9], #0x10\n"
      "st1 { v14.4s }, [x25], #0x10\n"
      "tbz x11, #1, 61f\n"
      "str d11, [x9], #0x8\n"
      "str d15, [x25], #0x8\n"
      "tbz x11, #0, 68f\n"
      "st1 { v11.s }[2], [x9]\n"
      "st1 { v15.s }[2], [x25]\n"
      "b 68f\n"
      "61:"  // Height 2: Partial direct writeback: partial_1_12
      "tbz x11, #0, 68f\n"
      "str s11, [x9, #0x0]\n"
      "str s15, [x25, #0x0]\n"
      "b 68f\n"
      "62:"  // Height 2: Partial direct writeback: partial_2_8
      "tbz x11, #1, 63f\n"
      "str d10, [x9], #0x8\n"
      "str d14, [x25], #0x8\n"
      "tbz x11, #0, 68f\n"
      "st1 { v10.s }[2], [x9]\n"
      "st1 { v14.s }[2], [x25]\n"
      "b 68f\n"
      "63:"  // Height 2: Partial direct writeback: partial_1_8
      "tbz x11, #0, 68f\n"
      "str s10, [x9, #0x0]\n"
      "str s14, [x25, #0x0]\n"
      "b 68f\n"
      "64:"  // Height 2: Partial direct writeback: partial_4_0
      "tbz x11, #2, 66f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "tbz x11, #1, 65f\n"
      "str d9, [x9], #0x8\n"
      "str d13, [x25], #0x8\n"
      "tbz x11, #0, 68f\n"
      "st1 { v9.s }[2], [x9]\n"
      "st1 { v13.s }[2], [x25]\n"
      "b 68f\n"
      "65:"  // Height 2: Partial direct writeback: partial_1_4
      "tbz x11, #0, 68f\n"
      "str s9, [x9, #0x0]\n"
      "str s13, [x25, #0x0]\n"
      "b 68f\n"
      "66:"  // Height 2: Partial direct writeback: partial_2_0
      "tbz x11, #1, 67f\n"
      "str d8, [x9], #0x8\n"
      "str d12, [x25], #0x8\n"
      "tbz x11, #0, 68f\n"
      "st1 { v8.s }[2], [x9]\n"
      "st1 { v12.s }[2], [x25]\n"
      "b 68f\n"
      "67:"  // Height 2: Partial direct writeback: partial_1_0
      "str s8, [x9, #0x0]\n"
      "str s12, [x25, #0x0]\n"
      "68:"  // Height 2: Partial direct writeback: Done
      "b 70f\n"
      "69:"  // Height 2: Full writeback
      "str q8, [x9, #0x0]\n"
      "str q9, [x9, #0x10]\n"
      "str q10, [x9, #0x20]\n"
      "str q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "str q12, [x25, #0x0]\n"
      "str q13, [x25, #0x10]\n"
      "str q14, [x25, #0x20]\n"
      "str q15, [x25, #0x30]\n"
      "70:"  // Height 2: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 37b\n"
      "b 212f\n"
      "71:"  // Height 3
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "72:"  // Height 3: Column loop
      "cbz x12, 73f\n"
      "ldr q8, [x12, #0x0]\n"
      "ldr q9, [x12, #0x10]\n"
      "mov v12.16b, v8.16b\n"
      "mov v13.16b, v9.16b\n"
      "ldr q10, [x12, #0x20]\n"
      "ldr q11, [x12, #0x30]\n"
      "mov v14.16b, v10.16b\n"
      "mov v15.16b, v11.16b\n"
      "mov v16.16b, v8.16b\n"
      "mov v17.16b, v9.16b\n"
      "add x12, x12, #0x40\n"
      "mov v18.16b, v10.16b\n"
      "mov v19.16b, v11.16b\n"
      "b 84f\n"
      "73:"  // Height 3: no bias
      "tbz %x[flags], #0, 83f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "cmp x11, #0x10\n"
      "add x24, x25, x20, LSL #2\n"
      "bge 82f\n"
      "tbz x11, #3, 77f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "ld1 { v9.4s }, [x9], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "tbz x11, #2, 75f\n"
      "ld1 { v10.4s }, [x9], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "tbz x11, #1, 74f\n"
      "ldr d11, [x9], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d19, [x24], #0x8\n"
      "tbz x11, #0, 81f\n"
      "ld1 { v11.s }[2], [x9]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "b 81f\n"
      "74:"  // Height 3: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x11, #0, 81f\n"
      "ldr s11, [x9, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "b 81f\n"
      "75:"  // Height 3: Partial accumulate: partial_2_8
      "tbz x11, #1, 76f\n"
      "ldr d10, [x9], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d18, [x24], #0x8\n"
      "tbz x11, #0, 81f\n"
      "ld1 { v10.s }[2], [x9]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "b 81f\n"
      "76:"  // Height 3: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x11, #0, 81f\n"
      "ldr s10, [x9, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "b 81f\n"
      "77:"  // Height 3: Partial accumulate: partial_4_0
      "tbz x11, #2, 79f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "tbz x11, #1, 78f\n"
      "ldr d9, [x9], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d17, [x24], #0x8\n"
      "tbz x11, #0, 81f\n"
      "ld1 { v9.s }[2], [x9]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "b 81f\n"
      "78:"  // Height 3: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x11, #0, 81f\n"
      "ldr s9, [x9, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s17, [x24, #0x0]\n"
      "b 81f\n"
      "79:"  // Height 3: Partial accumulate: partial_2_0
      "tbz x11, #1, 80f\n"
      "ldr d8, [x9], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d16, [x24], #0x8\n"
      "tbz x11, #0, 81f\n"
      "ld1 { v8.s }[2], [x9]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v16.s }[2], [x24]\n"
      "b 81f\n"
      "80:"  // Height 3: Partial accumulate: partial_1_0
      "ldr s8, [x9, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s16, [x24, #0x0]\n"
      "81:"  // Height 3: Partial accumulate: Done
      "sub x9, x9, x20\n"
      "b 84f\n"
      "82:"  // Height 3: full accumulate
      "ldr q8, [x9, #0x0]\n"
      "ldr q9, [x9, #0x10]\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q16, [x24, #0x0]\n"
      "ldr q17, [x24, #0x10]\n"
      "ldr q18, [x24, #0x20]\n"
      "ldr q19, [x24, #0x30]\n"
      "b 84f\n"
      "83:"  // Height 3: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "84:"  // Height 3: setup done
      "mov x28, #0x0\n"
      "85:"  // Height 3: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 86f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "cbnz x28, 87f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "b 87f\n"
      "86:"  // Height 3: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "87:"  // Height 3: input setup done
      "cmp x27, #0x8\n"
      "blt 90f\n"
      "ldr q0, [x26, #0x0]\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q2, [x24, #0x0]\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "blt 89f\n"
      "88:"  // Height 3: Multiply loop: Main loop head
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "sub x27, x27, #0x8\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      "ldr q21, [x10, #0x20]\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      "ldr q20, [x10, #0x30]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f40f2aa  // bfdot v10.4s, v21.8h, v0.h[0]\n"
      ".inst 0x4f41f2ae  // bfdot v14.4s, v21.8h, v1.h[0]\n"
      "cmp x27, #0x10\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f42f2b2  // bfdot v18.4s, v21.8h, v2.h[0]\n"
      "ldr q21, [x10, #0x40]\n"
      ".inst 0x4f40f28b  // bfdot v11.4s, v20.8h, v0.h[0]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f41f28f  // bfdot v15.4s, v20.8h, v1.h[0]\n"
      ".inst 0x4f42f293  // bfdot v19.4s, v20.8h, v2.h[0]\n"
      "ldr q20, [x10, #0x50]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f60f2a8  // bfdot v8.4s, v21.8h, v0.h[1]\n"
      ".inst 0x4f61f2ac  // bfdot v12.4s, v21.8h, v1.h[1]\n"
      ".inst 0x4f62f2b0  // bfdot v16.4s, v21.8h, v2.h[1]\n"
      "ldr q21, [x10, #0x60]\n"
      ".inst 0x4f60f289  // bfdot v9.4s, v20.8h, v0.h[1]\n"
      ".inst 0x4f61f28d  // bfdot v13.4s, v20.8h, v1.h[1]\n"
      ".inst 0x4f62f291  // bfdot v17.4s, v20.8h, v2.h[1]\n"
      "ldr q20, [x10, #0x70]\n"
      ".inst 0x4f60f2aa  // bfdot v10.4s, v21.8h, v0.h[1]\n"
      ".inst 0x4f61f2ae  // bfdot v14.4s, v21.8h, v1.h[1]\n"
      ".inst 0x4f62f2b2  // bfdot v18.4s, v21.8h, v2.h[1]\n"
      "ldr q21, [x10, #0x80]\n"
      ".inst 0x4f60f28b  // bfdot v11.4s, v20.8h, v0.h[1]\n"
      ".inst 0x4f61f28f  // bfdot v15.4s, v20.8h, v1.h[1]\n"
      ".inst 0x4f62f293  // bfdot v19.4s, v20.8h, v2.h[1]\n"
      "ldr q20, [x10, #0x90]\n"
      ".inst 0x4f40faa8  // bfdot v8.4s, v21.8h, v0.h[2]\n"
      ".inst 0x4f41faac  // bfdot v12.4s, v21.8h, v1.h[2]\n"
      ".inst 0x4f42fab0  // bfdot v16.4s, v21.8h, v2.h[2]\n"
      "ldr q21, [x10, #0xa0]\n"
      ".inst 0x4f40fa89  // bfdot v9.4s, v20.8h, v0.h[2]\n"
      ".inst 0x4f41fa8d  // bfdot v13.4s, v20.8h, v1.h[2]\n"
      ".inst 0x4f42fa91  // bfdot v17.4s, v20.8h, v2.h[2]\n"
      "ldr q20, [x10, #0xb0]\n"
      ".inst 0x4f40faaa  // bfdot v10.4s, v21.8h, v0.h[2]\n"
      ".inst 0x4f41faae  // bfdot v14.4s, v21.8h, v1.h[2]\n"
      ".inst 0x4f42fab2  // bfdot v18.4s, v21.8h, v2.h[2]\n"
      "ldr q21, [x10, #0xc0]\n"
      ".inst 0x4f40fa8b  // bfdot v11.4s, v20.8h, v0.h[2]\n"
      ".inst 0x4f41fa8f  // bfdot v15.4s, v20.8h, v1.h[2]\n"
      ".inst 0x4f42fa93  // bfdot v19.4s, v20.8h, v2.h[2]\n"
      "ldr q20, [x10, #0xd0]\n"
      ".inst 0x4f60faa8  // bfdot v8.4s, v21.8h, v0.h[3]\n"
      ".inst 0x4f61faac  // bfdot v12.4s, v21.8h, v1.h[3]\n"
      ".inst 0x4f62fab0  // bfdot v16.4s, v21.8h, v2.h[3]\n"
      "ldr q21, [x10, #0xe0]\n"
      ".inst 0x4f60fa89  // bfdot v9.4s, v20.8h, v0.h[3]\n"
      ".inst 0x4f61fa8d  // bfdot v13.4s, v20.8h, v1.h[3]\n"
      ".inst 0x4f62fa91  // bfdot v17.4s, v20.8h, v2.h[3]\n"
      "ldr q20, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60faaa  // bfdot v10.4s, v21.8h, v0.h[3]\n"
      ".inst 0x4f61faae  // bfdot v14.4s, v21.8h, v1.h[3]\n"
      ".inst 0x4f62fab2  // bfdot v18.4s, v21.8h, v2.h[3]\n"
      "ldr q6, [x10, #0x0]\n"
      ".inst 0x4f60fa8b  // bfdot v11.4s, v20.8h, v0.h[3]\n"
      "ldr q0, [x26, #0x0]\n"
      ".inst 0x4f61fa8f  // bfdot v15.4s, v20.8h, v1.h[3]\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x4f62fa93  // bfdot v19.4s, v20.8h, v2.h[3]\n"
      "ldr q2, [x24, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "bge 88b\n"
      "89:"  // Height 3: Multiply loop: Single iteration only
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "add x26, x26, #0x10\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      "ldr q21, [x10, #0x20]\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      "ldr q20, [x10, #0x30]\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x4f40f2aa  // bfdot v10.4s, v21.8h, v0.h[0]\n"
      ".inst 0x4f41f2ae  // bfdot v14.4s, v21.8h, v1.h[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f42f2b2  // bfdot v18.4s, v21.8h, v2.h[0]\n"
      "ldr q21, [x10, #0x40]\n"
      ".inst 0x4f40f28b  // bfdot v11.4s, v20.8h, v0.h[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f41f28f  // bfdot v15.4s, v20.8h, v1.h[0]\n"
      ".inst 0x4f42f293  // bfdot v19.4s, v20.8h, v2.h[0]\n"
      "ldr q20, [x10, #0x50]\n"
      ".inst 0x4f60f2a8  // bfdot v8.4s, v21.8h, v0.h[1]\n"
      ".inst 0x4f61f2ac  // bfdot v12.4s, v21.8h, v1.h[1]\n"
      ".inst 0x4f62f2b0  // bfdot v16.4s, v21.8h, v2.h[1]\n"
      "ldr q21, [x10, #0x60]\n"
      ".inst 0x4f60f289  // bfdot v9.4s, v20.8h, v0.h[1]\n"
      ".inst 0x4f61f28d  // bfdot v13.4s, v20.8h, v1.h[1]\n"
      ".inst 0x4f62f291  // bfdot v17.4s, v20.8h, v2.h[1]\n"
      "ldr q20, [x10, #0x70]\n"
      ".inst 0x4f60f2aa  // bfdot v10.4s, v21.8h, v0.h[1]\n"
      ".inst 0x4f61f2ae  // bfdot v14.4s, v21.8h, v1.h[1]\n"
      ".inst 0x4f62f2b2  // bfdot v18.4s, v21.8h, v2.h[1]\n"
      "ldr q21, [x10, #0x80]\n"
      ".inst 0x4f60f28b  // bfdot v11.4s, v20.8h, v0.h[1]\n"
      ".inst 0x4f61f28f  // bfdot v15.4s, v20.8h, v1.h[1]\n"
      ".inst 0x4f62f293  // bfdot v19.4s, v20.8h, v2.h[1]\n"
      "ldr q20, [x10, #0x90]\n"
      ".inst 0x4f40faa8  // bfdot v8.4s, v21.8h, v0.h[2]\n"
      ".inst 0x4f41faac  // bfdot v12.4s, v21.8h, v1.h[2]\n"
      ".inst 0x4f42fab0  // bfdot v16.4s, v21.8h, v2.h[2]\n"
      "ldr q21, [x10, #0xa0]\n"
      ".inst 0x4f40fa89  // bfdot v9.4s, v20.8h, v0.h[2]\n"
      ".inst 0x4f41fa8d  // bfdot v13.4s, v20.8h, v1.h[2]\n"
      ".inst 0x4f42fa91  // bfdot v17.4s, v20.8h, v2.h[2]\n"
      "ldr q20, [x10, #0xb0]\n"
      ".inst 0x4f40faaa  // bfdot v10.4s, v21.8h, v0.h[2]\n"
      ".inst 0x4f41faae  // bfdot v14.4s, v21.8h, v1.h[2]\n"
      ".inst 0x4f42fab2  // bfdot v18.4s, v21.8h, v2.h[2]\n"
      "ldr q21, [x10, #0xc0]\n"
      ".inst 0x4f40fa8b  // bfdot v11.4s, v20.8h, v0.h[2]\n"
      ".inst 0x4f41fa8f  // bfdot v15.4s, v20.8h, v1.h[2]\n"
      ".inst 0x4f42fa93  // bfdot v19.4s, v20.8h, v2.h[2]\n"
      "ldr q20, [x10, #0xd0]\n"
      ".inst 0x4f60faa8  // bfdot v8.4s, v21.8h, v0.h[3]\n"
      ".inst 0x4f61faac  // bfdot v12.4s, v21.8h, v1.h[3]\n"
      ".inst 0x4f62fab0  // bfdot v16.4s, v21.8h, v2.h[3]\n"
      "ldr q21, [x10, #0xe0]\n"
      ".inst 0x4f60fa89  // bfdot v9.4s, v20.8h, v0.h[3]\n"
      ".inst 0x4f61fa8d  // bfdot v13.4s, v20.8h, v1.h[3]\n"
      ".inst 0x4f62fa91  // bfdot v17.4s, v20.8h, v2.h[3]\n"
      "ldr q20, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60faaa  // bfdot v10.4s, v21.8h, v0.h[3]\n"
      ".inst 0x4f61faae  // bfdot v14.4s, v21.8h, v1.h[3]\n"
      ".inst 0x4f62fab2  // bfdot v18.4s, v21.8h, v2.h[3]\n"
      ".inst 0x4f60fa8b  // bfdot v11.4s, v20.8h, v0.h[3]\n"
      ".inst 0x4f61fa8f  // bfdot v15.4s, v20.8h, v1.h[3]\n"
      ".inst 0x4f62fa93  // bfdot v19.4s, v20.8h, v2.h[3]\n"
      "90:"  // Height 3: Multiply loop: Main loop skip
      "cbz x27, 94f\n"
      "cmp x27, #0x2\n"
      "blt 92f\n"
      "91:"  // Height 3: Multiply loop: Odd block loop
      "ldr s24, [x26], #0x4\n"
      "ldr s23, [x25], #0x4\n"
      "sub x27, x27, #0x2\n"
      "cmp x27, #0x2\n"
      "ldr s22, [x24], #0x4\n"
      "ldr q21, [x10, #0x0]\n"
      ".inst 0x4f58f2a8  // bfdot v8.4s, v21.8h, v24.h[0]\n"
      ".inst 0x4f57f2ac  // bfdot v12.4s, v21.8h, v23.h[0]\n"
      "ldr q20, [x10, #0x10]\n"
      ".inst 0x4f56f2b0  // bfdot v16.4s, v21.8h, v22.h[0]\n"
      "ldr q21, [x10, #0x20]\n"
      ".inst 0x4f58f289  // bfdot v9.4s, v20.8h, v24.h[0]\n"
      ".inst 0x4f57f28d  // bfdot v13.4s, v20.8h, v23.h[0]\n"
      ".inst 0x4f56f291  // bfdot v17.4s, v20.8h, v22.h[0]\n"
      "ldr q20, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f58f2aa  // bfdot v10.4s, v21.8h, v24.h[0]\n"
      ".inst 0x4f57f2ae  // bfdot v14.4s, v21.8h, v23.h[0]\n"
      ".inst 0x4f56f2b2  // bfdot v18.4s, v21.8h, v22.h[0]\n"
      ".inst 0x4f58f28b  // bfdot v11.4s, v20.8h, v24.h[0]\n"
      ".inst 0x4f57f28f  // bfdot v15.4s, v20.8h, v23.h[0]\n"
      ".inst 0x4f56f293  // bfdot v19.4s, v20.8h, v22.h[0]\n"
      "bge 91b\n"
      "92:"  // Height 3: Multiply loop: Skip odd blocks
      "cbz x27, 94f\n"
      "ldr h0, [x26, #0x0]\n"
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "93:"  // Height 3: Multiply loop: Ragged operand read: Done
      "ldr q21, [x10, #0x0]\n"
      "ldr q20, [x10, #0x10]\n"
      ".inst 0x4f40f2a8  // bfdot v8.4s, v21.8h, v0.h[0]\n"
      ".inst 0x4f41f2ac  // bfdot v12.4s, v21.8h, v1.h[0]\n"
      ".inst 0x4f42f2b0  // bfdot v16.4s, v21.8h, v2.h[0]\n"
      "ldr q21, [x10, #0x20]\n"
      ".inst 0x4f40f289  // bfdot v9.4s, v20.8h, v0.h[0]\n"
      ".inst 0x4f41f28d  // bfdot v13.4s, v20.8h, v1.h[0]\n"
      ".inst 0x4f42f291  // bfdot v17.4s, v20.8h, v2.h[0]\n"
      "ldr q20, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f40f2aa  // bfdot v10.4s, v21.8h, v0.h[0]\n"
      ".inst 0x4f41f2ae  // bfdot v14.4s, v21.8h, v1.h[0]\n"
      ".inst 0x4f42f2b2  // bfdot v18.4s, v21.8h, v2.h[0]\n"
      ".inst 0x4f40f28b  // bfdot v11.4s, v20.8h, v0.h[0]\n"
      ".inst 0x4f41f28f  // bfdot v15.4s, v20.8h, v1.h[0]\n"
      ".inst 0x4f42f293  // bfdot v19.4s, v20.8h, v2.h[0]\n"
      "94:"  // Height 3: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 85b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "tbz %x[flags], #1, 95f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v21.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v20.4s }, [x20]\n"
      "fmin v8.4s, v8.4s, v21.4s\n"
      "fmin v9.4s, v9.4s, v21.4s\n"
      "fmin v10.4s, v10.4s, v21.4s\n"
      "fmin v11.4s, v11.4s, v21.4s\n"
      "fmin v12.4s, v12.4s, v21.4s\n"
      "fmin v13.4s, v13.4s, v21.4s\n"
      "fmin v14.4s, v14.4s, v21.4s\n"
      "fmin v15.4s, v15.4s, v21.4s\n"
      "fmin v16.4s, v16.4s, v21.4s\n"
      "fmin v17.4s, v17.4s, v21.4s\n"
      "fmin v18.4s, v18.4s, v21.4s\n"
      "fmin v19.4s, v19.4s, v21.4s\n"
      "fmax v8.4s, v8.4s, v20.4s\n"
      "fmax v9.4s, v9.4s, v20.4s\n"
      "fmax v10.4s, v10.4s, v20.4s\n"
      "fmax v11.4s, v11.4s, v20.4s\n"
      "fmax v12.4s, v12.4s, v20.4s\n"
      "fmax v13.4s, v13.4s, v20.4s\n"
      "fmax v14.4s, v14.4s, v20.4s\n"
      "fmax v15.4s, v15.4s, v20.4s\n"
      "fmax v16.4s, v16.4s, v20.4s\n"
      "fmax v17.4s, v17.4s, v20.4s\n"
      "fmax v18.4s, v18.4s, v20.4s\n"
      "fmax v19.4s, v19.4s, v20.4s\n"
      "95:"  // Height 3: No activation
      "cmp x11, #0x10\n"
      "bge 104f\n"
      "tbz x11, #3, 99f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v9.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v13.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v17.4s }, [x24], #0x10\n"
      "tbz x11, #2, 97f\n"
      "st1 { v10.4s }, [x9], #0x10\n"
      "st1 { v14.4s }, [x25], #0x10\n"
      "st1 { v18.4s }, [x24], #0x10\n"
      "tbz x11, #1, 96f\n"
      "str d11, [x9], #0x8\n"
      "str d15, [x25], #0x8\n"
      "str d19, [x24], #0x8\n"
      "tbz x11, #0, 103f\n"
      "st1 { v11.s }[2], [x9]\n"
      "st1 { v15.s }[2], [x25]\n"
      "st1 { v19.s }[2], [x24]\n"
      "b 103f\n"
      "96:"  // Height 3: Partial direct writeback: partial_1_12
      "tbz x11, #0, 103f\n"
      "str s11, [x9, #0x0]\n"
      "str s15, [x25, #0x0]\n"
      "str s19, [x24, #0x0]\n"
      "b 103f\n"
      "97:"  // Height 3: Partial direct writeback: partial_2_8
      "tbz x11, #1, 98f\n"
      "str d10, [x9], #0x8\n"
      "str d14, [x25], #0x8\n"
      "str d18, [x24], #0x8\n"
      "tbz x11, #0, 103f\n"
      "st1 { v10.s }[2], [x9]\n"
      "st1 { v14.s }[2], [x25]\n"
      "st1 { v18.s }[2], [x24]\n"
      "b 103f\n"
      "98:"  // Height 3: Partial direct writeback: partial_1_8
      "tbz x11, #0, 103f\n"
      "str s10, [x9, #0x0]\n"
      "str s14, [x25, #0x0]\n"
      "str s18, [x24, #0x0]\n"
      "b 103f\n"
      "99:"  // Height 3: Partial direct writeback: partial_4_0
      "tbz x11, #2, 101f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "tbz x11, #1, 100f\n"
      "str d9, [x9], #0x8\n"
      "str d13, [x25], #0x8\n"
      "str d17, [x24], #0x8\n"
      "tbz x11, #0, 103f\n"
      "st1 { v9.s }[2], [x9]\n"
      "st1 { v13.s }[2], [x25]\n"
      "st1 { v17.s }[2], [x24]\n"
      "b 103f\n"
      "100:"  // Height 3: Partial direct writeback: partial_1_4
      "tbz x11, #0, 103f\n"
      "str s9, [x9, #0x0]\n"
      "str s13, [x25, #0x0]\n"
      "str s17, [x24, #0x0]\n"
      "b 103f\n"
      "101:"  // Height 3: Partial direct writeback: partial_2_0
      "tbz x11, #1, 102f\n"
      "str d8, [x9], #0x8\n"
      "str d12, [x25], #0x8\n"
      "str d16, [x24], #0x8\n"
      "tbz x11, #0, 103f\n"
      "st1 { v8.s }[2], [x9]\n"
      "st1 { v12.s }[2], [x25]\n"
      "st1 { v16.s }[2], [x24]\n"
      "b 103f\n"
      "102:"  // Height 3: Partial direct writeback: partial_1_0
      "str s8, [x9, #0x0]\n"
      "str s12, [x25, #0x0]\n"
      "str s16, [x24, #0x0]\n"
      "103:"  // Height 3: Partial direct writeback: Done
      "b 105f\n"
      "104:"  // Height 3: Full writeback
      "str q8, [x9, #0x0]\n"
      "str q9, [x9, #0x10]\n"
      "str q10, [x9, #0x20]\n"
      "str q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "str q12, [x25, #0x0]\n"
      "str q13, [x25, #0x10]\n"
      "str q14, [x25, #0x20]\n"
      "str q15, [x25, #0x30]\n"
      "str q16, [x24, #0x0]\n"
      "str q17, [x24, #0x10]\n"
      "str q18, [x24, #0x20]\n"
      "str q19, [x24, #0x30]\n"
      "105:"  // Height 3: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 72b\n"
      "b 212f\n"
      "106:"  // Height 4
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "107:"  // Height 4: Column loop
      "cbz x12, 108f\n"
      "ldr q8, [x12, #0x0]\n"
      "ldr q9, [x12, #0x10]\n"
      "mov v12.16b, v8.16b\n"
      "mov v13.16b, v9.16b\n"
      "ldr q10, [x12, #0x20]\n"
      "ldr q11, [x12, #0x30]\n"
      "mov v14.16b, v10.16b\n"
      "mov v15.16b, v11.16b\n"
      "mov v16.16b, v8.16b\n"
      "mov v17.16b, v9.16b\n"
      "add x12, x12, #0x40\n"
      "mov v18.16b, v10.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v20.16b, v8.16b\n"
      "mov v21.16b, v9.16b\n"
      "mov v22.16b, v10.16b\n"
      "mov v23.16b, v11.16b\n"
      "b 119f\n"
      "108:"  // Height 4: no bias
      "tbz %x[flags], #0, 118f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "cmp x11, #0x10\n"
      "add x23, x24, x20, LSL #2\n"
      "bge 117f\n"
      "tbz x11, #3, 112f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v9.4s }, [x9], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v21.4s }, [x23], #0x10\n"
      "tbz x11, #2, 110f\n"
      "ld1 { v10.4s }, [x9], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "ld1 { v22.4s }, [x23], #0x10\n"
      "tbz x11, #1, 109f\n"
      "ldr d11, [x9], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d19, [x24], #0x8\n"
      "ldr d23, [x23], #0x8\n"
      "tbz x11, #0, 116f\n"
      "ld1 { v11.s }[2], [x9]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "ld1 { v23.s }[2], [x23]\n"
      "b 116f\n"
      "109:"  // Height 4: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x11, #0, 116f\n"
      "ldr s11, [x9, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "ldr s23, [x23, #0x0]\n"
      "b 116f\n"
      "110:"  // Height 4: Partial accumulate: partial_2_8
      "tbz x11, #1, 111f\n"
      "ldr d10, [x9], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d18, [x24], #0x8\n"
      "ldr d22, [x23], #0x8\n"
      "tbz x11, #0, 116f\n"
      "ld1 { v10.s }[2], [x9]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "ld1 { v22.s }[2], [x23]\n"
      "b 116f\n"
      "111:"  // Height 4: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x11, #0, 116f\n"
      "ldr s10, [x9, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "ldr s22, [x23, #0x0]\n"
      "b 116f\n"
      "112:"  // Height 4: Partial accumulate: partial_4_0
      "tbz x11, #2, 114f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "tbz x11, #1, 113f\n"
      "ldr d9, [x9], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d17, [x24], #0x8\n"
      "ldr d21, [x23], #0x8\n"
      "tbz x11, #0, 116f\n"
      "ld1 { v9.s }[2], [x9]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "ld1 { v21.s }[2], [x23]\n"
      "b 116f\n"
      "113:"  // Height 4: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x11, #0, 116f\n"
      "ldr s9, [x9, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s17, [x24, #0x0]\n"
      "ldr s21, [x23, #0x0]\n"
      "b 116f\n"
      "114:"  // Height 4: Partial accumulate: partial_2_0
      "tbz x11, #1, 115f\n"
      "ldr d8, [x9], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d16, [x24], #0x8\n"
      "ldr d20, [x23], #0x8\n"
      "tbz x11, #0, 116f\n"
      "ld1 { v8.s }[2], [x9]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v16.s }[2], [x24]\n"
      "ld1 { v20.s }[2], [x23]\n"
      "b 116f\n"
      "115:"  // Height 4: Partial accumulate: partial_1_0
      "ldr s8, [x9, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s16, [x24, #0x0]\n"
      "ldr s20, [x23, #0x0]\n"
      "116:"  // Height 4: Partial accumulate: Done
      "sub x9, x9, x20\n"
      "b 119f\n"
      "117:"  // Height 4: full accumulate
      "ldr q8, [x9, #0x0]\n"
      "ldr q9, [x9, #0x10]\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q16, [x24, #0x0]\n"
      "ldr q17, [x24, #0x10]\n"
      "ldr q18, [x24, #0x20]\n"
      "ldr q19, [x24, #0x30]\n"
      "ldr q20, [x23, #0x0]\n"
      "ldr q21, [x23, #0x10]\n"
      "ldr q22, [x23, #0x20]\n"
      "ldr q23, [x23, #0x30]\n"
      "b 119f\n"
      "118:"  // Height 4: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "119:"  // Height 4: setup done
      "mov x28, #0x0\n"
      "120:"  // Height 4: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 121f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "cbnz x28, 122f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "b 122f\n"
      "121:"  // Height 4: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "122:"  // Height 4: input setup done
      "cmp x27, #0x8\n"
      "blt 125f\n"
      "ldr q0, [x26, #0x0]\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q2, [x24, #0x0]\n"
      "ldr q3, [x23, #0x0]\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "blt 124f\n"
      "123:"  // Height 4: Multiply loop: Main loop head
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "sub x27, x27, #0x8\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d4  // bfdot v20.4s, v6.8h, v3.h[0]\n"
      "ldr q25, [x10, #0x20]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      "add x24, x24, #0x10\n"
      "add x23, x23, #0x10\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f5  // bfdot v21.4s, v7.8h, v3.h[0]\n"
      "ldr q24, [x10, #0x30]\n"
      "cmp x27, #0x10\n"
      ".inst 0x4f40f32a  // bfdot v10.4s, v25.8h, v0.h[0]\n"
      ".inst 0x4f41f32e  // bfdot v14.4s, v25.8h, v1.h[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f42f332  // bfdot v18.4s, v25.8h, v2.h[0]\n"
      ".inst 0x4f43f336  // bfdot v22.4s, v25.8h, v3.h[0]\n"
      "ldr q25, [x10, #0x40]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f40f30b  // bfdot v11.4s, v24.8h, v0.h[0]\n"
      ".inst 0x4f41f30f  // bfdot v15.4s, v24.8h, v1.h[0]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x4f42f313  // bfdot v19.4s, v24.8h, v2.h[0]\n"
      ".inst 0x4f43f317  // bfdot v23.4s, v24.8h, v3.h[0]\n"
      "ldr q24, [x10, #0x50]\n"
      ".inst 0x4f60f328  // bfdot v8.4s, v25.8h, v0.h[1]\n"
      ".inst 0x4f61f32c  // bfdot v12.4s, v25.8h, v1.h[1]\n"
      ".inst 0x4f62f330  // bfdot v16.4s, v25.8h, v2.h[1]\n"
      ".inst 0x4f63f334  // bfdot v20.4s, v25.8h, v3.h[1]\n"
      "ldr q25, [x10, #0x60]\n"
      ".inst 0x4f60f309  // bfdot v9.4s, v24.8h, v0.h[1]\n"
      ".inst 0x4f61f30d  // bfdot v13.4s, v24.8h, v1.h[1]\n"
      ".inst 0x4f62f311  // bfdot v17.4s, v24.8h, v2.h[1]\n"
      ".inst 0x4f63f315  // bfdot v21.4s, v24.8h, v3.h[1]\n"
      "ldr q24, [x10, #0x70]\n"
      ".inst 0x4f60f32a  // bfdot v10.4s, v25.8h, v0.h[1]\n"
      ".inst 0x4f61f32e  // bfdot v14.4s, v25.8h, v1.h[1]\n"
      ".inst 0x4f62f332  // bfdot v18.4s, v25.8h, v2.h[1]\n"
      ".inst 0x4f63f336  // bfdot v22.4s, v25.8h, v3.h[1]\n"
      "ldr q25, [x10, #0x80]\n"
      ".inst 0x4f60f30b  // bfdot v11.4s, v24.8h, v0.h[1]\n"
      ".inst 0x4f61f30f  // bfdot v15.4s, v24.8h, v1.h[1]\n"
      ".inst 0x4f62f313  // bfdot v19.4s, v24.8h, v2.h[1]\n"
      ".inst 0x4f63f317  // bfdot v23.4s, v24.8h, v3.h[1]\n"
      "ldr q24, [x10, #0x90]\n"
      ".inst 0x4f40fb28  // bfdot v8.4s, v25.8h, v0.h[2]\n"
      ".inst 0x4f41fb2c  // bfdot v12.4s, v25.8h, v1.h[2]\n"
      ".inst 0x4f42fb30  // bfdot v16.4s, v25.8h, v2.h[2]\n"
      ".inst 0x4f43fb34  // bfdot v20.4s, v25.8h, v3.h[2]\n"
      "ldr q25, [x10, #0xa0]\n"
      ".inst 0x4f40fb09  // bfdot v9.4s, v24.8h, v0.h[2]\n"
      ".inst 0x4f41fb0d  // bfdot v13.4s, v24.8h, v1.h[2]\n"
      ".inst 0x4f42fb11  // bfdot v17.4s, v24.8h, v2.h[2]\n"
      ".inst 0x4f43fb15  // bfdot v21.4s, v24.8h, v3.h[2]\n"
      "ldr q24, [x10, #0xb0]\n"
      ".inst 0x4f40fb2a  // bfdot v10.4s, v25.8h, v0.h[2]\n"
      ".inst 0x4f41fb2e  // bfdot v14.4s, v25.8h, v1.h[2]\n"
      ".inst 0x4f42fb32  // bfdot v18.4s, v25.8h, v2.h[2]\n"
      ".inst 0x4f43fb36  // bfdot v22.4s, v25.8h, v3.h[2]\n"
      "ldr q25, [x10, #0xc0]\n"
      ".inst 0x4f40fb0b  // bfdot v11.4s, v24.8h, v0.h[2]\n"
      ".inst 0x4f41fb0f  // bfdot v15.4s, v24.8h, v1.h[2]\n"
      ".inst 0x4f42fb13  // bfdot v19.4s, v24.8h, v2.h[2]\n"
      ".inst 0x4f43fb17  // bfdot v23.4s, v24.8h, v3.h[2]\n"
      "ldr q24, [x10, #0xd0]\n"
      ".inst 0x4f60fb28  // bfdot v8.4s, v25.8h, v0.h[3]\n"
      ".inst 0x4f61fb2c  // bfdot v12.4s, v25.8h, v1.h[3]\n"
      ".inst 0x4f62fb30  // bfdot v16.4s, v25.8h, v2.h[3]\n"
      ".inst 0x4f63fb34  // bfdot v20.4s, v25.8h, v3.h[3]\n"
      "ldr q25, [x10, #0xe0]\n"
      ".inst 0x4f60fb09  // bfdot v9.4s, v24.8h, v0.h[3]\n"
      ".inst 0x4f61fb0d  // bfdot v13.4s, v24.8h, v1.h[3]\n"
      ".inst 0x4f62fb11  // bfdot v17.4s, v24.8h, v2.h[3]\n"
      ".inst 0x4f63fb15  // bfdot v21.4s, v24.8h, v3.h[3]\n"
      "ldr q24, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60fb2a  // bfdot v10.4s, v25.8h, v0.h[3]\n"
      ".inst 0x4f61fb2e  // bfdot v14.4s, v25.8h, v1.h[3]\n"
      ".inst 0x4f62fb32  // bfdot v18.4s, v25.8h, v2.h[3]\n"
      ".inst 0x4f63fb36  // bfdot v22.4s, v25.8h, v3.h[3]\n"
      "ldr q6, [x10, #0x0]\n"
      ".inst 0x4f60fb0b  // bfdot v11.4s, v24.8h, v0.h[3]\n"
      "ldr q0, [x26, #0x0]\n"
      ".inst 0x4f61fb0f  // bfdot v15.4s, v24.8h, v1.h[3]\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x4f62fb13  // bfdot v19.4s, v24.8h, v2.h[3]\n"
      "ldr q2, [x24, #0x0]\n"
      ".inst 0x4f63fb17  // bfdot v23.4s, v24.8h, v3.h[3]\n"
      "ldr q3, [x23, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "bge 123b\n"
      "124:"  // Height 4: Multiply loop: Single iteration only
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "add x26, x26, #0x10\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d4  // bfdot v20.4s, v6.8h, v3.h[0]\n"
      "ldr q25, [x10, #0x20]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      "add x23, x23, #0x10\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f5  // bfdot v21.4s, v7.8h, v3.h[0]\n"
      "ldr q24, [x10, #0x30]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f40f32a  // bfdot v10.4s, v25.8h, v0.h[0]\n"
      ".inst 0x4f41f32e  // bfdot v14.4s, v25.8h, v1.h[0]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f42f332  // bfdot v18.4s, v25.8h, v2.h[0]\n"
      ".inst 0x4f43f336  // bfdot v22.4s, v25.8h, v3.h[0]\n"
      "ldr q25, [x10, #0x40]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x4f40f30b  // bfdot v11.4s, v24.8h, v0.h[0]\n"
      ".inst 0x4f41f30f  // bfdot v15.4s, v24.8h, v1.h[0]\n"
      ".inst 0x4f42f313  // bfdot v19.4s, v24.8h, v2.h[0]\n"
      ".inst 0x4f43f317  // bfdot v23.4s, v24.8h, v3.h[0]\n"
      "ldr q24, [x10, #0x50]\n"
      ".inst 0x4f60f328  // bfdot v8.4s, v25.8h, v0.h[1]\n"
      ".inst 0x4f61f32c  // bfdot v12.4s, v25.8h, v1.h[1]\n"
      ".inst 0x4f62f330  // bfdot v16.4s, v25.8h, v2.h[1]\n"
      ".inst 0x4f63f334  // bfdot v20.4s, v25.8h, v3.h[1]\n"
      "ldr q25, [x10, #0x60]\n"
      ".inst 0x4f60f309  // bfdot v9.4s, v24.8h, v0.h[1]\n"
      ".inst 0x4f61f30d  // bfdot v13.4s, v24.8h, v1.h[1]\n"
      ".inst 0x4f62f311  // bfdot v17.4s, v24.8h, v2.h[1]\n"
      ".inst 0x4f63f315  // bfdot v21.4s, v24.8h, v3.h[1]\n"
      "ldr q24, [x10, #0x70]\n"
      ".inst 0x4f60f32a  // bfdot v10.4s, v25.8h, v0.h[1]\n"
      ".inst 0x4f61f32e  // bfdot v14.4s, v25.8h, v1.h[1]\n"
      ".inst 0x4f62f332  // bfdot v18.4s, v25.8h, v2.h[1]\n"
      ".inst 0x4f63f336  // bfdot v22.4s, v25.8h, v3.h[1]\n"
      "ldr q25, [x10, #0x80]\n"
      ".inst 0x4f60f30b  // bfdot v11.4s, v24.8h, v0.h[1]\n"
      ".inst 0x4f61f30f  // bfdot v15.4s, v24.8h, v1.h[1]\n"
      ".inst 0x4f62f313  // bfdot v19.4s, v24.8h, v2.h[1]\n"
      ".inst 0x4f63f317  // bfdot v23.4s, v24.8h, v3.h[1]\n"
      "ldr q24, [x10, #0x90]\n"
      ".inst 0x4f40fb28  // bfdot v8.4s, v25.8h, v0.h[2]\n"
      ".inst 0x4f41fb2c  // bfdot v12.4s, v25.8h, v1.h[2]\n"
      ".inst 0x4f42fb30  // bfdot v16.4s, v25.8h, v2.h[2]\n"
      ".inst 0x4f43fb34  // bfdot v20.4s, v25.8h, v3.h[2]\n"
      "ldr q25, [x10, #0xa0]\n"
      ".inst 0x4f40fb09  // bfdot v9.4s, v24.8h, v0.h[2]\n"
      ".inst 0x4f41fb0d  // bfdot v13.4s, v24.8h, v1.h[2]\n"
      ".inst 0x4f42fb11  // bfdot v17.4s, v24.8h, v2.h[2]\n"
      ".inst 0x4f43fb15  // bfdot v21.4s, v24.8h, v3.h[2]\n"
      "ldr q24, [x10, #0xb0]\n"
      ".inst 0x4f40fb2a  // bfdot v10.4s, v25.8h, v0.h[2]\n"
      ".inst 0x4f41fb2e  // bfdot v14.4s, v25.8h, v1.h[2]\n"
      ".inst 0x4f42fb32  // bfdot v18.4s, v25.8h, v2.h[2]\n"
      ".inst 0x4f43fb36  // bfdot v22.4s, v25.8h, v3.h[2]\n"
      "ldr q25, [x10, #0xc0]\n"
      ".inst 0x4f40fb0b  // bfdot v11.4s, v24.8h, v0.h[2]\n"
      ".inst 0x4f41fb0f  // bfdot v15.4s, v24.8h, v1.h[2]\n"
      ".inst 0x4f42fb13  // bfdot v19.4s, v24.8h, v2.h[2]\n"
      ".inst 0x4f43fb17  // bfdot v23.4s, v24.8h, v3.h[2]\n"
      "ldr q24, [x10, #0xd0]\n"
      ".inst 0x4f60fb28  // bfdot v8.4s, v25.8h, v0.h[3]\n"
      ".inst 0x4f61fb2c  // bfdot v12.4s, v25.8h, v1.h[3]\n"
      ".inst 0x4f62fb30  // bfdot v16.4s, v25.8h, v2.h[3]\n"
      ".inst 0x4f63fb34  // bfdot v20.4s, v25.8h, v3.h[3]\n"
      "ldr q25, [x10, #0xe0]\n"
      ".inst 0x4f60fb09  // bfdot v9.4s, v24.8h, v0.h[3]\n"
      ".inst 0x4f61fb0d  // bfdot v13.4s, v24.8h, v1.h[3]\n"
      ".inst 0x4f62fb11  // bfdot v17.4s, v24.8h, v2.h[3]\n"
      ".inst 0x4f63fb15  // bfdot v21.4s, v24.8h, v3.h[3]\n"
      "ldr q24, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60fb2a  // bfdot v10.4s, v25.8h, v0.h[3]\n"
      ".inst 0x4f61fb2e  // bfdot v14.4s, v25.8h, v1.h[3]\n"
      ".inst 0x4f62fb32  // bfdot v18.4s, v25.8h, v2.h[3]\n"
      ".inst 0x4f63fb36  // bfdot v22.4s, v25.8h, v3.h[3]\n"
      ".inst 0x4f60fb0b  // bfdot v11.4s, v24.8h, v0.h[3]\n"
      ".inst 0x4f61fb0f  // bfdot v15.4s, v24.8h, v1.h[3]\n"
      ".inst 0x4f62fb13  // bfdot v19.4s, v24.8h, v2.h[3]\n"
      ".inst 0x4f63fb17  // bfdot v23.4s, v24.8h, v3.h[3]\n"
      "125:"  // Height 4: Multiply loop: Main loop skip
      "cbz x27, 129f\n"
      "cmp x27, #0x2\n"
      "blt 127f\n"
      "126:"  // Height 4: Multiply loop: Odd block loop
      "ldr s29, [x26], #0x4\n"
      "ldr s28, [x25], #0x4\n"
      "sub x27, x27, #0x2\n"
      "cmp x27, #0x2\n"
      "ldr s27, [x24], #0x4\n"
      "ldr s26, [x23], #0x4\n"
      "ldr q25, [x10, #0x0]\n"
      "ldr q24, [x10, #0x10]\n"
      ".inst 0x4f5df328  // bfdot v8.4s, v25.8h, v29.h[0]\n"
      ".inst 0x4f5cf32c  // bfdot v12.4s, v25.8h, v28.h[0]\n"
      ".inst 0x4f5bf330  // bfdot v16.4s, v25.8h, v27.h[0]\n"
      ".inst 0x4f5af334  // bfdot v20.4s, v25.8h, v26.h[0]\n"
      "ldr q25, [x10, #0x20]\n"
      ".inst 0x4f5df309  // bfdot v9.4s, v24.8h, v29.h[0]\n"
      ".inst 0x4f5cf30d  // bfdot v13.4s, v24.8h, v28.h[0]\n"
      ".inst 0x4f5bf311  // bfdot v17.4s, v24.8h, v27.h[0]\n"
      ".inst 0x4f5af315  // bfdot v21.4s, v24.8h, v26.h[0]\n"
      "ldr q24, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f5df32a  // bfdot v10.4s, v25.8h, v29.h[0]\n"
      ".inst 0x4f5cf32e  // bfdot v14.4s, v25.8h, v28.h[0]\n"
      ".inst 0x4f5bf332  // bfdot v18.4s, v25.8h, v27.h[0]\n"
      ".inst 0x4f5af336  // bfdot v22.4s, v25.8h, v26.h[0]\n"
      ".inst 0x4f5df30b  // bfdot v11.4s, v24.8h, v29.h[0]\n"
      ".inst 0x4f5cf30f  // bfdot v15.4s, v24.8h, v28.h[0]\n"
      ".inst 0x4f5bf313  // bfdot v19.4s, v24.8h, v27.h[0]\n"
      ".inst 0x4f5af317  // bfdot v23.4s, v24.8h, v26.h[0]\n"
      "bge 126b\n"
      "127:"  // Height 4: Multiply loop: Skip odd blocks
      "cbz x27, 129f\n"
      "ldr h0, [x26, #0x0]\n"
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "ldr h3, [x23, #0x0]\n"
      "128:"  // Height 4: Multiply loop: Ragged operand read: Done
      "ldr q25, [x10, #0x0]\n"
      "ldr q24, [x10, #0x10]\n"
      ".inst 0x4f40f328  // bfdot v8.4s, v25.8h, v0.h[0]\n"
      ".inst 0x4f41f32c  // bfdot v12.4s, v25.8h, v1.h[0]\n"
      ".inst 0x4f42f330  // bfdot v16.4s, v25.8h, v2.h[0]\n"
      ".inst 0x4f43f334  // bfdot v20.4s, v25.8h, v3.h[0]\n"
      "ldr q25, [x10, #0x20]\n"
      ".inst 0x4f40f309  // bfdot v9.4s, v24.8h, v0.h[0]\n"
      ".inst 0x4f41f30d  // bfdot v13.4s, v24.8h, v1.h[0]\n"
      ".inst 0x4f42f311  // bfdot v17.4s, v24.8h, v2.h[0]\n"
      ".inst 0x4f43f315  // bfdot v21.4s, v24.8h, v3.h[0]\n"
      "ldr q24, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f40f32a  // bfdot v10.4s, v25.8h, v0.h[0]\n"
      ".inst 0x4f41f32e  // bfdot v14.4s, v25.8h, v1.h[0]\n"
      ".inst 0x4f42f332  // bfdot v18.4s, v25.8h, v2.h[0]\n"
      ".inst 0x4f43f336  // bfdot v22.4s, v25.8h, v3.h[0]\n"
      ".inst 0x4f40f30b  // bfdot v11.4s, v24.8h, v0.h[0]\n"
      ".inst 0x4f41f30f  // bfdot v15.4s, v24.8h, v1.h[0]\n"
      ".inst 0x4f42f313  // bfdot v19.4s, v24.8h, v2.h[0]\n"
      ".inst 0x4f43f317  // bfdot v23.4s, v24.8h, v3.h[0]\n"
      "129:"  // Height 4: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 120b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "add x23, x24, x20, LSL #2\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "tbz %x[flags], #1, 130f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v25.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v24.4s }, [x20]\n"
      "fmin v8.4s, v8.4s, v25.4s\n"
      "fmin v9.4s, v9.4s, v25.4s\n"
      "fmin v10.4s, v10.4s, v25.4s\n"
      "fmin v11.4s, v11.4s, v25.4s\n"
      "fmin v12.4s, v12.4s, v25.4s\n"
      "fmin v13.4s, v13.4s, v25.4s\n"
      "fmin v14.4s, v14.4s, v25.4s\n"
      "fmin v15.4s, v15.4s, v25.4s\n"
      "fmin v16.4s, v16.4s, v25.4s\n"
      "fmin v17.4s, v17.4s, v25.4s\n"
      "fmin v18.4s, v18.4s, v25.4s\n"
      "fmin v19.4s, v19.4s, v25.4s\n"
      "fmin v20.4s, v20.4s, v25.4s\n"
      "fmin v21.4s, v21.4s, v25.4s\n"
      "fmin v22.4s, v22.4s, v25.4s\n"
      "fmin v23.4s, v23.4s, v25.4s\n"
      "fmax v8.4s, v8.4s, v24.4s\n"
      "fmax v9.4s, v9.4s, v24.4s\n"
      "fmax v10.4s, v10.4s, v24.4s\n"
      "fmax v11.4s, v11.4s, v24.4s\n"
      "fmax v12.4s, v12.4s, v24.4s\n"
      "fmax v13.4s, v13.4s, v24.4s\n"
      "fmax v14.4s, v14.4s, v24.4s\n"
      "fmax v15.4s, v15.4s, v24.4s\n"
      "fmax v16.4s, v16.4s, v24.4s\n"
      "fmax v17.4s, v17.4s, v24.4s\n"
      "fmax v18.4s, v18.4s, v24.4s\n"
      "fmax v19.4s, v19.4s, v24.4s\n"
      "fmax v20.4s, v20.4s, v24.4s\n"
      "fmax v21.4s, v21.4s, v24.4s\n"
      "fmax v22.4s, v22.4s, v24.4s\n"
      "fmax v23.4s, v23.4s, v24.4s\n"
      "130:"  // Height 4: No activation
      "cmp x11, #0x10\n"
      "bge 139f\n"
      "tbz x11, #3, 134f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v9.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v13.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v17.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v21.4s }, [x23], #0x10\n"
      "tbz x11, #2, 132f\n"
      "st1 { v10.4s }, [x9], #0x10\n"
      "st1 { v14.4s }, [x25], #0x10\n"
      "st1 { v18.4s }, [x24], #0x10\n"
      "st1 { v22.4s }, [x23], #0x10\n"
      "tbz x11, #1, 131f\n"
      "str d11, [x9], #0x8\n"
      "str d15, [x25], #0x8\n"
      "str d19, [x24], #0x8\n"
      "str d23, [x23], #0x8\n"
      "tbz x11, #0, 138f\n"
      "st1 { v11.s }[2], [x9]\n"
      "st1 { v15.s }[2], [x25]\n"
      "st1 { v19.s }[2], [x24]\n"
      "st1 { v23.s }[2], [x23]\n"
      "b 138f\n"
      "131:"  // Height 4: Partial direct writeback: partial_1_12
      "tbz x11, #0, 138f\n"
      "str s11, [x9, #0x0]\n"
      "str s15, [x25, #0x0]\n"
      "str s19, [x24, #0x0]\n"
      "str s23, [x23, #0x0]\n"
      "b 138f\n"
      "132:"  // Height 4: Partial direct writeback: partial_2_8
      "tbz x11, #1, 133f\n"
      "str d10, [x9], #0x8\n"
      "str d14, [x25], #0x8\n"
      "str d18, [x24], #0x8\n"
      "str d22, [x23], #0x8\n"
      "tbz x11, #0, 138f\n"
      "st1 { v10.s }[2], [x9]\n"
      "st1 { v14.s }[2], [x25]\n"
      "st1 { v18.s }[2], [x24]\n"
      "st1 { v22.s }[2], [x23]\n"
      "b 138f\n"
      "133:"  // Height 4: Partial direct writeback: partial_1_8
      "tbz x11, #0, 138f\n"
      "str s10, [x9, #0x0]\n"
      "str s14, [x25, #0x0]\n"
      "str s18, [x24, #0x0]\n"
      "str s22, [x23, #0x0]\n"
      "b 138f\n"
      "134:"  // Height 4: Partial direct writeback: partial_4_0
      "tbz x11, #2, 136f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "tbz x11, #1, 135f\n"
      "str d9, [x9], #0x8\n"
      "str d13, [x25], #0x8\n"
      "str d17, [x24], #0x8\n"
      "str d21, [x23], #0x8\n"
      "tbz x11, #0, 138f\n"
      "st1 { v9.s }[2], [x9]\n"
      "st1 { v13.s }[2], [x25]\n"
      "st1 { v17.s }[2], [x24]\n"
      "st1 { v21.s }[2], [x23]\n"
      "b 138f\n"
      "135:"  // Height 4: Partial direct writeback: partial_1_4
      "tbz x11, #0, 138f\n"
      "str s9, [x9, #0x0]\n"
      "str s13, [x25, #0x0]\n"
      "str s17, [x24, #0x0]\n"
      "str s21, [x23, #0x0]\n"
      "b 138f\n"
      "136:"  // Height 4: Partial direct writeback: partial_2_0
      "tbz x11, #1, 137f\n"
      "str d8, [x9], #0x8\n"
      "str d12, [x25], #0x8\n"
      "str d16, [x24], #0x8\n"
      "str d20, [x23], #0x8\n"
      "tbz x11, #0, 138f\n"
      "st1 { v8.s }[2], [x9]\n"
      "st1 { v12.s }[2], [x25]\n"
      "st1 { v16.s }[2], [x24]\n"
      "st1 { v20.s }[2], [x23]\n"
      "b 138f\n"
      "137:"  // Height 4: Partial direct writeback: partial_1_0
      "str s8, [x9, #0x0]\n"
      "str s12, [x25, #0x0]\n"
      "str s16, [x24, #0x0]\n"
      "str s20, [x23, #0x0]\n"
      "138:"  // Height 4: Partial direct writeback: Done
      "b 140f\n"
      "139:"  // Height 4: Full writeback
      "str q8, [x9, #0x0]\n"
      "str q9, [x9, #0x10]\n"
      "str q10, [x9, #0x20]\n"
      "str q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "str q12, [x25, #0x0]\n"
      "str q13, [x25, #0x10]\n"
      "str q14, [x25, #0x20]\n"
      "str q15, [x25, #0x30]\n"
      "str q16, [x24, #0x0]\n"
      "str q17, [x24, #0x10]\n"
      "str q18, [x24, #0x20]\n"
      "str q19, [x24, #0x30]\n"
      "str q20, [x23, #0x0]\n"
      "str q21, [x23, #0x10]\n"
      "str q22, [x23, #0x20]\n"
      "str q23, [x23, #0x30]\n"
      "140:"  // Height 4: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 107b\n"
      "b 212f\n"
      "141:"  // Height 5
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "142:"  // Height 5: Column loop
      "cbz x12, 143f\n"
      "ldr q8, [x12, #0x0]\n"
      "ldr q9, [x12, #0x10]\n"
      "mov v12.16b, v8.16b\n"
      "mov v13.16b, v9.16b\n"
      "ldr q10, [x12, #0x20]\n"
      "ldr q11, [x12, #0x30]\n"
      "mov v14.16b, v10.16b\n"
      "mov v15.16b, v11.16b\n"
      "mov v16.16b, v8.16b\n"
      "mov v17.16b, v9.16b\n"
      "add x12, x12, #0x40\n"
      "mov v18.16b, v10.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v20.16b, v8.16b\n"
      "mov v21.16b, v9.16b\n"
      "mov v22.16b, v10.16b\n"
      "mov v23.16b, v11.16b\n"
      "mov v24.16b, v8.16b\n"
      "mov v25.16b, v9.16b\n"
      "mov v26.16b, v10.16b\n"
      "mov v27.16b, v11.16b\n"
      "b 154f\n"
      "143:"  // Height 5: no bias
      "tbz %x[flags], #0, 153f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "cmp x11, #0x10\n"
      "add x22, x23, x20, LSL #2\n"
      "bge 152f\n"
      "tbz x11, #3, 147f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v24.4s }, [x22], #0x10\n"
      "ld1 { v9.4s }, [x9], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v21.4s }, [x23], #0x10\n"
      "ld1 { v25.4s }, [x22], #0x10\n"
      "tbz x11, #2, 145f\n"
      "ld1 { v10.4s }, [x9], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "ld1 { v22.4s }, [x23], #0x10\n"
      "ld1 { v26.4s }, [x22], #0x10\n"
      "tbz x11, #1, 144f\n"
      "ldr d11, [x9], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d19, [x24], #0x8\n"
      "ldr d23, [x23], #0x8\n"
      "ldr d27, [x22], #0x8\n"
      "tbz x11, #0, 151f\n"
      "ld1 { v11.s }[2], [x9]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "ld1 { v23.s }[2], [x23]\n"
      "ld1 { v27.s }[2], [x22]\n"
      "b 151f\n"
      "144:"  // Height 5: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x11, #0, 151f\n"
      "ldr s11, [x9, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "ldr s23, [x23, #0x0]\n"
      "ldr s27, [x22, #0x0]\n"
      "b 151f\n"
      "145:"  // Height 5: Partial accumulate: partial_2_8
      "tbz x11, #1, 146f\n"
      "ldr d10, [x9], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d18, [x24], #0x8\n"
      "ldr d22, [x23], #0x8\n"
      "ldr d26, [x22], #0x8\n"
      "tbz x11, #0, 151f\n"
      "ld1 { v10.s }[2], [x9]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "ld1 { v22.s }[2], [x23]\n"
      "ld1 { v26.s }[2], [x22]\n"
      "b 151f\n"
      "146:"  // Height 5: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x11, #0, 151f\n"
      "ldr s10, [x9, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "ldr s22, [x23, #0x0]\n"
      "ldr s26, [x22, #0x0]\n"
      "b 151f\n"
      "147:"  // Height 5: Partial accumulate: partial_4_0
      "tbz x11, #2, 149f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v24.4s }, [x22], #0x10\n"
      "tbz x11, #1, 148f\n"
      "ldr d9, [x9], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d17, [x24], #0x8\n"
      "ldr d21, [x23], #0x8\n"
      "ldr d25, [x22], #0x8\n"
      "tbz x11, #0, 151f\n"
      "ld1 { v9.s }[2], [x9]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "ld1 { v21.s }[2], [x23]\n"
      "ld1 { v25.s }[2], [x22]\n"
      "b 151f\n"
      "148:"  // Height 5: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x11, #0, 151f\n"
      "ldr s9, [x9, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s17, [x24, #0x0]\n"
      "ldr s21, [x23, #0x0]\n"
      "ldr s25, [x22, #0x0]\n"
      "b 151f\n"
      "149:"  // Height 5: Partial accumulate: partial_2_0
      "tbz x11, #1, 150f\n"
      "ldr d8, [x9], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d16, [x24], #0x8\n"
      "ldr d20, [x23], #0x8\n"
      "ldr d24, [x22], #0x8\n"
      "tbz x11, #0, 151f\n"
      "ld1 { v8.s }[2], [x9]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v16.s }[2], [x24]\n"
      "ld1 { v20.s }[2], [x23]\n"
      "ld1 { v24.s }[2], [x22]\n"
      "b 151f\n"
      "150:"  // Height 5: Partial accumulate: partial_1_0
      "ldr s8, [x9, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s16, [x24, #0x0]\n"
      "ldr s20, [x23, #0x0]\n"
      "ldr s24, [x22, #0x0]\n"
      "151:"  // Height 5: Partial accumulate: Done
      "sub x9, x9, x20\n"
      "b 154f\n"
      "152:"  // Height 5: full accumulate
      "ldr q8, [x9, #0x0]\n"
      "ldr q9, [x9, #0x10]\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q16, [x24, #0x0]\n"
      "ldr q17, [x24, #0x10]\n"
      "ldr q18, [x24, #0x20]\n"
      "ldr q19, [x24, #0x30]\n"
      "ldr q20, [x23, #0x0]\n"
      "ldr q21, [x23, #0x10]\n"
      "ldr q22, [x23, #0x20]\n"
      "ldr q23, [x23, #0x30]\n"
      "ldr q24, [x22, #0x0]\n"
      "ldr q25, [x22, #0x10]\n"
      "ldr q26, [x22, #0x20]\n"
      "ldr q27, [x22, #0x30]\n"
      "b 154f\n"
      "153:"  // Height 5: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "movi v24.16b, #0x0\n"
      "movi v25.16b, #0x0\n"
      "movi v26.16b, #0x0\n"
      "movi v27.16b, #0x0\n"
      "154:"  // Height 5: setup done
      "mov x28, #0x0\n"
      "155:"  // Height 5: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 156f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "cbnz x28, 157f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "add x22, x22, x20, LSL #1\n"
      "b 157f\n"
      "156:"  // Height 5: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "add x22, x23, x21, LSL #1\n"
      "157:"  // Height 5: input setup done
      "cmp x27, #0x8\n"
      "blt 160f\n"
      "ldr q0, [x26, #0x0]\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q2, [x24, #0x0]\n"
      "ldr q3, [x23, #0x0]\n"
      "ldr q4, [x22, #0x0]\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "blt 159f\n"
      "158:"  // Height 5: Multiply loop: Main loop head
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "sub x27, x27, #0x8\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d4  // bfdot v20.4s, v6.8h, v3.h[0]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f44f0d8  // bfdot v24.4s, v6.8h, v4.h[0]\n"
      "ldr q29, [x10, #0x20]\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      "add x23, x23, #0x10\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      "add x22, x22, #0x10\n"
      "cmp x27, #0x10\n"
      ".inst 0x4f43f0f5  // bfdot v21.4s, v7.8h, v3.h[0]\n"
      ".inst 0x4f44f0f9  // bfdot v25.4s, v7.8h, v4.h[0]\n"
      "ldr q28, [x10, #0x30]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f40f3aa  // bfdot v10.4s, v29.8h, v0.h[0]\n"
      ".inst 0x4f41f3ae  // bfdot v14.4s, v29.8h, v1.h[0]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f42f3b2  // bfdot v18.4s, v29.8h, v2.h[0]\n"
      ".inst 0x4f43f3b6  // bfdot v22.4s, v29.8h, v3.h[0]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x4f44f3ba  // bfdot v26.4s, v29.8h, v4.h[0]\n"
      "ldr q29, [x10, #0x40]\n"
      ".inst 0x4f40f38b  // bfdot v11.4s, v28.8h, v0.h[0]\n"
      ".inst 0x4f41f38f  // bfdot v15.4s, v28.8h, v1.h[0]\n"
      ".inst 0x4f42f393  // bfdot v19.4s, v28.8h, v2.h[0]\n"
      ".inst 0x4f43f397  // bfdot v23.4s, v28.8h, v3.h[0]\n"
      ".inst 0x4f44f39b  // bfdot v27.4s, v28.8h, v4.h[0]\n"
      "ldr q28, [x10, #0x50]\n"
      ".inst 0x4f60f3a8  // bfdot v8.4s, v29.8h, v0.h[1]\n"
      ".inst 0x4f61f3ac  // bfdot v12.4s, v29.8h, v1.h[1]\n"
      ".inst 0x4f62f3b0  // bfdot v16.4s, v29.8h, v2.h[1]\n"
      ".inst 0x4f63f3b4  // bfdot v20.4s, v29.8h, v3.h[1]\n"
      ".inst 0x4f64f3b8  // bfdot v24.4s, v29.8h, v4.h[1]\n"
      "ldr q29, [x10, #0x60]\n"
      ".inst 0x4f60f389  // bfdot v9.4s, v28.8h, v0.h[1]\n"
      ".inst 0x4f61f38d  // bfdot v13.4s, v28.8h, v1.h[1]\n"
      ".inst 0x4f62f391  // bfdot v17.4s, v28.8h, v2.h[1]\n"
      ".inst 0x4f63f395  // bfdot v21.4s, v28.8h, v3.h[1]\n"
      ".inst 0x4f64f399  // bfdot v25.4s, v28.8h, v4.h[1]\n"
      "ldr q28, [x10, #0x70]\n"
      ".inst 0x4f60f3aa  // bfdot v10.4s, v29.8h, v0.h[1]\n"
      ".inst 0x4f61f3ae  // bfdot v14.4s, v29.8h, v1.h[1]\n"
      ".inst 0x4f62f3b2  // bfdot v18.4s, v29.8h, v2.h[1]\n"
      ".inst 0x4f63f3b6  // bfdot v22.4s, v29.8h, v3.h[1]\n"
      ".inst 0x4f64f3ba  // bfdot v26.4s, v29.8h, v4.h[1]\n"
      "ldr q29, [x10, #0x80]\n"
      ".inst 0x4f60f38b  // bfdot v11.4s, v28.8h, v0.h[1]\n"
      ".inst 0x4f61f38f  // bfdot v15.4s, v28.8h, v1.h[1]\n"
      ".inst 0x4f62f393  // bfdot v19.4s, v28.8h, v2.h[1]\n"
      ".inst 0x4f63f397  // bfdot v23.4s, v28.8h, v3.h[1]\n"
      ".inst 0x4f64f39b  // bfdot v27.4s, v28.8h, v4.h[1]\n"
      "ldr q28, [x10, #0x90]\n"
      ".inst 0x4f40fba8  // bfdot v8.4s, v29.8h, v0.h[2]\n"
      ".inst 0x4f41fbac  // bfdot v12.4s, v29.8h, v1.h[2]\n"
      ".inst 0x4f42fbb0  // bfdot v16.4s, v29.8h, v2.h[2]\n"
      ".inst 0x4f43fbb4  // bfdot v20.4s, v29.8h, v3.h[2]\n"
      ".inst 0x4f44fbb8  // bfdot v24.4s, v29.8h, v4.h[2]\n"
      "ldr q29, [x10, #0xa0]\n"
      ".inst 0x4f40fb89  // bfdot v9.4s, v28.8h, v0.h[2]\n"
      ".inst 0x4f41fb8d  // bfdot v13.4s, v28.8h, v1.h[2]\n"
      ".inst 0x4f42fb91  // bfdot v17.4s, v28.8h, v2.h[2]\n"
      ".inst 0x4f43fb95  // bfdot v21.4s, v28.8h, v3.h[2]\n"
      ".inst 0x4f44fb99  // bfdot v25.4s, v28.8h, v4.h[2]\n"
      "ldr q28, [x10, #0xb0]\n"
      ".inst 0x4f40fbaa  // bfdot v10.4s, v29.8h, v0.h[2]\n"
      ".inst 0x4f41fbae  // bfdot v14.4s, v29.8h, v1.h[2]\n"
      ".inst 0x4f42fbb2  // bfdot v18.4s, v29.8h, v2.h[2]\n"
      ".inst 0x4f43fbb6  // bfdot v22.4s, v29.8h, v3.h[2]\n"
      ".inst 0x4f44fbba  // bfdot v26.4s, v29.8h, v4.h[2]\n"
      "ldr q29, [x10, #0xc0]\n"
      ".inst 0x4f40fb8b  // bfdot v11.4s, v28.8h, v0.h[2]\n"
      ".inst 0x4f41fb8f  // bfdot v15.4s, v28.8h, v1.h[2]\n"
      ".inst 0x4f42fb93  // bfdot v19.4s, v28.8h, v2.h[2]\n"
      ".inst 0x4f43fb97  // bfdot v23.4s, v28.8h, v3.h[2]\n"
      ".inst 0x4f44fb9b  // bfdot v27.4s, v28.8h, v4.h[2]\n"
      "ldr q28, [x10, #0xd0]\n"
      ".inst 0x4f60fba8  // bfdot v8.4s, v29.8h, v0.h[3]\n"
      ".inst 0x4f61fbac  // bfdot v12.4s, v29.8h, v1.h[3]\n"
      ".inst 0x4f62fbb0  // bfdot v16.4s, v29.8h, v2.h[3]\n"
      ".inst 0x4f63fbb4  // bfdot v20.4s, v29.8h, v3.h[3]\n"
      ".inst 0x4f64fbb8  // bfdot v24.4s, v29.8h, v4.h[3]\n"
      "ldr q29, [x10, #0xe0]\n"
      ".inst 0x4f60fb89  // bfdot v9.4s, v28.8h, v0.h[3]\n"
      ".inst 0x4f61fb8d  // bfdot v13.4s, v28.8h, v1.h[3]\n"
      ".inst 0x4f62fb91  // bfdot v17.4s, v28.8h, v2.h[3]\n"
      ".inst 0x4f63fb95  // bfdot v21.4s, v28.8h, v3.h[3]\n"
      ".inst 0x4f64fb99  // bfdot v25.4s, v28.8h, v4.h[3]\n"
      "ldr q28, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60fbaa  // bfdot v10.4s, v29.8h, v0.h[3]\n"
      ".inst 0x4f61fbae  // bfdot v14.4s, v29.8h, v1.h[3]\n"
      ".inst 0x4f62fbb2  // bfdot v18.4s, v29.8h, v2.h[3]\n"
      ".inst 0x4f63fbb6  // bfdot v22.4s, v29.8h, v3.h[3]\n"
      ".inst 0x4f64fbba  // bfdot v26.4s, v29.8h, v4.h[3]\n"
      "ldr q6, [x10, #0x0]\n"
      ".inst 0x4f60fb8b  // bfdot v11.4s, v28.8h, v0.h[3]\n"
      "ldr q0, [x26, #0x0]\n"
      ".inst 0x4f61fb8f  // bfdot v15.4s, v28.8h, v1.h[3]\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x4f62fb93  // bfdot v19.4s, v28.8h, v2.h[3]\n"
      "ldr q2, [x24, #0x0]\n"
      ".inst 0x4f63fb97  // bfdot v23.4s, v28.8h, v3.h[3]\n"
      "ldr q3, [x23, #0x0]\n"
      ".inst 0x4f64fb9b  // bfdot v27.4s, v28.8h, v4.h[3]\n"
      "ldr q4, [x22, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "bge 158b\n"
      "159:"  // Height 5: Multiply loop: Single iteration only
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "add x26, x26, #0x10\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d4  // bfdot v20.4s, v6.8h, v3.h[0]\n"
      "add x24, x24, #0x10\n"
      "add x23, x23, #0x10\n"
      ".inst 0x4f44f0d8  // bfdot v24.4s, v6.8h, v4.h[0]\n"
      "ldr q29, [x10, #0x20]\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      "add x22, x22, #0x10\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      "sub x27, x27, #0x8\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f43f0f5  // bfdot v21.4s, v7.8h, v3.h[0]\n"
      ".inst 0x4f44f0f9  // bfdot v25.4s, v7.8h, v4.h[0]\n"
      "ldr q28, [x10, #0x30]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f40f3aa  // bfdot v10.4s, v29.8h, v0.h[0]\n"
      ".inst 0x4f41f3ae  // bfdot v14.4s, v29.8h, v1.h[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x4f42f3b2  // bfdot v18.4s, v29.8h, v2.h[0]\n"
      ".inst 0x4f43f3b6  // bfdot v22.4s, v29.8h, v3.h[0]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x4f44f3ba  // bfdot v26.4s, v29.8h, v4.h[0]\n"
      "ldr q29, [x10, #0x40]\n"
      ".inst 0x4f40f38b  // bfdot v11.4s, v28.8h, v0.h[0]\n"
      ".inst 0x4f41f38f  // bfdot v15.4s, v28.8h, v1.h[0]\n"
      ".inst 0x4f42f393  // bfdot v19.4s, v28.8h, v2.h[0]\n"
      ".inst 0x4f43f397  // bfdot v23.4s, v28.8h, v3.h[0]\n"
      ".inst 0x4f44f39b  // bfdot v27.4s, v28.8h, v4.h[0]\n"
      "ldr q28, [x10, #0x50]\n"
      ".inst 0x4f60f3a8  // bfdot v8.4s, v29.8h, v0.h[1]\n"
      ".inst 0x4f61f3ac  // bfdot v12.4s, v29.8h, v1.h[1]\n"
      ".inst 0x4f62f3b0  // bfdot v16.4s, v29.8h, v2.h[1]\n"
      ".inst 0x4f63f3b4  // bfdot v20.4s, v29.8h, v3.h[1]\n"
      ".inst 0x4f64f3b8  // bfdot v24.4s, v29.8h, v4.h[1]\n"
      "ldr q29, [x10, #0x60]\n"
      ".inst 0x4f60f389  // bfdot v9.4s, v28.8h, v0.h[1]\n"
      ".inst 0x4f61f38d  // bfdot v13.4s, v28.8h, v1.h[1]\n"
      ".inst 0x4f62f391  // bfdot v17.4s, v28.8h, v2.h[1]\n"
      ".inst 0x4f63f395  // bfdot v21.4s, v28.8h, v3.h[1]\n"
      ".inst 0x4f64f399  // bfdot v25.4s, v28.8h, v4.h[1]\n"
      "ldr q28, [x10, #0x70]\n"
      ".inst 0x4f60f3aa  // bfdot v10.4s, v29.8h, v0.h[1]\n"
      ".inst 0x4f61f3ae  // bfdot v14.4s, v29.8h, v1.h[1]\n"
      ".inst 0x4f62f3b2  // bfdot v18.4s, v29.8h, v2.h[1]\n"
      ".inst 0x4f63f3b6  // bfdot v22.4s, v29.8h, v3.h[1]\n"
      ".inst 0x4f64f3ba  // bfdot v26.4s, v29.8h, v4.h[1]\n"
      "ldr q29, [x10, #0x80]\n"
      ".inst 0x4f60f38b  // bfdot v11.4s, v28.8h, v0.h[1]\n"
      ".inst 0x4f61f38f  // bfdot v15.4s, v28.8h, v1.h[1]\n"
      ".inst 0x4f62f393  // bfdot v19.4s, v28.8h, v2.h[1]\n"
      ".inst 0x4f63f397  // bfdot v23.4s, v28.8h, v3.h[1]\n"
      ".inst 0x4f64f39b  // bfdot v27.4s, v28.8h, v4.h[1]\n"
      "ldr q28, [x10, #0x90]\n"
      ".inst 0x4f40fba8  // bfdot v8.4s, v29.8h, v0.h[2]\n"
      ".inst 0x4f41fbac  // bfdot v12.4s, v29.8h, v1.h[2]\n"
      ".inst 0x4f42fbb0  // bfdot v16.4s, v29.8h, v2.h[2]\n"
      ".inst 0x4f43fbb4  // bfdot v20.4s, v29.8h, v3.h[2]\n"
      ".inst 0x4f44fbb8  // bfdot v24.4s, v29.8h, v4.h[2]\n"
      "ldr q29, [x10, #0xa0]\n"
      ".inst 0x4f40fb89  // bfdot v9.4s, v28.8h, v0.h[2]\n"
      ".inst 0x4f41fb8d  // bfdot v13.4s, v28.8h, v1.h[2]\n"
      ".inst 0x4f42fb91  // bfdot v17.4s, v28.8h, v2.h[2]\n"
      ".inst 0x4f43fb95  // bfdot v21.4s, v28.8h, v3.h[2]\n"
      ".inst 0x4f44fb99  // bfdot v25.4s, v28.8h, v4.h[2]\n"
      "ldr q28, [x10, #0xb0]\n"
      ".inst 0x4f40fbaa  // bfdot v10.4s, v29.8h, v0.h[2]\n"
      ".inst 0x4f41fbae  // bfdot v14.4s, v29.8h, v1.h[2]\n"
      ".inst 0x4f42fbb2  // bfdot v18.4s, v29.8h, v2.h[2]\n"
      ".inst 0x4f43fbb6  // bfdot v22.4s, v29.8h, v3.h[2]\n"
      ".inst 0x4f44fbba  // bfdot v26.4s, v29.8h, v4.h[2]\n"
      "ldr q29, [x10, #0xc0]\n"
      ".inst 0x4f40fb8b  // bfdot v11.4s, v28.8h, v0.h[2]\n"
      ".inst 0x4f41fb8f  // bfdot v15.4s, v28.8h, v1.h[2]\n"
      ".inst 0x4f42fb93  // bfdot v19.4s, v28.8h, v2.h[2]\n"
      ".inst 0x4f43fb97  // bfdot v23.4s, v28.8h, v3.h[2]\n"
      ".inst 0x4f44fb9b  // bfdot v27.4s, v28.8h, v4.h[2]\n"
      "ldr q28, [x10, #0xd0]\n"
      ".inst 0x4f60fba8  // bfdot v8.4s, v29.8h, v0.h[3]\n"
      ".inst 0x4f61fbac  // bfdot v12.4s, v29.8h, v1.h[3]\n"
      ".inst 0x4f62fbb0  // bfdot v16.4s, v29.8h, v2.h[3]\n"
      ".inst 0x4f63fbb4  // bfdot v20.4s, v29.8h, v3.h[3]\n"
      ".inst 0x4f64fbb8  // bfdot v24.4s, v29.8h, v4.h[3]\n"
      "ldr q29, [x10, #0xe0]\n"
      ".inst 0x4f60fb89  // bfdot v9.4s, v28.8h, v0.h[3]\n"
      ".inst 0x4f61fb8d  // bfdot v13.4s, v28.8h, v1.h[3]\n"
      ".inst 0x4f62fb91  // bfdot v17.4s, v28.8h, v2.h[3]\n"
      ".inst 0x4f63fb95  // bfdot v21.4s, v28.8h, v3.h[3]\n"
      ".inst 0x4f64fb99  // bfdot v25.4s, v28.8h, v4.h[3]\n"
      "ldr q28, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60fbaa  // bfdot v10.4s, v29.8h, v0.h[3]\n"
      ".inst 0x4f61fbae  // bfdot v14.4s, v29.8h, v1.h[3]\n"
      ".inst 0x4f62fbb2  // bfdot v18.4s, v29.8h, v2.h[3]\n"
      ".inst 0x4f63fbb6  // bfdot v22.4s, v29.8h, v3.h[3]\n"
      ".inst 0x4f64fbba  // bfdot v26.4s, v29.8h, v4.h[3]\n"
      ".inst 0x4f60fb8b  // bfdot v11.4s, v28.8h, v0.h[3]\n"
      ".inst 0x4f61fb8f  // bfdot v15.4s, v28.8h, v1.h[3]\n"
      ".inst 0x4f62fb93  // bfdot v19.4s, v28.8h, v2.h[3]\n"
      ".inst 0x4f63fb97  // bfdot v23.4s, v28.8h, v3.h[3]\n"
      ".inst 0x4f64fb9b  // bfdot v27.4s, v28.8h, v4.h[3]\n"
      "160:"  // Height 5: Multiply loop: Main loop skip
      "cbz x27, 164f\n"
      "cmp x27, #0x2\n"
      "blt 162f\n"
      "161:"  // Height 5: Multiply loop: Odd block loop
      "ldr s2, [x26], #0x4\n"
      "ldr s1, [x25], #0x4\n"
      "sub x27, x27, #0x2\n"
      "cmp x27, #0x2\n"
      "ldr s0, [x24], #0x4\n"
      "ldr s31, [x23], #0x4\n"
      "ldr s30, [x22], #0x4\n"
      "ldr q29, [x10, #0x0]\n"
      ".inst 0x4f42f3a8  // bfdot v8.4s, v29.8h, v2.h[0]\n"
      ".inst 0x4f41f3ac  // bfdot v12.4s, v29.8h, v1.h[0]\n"
      "ldr q28, [x10, #0x10]\n"
      ".inst 0x4f40f3b0  // bfdot v16.4s, v29.8h, v0.h[0]\n"
      ".inst 0x4f5ff3b4  // bfdot v20.4s, v29.8h, v31.h[0]\n"
      ".inst 0x4f5ef3b8  // bfdot v24.4s, v29.8h, v30.h[0]\n"
      "ldr q29, [x10, #0x20]\n"
      ".inst 0x4f42f389  // bfdot v9.4s, v28.8h, v2.h[0]\n"
      ".inst 0x4f41f38d  // bfdot v13.4s, v28.8h, v1.h[0]\n"
      ".inst 0x4f40f391  // bfdot v17.4s, v28.8h, v0.h[0]\n"
      ".inst 0x4f5ff395  // bfdot v21.4s, v28.8h, v31.h[0]\n"
      ".inst 0x4f5ef399  // bfdot v25.4s, v28.8h, v30.h[0]\n"
      "ldr q28, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f42f3aa  // bfdot v10.4s, v29.8h, v2.h[0]\n"
      ".inst 0x4f41f3ae  // bfdot v14.4s, v29.8h, v1.h[0]\n"
      ".inst 0x4f40f3b2  // bfdot v18.4s, v29.8h, v0.h[0]\n"
      ".inst 0x4f5ff3b6  // bfdot v22.4s, v29.8h, v31.h[0]\n"
      ".inst 0x4f5ef3ba  // bfdot v26.4s, v29.8h, v30.h[0]\n"
      ".inst 0x4f42f38b  // bfdot v11.4s, v28.8h, v2.h[0]\n"
      ".inst 0x4f41f38f  // bfdot v15.4s, v28.8h, v1.h[0]\n"
      ".inst 0x4f40f393  // bfdot v19.4s, v28.8h, v0.h[0]\n"
      ".inst 0x4f5ff397  // bfdot v23.4s, v28.8h, v31.h[0]\n"
      ".inst 0x4f5ef39b  // bfdot v27.4s, v28.8h, v30.h[0]\n"
      "bge 161b\n"
      "162:"  // Height 5: Multiply loop: Skip odd blocks
      "cbz x27, 164f\n"
      "ldr h0, [x26, #0x0]\n"
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "ldr h3, [x23, #0x0]\n"
      "ldr h4, [x22, #0x0]\n"
      "163:"  // Height 5: Multiply loop: Ragged operand read: Done
      "ldr q29, [x10, #0x0]\n"
      "ldr q28, [x10, #0x10]\n"
      ".inst 0x4f40f3a8  // bfdot v8.4s, v29.8h, v0.h[0]\n"
      ".inst 0x4f41f3ac  // bfdot v12.4s, v29.8h, v1.h[0]\n"
      ".inst 0x4f42f3b0  // bfdot v16.4s, v29.8h, v2.h[0]\n"
      ".inst 0x4f43f3b4  // bfdot v20.4s, v29.8h, v3.h[0]\n"
      ".inst 0x4f44f3b8  // bfdot v24.4s, v29.8h, v4.h[0]\n"
      "ldr q29, [x10, #0x20]\n"
      ".inst 0x4f40f389  // bfdot v9.4s, v28.8h, v0.h[0]\n"
      ".inst 0x4f41f38d  // bfdot v13.4s, v28.8h, v1.h[0]\n"
      ".inst 0x4f42f391  // bfdot v17.4s, v28.8h, v2.h[0]\n"
      ".inst 0x4f43f395  // bfdot v21.4s, v28.8h, v3.h[0]\n"
      ".inst 0x4f44f399  // bfdot v25.4s, v28.8h, v4.h[0]\n"
      "ldr q28, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f40f3aa  // bfdot v10.4s, v29.8h, v0.h[0]\n"
      ".inst 0x4f41f3ae  // bfdot v14.4s, v29.8h, v1.h[0]\n"
      ".inst 0x4f42f3b2  // bfdot v18.4s, v29.8h, v2.h[0]\n"
      ".inst 0x4f43f3b6  // bfdot v22.4s, v29.8h, v3.h[0]\n"
      ".inst 0x4f44f3ba  // bfdot v26.4s, v29.8h, v4.h[0]\n"
      ".inst 0x4f40f38b  // bfdot v11.4s, v28.8h, v0.h[0]\n"
      ".inst 0x4f41f38f  // bfdot v15.4s, v28.8h, v1.h[0]\n"
      ".inst 0x4f42f393  // bfdot v19.4s, v28.8h, v2.h[0]\n"
      ".inst 0x4f43f397  // bfdot v23.4s, v28.8h, v3.h[0]\n"
      ".inst 0x4f44f39b  // bfdot v27.4s, v28.8h, v4.h[0]\n"
      "164:"  // Height 5: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 155b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "add x23, x24, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "prfm pstl1keep, [x22, #0x0]\n"
      "tbz %x[flags], #1, 165f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v29.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v28.4s }, [x20]\n"
      "fmin v8.4s, v8.4s, v29.4s\n"
      "fmin v9.4s, v9.4s, v29.4s\n"
      "fmin v10.4s, v10.4s, v29.4s\n"
      "fmin v11.4s, v11.4s, v29.4s\n"
      "fmin v12.4s, v12.4s, v29.4s\n"
      "fmin v13.4s, v13.4s, v29.4s\n"
      "fmin v14.4s, v14.4s, v29.4s\n"
      "fmin v15.4s, v15.4s, v29.4s\n"
      "fmin v16.4s, v16.4s, v29.4s\n"
      "fmin v17.4s, v17.4s, v29.4s\n"
      "fmin v18.4s, v18.4s, v29.4s\n"
      "fmin v19.4s, v19.4s, v29.4s\n"
      "fmin v20.4s, v20.4s, v29.4s\n"
      "fmin v21.4s, v21.4s, v29.4s\n"
      "fmin v22.4s, v22.4s, v29.4s\n"
      "fmin v23.4s, v23.4s, v29.4s\n"
      "fmin v24.4s, v24.4s, v29.4s\n"
      "fmin v25.4s, v25.4s, v29.4s\n"
      "fmin v26.4s, v26.4s, v29.4s\n"
      "fmin v27.4s, v27.4s, v29.4s\n"
      "fmax v8.4s, v8.4s, v28.4s\n"
      "fmax v9.4s, v9.4s, v28.4s\n"
      "fmax v10.4s, v10.4s, v28.4s\n"
      "fmax v11.4s, v11.4s, v28.4s\n"
      "fmax v12.4s, v12.4s, v28.4s\n"
      "fmax v13.4s, v13.4s, v28.4s\n"
      "fmax v14.4s, v14.4s, v28.4s\n"
      "fmax v15.4s, v15.4s, v28.4s\n"
      "fmax v16.4s, v16.4s, v28.4s\n"
      "fmax v17.4s, v17.4s, v28.4s\n"
      "fmax v18.4s, v18.4s, v28.4s\n"
      "fmax v19.4s, v19.4s, v28.4s\n"
      "fmax v20.4s, v20.4s, v28.4s\n"
      "fmax v21.4s, v21.4s, v28.4s\n"
      "fmax v22.4s, v22.4s, v28.4s\n"
      "fmax v23.4s, v23.4s, v28.4s\n"
      "fmax v24.4s, v24.4s, v28.4s\n"
      "fmax v25.4s, v25.4s, v28.4s\n"
      "fmax v26.4s, v26.4s, v28.4s\n"
      "fmax v27.4s, v27.4s, v28.4s\n"
      "165:"  // Height 5: No activation
      "cmp x11, #0x10\n"
      "bge 174f\n"
      "tbz x11, #3, 169f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v9.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v13.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v17.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v21.4s }, [x23], #0x10\n"
      "st1 { v24.4s }, [x22], #0x10\n"
      "st1 { v25.4s }, [x22], #0x10\n"
      "tbz x11, #2, 167f\n"
      "st1 { v10.4s }, [x9], #0x10\n"
      "st1 { v14.4s }, [x25], #0x10\n"
      "st1 { v18.4s }, [x24], #0x10\n"
      "st1 { v22.4s }, [x23], #0x10\n"
      "st1 { v26.4s }, [x22], #0x10\n"
      "tbz x11, #1, 166f\n"
      "str d11, [x9], #0x8\n"
      "str d15, [x25], #0x8\n"
      "str d19, [x24], #0x8\n"
      "str d23, [x23], #0x8\n"
      "str d27, [x22], #0x8\n"
      "tbz x11, #0, 173f\n"
      "st1 { v11.s }[2], [x9]\n"
      "st1 { v15.s }[2], [x25]\n"
      "st1 { v19.s }[2], [x24]\n"
      "st1 { v23.s }[2], [x23]\n"
      "st1 { v27.s }[2], [x22]\n"
      "b 173f\n"
      "166:"  // Height 5: Partial direct writeback: partial_1_12
      "tbz x11, #0, 173f\n"
      "str s11, [x9, #0x0]\n"
      "str s15, [x25, #0x0]\n"
      "str s19, [x24, #0x0]\n"
      "str s23, [x23, #0x0]\n"
      "str s27, [x22, #0x0]\n"
      "b 173f\n"
      "167:"  // Height 5: Partial direct writeback: partial_2_8
      "tbz x11, #1, 168f\n"
      "str d10, [x9], #0x8\n"
      "str d14, [x25], #0x8\n"
      "str d18, [x24], #0x8\n"
      "str d22, [x23], #0x8\n"
      "str d26, [x22], #0x8\n"
      "tbz x11, #0, 173f\n"
      "st1 { v10.s }[2], [x9]\n"
      "st1 { v14.s }[2], [x25]\n"
      "st1 { v18.s }[2], [x24]\n"
      "st1 { v22.s }[2], [x23]\n"
      "st1 { v26.s }[2], [x22]\n"
      "b 173f\n"
      "168:"  // Height 5: Partial direct writeback: partial_1_8
      "tbz x11, #0, 173f\n"
      "str s10, [x9, #0x0]\n"
      "str s14, [x25, #0x0]\n"
      "str s18, [x24, #0x0]\n"
      "str s22, [x23, #0x0]\n"
      "str s26, [x22, #0x0]\n"
      "b 173f\n"
      "169:"  // Height 5: Partial direct writeback: partial_4_0
      "tbz x11, #2, 171f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v24.4s }, [x22], #0x10\n"
      "tbz x11, #1, 170f\n"
      "str d9, [x9], #0x8\n"
      "str d13, [x25], #0x8\n"
      "str d17, [x24], #0x8\n"
      "str d21, [x23], #0x8\n"
      "str d25, [x22], #0x8\n"
      "tbz x11, #0, 173f\n"
      "st1 { v9.s }[2], [x9]\n"
      "st1 { v13.s }[2], [x25]\n"
      "st1 { v17.s }[2], [x24]\n"
      "st1 { v21.s }[2], [x23]\n"
      "st1 { v25.s }[2], [x22]\n"
      "b 173f\n"
      "170:"  // Height 5: Partial direct writeback: partial_1_4
      "tbz x11, #0, 173f\n"
      "str s9, [x9, #0x0]\n"
      "str s13, [x25, #0x0]\n"
      "str s17, [x24, #0x0]\n"
      "str s21, [x23, #0x0]\n"
      "str s25, [x22, #0x0]\n"
      "b 173f\n"
      "171:"  // Height 5: Partial direct writeback: partial_2_0
      "tbz x11, #1, 172f\n"
      "str d8, [x9], #0x8\n"
      "str d12, [x25], #0x8\n"
      "str d16, [x24], #0x8\n"
      "str d20, [x23], #0x8\n"
      "str d24, [x22], #0x8\n"
      "tbz x11, #0, 173f\n"
      "st1 { v8.s }[2], [x9]\n"
      "st1 { v12.s }[2], [x25]\n"
      "st1 { v16.s }[2], [x24]\n"
      "st1 { v20.s }[2], [x23]\n"
      "st1 { v24.s }[2], [x22]\n"
      "b 173f\n"
      "172:"  // Height 5: Partial direct writeback: partial_1_0
      "str s8, [x9, #0x0]\n"
      "str s12, [x25, #0x0]\n"
      "str s16, [x24, #0x0]\n"
      "str s20, [x23, #0x0]\n"
      "str s24, [x22, #0x0]\n"
      "173:"  // Height 5: Partial direct writeback: Done
      "b 175f\n"
      "174:"  // Height 5: Full writeback
      "str q8, [x9, #0x0]\n"
      "str q9, [x9, #0x10]\n"
      "str q10, [x9, #0x20]\n"
      "str q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "str q12, [x25, #0x0]\n"
      "str q13, [x25, #0x10]\n"
      "str q14, [x25, #0x20]\n"
      "str q15, [x25, #0x30]\n"
      "str q16, [x24, #0x0]\n"
      "str q17, [x24, #0x10]\n"
      "str q18, [x24, #0x20]\n"
      "str q19, [x24, #0x30]\n"
      "str q20, [x23, #0x0]\n"
      "str q21, [x23, #0x10]\n"
      "str q22, [x23, #0x20]\n"
      "str q23, [x23, #0x30]\n"
      "str q24, [x22, #0x0]\n"
      "str q25, [x22, #0x10]\n"
      "str q26, [x22, #0x20]\n"
      "str q27, [x22, #0x30]\n"
      "175:"  // Height 5: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 142b\n"
      "b 212f\n"
      "176:"  // Height 6
      "ldr x21, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "mov x20, #0x18\n"
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "madd %x[output_ptr], x21, x20, %x[output_ptr]\n"
      "177:"  // Height 6: Column loop
      "cbz x12, 178f\n"
      "ldr q8, [x12, #0x0]\n"
      "ldr q9, [x12, #0x10]\n"
      "mov v12.16b, v8.16b\n"
      "mov v13.16b, v9.16b\n"
      "ldr q10, [x12, #0x20]\n"
      "ldr q11, [x12, #0x30]\n"
      "mov v14.16b, v10.16b\n"
      "mov v15.16b, v11.16b\n"
      "mov v16.16b, v8.16b\n"
      "mov v17.16b, v9.16b\n"
      "add x12, x12, #0x40\n"
      "mov v18.16b, v10.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v20.16b, v8.16b\n"
      "mov v21.16b, v9.16b\n"
      "mov v22.16b, v10.16b\n"
      "mov v23.16b, v11.16b\n"
      "mov v24.16b, v8.16b\n"
      "mov v25.16b, v9.16b\n"
      "mov v26.16b, v10.16b\n"
      "mov v27.16b, v11.16b\n"
      "mov v28.16b, v8.16b\n"
      "mov v29.16b, v9.16b\n"
      "mov v30.16b, v10.16b\n"
      "mov v31.16b, v11.16b\n"
      "b 189f\n"
      "178:"  // Height 6: no bias
      "tbz %x[flags], #0, 188f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "cmp x11, #0x10\n"
      "add x21, x22, x20, LSL #2\n"
      "bge 187f\n"
      "tbz x11, #3, 182f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v24.4s }, [x22], #0x10\n"
      "ld1 { v28.4s }, [x21], #0x10\n"
      "ld1 { v9.4s }, [x9], #0x10\n"
      "ld1 { v13.4s }, [x25], #0x10\n"
      "ld1 { v17.4s }, [x24], #0x10\n"
      "ld1 { v21.4s }, [x23], #0x10\n"
      "ld1 { v25.4s }, [x22], #0x10\n"
      "ld1 { v29.4s }, [x21], #0x10\n"
      "tbz x11, #2, 180f\n"
      "ld1 { v10.4s }, [x9], #0x10\n"
      "ld1 { v14.4s }, [x25], #0x10\n"
      "ld1 { v18.4s }, [x24], #0x10\n"
      "ld1 { v22.4s }, [x23], #0x10\n"
      "ld1 { v26.4s }, [x22], #0x10\n"
      "ld1 { v30.4s }, [x21], #0x10\n"
      "tbz x11, #1, 179f\n"
      "ldr d11, [x9], #0x8\n"
      "ldr d15, [x25], #0x8\n"
      "mov x20, #0x38\n"
      "ldr d19, [x24], #0x8\n"
      "ldr d23, [x23], #0x8\n"
      "ldr d27, [x22], #0x8\n"
      "ldr d31, [x21], #0x8\n"
      "tbz x11, #0, 186f\n"
      "ld1 { v11.s }[2], [x9]\n"
      "ld1 { v15.s }[2], [x25]\n"
      "ld1 { v19.s }[2], [x24]\n"
      "ld1 { v23.s }[2], [x23]\n"
      "ld1 { v27.s }[2], [x22]\n"
      "ld1 { v31.s }[2], [x21]\n"
      "b 186f\n"
      "179:"  // Height 6: Partial accumulate: partial_1_12
      "mov x20, #0x30\n"
      "tbz x11, #0, 186f\n"
      "ldr s11, [x9, #0x0]\n"
      "ldr s15, [x25, #0x0]\n"
      "ldr s19, [x24, #0x0]\n"
      "ldr s23, [x23, #0x0]\n"
      "ldr s27, [x22, #0x0]\n"
      "ldr s31, [x21, #0x0]\n"
      "b 186f\n"
      "180:"  // Height 6: Partial accumulate: partial_2_8
      "tbz x11, #1, 181f\n"
      "ldr d10, [x9], #0x8\n"
      "ldr d14, [x25], #0x8\n"
      "mov x20, #0x28\n"
      "ldr d18, [x24], #0x8\n"
      "ldr d22, [x23], #0x8\n"
      "ldr d26, [x22], #0x8\n"
      "ldr d30, [x21], #0x8\n"
      "tbz x11, #0, 186f\n"
      "ld1 { v10.s }[2], [x9]\n"
      "ld1 { v14.s }[2], [x25]\n"
      "ld1 { v18.s }[2], [x24]\n"
      "ld1 { v22.s }[2], [x23]\n"
      "ld1 { v26.s }[2], [x22]\n"
      "ld1 { v30.s }[2], [x21]\n"
      "b 186f\n"
      "181:"  // Height 6: Partial accumulate: partial_1_8
      "mov x20, #0x20\n"
      "tbz x11, #0, 186f\n"
      "ldr s10, [x9, #0x0]\n"
      "ldr s14, [x25, #0x0]\n"
      "ldr s18, [x24, #0x0]\n"
      "ldr s22, [x23, #0x0]\n"
      "ldr s26, [x22, #0x0]\n"
      "ldr s30, [x21, #0x0]\n"
      "b 186f\n"
      "182:"  // Height 6: Partial accumulate: partial_4_0
      "tbz x11, #2, 184f\n"
      "ld1 { v8.4s }, [x9], #0x10\n"
      "ld1 { v12.4s }, [x25], #0x10\n"
      "ld1 { v16.4s }, [x24], #0x10\n"
      "ld1 { v20.4s }, [x23], #0x10\n"
      "ld1 { v24.4s }, [x22], #0x10\n"
      "ld1 { v28.4s }, [x21], #0x10\n"
      "tbz x11, #1, 183f\n"
      "ldr d9, [x9], #0x8\n"
      "ldr d13, [x25], #0x8\n"
      "mov x20, #0x18\n"
      "ldr d17, [x24], #0x8\n"
      "ldr d21, [x23], #0x8\n"
      "ldr d25, [x22], #0x8\n"
      "ldr d29, [x21], #0x8\n"
      "tbz x11, #0, 186f\n"
      "ld1 { v9.s }[2], [x9]\n"
      "ld1 { v13.s }[2], [x25]\n"
      "ld1 { v17.s }[2], [x24]\n"
      "ld1 { v21.s }[2], [x23]\n"
      "ld1 { v25.s }[2], [x22]\n"
      "ld1 { v29.s }[2], [x21]\n"
      "b 186f\n"
      "183:"  // Height 6: Partial accumulate: partial_1_4
      "mov x20, #0x10\n"
      "tbz x11, #0, 186f\n"
      "ldr s9, [x9, #0x0]\n"
      "ldr s13, [x25, #0x0]\n"
      "ldr s17, [x24, #0x0]\n"
      "ldr s21, [x23, #0x0]\n"
      "ldr s25, [x22, #0x0]\n"
      "ldr s29, [x21, #0x0]\n"
      "b 186f\n"
      "184:"  // Height 6: Partial accumulate: partial_2_0
      "tbz x11, #1, 185f\n"
      "ldr d8, [x9], #0x8\n"
      "ldr d12, [x25], #0x8\n"
      "mov x20, #0x8\n"
      "ldr d16, [x24], #0x8\n"
      "ldr d20, [x23], #0x8\n"
      "ldr d24, [x22], #0x8\n"
      "ldr d28, [x21], #0x8\n"
      "tbz x11, #0, 186f\n"
      "ld1 { v8.s }[2], [x9]\n"
      "ld1 { v12.s }[2], [x25]\n"
      "ld1 { v16.s }[2], [x24]\n"
      "ld1 { v20.s }[2], [x23]\n"
      "ld1 { v24.s }[2], [x22]\n"
      "ld1 { v28.s }[2], [x21]\n"
      "b 186f\n"
      "185:"  // Height 6: Partial accumulate: partial_1_0
      "ldr s8, [x9, #0x0]\n"
      "ldr s12, [x25, #0x0]\n"
      "mov x20, #0x0\n"
      "ldr s16, [x24, #0x0]\n"
      "ldr s20, [x23, #0x0]\n"
      "ldr s24, [x22, #0x0]\n"
      "ldr s28, [x21, #0x0]\n"
      "186:"  // Height 6: Partial accumulate: Done
      "sub x9, x9, x20\n"
      "b 189f\n"
      "187:"  // Height 6: full accumulate
      "ldr q8, [x9, #0x0]\n"
      "ldr q9, [x9, #0x10]\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "ldr q12, [x25, #0x0]\n"
      "ldr q13, [x25, #0x10]\n"
      "ldr q14, [x25, #0x20]\n"
      "ldr q15, [x25, #0x30]\n"
      "ldr q16, [x24, #0x0]\n"
      "ldr q17, [x24, #0x10]\n"
      "ldr q18, [x24, #0x20]\n"
      "ldr q19, [x24, #0x30]\n"
      "ldr q20, [x23, #0x0]\n"
      "ldr q21, [x23, #0x10]\n"
      "ldr q22, [x23, #0x20]\n"
      "ldr q23, [x23, #0x30]\n"
      "ldr q24, [x22, #0x0]\n"
      "ldr q25, [x22, #0x10]\n"
      "ldr q26, [x22, #0x20]\n"
      "ldr q27, [x22, #0x30]\n"
      "ldr q28, [x21, #0x0]\n"
      "ldr q29, [x21, #0x10]\n"
      "ldr q30, [x21, #0x20]\n"
      "ldr q31, [x21, #0x30]\n"
      "b 189f\n"
      "188:"  // Height 6: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "movi v24.16b, #0x0\n"
      "movi v25.16b, #0x0\n"
      "movi v26.16b, #0x0\n"
      "movi v27.16b, #0x0\n"
      "movi v28.16b, #0x0\n"
      "movi v29.16b, #0x0\n"
      "movi v30.16b, #0x0\n"
      "movi v31.16b, #0x0\n"
      "189:"  // Height 6: setup done
      "mov x28, #0x0\n"
      "190:"  // Height 6: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 191f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "ldr x21, [x20, #0x28]\n"
      "cbnz x28, 192f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "add x22, x22, x20, LSL #1\n"
      "add x21, x21, x20, LSL #1\n"
      "b 192f\n"
      "191:"  // Height 6: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "add x22, x23, x21, LSL #1\n"
      "add x21, x22, x21, LSL #1\n"
      "192:"  // Height 6: input setup done
      "cmp x27, #0x8\n"
      "blt 195f\n"
      "ldr q0, [x26, #0x0]\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x27, #0x10\n"
      "ldr q2, [x24, #0x0]\n"
      "ldr q3, [x23, #0x0]\n"
      "ldr q4, [x22, #0x0]\n"
      "ldr q5, [x21, #0x0]\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "blt 194f\n"
      "193:"  // Height 6: Multiply loop: Main loop head
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "sub x27, x27, #0x8\n"
      "add x26, x26, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d4  // bfdot v20.4s, v6.8h, v3.h[0]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      ".inst 0x4f44f0d8  // bfdot v24.4s, v6.8h, v4.h[0]\n"
      ".inst 0x4f45f0dc  // bfdot v28.4s, v6.8h, v5.h[0]\n"
      "ldr q6, [x10, #0x20]\n"
      "add x23, x23, #0x10\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      "add x22, x22, #0x10\n"
      "add x21, x21, #0x10\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f5  // bfdot v21.4s, v7.8h, v3.h[0]\n"
      "cmp x27, #0x10\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      ".inst 0x4f44f0f9  // bfdot v25.4s, v7.8h, v4.h[0]\n"
      ".inst 0x4f45f0fd  // bfdot v29.4s, v7.8h, v5.h[0]\n"
      "ldr q7, [x10, #0x30]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f40f0ca  // bfdot v10.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0ce  // bfdot v14.4s, v6.8h, v1.h[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x4f42f0d2  // bfdot v18.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d6  // bfdot v22.4s, v6.8h, v3.h[0]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      "prfm pldl1keep, [x21, #0x80]\n"
      ".inst 0x4f44f0da  // bfdot v26.4s, v6.8h, v4.h[0]\n"
      ".inst 0x4f45f0de  // bfdot v30.4s, v6.8h, v5.h[0]\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x4f40f0eb  // bfdot v11.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ef  // bfdot v15.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f3  // bfdot v19.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f7  // bfdot v23.4s, v7.8h, v3.h[0]\n"
      ".inst 0x4f44f0fb  // bfdot v27.4s, v7.8h, v4.h[0]\n"
      ".inst 0x4f45f0ff  // bfdot v31.4s, v7.8h, v5.h[0]\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x4f60f0c8  // bfdot v8.4s, v6.8h, v0.h[1]\n"
      ".inst 0x4f61f0cc  // bfdot v12.4s, v6.8h, v1.h[1]\n"
      ".inst 0x4f62f0d0  // bfdot v16.4s, v6.8h, v2.h[1]\n"
      ".inst 0x4f63f0d4  // bfdot v20.4s, v6.8h, v3.h[1]\n"
      ".inst 0x4f64f0d8  // bfdot v24.4s, v6.8h, v4.h[1]\n"
      ".inst 0x4f65f0dc  // bfdot v28.4s, v6.8h, v5.h[1]\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x4f60f0e9  // bfdot v9.4s, v7.8h, v0.h[1]\n"
      ".inst 0x4f61f0ed  // bfdot v13.4s, v7.8h, v1.h[1]\n"
      ".inst 0x4f62f0f1  // bfdot v17.4s, v7.8h, v2.h[1]\n"
      ".inst 0x4f63f0f5  // bfdot v21.4s, v7.8h, v3.h[1]\n"
      ".inst 0x4f64f0f9  // bfdot v25.4s, v7.8h, v4.h[1]\n"
      ".inst 0x4f65f0fd  // bfdot v29.4s, v7.8h, v5.h[1]\n"
      "ldr q7, [x10, #0x70]\n"
      ".inst 0x4f60f0ca  // bfdot v10.4s, v6.8h, v0.h[1]\n"
      ".inst 0x4f61f0ce  // bfdot v14.4s, v6.8h, v1.h[1]\n"
      ".inst 0x4f62f0d2  // bfdot v18.4s, v6.8h, v2.h[1]\n"
      ".inst 0x4f63f0d6  // bfdot v22.4s, v6.8h, v3.h[1]\n"
      ".inst 0x4f64f0da  // bfdot v26.4s, v6.8h, v4.h[1]\n"
      ".inst 0x4f65f0de  // bfdot v30.4s, v6.8h, v5.h[1]\n"
      "ldr q6, [x10, #0x80]\n"
      ".inst 0x4f60f0eb  // bfdot v11.4s, v7.8h, v0.h[1]\n"
      ".inst 0x4f61f0ef  // bfdot v15.4s, v7.8h, v1.h[1]\n"
      ".inst 0x4f62f0f3  // bfdot v19.4s, v7.8h, v2.h[1]\n"
      ".inst 0x4f63f0f7  // bfdot v23.4s, v7.8h, v3.h[1]\n"
      ".inst 0x4f64f0fb  // bfdot v27.4s, v7.8h, v4.h[1]\n"
      ".inst 0x4f65f0ff  // bfdot v31.4s, v7.8h, v5.h[1]\n"
      "ldr q7, [x10, #0x90]\n"
      ".inst 0x4f40f8c8  // bfdot v8.4s, v6.8h, v0.h[2]\n"
      ".inst 0x4f41f8cc  // bfdot v12.4s, v6.8h, v1.h[2]\n"
      ".inst 0x4f42f8d0  // bfdot v16.4s, v6.8h, v2.h[2]\n"
      ".inst 0x4f43f8d4  // bfdot v20.4s, v6.8h, v3.h[2]\n"
      ".inst 0x4f44f8d8  // bfdot v24.4s, v6.8h, v4.h[2]\n"
      ".inst 0x4f45f8dc  // bfdot v28.4s, v6.8h, v5.h[2]\n"
      "ldr q6, [x10, #0xa0]\n"
      ".inst 0x4f40f8e9  // bfdot v9.4s, v7.8h, v0.h[2]\n"
      ".inst 0x4f41f8ed  // bfdot v13.4s, v7.8h, v1.h[2]\n"
      ".inst 0x4f42f8f1  // bfdot v17.4s, v7.8h, v2.h[2]\n"
      ".inst 0x4f43f8f5  // bfdot v21.4s, v7.8h, v3.h[2]\n"
      ".inst 0x4f44f8f9  // bfdot v25.4s, v7.8h, v4.h[2]\n"
      ".inst 0x4f45f8fd  // bfdot v29.4s, v7.8h, v5.h[2]\n"
      "ldr q7, [x10, #0xb0]\n"
      ".inst 0x4f40f8ca  // bfdot v10.4s, v6.8h, v0.h[2]\n"
      ".inst 0x4f41f8ce  // bfdot v14.4s, v6.8h, v1.h[2]\n"
      ".inst 0x4f42f8d2  // bfdot v18.4s, v6.8h, v2.h[2]\n"
      ".inst 0x4f43f8d6  // bfdot v22.4s, v6.8h, v3.h[2]\n"
      ".inst 0x4f44f8da  // bfdot v26.4s, v6.8h, v4.h[2]\n"
      ".inst 0x4f45f8de  // bfdot v30.4s, v6.8h, v5.h[2]\n"
      "ldr q6, [x10, #0xc0]\n"
      ".inst 0x4f40f8eb  // bfdot v11.4s, v7.8h, v0.h[2]\n"
      ".inst 0x4f41f8ef  // bfdot v15.4s, v7.8h, v1.h[2]\n"
      ".inst 0x4f42f8f3  // bfdot v19.4s, v7.8h, v2.h[2]\n"
      ".inst 0x4f43f8f7  // bfdot v23.4s, v7.8h, v3.h[2]\n"
      ".inst 0x4f44f8fb  // bfdot v27.4s, v7.8h, v4.h[2]\n"
      ".inst 0x4f45f8ff  // bfdot v31.4s, v7.8h, v5.h[2]\n"
      "ldr q7, [x10, #0xd0]\n"
      ".inst 0x4f60f8c8  // bfdot v8.4s, v6.8h, v0.h[3]\n"
      ".inst 0x4f61f8cc  // bfdot v12.4s, v6.8h, v1.h[3]\n"
      ".inst 0x4f62f8d0  // bfdot v16.4s, v6.8h, v2.h[3]\n"
      ".inst 0x4f63f8d4  // bfdot v20.4s, v6.8h, v3.h[3]\n"
      ".inst 0x4f64f8d8  // bfdot v24.4s, v6.8h, v4.h[3]\n"
      ".inst 0x4f65f8dc  // bfdot v28.4s, v6.8h, v5.h[3]\n"
      "ldr q6, [x10, #0xe0]\n"
      ".inst 0x4f60f8e9  // bfdot v9.4s, v7.8h, v0.h[3]\n"
      ".inst 0x4f61f8ed  // bfdot v13.4s, v7.8h, v1.h[3]\n"
      ".inst 0x4f62f8f1  // bfdot v17.4s, v7.8h, v2.h[3]\n"
      ".inst 0x4f63f8f5  // bfdot v21.4s, v7.8h, v3.h[3]\n"
      ".inst 0x4f64f8f9  // bfdot v25.4s, v7.8h, v4.h[3]\n"
      ".inst 0x4f65f8fd  // bfdot v29.4s, v7.8h, v5.h[3]\n"
      "ldr q7, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60f8ca  // bfdot v10.4s, v6.8h, v0.h[3]\n"
      ".inst 0x4f61f8ce  // bfdot v14.4s, v6.8h, v1.h[3]\n"
      ".inst 0x4f62f8d2  // bfdot v18.4s, v6.8h, v2.h[3]\n"
      ".inst 0x4f63f8d6  // bfdot v22.4s, v6.8h, v3.h[3]\n"
      ".inst 0x4f64f8da  // bfdot v26.4s, v6.8h, v4.h[3]\n"
      ".inst 0x4f65f8de  // bfdot v30.4s, v6.8h, v5.h[3]\n"
      "ldr q6, [x10, #0x0]\n"
      ".inst 0x4f60f8eb  // bfdot v11.4s, v7.8h, v0.h[3]\n"
      "ldr q0, [x26, #0x0]\n"
      ".inst 0x4f61f8ef  // bfdot v15.4s, v7.8h, v1.h[3]\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x4f62f8f3  // bfdot v19.4s, v7.8h, v2.h[3]\n"
      "ldr q2, [x24, #0x0]\n"
      ".inst 0x4f63f8f7  // bfdot v23.4s, v7.8h, v3.h[3]\n"
      "ldr q3, [x23, #0x0]\n"
      ".inst 0x4f64f8fb  // bfdot v27.4s, v7.8h, v4.h[3]\n"
      "ldr q4, [x22, #0x0]\n"
      ".inst 0x4f65f8ff  // bfdot v31.4s, v7.8h, v5.h[3]\n"
      "ldr q5, [x21, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      "bge 193b\n"
      "194:"  // Height 6: Multiply loop: Single iteration only
      ".inst 0x4f40f0c8  // bfdot v8.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cc  // bfdot v12.4s, v6.8h, v1.h[0]\n"
      "add x26, x26, #0x10\n"
      "add x25, x25, #0x10\n"
      ".inst 0x4f42f0d0  // bfdot v16.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d4  // bfdot v20.4s, v6.8h, v3.h[0]\n"
      "add x24, x24, #0x10\n"
      "add x23, x23, #0x10\n"
      ".inst 0x4f44f0d8  // bfdot v24.4s, v6.8h, v4.h[0]\n"
      ".inst 0x4f45f0dc  // bfdot v28.4s, v6.8h, v5.h[0]\n"
      "ldr q6, [x10, #0x20]\n"
      "add x22, x22, #0x10\n"
      ".inst 0x4f40f0e9  // bfdot v9.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ed  // bfdot v13.4s, v7.8h, v1.h[0]\n"
      "add x21, x21, #0x10\n"
      "sub x27, x27, #0x8\n"
      ".inst 0x4f42f0f1  // bfdot v17.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f5  // bfdot v21.4s, v7.8h, v3.h[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x4f44f0f9  // bfdot v25.4s, v7.8h, v4.h[0]\n"
      ".inst 0x4f45f0fd  // bfdot v29.4s, v7.8h, v5.h[0]\n"
      "ldr q7, [x10, #0x30]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x4f40f0ca  // bfdot v10.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0ce  // bfdot v14.4s, v6.8h, v1.h[0]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x4f42f0d2  // bfdot v18.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d6  // bfdot v22.4s, v6.8h, v3.h[0]\n"
      "prfm pldl1keep, [x21, #0x80]\n"
      ".inst 0x4f44f0da  // bfdot v26.4s, v6.8h, v4.h[0]\n"
      ".inst 0x4f45f0de  // bfdot v30.4s, v6.8h, v5.h[0]\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x4f40f0eb  // bfdot v11.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ef  // bfdot v15.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f3  // bfdot v19.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f7  // bfdot v23.4s, v7.8h, v3.h[0]\n"
      ".inst 0x4f44f0fb  // bfdot v27.4s, v7.8h, v4.h[0]\n"
      ".inst 0x4f45f0ff  // bfdot v31.4s, v7.8h, v5.h[0]\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x4f60f0c8  // bfdot v8.4s, v6.8h, v0.h[1]\n"
      ".inst 0x4f61f0cc  // bfdot v12.4s, v6.8h, v1.h[1]\n"
      ".inst 0x4f62f0d0  // bfdot v16.4s, v6.8h, v2.h[1]\n"
      ".inst 0x4f63f0d4  // bfdot v20.4s, v6.8h, v3.h[1]\n"
      ".inst 0x4f64f0d8  // bfdot v24.4s, v6.8h, v4.h[1]\n"
      ".inst 0x4f65f0dc  // bfdot v28.4s, v6.8h, v5.h[1]\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x4f60f0e9  // bfdot v9.4s, v7.8h, v0.h[1]\n"
      ".inst 0x4f61f0ed  // bfdot v13.4s, v7.8h, v1.h[1]\n"
      ".inst 0x4f62f0f1  // bfdot v17.4s, v7.8h, v2.h[1]\n"
      ".inst 0x4f63f0f5  // bfdot v21.4s, v7.8h, v3.h[1]\n"
      ".inst 0x4f64f0f9  // bfdot v25.4s, v7.8h, v4.h[1]\n"
      ".inst 0x4f65f0fd  // bfdot v29.4s, v7.8h, v5.h[1]\n"
      "ldr q7, [x10, #0x70]\n"
      ".inst 0x4f60f0ca  // bfdot v10.4s, v6.8h, v0.h[1]\n"
      ".inst 0x4f61f0ce  // bfdot v14.4s, v6.8h, v1.h[1]\n"
      ".inst 0x4f62f0d2  // bfdot v18.4s, v6.8h, v2.h[1]\n"
      ".inst 0x4f63f0d6  // bfdot v22.4s, v6.8h, v3.h[1]\n"
      ".inst 0x4f64f0da  // bfdot v26.4s, v6.8h, v4.h[1]\n"
      ".inst 0x4f65f0de  // bfdot v30.4s, v6.8h, v5.h[1]\n"
      "ldr q6, [x10, #0x80]\n"
      ".inst 0x4f60f0eb  // bfdot v11.4s, v7.8h, v0.h[1]\n"
      ".inst 0x4f61f0ef  // bfdot v15.4s, v7.8h, v1.h[1]\n"
      ".inst 0x4f62f0f3  // bfdot v19.4s, v7.8h, v2.h[1]\n"
      ".inst 0x4f63f0f7  // bfdot v23.4s, v7.8h, v3.h[1]\n"
      ".inst 0x4f64f0fb  // bfdot v27.4s, v7.8h, v4.h[1]\n"
      ".inst 0x4f65f0ff  // bfdot v31.4s, v7.8h, v5.h[1]\n"
      "ldr q7, [x10, #0x90]\n"
      ".inst 0x4f40f8c8  // bfdot v8.4s, v6.8h, v0.h[2]\n"
      ".inst 0x4f41f8cc  // bfdot v12.4s, v6.8h, v1.h[2]\n"
      ".inst 0x4f42f8d0  // bfdot v16.4s, v6.8h, v2.h[2]\n"
      ".inst 0x4f43f8d4  // bfdot v20.4s, v6.8h, v3.h[2]\n"
      ".inst 0x4f44f8d8  // bfdot v24.4s, v6.8h, v4.h[2]\n"
      ".inst 0x4f45f8dc  // bfdot v28.4s, v6.8h, v5.h[2]\n"
      "ldr q6, [x10, #0xa0]\n"
      ".inst 0x4f40f8e9  // bfdot v9.4s, v7.8h, v0.h[2]\n"
      ".inst 0x4f41f8ed  // bfdot v13.4s, v7.8h, v1.h[2]\n"
      ".inst 0x4f42f8f1  // bfdot v17.4s, v7.8h, v2.h[2]\n"
      ".inst 0x4f43f8f5  // bfdot v21.4s, v7.8h, v3.h[2]\n"
      ".inst 0x4f44f8f9  // bfdot v25.4s, v7.8h, v4.h[2]\n"
      ".inst 0x4f45f8fd  // bfdot v29.4s, v7.8h, v5.h[2]\n"
      "ldr q7, [x10, #0xb0]\n"
      ".inst 0x4f40f8ca  // bfdot v10.4s, v6.8h, v0.h[2]\n"
      ".inst 0x4f41f8ce  // bfdot v14.4s, v6.8h, v1.h[2]\n"
      ".inst 0x4f42f8d2  // bfdot v18.4s, v6.8h, v2.h[2]\n"
      ".inst 0x4f43f8d6  // bfdot v22.4s, v6.8h, v3.h[2]\n"
      ".inst 0x4f44f8da  // bfdot v26.4s, v6.8h, v4.h[2]\n"
      ".inst 0x4f45f8de  // bfdot v30.4s, v6.8h, v5.h[2]\n"
      "ldr q6, [x10, #0xc0]\n"
      ".inst 0x4f40f8eb  // bfdot v11.4s, v7.8h, v0.h[2]\n"
      ".inst 0x4f41f8ef  // bfdot v15.4s, v7.8h, v1.h[2]\n"
      ".inst 0x4f42f8f3  // bfdot v19.4s, v7.8h, v2.h[2]\n"
      ".inst 0x4f43f8f7  // bfdot v23.4s, v7.8h, v3.h[2]\n"
      ".inst 0x4f44f8fb  // bfdot v27.4s, v7.8h, v4.h[2]\n"
      ".inst 0x4f45f8ff  // bfdot v31.4s, v7.8h, v5.h[2]\n"
      "ldr q7, [x10, #0xd0]\n"
      ".inst 0x4f60f8c8  // bfdot v8.4s, v6.8h, v0.h[3]\n"
      ".inst 0x4f61f8cc  // bfdot v12.4s, v6.8h, v1.h[3]\n"
      ".inst 0x4f62f8d0  // bfdot v16.4s, v6.8h, v2.h[3]\n"
      ".inst 0x4f63f8d4  // bfdot v20.4s, v6.8h, v3.h[3]\n"
      ".inst 0x4f64f8d8  // bfdot v24.4s, v6.8h, v4.h[3]\n"
      ".inst 0x4f65f8dc  // bfdot v28.4s, v6.8h, v5.h[3]\n"
      "ldr q6, [x10, #0xe0]\n"
      ".inst 0x4f60f8e9  // bfdot v9.4s, v7.8h, v0.h[3]\n"
      ".inst 0x4f61f8ed  // bfdot v13.4s, v7.8h, v1.h[3]\n"
      ".inst 0x4f62f8f1  // bfdot v17.4s, v7.8h, v2.h[3]\n"
      ".inst 0x4f63f8f5  // bfdot v21.4s, v7.8h, v3.h[3]\n"
      ".inst 0x4f64f8f9  // bfdot v25.4s, v7.8h, v4.h[3]\n"
      ".inst 0x4f65f8fd  // bfdot v29.4s, v7.8h, v5.h[3]\n"
      "ldr q7, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x4f60f8ca  // bfdot v10.4s, v6.8h, v0.h[3]\n"
      ".inst 0x4f61f8ce  // bfdot v14.4s, v6.8h, v1.h[3]\n"
      ".inst 0x4f62f8d2  // bfdot v18.4s, v6.8h, v2.h[3]\n"
      ".inst 0x4f63f8d6  // bfdot v22.4s, v6.8h, v3.h[3]\n"
      ".inst 0x4f64f8da  // bfdot v26.4s, v6.8h, v4.h[3]\n"
      ".inst 0x4f65f8de  // bfdot v30.4s, v6.8h, v5.h[3]\n"
      ".inst 0x4f60f8eb  // bfdot v11.4s, v7.8h, v0.h[3]\n"
      ".inst 0x4f61f8ef  // bfdot v15.4s, v7.8h, v1.h[3]\n"
      ".inst 0x4f62f8f3  // bfdot v19.4s, v7.8h, v2.h[3]\n"
      ".inst 0x4f63f8f7  // bfdot v23.4s, v7.8h, v3.h[3]\n"
      ".inst 0x4f64f8fb  // bfdot v27.4s, v7.8h, v4.h[3]\n"
      ".inst 0x4f65f8ff  // bfdot v31.4s, v7.8h, v5.h[3]\n"
      "195:"  // Height 6: Multiply loop: Main loop skip
      "cbz x27, 199f\n"
      "cmp x27, #0x2\n"
      "blt 197f\n"
      "196:"  // Height 6: Multiply loop: Odd block loop
      "ldr s7, [x26], #0x4\n"
      "ldr s6, [x25], #0x4\n"
      "sub x27, x27, #0x2\n"
      "cmp x27, #0x2\n"
      "ldr s5, [x24], #0x4\n"
      "ldr s4, [x23], #0x4\n"
      "ldr s3, [x22], #0x4\n"
      "ldr s2, [x21], #0x4\n"
      "ldr q1, [x10, #0x0]\n"
      "ldr q0, [x10, #0x10]\n"
      ".inst 0x4f47f028  // bfdot v8.4s, v1.8h, v7.h[0]\n"
      ".inst 0x4f46f02c  // bfdot v12.4s, v1.8h, v6.h[0]\n"
      ".inst 0x4f45f030  // bfdot v16.4s, v1.8h, v5.h[0]\n"
      ".inst 0x4f44f034  // bfdot v20.4s, v1.8h, v4.h[0]\n"
      ".inst 0x4f43f038  // bfdot v24.4s, v1.8h, v3.h[0]\n"
      ".inst 0x4f42f03c  // bfdot v28.4s, v1.8h, v2.h[0]\n"
      "ldr q1, [x10, #0x20]\n"
      ".inst 0x4f47f009  // bfdot v9.4s, v0.8h, v7.h[0]\n"
      ".inst 0x4f46f00d  // bfdot v13.4s, v0.8h, v6.h[0]\n"
      ".inst 0x4f45f011  // bfdot v17.4s, v0.8h, v5.h[0]\n"
      ".inst 0x4f44f015  // bfdot v21.4s, v0.8h, v4.h[0]\n"
      ".inst 0x4f43f019  // bfdot v25.4s, v0.8h, v3.h[0]\n"
      ".inst 0x4f42f01d  // bfdot v29.4s, v0.8h, v2.h[0]\n"
      "ldr q0, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f47f02a  // bfdot v10.4s, v1.8h, v7.h[0]\n"
      ".inst 0x4f46f02e  // bfdot v14.4s, v1.8h, v6.h[0]\n"
      ".inst 0x4f45f032  // bfdot v18.4s, v1.8h, v5.h[0]\n"
      ".inst 0x4f44f036  // bfdot v22.4s, v1.8h, v4.h[0]\n"
      ".inst 0x4f43f03a  // bfdot v26.4s, v1.8h, v3.h[0]\n"
      ".inst 0x4f42f03e  // bfdot v30.4s, v1.8h, v2.h[0]\n"
      ".inst 0x4f47f00b  // bfdot v11.4s, v0.8h, v7.h[0]\n"
      ".inst 0x4f46f00f  // bfdot v15.4s, v0.8h, v6.h[0]\n"
      ".inst 0x4f45f013  // bfdot v19.4s, v0.8h, v5.h[0]\n"
      ".inst 0x4f44f017  // bfdot v23.4s, v0.8h, v4.h[0]\n"
      ".inst 0x4f43f01b  // bfdot v27.4s, v0.8h, v3.h[0]\n"
      ".inst 0x4f42f01f  // bfdot v31.4s, v0.8h, v2.h[0]\n"
      "bge 196b\n"
      "197:"  // Height 6: Multiply loop: Skip odd blocks
      "cbz x27, 199f\n"
      "ldr h0, [x26, #0x0]\n"
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "ldr h3, [x23, #0x0]\n"
      "ldr h4, [x22, #0x0]\n"
      "ldr h5, [x21, #0x0]\n"
      "198:"  // Height 6: Multiply loop: Ragged operand read: Done
      "ldr q7, [x10, #0x0]\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x4f40f0e8  // bfdot v8.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ec  // bfdot v12.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f0  // bfdot v16.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f4  // bfdot v20.4s, v7.8h, v3.h[0]\n"
      ".inst 0x4f44f0f8  // bfdot v24.4s, v7.8h, v4.h[0]\n"
      ".inst 0x4f45f0fc  // bfdot v28.4s, v7.8h, v5.h[0]\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x4f40f0c9  // bfdot v9.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cd  // bfdot v13.4s, v6.8h, v1.h[0]\n"
      ".inst 0x4f42f0d1  // bfdot v17.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d5  // bfdot v21.4s, v6.8h, v3.h[0]\n"
      ".inst 0x4f44f0d9  // bfdot v25.4s, v6.8h, v4.h[0]\n"
      ".inst 0x4f45f0dd  // bfdot v29.4s, v6.8h, v5.h[0]\n"
      "ldr q6, [x10, #0x30]\n"
      "add x10, x10, #0x40\n"
      ".inst 0x4f40f0ea  // bfdot v10.4s, v7.8h, v0.h[0]\n"
      ".inst 0x4f41f0ee  // bfdot v14.4s, v7.8h, v1.h[0]\n"
      ".inst 0x4f42f0f2  // bfdot v18.4s, v7.8h, v2.h[0]\n"
      ".inst 0x4f43f0f6  // bfdot v22.4s, v7.8h, v3.h[0]\n"
      ".inst 0x4f44f0fa  // bfdot v26.4s, v7.8h, v4.h[0]\n"
      ".inst 0x4f45f0fe  // bfdot v30.4s, v7.8h, v5.h[0]\n"
      ".inst 0x4f40f0cb  // bfdot v11.4s, v6.8h, v0.h[0]\n"
      ".inst 0x4f41f0cf  // bfdot v15.4s, v6.8h, v1.h[0]\n"
      ".inst 0x4f42f0d3  // bfdot v19.4s, v6.8h, v2.h[0]\n"
      ".inst 0x4f43f0d7  // bfdot v23.4s, v6.8h, v3.h[0]\n"
      ".inst 0x4f44f0db  // bfdot v27.4s, v6.8h, v4.h[0]\n"
      ".inst 0x4f45f0df  // bfdot v31.4s, v6.8h, v5.h[0]\n"
      "199:"  // Height 6: Multiply loop: No odd multiplies
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 190b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "add x23, x24, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "add x21, x22, x20, LSL #2\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "prfm pstl1keep, [x22, #0x0]\n"
      "prfm pstl1keep, [x21, #0x0]\n"
      "tbz %x[flags], #1, 200f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1r { v1.4s }, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1r { v0.4s }, [x20]\n"
      "fmin v8.4s, v8.4s, v1.4s\n"
      "fmin v9.4s, v9.4s, v1.4s\n"
      "fmin v10.4s, v10.4s, v1.4s\n"
      "fmin v11.4s, v11.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v1.4s\n"
      "fmin v13.4s, v13.4s, v1.4s\n"
      "fmin v14.4s, v14.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v1.4s\n"
      "fmin v16.4s, v16.4s, v1.4s\n"
      "fmin v17.4s, v17.4s, v1.4s\n"
      "fmin v18.4s, v18.4s, v1.4s\n"
      "fmin v19.4s, v19.4s, v1.4s\n"
      "fmin v20.4s, v20.4s, v1.4s\n"
      "fmin v21.4s, v21.4s, v1.4s\n"
      "fmin v22.4s, v22.4s, v1.4s\n"
      "fmin v23.4s, v23.4s, v1.4s\n"
      "fmin v24.4s, v24.4s, v1.4s\n"
      "fmin v25.4s, v25.4s, v1.4s\n"
      "fmin v26.4s, v26.4s, v1.4s\n"
      "fmin v27.4s, v27.4s, v1.4s\n"
      "fmin v28.4s, v28.4s, v1.4s\n"
      "fmin v29.4s, v29.4s, v1.4s\n"
      "fmin v30.4s, v30.4s, v1.4s\n"
      "fmin v31.4s, v31.4s, v1.4s\n"
      "fmax v8.4s, v8.4s, v0.4s\n"
      "fmax v9.4s, v9.4s, v0.4s\n"
      "fmax v10.4s, v10.4s, v0.4s\n"
      "fmax v11.4s, v11.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v0.4s\n"
      "fmax v13.4s, v13.4s, v0.4s\n"
      "fmax v14.4s, v14.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v0.4s\n"
      "fmax v16.4s, v16.4s, v0.4s\n"
      "fmax v17.4s, v17.4s, v0.4s\n"
      "fmax v18.4s, v18.4s, v0.4s\n"
      "fmax v19.4s, v19.4s, v0.4s\n"
      "fmax v20.4s, v20.4s, v0.4s\n"
      "fmax v21.4s, v21.4s, v0.4s\n"
      "fmax v22.4s, v22.4s, v0.4s\n"
      "fmax v23.4s, v23.4s, v0.4s\n"
      "fmax v24.4s, v24.4s, v0.4s\n"
      "fmax v25.4s, v25.4s, v0.4s\n"
      "fmax v26.4s, v26.4s, v0.4s\n"
      "fmax v27.4s, v27.4s, v0.4s\n"
      "fmax v28.4s, v28.4s, v0.4s\n"
      "fmax v29.4s, v29.4s, v0.4s\n"
      "fmax v30.4s, v30.4s, v0.4s\n"
      "fmax v31.4s, v31.4s, v0.4s\n"
      "200:"  // Height 6: No activation
      "cmp x11, #0x10\n"
      "bge 209f\n"
      "tbz x11, #3, 204f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v9.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v13.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v17.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v21.4s }, [x23], #0x10\n"
      "st1 { v24.4s }, [x22], #0x10\n"
      "st1 { v25.4s }, [x22], #0x10\n"
      "st1 { v28.4s }, [x21], #0x10\n"
      "st1 { v29.4s }, [x21], #0x10\n"
      "tbz x11, #2, 202f\n"
      "st1 { v10.4s }, [x9], #0x10\n"
      "st1 { v14.4s }, [x25], #0x10\n"
      "st1 { v18.4s }, [x24], #0x10\n"
      "st1 { v22.4s }, [x23], #0x10\n"
      "st1 { v26.4s }, [x22], #0x10\n"
      "st1 { v30.4s }, [x21], #0x10\n"
      "tbz x11, #1, 201f\n"
      "str d11, [x9], #0x8\n"
      "str d15, [x25], #0x8\n"
      "str d19, [x24], #0x8\n"
      "str d23, [x23], #0x8\n"
      "str d27, [x22], #0x8\n"
      "str d31, [x21], #0x8\n"
      "tbz x11, #0, 208f\n"
      "st1 { v11.s }[2], [x9]\n"
      "st1 { v15.s }[2], [x25]\n"
      "st1 { v19.s }[2], [x24]\n"
      "st1 { v23.s }[2], [x23]\n"
      "st1 { v27.s }[2], [x22]\n"
      "st1 { v31.s }[2], [x21]\n"
      "b 208f\n"
      "201:"  // Height 6: Partial direct writeback: partial_1_12
      "tbz x11, #0, 208f\n"
      "str s11, [x9, #0x0]\n"
      "str s15, [x25, #0x0]\n"
      "str s19, [x24, #0x0]\n"
      "str s23, [x23, #0x0]\n"
      "str s27, [x22, #0x0]\n"
      "str s31, [x21, #0x0]\n"
      "b 208f\n"
      "202:"  // Height 6: Partial direct writeback: partial_2_8
      "tbz x11, #1, 203f\n"
      "str d10, [x9], #0x8\n"
      "str d14, [x25], #0x8\n"
      "str d18, [x24], #0x8\n"
      "str d22, [x23], #0x8\n"
      "str d26, [x22], #0x8\n"
      "str d30, [x21], #0x8\n"
      "tbz x11, #0, 208f\n"
      "st1 { v10.s }[2], [x9]\n"
      "st1 { v14.s }[2], [x25]\n"
      "st1 { v18.s }[2], [x24]\n"
      "st1 { v22.s }[2], [x23]\n"
      "st1 { v26.s }[2], [x22]\n"
      "st1 { v30.s }[2], [x21]\n"
      "b 208f\n"
      "203:"  // Height 6: Partial direct writeback: partial_1_8
      "tbz x11, #0, 208f\n"
      "str s10, [x9, #0x0]\n"
      "str s14, [x25, #0x0]\n"
      "str s18, [x24, #0x0]\n"
      "str s22, [x23, #0x0]\n"
      "str s26, [x22, #0x0]\n"
      "str s30, [x21, #0x0]\n"
      "b 208f\n"
      "204:"  // Height 6: Partial direct writeback: partial_4_0
      "tbz x11, #2, 206f\n"
      "st1 { v8.4s }, [x9], #0x10\n"
      "st1 { v12.4s }, [x25], #0x10\n"
      "st1 { v16.4s }, [x24], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v24.4s }, [x22], #0x10\n"
      "st1 { v28.4s }, [x21], #0x10\n"
      "tbz x11, #1, 205f\n"
      "str d9, [x9], #0x8\n"
      "str d13, [x25], #0x8\n"
      "str d17, [x24], #0x8\n"
      "str d21, [x23], #0x8\n"
      "str d25, [x22], #0x8\n"
      "str d29, [x21], #0x8\n"
      "tbz x11, #0, 208f\n"
      "st1 { v9.s }[2], [x9]\n"
      "st1 { v13.s }[2], [x25]\n"
      "st1 { v17.s }[2], [x24]\n"
      "st1 { v21.s }[2], [x23]\n"
      "st1 { v25.s }[2], [x22]\n"
      "st1 { v29.s }[2], [x21]\n"
      "b 208f\n"
      "205:"  // Height 6: Partial direct writeback: partial_1_4
      "tbz x11, #0, 208f\n"
      "str s9, [x9, #0x0]\n"
      "str s13, [x25, #0x0]\n"
      "str s17, [x24, #0x0]\n"
      "str s21, [x23, #0x0]\n"
      "str s25, [x22, #0x0]\n"
      "str s29, [x21, #0x0]\n"
      "b 208f\n"
      "206:"  // Height 6: Partial direct writeback: partial_2_0
      "tbz x11, #1, 207f\n"
      "str d8, [x9], #0x8\n"
      "str d12, [x25], #0x8\n"
      "str d16, [x24], #0x8\n"
      "str d20, [x23], #0x8\n"
      "str d24, [x22], #0x8\n"
      "str d28, [x21], #0x8\n"
      "tbz x11, #0, 208f\n"
      "st1 { v8.s }[2], [x9]\n"
      "st1 { v12.s }[2], [x25]\n"
      "st1 { v16.s }[2], [x24]\n"
      "st1 { v20.s }[2], [x23]\n"
      "st1 { v24.s }[2], [x22]\n"
      "st1 { v28.s }[2], [x21]\n"
      "b 208f\n"
      "207:"  // Height 6: Partial direct writeback: partial_1_0
      "str s8, [x9, #0x0]\n"
      "str s12, [x25, #0x0]\n"
      "str s16, [x24, #0x0]\n"
      "str s20, [x23, #0x0]\n"
      "str s24, [x22, #0x0]\n"
      "str s28, [x21, #0x0]\n"
      "208:"  // Height 6: Partial direct writeback: Done
      "b 210f\n"
      "209:"  // Height 6: Full writeback
      "str q8, [x9, #0x0]\n"
      "str q9, [x9, #0x10]\n"
      "str q10, [x9, #0x20]\n"
      "str q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "str q12, [x25, #0x0]\n"
      "str q13, [x25, #0x10]\n"
      "str q14, [x25, #0x20]\n"
      "str q15, [x25, #0x30]\n"
      "str q16, [x24, #0x0]\n"
      "str q17, [x24, #0x10]\n"
      "str q18, [x24, #0x20]\n"
      "str q19, [x24, #0x30]\n"
      "str q20, [x23, #0x0]\n"
      "str q21, [x23, #0x10]\n"
      "str q22, [x23, #0x20]\n"
      "str q23, [x23, #0x30]\n"
      "str q24, [x22, #0x0]\n"
      "str q25, [x22, #0x10]\n"
      "str q26, [x22, #0x20]\n"
      "str q27, [x22, #0x30]\n"
      "str q28, [x21, #0x0]\n"
      "str q29, [x21, #0x10]\n"
      "str q30, [x21, #0x20]\n"
      "str q31, [x21, #0x30]\n"
      "210:"  // Height 6: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 177b\n"
      "subs %x[M], %x[M], #0x6\n"
      "beq 212f\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 211f\n"
      "add x21, x21, #0x6\n"
      "str x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "b 1b\n"
      "211:"  // Update direct input
      "mov x20, #0xc\n"
      "madd %x[input_ptr], x20, x21, %x[input_ptr]\n"
      "b 1b\n"
      "212:"  // Exit
      : [M] "+&r" (M), [input_ptr] "+&r" (input_ptr), [output_ptr] "+&r" (output_ptr)
      : [args_ptr] "r" (&ka), [bias] "r" (bias), [flags] "r" (flags), [offset_max] "I" (offsetof(KernelArgs, maxval)), [offset_min] "I" (offsetof(KernelArgs, minval)), [offsetof_B_ptr] "I" (offsetof(KernelArgs, B_ptr)), [offsetof_N] "I" (offsetof(KernelArgs, N)), [offsetof_input_initial_col] "I" (offsetof(KernelArgs, input_initial_col)), [offsetof_input_offset] "I" (offsetof(KernelArgs, input_offset)), [offsetof_num_strings] "I" (offsetof(KernelArgs, num_strings)), [offsetof_output_offset] "I" (offsetof(KernelArgs, output_offset)), [offsetof_string_lengths] "I" (offsetof(KernelArgs, string_lengths))
      : "cc", "memory", "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15", "v16", "v17", "v18", "v19", "v20", "v21", "v22", "v23", "v24", "v25", "v26", "v27", "v28", "v29", "v30", "v31", "x9", "x10", "x11", "x12", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28"
    );
}

} // namespace arm_gemm
#endif // __aarch64__
