/*
 * Copyright (c) 2021 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#ifdef __aarch64__

#include "arm_gemm.hpp"
#include "../../utils.hpp"
#include "../../bfloat.hpp"

#include <cassert>
#include <limits>

namespace arm_gemm {

void a64_hybrid_bf16fp32_mmla_6x16 (
    unsigned int num_strings, const unsigned int *string_lengths, IndirectInputArg<bfloat16> A_arg,
    size_t M, size_t N, const bfloat16 *B_ptr, IndirectOutputArg<float> output_arg,
    const float *bias, Activation act, bool accumulate
)
{
    struct KernelArgs {
        float maxval = static_cast<float>(std::numeric_limits<float>::infinity());
        float minval = - static_cast<float>(std::numeric_limits<float>::infinity());
        unsigned int num_strings = {};
        const unsigned int *string_lengths = {};
        size_t N = {};
        const bfloat16 *B_ptr = {};
        size_t output_offset = {};
        size_t input_initial_col = {};
        size_t input_offset = {};
    } ka;

    unsigned long flags=0;
    void *output_ptr;
    void *input_ptr;

    if (output_arg.is_indirect) {
        output_ptr=(void *)(output_arg.indirect.ptr);
        ka.output_offset=output_arg.indirect.offset;
        flags |= 0x4;
    } else {
        output_ptr=(void *)(output_arg.direct.base);
        ka.output_offset=output_arg.direct.stride;
    }

    if (A_arg.is_indirect) {
        input_ptr=(void *)(A_arg.indirect.ptr);
        ka.input_offset=A_arg.indirect.start_row;
        ka.input_initial_col=A_arg.indirect.start_col;
        flags |= 0x8;
    } else {
        assert(num_strings==1);
        input_ptr=(void *)(A_arg.direct.base);
        ka.input_offset=A_arg.direct.stride;
    }
    if (accumulate) {
        flags |= 0x1;
    }
    ka.num_strings = num_strings;
    ka.string_lengths = string_lengths;
    ka.N = N;
    ka.B_ptr = B_ptr;
    switch(act.type) {
        default:
        case Activation::Type::None:
            break;
        case Activation::Type::BoundedReLU:
            ka.maxval = static_cast<float>(act.param1);
            /* fall through */
        case Activation::Type::ReLU:
            ka.minval = 0;
            flags |= 0x2;
            break;
    }
    __asm__ __volatile__(

      "1:"  // Row loop
      "cmp %x[M], #0x6\n"
      "bge 186f\n"
      "cmp %x[M], #0x4\n"
      "bgt 149f\n"
      "beq 112f\n"
      "cmp %x[M], #0x2\n"
      "bgt 75f\n"
      "beq 38f\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[bias]\n"
      "mov x28, %x[output_ptr]\n"
      "2:"  // Height 1: Column loop
      "cbz x9, 3f\n"
      "ldr q8, [x9, #0x0]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "ldr q9, [x9, #0x10]\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "add x9, x9, #0x40\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "b 15f\n"
      "3:"  // Height 1: no bias
      "tbz %x[flags], #0, 14f\n"
      "cmp x11, #0x10\n"
      "bge 12f\n"
      "tbz x11, #3, 7f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v10.4s }, [x28], #0x10\n"
      "tbz x11, #2, 5f\n"
      "ld1 { v11.4s }, [x28], #0x10\n"
      "tbz x11, #1, 4f\n"
      "mov x19, #0x38\n"
      "ldr d16, [x28], #0x8\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v16.s }[2], [x28]\n"
      "b 11f\n"
      "4:"  // Height 1: Partial accumulate: partial_1_12
      "mov x19, #0x30\n"
      "tbz x11, #0, 11f\n"
      "ldr s16, [x28, #0x0]\n"
      "b 11f\n"
      "5:"  // Height 1: Partial accumulate: partial_2_8
      "tbz x11, #1, 6f\n"
      "ldr d11, [x28], #0x8\n"
      "mov x19, #0x28\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v11.s }[2], [x28]\n"
      "b 11f\n"
      "6:"  // Height 1: Partial accumulate: partial_1_8
      "mov x19, #0x20\n"
      "tbz x11, #0, 11f\n"
      "ldr s11, [x28, #0x0]\n"
      "b 11f\n"
      "7:"  // Height 1: Partial accumulate: partial_4_0
      "tbz x11, #2, 9f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "tbz x11, #1, 8f\n"
      "ldr d10, [x28], #0x8\n"
      "mov x19, #0x18\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v10.s }[2], [x28]\n"
      "b 11f\n"
      "8:"  // Height 1: Partial accumulate: partial_1_4
      "mov x19, #0x10\n"
      "tbz x11, #0, 11f\n"
      "ldr s10, [x28, #0x0]\n"
      "b 11f\n"
      "9:"  // Height 1: Partial accumulate: partial_2_0
      "tbz x11, #1, 10f\n"
      "ldr d9, [x28], #0x8\n"
      "mov x19, #0x8\n"
      "tbz x11, #0, 11f\n"
      "ld1 { v9.s }[2], [x28]\n"
      "b 11f\n"
      "10:"  // Height 1: Partial accumulate: partial_1_0
      "ldr s9, [x28, #0x0]\n"
      "mov x19, #0x0\n"
      "11:"  // Height 1: Partial accumulate: Done
      "sub x28, x28, x19\n"
      "b 13f\n"
      "12:"  // Height 1: full accumulate
      "ldr q9, [x28, #0x0]\n"
      "ldr q10, [x28, #0x10]\n"
      "ldr q11, [x28, #0x20]\n"
      "ldr q16, [x28, #0x30]\n"
      "13:"  // Height 1: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "b 15f\n"
      "14:"  // Height 1: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "15:"  // Height 1: setup done
      "mov x27, #0x0\n"
      "16:"  // Height 1: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w26, [x20, x27, LSL #0x2]\n"
      "tbz %x[flags], #3, 17f\n"
      "ldr x20, [%x[input_ptr], x27, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x25, [x20, #0x0]\n"
      "cbnz x27, 18f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x25, x25, x19, LSL #1\n"
      "b 18f\n"
      "17:"  // Height 1: setup direct input
      "mov x25, %x[input_ptr]\n"
      "18:"  // Height 1: input setup done
      "cmp x26, #0x8\n"
      "blt 21f\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x26, #0x10\n"
      "blt 20f\n"
      "19:"  // Height 1: Multiply loop: Main loop head
      "movi v2.16b, #0x0\n"
      "ldr q7, [x10, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "sub x26, x26, #0x8\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "cmp x26, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "ldr q1, [x25, #0x0]\n"
      "bge 19b\n"
      "20:"  // Height 1: Multiply loop: Single iteration only
      "movi v2.16b, #0x0\n"
      "ldr q7, [x10, #0x0]\n"
      "sub x26, x26, #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x25, x25, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "21:"  // Height 1: Multiply loop: Main loop skip
      "cbz x26, 26f\n"
      "cmp x26, #0x4\n"
      "blt 23f\n"
      "22:"  // Height 1: Multiply loop: Odd block loop
      "movi v2.16b, #0x0\n"
      "ldr d1, [x25], #0x8\n"
      "sub x26, x26, #0x4\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q6, [x10, #0x0]\n"
      "cmp x26, #0x4\n"
      ".inst 0x6e46ec08  // bfmmla v8.4s, v0.8h, v6.8h\n"
      "ldr q7, [x10, #0x10]\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e47ec0c  // bfmmla v12.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x30]\n"
      ".inst 0x6e46ec09  // bfmmla v9.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x6e47ec0d  // bfmmla v13.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x6e46ec0a  // bfmmla v10.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x6e47ec0e  // bfmmla v14.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e46ec0b  // bfmmla v11.4s, v0.8h, v6.8h\n"
      ".inst 0x6e47ec0f  // bfmmla v15.4s, v0.8h, v7.8h\n"
      "bge 22b\n"
      "cbz x26, 26f\n"
      "23:"  // Height 1: Multiply loop: Skip odd blocks
      "tbz x26, #1, 24f\n"
      "ldr s1, [x25], #0x4\n"
      "tbz x26, #0, 25f\n"
      "ld1 { v1.h }[2], [x25]\n"
      "b 25f\n"
      "24:"  // Height 1: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x25, #0x0]\n"
      "25:"  // Height 1: Multiply loop: Ragged operand read: Done
      "movi v2.16b, #0x0\n"
      "ldr q7, [x10, #0x0]\n"
      "ldr q6, [x10, #0x10]\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      "26:"  // Height 1: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x27, x27, #0x1\n"
      "cmp x27, x19\n"
      "bne 16b\n"
      "prfm pstl1keep, [x28, #0x0]\n"
      "tbz %x[flags], #1, 27f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1r { v1.4s }, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1r { v0.4s }, [x19]\n"
      "fmin v8.4s, v8.4s, v0.4s\n"
      "fmin v9.4s, v9.4s, v0.4s\n"
      "fmin v10.4s, v10.4s, v0.4s\n"
      "fmin v11.4s, v11.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v1.4s\n"
      "fmax v9.4s, v9.4s, v1.4s\n"
      "fmax v10.4s, v10.4s, v1.4s\n"
      "fmax v11.4s, v11.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v0.4s\n"
      "fmin v13.4s, v13.4s, v0.4s\n"
      "fmin v14.4s, v14.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v1.4s\n"
      "fmax v13.4s, v13.4s, v1.4s\n"
      "fmax v14.4s, v14.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v1.4s\n"
      "27:"  // Height 1: No activation
      "uzp1 v8.2d, v8.2d, v12.2d\n"
      "cmp x11, #0x10\n"
      "uzp1 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v11.2d, v11.2d, v15.2d\n"
      "bge 36f\n"
      "tbz x11, #3, 31f\n"
      "st1 { v8.4s }, [x28], #0x10\n"
      "st1 { v9.4s }, [x28], #0x10\n"
      "tbz x11, #2, 29f\n"
      "st1 { v10.4s }, [x28], #0x10\n"
      "tbz x11, #1, 28f\n"
      "str d11, [x28], #0x8\n"
      "tbz x11, #0, 35f\n"
      "st1 { v11.s }[2], [x28]\n"
      "b 35f\n"
      "28:"  // Height 1: Partial direct writeback: partial_1_12
      "tbz x11, #0, 35f\n"
      "str s11, [x28, #0x0]\n"
      "b 35f\n"
      "29:"  // Height 1: Partial direct writeback: partial_2_8
      "tbz x11, #1, 30f\n"
      "str d10, [x28], #0x8\n"
      "tbz x11, #0, 35f\n"
      "st1 { v10.s }[2], [x28]\n"
      "b 35f\n"
      "30:"  // Height 1: Partial direct writeback: partial_1_8
      "tbz x11, #0, 35f\n"
      "str s10, [x28, #0x0]\n"
      "b 35f\n"
      "31:"  // Height 1: Partial direct writeback: partial_4_0
      "tbz x11, #2, 33f\n"
      "st1 { v8.4s }, [x28], #0x10\n"
      "tbz x11, #1, 32f\n"
      "str d9, [x28], #0x8\n"
      "tbz x11, #0, 35f\n"
      "st1 { v9.s }[2], [x28]\n"
      "b 35f\n"
      "32:"  // Height 1: Partial direct writeback: partial_1_4
      "tbz x11, #0, 35f\n"
      "str s9, [x28, #0x0]\n"
      "b 35f\n"
      "33:"  // Height 1: Partial direct writeback: partial_2_0
      "tbz x11, #1, 34f\n"
      "str d8, [x28], #0x8\n"
      "tbz x11, #0, 35f\n"
      "st1 { v8.s }[2], [x28]\n"
      "b 35f\n"
      "34:"  // Height 1: Partial direct writeback: partial_1_0
      "str s8, [x28, #0x0]\n"
      "35:"  // Height 1: Partial direct writeback: Done
      "b 37f\n"
      "36:"  // Height 1: Full writeback
      "str q8, [x28, #0x0]\n"
      "str q9, [x28, #0x10]\n"
      "str q10, [x28, #0x20]\n"
      "str q11, [x28, #0x30]\n"
      "add x28, x28, #0x40\n"
      "37:"  // Height 1: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 2b\n"
      "b 224f\n"
      "38:"  // Height 2
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x9, %x[bias]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x28, %x[output_ptr]\n"
      "39:"  // Height 2: Column loop
      "cbz x9, 40f\n"
      "ldr q8, [x9, #0x0]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "ldr q9, [x9, #0x10]\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x9, #0x20]\n"
      "ldr q11, [x9, #0x30]\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "add x9, x9, #0x40\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "b 52f\n"
      "40:"  // Height 2: no bias
      "tbz %x[flags], #0, 51f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "cmp x11, #0x10\n"
      "add x24, x28, x19, LSL #2\n"
      "bge 49f\n"
      "tbz x11, #3, 44f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v10.4s }, [x28], #0x10\n"
      "ld1 { v13.4s }, [x24], #0x10\n"
      "tbz x11, #2, 42f\n"
      "ld1 { v11.4s }, [x28], #0x10\n"
      "ld1 { v14.4s }, [x24], #0x10\n"
      "tbz x11, #1, 41f\n"
      "mov x19, #0x38\n"
      "ldr d16, [x28], #0x8\n"
      "ldr d15, [x24], #0x8\n"
      "tbz x11, #0, 48f\n"
      "ld1 { v16.s }[2], [x28]\n"
      "ld1 { v15.s }[2], [x24]\n"
      "b 48f\n"
      "41:"  // Height 2: Partial accumulate: partial_1_12
      "mov x19, #0x30\n"
      "tbz x11, #0, 48f\n"
      "ldr s16, [x28, #0x0]\n"
      "ldr s15, [x24, #0x0]\n"
      "b 48f\n"
      "42:"  // Height 2: Partial accumulate: partial_2_8
      "tbz x11, #1, 43f\n"
      "ldr d11, [x28], #0x8\n"
      "ldr d14, [x24], #0x8\n"
      "mov x19, #0x28\n"
      "tbz x11, #0, 48f\n"
      "ld1 { v11.s }[2], [x28]\n"
      "ld1 { v14.s }[2], [x24]\n"
      "b 48f\n"
      "43:"  // Height 2: Partial accumulate: partial_1_8
      "mov x19, #0x20\n"
      "tbz x11, #0, 48f\n"
      "ldr s11, [x28, #0x0]\n"
      "ldr s14, [x24, #0x0]\n"
      "b 48f\n"
      "44:"  // Height 2: Partial accumulate: partial_4_0
      "tbz x11, #2, 46f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "tbz x11, #1, 45f\n"
      "mov x19, #0x18\n"
      "ldr d10, [x28], #0x8\n"
      "ldr d13, [x24], #0x8\n"
      "tbz x11, #0, 48f\n"
      "ld1 { v10.s }[2], [x28]\n"
      "ld1 { v13.s }[2], [x24]\n"
      "b 48f\n"
      "45:"  // Height 2: Partial accumulate: partial_1_4
      "mov x19, #0x10\n"
      "tbz x11, #0, 48f\n"
      "ldr s10, [x28, #0x0]\n"
      "ldr s13, [x24, #0x0]\n"
      "b 48f\n"
      "46:"  // Height 2: Partial accumulate: partial_2_0
      "tbz x11, #1, 47f\n"
      "ldr d9, [x28], #0x8\n"
      "ldr d12, [x24], #0x8\n"
      "mov x19, #0x8\n"
      "tbz x11, #0, 48f\n"
      "ld1 { v9.s }[2], [x28]\n"
      "ld1 { v12.s }[2], [x24]\n"
      "b 48f\n"
      "47:"  // Height 2: Partial accumulate: partial_1_0
      "ldr s9, [x28, #0x0]\n"
      "mov x19, #0x0\n"
      "ldr s12, [x24, #0x0]\n"
      "48:"  // Height 2: Partial accumulate: Done
      "sub x28, x28, x19\n"
      "b 50f\n"
      "49:"  // Height 2: full accumulate
      "ldr q9, [x28, #0x0]\n"
      "ldr q10, [x28, #0x10]\n"
      "ldr q11, [x28, #0x20]\n"
      "ldr q16, [x28, #0x30]\n"
      "ldr q12, [x24, #0x0]\n"
      "ldr q13, [x24, #0x10]\n"
      "ldr q14, [x24, #0x20]\n"
      "ldr q15, [x24, #0x30]\n"
      "50:"  // Height 2: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "b 52f\n"
      "51:"  // Height 2: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "52:"  // Height 2: setup done
      "mov x27, #0x0\n"
      "53:"  // Height 2: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w26, [x20, x27, LSL #0x2]\n"
      "tbz %x[flags], #3, 54f\n"
      "ldr x20, [%x[input_ptr], x27, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x25, [x20, #0x0]\n"
      "ldr x24, [x20, #0x8]\n"
      "cbnz x27, 55f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x25, x25, x19, LSL #1\n"
      "add x24, x24, x19, LSL #1\n"
      "b 55f\n"
      "54:"  // Height 2: setup direct input
      "mov x25, %x[input_ptr]\n"
      "add x24, x25, x19, LSL #1\n"
      "55:"  // Height 2: input setup done
      "cmp x26, #0x8\n"
      "blt 58f\n"
      "ldr q1, [x25, #0x0]\n"
      "ldr q2, [x24, #0x0]\n"
      "cmp x26, #0x10\n"
      "blt 57f\n"
      "56:"  // Height 2: Multiply loop: Main loop head
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      "sub x26, x26, #0x8\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      "cmp x26, #0x10\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      "ldr q2, [x24, #0x0]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "ldr q1, [x25, #0x0]\n"
      "bge 56b\n"
      "57:"  // Height 2: Multiply loop: Single iteration only
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "sub x26, x26, #0x8\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "58:"  // Height 2: Multiply loop: Main loop skip
      "cbz x26, 63f\n"
      "cmp x26, #0x4\n"
      "blt 60f\n"
      "59:"  // Height 2: Multiply loop: Odd block loop
      "ldr d1, [x25], #0x8\n"
      "sub x26, x26, #0x4\n"
      "ldr d2, [x24], #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q6, [x10, #0x0]\n"
      "cmp x26, #0x4\n"
      ".inst 0x6e46ec08  // bfmmla v8.4s, v0.8h, v6.8h\n"
      "ldr q7, [x10, #0x10]\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e47ec0c  // bfmmla v12.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x30]\n"
      ".inst 0x6e46ec09  // bfmmla v9.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x6e47ec0d  // bfmmla v13.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x6e46ec0a  // bfmmla v10.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x6e47ec0e  // bfmmla v14.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e46ec0b  // bfmmla v11.4s, v0.8h, v6.8h\n"
      ".inst 0x6e47ec0f  // bfmmla v15.4s, v0.8h, v7.8h\n"
      "bge 59b\n"
      "cbz x26, 63f\n"
      "60:"  // Height 2: Multiply loop: Skip odd blocks
      "tbz x26, #1, 61f\n"
      "ldr s1, [x25], #0x4\n"
      "ldr s2, [x24], #0x4\n"
      "tbz x26, #0, 62f\n"
      "ld1 { v1.h }[2], [x25]\n"
      "ld1 { v2.h }[2], [x24]\n"
      "b 62f\n"
      "61:"  // Height 2: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "62:"  // Height 2: Multiply loop: Ragged operand read: Done
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      "63:"  // Height 2: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x27, x27, #0x1\n"
      "cmp x27, x19\n"
      "bne 53b\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "prfm pstl1keep, [x28, #0x0]\n"
      "add x24, x28, x19, LSL #2\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "tbz %x[flags], #1, 64f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1r { v1.4s }, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1r { v0.4s }, [x19]\n"
      "fmin v8.4s, v8.4s, v0.4s\n"
      "fmin v9.4s, v9.4s, v0.4s\n"
      "fmin v10.4s, v10.4s, v0.4s\n"
      "fmin v11.4s, v11.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v1.4s\n"
      "fmax v9.4s, v9.4s, v1.4s\n"
      "fmax v10.4s, v10.4s, v1.4s\n"
      "fmax v11.4s, v11.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v0.4s\n"
      "fmin v13.4s, v13.4s, v0.4s\n"
      "fmin v14.4s, v14.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v1.4s\n"
      "fmax v13.4s, v13.4s, v1.4s\n"
      "fmax v14.4s, v14.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v1.4s\n"
      "64:"  // Height 2: No activation
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "cmp x11, #0x10\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "bge 73f\n"
      "tbz x11, #3, 68f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v12.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v9.4s }, [x24], #0x10\n"
      "tbz x11, #2, 66f\n"
      "st1 { v13.4s }, [x28], #0x10\n"
      "st1 { v10.4s }, [x24], #0x10\n"
      "tbz x11, #1, 65f\n"
      "str d14, [x28], #0x8\n"
      "str d11, [x24], #0x8\n"
      "tbz x11, #0, 72f\n"
      "st1 { v14.s }[2], [x28]\n"
      "st1 { v11.s }[2], [x24]\n"
      "b 72f\n"
      "65:"  // Height 2: Partial direct writeback: partial_1_12
      "tbz x11, #0, 72f\n"
      "str s14, [x28, #0x0]\n"
      "str s11, [x24, #0x0]\n"
      "b 72f\n"
      "66:"  // Height 2: Partial direct writeback: partial_2_8
      "tbz x11, #1, 67f\n"
      "str d13, [x28], #0x8\n"
      "str d10, [x24], #0x8\n"
      "tbz x11, #0, 72f\n"
      "st1 { v13.s }[2], [x28]\n"
      "st1 { v10.s }[2], [x24]\n"
      "b 72f\n"
      "67:"  // Height 2: Partial direct writeback: partial_1_8
      "tbz x11, #0, 72f\n"
      "str s13, [x28, #0x0]\n"
      "str s10, [x24, #0x0]\n"
      "b 72f\n"
      "68:"  // Height 2: Partial direct writeback: partial_4_0
      "tbz x11, #2, 70f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "tbz x11, #1, 69f\n"
      "str d12, [x28], #0x8\n"
      "str d9, [x24], #0x8\n"
      "tbz x11, #0, 72f\n"
      "st1 { v12.s }[2], [x28]\n"
      "st1 { v9.s }[2], [x24]\n"
      "b 72f\n"
      "69:"  // Height 2: Partial direct writeback: partial_1_4
      "tbz x11, #0, 72f\n"
      "str s12, [x28, #0x0]\n"
      "str s9, [x24, #0x0]\n"
      "b 72f\n"
      "70:"  // Height 2: Partial direct writeback: partial_2_0
      "tbz x11, #1, 71f\n"
      "str d7, [x28], #0x8\n"
      "str d8, [x24], #0x8\n"
      "tbz x11, #0, 72f\n"
      "st1 { v7.s }[2], [x28]\n"
      "st1 { v8.s }[2], [x24]\n"
      "b 72f\n"
      "71:"  // Height 2: Partial direct writeback: partial_1_0
      "str s7, [x28, #0x0]\n"
      "str s8, [x24, #0x0]\n"
      "72:"  // Height 2: Partial direct writeback: Done
      "b 74f\n"
      "73:"  // Height 2: Full writeback
      "str q7, [x28, #0x0]\n"
      "str q12, [x28, #0x10]\n"
      "str q13, [x28, #0x20]\n"
      "str q14, [x28, #0x30]\n"
      "add x28, x28, #0x40\n"
      "str q8, [x24, #0x0]\n"
      "str q9, [x24, #0x10]\n"
      "str q10, [x24, #0x20]\n"
      "str q11, [x24, #0x30]\n"
      "74:"  // Height 2: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 39b\n"
      "b 224f\n"
      "75:"  // Height 3
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x9, %x[bias]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x28, %x[output_ptr]\n"
      "76:"  // Height 3: Column loop
      "cbz x9, 77f\n"
      "ldr q8, [x9, #0x0]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "ldr q9, [x9, #0x10]\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x9, #0x20]\n"
      "mov v16.16b, v8.16b\n"
      "ldr q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "mov v20.16b, v12.16b\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "b 89f\n"
      "77:"  // Height 3: no bias
      "tbz %x[flags], #0, 88f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "cmp x11, #0x10\n"
      "add x24, x28, x19, LSL #2\n"
      "add x23, x24, x19, LSL #2\n"
      "bge 86f\n"
      "tbz x11, #3, 81f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "ld1 { v10.4s }, [x28], #0x10\n"
      "ld1 { v13.4s }, [x24], #0x10\n"
      "ld1 { v18.4s }, [x23], #0x10\n"
      "tbz x11, #2, 79f\n"
      "ld1 { v11.4s }, [x28], #0x10\n"
      "ld1 { v14.4s }, [x24], #0x10\n"
      "ld1 { v19.4s }, [x23], #0x10\n"
      "tbz x11, #1, 78f\n"
      "mov x19, #0x38\n"
      "ldr d16, [x28], #0x8\n"
      "ldr d15, [x24], #0x8\n"
      "ldr d24, [x23], #0x8\n"
      "tbz x11, #0, 85f\n"
      "ld1 { v16.s }[2], [x28]\n"
      "ld1 { v15.s }[2], [x24]\n"
      "ld1 { v24.s }[2], [x23]\n"
      "b 85f\n"
      "78:"  // Height 3: Partial accumulate: partial_1_12
      "mov x19, #0x30\n"
      "tbz x11, #0, 85f\n"
      "ldr s16, [x28, #0x0]\n"
      "ldr s15, [x24, #0x0]\n"
      "ldr s24, [x23, #0x0]\n"
      "b 85f\n"
      "79:"  // Height 3: Partial accumulate: partial_2_8
      "tbz x11, #1, 80f\n"
      "ldr d11, [x28], #0x8\n"
      "ldr d14, [x24], #0x8\n"
      "mov x19, #0x28\n"
      "ldr d19, [x23], #0x8\n"
      "tbz x11, #0, 85f\n"
      "ld1 { v11.s }[2], [x28]\n"
      "ld1 { v14.s }[2], [x24]\n"
      "ld1 { v19.s }[2], [x23]\n"
      "b 85f\n"
      "80:"  // Height 3: Partial accumulate: partial_1_8
      "mov x19, #0x20\n"
      "tbz x11, #0, 85f\n"
      "ldr s11, [x28, #0x0]\n"
      "ldr s14, [x24, #0x0]\n"
      "ldr s19, [x23, #0x0]\n"
      "b 85f\n"
      "81:"  // Height 3: Partial accumulate: partial_4_0
      "tbz x11, #2, 83f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "tbz x11, #1, 82f\n"
      "mov x19, #0x18\n"
      "ldr d10, [x28], #0x8\n"
      "ldr d13, [x24], #0x8\n"
      "ldr d18, [x23], #0x8\n"
      "tbz x11, #0, 85f\n"
      "ld1 { v10.s }[2], [x28]\n"
      "ld1 { v13.s }[2], [x24]\n"
      "ld1 { v18.s }[2], [x23]\n"
      "b 85f\n"
      "82:"  // Height 3: Partial accumulate: partial_1_4
      "mov x19, #0x10\n"
      "tbz x11, #0, 85f\n"
      "ldr s10, [x28, #0x0]\n"
      "ldr s13, [x24, #0x0]\n"
      "ldr s18, [x23, #0x0]\n"
      "b 85f\n"
      "83:"  // Height 3: Partial accumulate: partial_2_0
      "tbz x11, #1, 84f\n"
      "ldr d9, [x28], #0x8\n"
      "ldr d12, [x24], #0x8\n"
      "mov x19, #0x8\n"
      "ldr d17, [x23], #0x8\n"
      "tbz x11, #0, 85f\n"
      "ld1 { v9.s }[2], [x28]\n"
      "ld1 { v12.s }[2], [x24]\n"
      "ld1 { v17.s }[2], [x23]\n"
      "b 85f\n"
      "84:"  // Height 3: Partial accumulate: partial_1_0
      "ldr s9, [x28, #0x0]\n"
      "mov x19, #0x0\n"
      "ldr s12, [x24, #0x0]\n"
      "ldr s17, [x23, #0x0]\n"
      "85:"  // Height 3: Partial accumulate: Done
      "sub x28, x28, x19\n"
      "b 87f\n"
      "86:"  // Height 3: full accumulate
      "ldr q9, [x28, #0x0]\n"
      "ldr q10, [x28, #0x10]\n"
      "ldr q11, [x28, #0x20]\n"
      "ldr q16, [x28, #0x30]\n"
      "ldr q12, [x24, #0x0]\n"
      "ldr q13, [x24, #0x10]\n"
      "ldr q14, [x24, #0x20]\n"
      "ldr q15, [x24, #0x30]\n"
      "ldr q17, [x23, #0x0]\n"
      "ldr q18, [x23, #0x10]\n"
      "ldr q19, [x23, #0x20]\n"
      "ldr q24, [x23, #0x30]\n"
      "87:"  // Height 3: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "b 89f\n"
      "88:"  // Height 3: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "89:"  // Height 3: setup done
      "mov x27, #0x0\n"
      "90:"  // Height 3: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w26, [x20, x27, LSL #0x2]\n"
      "tbz %x[flags], #3, 91f\n"
      "ldr x20, [%x[input_ptr], x27, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x25, [x20, #0x0]\n"
      "ldr x24, [x20, #0x8]\n"
      "ldr x23, [x20, #0x10]\n"
      "cbnz x27, 92f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x25, x25, x19, LSL #1\n"
      "add x24, x24, x19, LSL #1\n"
      "add x23, x23, x19, LSL #1\n"
      "b 92f\n"
      "91:"  // Height 3: setup direct input
      "mov x25, %x[input_ptr]\n"
      "add x24, x25, x19, LSL #1\n"
      "add x23, x24, x19, LSL #1\n"
      "92:"  // Height 3: input setup done
      "cmp x26, #0x8\n"
      "blt 95f\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x26, #0x10\n"
      "blt 94f\n"
      "93:"  // Height 3: Multiply loop: Main loop head
      "movi v4.16b, #0x0\n"
      "ldr q2, [x24, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x23, x23, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "sub x26, x26, #0x8\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "cmp x26, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      "bge 93b\n"
      "94:"  // Height 3: Multiply loop: Single iteration only
      "movi v4.16b, #0x0\n"
      "ldr q2, [x24, #0x0]\n"
      "sub x26, x26, #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x23, x23, #0x10\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      "95:"  // Height 3: Multiply loop: Main loop skip
      "cbz x26, 100f\n"
      "cmp x26, #0x4\n"
      "blt 97f\n"
      "96:"  // Height 3: Multiply loop: Odd block loop
      "movi v4.16b, #0x0\n"
      "ldr d1, [x25], #0x8\n"
      "sub x26, x26, #0x4\n"
      "ldr d2, [x24], #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr d3, [x23], #0x8\n"
      "cmp x26, #0x4\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      ".inst 0x6e46ec08  // bfmmla v8.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec50  // bfmmla v16.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e47ec0c  // bfmmla v12.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec54  // bfmmla v20.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x30]\n"
      ".inst 0x6e46ec09  // bfmmla v9.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec51  // bfmmla v17.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x6e47ec0d  // bfmmla v13.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec55  // bfmmla v21.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x6e46ec0a  // bfmmla v10.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec52  // bfmmla v18.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x6e47ec0e  // bfmmla v14.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec56  // bfmmla v22.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e46ec0b  // bfmmla v11.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec53  // bfmmla v19.4s, v2.8h, v6.8h\n"
      ".inst 0x6e47ec0f  // bfmmla v15.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec57  // bfmmla v23.4s, v2.8h, v7.8h\n"
      "bge 96b\n"
      "cbz x26, 100f\n"
      "97:"  // Height 3: Multiply loop: Skip odd blocks
      "tbz x26, #1, 98f\n"
      "ldr s1, [x25], #0x4\n"
      "ldr s2, [x24], #0x4\n"
      "ldr s3, [x23], #0x4\n"
      "tbz x26, #0, 99f\n"
      "ld1 { v1.h }[2], [x25]\n"
      "ld1 { v2.h }[2], [x24]\n"
      "ld1 { v3.h }[2], [x23]\n"
      "b 99f\n"
      "98:"  // Height 3: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "ldr h3, [x23, #0x0]\n"
      "99:"  // Height 3: Multiply loop: Ragged operand read: Done
      "movi v4.16b, #0x0\n"
      "ldr q7, [x10, #0x0]\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "100:"  // Height 3: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x27, x27, #0x1\n"
      "cmp x27, x19\n"
      "bne 90b\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "prfm pstl1keep, [x28, #0x0]\n"
      "add x24, x28, x19, LSL #2\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "add x23, x24, x19, LSL #2\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "tbz %x[flags], #1, 101f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1r { v1.4s }, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1r { v0.4s }, [x19]\n"
      "fmin v8.4s, v8.4s, v0.4s\n"
      "fmin v9.4s, v9.4s, v0.4s\n"
      "fmin v10.4s, v10.4s, v0.4s\n"
      "fmin v11.4s, v11.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v1.4s\n"
      "fmax v9.4s, v9.4s, v1.4s\n"
      "fmax v10.4s, v10.4s, v1.4s\n"
      "fmax v11.4s, v11.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v0.4s\n"
      "fmin v13.4s, v13.4s, v0.4s\n"
      "fmin v14.4s, v14.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v1.4s\n"
      "fmax v13.4s, v13.4s, v1.4s\n"
      "fmax v14.4s, v14.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v0.4s\n"
      "fmin v16.4s, v16.4s, v0.4s\n"
      "fmin v17.4s, v17.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v1.4s\n"
      "fmax v16.4s, v16.4s, v1.4s\n"
      "fmax v17.4s, v17.4s, v1.4s\n"
      "fmin v18.4s, v18.4s, v0.4s\n"
      "fmin v19.4s, v19.4s, v0.4s\n"
      "fmin v20.4s, v20.4s, v0.4s\n"
      "fmax v18.4s, v18.4s, v1.4s\n"
      "fmax v19.4s, v19.4s, v1.4s\n"
      "fmax v20.4s, v20.4s, v1.4s\n"
      "fmin v21.4s, v21.4s, v0.4s\n"
      "fmin v22.4s, v22.4s, v0.4s\n"
      "fmin v23.4s, v23.4s, v0.4s\n"
      "fmax v21.4s, v21.4s, v1.4s\n"
      "fmax v22.4s, v22.4s, v1.4s\n"
      "fmax v23.4s, v23.4s, v1.4s\n"
      "101:"  // Height 3: No activation
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "cmp x11, #0x10\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v19.2d, v19.2d, v23.2d\n"
      "bge 110f\n"
      "tbz x11, #3, 105f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v12.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v9.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "st1 { v17.4s }, [x23], #0x10\n"
      "tbz x11, #2, 103f\n"
      "st1 { v13.4s }, [x28], #0x10\n"
      "st1 { v10.4s }, [x24], #0x10\n"
      "st1 { v18.4s }, [x23], #0x10\n"
      "tbz x11, #1, 102f\n"
      "str d14, [x28], #0x8\n"
      "str d11, [x24], #0x8\n"
      "str d19, [x23], #0x8\n"
      "tbz x11, #0, 109f\n"
      "st1 { v14.s }[2], [x28]\n"
      "st1 { v11.s }[2], [x24]\n"
      "st1 { v19.s }[2], [x23]\n"
      "b 109f\n"
      "102:"  // Height 3: Partial direct writeback: partial_1_12
      "tbz x11, #0, 109f\n"
      "str s14, [x28, #0x0]\n"
      "str s11, [x24, #0x0]\n"
      "str s19, [x23, #0x0]\n"
      "b 109f\n"
      "103:"  // Height 3: Partial direct writeback: partial_2_8
      "tbz x11, #1, 104f\n"
      "str d13, [x28], #0x8\n"
      "str d10, [x24], #0x8\n"
      "str d18, [x23], #0x8\n"
      "tbz x11, #0, 109f\n"
      "st1 { v13.s }[2], [x28]\n"
      "st1 { v10.s }[2], [x24]\n"
      "st1 { v18.s }[2], [x23]\n"
      "b 109f\n"
      "104:"  // Height 3: Partial direct writeback: partial_1_8
      "tbz x11, #0, 109f\n"
      "str s13, [x28, #0x0]\n"
      "str s10, [x24, #0x0]\n"
      "str s18, [x23, #0x0]\n"
      "b 109f\n"
      "105:"  // Height 3: Partial direct writeback: partial_4_0
      "tbz x11, #2, 107f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v16.4s }, [x23], #0x10\n"
      "tbz x11, #1, 106f\n"
      "str d12, [x28], #0x8\n"
      "str d9, [x24], #0x8\n"
      "str d17, [x23], #0x8\n"
      "tbz x11, #0, 109f\n"
      "st1 { v12.s }[2], [x28]\n"
      "st1 { v9.s }[2], [x24]\n"
      "st1 { v17.s }[2], [x23]\n"
      "b 109f\n"
      "106:"  // Height 3: Partial direct writeback: partial_1_4
      "tbz x11, #0, 109f\n"
      "str s12, [x28, #0x0]\n"
      "str s9, [x24, #0x0]\n"
      "str s17, [x23, #0x0]\n"
      "b 109f\n"
      "107:"  // Height 3: Partial direct writeback: partial_2_0
      "tbz x11, #1, 108f\n"
      "str d7, [x28], #0x8\n"
      "str d8, [x24], #0x8\n"
      "str d16, [x23], #0x8\n"
      "tbz x11, #0, 109f\n"
      "st1 { v7.s }[2], [x28]\n"
      "st1 { v8.s }[2], [x24]\n"
      "st1 { v16.s }[2], [x23]\n"
      "b 109f\n"
      "108:"  // Height 3: Partial direct writeback: partial_1_0
      "str s7, [x28, #0x0]\n"
      "str s8, [x24, #0x0]\n"
      "str s16, [x23, #0x0]\n"
      "109:"  // Height 3: Partial direct writeback: Done
      "b 111f\n"
      "110:"  // Height 3: Full writeback
      "str q7, [x28, #0x0]\n"
      "str q12, [x28, #0x10]\n"
      "str q13, [x28, #0x20]\n"
      "str q14, [x28, #0x30]\n"
      "add x28, x28, #0x40\n"
      "str q8, [x24, #0x0]\n"
      "str q9, [x24, #0x10]\n"
      "str q10, [x24, #0x20]\n"
      "str q11, [x24, #0x30]\n"
      "str q16, [x23, #0x0]\n"
      "str q17, [x23, #0x10]\n"
      "str q18, [x23, #0x20]\n"
      "str q19, [x23, #0x30]\n"
      "111:"  // Height 3: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 76b\n"
      "b 224f\n"
      "112:"  // Height 4
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x9, %x[bias]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x28, %x[output_ptr]\n"
      "113:"  // Height 4: Column loop
      "cbz x9, 114f\n"
      "ldr q8, [x9, #0x0]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "ldr q9, [x9, #0x10]\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x9, #0x20]\n"
      "mov v16.16b, v8.16b\n"
      "ldr q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "mov v20.16b, v12.16b\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "b 126f\n"
      "114:"  // Height 4: no bias
      "tbz %x[flags], #0, 125f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "cmp x11, #0x10\n"
      "add x24, x28, x19, LSL #2\n"
      "add x23, x24, x19, LSL #2\n"
      "add x22, x23, x19, LSL #2\n"
      "bge 123f\n"
      "tbz x11, #3, 118f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "ld1 { v20.4s }, [x22], #0x10\n"
      "ld1 { v10.4s }, [x28], #0x10\n"
      "ld1 { v13.4s }, [x24], #0x10\n"
      "ld1 { v18.4s }, [x23], #0x10\n"
      "ld1 { v21.4s }, [x22], #0x10\n"
      "tbz x11, #2, 116f\n"
      "ld1 { v11.4s }, [x28], #0x10\n"
      "ld1 { v14.4s }, [x24], #0x10\n"
      "ld1 { v19.4s }, [x23], #0x10\n"
      "ld1 { v22.4s }, [x22], #0x10\n"
      "tbz x11, #1, 115f\n"
      "mov x19, #0x38\n"
      "ldr d16, [x28], #0x8\n"
      "ldr d15, [x24], #0x8\n"
      "ldr d24, [x23], #0x8\n"
      "ldr d23, [x22], #0x8\n"
      "tbz x11, #0, 122f\n"
      "ld1 { v16.s }[2], [x28]\n"
      "ld1 { v15.s }[2], [x24]\n"
      "ld1 { v24.s }[2], [x23]\n"
      "ld1 { v23.s }[2], [x22]\n"
      "b 122f\n"
      "115:"  // Height 4: Partial accumulate: partial_1_12
      "mov x19, #0x30\n"
      "tbz x11, #0, 122f\n"
      "ldr s16, [x28, #0x0]\n"
      "ldr s15, [x24, #0x0]\n"
      "ldr s24, [x23, #0x0]\n"
      "ldr s23, [x22, #0x0]\n"
      "b 122f\n"
      "116:"  // Height 4: Partial accumulate: partial_2_8
      "tbz x11, #1, 117f\n"
      "ldr d11, [x28], #0x8\n"
      "ldr d14, [x24], #0x8\n"
      "mov x19, #0x28\n"
      "ldr d19, [x23], #0x8\n"
      "ldr d22, [x22], #0x8\n"
      "tbz x11, #0, 122f\n"
      "ld1 { v11.s }[2], [x28]\n"
      "ld1 { v14.s }[2], [x24]\n"
      "ld1 { v19.s }[2], [x23]\n"
      "ld1 { v22.s }[2], [x22]\n"
      "b 122f\n"
      "117:"  // Height 4: Partial accumulate: partial_1_8
      "mov x19, #0x20\n"
      "tbz x11, #0, 122f\n"
      "ldr s11, [x28, #0x0]\n"
      "ldr s14, [x24, #0x0]\n"
      "ldr s19, [x23, #0x0]\n"
      "ldr s22, [x22, #0x0]\n"
      "b 122f\n"
      "118:"  // Height 4: Partial accumulate: partial_4_0
      "tbz x11, #2, 120f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "ld1 { v20.4s }, [x22], #0x10\n"
      "tbz x11, #1, 119f\n"
      "mov x19, #0x18\n"
      "ldr d10, [x28], #0x8\n"
      "ldr d13, [x24], #0x8\n"
      "ldr d18, [x23], #0x8\n"
      "ldr d21, [x22], #0x8\n"
      "tbz x11, #0, 122f\n"
      "ld1 { v10.s }[2], [x28]\n"
      "ld1 { v13.s }[2], [x24]\n"
      "ld1 { v18.s }[2], [x23]\n"
      "ld1 { v21.s }[2], [x22]\n"
      "b 122f\n"
      "119:"  // Height 4: Partial accumulate: partial_1_4
      "mov x19, #0x10\n"
      "tbz x11, #0, 122f\n"
      "ldr s10, [x28, #0x0]\n"
      "ldr s13, [x24, #0x0]\n"
      "ldr s18, [x23, #0x0]\n"
      "ldr s21, [x22, #0x0]\n"
      "b 122f\n"
      "120:"  // Height 4: Partial accumulate: partial_2_0
      "tbz x11, #1, 121f\n"
      "ldr d9, [x28], #0x8\n"
      "ldr d12, [x24], #0x8\n"
      "mov x19, #0x8\n"
      "ldr d17, [x23], #0x8\n"
      "ldr d20, [x22], #0x8\n"
      "tbz x11, #0, 122f\n"
      "ld1 { v9.s }[2], [x28]\n"
      "ld1 { v12.s }[2], [x24]\n"
      "ld1 { v17.s }[2], [x23]\n"
      "ld1 { v20.s }[2], [x22]\n"
      "b 122f\n"
      "121:"  // Height 4: Partial accumulate: partial_1_0
      "ldr s9, [x28, #0x0]\n"
      "mov x19, #0x0\n"
      "ldr s12, [x24, #0x0]\n"
      "ldr s17, [x23, #0x0]\n"
      "ldr s20, [x22, #0x0]\n"
      "122:"  // Height 4: Partial accumulate: Done
      "sub x28, x28, x19\n"
      "b 124f\n"
      "123:"  // Height 4: full accumulate
      "ldr q9, [x28, #0x0]\n"
      "ldr q10, [x28, #0x10]\n"
      "ldr q11, [x28, #0x20]\n"
      "ldr q16, [x28, #0x30]\n"
      "ldr q12, [x24, #0x0]\n"
      "ldr q13, [x24, #0x10]\n"
      "ldr q14, [x24, #0x20]\n"
      "ldr q15, [x24, #0x30]\n"
      "ldr q17, [x23, #0x0]\n"
      "ldr q18, [x23, #0x10]\n"
      "ldr q19, [x23, #0x20]\n"
      "ldr q24, [x23, #0x30]\n"
      "ldr q20, [x22, #0x0]\n"
      "ldr q21, [x22, #0x10]\n"
      "ldr q22, [x22, #0x20]\n"
      "ldr q23, [x22, #0x30]\n"
      "124:"  // Height 4: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "b 126f\n"
      "125:"  // Height 4: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "126:"  // Height 4: setup done
      "mov x27, #0x0\n"
      "127:"  // Height 4: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w26, [x20, x27, LSL #0x2]\n"
      "tbz %x[flags], #3, 128f\n"
      "ldr x20, [%x[input_ptr], x27, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x25, [x20, #0x0]\n"
      "ldr x24, [x20, #0x8]\n"
      "ldr x23, [x20, #0x10]\n"
      "ldr x22, [x20, #0x18]\n"
      "cbnz x27, 129f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x25, x25, x19, LSL #1\n"
      "add x24, x24, x19, LSL #1\n"
      "add x23, x23, x19, LSL #1\n"
      "add x22, x22, x19, LSL #1\n"
      "b 129f\n"
      "128:"  // Height 4: setup direct input
      "mov x25, %x[input_ptr]\n"
      "add x24, x25, x19, LSL #1\n"
      "add x23, x24, x19, LSL #1\n"
      "add x22, x23, x19, LSL #1\n"
      "129:"  // Height 4: input setup done
      "cmp x26, #0x8\n"
      "blt 132f\n"
      "ldr q1, [x25, #0x0]\n"
      "ldr q2, [x24, #0x0]\n"
      "cmp x26, #0x10\n"
      "blt 131f\n"
      "130:"  // Height 4: Multiply loop: Main loop head
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q4, [x22, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x23, x23, #0x10\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x22, x22, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "sub x26, x26, #0x8\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      "cmp x26, #0x10\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      "ldr q2, [x24, #0x0]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      "bge 130b\n"
      "131:"  // Height 4: Multiply loop: Single iteration only
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "sub x26, x26, #0x8\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q4, [x22, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x23, x23, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "add x22, x22, #0x10\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      "132:"  // Height 4: Multiply loop: Main loop skip
      "cbz x26, 137f\n"
      "cmp x26, #0x4\n"
      "blt 134f\n"
      "133:"  // Height 4: Multiply loop: Odd block loop
      "ldr d1, [x25], #0x8\n"
      "sub x26, x26, #0x4\n"
      "ldr d2, [x24], #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr d3, [x23], #0x8\n"
      "cmp x26, #0x4\n"
      "ldr d4, [x22], #0x8\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      ".inst 0x6e46ec08  // bfmmla v8.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec50  // bfmmla v16.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e47ec0c  // bfmmla v12.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec54  // bfmmla v20.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x30]\n"
      ".inst 0x6e46ec09  // bfmmla v9.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec51  // bfmmla v17.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x6e47ec0d  // bfmmla v13.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec55  // bfmmla v21.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x6e46ec0a  // bfmmla v10.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec52  // bfmmla v18.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x6e47ec0e  // bfmmla v14.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec56  // bfmmla v22.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e46ec0b  // bfmmla v11.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec53  // bfmmla v19.4s, v2.8h, v6.8h\n"
      ".inst 0x6e47ec0f  // bfmmla v15.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec57  // bfmmla v23.4s, v2.8h, v7.8h\n"
      "bge 133b\n"
      "cbz x26, 137f\n"
      "134:"  // Height 4: Multiply loop: Skip odd blocks
      "tbz x26, #1, 135f\n"
      "ldr s1, [x25], #0x4\n"
      "ldr s2, [x24], #0x4\n"
      "ldr s3, [x23], #0x4\n"
      "ldr s4, [x22], #0x4\n"
      "tbz x26, #0, 136f\n"
      "ld1 { v1.h }[2], [x25]\n"
      "ld1 { v2.h }[2], [x24]\n"
      "ld1 { v3.h }[2], [x23]\n"
      "ld1 { v4.h }[2], [x22]\n"
      "b 136f\n"
      "135:"  // Height 4: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "ldr h3, [x23, #0x0]\n"
      "ldr h4, [x22, #0x0]\n"
      "136:"  // Height 4: Multiply loop: Ragged operand read: Done
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "137:"  // Height 4: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x27, x27, #0x1\n"
      "cmp x27, x19\n"
      "bne 127b\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "prfm pstl1keep, [x28, #0x0]\n"
      "add x24, x28, x19, LSL #2\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "add x23, x24, x19, LSL #2\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "add x22, x23, x19, LSL #2\n"
      "prfm pstl1keep, [x22, #0x0]\n"
      "tbz %x[flags], #1, 138f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1r { v1.4s }, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1r { v0.4s }, [x19]\n"
      "fmin v8.4s, v8.4s, v0.4s\n"
      "fmin v9.4s, v9.4s, v0.4s\n"
      "fmin v10.4s, v10.4s, v0.4s\n"
      "fmin v11.4s, v11.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v1.4s\n"
      "fmax v9.4s, v9.4s, v1.4s\n"
      "fmax v10.4s, v10.4s, v1.4s\n"
      "fmax v11.4s, v11.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v0.4s\n"
      "fmin v13.4s, v13.4s, v0.4s\n"
      "fmin v14.4s, v14.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v1.4s\n"
      "fmax v13.4s, v13.4s, v1.4s\n"
      "fmax v14.4s, v14.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v0.4s\n"
      "fmin v16.4s, v16.4s, v0.4s\n"
      "fmin v17.4s, v17.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v1.4s\n"
      "fmax v16.4s, v16.4s, v1.4s\n"
      "fmax v17.4s, v17.4s, v1.4s\n"
      "fmin v18.4s, v18.4s, v0.4s\n"
      "fmin v19.4s, v19.4s, v0.4s\n"
      "fmin v20.4s, v20.4s, v0.4s\n"
      "fmax v18.4s, v18.4s, v1.4s\n"
      "fmax v19.4s, v19.4s, v1.4s\n"
      "fmax v20.4s, v20.4s, v1.4s\n"
      "fmin v21.4s, v21.4s, v0.4s\n"
      "fmin v22.4s, v22.4s, v0.4s\n"
      "fmin v23.4s, v23.4s, v0.4s\n"
      "fmax v21.4s, v21.4s, v1.4s\n"
      "fmax v22.4s, v22.4s, v1.4s\n"
      "fmax v23.4s, v23.4s, v1.4s\n"
      "138:"  // Height 4: No activation
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "cmp x11, #0x10\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v15.2d, v16.2d, v20.2d\n"
      "uzp2 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v20.2d, v17.2d, v21.2d\n"
      "uzp2 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v21.2d, v18.2d, v22.2d\n"
      "uzp2 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v22.2d, v19.2d, v23.2d\n"
      "uzp2 v19.2d, v19.2d, v23.2d\n"
      "bge 147f\n"
      "tbz x11, #3, 142f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v12.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v9.4s }, [x24], #0x10\n"
      "st1 { v15.4s }, [x23], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v16.4s }, [x22], #0x10\n"
      "st1 { v17.4s }, [x22], #0x10\n"
      "tbz x11, #2, 140f\n"
      "st1 { v13.4s }, [x28], #0x10\n"
      "st1 { v10.4s }, [x24], #0x10\n"
      "st1 { v21.4s }, [x23], #0x10\n"
      "st1 { v18.4s }, [x22], #0x10\n"
      "tbz x11, #1, 139f\n"
      "str d14, [x28], #0x8\n"
      "str d11, [x24], #0x8\n"
      "str d22, [x23], #0x8\n"
      "str d19, [x22], #0x8\n"
      "tbz x11, #0, 146f\n"
      "st1 { v14.s }[2], [x28]\n"
      "st1 { v11.s }[2], [x24]\n"
      "st1 { v22.s }[2], [x23]\n"
      "st1 { v19.s }[2], [x22]\n"
      "b 146f\n"
      "139:"  // Height 4: Partial direct writeback: partial_1_12
      "tbz x11, #0, 146f\n"
      "str s14, [x28, #0x0]\n"
      "str s11, [x24, #0x0]\n"
      "str s22, [x23, #0x0]\n"
      "str s19, [x22, #0x0]\n"
      "b 146f\n"
      "140:"  // Height 4: Partial direct writeback: partial_2_8
      "tbz x11, #1, 141f\n"
      "str d13, [x28], #0x8\n"
      "str d10, [x24], #0x8\n"
      "str d21, [x23], #0x8\n"
      "str d18, [x22], #0x8\n"
      "tbz x11, #0, 146f\n"
      "st1 { v13.s }[2], [x28]\n"
      "st1 { v10.s }[2], [x24]\n"
      "st1 { v21.s }[2], [x23]\n"
      "st1 { v18.s }[2], [x22]\n"
      "b 146f\n"
      "141:"  // Height 4: Partial direct writeback: partial_1_8
      "tbz x11, #0, 146f\n"
      "str s13, [x28, #0x0]\n"
      "str s10, [x24, #0x0]\n"
      "str s21, [x23, #0x0]\n"
      "str s18, [x22, #0x0]\n"
      "b 146f\n"
      "142:"  // Height 4: Partial direct writeback: partial_4_0
      "tbz x11, #2, 144f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v15.4s }, [x23], #0x10\n"
      "st1 { v16.4s }, [x22], #0x10\n"
      "tbz x11, #1, 143f\n"
      "str d12, [x28], #0x8\n"
      "str d9, [x24], #0x8\n"
      "str d20, [x23], #0x8\n"
      "str d17, [x22], #0x8\n"
      "tbz x11, #0, 146f\n"
      "st1 { v12.s }[2], [x28]\n"
      "st1 { v9.s }[2], [x24]\n"
      "st1 { v20.s }[2], [x23]\n"
      "st1 { v17.s }[2], [x22]\n"
      "b 146f\n"
      "143:"  // Height 4: Partial direct writeback: partial_1_4
      "tbz x11, #0, 146f\n"
      "str s12, [x28, #0x0]\n"
      "str s9, [x24, #0x0]\n"
      "str s20, [x23, #0x0]\n"
      "str s17, [x22, #0x0]\n"
      "b 146f\n"
      "144:"  // Height 4: Partial direct writeback: partial_2_0
      "tbz x11, #1, 145f\n"
      "str d7, [x28], #0x8\n"
      "str d8, [x24], #0x8\n"
      "str d15, [x23], #0x8\n"
      "str d16, [x22], #0x8\n"
      "tbz x11, #0, 146f\n"
      "st1 { v7.s }[2], [x28]\n"
      "st1 { v8.s }[2], [x24]\n"
      "st1 { v15.s }[2], [x23]\n"
      "st1 { v16.s }[2], [x22]\n"
      "b 146f\n"
      "145:"  // Height 4: Partial direct writeback: partial_1_0
      "str s7, [x28, #0x0]\n"
      "str s8, [x24, #0x0]\n"
      "str s15, [x23, #0x0]\n"
      "str s16, [x22, #0x0]\n"
      "146:"  // Height 4: Partial direct writeback: Done
      "b 148f\n"
      "147:"  // Height 4: Full writeback
      "str q7, [x28, #0x0]\n"
      "str q12, [x28, #0x10]\n"
      "str q13, [x28, #0x20]\n"
      "str q14, [x28, #0x30]\n"
      "add x28, x28, #0x40\n"
      "str q8, [x24, #0x0]\n"
      "str q9, [x24, #0x10]\n"
      "str q10, [x24, #0x20]\n"
      "str q11, [x24, #0x30]\n"
      "str q15, [x23, #0x0]\n"
      "str q20, [x23, #0x10]\n"
      "str q21, [x23, #0x20]\n"
      "str q22, [x23, #0x30]\n"
      "str q16, [x22, #0x0]\n"
      "str q17, [x22, #0x10]\n"
      "str q18, [x22, #0x20]\n"
      "str q19, [x22, #0x30]\n"
      "148:"  // Height 4: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 113b\n"
      "b 224f\n"
      "149:"  // Height 5
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x9, %x[bias]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x28, %x[output_ptr]\n"
      "150:"  // Height 5: Column loop
      "cbz x9, 151f\n"
      "ldr q8, [x9, #0x0]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "ldr q9, [x9, #0x10]\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x9, #0x20]\n"
      "mov v16.16b, v8.16b\n"
      "ldr q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "mov v20.16b, v12.16b\n"
      "mov v24.16b, v8.16b\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "mov v28.16b, v12.16b\n"
      "mov v25.16b, v9.16b\n"
      "mov v29.16b, v13.16b\n"
      "mov v26.16b, v10.16b\n"
      "mov v30.16b, v14.16b\n"
      "mov v27.16b, v11.16b\n"
      "mov v31.16b, v15.16b\n"
      "b 163f\n"
      "151:"  // Height 5: no bias
      "tbz %x[flags], #0, 162f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "cmp x11, #0x10\n"
      "add x24, x28, x19, LSL #2\n"
      "add x23, x24, x19, LSL #2\n"
      "add x22, x23, x19, LSL #2\n"
      "add x21, x22, x19, LSL #2\n"
      "bge 160f\n"
      "tbz x11, #3, 155f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "ld1 { v20.4s }, [x22], #0x10\n"
      "ld1 { v25.4s }, [x21], #0x10\n"
      "ld1 { v10.4s }, [x28], #0x10\n"
      "ld1 { v13.4s }, [x24], #0x10\n"
      "ld1 { v18.4s }, [x23], #0x10\n"
      "ld1 { v21.4s }, [x22], #0x10\n"
      "ld1 { v26.4s }, [x21], #0x10\n"
      "tbz x11, #2, 153f\n"
      "ld1 { v11.4s }, [x28], #0x10\n"
      "ld1 { v14.4s }, [x24], #0x10\n"
      "ld1 { v19.4s }, [x23], #0x10\n"
      "ld1 { v22.4s }, [x22], #0x10\n"
      "ld1 { v27.4s }, [x21], #0x10\n"
      "tbz x11, #1, 152f\n"
      "ldr d16, [x28], #0x8\n"
      "mov x19, #0x38\n"
      "ldr d15, [x24], #0x8\n"
      "ldr d24, [x23], #0x8\n"
      "ldr d23, [x22], #0x8\n"
      "ldr d6, [x21], #0x8\n"
      "tbz x11, #0, 159f\n"
      "ld1 { v16.s }[2], [x28]\n"
      "ld1 { v15.s }[2], [x24]\n"
      "ld1 { v24.s }[2], [x23]\n"
      "ld1 { v23.s }[2], [x22]\n"
      "ld1 { v6.s }[2], [x21]\n"
      "b 159f\n"
      "152:"  // Height 5: Partial accumulate: partial_1_12
      "mov x19, #0x30\n"
      "tbz x11, #0, 159f\n"
      "ldr s16, [x28, #0x0]\n"
      "ldr s15, [x24, #0x0]\n"
      "ldr s24, [x23, #0x0]\n"
      "ldr s23, [x22, #0x0]\n"
      "ldr s6, [x21, #0x0]\n"
      "b 159f\n"
      "153:"  // Height 5: Partial accumulate: partial_2_8
      "tbz x11, #1, 154f\n"
      "ldr d11, [x28], #0x8\n"
      "ldr d14, [x24], #0x8\n"
      "mov x19, #0x28\n"
      "ldr d19, [x23], #0x8\n"
      "ldr d22, [x22], #0x8\n"
      "ldr d27, [x21], #0x8\n"
      "tbz x11, #0, 159f\n"
      "ld1 { v11.s }[2], [x28]\n"
      "ld1 { v14.s }[2], [x24]\n"
      "ld1 { v19.s }[2], [x23]\n"
      "ld1 { v22.s }[2], [x22]\n"
      "ld1 { v27.s }[2], [x21]\n"
      "b 159f\n"
      "154:"  // Height 5: Partial accumulate: partial_1_8
      "mov x19, #0x20\n"
      "tbz x11, #0, 159f\n"
      "ldr s11, [x28, #0x0]\n"
      "ldr s14, [x24, #0x0]\n"
      "ldr s19, [x23, #0x0]\n"
      "ldr s22, [x22, #0x0]\n"
      "ldr s27, [x21, #0x0]\n"
      "b 159f\n"
      "155:"  // Height 5: Partial accumulate: partial_4_0
      "tbz x11, #2, 157f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "ld1 { v20.4s }, [x22], #0x10\n"
      "ld1 { v25.4s }, [x21], #0x10\n"
      "tbz x11, #1, 156f\n"
      "ldr d10, [x28], #0x8\n"
      "mov x19, #0x18\n"
      "ldr d13, [x24], #0x8\n"
      "ldr d18, [x23], #0x8\n"
      "ldr d21, [x22], #0x8\n"
      "ldr d26, [x21], #0x8\n"
      "tbz x11, #0, 159f\n"
      "ld1 { v10.s }[2], [x28]\n"
      "ld1 { v13.s }[2], [x24]\n"
      "ld1 { v18.s }[2], [x23]\n"
      "ld1 { v21.s }[2], [x22]\n"
      "ld1 { v26.s }[2], [x21]\n"
      "b 159f\n"
      "156:"  // Height 5: Partial accumulate: partial_1_4
      "mov x19, #0x10\n"
      "tbz x11, #0, 159f\n"
      "ldr s10, [x28, #0x0]\n"
      "ldr s13, [x24, #0x0]\n"
      "ldr s18, [x23, #0x0]\n"
      "ldr s21, [x22, #0x0]\n"
      "ldr s26, [x21, #0x0]\n"
      "b 159f\n"
      "157:"  // Height 5: Partial accumulate: partial_2_0
      "tbz x11, #1, 158f\n"
      "ldr d9, [x28], #0x8\n"
      "ldr d12, [x24], #0x8\n"
      "mov x19, #0x8\n"
      "ldr d17, [x23], #0x8\n"
      "ldr d20, [x22], #0x8\n"
      "ldr d25, [x21], #0x8\n"
      "tbz x11, #0, 159f\n"
      "ld1 { v9.s }[2], [x28]\n"
      "ld1 { v12.s }[2], [x24]\n"
      "ld1 { v17.s }[2], [x23]\n"
      "ld1 { v20.s }[2], [x22]\n"
      "ld1 { v25.s }[2], [x21]\n"
      "b 159f\n"
      "158:"  // Height 5: Partial accumulate: partial_1_0
      "ldr s9, [x28, #0x0]\n"
      "mov x19, #0x0\n"
      "ldr s12, [x24, #0x0]\n"
      "ldr s17, [x23, #0x0]\n"
      "ldr s20, [x22, #0x0]\n"
      "ldr s25, [x21, #0x0]\n"
      "159:"  // Height 5: Partial accumulate: Done
      "sub x28, x28, x19\n"
      "b 161f\n"
      "160:"  // Height 5: full accumulate
      "ldr q9, [x28, #0x0]\n"
      "ldr q10, [x28, #0x10]\n"
      "ldr q11, [x28, #0x20]\n"
      "ldr q16, [x28, #0x30]\n"
      "ldr q12, [x24, #0x0]\n"
      "ldr q13, [x24, #0x10]\n"
      "ldr q14, [x24, #0x20]\n"
      "ldr q15, [x24, #0x30]\n"
      "ldr q17, [x23, #0x0]\n"
      "ldr q18, [x23, #0x10]\n"
      "ldr q19, [x23, #0x20]\n"
      "ldr q24, [x23, #0x30]\n"
      "ldr q20, [x22, #0x0]\n"
      "ldr q21, [x22, #0x10]\n"
      "ldr q22, [x22, #0x20]\n"
      "ldr q23, [x22, #0x30]\n"
      "ldr q25, [x21, #0x0]\n"
      "ldr q26, [x21, #0x10]\n"
      "ldr q27, [x21, #0x20]\n"
      "ldr q6, [x21, #0x30]\n"
      "161:"  // Height 5: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "zip1 v24.2d, v25.2d, v28.2d\n"
      "zip2 v28.2d, v25.2d, v28.2d\n"
      "zip1 v25.2d, v26.2d, v29.2d\n"
      "zip2 v29.2d, v26.2d, v29.2d\n"
      "zip1 v26.2d, v27.2d, v30.2d\n"
      "zip2 v30.2d, v27.2d, v30.2d\n"
      "zip1 v27.2d, v6.2d, v31.2d\n"
      "zip2 v31.2d, v6.2d, v31.2d\n"
      "b 163f\n"
      "162:"  // Height 5: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "movi v24.16b, #0x0\n"
      "movi v25.16b, #0x0\n"
      "movi v26.16b, #0x0\n"
      "movi v27.16b, #0x0\n"
      "movi v28.16b, #0x0\n"
      "movi v29.16b, #0x0\n"
      "movi v30.16b, #0x0\n"
      "movi v31.16b, #0x0\n"
      "163:"  // Height 5: setup done
      "mov x27, #0x0\n"
      "164:"  // Height 5: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w26, [x20, x27, LSL #0x2]\n"
      "tbz %x[flags], #3, 165f\n"
      "ldr x20, [%x[input_ptr], x27, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x25, [x20, #0x0]\n"
      "ldr x24, [x20, #0x8]\n"
      "ldr x23, [x20, #0x10]\n"
      "ldr x22, [x20, #0x18]\n"
      "ldr x21, [x20, #0x20]\n"
      "cbnz x27, 166f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x25, x25, x19, LSL #1\n"
      "add x24, x24, x19, LSL #1\n"
      "add x23, x23, x19, LSL #1\n"
      "add x22, x22, x19, LSL #1\n"
      "add x21, x21, x19, LSL #1\n"
      "b 166f\n"
      "165:"  // Height 5: setup direct input
      "mov x25, %x[input_ptr]\n"
      "add x24, x25, x19, LSL #1\n"
      "add x23, x24, x19, LSL #1\n"
      "add x22, x23, x19, LSL #1\n"
      "add x21, x22, x19, LSL #1\n"
      "166:"  // Height 5: input setup done
      "cmp x26, #0x8\n"
      "blt 169f\n"
      "ldr q1, [x25, #0x0]\n"
      "cmp x26, #0x10\n"
      "blt 168f\n"
      "167:"  // Height 5: Multiply loop: Main loop head
      "movi v6.16b, #0x0\n"
      "ldr q2, [x24, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q4, [x22, #0x0]\n"
      "add x23, x23, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q5, [x21, #0x0]\n"
      "add x22, x22, #0x10\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x21, x21, #0x10\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "sub x26, x26, #0x8\n"
      "trn2 v5.2d, v5.2d, v6.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "cmp x26, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "prfm pldl1keep, [x21, #0x80]\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbc  // bfmmla v28.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb9  // bfmmla v25.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbd  // bfmmla v29.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecba  // bfmmla v26.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbe  // bfmmla v30.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecbb  // bfmmla v27.4s, v5.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbf  // bfmmla v31.4s, v5.8h, v6.8h\n"
      "bge 167b\n"
      "168:"  // Height 5: Multiply loop: Single iteration only
      "movi v6.16b, #0x0\n"
      "ldr q2, [x24, #0x0]\n"
      "sub x26, x26, #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q4, [x22, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q5, [x21, #0x0]\n"
      "add x23, x23, #0x10\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x22, x22, #0x10\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "add x21, x21, #0x10\n"
      "trn2 v5.2d, v5.2d, v6.2d\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "prfm pldl1keep, [x21, #0x80]\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbc  // bfmmla v28.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb9  // bfmmla v25.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbd  // bfmmla v29.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecba  // bfmmla v26.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbe  // bfmmla v30.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecbb  // bfmmla v27.4s, v5.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbf  // bfmmla v31.4s, v5.8h, v6.8h\n"
      "169:"  // Height 5: Multiply loop: Main loop skip
      "cbz x26, 174f\n"
      "cmp x26, #0x4\n"
      "blt 171f\n"
      "170:"  // Height 5: Multiply loop: Odd block loop
      "movi v7.16b, #0x0\n"
      "ldr d1, [x25], #0x8\n"
      "sub x26, x26, #0x4\n"
      "ldr d2, [x24], #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr d3, [x23], #0x8\n"
      "cmp x26, #0x4\n"
      "ldr d4, [x22], #0x8\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr d5, [x21], #0x8\n"
      "ldr q6, [x10, #0x0]\n"
      "trn1 v4.2d, v5.2d, v7.2d\n"
      "ldr q7, [x10, #0x10]\n"
      ".inst 0x6e46ec08  // bfmmla v8.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec50  // bfmmla v16.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec98  // bfmmla v24.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e47ec0c  // bfmmla v12.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec54  // bfmmla v20.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9c  // bfmmla v28.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x30]\n"
      ".inst 0x6e46ec09  // bfmmla v9.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec51  // bfmmla v17.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec99  // bfmmla v25.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x6e47ec0d  // bfmmla v13.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec55  // bfmmla v21.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9d  // bfmmla v29.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x6e46ec0a  // bfmmla v10.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec52  // bfmmla v18.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9a  // bfmmla v26.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x6e47ec0e  // bfmmla v14.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec56  // bfmmla v22.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9e  // bfmmla v30.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e46ec0b  // bfmmla v11.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec53  // bfmmla v19.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9b  // bfmmla v27.4s, v4.8h, v6.8h\n"
      ".inst 0x6e47ec0f  // bfmmla v15.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec57  // bfmmla v23.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9f  // bfmmla v31.4s, v4.8h, v7.8h\n"
      "bge 170b\n"
      "cbz x26, 174f\n"
      "171:"  // Height 5: Multiply loop: Skip odd blocks
      "tbz x26, #1, 172f\n"
      "ldr s1, [x25], #0x4\n"
      "ldr s2, [x24], #0x4\n"
      "ldr s3, [x23], #0x4\n"
      "ldr s4, [x22], #0x4\n"
      "ldr s5, [x21], #0x4\n"
      "tbz x26, #0, 173f\n"
      "ld1 { v1.h }[2], [x25]\n"
      "ld1 { v2.h }[2], [x24]\n"
      "ld1 { v3.h }[2], [x23]\n"
      "ld1 { v4.h }[2], [x22]\n"
      "ld1 { v5.h }[2], [x21]\n"
      "b 173f\n"
      "172:"  // Height 5: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "ldr h3, [x23, #0x0]\n"
      "ldr h4, [x22, #0x0]\n"
      "ldr h5, [x21, #0x0]\n"
      "173:"  // Height 5: Multiply loop: Ragged operand read: Done
      "movi v6.16b, #0x0\n"
      "ldr q7, [x10, #0x0]\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "174:"  // Height 5: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x27, x27, #0x1\n"
      "cmp x27, x19\n"
      "bne 164b\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "prfm pstl1keep, [x28, #0x0]\n"
      "add x24, x28, x19, LSL #2\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "add x23, x24, x19, LSL #2\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "add x22, x23, x19, LSL #2\n"
      "prfm pstl1keep, [x22, #0x0]\n"
      "add x21, x22, x19, LSL #2\n"
      "prfm pstl1keep, [x21, #0x0]\n"
      "tbz %x[flags], #1, 175f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1r { v1.4s }, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1r { v0.4s }, [x19]\n"
      "fmin v8.4s, v8.4s, v0.4s\n"
      "fmin v9.4s, v9.4s, v0.4s\n"
      "fmin v10.4s, v10.4s, v0.4s\n"
      "fmin v11.4s, v11.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v1.4s\n"
      "fmax v9.4s, v9.4s, v1.4s\n"
      "fmax v10.4s, v10.4s, v1.4s\n"
      "fmax v11.4s, v11.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v0.4s\n"
      "fmin v13.4s, v13.4s, v0.4s\n"
      "fmin v14.4s, v14.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v1.4s\n"
      "fmax v13.4s, v13.4s, v1.4s\n"
      "fmax v14.4s, v14.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v0.4s\n"
      "fmin v16.4s, v16.4s, v0.4s\n"
      "fmin v17.4s, v17.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v1.4s\n"
      "fmax v16.4s, v16.4s, v1.4s\n"
      "fmax v17.4s, v17.4s, v1.4s\n"
      "fmin v18.4s, v18.4s, v0.4s\n"
      "fmin v19.4s, v19.4s, v0.4s\n"
      "fmin v20.4s, v20.4s, v0.4s\n"
      "fmax v18.4s, v18.4s, v1.4s\n"
      "fmax v19.4s, v19.4s, v1.4s\n"
      "fmax v20.4s, v20.4s, v1.4s\n"
      "fmin v21.4s, v21.4s, v0.4s\n"
      "fmin v22.4s, v22.4s, v0.4s\n"
      "fmin v23.4s, v23.4s, v0.4s\n"
      "fmax v21.4s, v21.4s, v1.4s\n"
      "fmax v22.4s, v22.4s, v1.4s\n"
      "fmax v23.4s, v23.4s, v1.4s\n"
      "fmin v24.4s, v24.4s, v0.4s\n"
      "fmin v25.4s, v25.4s, v0.4s\n"
      "fmin v26.4s, v26.4s, v0.4s\n"
      "fmax v24.4s, v24.4s, v1.4s\n"
      "fmax v25.4s, v25.4s, v1.4s\n"
      "fmax v26.4s, v26.4s, v1.4s\n"
      "fmin v27.4s, v27.4s, v0.4s\n"
      "fmin v28.4s, v28.4s, v0.4s\n"
      "fmin v29.4s, v29.4s, v0.4s\n"
      "fmax v27.4s, v27.4s, v1.4s\n"
      "fmax v28.4s, v28.4s, v1.4s\n"
      "fmax v29.4s, v29.4s, v1.4s\n"
      "fmin v30.4s, v30.4s, v0.4s\n"
      "fmin v31.4s, v31.4s, v0.4s\n"
      "fmax v30.4s, v30.4s, v1.4s\n"
      "fmax v31.4s, v31.4s, v1.4s\n"
      "175:"  // Height 5: No activation
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "cmp x11, #0x10\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v15.2d, v16.2d, v20.2d\n"
      "uzp2 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v20.2d, v17.2d, v21.2d\n"
      "uzp2 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v21.2d, v18.2d, v22.2d\n"
      "uzp2 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v22.2d, v19.2d, v23.2d\n"
      "uzp2 v19.2d, v19.2d, v23.2d\n"
      "uzp1 v24.2d, v24.2d, v28.2d\n"
      "uzp1 v25.2d, v25.2d, v29.2d\n"
      "uzp1 v26.2d, v26.2d, v30.2d\n"
      "uzp1 v27.2d, v27.2d, v31.2d\n"
      "bge 184f\n"
      "tbz x11, #3, 179f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v12.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v9.4s }, [x24], #0x10\n"
      "st1 { v15.4s }, [x23], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v16.4s }, [x22], #0x10\n"
      "st1 { v17.4s }, [x22], #0x10\n"
      "st1 { v24.4s }, [x21], #0x10\n"
      "st1 { v25.4s }, [x21], #0x10\n"
      "tbz x11, #2, 177f\n"
      "st1 { v13.4s }, [x28], #0x10\n"
      "st1 { v10.4s }, [x24], #0x10\n"
      "st1 { v21.4s }, [x23], #0x10\n"
      "st1 { v18.4s }, [x22], #0x10\n"
      "st1 { v26.4s }, [x21], #0x10\n"
      "tbz x11, #1, 176f\n"
      "str d14, [x28], #0x8\n"
      "str d11, [x24], #0x8\n"
      "str d22, [x23], #0x8\n"
      "str d19, [x22], #0x8\n"
      "str d27, [x21], #0x8\n"
      "tbz x11, #0, 183f\n"
      "st1 { v14.s }[2], [x28]\n"
      "st1 { v11.s }[2], [x24]\n"
      "st1 { v22.s }[2], [x23]\n"
      "st1 { v19.s }[2], [x22]\n"
      "st1 { v27.s }[2], [x21]\n"
      "b 183f\n"
      "176:"  // Height 5: Partial direct writeback: partial_1_12
      "tbz x11, #0, 183f\n"
      "str s14, [x28, #0x0]\n"
      "str s11, [x24, #0x0]\n"
      "str s22, [x23, #0x0]\n"
      "str s19, [x22, #0x0]\n"
      "str s27, [x21, #0x0]\n"
      "b 183f\n"
      "177:"  // Height 5: Partial direct writeback: partial_2_8
      "tbz x11, #1, 178f\n"
      "str d13, [x28], #0x8\n"
      "str d10, [x24], #0x8\n"
      "str d21, [x23], #0x8\n"
      "str d18, [x22], #0x8\n"
      "str d26, [x21], #0x8\n"
      "tbz x11, #0, 183f\n"
      "st1 { v13.s }[2], [x28]\n"
      "st1 { v10.s }[2], [x24]\n"
      "st1 { v21.s }[2], [x23]\n"
      "st1 { v18.s }[2], [x22]\n"
      "st1 { v26.s }[2], [x21]\n"
      "b 183f\n"
      "178:"  // Height 5: Partial direct writeback: partial_1_8
      "tbz x11, #0, 183f\n"
      "str s13, [x28, #0x0]\n"
      "str s10, [x24, #0x0]\n"
      "str s21, [x23, #0x0]\n"
      "str s18, [x22, #0x0]\n"
      "str s26, [x21, #0x0]\n"
      "b 183f\n"
      "179:"  // Height 5: Partial direct writeback: partial_4_0
      "tbz x11, #2, 181f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v15.4s }, [x23], #0x10\n"
      "st1 { v16.4s }, [x22], #0x10\n"
      "st1 { v24.4s }, [x21], #0x10\n"
      "tbz x11, #1, 180f\n"
      "str d12, [x28], #0x8\n"
      "str d9, [x24], #0x8\n"
      "str d20, [x23], #0x8\n"
      "str d17, [x22], #0x8\n"
      "str d25, [x21], #0x8\n"
      "tbz x11, #0, 183f\n"
      "st1 { v12.s }[2], [x28]\n"
      "st1 { v9.s }[2], [x24]\n"
      "st1 { v20.s }[2], [x23]\n"
      "st1 { v17.s }[2], [x22]\n"
      "st1 { v25.s }[2], [x21]\n"
      "b 183f\n"
      "180:"  // Height 5: Partial direct writeback: partial_1_4
      "tbz x11, #0, 183f\n"
      "str s12, [x28, #0x0]\n"
      "str s9, [x24, #0x0]\n"
      "str s20, [x23, #0x0]\n"
      "str s17, [x22, #0x0]\n"
      "str s25, [x21, #0x0]\n"
      "b 183f\n"
      "181:"  // Height 5: Partial direct writeback: partial_2_0
      "tbz x11, #1, 182f\n"
      "str d7, [x28], #0x8\n"
      "str d8, [x24], #0x8\n"
      "str d15, [x23], #0x8\n"
      "str d16, [x22], #0x8\n"
      "str d24, [x21], #0x8\n"
      "tbz x11, #0, 183f\n"
      "st1 { v7.s }[2], [x28]\n"
      "st1 { v8.s }[2], [x24]\n"
      "st1 { v15.s }[2], [x23]\n"
      "st1 { v16.s }[2], [x22]\n"
      "st1 { v24.s }[2], [x21]\n"
      "b 183f\n"
      "182:"  // Height 5: Partial direct writeback: partial_1_0
      "str s7, [x28, #0x0]\n"
      "str s8, [x24, #0x0]\n"
      "str s15, [x23, #0x0]\n"
      "str s16, [x22, #0x0]\n"
      "str s24, [x21, #0x0]\n"
      "183:"  // Height 5: Partial direct writeback: Done
      "b 185f\n"
      "184:"  // Height 5: Full writeback
      "str q7, [x28, #0x0]\n"
      "str q12, [x28, #0x10]\n"
      "str q13, [x28, #0x20]\n"
      "str q14, [x28, #0x30]\n"
      "add x28, x28, #0x40\n"
      "str q8, [x24, #0x0]\n"
      "str q9, [x24, #0x10]\n"
      "str q10, [x24, #0x20]\n"
      "str q11, [x24, #0x30]\n"
      "str q15, [x23, #0x0]\n"
      "str q20, [x23, #0x10]\n"
      "str q21, [x23, #0x20]\n"
      "str q22, [x23, #0x30]\n"
      "str q16, [x22, #0x0]\n"
      "str q17, [x22, #0x10]\n"
      "str q18, [x22, #0x20]\n"
      "str q19, [x22, #0x30]\n"
      "str q24, [x21, #0x0]\n"
      "str q25, [x21, #0x10]\n"
      "str q26, [x21, #0x20]\n"
      "str q27, [x21, #0x30]\n"
      "185:"  // Height 5: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 150b\n"
      "b 224f\n"
      "186:"  // Height 6
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x9, %x[bias]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x28, %x[output_ptr]\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "mov x19, #0x18\n"
      "madd %x[output_ptr], x20, x19, %x[output_ptr]\n"
      "187:"  // Height 6: Column loop
      "cbz x9, 188f\n"
      "ldr q8, [x9, #0x0]\n"
      "zip2 v12.2d, v8.2d, v8.2d\n"
      "ldr q9, [x9, #0x10]\n"
      "zip1 v8.2d, v8.2d, v8.2d\n"
      "ldr q10, [x9, #0x20]\n"
      "mov v16.16b, v8.16b\n"
      "ldr q11, [x9, #0x30]\n"
      "add x9, x9, #0x40\n"
      "mov v20.16b, v12.16b\n"
      "mov v24.16b, v8.16b\n"
      "zip2 v13.2d, v9.2d, v9.2d\n"
      "zip1 v9.2d, v9.2d, v9.2d\n"
      "zip2 v14.2d, v10.2d, v10.2d\n"
      "zip1 v10.2d, v10.2d, v10.2d\n"
      "zip2 v15.2d, v11.2d, v11.2d\n"
      "zip1 v11.2d, v11.2d, v11.2d\n"
      "mov v17.16b, v9.16b\n"
      "mov v21.16b, v13.16b\n"
      "mov v18.16b, v10.16b\n"
      "mov v22.16b, v14.16b\n"
      "mov v19.16b, v11.16b\n"
      "mov v23.16b, v15.16b\n"
      "mov v28.16b, v12.16b\n"
      "mov v25.16b, v9.16b\n"
      "mov v29.16b, v13.16b\n"
      "mov v26.16b, v10.16b\n"
      "mov v30.16b, v14.16b\n"
      "mov v27.16b, v11.16b\n"
      "mov v31.16b, v15.16b\n"
      "b 200f\n"
      "188:"  // Height 6: no bias
      "tbz %x[flags], #0, 199f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "cmp x11, #0x10\n"
      "add x24, x28, x19, LSL #2\n"
      "add x23, x24, x19, LSL #2\n"
      "add x22, x23, x19, LSL #2\n"
      "add x21, x22, x19, LSL #2\n"
      "add x20, x21, x19, LSL #2\n"
      "bge 197f\n"
      "tbz x11, #3, 192f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "ld1 { v20.4s }, [x22], #0x10\n"
      "ld1 { v25.4s }, [x21], #0x10\n"
      "ld1 { v10.4s }, [x28], #0x10\n"
      "ld1 { v13.4s }, [x24], #0x10\n"
      "ld1 { v18.4s }, [x23], #0x10\n"
      "ld1 { v21.4s }, [x22], #0x10\n"
      "ld1 { v26.4s }, [x21], #0x10\n"
      "ld1 { v28.4s }, [x20], #0x10\n"
      "ld1 { v29.4s }, [x20], #0x10\n"
      "tbz x11, #2, 190f\n"
      "ld1 { v11.4s }, [x28], #0x10\n"
      "ld1 { v14.4s }, [x24], #0x10\n"
      "ld1 { v19.4s }, [x23], #0x10\n"
      "ld1 { v22.4s }, [x22], #0x10\n"
      "ld1 { v27.4s }, [x21], #0x10\n"
      "ld1 { v30.4s }, [x20], #0x10\n"
      "tbz x11, #1, 189f\n"
      "ldr d16, [x28], #0x8\n"
      "mov x19, #0x38\n"
      "ldr d15, [x24], #0x8\n"
      "ldr d24, [x23], #0x8\n"
      "ldr d23, [x22], #0x8\n"
      "ldr d6, [x21], #0x8\n"
      "ldr d31, [x20], #0x8\n"
      "tbz x11, #0, 196f\n"
      "ld1 { v16.s }[2], [x28]\n"
      "ld1 { v15.s }[2], [x24]\n"
      "ld1 { v24.s }[2], [x23]\n"
      "ld1 { v23.s }[2], [x22]\n"
      "ld1 { v6.s }[2], [x21]\n"
      "ld1 { v31.s }[2], [x20]\n"
      "b 196f\n"
      "189:"  // Height 6: Partial accumulate: partial_1_12
      "mov x19, #0x30\n"
      "tbz x11, #0, 196f\n"
      "ldr s16, [x28, #0x0]\n"
      "ldr s15, [x24, #0x0]\n"
      "ldr s24, [x23, #0x0]\n"
      "ldr s23, [x22, #0x0]\n"
      "ldr s6, [x21, #0x0]\n"
      "ldr s31, [x20, #0x0]\n"
      "b 196f\n"
      "190:"  // Height 6: Partial accumulate: partial_2_8
      "tbz x11, #1, 191f\n"
      "ldr d11, [x28], #0x8\n"
      "ldr d14, [x24], #0x8\n"
      "mov x19, #0x28\n"
      "ldr d19, [x23], #0x8\n"
      "ldr d22, [x22], #0x8\n"
      "ldr d27, [x21], #0x8\n"
      "ldr d30, [x20], #0x8\n"
      "tbz x11, #0, 196f\n"
      "ld1 { v11.s }[2], [x28]\n"
      "ld1 { v14.s }[2], [x24]\n"
      "ld1 { v19.s }[2], [x23]\n"
      "ld1 { v22.s }[2], [x22]\n"
      "ld1 { v27.s }[2], [x21]\n"
      "ld1 { v30.s }[2], [x20]\n"
      "b 196f\n"
      "191:"  // Height 6: Partial accumulate: partial_1_8
      "mov x19, #0x20\n"
      "tbz x11, #0, 196f\n"
      "ldr s11, [x28, #0x0]\n"
      "ldr s14, [x24, #0x0]\n"
      "ldr s19, [x23, #0x0]\n"
      "ldr s22, [x22, #0x0]\n"
      "ldr s27, [x21, #0x0]\n"
      "ldr s30, [x20, #0x0]\n"
      "b 196f\n"
      "192:"  // Height 6: Partial accumulate: partial_4_0
      "tbz x11, #2, 194f\n"
      "ld1 { v9.4s }, [x28], #0x10\n"
      "ld1 { v12.4s }, [x24], #0x10\n"
      "ld1 { v17.4s }, [x23], #0x10\n"
      "ld1 { v20.4s }, [x22], #0x10\n"
      "ld1 { v25.4s }, [x21], #0x10\n"
      "ld1 { v28.4s }, [x20], #0x10\n"
      "tbz x11, #1, 193f\n"
      "ldr d10, [x28], #0x8\n"
      "mov x19, #0x18\n"
      "ldr d13, [x24], #0x8\n"
      "ldr d18, [x23], #0x8\n"
      "ldr d21, [x22], #0x8\n"
      "ldr d26, [x21], #0x8\n"
      "ldr d29, [x20], #0x8\n"
      "tbz x11, #0, 196f\n"
      "ld1 { v10.s }[2], [x28]\n"
      "ld1 { v13.s }[2], [x24]\n"
      "ld1 { v18.s }[2], [x23]\n"
      "ld1 { v21.s }[2], [x22]\n"
      "ld1 { v26.s }[2], [x21]\n"
      "ld1 { v29.s }[2], [x20]\n"
      "b 196f\n"
      "193:"  // Height 6: Partial accumulate: partial_1_4
      "mov x19, #0x10\n"
      "tbz x11, #0, 196f\n"
      "ldr s10, [x28, #0x0]\n"
      "ldr s13, [x24, #0x0]\n"
      "ldr s18, [x23, #0x0]\n"
      "ldr s21, [x22, #0x0]\n"
      "ldr s26, [x21, #0x0]\n"
      "ldr s29, [x20, #0x0]\n"
      "b 196f\n"
      "194:"  // Height 6: Partial accumulate: partial_2_0
      "tbz x11, #1, 195f\n"
      "ldr d9, [x28], #0x8\n"
      "ldr d12, [x24], #0x8\n"
      "mov x19, #0x8\n"
      "ldr d17, [x23], #0x8\n"
      "ldr d20, [x22], #0x8\n"
      "ldr d25, [x21], #0x8\n"
      "ldr d28, [x20], #0x8\n"
      "tbz x11, #0, 196f\n"
      "ld1 { v9.s }[2], [x28]\n"
      "ld1 { v12.s }[2], [x24]\n"
      "ld1 { v17.s }[2], [x23]\n"
      "ld1 { v20.s }[2], [x22]\n"
      "ld1 { v25.s }[2], [x21]\n"
      "ld1 { v28.s }[2], [x20]\n"
      "b 196f\n"
      "195:"  // Height 6: Partial accumulate: partial_1_0
      "ldr s9, [x28, #0x0]\n"
      "mov x19, #0x0\n"
      "ldr s12, [x24, #0x0]\n"
      "ldr s17, [x23, #0x0]\n"
      "ldr s20, [x22, #0x0]\n"
      "ldr s25, [x21, #0x0]\n"
      "ldr s28, [x20, #0x0]\n"
      "196:"  // Height 6: Partial accumulate: Done
      "sub x28, x28, x19\n"
      "b 198f\n"
      "197:"  // Height 6: full accumulate
      "ldr q9, [x28, #0x0]\n"
      "ldr q10, [x28, #0x10]\n"
      "ldr q11, [x28, #0x20]\n"
      "ldr q16, [x28, #0x30]\n"
      "ldr q12, [x24, #0x0]\n"
      "ldr q13, [x24, #0x10]\n"
      "ldr q14, [x24, #0x20]\n"
      "ldr q15, [x24, #0x30]\n"
      "ldr q17, [x23, #0x0]\n"
      "ldr q18, [x23, #0x10]\n"
      "ldr q19, [x23, #0x20]\n"
      "ldr q24, [x23, #0x30]\n"
      "ldr q20, [x22, #0x0]\n"
      "ldr q21, [x22, #0x10]\n"
      "ldr q22, [x22, #0x20]\n"
      "ldr q23, [x22, #0x30]\n"
      "ldr q25, [x21, #0x0]\n"
      "ldr q26, [x21, #0x10]\n"
      "ldr q27, [x21, #0x20]\n"
      "ldr q6, [x21, #0x30]\n"
      "ldr q28, [x20, #0x0]\n"
      "ldr q29, [x20, #0x10]\n"
      "ldr q30, [x20, #0x20]\n"
      "ldr q31, [x20, #0x30]\n"
      "198:"  // Height 6: MMLA fixup
      "zip1 v8.2d, v9.2d, v12.2d\n"
      "zip2 v12.2d, v9.2d, v12.2d\n"
      "zip1 v9.2d, v10.2d, v13.2d\n"
      "zip2 v13.2d, v10.2d, v13.2d\n"
      "zip1 v10.2d, v11.2d, v14.2d\n"
      "zip2 v14.2d, v11.2d, v14.2d\n"
      "zip1 v11.2d, v16.2d, v15.2d\n"
      "zip2 v15.2d, v16.2d, v15.2d\n"
      "zip1 v16.2d, v17.2d, v20.2d\n"
      "zip2 v20.2d, v17.2d, v20.2d\n"
      "zip1 v17.2d, v18.2d, v21.2d\n"
      "zip2 v21.2d, v18.2d, v21.2d\n"
      "zip1 v18.2d, v19.2d, v22.2d\n"
      "zip2 v22.2d, v19.2d, v22.2d\n"
      "zip1 v19.2d, v24.2d, v23.2d\n"
      "zip2 v23.2d, v24.2d, v23.2d\n"
      "zip1 v24.2d, v25.2d, v28.2d\n"
      "zip2 v28.2d, v25.2d, v28.2d\n"
      "zip1 v25.2d, v26.2d, v29.2d\n"
      "zip2 v29.2d, v26.2d, v29.2d\n"
      "zip1 v26.2d, v27.2d, v30.2d\n"
      "zip2 v30.2d, v27.2d, v30.2d\n"
      "zip1 v27.2d, v6.2d, v31.2d\n"
      "zip2 v31.2d, v6.2d, v31.2d\n"
      "b 200f\n"
      "199:"  // Height 6: no accumulate
      "movi v8.16b, #0x0\n"
      "movi v9.16b, #0x0\n"
      "movi v10.16b, #0x0\n"
      "movi v11.16b, #0x0\n"
      "movi v12.16b, #0x0\n"
      "movi v13.16b, #0x0\n"
      "movi v14.16b, #0x0\n"
      "movi v15.16b, #0x0\n"
      "movi v16.16b, #0x0\n"
      "movi v17.16b, #0x0\n"
      "movi v18.16b, #0x0\n"
      "movi v19.16b, #0x0\n"
      "movi v20.16b, #0x0\n"
      "movi v21.16b, #0x0\n"
      "movi v22.16b, #0x0\n"
      "movi v23.16b, #0x0\n"
      "movi v24.16b, #0x0\n"
      "movi v25.16b, #0x0\n"
      "movi v26.16b, #0x0\n"
      "movi v27.16b, #0x0\n"
      "movi v28.16b, #0x0\n"
      "movi v29.16b, #0x0\n"
      "movi v30.16b, #0x0\n"
      "movi v31.16b, #0x0\n"
      "200:"  // Height 6: setup done
      "mov x27, #0x0\n"
      "201:"  // Height 6: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w26, [x20, x27, LSL #0x2]\n"
      "tbz %x[flags], #3, 202f\n"
      "ldr x20, [%x[input_ptr], x27, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x25, [x20, #0x0]\n"
      "ldr x24, [x20, #0x8]\n"
      "ldr x23, [x20, #0x10]\n"
      "ldr x22, [x20, #0x18]\n"
      "ldr x21, [x20, #0x20]\n"
      "ldr x20, [x20, #0x28]\n"
      "cbnz x27, 203f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x25, x25, x19, LSL #1\n"
      "add x24, x24, x19, LSL #1\n"
      "add x23, x23, x19, LSL #1\n"
      "add x22, x22, x19, LSL #1\n"
      "add x21, x21, x19, LSL #1\n"
      "add x20, x20, x19, LSL #1\n"
      "b 203f\n"
      "202:"  // Height 6: setup direct input
      "mov x25, %x[input_ptr]\n"
      "add x24, x25, x19, LSL #1\n"
      "add x23, x24, x19, LSL #1\n"
      "add x22, x23, x19, LSL #1\n"
      "add x21, x22, x19, LSL #1\n"
      "add x20, x21, x19, LSL #1\n"
      "203:"  // Height 6: input setup done
      "cmp x26, #0x8\n"
      "blt 206f\n"
      "ldr q1, [x25, #0x0]\n"
      "ldr q2, [x24, #0x0]\n"
      "cmp x26, #0x10\n"
      "blt 205f\n"
      "204:"  // Height 6: Multiply loop: Main loop head
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q4, [x22, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q5, [x21, #0x0]\n"
      "add x23, x23, #0x10\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "ldr q6, [x20, #0x0]\n"
      "add x22, x22, #0x10\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x21, x21, #0x10\n"
      "trn2 v5.2d, v5.2d, v6.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x20, x20, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "sub x26, x26, #0x8\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "cmp x26, #0x10\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      "prfm pldl1keep, [x21, #0x80]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "prfm pldl1keep, [x20, #0x80]\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      "ldr q2, [x24, #0x0]\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbc  // bfmmla v28.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb9  // bfmmla v25.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbd  // bfmmla v29.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecba  // bfmmla v26.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbe  // bfmmla v30.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecbb  // bfmmla v27.4s, v5.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      "ldr q1, [x25, #0x0]\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbf  // bfmmla v31.4s, v5.8h, v6.8h\n"
      "bge 204b\n"
      "205:"  // Height 6: Multiply loop: Single iteration only
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q3, [x23, #0x0]\n"
      "sub x26, x26, #0x8\n"
      "trn2 v1.2d, v1.2d, v2.2d\n"
      "ldr q4, [x22, #0x0]\n"
      "add x25, x25, #0x10\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr q5, [x21, #0x0]\n"
      "add x24, x24, #0x10\n"
      "trn2 v3.2d, v3.2d, v4.2d\n"
      "ldr q6, [x20, #0x0]\n"
      "add x23, x23, #0x10\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "add x22, x22, #0x10\n"
      "trn2 v5.2d, v5.2d, v6.2d\n"
      "ldr q6, [x10, #0x10]\n"
      "add x21, x21, #0x10\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      "prfm pldl1keep, [x25, #0x80]\n"
      "add x20, x20, #0x10\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      "prfm pldl1keep, [x23, #0x80]\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      "prfm pldl1keep, [x21, #0x80]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      "prfm pldl1keep, [x20, #0x80]\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x80]\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x90]\n"
      ".inst 0x6e47ec28  // bfmmla v8.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec70  // bfmmla v16.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb8  // bfmmla v24.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xa0]\n"
      ".inst 0x6e46ec2c  // bfmmla v12.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec74  // bfmmla v20.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbc  // bfmmla v28.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xb0]\n"
      ".inst 0x6e47ec29  // bfmmla v9.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec71  // bfmmla v17.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecb9  // bfmmla v25.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xc0]\n"
      ".inst 0x6e46ec2d  // bfmmla v13.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec75  // bfmmla v21.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbd  // bfmmla v29.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xd0]\n"
      ".inst 0x6e47ec2a  // bfmmla v10.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec72  // bfmmla v18.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecba  // bfmmla v26.4s, v5.8h, v7.8h\n"
      "ldr q7, [x10, #0xe0]\n"
      ".inst 0x6e46ec2e  // bfmmla v14.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec76  // bfmmla v22.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbe  // bfmmla v30.4s, v5.8h, v6.8h\n"
      "ldr q6, [x10, #0xf0]\n"
      "add x10, x10, #0x100\n"
      ".inst 0x6e47ec2b  // bfmmla v11.4s, v1.8h, v7.8h\n"
      ".inst 0x6e47ec73  // bfmmla v19.4s, v3.8h, v7.8h\n"
      ".inst 0x6e47ecbb  // bfmmla v27.4s, v5.8h, v7.8h\n"
      ".inst 0x6e46ec2f  // bfmmla v15.4s, v1.8h, v6.8h\n"
      ".inst 0x6e46ec77  // bfmmla v23.4s, v3.8h, v6.8h\n"
      ".inst 0x6e46ecbf  // bfmmla v31.4s, v5.8h, v6.8h\n"
      "206:"  // Height 6: Multiply loop: Main loop skip
      "cbz x26, 211f\n"
      "cmp x26, #0x4\n"
      "blt 208f\n"
      "207:"  // Height 6: Multiply loop: Odd block loop
      "ldr d1, [x25], #0x8\n"
      "sub x26, x26, #0x4\n"
      "ldr d2, [x24], #0x8\n"
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr d3, [x23], #0x8\n"
      "cmp x26, #0x4\n"
      "ldr d4, [x22], #0x8\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "ldr d5, [x21], #0x8\n"
      "ldr d7, [x20], #0x8\n"
      "trn1 v4.2d, v5.2d, v7.2d\n"
      "ldr q6, [x10, #0x0]\n"
      "ldr q7, [x10, #0x10]\n"
      ".inst 0x6e46ec08  // bfmmla v8.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec50  // bfmmla v16.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec98  // bfmmla v24.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x20]\n"
      ".inst 0x6e47ec0c  // bfmmla v12.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec54  // bfmmla v20.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9c  // bfmmla v28.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x30]\n"
      ".inst 0x6e46ec09  // bfmmla v9.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec51  // bfmmla v17.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec99  // bfmmla v25.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x40]\n"
      ".inst 0x6e47ec0d  // bfmmla v13.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec55  // bfmmla v21.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9d  // bfmmla v29.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x50]\n"
      ".inst 0x6e46ec0a  // bfmmla v10.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec52  // bfmmla v18.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9a  // bfmmla v26.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x60]\n"
      ".inst 0x6e47ec0e  // bfmmla v14.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec56  // bfmmla v22.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9e  // bfmmla v30.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e46ec0b  // bfmmla v11.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec53  // bfmmla v19.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9b  // bfmmla v27.4s, v4.8h, v6.8h\n"
      ".inst 0x6e47ec0f  // bfmmla v15.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec57  // bfmmla v23.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9f  // bfmmla v31.4s, v4.8h, v7.8h\n"
      "bge 207b\n"
      "cbz x26, 211f\n"
      "208:"  // Height 6: Multiply loop: Skip odd blocks
      "tbz x26, #1, 209f\n"
      "ldr s1, [x25], #0x4\n"
      "ldr s2, [x24], #0x4\n"
      "ldr s3, [x23], #0x4\n"
      "ldr s4, [x22], #0x4\n"
      "ldr s5, [x21], #0x4\n"
      "ldr s6, [x20], #0x4\n"
      "tbz x26, #0, 210f\n"
      "ld1 { v1.h }[2], [x25]\n"
      "ld1 { v2.h }[2], [x24]\n"
      "ld1 { v3.h }[2], [x23]\n"
      "ld1 { v4.h }[2], [x22]\n"
      "ld1 { v5.h }[2], [x21]\n"
      "ld1 { v6.h }[2], [x20]\n"
      "b 210f\n"
      "209:"  // Height 6: Multiply loop: Ragged operand read: partial_1_0
      "ldr h1, [x25, #0x0]\n"
      "ldr h2, [x24, #0x0]\n"
      "ldr h3, [x23, #0x0]\n"
      "ldr h4, [x22, #0x0]\n"
      "ldr h5, [x21, #0x0]\n"
      "ldr h6, [x20, #0x0]\n"
      "210:"  // Height 6: Multiply loop: Ragged operand read: Done
      "trn1 v0.2d, v1.2d, v2.2d\n"
      "ldr q7, [x10, #0x0]\n"
      "trn1 v2.2d, v3.2d, v4.2d\n"
      "trn1 v4.2d, v5.2d, v6.2d\n"
      "ldr q6, [x10, #0x10]\n"
      ".inst 0x6e47ec08  // bfmmla v8.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec50  // bfmmla v16.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec98  // bfmmla v24.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x20]\n"
      ".inst 0x6e46ec0c  // bfmmla v12.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec54  // bfmmla v20.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9c  // bfmmla v28.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x30]\n"
      ".inst 0x6e47ec09  // bfmmla v9.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec51  // bfmmla v17.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec99  // bfmmla v25.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x40]\n"
      ".inst 0x6e46ec0d  // bfmmla v13.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec55  // bfmmla v21.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9d  // bfmmla v29.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x50]\n"
      ".inst 0x6e47ec0a  // bfmmla v10.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec52  // bfmmla v18.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9a  // bfmmla v26.4s, v4.8h, v7.8h\n"
      "ldr q7, [x10, #0x60]\n"
      ".inst 0x6e46ec0e  // bfmmla v14.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec56  // bfmmla v22.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9e  // bfmmla v30.4s, v4.8h, v6.8h\n"
      "ldr q6, [x10, #0x70]\n"
      "add x10, x10, #0x80\n"
      ".inst 0x6e47ec0b  // bfmmla v11.4s, v0.8h, v7.8h\n"
      ".inst 0x6e47ec53  // bfmmla v19.4s, v2.8h, v7.8h\n"
      ".inst 0x6e47ec9b  // bfmmla v27.4s, v4.8h, v7.8h\n"
      ".inst 0x6e46ec0f  // bfmmla v15.4s, v0.8h, v6.8h\n"
      ".inst 0x6e46ec57  // bfmmla v23.4s, v2.8h, v6.8h\n"
      ".inst 0x6e46ec9f  // bfmmla v31.4s, v4.8h, v6.8h\n"
      "211:"  // Height 6: Multiply loop: No odd multiplies
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x27, x27, #0x1\n"
      "cmp x27, x19\n"
      "bne 201b\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "prfm pstl1keep, [x28, #0x0]\n"
      "add x24, x28, x19, LSL #2\n"
      "prfm pstl1keep, [x24, #0x0]\n"
      "add x23, x24, x19, LSL #2\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "add x22, x23, x19, LSL #2\n"
      "prfm pstl1keep, [x22, #0x0]\n"
      "add x21, x22, x19, LSL #2\n"
      "prfm pstl1keep, [x21, #0x0]\n"
      "add x20, x21, x19, LSL #2\n"
      "prfm pstl1keep, [x20, #0x0]\n"
      "tbz %x[flags], #1, 212f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1r { v1.4s }, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1r { v0.4s }, [x19]\n"
      "fmin v8.4s, v8.4s, v0.4s\n"
      "fmin v9.4s, v9.4s, v0.4s\n"
      "fmin v10.4s, v10.4s, v0.4s\n"
      "fmin v11.4s, v11.4s, v0.4s\n"
      "fmax v8.4s, v8.4s, v1.4s\n"
      "fmax v9.4s, v9.4s, v1.4s\n"
      "fmax v10.4s, v10.4s, v1.4s\n"
      "fmax v11.4s, v11.4s, v1.4s\n"
      "fmin v12.4s, v12.4s, v0.4s\n"
      "fmin v13.4s, v13.4s, v0.4s\n"
      "fmin v14.4s, v14.4s, v0.4s\n"
      "fmax v12.4s, v12.4s, v1.4s\n"
      "fmax v13.4s, v13.4s, v1.4s\n"
      "fmax v14.4s, v14.4s, v1.4s\n"
      "fmin v15.4s, v15.4s, v0.4s\n"
      "fmin v16.4s, v16.4s, v0.4s\n"
      "fmin v17.4s, v17.4s, v0.4s\n"
      "fmax v15.4s, v15.4s, v1.4s\n"
      "fmax v16.4s, v16.4s, v1.4s\n"
      "fmax v17.4s, v17.4s, v1.4s\n"
      "fmin v18.4s, v18.4s, v0.4s\n"
      "fmin v19.4s, v19.4s, v0.4s\n"
      "fmin v20.4s, v20.4s, v0.4s\n"
      "fmax v18.4s, v18.4s, v1.4s\n"
      "fmax v19.4s, v19.4s, v1.4s\n"
      "fmax v20.4s, v20.4s, v1.4s\n"
      "fmin v21.4s, v21.4s, v0.4s\n"
      "fmin v22.4s, v22.4s, v0.4s\n"
      "fmin v23.4s, v23.4s, v0.4s\n"
      "fmax v21.4s, v21.4s, v1.4s\n"
      "fmax v22.4s, v22.4s, v1.4s\n"
      "fmax v23.4s, v23.4s, v1.4s\n"
      "fmin v24.4s, v24.4s, v0.4s\n"
      "fmin v25.4s, v25.4s, v0.4s\n"
      "fmin v26.4s, v26.4s, v0.4s\n"
      "fmax v24.4s, v24.4s, v1.4s\n"
      "fmax v25.4s, v25.4s, v1.4s\n"
      "fmax v26.4s, v26.4s, v1.4s\n"
      "fmin v27.4s, v27.4s, v0.4s\n"
      "fmin v28.4s, v28.4s, v0.4s\n"
      "fmin v29.4s, v29.4s, v0.4s\n"
      "fmax v27.4s, v27.4s, v1.4s\n"
      "fmax v28.4s, v28.4s, v1.4s\n"
      "fmax v29.4s, v29.4s, v1.4s\n"
      "fmin v30.4s, v30.4s, v0.4s\n"
      "fmin v31.4s, v31.4s, v0.4s\n"
      "fmax v30.4s, v30.4s, v1.4s\n"
      "fmax v31.4s, v31.4s, v1.4s\n"
      "212:"  // Height 6: No activation
      "uzp1 v7.2d, v8.2d, v12.2d\n"
      "cmp x11, #0x10\n"
      "uzp2 v8.2d, v8.2d, v12.2d\n"
      "uzp1 v12.2d, v9.2d, v13.2d\n"
      "uzp2 v9.2d, v9.2d, v13.2d\n"
      "uzp1 v13.2d, v10.2d, v14.2d\n"
      "uzp2 v10.2d, v10.2d, v14.2d\n"
      "uzp1 v14.2d, v11.2d, v15.2d\n"
      "uzp2 v11.2d, v11.2d, v15.2d\n"
      "uzp1 v15.2d, v16.2d, v20.2d\n"
      "uzp2 v16.2d, v16.2d, v20.2d\n"
      "uzp1 v20.2d, v17.2d, v21.2d\n"
      "uzp2 v17.2d, v17.2d, v21.2d\n"
      "uzp1 v21.2d, v18.2d, v22.2d\n"
      "uzp2 v18.2d, v18.2d, v22.2d\n"
      "uzp1 v22.2d, v19.2d, v23.2d\n"
      "uzp2 v19.2d, v19.2d, v23.2d\n"
      "uzp1 v23.2d, v24.2d, v28.2d\n"
      "uzp2 v24.2d, v24.2d, v28.2d\n"
      "uzp1 v28.2d, v25.2d, v29.2d\n"
      "uzp2 v25.2d, v25.2d, v29.2d\n"
      "uzp1 v29.2d, v26.2d, v30.2d\n"
      "uzp2 v26.2d, v26.2d, v30.2d\n"
      "uzp1 v30.2d, v27.2d, v31.2d\n"
      "uzp2 v27.2d, v27.2d, v31.2d\n"
      "bge 221f\n"
      "tbz x11, #3, 216f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v12.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v9.4s }, [x24], #0x10\n"
      "st1 { v15.4s }, [x23], #0x10\n"
      "st1 { v20.4s }, [x23], #0x10\n"
      "st1 { v16.4s }, [x22], #0x10\n"
      "st1 { v17.4s }, [x22], #0x10\n"
      "st1 { v23.4s }, [x21], #0x10\n"
      "st1 { v28.4s }, [x21], #0x10\n"
      "st1 { v24.4s }, [x20], #0x10\n"
      "st1 { v25.4s }, [x20], #0x10\n"
      "tbz x11, #2, 214f\n"
      "st1 { v13.4s }, [x28], #0x10\n"
      "st1 { v10.4s }, [x24], #0x10\n"
      "st1 { v21.4s }, [x23], #0x10\n"
      "st1 { v18.4s }, [x22], #0x10\n"
      "st1 { v29.4s }, [x21], #0x10\n"
      "st1 { v26.4s }, [x20], #0x10\n"
      "tbz x11, #1, 213f\n"
      "str d14, [x28], #0x8\n"
      "str d11, [x24], #0x8\n"
      "str d22, [x23], #0x8\n"
      "str d19, [x22], #0x8\n"
      "str d30, [x21], #0x8\n"
      "str d27, [x20], #0x8\n"
      "tbz x11, #0, 220f\n"
      "st1 { v14.s }[2], [x28]\n"
      "st1 { v11.s }[2], [x24]\n"
      "st1 { v22.s }[2], [x23]\n"
      "st1 { v19.s }[2], [x22]\n"
      "st1 { v30.s }[2], [x21]\n"
      "st1 { v27.s }[2], [x20]\n"
      "b 220f\n"
      "213:"  // Height 6: Partial direct writeback: partial_1_12
      "tbz x11, #0, 220f\n"
      "str s14, [x28, #0x0]\n"
      "str s11, [x24, #0x0]\n"
      "str s22, [x23, #0x0]\n"
      "str s19, [x22, #0x0]\n"
      "str s30, [x21, #0x0]\n"
      "str s27, [x20, #0x0]\n"
      "b 220f\n"
      "214:"  // Height 6: Partial direct writeback: partial_2_8
      "tbz x11, #1, 215f\n"
      "str d13, [x28], #0x8\n"
      "str d10, [x24], #0x8\n"
      "str d21, [x23], #0x8\n"
      "str d18, [x22], #0x8\n"
      "str d29, [x21], #0x8\n"
      "str d26, [x20], #0x8\n"
      "tbz x11, #0, 220f\n"
      "st1 { v13.s }[2], [x28]\n"
      "st1 { v10.s }[2], [x24]\n"
      "st1 { v21.s }[2], [x23]\n"
      "st1 { v18.s }[2], [x22]\n"
      "st1 { v29.s }[2], [x21]\n"
      "st1 { v26.s }[2], [x20]\n"
      "b 220f\n"
      "215:"  // Height 6: Partial direct writeback: partial_1_8
      "tbz x11, #0, 220f\n"
      "str s13, [x28, #0x0]\n"
      "str s10, [x24, #0x0]\n"
      "str s21, [x23, #0x0]\n"
      "str s18, [x22, #0x0]\n"
      "str s29, [x21, #0x0]\n"
      "str s26, [x20, #0x0]\n"
      "b 220f\n"
      "216:"  // Height 6: Partial direct writeback: partial_4_0
      "tbz x11, #2, 218f\n"
      "st1 { v7.4s }, [x28], #0x10\n"
      "st1 { v8.4s }, [x24], #0x10\n"
      "st1 { v15.4s }, [x23], #0x10\n"
      "st1 { v16.4s }, [x22], #0x10\n"
      "st1 { v23.4s }, [x21], #0x10\n"
      "st1 { v24.4s }, [x20], #0x10\n"
      "tbz x11, #1, 217f\n"
      "str d12, [x28], #0x8\n"
      "str d9, [x24], #0x8\n"
      "str d20, [x23], #0x8\n"
      "str d17, [x22], #0x8\n"
      "str d28, [x21], #0x8\n"
      "str d25, [x20], #0x8\n"
      "tbz x11, #0, 220f\n"
      "st1 { v12.s }[2], [x28]\n"
      "st1 { v9.s }[2], [x24]\n"
      "st1 { v20.s }[2], [x23]\n"
      "st1 { v17.s }[2], [x22]\n"
      "st1 { v28.s }[2], [x21]\n"
      "st1 { v25.s }[2], [x20]\n"
      "b 220f\n"
      "217:"  // Height 6: Partial direct writeback: partial_1_4
      "tbz x11, #0, 220f\n"
      "str s12, [x28, #0x0]\n"
      "str s9, [x24, #0x0]\n"
      "str s20, [x23, #0x0]\n"
      "str s17, [x22, #0x0]\n"
      "str s28, [x21, #0x0]\n"
      "str s25, [x20, #0x0]\n"
      "b 220f\n"
      "218:"  // Height 6: Partial direct writeback: partial_2_0
      "tbz x11, #1, 219f\n"
      "str d7, [x28], #0x8\n"
      "str d8, [x24], #0x8\n"
      "str d15, [x23], #0x8\n"
      "str d16, [x22], #0x8\n"
      "str d23, [x21], #0x8\n"
      "str d24, [x20], #0x8\n"
      "tbz x11, #0, 220f\n"
      "st1 { v7.s }[2], [x28]\n"
      "st1 { v8.s }[2], [x24]\n"
      "st1 { v15.s }[2], [x23]\n"
      "st1 { v16.s }[2], [x22]\n"
      "st1 { v23.s }[2], [x21]\n"
      "st1 { v24.s }[2], [x20]\n"
      "b 220f\n"
      "219:"  // Height 6: Partial direct writeback: partial_1_0
      "str s7, [x28, #0x0]\n"
      "str s8, [x24, #0x0]\n"
      "str s15, [x23, #0x0]\n"
      "str s16, [x22, #0x0]\n"
      "str s23, [x21, #0x0]\n"
      "str s24, [x20, #0x0]\n"
      "220:"  // Height 6: Partial direct writeback: Done
      "b 222f\n"
      "221:"  // Height 6: Full writeback
      "str q7, [x28, #0x0]\n"
      "str q12, [x28, #0x10]\n"
      "str q13, [x28, #0x20]\n"
      "str q14, [x28, #0x30]\n"
      "add x28, x28, #0x40\n"
      "str q8, [x24, #0x0]\n"
      "str q9, [x24, #0x10]\n"
      "str q10, [x24, #0x20]\n"
      "str q11, [x24, #0x30]\n"
      "str q15, [x23, #0x0]\n"
      "str q20, [x23, #0x10]\n"
      "str q21, [x23, #0x20]\n"
      "str q22, [x23, #0x30]\n"
      "str q16, [x22, #0x0]\n"
      "str q17, [x22, #0x10]\n"
      "str q18, [x22, #0x20]\n"
      "str q19, [x22, #0x30]\n"
      "str q23, [x21, #0x0]\n"
      "str q28, [x21, #0x10]\n"
      "str q29, [x21, #0x20]\n"
      "str q30, [x21, #0x30]\n"
      "str q24, [x20, #0x0]\n"
      "str q25, [x20, #0x10]\n"
      "str q26, [x20, #0x20]\n"
      "str q27, [x20, #0x30]\n"
      "222:"  // Height 6: Writeback done
      "subs x11, x11, #0x10\n"
      "bgt 187b\n"
      "subs %x[M], %x[M], #0x6\n"
      "beq 224f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 223f\n"
      "add x20, x20, #0x6\n"
      "str x20, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "b 1b\n"
      "223:"  // Update direct input
      "mov x19, #0xc\n"
      "madd %x[input_ptr], x19, x20, %x[input_ptr]\n"
      "b 1b\n"
      "224:"  // Exit

      : [M] "+&r" (M), [input_ptr] "+&r" (input_ptr), [output_ptr] "+&r" (output_ptr)
      : [args_ptr] "r" (&ka), [bias] "r" (bias), [flags] "r" (flags), [offset_max] "I" (offsetof(KernelArgs, maxval)), [offset_min] "I" (offsetof(KernelArgs, minval)), [offsetof_B_ptr] "I" (offsetof(KernelArgs, B_ptr)), [offsetof_N] "I" (offsetof(KernelArgs, N)), [offsetof_input_initial_col] "I" (offsetof(KernelArgs, input_initial_col)), [offsetof_input_offset] "I" (offsetof(KernelArgs, input_offset)), [offsetof_num_strings] "I" (offsetof(KernelArgs, num_strings)), [offsetof_output_offset] "I" (offsetof(KernelArgs, output_offset)), [offsetof_string_lengths] "I" (offsetof(KernelArgs, string_lengths))
      : "cc", "memory", "v0", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8", "v9", "v10", "v11", "v12", "v13", "v14", "v15", "v16", "v17", "v18", "v19", "v20", "v21", "v22", "v23", "v24", "v25", "v26", "v27", "v28", "v29", "v30", "v31", "x9", "x10", "x11", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28"
    );
}

} // namespace arm_gemm
#endif // __aarch64__
