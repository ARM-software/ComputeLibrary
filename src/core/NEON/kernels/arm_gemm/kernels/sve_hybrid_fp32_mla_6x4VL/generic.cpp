/*
 * Copyright (c) 2019-2020 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
#ifdef __ARM_FEATURE_SVE

#include "arm_gemm.hpp"
#include "../../utils.hpp"

#include <cassert>

namespace arm_gemm {

void sve_hybrid_fp32_mla_6x4VL (
    unsigned int num_strings, const unsigned int *string_lengths, IndirectInputArg<float> A_arg,
    size_t M, size_t N, const float *B_ptr, IndirectOutputArg<float> output_arg,
    const float *bias, Activation act, bool accumulate
)
{
    struct KernelArgs {
        float maxval = static_cast<float>(std::numeric_limits<float>::infinity());
        float minval = - static_cast<float>(std::numeric_limits<float>::infinity());
        unsigned int num_strings = {};
        const unsigned int *string_lengths = {};
        size_t N = {};
        const float *B_ptr = {};
        size_t output_offset = {};
        size_t input_initial_col = {};
        size_t input_offset = {};
    } ka;

    unsigned long flags=0;
    void *output_ptr;
    void *input_ptr;

    if (output_arg.is_indirect) {
        output_ptr=(void *)(output_arg.indirect.ptr);
        ka.output_offset=output_arg.indirect.offset;
        flags |= 0x4;
    } else {
        output_ptr=(void *)(output_arg.direct.base);
        ka.output_offset=output_arg.direct.stride;
    }

    if (A_arg.is_indirect) {
        input_ptr=(void *)(A_arg.indirect.ptr);
        ka.input_offset=A_arg.indirect.start_row;
        ka.input_initial_col=A_arg.indirect.start_col;
        flags |= 0x8;
    } else {
        assert(num_strings==1);
        input_ptr=(void *)(A_arg.direct.base);
        ka.input_offset=A_arg.direct.stride;
    }
    if (accumulate) {
        flags |= 0x1;
    }
    ka.num_strings = num_strings;
    ka.string_lengths = string_lengths;
    ka.N = N;
    ka.B_ptr = B_ptr;
    switch(act.type) {
        default:
        case Activation::Type::None:
            break;
        case Activation::Type::BoundedReLU:
            ka.maxval = static_cast<float>(act.param1);
            /* fall through */
        case Activation::Type::ReLU:
            ka.minval = 0;
            flags |= 0x2;
            break;
    }
    __asm__ __volatile__(
      "ptrue p5.b\n"
      "1:"  // Row loop
      "cmp %x[M], #0x6\n"
      "bge 71f\n"
      "cmp %x[M], #0x4\n"
      "bgt 57f\n"
      "beq 43f\n"
      "cmp %x[M], #0x2\n"
      "bgt 29f\n"
      "beq 15f\n"
      "ldr x16, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x14, %x[bias]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 2f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19, LSL #2\n"
      "b 3f\n"
      "2:"  // Height 1: setup direct output
      "mov x13, %x[output_ptr]\n"
      "3:"  // Height 1: Column loop
      "mov x19, #0x0\n"
      "whilelt p4.s, x19, x16\n"
      "incw x19\n"
      "whilelt p3.s, x19, x16\n"
      "incw x19\n"
      "whilelt p2.s, x19, x16\n"
      "incw x19\n"
      "whilelt p1.s, x19, x16\n"
      "cbz x14, 4f\n"
      "ld1w { z8.s }, p5/Z, [x14]\n"
      "ld1w { z9.s }, p5/Z, [x14, #1, MUL VL]\n"
      "ld1w { z10.s }, p5/Z, [x14, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x14, #3, MUL VL]\n"
      "addvl x14, x14, #4\n"
      "b 6f\n"
      "4:"  // Height 1: no bias
      "tbz %x[flags], #0, 5f\n"
      "ld1w { z8.s }, p4/Z, [x13]\n"
      "ld1w { z9.s }, p3/Z, [x13, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x13, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x13, #3, MUL VL]\n"
      "b 6f\n"
      "5:"  // Height 1: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "6:"  // Height 1: setup done
      "mov x12, #0x0\n"
      "7:"  // Height 1: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 8f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "cbnz x12, 9f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19, LSL #2\n"
      "b 9f\n"
      "8:"  // Height 1: setup direct input
      "mov x10, %x[input_ptr]\n"
      "9:"  // Height 1: input setup done
      "cmp x11, #0x4\n"
      "ble 11f\n"
      "10:"  // Height 1: Multiply loop: Main loop head
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "sub x11, x11, #0x4\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "cmp x11, #0x4\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #4, MUL VL]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #5, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #7, MUL VL]\n"
      "addvl x15, x15, #16\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-8, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-7, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-5, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-3, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-1, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "bgt 10b\n"
      "11:"  // Height 1: Multiply loop: Single iteration only
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "ble 12f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "addvl x15, x15, #4\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "ble 12f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "addvl x15, x15, #4\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "ble 12f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "12:"  // Height 1: Multiply loop: multiply skip
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x12, x12, #0x1\n"
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "cmp x12, x19\n"
      "bne 7b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "tbz %x[flags], #1, 13f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z1.s }, p5/Z, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z0.s }, p5/Z, [x19]\n"
      "fmin z8.s, p5/M, z8.s, z0.s\n"
      "fmin z9.s, p5/M, z9.s, z0.s\n"
      "fmin z10.s, p5/M, z10.s, z0.s\n"
      "fmin z11.s, p5/M, z11.s, z0.s\n"
      "fmax z8.s, p5/M, z8.s, z1.s\n"
      "fmax z9.s, p5/M, z9.s, z1.s\n"
      "fmax z10.s, p5/M, z10.s, z1.s\n"
      "fmax z11.s, p5/M, z11.s, z1.s\n"
      "13:"  // Height 1: No activation
      "st1w { z8.s }, p4, [x13]\n"
      "st1w { z9.s }, p3, [x13, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x13, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x13, #3, MUL VL]\n"
      "addvl x13, x13, #4\n"
      "14:"  // Height 1: Writeback done
      "mov x19, #0x0\n"
      "incw x19, ALL, MUL #4\n"
      "subs x16, x16, x19\n"
      "bgt 3b\n"
      "b 86f\n"
      "15:"  // Height 2
      "ldr x16, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x14, %x[bias]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 16f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19, LSL #2\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "add x9, x9, x19, LSL #2\n"
      "b 17f\n"
      "16:"  // Height 2: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19, LSL #2\n"
      "17:"  // Height 2: Column loop
      "mov x19, #0x0\n"
      "whilelt p4.s, x19, x16\n"
      "incw x19\n"
      "whilelt p3.s, x19, x16\n"
      "incw x19\n"
      "whilelt p2.s, x19, x16\n"
      "incw x19\n"
      "whilelt p1.s, x19, x16\n"
      "cbz x14, 18f\n"
      "ld1w { z8.s }, p5/Z, [x14]\n"
      "mov z12.d, z8.d\n"
      "ld1w { z9.s }, p5/Z, [x14, #1, MUL VL]\n"
      "ld1w { z10.s }, p5/Z, [x14, #2, MUL VL]\n"
      "mov z13.d, z9.d\n"
      "ld1w { z11.s }, p5/Z, [x14, #3, MUL VL]\n"
      "addvl x14, x14, #4\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "b 20f\n"
      "18:"  // Height 2: no bias
      "tbz %x[flags], #0, 19f\n"
      "ld1w { z8.s }, p4/Z, [x13]\n"
      "ld1w { z9.s }, p3/Z, [x13, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x13, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x13, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x9]\n"
      "ld1w { z13.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x9, #3, MUL VL]\n"
      "b 20f\n"
      "19:"  // Height 2: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "20:"  // Height 2: setup done
      "mov x12, #0x0\n"
      "21:"  // Height 2: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 22f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "cbnz x12, 23f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19, LSL #2\n"
      "add x28, x28, x19, LSL #2\n"
      "b 23f\n"
      "22:"  // Height 2: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19, LSL #2\n"
      "23:"  // Height 2: input setup done
      "cmp x11, #0x4\n"
      "ble 25f\n"
      "24:"  // Height 2: Multiply loop: Main loop head
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "sub x11, x11, #0x4\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "cmp x11, #0x4\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #5, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #7, MUL VL]\n"
      "addvl x15, x15, #16\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-8, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-7, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-5, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-3, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-1, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "bgt 24b\n"
      "25:"  // Height 2: Multiply loop: Single iteration only
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "ble 26f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "ble 26f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "ble 26f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "26:"  // Height 2: Multiply loop: multiply skip
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x12, x12, #0x1\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "cmp x12, x19\n"
      "bne 21b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "tbz %x[flags], #1, 27f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z1.s }, p5/Z, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z0.s }, p5/Z, [x19]\n"
      "fmin z8.s, p5/M, z8.s, z0.s\n"
      "fmin z9.s, p5/M, z9.s, z0.s\n"
      "fmin z10.s, p5/M, z10.s, z0.s\n"
      "fmin z11.s, p5/M, z11.s, z0.s\n"
      "fmin z12.s, p5/M, z12.s, z0.s\n"
      "fmax z8.s, p5/M, z8.s, z1.s\n"
      "fmax z9.s, p5/M, z9.s, z1.s\n"
      "fmax z10.s, p5/M, z10.s, z1.s\n"
      "fmax z11.s, p5/M, z11.s, z1.s\n"
      "fmax z12.s, p5/M, z12.s, z1.s\n"
      "fmin z13.s, p5/M, z13.s, z0.s\n"
      "fmin z14.s, p5/M, z14.s, z0.s\n"
      "fmin z15.s, p5/M, z15.s, z0.s\n"
      "fmax z13.s, p5/M, z13.s, z1.s\n"
      "fmax z14.s, p5/M, z14.s, z1.s\n"
      "fmax z15.s, p5/M, z15.s, z1.s\n"
      "27:"  // Height 2: No activation
      "st1w { z8.s }, p4, [x13]\n"
      "st1w { z9.s }, p3, [x13, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x13, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x13, #3, MUL VL]\n"
      "addvl x13, x13, #4\n"
      "st1w { z12.s }, p4, [x9]\n"
      "st1w { z13.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "28:"  // Height 2: Writeback done
      "mov x19, #0x0\n"
      "incw x19, ALL, MUL #4\n"
      "subs x16, x16, x19\n"
      "bgt 17b\n"
      "b 86f\n"
      "29:"  // Height 3
      "ldr x16, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x14, %x[bias]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 30f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19, LSL #2\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19, LSL #2\n"
      "add x27, x27, x19, LSL #2\n"
      "b 31f\n"
      "30:"  // Height 3: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19, LSL #2\n"
      "add x27, x9, x19, LSL #2\n"
      "31:"  // Height 3: Column loop
      "mov x19, #0x0\n"
      "whilelt p4.s, x19, x16\n"
      "incw x19\n"
      "whilelt p3.s, x19, x16\n"
      "incw x19\n"
      "whilelt p2.s, x19, x16\n"
      "incw x19\n"
      "whilelt p1.s, x19, x16\n"
      "cbz x14, 32f\n"
      "ld1w { z8.s }, p5/Z, [x14]\n"
      "mov z12.d, z8.d\n"
      "ld1w { z9.s }, p5/Z, [x14, #1, MUL VL]\n"
      "mov z16.d, z8.d\n"
      "ld1w { z10.s }, p5/Z, [x14, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x14, #3, MUL VL]\n"
      "mov z13.d, z9.d\n"
      "addvl x14, x14, #4\n"
      "mov z17.d, z9.d\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "b 34f\n"
      "32:"  // Height 3: no bias
      "tbz %x[flags], #0, 33f\n"
      "ld1w { z8.s }, p4/Z, [x13]\n"
      "ld1w { z9.s }, p3/Z, [x13, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x13, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x13, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x9]\n"
      "ld1w { z13.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x27]\n"
      "ld1w { z17.s }, p3/Z, [x27, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x27, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x27, #3, MUL VL]\n"
      "b 34f\n"
      "33:"  // Height 3: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "34:"  // Height 3: setup done
      "mov x12, #0x0\n"
      "35:"  // Height 3: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 36f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "cbnz x12, 37f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19, LSL #2\n"
      "add x28, x28, x19, LSL #2\n"
      "add x26, x26, x19, LSL #2\n"
      "b 37f\n"
      "36:"  // Height 3: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19, LSL #2\n"
      "add x26, x28, x19, LSL #2\n"
      "37:"  // Height 3: input setup done
      "cmp x11, #0x4\n"
      "ble 39f\n"
      "38:"  // Height 3: Multiply loop: Main loop head
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "sub x11, x11, #0x4\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x26, x26, #0x10\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "cmp x11, #0x4\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #5, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #7, MUL VL]\n"
      "addvl x15, x15, #16\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-8, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-7, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-5, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-3, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-1, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "bgt 38b\n"
      "39:"  // Height 3: Multiply loop: Single iteration only
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "add x26, x26, #0x10\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "ble 40f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "ble 40f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "ble 40f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "40:"  // Height 3: Multiply loop: multiply skip
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x12, x12, #0x1\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "cmp x12, x19\n"
      "bne 35b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "tbz %x[flags], #1, 41f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z1.s }, p5/Z, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z0.s }, p5/Z, [x19]\n"
      "fmin z8.s, p5/M, z8.s, z0.s\n"
      "fmin z9.s, p5/M, z9.s, z0.s\n"
      "fmin z10.s, p5/M, z10.s, z0.s\n"
      "fmin z11.s, p5/M, z11.s, z0.s\n"
      "fmin z12.s, p5/M, z12.s, z0.s\n"
      "fmax z8.s, p5/M, z8.s, z1.s\n"
      "fmax z9.s, p5/M, z9.s, z1.s\n"
      "fmax z10.s, p5/M, z10.s, z1.s\n"
      "fmax z11.s, p5/M, z11.s, z1.s\n"
      "fmax z12.s, p5/M, z12.s, z1.s\n"
      "fmin z13.s, p5/M, z13.s, z0.s\n"
      "fmin z14.s, p5/M, z14.s, z0.s\n"
      "fmin z15.s, p5/M, z15.s, z0.s\n"
      "fmin z16.s, p5/M, z16.s, z0.s\n"
      "fmax z13.s, p5/M, z13.s, z1.s\n"
      "fmax z14.s, p5/M, z14.s, z1.s\n"
      "fmax z15.s, p5/M, z15.s, z1.s\n"
      "fmax z16.s, p5/M, z16.s, z1.s\n"
      "fmin z17.s, p5/M, z17.s, z0.s\n"
      "fmin z18.s, p5/M, z18.s, z0.s\n"
      "fmin z19.s, p5/M, z19.s, z0.s\n"
      "fmax z17.s, p5/M, z17.s, z1.s\n"
      "fmax z18.s, p5/M, z18.s, z1.s\n"
      "fmax z19.s, p5/M, z19.s, z1.s\n"
      "41:"  // Height 3: No activation
      "st1w { z8.s }, p4, [x13]\n"
      "st1w { z9.s }, p3, [x13, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x13, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x13, #3, MUL VL]\n"
      "addvl x13, x13, #4\n"
      "st1w { z12.s }, p4, [x9]\n"
      "st1w { z13.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z16.s }, p4, [x27]\n"
      "st1w { z17.s }, p3, [x27, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x27, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x27, #3, MUL VL]\n"
      "addvl x27, x27, #4\n"
      "42:"  // Height 3: Writeback done
      "mov x19, #0x0\n"
      "incw x19, ALL, MUL #4\n"
      "subs x16, x16, x19\n"
      "bgt 31b\n"
      "b 86f\n"
      "43:"  // Height 4
      "ldr x16, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x14, %x[bias]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 44f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19, LSL #2\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19, LSL #2\n"
      "ldr x25, [%x[output_ptr], #0x18]\n"
      "add x27, x27, x19, LSL #2\n"
      "add x25, x25, x19, LSL #2\n"
      "b 45f\n"
      "44:"  // Height 4: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19, LSL #2\n"
      "add x27, x9, x19, LSL #2\n"
      "add x25, x27, x19, LSL #2\n"
      "45:"  // Height 4: Column loop
      "mov x19, #0x0\n"
      "whilelt p4.s, x19, x16\n"
      "incw x19\n"
      "whilelt p3.s, x19, x16\n"
      "incw x19\n"
      "whilelt p2.s, x19, x16\n"
      "incw x19\n"
      "whilelt p1.s, x19, x16\n"
      "cbz x14, 46f\n"
      "ld1w { z8.s }, p5/Z, [x14]\n"
      "mov z12.d, z8.d\n"
      "ld1w { z9.s }, p5/Z, [x14, #1, MUL VL]\n"
      "mov z16.d, z8.d\n"
      "ld1w { z10.s }, p5/Z, [x14, #2, MUL VL]\n"
      "mov z20.d, z8.d\n"
      "ld1w { z11.s }, p5/Z, [x14, #3, MUL VL]\n"
      "addvl x14, x14, #4\n"
      "mov z13.d, z9.d\n"
      "mov z17.d, z9.d\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "mov z21.d, z9.d\n"
      "mov z22.d, z10.d\n"
      "mov z23.d, z11.d\n"
      "b 48f\n"
      "46:"  // Height 4: no bias
      "tbz %x[flags], #0, 47f\n"
      "ld1w { z8.s }, p4/Z, [x13]\n"
      "ld1w { z9.s }, p3/Z, [x13, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x13, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x13, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x9]\n"
      "ld1w { z13.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x27]\n"
      "ld1w { z17.s }, p3/Z, [x27, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x27, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x27, #3, MUL VL]\n"
      "ld1w { z20.s }, p4/Z, [x25]\n"
      "ld1w { z21.s }, p3/Z, [x25, #1, MUL VL]\n"
      "ld1w { z22.s }, p2/Z, [x25, #2, MUL VL]\n"
      "ld1w { z23.s }, p1/Z, [x25, #3, MUL VL]\n"
      "b 48f\n"
      "47:"  // Height 4: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "mov z20.b, #0x0\n"
      "mov z21.b, #0x0\n"
      "mov z22.b, #0x0\n"
      "mov z23.b, #0x0\n"
      "48:"  // Height 4: setup done
      "mov x12, #0x0\n"
      "49:"  // Height 4: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 50f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "ldr x24, [x20, #0x18]\n"
      "cbnz x12, 51f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19, LSL #2\n"
      "add x28, x28, x19, LSL #2\n"
      "add x26, x26, x19, LSL #2\n"
      "add x24, x24, x19, LSL #2\n"
      "b 51f\n"
      "50:"  // Height 4: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19, LSL #2\n"
      "add x26, x28, x19, LSL #2\n"
      "add x24, x26, x19, LSL #2\n"
      "51:"  // Height 4: input setup done
      "cmp x11, #0x4\n"
      "ble 53f\n"
      "52:"  // Height 4: Multiply loop: Main loop head
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "sub x11, x11, #0x4\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1rqw { z3.s }, p0/Z, [x24]\n"
      "add x26, x26, #0x10\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x24, x24, #0x10\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "cmp x11, #0x4\n"
      "fmla z20.s, z6.s, z3.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "fmla z21.s, z7.s, z3.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "fmla z22.s, z6.s, z3.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "fmla z23.s, z7.s, z3.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #5, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "fmla z20.s, z6.s, z3.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "fmla z21.s, z7.s, z3.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #7, MUL VL]\n"
      "addvl x15, x15, #16\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "fmla z22.s, z6.s, z3.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-8, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "fmla z23.s, z7.s, z3.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-7, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "fmla z20.s, z6.s, z3.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "fmla z21.s, z7.s, z3.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-5, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "fmla z22.s, z6.s, z3.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "fmla z23.s, z7.s, z3.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-3, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "fmla z20.s, z6.s, z3.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "fmla z21.s, z7.s, z3.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-1, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z22.s, z6.s, z3.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "fmla z23.s, z7.s, z3.s[3]\n"
      "bgt 52b\n"
      "53:"  // Height 4: Multiply loop: Single iteration only
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1rqw { z3.s }, p0/Z, [x24]\n"
      "add x26, x26, #0x10\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "add x24, x24, #0x10\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "fmla z20.s, z6.s, z3.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z21.s, z7.s, z3.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "fmla z22.s, z6.s, z3.s[0]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "fmla z23.s, z7.s, z3.s[0]\n"
      "ble 54f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "fmla z20.s, z6.s, z3.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "fmla z21.s, z7.s, z3.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "fmla z22.s, z6.s, z3.s[1]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "fmla z23.s, z7.s, z3.s[1]\n"
      "ble 54f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "fmla z20.s, z6.s, z3.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "fmla z21.s, z7.s, z3.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "fmla z22.s, z6.s, z3.s[2]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "fmla z23.s, z7.s, z3.s[2]\n"
      "ble 54f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "fmla z20.s, z6.s, z3.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "fmla z21.s, z7.s, z3.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z22.s, z6.s, z3.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "fmla z23.s, z7.s, z3.s[3]\n"
      "54:"  // Height 4: Multiply loop: multiply skip
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x12, x12, #0x1\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "cmp x12, x19\n"
      "bne 49b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "tbz %x[flags], #1, 55f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z1.s }, p5/Z, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z0.s }, p5/Z, [x19]\n"
      "fmin z8.s, p5/M, z8.s, z0.s\n"
      "fmin z9.s, p5/M, z9.s, z0.s\n"
      "fmin z10.s, p5/M, z10.s, z0.s\n"
      "fmin z11.s, p5/M, z11.s, z0.s\n"
      "fmin z12.s, p5/M, z12.s, z0.s\n"
      "fmax z8.s, p5/M, z8.s, z1.s\n"
      "fmax z9.s, p5/M, z9.s, z1.s\n"
      "fmax z10.s, p5/M, z10.s, z1.s\n"
      "fmax z11.s, p5/M, z11.s, z1.s\n"
      "fmax z12.s, p5/M, z12.s, z1.s\n"
      "fmin z13.s, p5/M, z13.s, z0.s\n"
      "fmin z14.s, p5/M, z14.s, z0.s\n"
      "fmin z15.s, p5/M, z15.s, z0.s\n"
      "fmin z16.s, p5/M, z16.s, z0.s\n"
      "fmax z13.s, p5/M, z13.s, z1.s\n"
      "fmax z14.s, p5/M, z14.s, z1.s\n"
      "fmax z15.s, p5/M, z15.s, z1.s\n"
      "fmax z16.s, p5/M, z16.s, z1.s\n"
      "fmin z17.s, p5/M, z17.s, z0.s\n"
      "fmin z18.s, p5/M, z18.s, z0.s\n"
      "fmin z19.s, p5/M, z19.s, z0.s\n"
      "fmin z20.s, p5/M, z20.s, z0.s\n"
      "fmax z17.s, p5/M, z17.s, z1.s\n"
      "fmax z18.s, p5/M, z18.s, z1.s\n"
      "fmax z19.s, p5/M, z19.s, z1.s\n"
      "fmax z20.s, p5/M, z20.s, z1.s\n"
      "fmin z21.s, p5/M, z21.s, z0.s\n"
      "fmin z22.s, p5/M, z22.s, z0.s\n"
      "fmin z23.s, p5/M, z23.s, z0.s\n"
      "fmax z21.s, p5/M, z21.s, z1.s\n"
      "fmax z22.s, p5/M, z22.s, z1.s\n"
      "fmax z23.s, p5/M, z23.s, z1.s\n"
      "55:"  // Height 4: No activation
      "st1w { z8.s }, p4, [x13]\n"
      "st1w { z9.s }, p3, [x13, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x13, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x13, #3, MUL VL]\n"
      "addvl x13, x13, #4\n"
      "st1w { z12.s }, p4, [x9]\n"
      "st1w { z13.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z16.s }, p4, [x27]\n"
      "st1w { z17.s }, p3, [x27, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x27, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x27, #3, MUL VL]\n"
      "addvl x27, x27, #4\n"
      "st1w { z20.s }, p4, [x25]\n"
      "st1w { z21.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z22.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z23.s }, p1, [x25, #3, MUL VL]\n"
      "addvl x25, x25, #4\n"
      "56:"  // Height 4: Writeback done
      "mov x19, #0x0\n"
      "incw x19, ALL, MUL #4\n"
      "subs x16, x16, x19\n"
      "bgt 45b\n"
      "b 86f\n"
      "57:"  // Height 5
      "ldr x16, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x14, %x[bias]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 58f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19, LSL #2\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19, LSL #2\n"
      "ldr x25, [%x[output_ptr], #0x18]\n"
      "ldr x23, [%x[output_ptr], #0x20]\n"
      "add x27, x27, x19, LSL #2\n"
      "add x25, x25, x19, LSL #2\n"
      "add x23, x23, x19, LSL #2\n"
      "b 59f\n"
      "58:"  // Height 5: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19, LSL #2\n"
      "add x27, x9, x19, LSL #2\n"
      "add x25, x27, x19, LSL #2\n"
      "add x23, x25, x19, LSL #2\n"
      "59:"  // Height 5: Column loop
      "mov x19, #0x0\n"
      "whilelt p4.s, x19, x16\n"
      "incw x19\n"
      "whilelt p3.s, x19, x16\n"
      "incw x19\n"
      "whilelt p2.s, x19, x16\n"
      "incw x19\n"
      "whilelt p1.s, x19, x16\n"
      "cbz x14, 60f\n"
      "ld1w { z8.s }, p5/Z, [x14]\n"
      "mov z12.d, z8.d\n"
      "ld1w { z9.s }, p5/Z, [x14, #1, MUL VL]\n"
      "mov z16.d, z8.d\n"
      "ld1w { z10.s }, p5/Z, [x14, #2, MUL VL]\n"
      "mov z20.d, z8.d\n"
      "ld1w { z11.s }, p5/Z, [x14, #3, MUL VL]\n"
      "addvl x14, x14, #4\n"
      "mov z13.d, z9.d\n"
      "mov z17.d, z9.d\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "mov z21.d, z9.d\n"
      "mov z22.d, z10.d\n"
      "mov z23.d, z11.d\n"
      "mov z24.d, z8.d\n"
      "mov z25.d, z9.d\n"
      "mov z26.d, z10.d\n"
      "mov z27.d, z11.d\n"
      "b 62f\n"
      "60:"  // Height 5: no bias
      "tbz %x[flags], #0, 61f\n"
      "ld1w { z8.s }, p4/Z, [x13]\n"
      "ld1w { z9.s }, p3/Z, [x13, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x13, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x13, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x9]\n"
      "ld1w { z13.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x27]\n"
      "ld1w { z17.s }, p3/Z, [x27, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x27, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x27, #3, MUL VL]\n"
      "ld1w { z20.s }, p4/Z, [x25]\n"
      "ld1w { z21.s }, p3/Z, [x25, #1, MUL VL]\n"
      "ld1w { z22.s }, p2/Z, [x25, #2, MUL VL]\n"
      "ld1w { z23.s }, p1/Z, [x25, #3, MUL VL]\n"
      "ld1w { z24.s }, p4/Z, [x23]\n"
      "ld1w { z25.s }, p3/Z, [x23, #1, MUL VL]\n"
      "ld1w { z26.s }, p2/Z, [x23, #2, MUL VL]\n"
      "ld1w { z27.s }, p1/Z, [x23, #3, MUL VL]\n"
      "b 62f\n"
      "61:"  // Height 5: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "mov z20.b, #0x0\n"
      "mov z21.b, #0x0\n"
      "mov z22.b, #0x0\n"
      "mov z23.b, #0x0\n"
      "mov z24.b, #0x0\n"
      "mov z25.b, #0x0\n"
      "mov z26.b, #0x0\n"
      "mov z27.b, #0x0\n"
      "62:"  // Height 5: setup done
      "mov x12, #0x0\n"
      "63:"  // Height 5: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 64f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "ldr x24, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "cbnz x12, 65f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19, LSL #2\n"
      "add x28, x28, x19, LSL #2\n"
      "add x26, x26, x19, LSL #2\n"
      "add x24, x24, x19, LSL #2\n"
      "add x22, x22, x19, LSL #2\n"
      "b 65f\n"
      "64:"  // Height 5: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19, LSL #2\n"
      "add x26, x28, x19, LSL #2\n"
      "add x24, x26, x19, LSL #2\n"
      "add x22, x24, x19, LSL #2\n"
      "65:"  // Height 5: input setup done
      "cmp x11, #0x4\n"
      "ble 67f\n"
      "66:"  // Height 5: Multiply loop: Main loop head
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "sub x11, x11, #0x4\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1rqw { z3.s }, p0/Z, [x24]\n"
      "add x26, x26, #0x10\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "ld1rqw { z4.s }, p0/Z, [x22]\n"
      "add x24, x24, #0x10\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x22, x22, #0x10\n"
      "fmla z20.s, z6.s, z3.s[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "cmp x11, #0x4\n"
      "fmla z24.s, z6.s, z4.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "fmla z21.s, z7.s, z3.s[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "fmla z25.s, z7.s, z4.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "fmla z22.s, z6.s, z3.s[0]\n"
      "fmla z26.s, z6.s, z4.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "fmla z23.s, z7.s, z3.s[0]\n"
      "fmla z27.s, z7.s, z4.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #5, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "fmla z20.s, z6.s, z3.s[1]\n"
      "fmla z24.s, z6.s, z4.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "fmla z21.s, z7.s, z3.s[1]\n"
      "fmla z25.s, z7.s, z4.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #7, MUL VL]\n"
      "addvl x15, x15, #16\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "fmla z22.s, z6.s, z3.s[1]\n"
      "fmla z26.s, z6.s, z4.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-8, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "fmla z23.s, z7.s, z3.s[1]\n"
      "fmla z27.s, z7.s, z4.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-7, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "fmla z20.s, z6.s, z3.s[2]\n"
      "fmla z24.s, z6.s, z4.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "fmla z21.s, z7.s, z3.s[2]\n"
      "fmla z25.s, z7.s, z4.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-5, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "fmla z22.s, z6.s, z3.s[2]\n"
      "fmla z26.s, z6.s, z4.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "fmla z23.s, z7.s, z3.s[2]\n"
      "fmla z27.s, z7.s, z4.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-3, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "fmla z20.s, z6.s, z3.s[3]\n"
      "fmla z24.s, z6.s, z4.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "fmla z21.s, z7.s, z3.s[3]\n"
      "fmla z25.s, z7.s, z4.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-1, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z22.s, z6.s, z3.s[3]\n"
      "fmla z26.s, z6.s, z4.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "fmla z23.s, z7.s, z3.s[3]\n"
      "fmla z27.s, z7.s, z4.s[3]\n"
      "bgt 66b\n"
      "67:"  // Height 5: Multiply loop: Single iteration only
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1rqw { z3.s }, p0/Z, [x24]\n"
      "add x26, x26, #0x10\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "ld1rqw { z4.s }, p0/Z, [x22]\n"
      "add x24, x24, #0x10\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "add x22, x22, #0x10\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "fmla z20.s, z6.s, z3.s[0]\n"
      "fmla z24.s, z6.s, z4.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z21.s, z7.s, z3.s[0]\n"
      "fmla z25.s, z7.s, z4.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "fmla z22.s, z6.s, z3.s[0]\n"
      "fmla z26.s, z6.s, z4.s[0]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "fmla z23.s, z7.s, z3.s[0]\n"
      "fmla z27.s, z7.s, z4.s[0]\n"
      "ble 68f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "fmla z20.s, z6.s, z3.s[1]\n"
      "fmla z24.s, z6.s, z4.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "fmla z21.s, z7.s, z3.s[1]\n"
      "fmla z25.s, z7.s, z4.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "fmla z22.s, z6.s, z3.s[1]\n"
      "fmla z26.s, z6.s, z4.s[1]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "fmla z23.s, z7.s, z3.s[1]\n"
      "fmla z27.s, z7.s, z4.s[1]\n"
      "ble 68f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "fmla z20.s, z6.s, z3.s[2]\n"
      "fmla z24.s, z6.s, z4.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "fmla z21.s, z7.s, z3.s[2]\n"
      "fmla z25.s, z7.s, z4.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "fmla z22.s, z6.s, z3.s[2]\n"
      "fmla z26.s, z6.s, z4.s[2]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "fmla z23.s, z7.s, z3.s[2]\n"
      "fmla z27.s, z7.s, z4.s[2]\n"
      "ble 68f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "fmla z20.s, z6.s, z3.s[3]\n"
      "fmla z24.s, z6.s, z4.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "fmla z21.s, z7.s, z3.s[3]\n"
      "fmla z25.s, z7.s, z4.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z22.s, z6.s, z3.s[3]\n"
      "fmla z26.s, z6.s, z4.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "fmla z23.s, z7.s, z3.s[3]\n"
      "fmla z27.s, z7.s, z4.s[3]\n"
      "68:"  // Height 5: Multiply loop: multiply skip
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x12, x12, #0x1\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "cmp x12, x19\n"
      "bne 63b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "tbz %x[flags], #1, 69f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z1.s }, p5/Z, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z0.s }, p5/Z, [x19]\n"
      "fmin z8.s, p5/M, z8.s, z0.s\n"
      "fmin z9.s, p5/M, z9.s, z0.s\n"
      "fmin z10.s, p5/M, z10.s, z0.s\n"
      "fmin z11.s, p5/M, z11.s, z0.s\n"
      "fmin z12.s, p5/M, z12.s, z0.s\n"
      "fmax z8.s, p5/M, z8.s, z1.s\n"
      "fmax z9.s, p5/M, z9.s, z1.s\n"
      "fmax z10.s, p5/M, z10.s, z1.s\n"
      "fmax z11.s, p5/M, z11.s, z1.s\n"
      "fmax z12.s, p5/M, z12.s, z1.s\n"
      "fmin z13.s, p5/M, z13.s, z0.s\n"
      "fmin z14.s, p5/M, z14.s, z0.s\n"
      "fmin z15.s, p5/M, z15.s, z0.s\n"
      "fmin z16.s, p5/M, z16.s, z0.s\n"
      "fmax z13.s, p5/M, z13.s, z1.s\n"
      "fmax z14.s, p5/M, z14.s, z1.s\n"
      "fmax z15.s, p5/M, z15.s, z1.s\n"
      "fmax z16.s, p5/M, z16.s, z1.s\n"
      "fmin z17.s, p5/M, z17.s, z0.s\n"
      "fmin z18.s, p5/M, z18.s, z0.s\n"
      "fmin z19.s, p5/M, z19.s, z0.s\n"
      "fmin z20.s, p5/M, z20.s, z0.s\n"
      "fmax z17.s, p5/M, z17.s, z1.s\n"
      "fmax z18.s, p5/M, z18.s, z1.s\n"
      "fmax z19.s, p5/M, z19.s, z1.s\n"
      "fmax z20.s, p5/M, z20.s, z1.s\n"
      "fmin z21.s, p5/M, z21.s, z0.s\n"
      "fmin z22.s, p5/M, z22.s, z0.s\n"
      "fmin z23.s, p5/M, z23.s, z0.s\n"
      "fmin z24.s, p5/M, z24.s, z0.s\n"
      "fmax z21.s, p5/M, z21.s, z1.s\n"
      "fmax z22.s, p5/M, z22.s, z1.s\n"
      "fmax z23.s, p5/M, z23.s, z1.s\n"
      "fmax z24.s, p5/M, z24.s, z1.s\n"
      "fmin z25.s, p5/M, z25.s, z0.s\n"
      "fmin z26.s, p5/M, z26.s, z0.s\n"
      "fmin z27.s, p5/M, z27.s, z0.s\n"
      "fmax z25.s, p5/M, z25.s, z1.s\n"
      "fmax z26.s, p5/M, z26.s, z1.s\n"
      "fmax z27.s, p5/M, z27.s, z1.s\n"
      "69:"  // Height 5: No activation
      "st1w { z8.s }, p4, [x13]\n"
      "st1w { z9.s }, p3, [x13, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x13, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x13, #3, MUL VL]\n"
      "addvl x13, x13, #4\n"
      "st1w { z12.s }, p4, [x9]\n"
      "st1w { z13.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z16.s }, p4, [x27]\n"
      "st1w { z17.s }, p3, [x27, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x27, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x27, #3, MUL VL]\n"
      "addvl x27, x27, #4\n"
      "st1w { z20.s }, p4, [x25]\n"
      "st1w { z21.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z22.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z23.s }, p1, [x25, #3, MUL VL]\n"
      "addvl x25, x25, #4\n"
      "st1w { z24.s }, p4, [x23]\n"
      "st1w { z25.s }, p3, [x23, #1, MUL VL]\n"
      "st1w { z26.s }, p2, [x23, #2, MUL VL]\n"
      "st1w { z27.s }, p1, [x23, #3, MUL VL]\n"
      "addvl x23, x23, #4\n"
      "70:"  // Height 5: Writeback done
      "mov x19, #0x0\n"
      "incw x19, ALL, MUL #4\n"
      "subs x16, x16, x19\n"
      "bgt 59b\n"
      "b 86f\n"
      "71:"  // Height 6
      "ldr x16, [%x[args_ptr], %[offsetof_N]]\n"
      "mov x14, %x[bias]\n"
      "ldr x15, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "tbz %x[flags], #2, 72f\n"
      "ldr x13, [%x[output_ptr], #0x0]\n"
      "add x13, x13, x19, LSL #2\n"
      "ldr x9, [%x[output_ptr], #0x8]\n"
      "ldr x27, [%x[output_ptr], #0x10]\n"
      "add x9, x9, x19, LSL #2\n"
      "ldr x25, [%x[output_ptr], #0x18]\n"
      "ldr x23, [%x[output_ptr], #0x20]\n"
      "add x27, x27, x19, LSL #2\n"
      "ldr x21, [%x[output_ptr], #0x28]\n"
      "add %x[output_ptr], %x[output_ptr], #0x30\n"
      "add x25, x25, x19, LSL #2\n"
      "add x23, x23, x19, LSL #2\n"
      "add x21, x21, x19, LSL #2\n"
      "b 73f\n"
      "72:"  // Height 6: setup direct output
      "mov x13, %x[output_ptr]\n"
      "add x9, x13, x19, LSL #2\n"
      "add x27, x9, x19, LSL #2\n"
      "add x25, x27, x19, LSL #2\n"
      "add x23, x25, x19, LSL #2\n"
      "add x21, x23, x19, LSL #2\n"
      "add %x[output_ptr], x21, x19, LSL #2\n"
      "73:"  // Height 6: Column loop
      "mov x19, #0x0\n"
      "whilelt p4.s, x19, x16\n"
      "incw x19\n"
      "whilelt p3.s, x19, x16\n"
      "incw x19\n"
      "whilelt p2.s, x19, x16\n"
      "incw x19\n"
      "whilelt p1.s, x19, x16\n"
      "cbz x14, 74f\n"
      "ld1w { z8.s }, p5/Z, [x14]\n"
      "mov z12.d, z8.d\n"
      "ld1w { z9.s }, p5/Z, [x14, #1, MUL VL]\n"
      "mov z16.d, z8.d\n"
      "ld1w { z10.s }, p5/Z, [x14, #2, MUL VL]\n"
      "mov z20.d, z8.d\n"
      "ld1w { z11.s }, p5/Z, [x14, #3, MUL VL]\n"
      "addvl x14, x14, #4\n"
      "mov z13.d, z9.d\n"
      "mov z17.d, z9.d\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "mov z21.d, z9.d\n"
      "mov z22.d, z10.d\n"
      "mov z23.d, z11.d\n"
      "mov z24.d, z8.d\n"
      "mov z25.d, z9.d\n"
      "mov z26.d, z10.d\n"
      "mov z27.d, z11.d\n"
      "mov z28.d, z8.d\n"
      "mov z29.d, z9.d\n"
      "mov z30.d, z10.d\n"
      "mov z31.d, z11.d\n"
      "b 76f\n"
      "74:"  // Height 6: no bias
      "tbz %x[flags], #0, 75f\n"
      "ld1w { z8.s }, p4/Z, [x13]\n"
      "ld1w { z9.s }, p3/Z, [x13, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x13, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x13, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x9]\n"
      "ld1w { z13.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x27]\n"
      "ld1w { z17.s }, p3/Z, [x27, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x27, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x27, #3, MUL VL]\n"
      "ld1w { z20.s }, p4/Z, [x25]\n"
      "ld1w { z21.s }, p3/Z, [x25, #1, MUL VL]\n"
      "ld1w { z22.s }, p2/Z, [x25, #2, MUL VL]\n"
      "ld1w { z23.s }, p1/Z, [x25, #3, MUL VL]\n"
      "ld1w { z24.s }, p4/Z, [x23]\n"
      "ld1w { z25.s }, p3/Z, [x23, #1, MUL VL]\n"
      "ld1w { z26.s }, p2/Z, [x23, #2, MUL VL]\n"
      "ld1w { z27.s }, p1/Z, [x23, #3, MUL VL]\n"
      "ld1w { z28.s }, p4/Z, [x21]\n"
      "ld1w { z29.s }, p3/Z, [x21, #1, MUL VL]\n"
      "ld1w { z30.s }, p2/Z, [x21, #2, MUL VL]\n"
      "ld1w { z31.s }, p1/Z, [x21, #3, MUL VL]\n"
      "b 76f\n"
      "75:"  // Height 6: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "mov z20.b, #0x0\n"
      "mov z21.b, #0x0\n"
      "mov z22.b, #0x0\n"
      "mov z23.b, #0x0\n"
      "mov z24.b, #0x0\n"
      "mov z25.b, #0x0\n"
      "mov z26.b, #0x0\n"
      "mov z27.b, #0x0\n"
      "mov z28.b, #0x0\n"
      "mov z29.b, #0x0\n"
      "mov z30.b, #0x0\n"
      "mov z31.b, #0x0\n"
      "76:"  // Height 6: setup done
      "mov x12, #0x0\n"
      "77:"  // Height 6: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "ldr w11, [x20, x12, LSL #0x2]\n"
      "tbz %x[flags], #3, 78f\n"
      "ldr x20, [%x[input_ptr], x12, LSL #0x3]\n"
      "add x20, x20, x19, LSL #3\n"
      "ldr x10, [x20, #0x0]\n"
      "ldr x28, [x20, #0x8]\n"
      "ldr x26, [x20, #0x10]\n"
      "ldr x24, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "ldr x20, [x20, #0x28]\n"
      "cbnz x12, 79f\n"
      "ldr x19, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x10, x10, x19, LSL #2\n"
      "add x28, x28, x19, LSL #2\n"
      "add x26, x26, x19, LSL #2\n"
      "add x24, x24, x19, LSL #2\n"
      "add x22, x22, x19, LSL #2\n"
      "add x20, x20, x19, LSL #2\n"
      "b 79f\n"
      "78:"  // Height 6: setup direct input
      "mov x10, %x[input_ptr]\n"
      "add x28, x10, x19, LSL #2\n"
      "add x26, x28, x19, LSL #2\n"
      "add x24, x26, x19, LSL #2\n"
      "add x22, x24, x19, LSL #2\n"
      "add x20, x22, x19, LSL #2\n"
      "79:"  // Height 6: input setup done
      "cmp x11, #0x4\n"
      "ble 81f\n"
      "80:"  // Height 6: Multiply loop: Main loop head
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "sub x11, x11, #0x4\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1rqw { z3.s }, p0/Z, [x24]\n"
      "add x26, x26, #0x10\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "ld1rqw { z4.s }, p0/Z, [x22]\n"
      "add x24, x24, #0x10\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "ld1rqw { z5.s }, p0/Z, [x20]\n"
      "add x22, x22, #0x10\n"
      "fmla z20.s, z6.s, z3.s[0]\n"
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x20, x20, #0x10\n"
      "fmla z24.s, z6.s, z4.s[0]\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "cmp x11, #0x4\n"
      "fmla z28.s, z6.s, z5.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "fmla z21.s, z7.s, z3.s[0]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "fmla z25.s, z7.s, z4.s[0]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      "fmla z29.s, z7.s, z5.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "prfm pldl1keep, [x20, #0x80]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "fmla z22.s, z6.s, z3.s[0]\n"
      "fmla z26.s, z6.s, z4.s[0]\n"
      "fmla z30.s, z6.s, z5.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "fmla z23.s, z7.s, z3.s[0]\n"
      "fmla z27.s, z7.s, z4.s[0]\n"
      "fmla z31.s, z7.s, z5.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #5, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "fmla z20.s, z6.s, z3.s[1]\n"
      "fmla z24.s, z6.s, z4.s[1]\n"
      "fmla z28.s, z6.s, z5.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "fmla z21.s, z7.s, z3.s[1]\n"
      "fmla z25.s, z7.s, z4.s[1]\n"
      "fmla z29.s, z7.s, z5.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #7, MUL VL]\n"
      "addvl x15, x15, #16\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "fmla z22.s, z6.s, z3.s[1]\n"
      "fmla z26.s, z6.s, z4.s[1]\n"
      "fmla z30.s, z6.s, z5.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-8, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "fmla z23.s, z7.s, z3.s[1]\n"
      "fmla z27.s, z7.s, z4.s[1]\n"
      "fmla z31.s, z7.s, z5.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-7, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "fmla z20.s, z6.s, z3.s[2]\n"
      "fmla z24.s, z6.s, z4.s[2]\n"
      "fmla z28.s, z6.s, z5.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-6, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "fmla z21.s, z7.s, z3.s[2]\n"
      "fmla z25.s, z7.s, z4.s[2]\n"
      "fmla z29.s, z7.s, z5.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-5, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "fmla z22.s, z6.s, z3.s[2]\n"
      "fmla z26.s, z6.s, z4.s[2]\n"
      "fmla z30.s, z6.s, z5.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-4, MUL VL]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "fmla z23.s, z7.s, z3.s[2]\n"
      "fmla z27.s, z7.s, z4.s[2]\n"
      "fmla z31.s, z7.s, z5.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-3, MUL VL]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "fmla z20.s, z6.s, z3.s[3]\n"
      "fmla z24.s, z6.s, z4.s[3]\n"
      "fmla z28.s, z6.s, z5.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #-2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "fmla z21.s, z7.s, z3.s[3]\n"
      "fmla z25.s, z7.s, z4.s[3]\n"
      "fmla z29.s, z7.s, z5.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #-1, MUL VL]\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z22.s, z6.s, z3.s[3]\n"
      "fmla z26.s, z6.s, z4.s[3]\n"
      "fmla z30.s, z6.s, z5.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "fmla z23.s, z7.s, z3.s[3]\n"
      "fmla z27.s, z7.s, z4.s[3]\n"
      "fmla z31.s, z7.s, z5.s[3]\n"
      "bgt 80b\n"
      "81:"  // Height 6: Multiply loop: Single iteration only
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "whilelt p0.s, XZR, x11\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "ld1rqw { z0.s }, p0/Z, [x10]\n"
      "fmla z8.s, z6.s, z0.s[0]\n"
      "ld1rqw { z1.s }, p0/Z, [x28]\n"
      "add x10, x10, #0x10\n"
      "fmla z9.s, z7.s, z0.s[0]\n"
      "ld1rqw { z2.s }, p0/Z, [x26]\n"
      "add x28, x28, #0x10\n"
      "fmla z12.s, z6.s, z1.s[0]\n"
      "ld1rqw { z3.s }, p0/Z, [x24]\n"
      "add x26, x26, #0x10\n"
      "fmla z16.s, z6.s, z2.s[0]\n"
      "ld1rqw { z4.s }, p0/Z, [x22]\n"
      "add x24, x24, #0x10\n"
      "fmla z13.s, z7.s, z1.s[0]\n"
      "ld1rqw { z5.s }, p0/Z, [x20]\n"
      "add x22, x22, #0x10\n"
      "fmla z20.s, z6.s, z3.s[0]\n"
      "add x20, x20, #0x10\n"
      "fmla z17.s, z7.s, z2.s[0]\n"
      "fmla z24.s, z6.s, z4.s[0]\n"
      "fmla z28.s, z6.s, z5.s[0]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z21.s, z7.s, z3.s[0]\n"
      "fmla z25.s, z7.s, z4.s[0]\n"
      "fmla z29.s, z7.s, z5.s[0]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[0]\n"
      "fmla z14.s, z6.s, z1.s[0]\n"
      "fmla z18.s, z6.s, z2.s[0]\n"
      "fmla z22.s, z6.s, z3.s[0]\n"
      "fmla z26.s, z6.s, z4.s[0]\n"
      "fmla z30.s, z6.s, z5.s[0]\n"
      "fmla z11.s, z7.s, z0.s[0]\n"
      "fmla z15.s, z7.s, z1.s[0]\n"
      "fmla z19.s, z7.s, z2.s[0]\n"
      "fmla z23.s, z7.s, z3.s[0]\n"
      "fmla z27.s, z7.s, z4.s[0]\n"
      "fmla z31.s, z7.s, z5.s[0]\n"
      "ble 82f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[1]\n"
      "fmla z16.s, z6.s, z2.s[1]\n"
      "fmla z20.s, z6.s, z3.s[1]\n"
      "fmla z24.s, z6.s, z4.s[1]\n"
      "fmla z28.s, z6.s, z5.s[1]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[1]\n"
      "fmla z13.s, z7.s, z1.s[1]\n"
      "fmla z17.s, z7.s, z2.s[1]\n"
      "fmla z21.s, z7.s, z3.s[1]\n"
      "fmla z25.s, z7.s, z4.s[1]\n"
      "fmla z29.s, z7.s, z5.s[1]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[1]\n"
      "fmla z14.s, z6.s, z1.s[1]\n"
      "fmla z18.s, z6.s, z2.s[1]\n"
      "fmla z22.s, z6.s, z3.s[1]\n"
      "fmla z26.s, z6.s, z4.s[1]\n"
      "fmla z30.s, z6.s, z5.s[1]\n"
      "fmla z11.s, z7.s, z0.s[1]\n"
      "fmla z15.s, z7.s, z1.s[1]\n"
      "fmla z19.s, z7.s, z2.s[1]\n"
      "fmla z23.s, z7.s, z3.s[1]\n"
      "fmla z27.s, z7.s, z4.s[1]\n"
      "fmla z31.s, z7.s, z5.s[1]\n"
      "ble 82f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "subs x11, x11, #0x1\n"
      "fmla z12.s, z6.s, z1.s[2]\n"
      "fmla z16.s, z6.s, z2.s[2]\n"
      "fmla z20.s, z6.s, z3.s[2]\n"
      "fmla z24.s, z6.s, z4.s[2]\n"
      "fmla z28.s, z6.s, z5.s[2]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[2]\n"
      "fmla z13.s, z7.s, z1.s[2]\n"
      "fmla z17.s, z7.s, z2.s[2]\n"
      "fmla z21.s, z7.s, z3.s[2]\n"
      "fmla z25.s, z7.s, z4.s[2]\n"
      "fmla z29.s, z7.s, z5.s[2]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[2]\n"
      "fmla z14.s, z6.s, z1.s[2]\n"
      "fmla z18.s, z6.s, z2.s[2]\n"
      "fmla z22.s, z6.s, z3.s[2]\n"
      "fmla z26.s, z6.s, z4.s[2]\n"
      "fmla z30.s, z6.s, z5.s[2]\n"
      "fmla z11.s, z7.s, z0.s[2]\n"
      "fmla z15.s, z7.s, z1.s[2]\n"
      "fmla z19.s, z7.s, z2.s[2]\n"
      "fmla z23.s, z7.s, z3.s[2]\n"
      "fmla z27.s, z7.s, z4.s[2]\n"
      "fmla z31.s, z7.s, z5.s[2]\n"
      "ble 82f\n"
      "ld1w { z6.s }, p5/Z, [x15]\n"
      "fmla z8.s, z6.s, z0.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #1, MUL VL]\n"
      "fmla z12.s, z6.s, z1.s[3]\n"
      "fmla z16.s, z6.s, z2.s[3]\n"
      "fmla z20.s, z6.s, z3.s[3]\n"
      "fmla z24.s, z6.s, z4.s[3]\n"
      "fmla z28.s, z6.s, z5.s[3]\n"
      "ld1w { z6.s }, p5/Z, [x15, #2, MUL VL]\n"
      "fmla z9.s, z7.s, z0.s[3]\n"
      "fmla z13.s, z7.s, z1.s[3]\n"
      "fmla z17.s, z7.s, z2.s[3]\n"
      "fmla z21.s, z7.s, z3.s[3]\n"
      "fmla z25.s, z7.s, z4.s[3]\n"
      "fmla z29.s, z7.s, z5.s[3]\n"
      "ld1w { z7.s }, p5/Z, [x15, #3, MUL VL]\n"
      "addvl x15, x15, #4\n"
      "fmla z10.s, z6.s, z0.s[3]\n"
      "fmla z14.s, z6.s, z1.s[3]\n"
      "fmla z18.s, z6.s, z2.s[3]\n"
      "fmla z22.s, z6.s, z3.s[3]\n"
      "fmla z26.s, z6.s, z4.s[3]\n"
      "fmla z30.s, z6.s, z5.s[3]\n"
      "fmla z11.s, z7.s, z0.s[3]\n"
      "fmla z15.s, z7.s, z1.s[3]\n"
      "fmla z19.s, z7.s, z2.s[3]\n"
      "fmla z23.s, z7.s, z3.s[3]\n"
      "fmla z27.s, z7.s, z4.s[3]\n"
      "fmla z31.s, z7.s, z5.s[3]\n"
      "82:"  // Height 6: Multiply loop: multiply skip
      "prfm pldl1keep, [x10, #0x80]\n"
      "add x12, x12, #0x1\n"
      "prfm pldl1keep, [x28, #0x80]\n"
      "prfm pldl1keep, [x26, #0x80]\n"
      "prfm pldl1keep, [x24, #0x80]\n"
      "prfm pldl1keep, [x22, #0x80]\n"
      "prfm pldl1keep, [x20, #0x80]\n"
      "ldr w19, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "cmp x12, x19\n"
      "bne 77b\n"
      "prfm pstl1keep, [x13, #0x0]\n"
      "prfm pstl1keep, [x9, #0x0]\n"
      "prfm pstl1keep, [x27, #0x0]\n"
      "prfm pstl1keep, [x25, #0x0]\n"
      "prfm pstl1keep, [x23, #0x0]\n"
      "prfm pstl1keep, [x21, #0x0]\n"
      "tbz %x[flags], #1, 83f\n"
      "add x19, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z1.s }, p5/Z, [x19]\n"
      "add x19, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z0.s }, p5/Z, [x19]\n"
      "fmin z8.s, p5/M, z8.s, z0.s\n"
      "fmin z9.s, p5/M, z9.s, z0.s\n"
      "fmin z10.s, p5/M, z10.s, z0.s\n"
      "fmin z11.s, p5/M, z11.s, z0.s\n"
      "fmin z12.s, p5/M, z12.s, z0.s\n"
      "fmax z8.s, p5/M, z8.s, z1.s\n"
      "fmax z9.s, p5/M, z9.s, z1.s\n"
      "fmax z10.s, p5/M, z10.s, z1.s\n"
      "fmax z11.s, p5/M, z11.s, z1.s\n"
      "fmax z12.s, p5/M, z12.s, z1.s\n"
      "fmin z13.s, p5/M, z13.s, z0.s\n"
      "fmin z14.s, p5/M, z14.s, z0.s\n"
      "fmin z15.s, p5/M, z15.s, z0.s\n"
      "fmin z16.s, p5/M, z16.s, z0.s\n"
      "fmax z13.s, p5/M, z13.s, z1.s\n"
      "fmax z14.s, p5/M, z14.s, z1.s\n"
      "fmax z15.s, p5/M, z15.s, z1.s\n"
      "fmax z16.s, p5/M, z16.s, z1.s\n"
      "fmin z17.s, p5/M, z17.s, z0.s\n"
      "fmin z18.s, p5/M, z18.s, z0.s\n"
      "fmin z19.s, p5/M, z19.s, z0.s\n"
      "fmin z20.s, p5/M, z20.s, z0.s\n"
      "fmax z17.s, p5/M, z17.s, z1.s\n"
      "fmax z18.s, p5/M, z18.s, z1.s\n"
      "fmax z19.s, p5/M, z19.s, z1.s\n"
      "fmax z20.s, p5/M, z20.s, z1.s\n"
      "fmin z21.s, p5/M, z21.s, z0.s\n"
      "fmin z22.s, p5/M, z22.s, z0.s\n"
      "fmin z23.s, p5/M, z23.s, z0.s\n"
      "fmin z24.s, p5/M, z24.s, z0.s\n"
      "fmax z21.s, p5/M, z21.s, z1.s\n"
      "fmax z22.s, p5/M, z22.s, z1.s\n"
      "fmax z23.s, p5/M, z23.s, z1.s\n"
      "fmax z24.s, p5/M, z24.s, z1.s\n"
      "fmin z25.s, p5/M, z25.s, z0.s\n"
      "fmin z26.s, p5/M, z26.s, z0.s\n"
      "fmin z27.s, p5/M, z27.s, z0.s\n"
      "fmin z28.s, p5/M, z28.s, z0.s\n"
      "fmax z25.s, p5/M, z25.s, z1.s\n"
      "fmax z26.s, p5/M, z26.s, z1.s\n"
      "fmax z27.s, p5/M, z27.s, z1.s\n"
      "fmax z28.s, p5/M, z28.s, z1.s\n"
      "fmin z29.s, p5/M, z29.s, z0.s\n"
      "fmin z30.s, p5/M, z30.s, z0.s\n"
      "fmin z31.s, p5/M, z31.s, z0.s\n"
      "fmax z29.s, p5/M, z29.s, z1.s\n"
      "fmax z30.s, p5/M, z30.s, z1.s\n"
      "fmax z31.s, p5/M, z31.s, z1.s\n"
      "83:"  // Height 6: No activation
      "st1w { z8.s }, p4, [x13]\n"
      "st1w { z9.s }, p3, [x13, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x13, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x13, #3, MUL VL]\n"
      "addvl x13, x13, #4\n"
      "st1w { z12.s }, p4, [x9]\n"
      "st1w { z13.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z16.s }, p4, [x27]\n"
      "st1w { z17.s }, p3, [x27, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x27, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x27, #3, MUL VL]\n"
      "addvl x27, x27, #4\n"
      "st1w { z20.s }, p4, [x25]\n"
      "st1w { z21.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z22.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z23.s }, p1, [x25, #3, MUL VL]\n"
      "addvl x25, x25, #4\n"
      "st1w { z24.s }, p4, [x23]\n"
      "st1w { z25.s }, p3, [x23, #1, MUL VL]\n"
      "st1w { z26.s }, p2, [x23, #2, MUL VL]\n"
      "st1w { z27.s }, p1, [x23, #3, MUL VL]\n"
      "addvl x23, x23, #4\n"
      "st1w { z28.s }, p4, [x21]\n"
      "st1w { z29.s }, p3, [x21, #1, MUL VL]\n"
      "st1w { z30.s }, p2, [x21, #2, MUL VL]\n"
      "st1w { z31.s }, p1, [x21, #3, MUL VL]\n"
      "addvl x21, x21, #4\n"
      "84:"  // Height 6: Writeback done
      "mov x19, #0x0\n"
      "incw x19, ALL, MUL #4\n"
      "subs x16, x16, x19\n"
      "bgt 73b\n"
      "subs %x[M], %x[M], #0x6\n"
      "beq 86f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 85f\n"
      "add x20, x20, #0x6\n"
      "str x20, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "b 1b\n"
      "85:"  // Update direct input
      "mov x19, #0x18\n"
      "madd %x[input_ptr], x19, x20, %x[input_ptr]\n"
      "b 1b\n"
      "86:"  // Exit

      : [M] "+r" (M), [input_ptr] "+r" (input_ptr), [output_ptr] "+r" (output_ptr)
      : [args_ptr] "r" (&ka), [bias] "r" (bias), [flags] "r" (flags), [offset_max] "I" (offsetof(KernelArgs, maxval)), [offset_min] "I" (offsetof(KernelArgs, minval)), [offsetof_B_ptr] "I" (offsetof(KernelArgs, B_ptr)), [offsetof_N] "I" (offsetof(KernelArgs, N)), [offsetof_input_initial_col] "I" (offsetof(KernelArgs, input_initial_col)), [offsetof_input_offset] "I" (offsetof(KernelArgs, input_offset)), [offsetof_num_strings] "I" (offsetof(KernelArgs, num_strings)), [offsetof_output_offset] "I" (offsetof(KernelArgs, output_offset)), [offsetof_string_lengths] "I" (offsetof(KernelArgs, string_lengths))
      : "cc", "memory", "p0", "p1", "p2", "p3", "p4", "p5", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x19", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
    );
}

} // namespace arm_gemm
#endif // __ARM_FEATURE_SVE
