/*
 * Copyright (c) 2019-2021, 2023 Arm Limited.
 *
 * SPDX-License-Identifier: MIT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#ifdef ARM_COMPUTE_ENABLE_SVE

#include "arm_gemm.hpp"
#include "../../utils.hpp"
#include "../../bfloat.hpp"

#include <cassert>
#include <limits>

namespace arm_gemm {

void sve_hybrid_bf16fp32_dot_6x4VL (
    unsigned int num_strings, const unsigned int *string_lengths, IndirectInputArg<bfloat16> A_arg,
    size_t M, size_t N, const bfloat16 *B_ptr, IndirectOutputArg<float> output_arg,
    const float *bias, Activation act, bool accumulate
)
{
    struct KernelArgs {
        float maxval = static_cast<float>(std::numeric_limits<float>::infinity());
        float minval = - static_cast<float>(std::numeric_limits<float>::infinity());
        unsigned int num_strings = {};
        const unsigned int *string_lengths = {};
        size_t N = {};
        const bfloat16 *B_ptr = {};
        size_t output_offset = {};
        size_t input_initial_col = {};
        size_t input_offset = {};
    } ka;

    unsigned long flags=0;
    void *output_ptr;
    void *input_ptr;

    if (output_arg.is_indirect) {
        output_ptr=(void *)(output_arg.indirect.ptr);
        ka.output_offset=output_arg.indirect.offset;
        flags |= 0x4;
    } else {
        output_ptr=(void *)(output_arg.direct.base);
        ka.output_offset=output_arg.direct.stride;
    }

    if (A_arg.is_indirect) {
        input_ptr=(void *)(A_arg.indirect.ptr);
        ka.input_offset=A_arg.indirect.start_row;
        ka.input_initial_col=A_arg.indirect.start_col;
        flags |= 0x8;
    } else {
        assert(num_strings==1);
        input_ptr=(void *)(A_arg.direct.base);
        ka.input_offset=A_arg.direct.stride;
    }
    if (accumulate) {
        flags |= 0x1;
    }
    ka.num_strings = num_strings;
    ka.string_lengths = string_lengths;
    ka.N = N;
    ka.B_ptr = B_ptr;
    switch(act.type) {
        default:
        case Activation::Type::None:
            break;
        case Activation::Type::BoundedReLU:
            ka.maxval = static_cast<float>(act.param1);
            /* fall through */
        case Activation::Type::ReLU:
            ka.minval = 0;
            flags |= 0x2;
            break;
    }
    __asm__ __volatile__(
      "ptrue p5.b\n"
      "1:"  // Row loop
      "cmp %x[M], #0x6\n"
      "bge 66f\n"
      "cmp %x[M], #0x4\n"
      "bgt 53f\n"
      "beq 40f\n"
      "cmp %x[M], #0x2\n"
      "bgt 27f\n"
      "beq 14f\n"
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "2:"  // Height 1: Column loop
      "mov x20, #0x0\n"
      "whilelt p4.s, x20, x11\n"
      "incw x20\n"
      "whilelt p3.s, x20, x11\n"
      "incw x20\n"
      "whilelt p2.s, x20, x11\n"
      "incw x20\n"
      "whilelt p1.s, x20, x11\n"
      "cbz x12, 3f\n"
      "ld1w { z8.s }, p5/Z, [x12]\n"
      "ld1w { z9.s }, p5/Z, [x12, #1, MUL VL]\n"
      "ld1w { z10.s }, p5/Z, [x12, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x12, #3, MUL VL]\n"
      "addvl x12, x12, #4\n"
      "b 5f\n"
      "3:"  // Height 1: no bias
      "tbz %x[flags], #0, 4f\n"
      "ld1w { z8.s }, p4/Z, [x9]\n"
      "ld1w { z9.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x9, #3, MUL VL]\n"
      "b 5f\n"
      "4:"  // Height 1: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "5:"  // Height 1: setup done
      "mov x28, #0x0\n"
      "6:"  // Height 1: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 7f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "cbnz x28, 8f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "b 8f\n"
      "7:"  // Height 1: setup direct input
      "mov x26, %x[input_ptr]\n"
      "8:"  // Height 1: input setup done
      "cmp x27, #0x8\n"
      "ble 10f\n"
      "9:"  // Height 1: Multiply loop: Main loop head
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z0.h }, p0/Z, [x26]\n"
      "ld1h { z16.h }, p5/Z, [x10]\n"
      ".inst 0x64604208  // bfdot z8.s, z16.h, z0.h[0]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64604209  // bfdot z9.s, z16.h, z0.h[0]\n"
      "ld1h { z16.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6460420a  // bfdot z10.s, z16.h, z0.h[0]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6460420b  // bfdot z11.s, z16.h, z0.h[0]\n"
      "ld1h { z16.h }, p5/Z, [x10, #4, MUL VL]\n"
      ".inst 0x64684208  // bfdot z8.s, z16.h, z0.h[1]\n"
      "ld1h { z16.h }, p5/Z, [x10, #5, MUL VL]\n"
      ".inst 0x64684209  // bfdot z9.s, z16.h, z0.h[1]\n"
      "ld1h { z16.h }, p5/Z, [x10, #6, MUL VL]\n"
      ".inst 0x6468420a  // bfdot z10.s, z16.h, z0.h[1]\n"
      "ld1h { z16.h }, p5/Z, [x10, #7, MUL VL]\n"
      "addvl x10, x10, #16\n"
      ".inst 0x6468420b  // bfdot z11.s, z16.h, z0.h[1]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-8, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-7, MUL VL]\n"
      ".inst 0x64704228  // bfdot z8.s, z17.h, z0.h[2]\n"
      ".inst 0x64704209  // bfdot z9.s, z16.h, z0.h[2]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-6, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-5, MUL VL]\n"
      ".inst 0x6470422a  // bfdot z10.s, z17.h, z0.h[2]\n"
      ".inst 0x6470420b  // bfdot z11.s, z16.h, z0.h[2]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-4, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-3, MUL VL]\n"
      ".inst 0x64784228  // bfdot z8.s, z17.h, z0.h[3]\n"
      ".inst 0x64784209  // bfdot z9.s, z16.h, z0.h[3]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-1, MUL VL]\n"
      "sub x27, x27, #0x8\n"
      "cmp x27, #0x8\n"
      ".inst 0x6478422a  // bfdot z10.s, z17.h, z0.h[3]\n"
      ".inst 0x6478420b  // bfdot z11.s, z16.h, z0.h[3]\n"
      "add x26, x26, #0x10\n"
      "bgt 9b\n"
      "10:"  // Height 1: Multiply loop: Single iteration only
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z0.h }, p0/Z, [x26]\n"
      "ld1h { z16.h }, p5/Z, [x10]\n"
      ".inst 0x64604208  // bfdot z8.s, z16.h, z0.h[0]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64604209  // bfdot z9.s, z16.h, z0.h[0]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6460422a  // bfdot z10.s, z17.h, z0.h[0]\n"
      ".inst 0x6460420b  // bfdot z11.s, z16.h, z0.h[0]\n"
      "addvl x10, x10, #4\n"
      "ble 11f\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64684228  // bfdot z8.s, z17.h, z0.h[1]\n"
      ".inst 0x64684209  // bfdot z9.s, z16.h, z0.h[1]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x6468422a  // bfdot z10.s, z17.h, z0.h[1]\n"
      ".inst 0x6468420b  // bfdot z11.s, z16.h, z0.h[1]\n"
      "addvl x10, x10, #4\n"
      "ble 11f\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64704228  // bfdot z8.s, z17.h, z0.h[2]\n"
      ".inst 0x64704209  // bfdot z9.s, z16.h, z0.h[2]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x6470422a  // bfdot z10.s, z17.h, z0.h[2]\n"
      ".inst 0x6470420b  // bfdot z11.s, z16.h, z0.h[2]\n"
      "addvl x10, x10, #4\n"
      "ble 11f\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64784228  // bfdot z8.s, z17.h, z0.h[3]\n"
      ".inst 0x64784209  // bfdot z9.s, z16.h, z0.h[3]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6478422a  // bfdot z10.s, z17.h, z0.h[3]\n"
      ".inst 0x6478420b  // bfdot z11.s, z16.h, z0.h[3]\n"
      "addvl x10, x10, #4\n"
      "11:"  // Height 1: Multiply loop: multiply skip
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 6b\n"
      "tbz %x[flags], #1, 12f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z17.s }, p5/Z, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z16.s }, p5/Z, [x20]\n"
      "fmin z8.s, p5/M, z8.s, z17.s\n"
      "fmin z9.s, p5/M, z9.s, z17.s\n"
      "fmin z10.s, p5/M, z10.s, z17.s\n"
      "fmin z11.s, p5/M, z11.s, z17.s\n"
      "fmax z8.s, p5/M, z8.s, z16.s\n"
      "fmax z9.s, p5/M, z9.s, z16.s\n"
      "fmax z10.s, p5/M, z10.s, z16.s\n"
      "fmax z11.s, p5/M, z11.s, z16.s\n"
      "12:"  // Height 1: No activation
      "st1w { z8.s }, p4, [x9]\n"
      "st1w { z9.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "13:"  // Height 1: Writeback done
      "decw x11, ALL, MUL #4\n"
      "cmp x11, XZR\n"
      "bgt 2b\n"
      "b 80f\n"
      "14:"  // Height 2
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "15:"  // Height 2: Column loop
      "mov x20, #0x0\n"
      "whilelt p4.s, x20, x11\n"
      "incw x20\n"
      "whilelt p3.s, x20, x11\n"
      "incw x20\n"
      "whilelt p2.s, x20, x11\n"
      "incw x20\n"
      "whilelt p1.s, x20, x11\n"
      "cbz x12, 16f\n"
      "ld1w { z8.s }, p5/Z, [x12]\n"
      "ld1w { z9.s }, p5/Z, [x12, #1, MUL VL]\n"
      "mov z12.d, z8.d\n"
      "mov z13.d, z9.d\n"
      "ld1w { z10.s }, p5/Z, [x12, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x12, #3, MUL VL]\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "addvl x12, x12, #4\n"
      "b 18f\n"
      "16:"  // Height 2: no bias
      "tbz %x[flags], #0, 17f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x20, x9, x20, LSL #2\n"
      "ld1w { z8.s }, p4/Z, [x9]\n"
      "ld1w { z9.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x20]\n"
      "ld1w { z13.s }, p3/Z, [x20, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x20, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x20, #3, MUL VL]\n"
      "b 18f\n"
      "17:"  // Height 2: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "18:"  // Height 2: setup done
      "mov x28, #0x0\n"
      "19:"  // Height 2: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 20f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "cbnz x28, 21f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "b 21f\n"
      "20:"  // Height 2: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "21:"  // Height 2: input setup done
      "cmp x27, #0x8\n"
      "ble 23f\n"
      "22:"  // Height 2: Multiply loop: Main loop head
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z1.h }, p0/Z, [x26]\n"
      "ld1rqh { z0.h }, p0/Z, [x25]\n"
      "sub x27, x27, #0x8\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64614228  // bfdot z8.s, z17.h, z1.h[0]\n"
      ".inst 0x6460422c  // bfdot z12.s, z17.h, z0.h[0]\n"
      ".inst 0x64614209  // bfdot z9.s, z16.h, z1.h[0]\n"
      ".inst 0x6460420d  // bfdot z13.s, z16.h, z0.h[0]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6461422a  // bfdot z10.s, z17.h, z1.h[0]\n"
      ".inst 0x6460422e  // bfdot z14.s, z17.h, z0.h[0]\n"
      "ld1h { z17.h }, p5/Z, [x10, #4, MUL VL]\n"
      "cmp x27, #0x8\n"
      ".inst 0x6461420b  // bfdot z11.s, z16.h, z1.h[0]\n"
      ".inst 0x6460420f  // bfdot z15.s, z16.h, z0.h[0]\n"
      "ld1h { z16.h }, p5/Z, [x10, #5, MUL VL]\n"
      "add x26, x26, #0x10\n"
      ".inst 0x64694228  // bfdot z8.s, z17.h, z1.h[1]\n"
      ".inst 0x6468422c  // bfdot z12.s, z17.h, z0.h[1]\n"
      "ld1h { z17.h }, p5/Z, [x10, #6, MUL VL]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x64694209  // bfdot z9.s, z16.h, z1.h[1]\n"
      ".inst 0x6468420d  // bfdot z13.s, z16.h, z0.h[1]\n"
      "ld1h { z16.h }, p5/Z, [x10, #7, MUL VL]\n"
      "addvl x10, x10, #16\n"
      ".inst 0x6469422a  // bfdot z10.s, z17.h, z1.h[1]\n"
      ".inst 0x6468422e  // bfdot z14.s, z17.h, z0.h[1]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-8, MUL VL]\n"
      ".inst 0x6469420b  // bfdot z11.s, z16.h, z1.h[1]\n"
      ".inst 0x6468420f  // bfdot z15.s, z16.h, z0.h[1]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-7, MUL VL]\n"
      ".inst 0x64714228  // bfdot z8.s, z17.h, z1.h[2]\n"
      ".inst 0x6470422c  // bfdot z12.s, z17.h, z0.h[2]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-6, MUL VL]\n"
      ".inst 0x64714209  // bfdot z9.s, z16.h, z1.h[2]\n"
      ".inst 0x6470420d  // bfdot z13.s, z16.h, z0.h[2]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-5, MUL VL]\n"
      ".inst 0x6471422a  // bfdot z10.s, z17.h, z1.h[2]\n"
      ".inst 0x6470422e  // bfdot z14.s, z17.h, z0.h[2]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-4, MUL VL]\n"
      ".inst 0x6471420b  // bfdot z11.s, z16.h, z1.h[2]\n"
      ".inst 0x6470420f  // bfdot z15.s, z16.h, z0.h[2]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-3, MUL VL]\n"
      ".inst 0x64794228  // bfdot z8.s, z17.h, z1.h[3]\n"
      ".inst 0x6478422c  // bfdot z12.s, z17.h, z0.h[3]\n"
      "ld1h { z17.h }, p5/Z, [x10, #-2, MUL VL]\n"
      ".inst 0x64794209  // bfdot z9.s, z16.h, z1.h[3]\n"
      ".inst 0x6478420d  // bfdot z13.s, z16.h, z0.h[3]\n"
      "ld1h { z16.h }, p5/Z, [x10, #-1, MUL VL]\n"
      ".inst 0x6479422a  // bfdot z10.s, z17.h, z1.h[3]\n"
      ".inst 0x6478422e  // bfdot z14.s, z17.h, z0.h[3]\n"
      ".inst 0x6479420b  // bfdot z11.s, z16.h, z1.h[3]\n"
      ".inst 0x6478420f  // bfdot z15.s, z16.h, z0.h[3]\n"
      "bgt 22b\n"
      "23:"  // Height 2: Multiply loop: Single iteration only
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z0.h }, p0/Z, [x26]\n"
      "ld1rqh { z1.h }, p0/Z, [x25]\n"
      "subs x27, x27, #0x2\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64604228  // bfdot z8.s, z17.h, z0.h[0]\n"
      ".inst 0x6461422c  // bfdot z12.s, z17.h, z1.h[0]\n"
      ".inst 0x64604209  // bfdot z9.s, z16.h, z0.h[0]\n"
      ".inst 0x6461420d  // bfdot z13.s, z16.h, z1.h[0]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6460422a  // bfdot z10.s, z17.h, z0.h[0]\n"
      ".inst 0x6461422e  // bfdot z14.s, z17.h, z1.h[0]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6460420b  // bfdot z11.s, z16.h, z0.h[0]\n"
      ".inst 0x6461420f  // bfdot z15.s, z16.h, z1.h[0]\n"
      "ble 24f\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64684228  // bfdot z8.s, z17.h, z0.h[1]\n"
      ".inst 0x6469422c  // bfdot z12.s, z17.h, z1.h[1]\n"
      ".inst 0x64684209  // bfdot z9.s, z16.h, z0.h[1]\n"
      ".inst 0x6469420d  // bfdot z13.s, z16.h, z1.h[1]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x6468422a  // bfdot z10.s, z17.h, z0.h[1]\n"
      ".inst 0x6469422e  // bfdot z14.s, z17.h, z1.h[1]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6468420b  // bfdot z11.s, z16.h, z0.h[1]\n"
      ".inst 0x6469420f  // bfdot z15.s, z16.h, z1.h[1]\n"
      "ble 24f\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64704228  // bfdot z8.s, z17.h, z0.h[2]\n"
      ".inst 0x6471422c  // bfdot z12.s, z17.h, z1.h[2]\n"
      ".inst 0x64704209  // bfdot z9.s, z16.h, z0.h[2]\n"
      ".inst 0x6471420d  // bfdot z13.s, z16.h, z1.h[2]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x6470422a  // bfdot z10.s, z17.h, z0.h[2]\n"
      ".inst 0x6471422e  // bfdot z14.s, z17.h, z1.h[2]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6470420b  // bfdot z11.s, z16.h, z0.h[2]\n"
      ".inst 0x6471420f  // bfdot z15.s, z16.h, z1.h[2]\n"
      "ble 24f\n"
      "ld1h { z17.h }, p5/Z, [x10]\n"
      "ld1h { z16.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64784228  // bfdot z8.s, z17.h, z0.h[3]\n"
      ".inst 0x6479422c  // bfdot z12.s, z17.h, z1.h[3]\n"
      ".inst 0x64784209  // bfdot z9.s, z16.h, z0.h[3]\n"
      ".inst 0x6479420d  // bfdot z13.s, z16.h, z1.h[3]\n"
      "ld1h { z17.h }, p5/Z, [x10, #2, MUL VL]\n"
      "ld1h { z16.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6478422a  // bfdot z10.s, z17.h, z0.h[3]\n"
      ".inst 0x6479422e  // bfdot z14.s, z17.h, z1.h[3]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6478420b  // bfdot z11.s, z16.h, z0.h[3]\n"
      ".inst 0x6479420f  // bfdot z15.s, z16.h, z1.h[3]\n"
      "24:"  // Height 2: Multiply loop: multiply skip
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 19b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "tbz %x[flags], #1, 25f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z17.s }, p5/Z, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z16.s }, p5/Z, [x20]\n"
      "fmin z8.s, p5/M, z8.s, z17.s\n"
      "fmin z9.s, p5/M, z9.s, z17.s\n"
      "fmin z10.s, p5/M, z10.s, z17.s\n"
      "fmin z11.s, p5/M, z11.s, z17.s\n"
      "fmin z12.s, p5/M, z12.s, z17.s\n"
      "fmin z13.s, p5/M, z13.s, z17.s\n"
      "fmin z14.s, p5/M, z14.s, z17.s\n"
      "fmin z15.s, p5/M, z15.s, z17.s\n"
      "fmax z8.s, p5/M, z8.s, z16.s\n"
      "fmax z9.s, p5/M, z9.s, z16.s\n"
      "fmax z10.s, p5/M, z10.s, z16.s\n"
      "fmax z11.s, p5/M, z11.s, z16.s\n"
      "fmax z12.s, p5/M, z12.s, z16.s\n"
      "fmax z13.s, p5/M, z13.s, z16.s\n"
      "fmax z14.s, p5/M, z14.s, z16.s\n"
      "fmax z15.s, p5/M, z15.s, z16.s\n"
      "25:"  // Height 2: No activation
      "st1w { z8.s }, p4, [x9]\n"
      "st1w { z9.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z12.s }, p4, [x25]\n"
      "st1w { z13.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x25, #3, MUL VL]\n"
      "26:"  // Height 2: Writeback done
      "decw x11, ALL, MUL #4\n"
      "cmp x11, XZR\n"
      "bgt 15b\n"
      "b 80f\n"
      "27:"  // Height 3
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "28:"  // Height 3: Column loop
      "mov x20, #0x0\n"
      "whilelt p4.s, x20, x11\n"
      "incw x20\n"
      "whilelt p3.s, x20, x11\n"
      "incw x20\n"
      "whilelt p2.s, x20, x11\n"
      "incw x20\n"
      "whilelt p1.s, x20, x11\n"
      "cbz x12, 29f\n"
      "ld1w { z8.s }, p5/Z, [x12]\n"
      "ld1w { z9.s }, p5/Z, [x12, #1, MUL VL]\n"
      "mov z12.d, z8.d\n"
      "mov z13.d, z9.d\n"
      "ld1w { z10.s }, p5/Z, [x12, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x12, #3, MUL VL]\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z16.d, z8.d\n"
      "mov z17.d, z9.d\n"
      "addvl x12, x12, #4\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "b 31f\n"
      "29:"  // Height 3: no bias
      "tbz %x[flags], #0, 30f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x21, x9, x20, LSL #2\n"
      "add x20, x21, x20, LSL #2\n"
      "ld1w { z8.s }, p4/Z, [x9]\n"
      "ld1w { z9.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x21]\n"
      "ld1w { z13.s }, p3/Z, [x21, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x21, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x21, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x20]\n"
      "ld1w { z17.s }, p3/Z, [x20, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x20, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x20, #3, MUL VL]\n"
      "b 31f\n"
      "30:"  // Height 3: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "31:"  // Height 3: setup done
      "mov x28, #0x0\n"
      "32:"  // Height 3: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 33f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "cbnz x28, 34f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "b 34f\n"
      "33:"  // Height 3: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "34:"  // Height 3: input setup done
      "cmp x27, #0x8\n"
      "ble 36f\n"
      "35:"  // Height 3: Multiply loop: Main loop head
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z2.h }, p0/Z, [x26]\n"
      "ld1rqh { z1.h }, p0/Z, [x25]\n"
      "sub x27, x27, #0x8\n"
      "ld1rqh { z0.h }, p0/Z, [x24]\n"
      "ld1h { z21.h }, p5/Z, [x10]\n"
      ".inst 0x646242a8  // bfdot z8.s, z21.h, z2.h[0]\n"
      ".inst 0x646142ac  // bfdot z12.s, z21.h, z1.h[0]\n"
      "ld1h { z20.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646042b0  // bfdot z16.s, z21.h, z0.h[0]\n"
      ".inst 0x64624289  // bfdot z9.s, z20.h, z2.h[0]\n"
      "ld1h { z21.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6461428d  // bfdot z13.s, z20.h, z1.h[0]\n"
      ".inst 0x64604291  // bfdot z17.s, z20.h, z0.h[0]\n"
      "ld1h { z20.h }, p5/Z, [x10, #3, MUL VL]\n"
      "cmp x27, #0x8\n"
      ".inst 0x646242aa  // bfdot z10.s, z21.h, z2.h[0]\n"
      ".inst 0x646142ae  // bfdot z14.s, z21.h, z1.h[0]\n"
      "add x26, x26, #0x10\n"
      "add x25, x25, #0x10\n"
      ".inst 0x646042b2  // bfdot z18.s, z21.h, z0.h[0]\n"
      ".inst 0x6462428b  // bfdot z11.s, z20.h, z2.h[0]\n"
      "ld1h { z21.h }, p5/Z, [x10, #4, MUL VL]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6461428f  // bfdot z15.s, z20.h, z1.h[0]\n"
      ".inst 0x64604293  // bfdot z19.s, z20.h, z0.h[0]\n"
      "ld1h { z20.h }, p5/Z, [x10, #5, MUL VL]\n"
      ".inst 0x646a42a8  // bfdot z8.s, z21.h, z2.h[1]\n"
      ".inst 0x646942ac  // bfdot z12.s, z21.h, z1.h[1]\n"
      ".inst 0x646842b0  // bfdot z16.s, z21.h, z0.h[1]\n"
      ".inst 0x646a4289  // bfdot z9.s, z20.h, z2.h[1]\n"
      "ld1h { z21.h }, p5/Z, [x10, #6, MUL VL]\n"
      ".inst 0x6469428d  // bfdot z13.s, z20.h, z1.h[1]\n"
      ".inst 0x64684291  // bfdot z17.s, z20.h, z0.h[1]\n"
      "ld1h { z20.h }, p5/Z, [x10, #7, MUL VL]\n"
      "addvl x10, x10, #16\n"
      ".inst 0x646a42aa  // bfdot z10.s, z21.h, z2.h[1]\n"
      ".inst 0x646942ae  // bfdot z14.s, z21.h, z1.h[1]\n"
      ".inst 0x646842b2  // bfdot z18.s, z21.h, z0.h[1]\n"
      ".inst 0x646a428b  // bfdot z11.s, z20.h, z2.h[1]\n"
      "ld1h { z21.h }, p5/Z, [x10, #-8, MUL VL]\n"
      ".inst 0x6469428f  // bfdot z15.s, z20.h, z1.h[1]\n"
      ".inst 0x64684293  // bfdot z19.s, z20.h, z0.h[1]\n"
      "ld1h { z20.h }, p5/Z, [x10, #-7, MUL VL]\n"
      ".inst 0x647242a8  // bfdot z8.s, z21.h, z2.h[2]\n"
      ".inst 0x647142ac  // bfdot z12.s, z21.h, z1.h[2]\n"
      ".inst 0x647042b0  // bfdot z16.s, z21.h, z0.h[2]\n"
      ".inst 0x64724289  // bfdot z9.s, z20.h, z2.h[2]\n"
      "ld1h { z21.h }, p5/Z, [x10, #-6, MUL VL]\n"
      ".inst 0x6471428d  // bfdot z13.s, z20.h, z1.h[2]\n"
      ".inst 0x64704291  // bfdot z17.s, z20.h, z0.h[2]\n"
      "ld1h { z20.h }, p5/Z, [x10, #-5, MUL VL]\n"
      ".inst 0x647242aa  // bfdot z10.s, z21.h, z2.h[2]\n"
      ".inst 0x647142ae  // bfdot z14.s, z21.h, z1.h[2]\n"
      ".inst 0x647042b2  // bfdot z18.s, z21.h, z0.h[2]\n"
      ".inst 0x6472428b  // bfdot z11.s, z20.h, z2.h[2]\n"
      "ld1h { z21.h }, p5/Z, [x10, #-4, MUL VL]\n"
      ".inst 0x6471428f  // bfdot z15.s, z20.h, z1.h[2]\n"
      ".inst 0x64704293  // bfdot z19.s, z20.h, z0.h[2]\n"
      "ld1h { z20.h }, p5/Z, [x10, #-3, MUL VL]\n"
      ".inst 0x647a42a8  // bfdot z8.s, z21.h, z2.h[3]\n"
      ".inst 0x647942ac  // bfdot z12.s, z21.h, z1.h[3]\n"
      ".inst 0x647842b0  // bfdot z16.s, z21.h, z0.h[3]\n"
      ".inst 0x647a4289  // bfdot z9.s, z20.h, z2.h[3]\n"
      "ld1h { z21.h }, p5/Z, [x10, #-2, MUL VL]\n"
      ".inst 0x6479428d  // bfdot z13.s, z20.h, z1.h[3]\n"
      ".inst 0x64784291  // bfdot z17.s, z20.h, z0.h[3]\n"
      "ld1h { z20.h }, p5/Z, [x10, #-1, MUL VL]\n"
      ".inst 0x647a42aa  // bfdot z10.s, z21.h, z2.h[3]\n"
      ".inst 0x647942ae  // bfdot z14.s, z21.h, z1.h[3]\n"
      ".inst 0x647842b2  // bfdot z18.s, z21.h, z0.h[3]\n"
      ".inst 0x647a428b  // bfdot z11.s, z20.h, z2.h[3]\n"
      ".inst 0x6479428f  // bfdot z15.s, z20.h, z1.h[3]\n"
      ".inst 0x64784293  // bfdot z19.s, z20.h, z0.h[3]\n"
      "bgt 35b\n"
      "36:"  // Height 3: Multiply loop: Single iteration only
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z0.h }, p0/Z, [x26]\n"
      "ld1rqh { z1.h }, p0/Z, [x25]\n"
      "subs x27, x27, #0x2\n"
      "ld1rqh { z2.h }, p0/Z, [x24]\n"
      "ld1h { z21.h }, p5/Z, [x10]\n"
      ".inst 0x646042a8  // bfdot z8.s, z21.h, z0.h[0]\n"
      ".inst 0x646142ac  // bfdot z12.s, z21.h, z1.h[0]\n"
      "ld1h { z20.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646242b0  // bfdot z16.s, z21.h, z2.h[0]\n"
      ".inst 0x64604289  // bfdot z9.s, z20.h, z0.h[0]\n"
      "ld1h { z21.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6461428d  // bfdot z13.s, z20.h, z1.h[0]\n"
      ".inst 0x64624291  // bfdot z17.s, z20.h, z2.h[0]\n"
      "ld1h { z20.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x646042aa  // bfdot z10.s, z21.h, z0.h[0]\n"
      ".inst 0x646142ae  // bfdot z14.s, z21.h, z1.h[0]\n"
      ".inst 0x646242b2  // bfdot z18.s, z21.h, z2.h[0]\n"
      ".inst 0x6460428b  // bfdot z11.s, z20.h, z0.h[0]\n"
      ".inst 0x6461428f  // bfdot z15.s, z20.h, z1.h[0]\n"
      ".inst 0x64624293  // bfdot z19.s, z20.h, z2.h[0]\n"
      "ble 37f\n"
      "ld1h { z21.h }, p5/Z, [x10]\n"
      "ld1h { z20.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646842a8  // bfdot z8.s, z21.h, z0.h[1]\n"
      ".inst 0x646942ac  // bfdot z12.s, z21.h, z1.h[1]\n"
      ".inst 0x646a42b0  // bfdot z16.s, z21.h, z2.h[1]\n"
      ".inst 0x64684289  // bfdot z9.s, z20.h, z0.h[1]\n"
      "ld1h { z21.h }, p5/Z, [x10, #2, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x6469428d  // bfdot z13.s, z20.h, z1.h[1]\n"
      ".inst 0x646a4291  // bfdot z17.s, z20.h, z2.h[1]\n"
      "ld1h { z20.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x646842aa  // bfdot z10.s, z21.h, z0.h[1]\n"
      ".inst 0x646942ae  // bfdot z14.s, z21.h, z1.h[1]\n"
      ".inst 0x646a42b2  // bfdot z18.s, z21.h, z2.h[1]\n"
      ".inst 0x6468428b  // bfdot z11.s, z20.h, z0.h[1]\n"
      ".inst 0x6469428f  // bfdot z15.s, z20.h, z1.h[1]\n"
      ".inst 0x646a4293  // bfdot z19.s, z20.h, z2.h[1]\n"
      "ble 37f\n"
      "ld1h { z21.h }, p5/Z, [x10]\n"
      "ld1h { z20.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x647042a8  // bfdot z8.s, z21.h, z0.h[2]\n"
      ".inst 0x647142ac  // bfdot z12.s, z21.h, z1.h[2]\n"
      ".inst 0x647242b0  // bfdot z16.s, z21.h, z2.h[2]\n"
      ".inst 0x64704289  // bfdot z9.s, z20.h, z0.h[2]\n"
      "ld1h { z21.h }, p5/Z, [x10, #2, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x6471428d  // bfdot z13.s, z20.h, z1.h[2]\n"
      ".inst 0x64724291  // bfdot z17.s, z20.h, z2.h[2]\n"
      "ld1h { z20.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x647042aa  // bfdot z10.s, z21.h, z0.h[2]\n"
      ".inst 0x647142ae  // bfdot z14.s, z21.h, z1.h[2]\n"
      ".inst 0x647242b2  // bfdot z18.s, z21.h, z2.h[2]\n"
      ".inst 0x6470428b  // bfdot z11.s, z20.h, z0.h[2]\n"
      ".inst 0x6471428f  // bfdot z15.s, z20.h, z1.h[2]\n"
      ".inst 0x64724293  // bfdot z19.s, z20.h, z2.h[2]\n"
      "ble 37f\n"
      "ld1h { z21.h }, p5/Z, [x10]\n"
      "ld1h { z20.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x647842a8  // bfdot z8.s, z21.h, z0.h[3]\n"
      ".inst 0x647942ac  // bfdot z12.s, z21.h, z1.h[3]\n"
      ".inst 0x647a42b0  // bfdot z16.s, z21.h, z2.h[3]\n"
      ".inst 0x64784289  // bfdot z9.s, z20.h, z0.h[3]\n"
      "ld1h { z21.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6479428d  // bfdot z13.s, z20.h, z1.h[3]\n"
      ".inst 0x647a4291  // bfdot z17.s, z20.h, z2.h[3]\n"
      "ld1h { z20.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x647842aa  // bfdot z10.s, z21.h, z0.h[3]\n"
      ".inst 0x647942ae  // bfdot z14.s, z21.h, z1.h[3]\n"
      ".inst 0x647a42b2  // bfdot z18.s, z21.h, z2.h[3]\n"
      ".inst 0x6478428b  // bfdot z11.s, z20.h, z0.h[3]\n"
      ".inst 0x6479428f  // bfdot z15.s, z20.h, z1.h[3]\n"
      ".inst 0x647a4293  // bfdot z19.s, z20.h, z2.h[3]\n"
      "37:"  // Height 3: Multiply loop: multiply skip
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 32b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "tbz %x[flags], #1, 38f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z21.s }, p5/Z, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z20.s }, p5/Z, [x20]\n"
      "fmin z8.s, p5/M, z8.s, z21.s\n"
      "fmin z9.s, p5/M, z9.s, z21.s\n"
      "fmin z10.s, p5/M, z10.s, z21.s\n"
      "fmin z11.s, p5/M, z11.s, z21.s\n"
      "fmin z12.s, p5/M, z12.s, z21.s\n"
      "fmin z13.s, p5/M, z13.s, z21.s\n"
      "fmin z14.s, p5/M, z14.s, z21.s\n"
      "fmin z15.s, p5/M, z15.s, z21.s\n"
      "fmin z16.s, p5/M, z16.s, z21.s\n"
      "fmin z17.s, p5/M, z17.s, z21.s\n"
      "fmin z18.s, p5/M, z18.s, z21.s\n"
      "fmin z19.s, p5/M, z19.s, z21.s\n"
      "fmax z8.s, p5/M, z8.s, z20.s\n"
      "fmax z9.s, p5/M, z9.s, z20.s\n"
      "fmax z10.s, p5/M, z10.s, z20.s\n"
      "fmax z11.s, p5/M, z11.s, z20.s\n"
      "fmax z12.s, p5/M, z12.s, z20.s\n"
      "fmax z13.s, p5/M, z13.s, z20.s\n"
      "fmax z14.s, p5/M, z14.s, z20.s\n"
      "fmax z15.s, p5/M, z15.s, z20.s\n"
      "fmax z16.s, p5/M, z16.s, z20.s\n"
      "fmax z17.s, p5/M, z17.s, z20.s\n"
      "fmax z18.s, p5/M, z18.s, z20.s\n"
      "fmax z19.s, p5/M, z19.s, z20.s\n"
      "38:"  // Height 3: No activation
      "st1w { z8.s }, p4, [x9]\n"
      "st1w { z9.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z12.s }, p4, [x25]\n"
      "st1w { z13.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x25, #3, MUL VL]\n"
      "st1w { z16.s }, p4, [x24]\n"
      "st1w { z17.s }, p3, [x24, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x24, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x24, #3, MUL VL]\n"
      "39:"  // Height 3: Writeback done
      "decw x11, ALL, MUL #4\n"
      "cmp x11, XZR\n"
      "bgt 28b\n"
      "b 80f\n"
      "40:"  // Height 4
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "41:"  // Height 4: Column loop
      "mov x20, #0x0\n"
      "whilelt p4.s, x20, x11\n"
      "incw x20\n"
      "whilelt p3.s, x20, x11\n"
      "incw x20\n"
      "whilelt p2.s, x20, x11\n"
      "incw x20\n"
      "whilelt p1.s, x20, x11\n"
      "cbz x12, 42f\n"
      "ld1w { z8.s }, p5/Z, [x12]\n"
      "ld1w { z9.s }, p5/Z, [x12, #1, MUL VL]\n"
      "mov z12.d, z8.d\n"
      "mov z13.d, z9.d\n"
      "ld1w { z10.s }, p5/Z, [x12, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x12, #3, MUL VL]\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z16.d, z8.d\n"
      "mov z17.d, z9.d\n"
      "addvl x12, x12, #4\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "mov z20.d, z8.d\n"
      "mov z21.d, z9.d\n"
      "mov z22.d, z10.d\n"
      "mov z23.d, z11.d\n"
      "b 44f\n"
      "42:"  // Height 4: no bias
      "tbz %x[flags], #0, 43f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x22, x9, x20, LSL #2\n"
      "add x21, x22, x20, LSL #2\n"
      "ld1w { z8.s }, p4/Z, [x9]\n"
      "add x20, x21, x20, LSL #2\n"
      "ld1w { z9.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x22]\n"
      "ld1w { z13.s }, p3/Z, [x22, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x22, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x22, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x21]\n"
      "ld1w { z17.s }, p3/Z, [x21, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x21, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x21, #3, MUL VL]\n"
      "ld1w { z20.s }, p4/Z, [x20]\n"
      "ld1w { z21.s }, p3/Z, [x20, #1, MUL VL]\n"
      "ld1w { z22.s }, p2/Z, [x20, #2, MUL VL]\n"
      "ld1w { z23.s }, p1/Z, [x20, #3, MUL VL]\n"
      "b 44f\n"
      "43:"  // Height 4: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "mov z20.b, #0x0\n"
      "mov z21.b, #0x0\n"
      "mov z22.b, #0x0\n"
      "mov z23.b, #0x0\n"
      "44:"  // Height 4: setup done
      "mov x28, #0x0\n"
      "45:"  // Height 4: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 46f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "cbnz x28, 47f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "b 47f\n"
      "46:"  // Height 4: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "47:"  // Height 4: input setup done
      "cmp x27, #0x8\n"
      "ble 49f\n"
      "48:"  // Height 4: Multiply loop: Main loop head
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z3.h }, p0/Z, [x26]\n"
      "ld1rqh { z2.h }, p0/Z, [x25]\n"
      "sub x27, x27, #0x8\n"
      "ld1rqh { z1.h }, p0/Z, [x24]\n"
      "ld1rqh { z0.h }, p0/Z, [x23]\n"
      "cmp x27, #0x8\n"
      "add x26, x26, #0x10\n"
      "ld1h { z25.h }, p5/Z, [x10]\n"
      "ld1h { z24.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64634328  // bfdot z8.s, z25.h, z3.h[0]\n"
      ".inst 0x6462432c  // bfdot z12.s, z25.h, z2.h[0]\n"
      ".inst 0x64614330  // bfdot z16.s, z25.h, z1.h[0]\n"
      ".inst 0x64604334  // bfdot z20.s, z25.h, z0.h[0]\n"
      "ld1h { z25.h }, p5/Z, [x10, #2, MUL VL]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x64634309  // bfdot z9.s, z24.h, z3.h[0]\n"
      ".inst 0x6462430d  // bfdot z13.s, z24.h, z2.h[0]\n"
      "add x24, x24, #0x10\n"
      "add x23, x23, #0x10\n"
      ".inst 0x64614311  // bfdot z17.s, z24.h, z1.h[0]\n"
      ".inst 0x64604315  // bfdot z21.s, z24.h, z0.h[0]\n"
      "ld1h { z24.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6463432a  // bfdot z10.s, z25.h, z3.h[0]\n"
      ".inst 0x6462432e  // bfdot z14.s, z25.h, z2.h[0]\n"
      ".inst 0x64614332  // bfdot z18.s, z25.h, z1.h[0]\n"
      ".inst 0x64604336  // bfdot z22.s, z25.h, z0.h[0]\n"
      "ld1h { z25.h }, p5/Z, [x10, #4, MUL VL]\n"
      ".inst 0x6463430b  // bfdot z11.s, z24.h, z3.h[0]\n"
      ".inst 0x6462430f  // bfdot z15.s, z24.h, z2.h[0]\n"
      ".inst 0x64614313  // bfdot z19.s, z24.h, z1.h[0]\n"
      ".inst 0x64604317  // bfdot z23.s, z24.h, z0.h[0]\n"
      "ld1h { z24.h }, p5/Z, [x10, #5, MUL VL]\n"
      ".inst 0x646b4328  // bfdot z8.s, z25.h, z3.h[1]\n"
      ".inst 0x646a432c  // bfdot z12.s, z25.h, z2.h[1]\n"
      ".inst 0x64694330  // bfdot z16.s, z25.h, z1.h[1]\n"
      ".inst 0x64684334  // bfdot z20.s, z25.h, z0.h[1]\n"
      "ld1h { z25.h }, p5/Z, [x10, #6, MUL VL]\n"
      ".inst 0x646b4309  // bfdot z9.s, z24.h, z3.h[1]\n"
      ".inst 0x646a430d  // bfdot z13.s, z24.h, z2.h[1]\n"
      ".inst 0x64694311  // bfdot z17.s, z24.h, z1.h[1]\n"
      ".inst 0x64684315  // bfdot z21.s, z24.h, z0.h[1]\n"
      "ld1h { z24.h }, p5/Z, [x10, #7, MUL VL]\n"
      "addvl x10, x10, #16\n"
      ".inst 0x646b432a  // bfdot z10.s, z25.h, z3.h[1]\n"
      ".inst 0x646a432e  // bfdot z14.s, z25.h, z2.h[1]\n"
      ".inst 0x64694332  // bfdot z18.s, z25.h, z1.h[1]\n"
      ".inst 0x64684336  // bfdot z22.s, z25.h, z0.h[1]\n"
      "ld1h { z25.h }, p5/Z, [x10, #-8, MUL VL]\n"
      ".inst 0x646b430b  // bfdot z11.s, z24.h, z3.h[1]\n"
      ".inst 0x646a430f  // bfdot z15.s, z24.h, z2.h[1]\n"
      ".inst 0x64694313  // bfdot z19.s, z24.h, z1.h[1]\n"
      ".inst 0x64684317  // bfdot z23.s, z24.h, z0.h[1]\n"
      "ld1h { z24.h }, p5/Z, [x10, #-7, MUL VL]\n"
      ".inst 0x64734328  // bfdot z8.s, z25.h, z3.h[2]\n"
      ".inst 0x6472432c  // bfdot z12.s, z25.h, z2.h[2]\n"
      ".inst 0x64714330  // bfdot z16.s, z25.h, z1.h[2]\n"
      ".inst 0x64704334  // bfdot z20.s, z25.h, z0.h[2]\n"
      "ld1h { z25.h }, p5/Z, [x10, #-6, MUL VL]\n"
      ".inst 0x64734309  // bfdot z9.s, z24.h, z3.h[2]\n"
      ".inst 0x6472430d  // bfdot z13.s, z24.h, z2.h[2]\n"
      ".inst 0x64714311  // bfdot z17.s, z24.h, z1.h[2]\n"
      ".inst 0x64704315  // bfdot z21.s, z24.h, z0.h[2]\n"
      "ld1h { z24.h }, p5/Z, [x10, #-5, MUL VL]\n"
      ".inst 0x6473432a  // bfdot z10.s, z25.h, z3.h[2]\n"
      ".inst 0x6472432e  // bfdot z14.s, z25.h, z2.h[2]\n"
      ".inst 0x64714332  // bfdot z18.s, z25.h, z1.h[2]\n"
      ".inst 0x64704336  // bfdot z22.s, z25.h, z0.h[2]\n"
      "ld1h { z25.h }, p5/Z, [x10, #-4, MUL VL]\n"
      ".inst 0x6473430b  // bfdot z11.s, z24.h, z3.h[2]\n"
      ".inst 0x6472430f  // bfdot z15.s, z24.h, z2.h[2]\n"
      ".inst 0x64714313  // bfdot z19.s, z24.h, z1.h[2]\n"
      ".inst 0x64704317  // bfdot z23.s, z24.h, z0.h[2]\n"
      "ld1h { z24.h }, p5/Z, [x10, #-3, MUL VL]\n"
      ".inst 0x647b4328  // bfdot z8.s, z25.h, z3.h[3]\n"
      ".inst 0x647a432c  // bfdot z12.s, z25.h, z2.h[3]\n"
      ".inst 0x64794330  // bfdot z16.s, z25.h, z1.h[3]\n"
      ".inst 0x64784334  // bfdot z20.s, z25.h, z0.h[3]\n"
      "ld1h { z25.h }, p5/Z, [x10, #-2, MUL VL]\n"
      ".inst 0x647b4309  // bfdot z9.s, z24.h, z3.h[3]\n"
      ".inst 0x647a430d  // bfdot z13.s, z24.h, z2.h[3]\n"
      ".inst 0x64794311  // bfdot z17.s, z24.h, z1.h[3]\n"
      ".inst 0x64784315  // bfdot z21.s, z24.h, z0.h[3]\n"
      "ld1h { z24.h }, p5/Z, [x10, #-1, MUL VL]\n"
      ".inst 0x647b432a  // bfdot z10.s, z25.h, z3.h[3]\n"
      ".inst 0x647a432e  // bfdot z14.s, z25.h, z2.h[3]\n"
      ".inst 0x64794332  // bfdot z18.s, z25.h, z1.h[3]\n"
      ".inst 0x64784336  // bfdot z22.s, z25.h, z0.h[3]\n"
      ".inst 0x647b430b  // bfdot z11.s, z24.h, z3.h[3]\n"
      ".inst 0x647a430f  // bfdot z15.s, z24.h, z2.h[3]\n"
      ".inst 0x64794313  // bfdot z19.s, z24.h, z1.h[3]\n"
      ".inst 0x64784317  // bfdot z23.s, z24.h, z0.h[3]\n"
      "bgt 48b\n"
      "49:"  // Height 4: Multiply loop: Single iteration only
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z0.h }, p0/Z, [x26]\n"
      "ld1rqh { z1.h }, p0/Z, [x25]\n"
      "subs x27, x27, #0x2\n"
      "ld1rqh { z2.h }, p0/Z, [x24]\n"
      "ld1rqh { z3.h }, p0/Z, [x23]\n"
      "ld1h { z25.h }, p5/Z, [x10]\n"
      "ld1h { z24.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64604328  // bfdot z8.s, z25.h, z0.h[0]\n"
      ".inst 0x6461432c  // bfdot z12.s, z25.h, z1.h[0]\n"
      ".inst 0x64624330  // bfdot z16.s, z25.h, z2.h[0]\n"
      ".inst 0x64634334  // bfdot z20.s, z25.h, z3.h[0]\n"
      "ld1h { z25.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x64604309  // bfdot z9.s, z24.h, z0.h[0]\n"
      ".inst 0x6461430d  // bfdot z13.s, z24.h, z1.h[0]\n"
      ".inst 0x64624311  // bfdot z17.s, z24.h, z2.h[0]\n"
      ".inst 0x64634315  // bfdot z21.s, z24.h, z3.h[0]\n"
      "ld1h { z24.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6460432a  // bfdot z10.s, z25.h, z0.h[0]\n"
      ".inst 0x6461432e  // bfdot z14.s, z25.h, z1.h[0]\n"
      ".inst 0x64624332  // bfdot z18.s, z25.h, z2.h[0]\n"
      ".inst 0x64634336  // bfdot z22.s, z25.h, z3.h[0]\n"
      ".inst 0x6460430b  // bfdot z11.s, z24.h, z0.h[0]\n"
      ".inst 0x6461430f  // bfdot z15.s, z24.h, z1.h[0]\n"
      ".inst 0x64624313  // bfdot z19.s, z24.h, z2.h[0]\n"
      ".inst 0x64634317  // bfdot z23.s, z24.h, z3.h[0]\n"
      "ble 50f\n"
      "ld1h { z25.h }, p5/Z, [x10]\n"
      "ld1h { z24.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64684328  // bfdot z8.s, z25.h, z0.h[1]\n"
      ".inst 0x6469432c  // bfdot z12.s, z25.h, z1.h[1]\n"
      ".inst 0x646a4330  // bfdot z16.s, z25.h, z2.h[1]\n"
      ".inst 0x646b4334  // bfdot z20.s, z25.h, z3.h[1]\n"
      "ld1h { z25.h }, p5/Z, [x10, #2, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x64684309  // bfdot z9.s, z24.h, z0.h[1]\n"
      ".inst 0x6469430d  // bfdot z13.s, z24.h, z1.h[1]\n"
      ".inst 0x646a4311  // bfdot z17.s, z24.h, z2.h[1]\n"
      ".inst 0x646b4315  // bfdot z21.s, z24.h, z3.h[1]\n"
      "ld1h { z24.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6468432a  // bfdot z10.s, z25.h, z0.h[1]\n"
      ".inst 0x6469432e  // bfdot z14.s, z25.h, z1.h[1]\n"
      ".inst 0x646a4332  // bfdot z18.s, z25.h, z2.h[1]\n"
      ".inst 0x646b4336  // bfdot z22.s, z25.h, z3.h[1]\n"
      ".inst 0x6468430b  // bfdot z11.s, z24.h, z0.h[1]\n"
      ".inst 0x6469430f  // bfdot z15.s, z24.h, z1.h[1]\n"
      ".inst 0x646a4313  // bfdot z19.s, z24.h, z2.h[1]\n"
      ".inst 0x646b4317  // bfdot z23.s, z24.h, z3.h[1]\n"
      "ble 50f\n"
      "ld1h { z25.h }, p5/Z, [x10]\n"
      "ld1h { z24.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64704328  // bfdot z8.s, z25.h, z0.h[2]\n"
      ".inst 0x6471432c  // bfdot z12.s, z25.h, z1.h[2]\n"
      ".inst 0x64724330  // bfdot z16.s, z25.h, z2.h[2]\n"
      ".inst 0x64734334  // bfdot z20.s, z25.h, z3.h[2]\n"
      "ld1h { z25.h }, p5/Z, [x10, #2, MUL VL]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x64704309  // bfdot z9.s, z24.h, z0.h[2]\n"
      ".inst 0x6471430d  // bfdot z13.s, z24.h, z1.h[2]\n"
      ".inst 0x64724311  // bfdot z17.s, z24.h, z2.h[2]\n"
      ".inst 0x64734315  // bfdot z21.s, z24.h, z3.h[2]\n"
      "ld1h { z24.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6470432a  // bfdot z10.s, z25.h, z0.h[2]\n"
      ".inst 0x6471432e  // bfdot z14.s, z25.h, z1.h[2]\n"
      ".inst 0x64724332  // bfdot z18.s, z25.h, z2.h[2]\n"
      ".inst 0x64734336  // bfdot z22.s, z25.h, z3.h[2]\n"
      ".inst 0x6470430b  // bfdot z11.s, z24.h, z0.h[2]\n"
      ".inst 0x6471430f  // bfdot z15.s, z24.h, z1.h[2]\n"
      ".inst 0x64724313  // bfdot z19.s, z24.h, z2.h[2]\n"
      ".inst 0x64734317  // bfdot z23.s, z24.h, z3.h[2]\n"
      "ble 50f\n"
      "ld1h { z25.h }, p5/Z, [x10]\n"
      "ld1h { z24.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64784328  // bfdot z8.s, z25.h, z0.h[3]\n"
      ".inst 0x6479432c  // bfdot z12.s, z25.h, z1.h[3]\n"
      ".inst 0x647a4330  // bfdot z16.s, z25.h, z2.h[3]\n"
      ".inst 0x647b4334  // bfdot z20.s, z25.h, z3.h[3]\n"
      "ld1h { z25.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x64784309  // bfdot z9.s, z24.h, z0.h[3]\n"
      ".inst 0x6479430d  // bfdot z13.s, z24.h, z1.h[3]\n"
      ".inst 0x647a4311  // bfdot z17.s, z24.h, z2.h[3]\n"
      ".inst 0x647b4315  // bfdot z21.s, z24.h, z3.h[3]\n"
      "ld1h { z24.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x6478432a  // bfdot z10.s, z25.h, z0.h[3]\n"
      ".inst 0x6479432e  // bfdot z14.s, z25.h, z1.h[3]\n"
      ".inst 0x647a4332  // bfdot z18.s, z25.h, z2.h[3]\n"
      ".inst 0x647b4336  // bfdot z22.s, z25.h, z3.h[3]\n"
      ".inst 0x6478430b  // bfdot z11.s, z24.h, z0.h[3]\n"
      ".inst 0x6479430f  // bfdot z15.s, z24.h, z1.h[3]\n"
      ".inst 0x647a4313  // bfdot z19.s, z24.h, z2.h[3]\n"
      ".inst 0x647b4317  // bfdot z23.s, z24.h, z3.h[3]\n"
      "50:"  // Height 4: Multiply loop: multiply skip
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 45b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "tbz %x[flags], #1, 51f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z25.s }, p5/Z, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z24.s }, p5/Z, [x20]\n"
      "fmin z8.s, p5/M, z8.s, z25.s\n"
      "fmin z9.s, p5/M, z9.s, z25.s\n"
      "fmin z10.s, p5/M, z10.s, z25.s\n"
      "fmin z11.s, p5/M, z11.s, z25.s\n"
      "fmin z12.s, p5/M, z12.s, z25.s\n"
      "fmin z13.s, p5/M, z13.s, z25.s\n"
      "fmin z14.s, p5/M, z14.s, z25.s\n"
      "fmin z15.s, p5/M, z15.s, z25.s\n"
      "fmin z16.s, p5/M, z16.s, z25.s\n"
      "fmin z17.s, p5/M, z17.s, z25.s\n"
      "fmin z18.s, p5/M, z18.s, z25.s\n"
      "fmin z19.s, p5/M, z19.s, z25.s\n"
      "fmin z20.s, p5/M, z20.s, z25.s\n"
      "fmin z21.s, p5/M, z21.s, z25.s\n"
      "fmin z22.s, p5/M, z22.s, z25.s\n"
      "fmin z23.s, p5/M, z23.s, z25.s\n"
      "fmax z8.s, p5/M, z8.s, z24.s\n"
      "fmax z9.s, p5/M, z9.s, z24.s\n"
      "fmax z10.s, p5/M, z10.s, z24.s\n"
      "fmax z11.s, p5/M, z11.s, z24.s\n"
      "fmax z12.s, p5/M, z12.s, z24.s\n"
      "fmax z13.s, p5/M, z13.s, z24.s\n"
      "fmax z14.s, p5/M, z14.s, z24.s\n"
      "fmax z15.s, p5/M, z15.s, z24.s\n"
      "fmax z16.s, p5/M, z16.s, z24.s\n"
      "fmax z17.s, p5/M, z17.s, z24.s\n"
      "fmax z18.s, p5/M, z18.s, z24.s\n"
      "fmax z19.s, p5/M, z19.s, z24.s\n"
      "fmax z20.s, p5/M, z20.s, z24.s\n"
      "fmax z21.s, p5/M, z21.s, z24.s\n"
      "fmax z22.s, p5/M, z22.s, z24.s\n"
      "fmax z23.s, p5/M, z23.s, z24.s\n"
      "51:"  // Height 4: No activation
      "st1w { z8.s }, p4, [x9]\n"
      "st1w { z9.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z12.s }, p4, [x25]\n"
      "st1w { z13.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x25, #3, MUL VL]\n"
      "st1w { z16.s }, p4, [x24]\n"
      "st1w { z17.s }, p3, [x24, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x24, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x24, #3, MUL VL]\n"
      "st1w { z20.s }, p4, [x23]\n"
      "st1w { z21.s }, p3, [x23, #1, MUL VL]\n"
      "st1w { z22.s }, p2, [x23, #2, MUL VL]\n"
      "st1w { z23.s }, p1, [x23, #3, MUL VL]\n"
      "52:"  // Height 4: Writeback done
      "decw x11, ALL, MUL #4\n"
      "cmp x11, XZR\n"
      "bgt 41b\n"
      "b 80f\n"
      "53:"  // Height 5
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "54:"  // Height 5: Column loop
      "mov x20, #0x0\n"
      "whilelt p4.s, x20, x11\n"
      "incw x20\n"
      "whilelt p3.s, x20, x11\n"
      "incw x20\n"
      "whilelt p2.s, x20, x11\n"
      "incw x20\n"
      "whilelt p1.s, x20, x11\n"
      "cbz x12, 55f\n"
      "ld1w { z8.s }, p5/Z, [x12]\n"
      "ld1w { z9.s }, p5/Z, [x12, #1, MUL VL]\n"
      "mov z12.d, z8.d\n"
      "mov z13.d, z9.d\n"
      "ld1w { z10.s }, p5/Z, [x12, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x12, #3, MUL VL]\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z16.d, z8.d\n"
      "mov z17.d, z9.d\n"
      "addvl x12, x12, #4\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "mov z20.d, z8.d\n"
      "mov z21.d, z9.d\n"
      "mov z22.d, z10.d\n"
      "mov z23.d, z11.d\n"
      "mov z24.d, z8.d\n"
      "mov z25.d, z9.d\n"
      "mov z26.d, z10.d\n"
      "mov z27.d, z11.d\n"
      "b 57f\n"
      "55:"  // Height 5: no bias
      "tbz %x[flags], #0, 56f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x23, x9, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "ld1w { z8.s }, p4/Z, [x9]\n"
      "add x21, x22, x20, LSL #2\n"
      "add x20, x21, x20, LSL #2\n"
      "ld1w { z9.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x9, #2, MUL VL]\n"
      "ld1w { z11.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x23]\n"
      "ld1w { z13.s }, p3/Z, [x23, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x23, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x23, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x22]\n"
      "ld1w { z17.s }, p3/Z, [x22, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x22, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x22, #3, MUL VL]\n"
      "ld1w { z20.s }, p4/Z, [x21]\n"
      "ld1w { z21.s }, p3/Z, [x21, #1, MUL VL]\n"
      "ld1w { z22.s }, p2/Z, [x21, #2, MUL VL]\n"
      "ld1w { z23.s }, p1/Z, [x21, #3, MUL VL]\n"
      "ld1w { z24.s }, p4/Z, [x20]\n"
      "ld1w { z25.s }, p3/Z, [x20, #1, MUL VL]\n"
      "ld1w { z26.s }, p2/Z, [x20, #2, MUL VL]\n"
      "ld1w { z27.s }, p1/Z, [x20, #3, MUL VL]\n"
      "b 57f\n"
      "56:"  // Height 5: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "mov z20.b, #0x0\n"
      "mov z21.b, #0x0\n"
      "mov z22.b, #0x0\n"
      "mov z23.b, #0x0\n"
      "mov z24.b, #0x0\n"
      "mov z25.b, #0x0\n"
      "mov z26.b, #0x0\n"
      "mov z27.b, #0x0\n"
      "57:"  // Height 5: setup done
      "mov x28, #0x0\n"
      "58:"  // Height 5: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 59f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "cbnz x28, 60f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "add x22, x22, x20, LSL #1\n"
      "b 60f\n"
      "59:"  // Height 5: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "add x22, x23, x21, LSL #1\n"
      "60:"  // Height 5: input setup done
      "cmp x27, #0x8\n"
      "ble 62f\n"
      "61:"  // Height 5: Multiply loop: Main loop head
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z4.h }, p0/Z, [x26]\n"
      "ld1rqh { z3.h }, p0/Z, [x25]\n"
      "sub x27, x27, #0x8\n"
      "ld1rqh { z2.h }, p0/Z, [x24]\n"
      "ld1rqh { z1.h }, p0/Z, [x23]\n"
      "cmp x27, #0x8\n"
      "add x26, x26, #0x10\n"
      "ld1rqh { z0.h }, p0/Z, [x22]\n"
      "ld1h { z29.h }, p5/Z, [x10]\n"
      ".inst 0x646443a8  // bfdot z8.s, z29.h, z4.h[0]\n"
      ".inst 0x646343ac  // bfdot z12.s, z29.h, z3.h[0]\n"
      "ld1h { z28.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646243b0  // bfdot z16.s, z29.h, z2.h[0]\n"
      ".inst 0x646143b4  // bfdot z20.s, z29.h, z1.h[0]\n"
      "add x25, x25, #0x10\n"
      ".inst 0x646043b8  // bfdot z24.s, z29.h, z0.h[0]\n"
      ".inst 0x64644389  // bfdot z9.s, z28.h, z4.h[0]\n"
      "ld1h { z29.h }, p5/Z, [x10, #2, MUL VL]\n"
      "add x24, x24, #0x10\n"
      ".inst 0x6463438d  // bfdot z13.s, z28.h, z3.h[0]\n"
      ".inst 0x64624391  // bfdot z17.s, z28.h, z2.h[0]\n"
      "add x23, x23, #0x10\n"
      "add x22, x22, #0x10\n"
      ".inst 0x64614395  // bfdot z21.s, z28.h, z1.h[0]\n"
      ".inst 0x64604399  // bfdot z25.s, z28.h, z0.h[0]\n"
      "ld1h { z28.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x646443aa  // bfdot z10.s, z29.h, z4.h[0]\n"
      ".inst 0x646343ae  // bfdot z14.s, z29.h, z3.h[0]\n"
      ".inst 0x646243b2  // bfdot z18.s, z29.h, z2.h[0]\n"
      ".inst 0x646143b6  // bfdot z22.s, z29.h, z1.h[0]\n"
      ".inst 0x646043ba  // bfdot z26.s, z29.h, z0.h[0]\n"
      ".inst 0x6464438b  // bfdot z11.s, z28.h, z4.h[0]\n"
      "ld1h { z29.h }, p5/Z, [x10, #4, MUL VL]\n"
      ".inst 0x6463438f  // bfdot z15.s, z28.h, z3.h[0]\n"
      ".inst 0x64624393  // bfdot z19.s, z28.h, z2.h[0]\n"
      ".inst 0x64614397  // bfdot z23.s, z28.h, z1.h[0]\n"
      ".inst 0x6460439b  // bfdot z27.s, z28.h, z0.h[0]\n"
      "ld1h { z28.h }, p5/Z, [x10, #5, MUL VL]\n"
      ".inst 0x646c43a8  // bfdot z8.s, z29.h, z4.h[1]\n"
      ".inst 0x646b43ac  // bfdot z12.s, z29.h, z3.h[1]\n"
      ".inst 0x646a43b0  // bfdot z16.s, z29.h, z2.h[1]\n"
      ".inst 0x646943b4  // bfdot z20.s, z29.h, z1.h[1]\n"
      ".inst 0x646843b8  // bfdot z24.s, z29.h, z0.h[1]\n"
      ".inst 0x646c4389  // bfdot z9.s, z28.h, z4.h[1]\n"
      "ld1h { z29.h }, p5/Z, [x10, #6, MUL VL]\n"
      ".inst 0x646b438d  // bfdot z13.s, z28.h, z3.h[1]\n"
      ".inst 0x646a4391  // bfdot z17.s, z28.h, z2.h[1]\n"
      ".inst 0x64694395  // bfdot z21.s, z28.h, z1.h[1]\n"
      ".inst 0x64684399  // bfdot z25.s, z28.h, z0.h[1]\n"
      "ld1h { z28.h }, p5/Z, [x10, #7, MUL VL]\n"
      "addvl x10, x10, #16\n"
      ".inst 0x646c43aa  // bfdot z10.s, z29.h, z4.h[1]\n"
      ".inst 0x646b43ae  // bfdot z14.s, z29.h, z3.h[1]\n"
      ".inst 0x646a43b2  // bfdot z18.s, z29.h, z2.h[1]\n"
      ".inst 0x646943b6  // bfdot z22.s, z29.h, z1.h[1]\n"
      ".inst 0x646843ba  // bfdot z26.s, z29.h, z0.h[1]\n"
      ".inst 0x646c438b  // bfdot z11.s, z28.h, z4.h[1]\n"
      "ld1h { z29.h }, p5/Z, [x10, #-8, MUL VL]\n"
      ".inst 0x646b438f  // bfdot z15.s, z28.h, z3.h[1]\n"
      ".inst 0x646a4393  // bfdot z19.s, z28.h, z2.h[1]\n"
      ".inst 0x64694397  // bfdot z23.s, z28.h, z1.h[1]\n"
      ".inst 0x6468439b  // bfdot z27.s, z28.h, z0.h[1]\n"
      "ld1h { z28.h }, p5/Z, [x10, #-7, MUL VL]\n"
      ".inst 0x647443a8  // bfdot z8.s, z29.h, z4.h[2]\n"
      ".inst 0x647343ac  // bfdot z12.s, z29.h, z3.h[2]\n"
      ".inst 0x647243b0  // bfdot z16.s, z29.h, z2.h[2]\n"
      ".inst 0x647143b4  // bfdot z20.s, z29.h, z1.h[2]\n"
      ".inst 0x647043b8  // bfdot z24.s, z29.h, z0.h[2]\n"
      ".inst 0x64744389  // bfdot z9.s, z28.h, z4.h[2]\n"
      "ld1h { z29.h }, p5/Z, [x10, #-6, MUL VL]\n"
      ".inst 0x6473438d  // bfdot z13.s, z28.h, z3.h[2]\n"
      ".inst 0x64724391  // bfdot z17.s, z28.h, z2.h[2]\n"
      ".inst 0x64714395  // bfdot z21.s, z28.h, z1.h[2]\n"
      ".inst 0x64704399  // bfdot z25.s, z28.h, z0.h[2]\n"
      "ld1h { z28.h }, p5/Z, [x10, #-5, MUL VL]\n"
      ".inst 0x647443aa  // bfdot z10.s, z29.h, z4.h[2]\n"
      ".inst 0x647343ae  // bfdot z14.s, z29.h, z3.h[2]\n"
      ".inst 0x647243b2  // bfdot z18.s, z29.h, z2.h[2]\n"
      ".inst 0x647143b6  // bfdot z22.s, z29.h, z1.h[2]\n"
      ".inst 0x647043ba  // bfdot z26.s, z29.h, z0.h[2]\n"
      ".inst 0x6474438b  // bfdot z11.s, z28.h, z4.h[2]\n"
      "ld1h { z29.h }, p5/Z, [x10, #-4, MUL VL]\n"
      ".inst 0x6473438f  // bfdot z15.s, z28.h, z3.h[2]\n"
      ".inst 0x64724393  // bfdot z19.s, z28.h, z2.h[2]\n"
      ".inst 0x64714397  // bfdot z23.s, z28.h, z1.h[2]\n"
      ".inst 0x6470439b  // bfdot z27.s, z28.h, z0.h[2]\n"
      "ld1h { z28.h }, p5/Z, [x10, #-3, MUL VL]\n"
      ".inst 0x647c43a8  // bfdot z8.s, z29.h, z4.h[3]\n"
      ".inst 0x647b43ac  // bfdot z12.s, z29.h, z3.h[3]\n"
      ".inst 0x647a43b0  // bfdot z16.s, z29.h, z2.h[3]\n"
      ".inst 0x647943b4  // bfdot z20.s, z29.h, z1.h[3]\n"
      ".inst 0x647843b8  // bfdot z24.s, z29.h, z0.h[3]\n"
      ".inst 0x647c4389  // bfdot z9.s, z28.h, z4.h[3]\n"
      "ld1h { z29.h }, p5/Z, [x10, #-2, MUL VL]\n"
      ".inst 0x647b438d  // bfdot z13.s, z28.h, z3.h[3]\n"
      ".inst 0x647a4391  // bfdot z17.s, z28.h, z2.h[3]\n"
      ".inst 0x64794395  // bfdot z21.s, z28.h, z1.h[3]\n"
      ".inst 0x64784399  // bfdot z25.s, z28.h, z0.h[3]\n"
      "ld1h { z28.h }, p5/Z, [x10, #-1, MUL VL]\n"
      ".inst 0x647c43aa  // bfdot z10.s, z29.h, z4.h[3]\n"
      ".inst 0x647b43ae  // bfdot z14.s, z29.h, z3.h[3]\n"
      ".inst 0x647a43b2  // bfdot z18.s, z29.h, z2.h[3]\n"
      ".inst 0x647943b6  // bfdot z22.s, z29.h, z1.h[3]\n"
      ".inst 0x647843ba  // bfdot z26.s, z29.h, z0.h[3]\n"
      ".inst 0x647c438b  // bfdot z11.s, z28.h, z4.h[3]\n"
      ".inst 0x647b438f  // bfdot z15.s, z28.h, z3.h[3]\n"
      ".inst 0x647a4393  // bfdot z19.s, z28.h, z2.h[3]\n"
      ".inst 0x64794397  // bfdot z23.s, z28.h, z1.h[3]\n"
      ".inst 0x6478439b  // bfdot z27.s, z28.h, z0.h[3]\n"
      "bgt 61b\n"
      "62:"  // Height 5: Multiply loop: Single iteration only
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z0.h }, p0/Z, [x26]\n"
      "ld1rqh { z1.h }, p0/Z, [x25]\n"
      "subs x27, x27, #0x2\n"
      "ld1rqh { z2.h }, p0/Z, [x24]\n"
      "ld1rqh { z3.h }, p0/Z, [x23]\n"
      "ld1rqh { z4.h }, p0/Z, [x22]\n"
      "ld1h { z29.h }, p5/Z, [x10]\n"
      ".inst 0x646043a8  // bfdot z8.s, z29.h, z0.h[0]\n"
      ".inst 0x646143ac  // bfdot z12.s, z29.h, z1.h[0]\n"
      "ld1h { z28.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646243b0  // bfdot z16.s, z29.h, z2.h[0]\n"
      ".inst 0x646343b4  // bfdot z20.s, z29.h, z3.h[0]\n"
      ".inst 0x646443b8  // bfdot z24.s, z29.h, z4.h[0]\n"
      ".inst 0x64604389  // bfdot z9.s, z28.h, z0.h[0]\n"
      "ld1h { z29.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6461438d  // bfdot z13.s, z28.h, z1.h[0]\n"
      ".inst 0x64624391  // bfdot z17.s, z28.h, z2.h[0]\n"
      ".inst 0x64634395  // bfdot z21.s, z28.h, z3.h[0]\n"
      ".inst 0x64644399  // bfdot z25.s, z28.h, z4.h[0]\n"
      "ld1h { z28.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x646043aa  // bfdot z10.s, z29.h, z0.h[0]\n"
      ".inst 0x646143ae  // bfdot z14.s, z29.h, z1.h[0]\n"
      ".inst 0x646243b2  // bfdot z18.s, z29.h, z2.h[0]\n"
      ".inst 0x646343b6  // bfdot z22.s, z29.h, z3.h[0]\n"
      ".inst 0x646443ba  // bfdot z26.s, z29.h, z4.h[0]\n"
      ".inst 0x6460438b  // bfdot z11.s, z28.h, z0.h[0]\n"
      ".inst 0x6461438f  // bfdot z15.s, z28.h, z1.h[0]\n"
      ".inst 0x64624393  // bfdot z19.s, z28.h, z2.h[0]\n"
      ".inst 0x64634397  // bfdot z23.s, z28.h, z3.h[0]\n"
      ".inst 0x6464439b  // bfdot z27.s, z28.h, z4.h[0]\n"
      "ble 63f\n"
      "ld1h { z29.h }, p5/Z, [x10]\n"
      "ld1h { z28.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646843a8  // bfdot z8.s, z29.h, z0.h[1]\n"
      ".inst 0x646943ac  // bfdot z12.s, z29.h, z1.h[1]\n"
      ".inst 0x646a43b0  // bfdot z16.s, z29.h, z2.h[1]\n"
      ".inst 0x646b43b4  // bfdot z20.s, z29.h, z3.h[1]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x646c43b8  // bfdot z24.s, z29.h, z4.h[1]\n"
      ".inst 0x64684389  // bfdot z9.s, z28.h, z0.h[1]\n"
      "ld1h { z29.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6469438d  // bfdot z13.s, z28.h, z1.h[1]\n"
      ".inst 0x646a4391  // bfdot z17.s, z28.h, z2.h[1]\n"
      ".inst 0x646b4395  // bfdot z21.s, z28.h, z3.h[1]\n"
      ".inst 0x646c4399  // bfdot z25.s, z28.h, z4.h[1]\n"
      "ld1h { z28.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x646843aa  // bfdot z10.s, z29.h, z0.h[1]\n"
      ".inst 0x646943ae  // bfdot z14.s, z29.h, z1.h[1]\n"
      ".inst 0x646a43b2  // bfdot z18.s, z29.h, z2.h[1]\n"
      ".inst 0x646b43b6  // bfdot z22.s, z29.h, z3.h[1]\n"
      ".inst 0x646c43ba  // bfdot z26.s, z29.h, z4.h[1]\n"
      ".inst 0x6468438b  // bfdot z11.s, z28.h, z0.h[1]\n"
      ".inst 0x6469438f  // bfdot z15.s, z28.h, z1.h[1]\n"
      ".inst 0x646a4393  // bfdot z19.s, z28.h, z2.h[1]\n"
      ".inst 0x646b4397  // bfdot z23.s, z28.h, z3.h[1]\n"
      ".inst 0x646c439b  // bfdot z27.s, z28.h, z4.h[1]\n"
      "ble 63f\n"
      "ld1h { z29.h }, p5/Z, [x10]\n"
      "ld1h { z28.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x647043a8  // bfdot z8.s, z29.h, z0.h[2]\n"
      ".inst 0x647143ac  // bfdot z12.s, z29.h, z1.h[2]\n"
      ".inst 0x647243b0  // bfdot z16.s, z29.h, z2.h[2]\n"
      ".inst 0x647343b4  // bfdot z20.s, z29.h, z3.h[2]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x647443b8  // bfdot z24.s, z29.h, z4.h[2]\n"
      ".inst 0x64704389  // bfdot z9.s, z28.h, z0.h[2]\n"
      "ld1h { z29.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6471438d  // bfdot z13.s, z28.h, z1.h[2]\n"
      ".inst 0x64724391  // bfdot z17.s, z28.h, z2.h[2]\n"
      ".inst 0x64734395  // bfdot z21.s, z28.h, z3.h[2]\n"
      ".inst 0x64744399  // bfdot z25.s, z28.h, z4.h[2]\n"
      "ld1h { z28.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x647043aa  // bfdot z10.s, z29.h, z0.h[2]\n"
      ".inst 0x647143ae  // bfdot z14.s, z29.h, z1.h[2]\n"
      ".inst 0x647243b2  // bfdot z18.s, z29.h, z2.h[2]\n"
      ".inst 0x647343b6  // bfdot z22.s, z29.h, z3.h[2]\n"
      ".inst 0x647443ba  // bfdot z26.s, z29.h, z4.h[2]\n"
      ".inst 0x6470438b  // bfdot z11.s, z28.h, z0.h[2]\n"
      ".inst 0x6471438f  // bfdot z15.s, z28.h, z1.h[2]\n"
      ".inst 0x64724393  // bfdot z19.s, z28.h, z2.h[2]\n"
      ".inst 0x64734397  // bfdot z23.s, z28.h, z3.h[2]\n"
      ".inst 0x6474439b  // bfdot z27.s, z28.h, z4.h[2]\n"
      "ble 63f\n"
      "ld1h { z29.h }, p5/Z, [x10]\n"
      "ld1h { z28.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x647843a8  // bfdot z8.s, z29.h, z0.h[3]\n"
      ".inst 0x647943ac  // bfdot z12.s, z29.h, z1.h[3]\n"
      ".inst 0x647a43b0  // bfdot z16.s, z29.h, z2.h[3]\n"
      ".inst 0x647b43b4  // bfdot z20.s, z29.h, z3.h[3]\n"
      ".inst 0x647c43b8  // bfdot z24.s, z29.h, z4.h[3]\n"
      ".inst 0x64784389  // bfdot z9.s, z28.h, z0.h[3]\n"
      "ld1h { z29.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x6479438d  // bfdot z13.s, z28.h, z1.h[3]\n"
      ".inst 0x647a4391  // bfdot z17.s, z28.h, z2.h[3]\n"
      ".inst 0x647b4395  // bfdot z21.s, z28.h, z3.h[3]\n"
      ".inst 0x647c4399  // bfdot z25.s, z28.h, z4.h[3]\n"
      "ld1h { z28.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x647843aa  // bfdot z10.s, z29.h, z0.h[3]\n"
      ".inst 0x647943ae  // bfdot z14.s, z29.h, z1.h[3]\n"
      ".inst 0x647a43b2  // bfdot z18.s, z29.h, z2.h[3]\n"
      ".inst 0x647b43b6  // bfdot z22.s, z29.h, z3.h[3]\n"
      ".inst 0x647c43ba  // bfdot z26.s, z29.h, z4.h[3]\n"
      ".inst 0x6478438b  // bfdot z11.s, z28.h, z0.h[3]\n"
      ".inst 0x6479438f  // bfdot z15.s, z28.h, z1.h[3]\n"
      ".inst 0x647a4393  // bfdot z19.s, z28.h, z2.h[3]\n"
      ".inst 0x647b4397  // bfdot z23.s, z28.h, z3.h[3]\n"
      ".inst 0x647c439b  // bfdot z27.s, z28.h, z4.h[3]\n"
      "63:"  // Height 5: Multiply loop: multiply skip
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 58b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "tbz %x[flags], #1, 64f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z29.s }, p5/Z, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z28.s }, p5/Z, [x20]\n"
      "fmin z8.s, p5/M, z8.s, z29.s\n"
      "fmin z9.s, p5/M, z9.s, z29.s\n"
      "fmin z10.s, p5/M, z10.s, z29.s\n"
      "fmin z11.s, p5/M, z11.s, z29.s\n"
      "fmin z12.s, p5/M, z12.s, z29.s\n"
      "fmin z13.s, p5/M, z13.s, z29.s\n"
      "fmin z14.s, p5/M, z14.s, z29.s\n"
      "fmin z15.s, p5/M, z15.s, z29.s\n"
      "fmin z16.s, p5/M, z16.s, z29.s\n"
      "fmin z17.s, p5/M, z17.s, z29.s\n"
      "fmin z18.s, p5/M, z18.s, z29.s\n"
      "fmin z19.s, p5/M, z19.s, z29.s\n"
      "fmin z20.s, p5/M, z20.s, z29.s\n"
      "fmin z21.s, p5/M, z21.s, z29.s\n"
      "fmin z22.s, p5/M, z22.s, z29.s\n"
      "fmin z23.s, p5/M, z23.s, z29.s\n"
      "fmin z24.s, p5/M, z24.s, z29.s\n"
      "fmin z25.s, p5/M, z25.s, z29.s\n"
      "fmin z26.s, p5/M, z26.s, z29.s\n"
      "fmin z27.s, p5/M, z27.s, z29.s\n"
      "fmax z8.s, p5/M, z8.s, z28.s\n"
      "fmax z9.s, p5/M, z9.s, z28.s\n"
      "fmax z10.s, p5/M, z10.s, z28.s\n"
      "fmax z11.s, p5/M, z11.s, z28.s\n"
      "fmax z12.s, p5/M, z12.s, z28.s\n"
      "fmax z13.s, p5/M, z13.s, z28.s\n"
      "fmax z14.s, p5/M, z14.s, z28.s\n"
      "fmax z15.s, p5/M, z15.s, z28.s\n"
      "fmax z16.s, p5/M, z16.s, z28.s\n"
      "fmax z17.s, p5/M, z17.s, z28.s\n"
      "fmax z18.s, p5/M, z18.s, z28.s\n"
      "fmax z19.s, p5/M, z19.s, z28.s\n"
      "fmax z20.s, p5/M, z20.s, z28.s\n"
      "fmax z21.s, p5/M, z21.s, z28.s\n"
      "fmax z22.s, p5/M, z22.s, z28.s\n"
      "fmax z23.s, p5/M, z23.s, z28.s\n"
      "fmax z24.s, p5/M, z24.s, z28.s\n"
      "fmax z25.s, p5/M, z25.s, z28.s\n"
      "fmax z26.s, p5/M, z26.s, z28.s\n"
      "fmax z27.s, p5/M, z27.s, z28.s\n"
      "64:"  // Height 5: No activation
      "st1w { z8.s }, p4, [x9]\n"
      "st1w { z9.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z12.s }, p4, [x25]\n"
      "st1w { z13.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x25, #3, MUL VL]\n"
      "st1w { z16.s }, p4, [x24]\n"
      "st1w { z17.s }, p3, [x24, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x24, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x24, #3, MUL VL]\n"
      "st1w { z20.s }, p4, [x23]\n"
      "st1w { z21.s }, p3, [x23, #1, MUL VL]\n"
      "st1w { z22.s }, p2, [x23, #2, MUL VL]\n"
      "st1w { z23.s }, p1, [x23, #3, MUL VL]\n"
      "st1w { z24.s }, p4, [x22]\n"
      "st1w { z25.s }, p3, [x22, #1, MUL VL]\n"
      "st1w { z26.s }, p2, [x22, #2, MUL VL]\n"
      "st1w { z27.s }, p1, [x22, #3, MUL VL]\n"
      "65:"  // Height 5: Writeback done
      "decw x11, ALL, MUL #4\n"
      "cmp x11, XZR\n"
      "bgt 54b\n"
      "b 80f\n"
      "66:"  // Height 6
      "ldr x21, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "mov x20, #0x18\n"
      "mov x12, %x[bias]\n"
      "ldr x11, [%x[args_ptr], %[offsetof_N]]\n"
      "ldr x10, [%x[args_ptr], %[offsetof_B_ptr]]\n"
      "mov x9, %x[output_ptr]\n"
      "madd %x[output_ptr], x21, x20, %x[output_ptr]\n"
      "67:"  // Height 6: Column loop
      "mov x20, #0x0\n"
      "whilelt p4.s, x20, x11\n"
      "incw x20\n"
      "whilelt p3.s, x20, x11\n"
      "incw x20\n"
      "whilelt p2.s, x20, x11\n"
      "incw x20\n"
      "whilelt p1.s, x20, x11\n"
      "cbz x12, 68f\n"
      "ld1w { z8.s }, p5/Z, [x12]\n"
      "ld1w { z9.s }, p5/Z, [x12, #1, MUL VL]\n"
      "mov z12.d, z8.d\n"
      "mov z13.d, z9.d\n"
      "ld1w { z10.s }, p5/Z, [x12, #2, MUL VL]\n"
      "ld1w { z11.s }, p5/Z, [x12, #3, MUL VL]\n"
      "mov z14.d, z10.d\n"
      "mov z15.d, z11.d\n"
      "mov z16.d, z8.d\n"
      "mov z17.d, z9.d\n"
      "addvl x12, x12, #4\n"
      "mov z18.d, z10.d\n"
      "mov z19.d, z11.d\n"
      "mov z20.d, z8.d\n"
      "mov z21.d, z9.d\n"
      "mov z22.d, z10.d\n"
      "mov z23.d, z11.d\n"
      "mov z24.d, z8.d\n"
      "mov z25.d, z9.d\n"
      "mov z26.d, z10.d\n"
      "mov z27.d, z11.d\n"
      "mov z28.d, z8.d\n"
      "mov z29.d, z9.d\n"
      "mov z30.d, z10.d\n"
      "mov z31.d, z11.d\n"
      "b 70f\n"
      "68:"  // Height 6: no bias
      "tbz %x[flags], #0, 69f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x24, x9, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "ld1w { z8.s }, p4/Z, [x9]\n"
      "add x22, x23, x20, LSL #2\n"
      "add x21, x22, x20, LSL #2\n"
      "ld1w { z9.s }, p3/Z, [x9, #1, MUL VL]\n"
      "ld1w { z10.s }, p2/Z, [x9, #2, MUL VL]\n"
      "add x20, x21, x20, LSL #2\n"
      "ld1w { z11.s }, p1/Z, [x9, #3, MUL VL]\n"
      "ld1w { z12.s }, p4/Z, [x24]\n"
      "ld1w { z13.s }, p3/Z, [x24, #1, MUL VL]\n"
      "ld1w { z14.s }, p2/Z, [x24, #2, MUL VL]\n"
      "ld1w { z15.s }, p1/Z, [x24, #3, MUL VL]\n"
      "ld1w { z16.s }, p4/Z, [x23]\n"
      "ld1w { z17.s }, p3/Z, [x23, #1, MUL VL]\n"
      "ld1w { z18.s }, p2/Z, [x23, #2, MUL VL]\n"
      "ld1w { z19.s }, p1/Z, [x23, #3, MUL VL]\n"
      "ld1w { z20.s }, p4/Z, [x22]\n"
      "ld1w { z21.s }, p3/Z, [x22, #1, MUL VL]\n"
      "ld1w { z22.s }, p2/Z, [x22, #2, MUL VL]\n"
      "ld1w { z23.s }, p1/Z, [x22, #3, MUL VL]\n"
      "ld1w { z24.s }, p4/Z, [x21]\n"
      "ld1w { z25.s }, p3/Z, [x21, #1, MUL VL]\n"
      "ld1w { z26.s }, p2/Z, [x21, #2, MUL VL]\n"
      "ld1w { z27.s }, p1/Z, [x21, #3, MUL VL]\n"
      "ld1w { z28.s }, p4/Z, [x20]\n"
      "ld1w { z29.s }, p3/Z, [x20, #1, MUL VL]\n"
      "ld1w { z30.s }, p2/Z, [x20, #2, MUL VL]\n"
      "ld1w { z31.s }, p1/Z, [x20, #3, MUL VL]\n"
      "b 70f\n"
      "69:"  // Height 6: no accumulate
      "mov z8.b, #0x0\n"
      "mov z9.b, #0x0\n"
      "mov z10.b, #0x0\n"
      "mov z11.b, #0x0\n"
      "mov z12.b, #0x0\n"
      "mov z13.b, #0x0\n"
      "mov z14.b, #0x0\n"
      "mov z15.b, #0x0\n"
      "mov z16.b, #0x0\n"
      "mov z17.b, #0x0\n"
      "mov z18.b, #0x0\n"
      "mov z19.b, #0x0\n"
      "mov z20.b, #0x0\n"
      "mov z21.b, #0x0\n"
      "mov z22.b, #0x0\n"
      "mov z23.b, #0x0\n"
      "mov z24.b, #0x0\n"
      "mov z25.b, #0x0\n"
      "mov z26.b, #0x0\n"
      "mov z27.b, #0x0\n"
      "mov z28.b, #0x0\n"
      "mov z29.b, #0x0\n"
      "mov z30.b, #0x0\n"
      "mov z31.b, #0x0\n"
      "70:"  // Height 6: setup done
      "mov x28, #0x0\n"
      "71:"  // Height 6: String loop
      "ldr x20, [%x[args_ptr], %[offsetof_string_lengths]]\n"
      "ldr w27, [x20, x28, LSL #0x2]\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 72f\n"
      "ldr x20, [%x[input_ptr], x28, LSL #0x3]\n"
      "add x20, x20, x21, LSL #3\n"
      "ldr x26, [x20, #0x0]\n"
      "ldr x25, [x20, #0x8]\n"
      "ldr x24, [x20, #0x10]\n"
      "ldr x23, [x20, #0x18]\n"
      "ldr x22, [x20, #0x20]\n"
      "ldr x21, [x20, #0x28]\n"
      "cbnz x28, 73f\n"
      "ldr x20, [%x[args_ptr], %[offsetof_input_initial_col]]\n"
      "add x26, x26, x20, LSL #1\n"
      "add x25, x25, x20, LSL #1\n"
      "add x24, x24, x20, LSL #1\n"
      "add x23, x23, x20, LSL #1\n"
      "add x22, x22, x20, LSL #1\n"
      "add x21, x21, x20, LSL #1\n"
      "b 73f\n"
      "72:"  // Height 6: setup direct input
      "mov x26, %x[input_ptr]\n"
      "add x25, x26, x21, LSL #1\n"
      "add x24, x25, x21, LSL #1\n"
      "add x23, x24, x21, LSL #1\n"
      "add x22, x23, x21, LSL #1\n"
      "add x21, x22, x21, LSL #1\n"
      "73:"  // Height 6: input setup done
      "cmp x27, #0x8\n"
      "ble 75f\n"
      "74:"  // Height 6: Multiply loop: Main loop head
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z7.h }, p0/Z, [x26]\n"
      "ld1rqh { z6.h }, p0/Z, [x25]\n"
      "sub x27, x27, #0x8\n"
      "ld1rqh { z5.h }, p0/Z, [x24]\n"
      "ld1rqh { z4.h }, p0/Z, [x23]\n"
      "cmp x27, #0x8\n"
      "add x26, x26, #0x10\n"
      "ld1rqh { z3.h }, p0/Z, [x22]\n"
      "ld1rqh { z2.h }, p0/Z, [x21]\n"
      "add x25, x25, #0x10\n"
      "add x24, x24, #0x10\n"
      "ld1h { z1.h }, p5/Z, [x10]\n"
      "ld1h { z0.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x64674028  // bfdot z8.s, z1.h, z7.h[0]\n"
      ".inst 0x6466402c  // bfdot z12.s, z1.h, z6.h[0]\n"
      ".inst 0x64654030  // bfdot z16.s, z1.h, z5.h[0]\n"
      ".inst 0x64644034  // bfdot z20.s, z1.h, z4.h[0]\n"
      "add x23, x23, #0x10\n"
      "add x22, x22, #0x10\n"
      ".inst 0x64634038  // bfdot z24.s, z1.h, z3.h[0]\n"
      ".inst 0x6462403c  // bfdot z28.s, z1.h, z2.h[0]\n"
      "ld1h { z1.h }, p5/Z, [x10, #2, MUL VL]\n"
      "add x21, x21, #0x10\n"
      ".inst 0x64674009  // bfdot z9.s, z0.h, z7.h[0]\n"
      ".inst 0x6466400d  // bfdot z13.s, z0.h, z6.h[0]\n"
      ".inst 0x64654011  // bfdot z17.s, z0.h, z5.h[0]\n"
      ".inst 0x64644015  // bfdot z21.s, z0.h, z4.h[0]\n"
      ".inst 0x64634019  // bfdot z25.s, z0.h, z3.h[0]\n"
      ".inst 0x6462401d  // bfdot z29.s, z0.h, z2.h[0]\n"
      "ld1h { z0.h }, p5/Z, [x10, #3, MUL VL]\n"
      ".inst 0x6467402a  // bfdot z10.s, z1.h, z7.h[0]\n"
      ".inst 0x6466402e  // bfdot z14.s, z1.h, z6.h[0]\n"
      ".inst 0x64654032  // bfdot z18.s, z1.h, z5.h[0]\n"
      ".inst 0x64644036  // bfdot z22.s, z1.h, z4.h[0]\n"
      ".inst 0x6463403a  // bfdot z26.s, z1.h, z3.h[0]\n"
      ".inst 0x6462403e  // bfdot z30.s, z1.h, z2.h[0]\n"
      "ld1h { z1.h }, p5/Z, [x10, #4, MUL VL]\n"
      ".inst 0x6467400b  // bfdot z11.s, z0.h, z7.h[0]\n"
      ".inst 0x6466400f  // bfdot z15.s, z0.h, z6.h[0]\n"
      ".inst 0x64654013  // bfdot z19.s, z0.h, z5.h[0]\n"
      ".inst 0x64644017  // bfdot z23.s, z0.h, z4.h[0]\n"
      ".inst 0x6463401b  // bfdot z27.s, z0.h, z3.h[0]\n"
      ".inst 0x6462401f  // bfdot z31.s, z0.h, z2.h[0]\n"
      "ld1h { z0.h }, p5/Z, [x10, #5, MUL VL]\n"
      ".inst 0x646f4028  // bfdot z8.s, z1.h, z7.h[1]\n"
      ".inst 0x646e402c  // bfdot z12.s, z1.h, z6.h[1]\n"
      ".inst 0x646d4030  // bfdot z16.s, z1.h, z5.h[1]\n"
      ".inst 0x646c4034  // bfdot z20.s, z1.h, z4.h[1]\n"
      ".inst 0x646b4038  // bfdot z24.s, z1.h, z3.h[1]\n"
      ".inst 0x646a403c  // bfdot z28.s, z1.h, z2.h[1]\n"
      "ld1h { z1.h }, p5/Z, [x10, #6, MUL VL]\n"
      ".inst 0x646f4009  // bfdot z9.s, z0.h, z7.h[1]\n"
      ".inst 0x646e400d  // bfdot z13.s, z0.h, z6.h[1]\n"
      ".inst 0x646d4011  // bfdot z17.s, z0.h, z5.h[1]\n"
      ".inst 0x646c4015  // bfdot z21.s, z0.h, z4.h[1]\n"
      ".inst 0x646b4019  // bfdot z25.s, z0.h, z3.h[1]\n"
      ".inst 0x646a401d  // bfdot z29.s, z0.h, z2.h[1]\n"
      "ld1h { z0.h }, p5/Z, [x10, #7, MUL VL]\n"
      "addvl x10, x10, #16\n"
      ".inst 0x646f402a  // bfdot z10.s, z1.h, z7.h[1]\n"
      ".inst 0x646e402e  // bfdot z14.s, z1.h, z6.h[1]\n"
      ".inst 0x646d4032  // bfdot z18.s, z1.h, z5.h[1]\n"
      ".inst 0x646c4036  // bfdot z22.s, z1.h, z4.h[1]\n"
      ".inst 0x646b403a  // bfdot z26.s, z1.h, z3.h[1]\n"
      ".inst 0x646a403e  // bfdot z30.s, z1.h, z2.h[1]\n"
      "ld1h { z1.h }, p5/Z, [x10, #-8, MUL VL]\n"
      ".inst 0x646f400b  // bfdot z11.s, z0.h, z7.h[1]\n"
      ".inst 0x646e400f  // bfdot z15.s, z0.h, z6.h[1]\n"
      ".inst 0x646d4013  // bfdot z19.s, z0.h, z5.h[1]\n"
      ".inst 0x646c4017  // bfdot z23.s, z0.h, z4.h[1]\n"
      ".inst 0x646b401b  // bfdot z27.s, z0.h, z3.h[1]\n"
      ".inst 0x646a401f  // bfdot z31.s, z0.h, z2.h[1]\n"
      "ld1h { z0.h }, p5/Z, [x10, #-7, MUL VL]\n"
      ".inst 0x64774028  // bfdot z8.s, z1.h, z7.h[2]\n"
      ".inst 0x6476402c  // bfdot z12.s, z1.h, z6.h[2]\n"
      ".inst 0x64754030  // bfdot z16.s, z1.h, z5.h[2]\n"
      ".inst 0x64744034  // bfdot z20.s, z1.h, z4.h[2]\n"
      ".inst 0x64734038  // bfdot z24.s, z1.h, z3.h[2]\n"
      ".inst 0x6472403c  // bfdot z28.s, z1.h, z2.h[2]\n"
      "ld1h { z1.h }, p5/Z, [x10, #-6, MUL VL]\n"
      ".inst 0x64774009  // bfdot z9.s, z0.h, z7.h[2]\n"
      ".inst 0x6476400d  // bfdot z13.s, z0.h, z6.h[2]\n"
      ".inst 0x64754011  // bfdot z17.s, z0.h, z5.h[2]\n"
      ".inst 0x64744015  // bfdot z21.s, z0.h, z4.h[2]\n"
      ".inst 0x64734019  // bfdot z25.s, z0.h, z3.h[2]\n"
      ".inst 0x6472401d  // bfdot z29.s, z0.h, z2.h[2]\n"
      "ld1h { z0.h }, p5/Z, [x10, #-5, MUL VL]\n"
      ".inst 0x6477402a  // bfdot z10.s, z1.h, z7.h[2]\n"
      ".inst 0x6476402e  // bfdot z14.s, z1.h, z6.h[2]\n"
      ".inst 0x64754032  // bfdot z18.s, z1.h, z5.h[2]\n"
      ".inst 0x64744036  // bfdot z22.s, z1.h, z4.h[2]\n"
      ".inst 0x6473403a  // bfdot z26.s, z1.h, z3.h[2]\n"
      ".inst 0x6472403e  // bfdot z30.s, z1.h, z2.h[2]\n"
      "ld1h { z1.h }, p5/Z, [x10, #-4, MUL VL]\n"
      ".inst 0x6477400b  // bfdot z11.s, z0.h, z7.h[2]\n"
      ".inst 0x6476400f  // bfdot z15.s, z0.h, z6.h[2]\n"
      ".inst 0x64754013  // bfdot z19.s, z0.h, z5.h[2]\n"
      ".inst 0x64744017  // bfdot z23.s, z0.h, z4.h[2]\n"
      ".inst 0x6473401b  // bfdot z27.s, z0.h, z3.h[2]\n"
      ".inst 0x6472401f  // bfdot z31.s, z0.h, z2.h[2]\n"
      "ld1h { z0.h }, p5/Z, [x10, #-3, MUL VL]\n"
      ".inst 0x647f4028  // bfdot z8.s, z1.h, z7.h[3]\n"
      ".inst 0x647e402c  // bfdot z12.s, z1.h, z6.h[3]\n"
      ".inst 0x647d4030  // bfdot z16.s, z1.h, z5.h[3]\n"
      ".inst 0x647c4034  // bfdot z20.s, z1.h, z4.h[3]\n"
      ".inst 0x647b4038  // bfdot z24.s, z1.h, z3.h[3]\n"
      ".inst 0x647a403c  // bfdot z28.s, z1.h, z2.h[3]\n"
      "ld1h { z1.h }, p5/Z, [x10, #-2, MUL VL]\n"
      ".inst 0x647f4009  // bfdot z9.s, z0.h, z7.h[3]\n"
      ".inst 0x647e400d  // bfdot z13.s, z0.h, z6.h[3]\n"
      ".inst 0x647d4011  // bfdot z17.s, z0.h, z5.h[3]\n"
      ".inst 0x647c4015  // bfdot z21.s, z0.h, z4.h[3]\n"
      ".inst 0x647b4019  // bfdot z25.s, z0.h, z3.h[3]\n"
      ".inst 0x647a401d  // bfdot z29.s, z0.h, z2.h[3]\n"
      "ld1h { z0.h }, p5/Z, [x10, #-1, MUL VL]\n"
      ".inst 0x647f402a  // bfdot z10.s, z1.h, z7.h[3]\n"
      ".inst 0x647e402e  // bfdot z14.s, z1.h, z6.h[3]\n"
      ".inst 0x647d4032  // bfdot z18.s, z1.h, z5.h[3]\n"
      ".inst 0x647c4036  // bfdot z22.s, z1.h, z4.h[3]\n"
      ".inst 0x647b403a  // bfdot z26.s, z1.h, z3.h[3]\n"
      ".inst 0x647a403e  // bfdot z30.s, z1.h, z2.h[3]\n"
      ".inst 0x647f400b  // bfdot z11.s, z0.h, z7.h[3]\n"
      ".inst 0x647e400f  // bfdot z15.s, z0.h, z6.h[3]\n"
      ".inst 0x647d4013  // bfdot z19.s, z0.h, z5.h[3]\n"
      ".inst 0x647c4017  // bfdot z23.s, z0.h, z4.h[3]\n"
      ".inst 0x647b401b  // bfdot z27.s, z0.h, z3.h[3]\n"
      ".inst 0x647a401f  // bfdot z31.s, z0.h, z2.h[3]\n"
      "bgt 74b\n"
      "75:"  // Height 6: Multiply loop: Single iteration only
      "whilelt p0.h, XZR, x27\n"
      "ld1rqh { z0.h }, p0/Z, [x26]\n"
      "ld1rqh { z1.h }, p0/Z, [x25]\n"
      "subs x27, x27, #0x2\n"
      "ld1rqh { z2.h }, p0/Z, [x24]\n"
      "ld1rqh { z3.h }, p0/Z, [x23]\n"
      "ld1rqh { z4.h }, p0/Z, [x22]\n"
      "ld1rqh { z5.h }, p0/Z, [x21]\n"
      "ld1h { z7.h }, p5/Z, [x10]\n"
      "ld1h { z6.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646040e8  // bfdot z8.s, z7.h, z0.h[0]\n"
      ".inst 0x646140ec  // bfdot z12.s, z7.h, z1.h[0]\n"
      ".inst 0x646240f0  // bfdot z16.s, z7.h, z2.h[0]\n"
      ".inst 0x646340f4  // bfdot z20.s, z7.h, z3.h[0]\n"
      ".inst 0x646440f8  // bfdot z24.s, z7.h, z4.h[0]\n"
      ".inst 0x646540fc  // bfdot z28.s, z7.h, z5.h[0]\n"
      "ld1h { z7.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x646040c9  // bfdot z9.s, z6.h, z0.h[0]\n"
      ".inst 0x646140cd  // bfdot z13.s, z6.h, z1.h[0]\n"
      ".inst 0x646240d1  // bfdot z17.s, z6.h, z2.h[0]\n"
      ".inst 0x646340d5  // bfdot z21.s, z6.h, z3.h[0]\n"
      ".inst 0x646440d9  // bfdot z25.s, z6.h, z4.h[0]\n"
      ".inst 0x646540dd  // bfdot z29.s, z6.h, z5.h[0]\n"
      "ld1h { z6.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x646040ea  // bfdot z10.s, z7.h, z0.h[0]\n"
      ".inst 0x646140ee  // bfdot z14.s, z7.h, z1.h[0]\n"
      ".inst 0x646240f2  // bfdot z18.s, z7.h, z2.h[0]\n"
      ".inst 0x646340f6  // bfdot z22.s, z7.h, z3.h[0]\n"
      ".inst 0x646440fa  // bfdot z26.s, z7.h, z4.h[0]\n"
      ".inst 0x646540fe  // bfdot z30.s, z7.h, z5.h[0]\n"
      ".inst 0x646040cb  // bfdot z11.s, z6.h, z0.h[0]\n"
      ".inst 0x646140cf  // bfdot z15.s, z6.h, z1.h[0]\n"
      ".inst 0x646240d3  // bfdot z19.s, z6.h, z2.h[0]\n"
      ".inst 0x646340d7  // bfdot z23.s, z6.h, z3.h[0]\n"
      ".inst 0x646440db  // bfdot z27.s, z6.h, z4.h[0]\n"
      ".inst 0x646540df  // bfdot z31.s, z6.h, z5.h[0]\n"
      "ble 76f\n"
      "ld1h { z7.h }, p5/Z, [x10]\n"
      "ld1h { z6.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x646840e8  // bfdot z8.s, z7.h, z0.h[1]\n"
      ".inst 0x646940ec  // bfdot z12.s, z7.h, z1.h[1]\n"
      ".inst 0x646a40f0  // bfdot z16.s, z7.h, z2.h[1]\n"
      ".inst 0x646b40f4  // bfdot z20.s, z7.h, z3.h[1]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x646c40f8  // bfdot z24.s, z7.h, z4.h[1]\n"
      ".inst 0x646d40fc  // bfdot z28.s, z7.h, z5.h[1]\n"
      "ld1h { z7.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x646840c9  // bfdot z9.s, z6.h, z0.h[1]\n"
      ".inst 0x646940cd  // bfdot z13.s, z6.h, z1.h[1]\n"
      ".inst 0x646a40d1  // bfdot z17.s, z6.h, z2.h[1]\n"
      ".inst 0x646b40d5  // bfdot z21.s, z6.h, z3.h[1]\n"
      ".inst 0x646c40d9  // bfdot z25.s, z6.h, z4.h[1]\n"
      ".inst 0x646d40dd  // bfdot z29.s, z6.h, z5.h[1]\n"
      "ld1h { z6.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x646840ea  // bfdot z10.s, z7.h, z0.h[1]\n"
      ".inst 0x646940ee  // bfdot z14.s, z7.h, z1.h[1]\n"
      ".inst 0x646a40f2  // bfdot z18.s, z7.h, z2.h[1]\n"
      ".inst 0x646b40f6  // bfdot z22.s, z7.h, z3.h[1]\n"
      ".inst 0x646c40fa  // bfdot z26.s, z7.h, z4.h[1]\n"
      ".inst 0x646d40fe  // bfdot z30.s, z7.h, z5.h[1]\n"
      ".inst 0x646840cb  // bfdot z11.s, z6.h, z0.h[1]\n"
      ".inst 0x646940cf  // bfdot z15.s, z6.h, z1.h[1]\n"
      ".inst 0x646a40d3  // bfdot z19.s, z6.h, z2.h[1]\n"
      ".inst 0x646b40d7  // bfdot z23.s, z6.h, z3.h[1]\n"
      ".inst 0x646c40db  // bfdot z27.s, z6.h, z4.h[1]\n"
      ".inst 0x646d40df  // bfdot z31.s, z6.h, z5.h[1]\n"
      "ble 76f\n"
      "ld1h { z7.h }, p5/Z, [x10]\n"
      "ld1h { z6.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x647040e8  // bfdot z8.s, z7.h, z0.h[2]\n"
      ".inst 0x647140ec  // bfdot z12.s, z7.h, z1.h[2]\n"
      ".inst 0x647240f0  // bfdot z16.s, z7.h, z2.h[2]\n"
      ".inst 0x647340f4  // bfdot z20.s, z7.h, z3.h[2]\n"
      "subs x27, x27, #0x2\n"
      ".inst 0x647440f8  // bfdot z24.s, z7.h, z4.h[2]\n"
      ".inst 0x647540fc  // bfdot z28.s, z7.h, z5.h[2]\n"
      "ld1h { z7.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x647040c9  // bfdot z9.s, z6.h, z0.h[2]\n"
      ".inst 0x647140cd  // bfdot z13.s, z6.h, z1.h[2]\n"
      ".inst 0x647240d1  // bfdot z17.s, z6.h, z2.h[2]\n"
      ".inst 0x647340d5  // bfdot z21.s, z6.h, z3.h[2]\n"
      ".inst 0x647440d9  // bfdot z25.s, z6.h, z4.h[2]\n"
      ".inst 0x647540dd  // bfdot z29.s, z6.h, z5.h[2]\n"
      "ld1h { z6.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x647040ea  // bfdot z10.s, z7.h, z0.h[2]\n"
      ".inst 0x647140ee  // bfdot z14.s, z7.h, z1.h[2]\n"
      ".inst 0x647240f2  // bfdot z18.s, z7.h, z2.h[2]\n"
      ".inst 0x647340f6  // bfdot z22.s, z7.h, z3.h[2]\n"
      ".inst 0x647440fa  // bfdot z26.s, z7.h, z4.h[2]\n"
      ".inst 0x647540fe  // bfdot z30.s, z7.h, z5.h[2]\n"
      ".inst 0x647040cb  // bfdot z11.s, z6.h, z0.h[2]\n"
      ".inst 0x647140cf  // bfdot z15.s, z6.h, z1.h[2]\n"
      ".inst 0x647240d3  // bfdot z19.s, z6.h, z2.h[2]\n"
      ".inst 0x647340d7  // bfdot z23.s, z6.h, z3.h[2]\n"
      ".inst 0x647440db  // bfdot z27.s, z6.h, z4.h[2]\n"
      ".inst 0x647540df  // bfdot z31.s, z6.h, z5.h[2]\n"
      "ble 76f\n"
      "ld1h { z7.h }, p5/Z, [x10]\n"
      "ld1h { z6.h }, p5/Z, [x10, #1, MUL VL]\n"
      ".inst 0x647840e8  // bfdot z8.s, z7.h, z0.h[3]\n"
      ".inst 0x647940ec  // bfdot z12.s, z7.h, z1.h[3]\n"
      ".inst 0x647a40f0  // bfdot z16.s, z7.h, z2.h[3]\n"
      ".inst 0x647b40f4  // bfdot z20.s, z7.h, z3.h[3]\n"
      ".inst 0x647c40f8  // bfdot z24.s, z7.h, z4.h[3]\n"
      ".inst 0x647d40fc  // bfdot z28.s, z7.h, z5.h[3]\n"
      "ld1h { z7.h }, p5/Z, [x10, #2, MUL VL]\n"
      ".inst 0x647840c9  // bfdot z9.s, z6.h, z0.h[3]\n"
      ".inst 0x647940cd  // bfdot z13.s, z6.h, z1.h[3]\n"
      ".inst 0x647a40d1  // bfdot z17.s, z6.h, z2.h[3]\n"
      ".inst 0x647b40d5  // bfdot z21.s, z6.h, z3.h[3]\n"
      ".inst 0x647c40d9  // bfdot z25.s, z6.h, z4.h[3]\n"
      ".inst 0x647d40dd  // bfdot z29.s, z6.h, z5.h[3]\n"
      "ld1h { z6.h }, p5/Z, [x10, #3, MUL VL]\n"
      "addvl x10, x10, #4\n"
      ".inst 0x647840ea  // bfdot z10.s, z7.h, z0.h[3]\n"
      ".inst 0x647940ee  // bfdot z14.s, z7.h, z1.h[3]\n"
      ".inst 0x647a40f2  // bfdot z18.s, z7.h, z2.h[3]\n"
      ".inst 0x647b40f6  // bfdot z22.s, z7.h, z3.h[3]\n"
      ".inst 0x647c40fa  // bfdot z26.s, z7.h, z4.h[3]\n"
      ".inst 0x647d40fe  // bfdot z30.s, z7.h, z5.h[3]\n"
      ".inst 0x647840cb  // bfdot z11.s, z6.h, z0.h[3]\n"
      ".inst 0x647940cf  // bfdot z15.s, z6.h, z1.h[3]\n"
      ".inst 0x647a40d3  // bfdot z19.s, z6.h, z2.h[3]\n"
      ".inst 0x647b40d7  // bfdot z23.s, z6.h, z3.h[3]\n"
      ".inst 0x647c40db  // bfdot z27.s, z6.h, z4.h[3]\n"
      ".inst 0x647d40df  // bfdot z31.s, z6.h, z5.h[3]\n"
      "76:"  // Height 6: Multiply loop: multiply skip
      "ldr w20, [%x[args_ptr], %[offsetof_num_strings]]\n"
      "add x28, x28, #0x1\n"
      "cmp x28, x20\n"
      "bne 71b\n"
      "ldr x20, [%x[args_ptr], %[offsetof_output_offset]]\n"
      "add x25, x9, x20, LSL #2\n"
      "add x24, x25, x20, LSL #2\n"
      "add x23, x24, x20, LSL #2\n"
      "add x22, x23, x20, LSL #2\n"
      "add x21, x22, x20, LSL #2\n"
      "tbz %x[flags], #1, 77f\n"
      "add x20, %x[args_ptr], %[offset_max]\n"
      "ld1rw { z1.s }, p5/Z, [x20]\n"
      "add x20, %x[args_ptr], %[offset_min]\n"
      "ld1rw { z0.s }, p5/Z, [x20]\n"
      "fmin z8.s, p5/M, z8.s, z1.s\n"
      "fmin z9.s, p5/M, z9.s, z1.s\n"
      "fmin z10.s, p5/M, z10.s, z1.s\n"
      "fmin z11.s, p5/M, z11.s, z1.s\n"
      "fmin z12.s, p5/M, z12.s, z1.s\n"
      "fmin z13.s, p5/M, z13.s, z1.s\n"
      "fmin z14.s, p5/M, z14.s, z1.s\n"
      "fmin z15.s, p5/M, z15.s, z1.s\n"
      "fmin z16.s, p5/M, z16.s, z1.s\n"
      "fmin z17.s, p5/M, z17.s, z1.s\n"
      "fmin z18.s, p5/M, z18.s, z1.s\n"
      "fmin z19.s, p5/M, z19.s, z1.s\n"
      "fmin z20.s, p5/M, z20.s, z1.s\n"
      "fmin z21.s, p5/M, z21.s, z1.s\n"
      "fmin z22.s, p5/M, z22.s, z1.s\n"
      "fmin z23.s, p5/M, z23.s, z1.s\n"
      "fmin z24.s, p5/M, z24.s, z1.s\n"
      "fmin z25.s, p5/M, z25.s, z1.s\n"
      "fmin z26.s, p5/M, z26.s, z1.s\n"
      "fmin z27.s, p5/M, z27.s, z1.s\n"
      "fmin z28.s, p5/M, z28.s, z1.s\n"
      "fmin z29.s, p5/M, z29.s, z1.s\n"
      "fmin z30.s, p5/M, z30.s, z1.s\n"
      "fmin z31.s, p5/M, z31.s, z1.s\n"
      "fmax z8.s, p5/M, z8.s, z0.s\n"
      "fmax z9.s, p5/M, z9.s, z0.s\n"
      "fmax z10.s, p5/M, z10.s, z0.s\n"
      "fmax z11.s, p5/M, z11.s, z0.s\n"
      "fmax z12.s, p5/M, z12.s, z0.s\n"
      "fmax z13.s, p5/M, z13.s, z0.s\n"
      "fmax z14.s, p5/M, z14.s, z0.s\n"
      "fmax z15.s, p5/M, z15.s, z0.s\n"
      "fmax z16.s, p5/M, z16.s, z0.s\n"
      "fmax z17.s, p5/M, z17.s, z0.s\n"
      "fmax z18.s, p5/M, z18.s, z0.s\n"
      "fmax z19.s, p5/M, z19.s, z0.s\n"
      "fmax z20.s, p5/M, z20.s, z0.s\n"
      "fmax z21.s, p5/M, z21.s, z0.s\n"
      "fmax z22.s, p5/M, z22.s, z0.s\n"
      "fmax z23.s, p5/M, z23.s, z0.s\n"
      "fmax z24.s, p5/M, z24.s, z0.s\n"
      "fmax z25.s, p5/M, z25.s, z0.s\n"
      "fmax z26.s, p5/M, z26.s, z0.s\n"
      "fmax z27.s, p5/M, z27.s, z0.s\n"
      "fmax z28.s, p5/M, z28.s, z0.s\n"
      "fmax z29.s, p5/M, z29.s, z0.s\n"
      "fmax z30.s, p5/M, z30.s, z0.s\n"
      "fmax z31.s, p5/M, z31.s, z0.s\n"
      "77:"  // Height 6: No activation
      "st1w { z8.s }, p4, [x9]\n"
      "st1w { z9.s }, p3, [x9, #1, MUL VL]\n"
      "st1w { z10.s }, p2, [x9, #2, MUL VL]\n"
      "st1w { z11.s }, p1, [x9, #3, MUL VL]\n"
      "addvl x9, x9, #4\n"
      "st1w { z12.s }, p4, [x25]\n"
      "st1w { z13.s }, p3, [x25, #1, MUL VL]\n"
      "st1w { z14.s }, p2, [x25, #2, MUL VL]\n"
      "st1w { z15.s }, p1, [x25, #3, MUL VL]\n"
      "st1w { z16.s }, p4, [x24]\n"
      "st1w { z17.s }, p3, [x24, #1, MUL VL]\n"
      "st1w { z18.s }, p2, [x24, #2, MUL VL]\n"
      "st1w { z19.s }, p1, [x24, #3, MUL VL]\n"
      "st1w { z20.s }, p4, [x23]\n"
      "st1w { z21.s }, p3, [x23, #1, MUL VL]\n"
      "st1w { z22.s }, p2, [x23, #2, MUL VL]\n"
      "st1w { z23.s }, p1, [x23, #3, MUL VL]\n"
      "st1w { z24.s }, p4, [x22]\n"
      "st1w { z25.s }, p3, [x22, #1, MUL VL]\n"
      "st1w { z26.s }, p2, [x22, #2, MUL VL]\n"
      "st1w { z27.s }, p1, [x22, #3, MUL VL]\n"
      "st1w { z28.s }, p4, [x21]\n"
      "st1w { z29.s }, p3, [x21, #1, MUL VL]\n"
      "st1w { z30.s }, p2, [x21, #2, MUL VL]\n"
      "st1w { z31.s }, p1, [x21, #3, MUL VL]\n"
      "78:"  // Height 6: Writeback done
      "decw x11, ALL, MUL #4\n"
      "cmp x11, XZR\n"
      "bgt 67b\n"
      "subs %x[M], %x[M], #0x6\n"
      "beq 80f\n"
      "ldr x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "tbz %x[flags], #3, 79f\n"
      "add x21, x21, #0x6\n"
      "str x21, [%x[args_ptr], %[offsetof_input_offset]]\n"
      "b 1b\n"
      "79:"  // Update direct input
      "mov x20, #0xc\n"
      "madd %x[input_ptr], x20, x21, %x[input_ptr]\n"
      "b 1b\n"
      "80:"  // Exit
      : [M] "+&r" (M), [input_ptr] "+&r" (input_ptr), [output_ptr] "+&r" (output_ptr)
      : [args_ptr] "r" (&ka), [bias] "r" (bias), [flags] "r" (flags), [offset_max] "I" (offsetof(KernelArgs, maxval)), [offset_min] "I" (offsetof(KernelArgs, minval)), [offsetof_B_ptr] "I" (offsetof(KernelArgs, B_ptr)), [offsetof_N] "I" (offsetof(KernelArgs, N)), [offsetof_input_initial_col] "I" (offsetof(KernelArgs, input_initial_col)), [offsetof_input_offset] "I" (offsetof(KernelArgs, input_offset)), [offsetof_num_strings] "I" (offsetof(KernelArgs, num_strings)), [offsetof_output_offset] "I" (offsetof(KernelArgs, output_offset)), [offsetof_string_lengths] "I" (offsetof(KernelArgs, string_lengths))
      : "cc", "memory", "p0", "p1", "p2", "p3", "p4", "p5", "x9", "x10", "x11", "x12", "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "z0", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z19", "z20", "z21", "z22", "z23", "z24", "z25", "z26", "z27", "z28", "z29", "z30", "z31"
    );
}

} // namespace arm_gemm
#endif  // ARM_COMPUTE_ENABLE_SVE
