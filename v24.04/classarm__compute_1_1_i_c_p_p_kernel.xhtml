<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: ICPPKernel Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_i_c_p_p_kernel.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a>  </div>
  <div class="headertitle">
<div class="title">ICPPKernel Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Common interface for all kernels implemented in C++.  
 <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for ICPPKernel:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_i_c_p_p_kernel__coll__graph.svg" width="103" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a033d17a97e07cea7fe83eefcf23540f6"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a033d17a97e07cea7fe83eefcf23540f6">~ICPPKernel</a> ()=default</td></tr>
<tr class="memdesc:a033d17a97e07cea7fe83eefcf23540f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a033d17a97e07cea7fe83eefcf23540f6">More...</a><br /></td></tr>
<tr class="separator:a033d17a97e07cea7fe83eefcf23540f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6586f7a2dd64942f59b8c408643a0ea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6586f7a2dd64942f59b8c408643a0ea">run</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ad6586f7a2dd64942f59b8c408643a0ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute the kernel on the passed window.  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6586f7a2dd64942f59b8c408643a0ea">More...</a><br /></td></tr>
<tr class="separator:ad6586f7a2dd64942f59b8c408643a0ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92fc66203d7affe26cbe70194a154895"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a92fc66203d7affe26cbe70194a154895">run_nd</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;thread_locator)</td></tr>
<tr class="memdesc:a92fc66203d7affe26cbe70194a154895"><td class="mdescLeft">&#160;</td><td class="mdescRight">legacy compatibility layer for implemantions which do not support thread_locator In these cases we simply narrow the interface down the legacy version  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a92fc66203d7affe26cbe70194a154895">More...</a><br /></td></tr>
<tr class="separator:a92fc66203d7affe26cbe70194a154895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b8ef149ef3b6ca5e548473916f95cd6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a6b8ef149ef3b6ca5e548473916f95cd6">run_op</a> (<a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;<a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info)</td></tr>
<tr class="memdesc:a6b8ef149ef3b6ca5e548473916f95cd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute the kernel on the passed window.  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a6b8ef149ef3b6ca5e548473916f95cd6">More...</a><br /></td></tr>
<tr class="separator:a6b8ef149ef3b6ca5e548473916f95cd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3aa853ba2ae719bcb7ed1ccbe3c33286"><td class="memItemLeft" align="right" valign="top">virtual size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a3aa853ba2ae719bcb7ed1ccbe3c33286">get_mws</a> (const <a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;platform, size_t thread_count) const</td></tr>
<tr class="memdesc:a3aa853ba2ae719bcb7ed1ccbe3c33286"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return minimum workload size of the relevant kernel.  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a3aa853ba2ae719bcb7ed1ccbe3c33286">More...</a><br /></td></tr>
<tr class="separator:a3aa853ba2ae719bcb7ed1ccbe3c33286"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a30ad8f276a2310571c36239554831a"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a1a30ad8f276a2310571c36239554831a">name</a> () const =0</td></tr>
<tr class="memdesc:a1a30ad8f276a2310571c36239554831a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Name of the kernel.  <a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#a1a30ad8f276a2310571c36239554831a">More...</a><br /></td></tr>
<tr class="separator:a1a30ad8f276a2310571c36239554831a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_kernel"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_kernel')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a></td></tr>
<tr class="memitem:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">IKernel</a> ()</td></tr>
<tr class="memdesc:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a7250cb8cbaa4104a93a2d77155085507">More...</a><br /></td></tr>
<tr class="separator:a7250cb8cbaa4104a93a2d77155085507 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">~IKernel</a> ()=default</td></tr>
<tr class="memdesc:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_kernel.xhtml#a341b60d15a5e12a5b8f3825194dd3b12">More...</a><br /></td></tr>
<tr class="separator:a341b60d15a5e12a5b8f3825194dd3b12 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">is_parallelisable</a> () const</td></tr>
<tr class="memdesc:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates whether or not the kernel is parallelisable.  <a href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b">More...</a><br /></td></tr>
<tr class="separator:a0466ee6ce6552c87595f0e88e73eeb1b inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b3a97ba5dded504a2f2261c078493dd inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a4b3a97ba5dded504a2f2261c078493dd">border_size</a> () const</td></tr>
<tr class="memdesc:a4b3a97ba5dded504a2f2261c078493dd inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the border for that kernel.  <a href="classarm__compute_1_1_i_kernel.xhtml#a4b3a97ba5dded504a2f2261c078493dd">More...</a><br /></td></tr>
<tr class="separator:a4b3a97ba5dded504a2f2261c078493dd inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a> () const</td></tr>
<tr class="memdesc:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum window the kernel can be executed on.  <a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">More...</a><br /></td></tr>
<tr class="separator:ad34a46f53686c12a5c5e717cc9617fb6 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32ab3ad0302912c7da52204042727a44 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a32ab3ad0302912c7da52204042727a44">is_window_configured</a> () const</td></tr>
<tr class="memdesc:a32ab3ad0302912c7da52204042727a44 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to check if the embedded window of this kernel has been configured.  <a href="classarm__compute_1_1_i_kernel.xhtml#a32ab3ad0302912c7da52204042727a44">More...</a><br /></td></tr>
<tr class="separator:a32ab3ad0302912c7da52204042727a44 inherit pub_methods_classarm__compute_1_1_i_kernel"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:ad6dda2ca87714e265e1521607c2fa7d0"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6dda2ca87714e265e1521607c2fa7d0">default_mws</a> = 1</td></tr>
<tr class="separator:ad6dda2ca87714e265e1521607c2fa7d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Common interface for all kernels implemented in C++. </p>

<p class="definition">Definition at line <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a033d17a97e07cea7fe83eefcf23540f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a033d17a97e07cea7fe83eefcf23540f6">&#9670;&nbsp;</a></span>~ICPPKernel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3aa853ba2ae719bcb7ed1ccbe3c33286"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3aa853ba2ae719bcb7ed1ccbe3c33286">&#9670;&nbsp;</a></span>get_mws()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual size_t get_mws </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>platform</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>thread_count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return minimum workload size of the relevant kernel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">platform</td><td>The CPU platform used to create the context. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thread_count</td><td>Number of threads in the execution.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Minimum workload size for requested configuration. </dd></dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_division_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuDivisionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_assembly_wrapper_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuDepthwiseConv2dAssemblyWrapperKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernel_1_1_cpu_gemm_assembly_wrapper_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuGemmAssemblyWrapperKernel&lt; TypeInput, TypeOutput &gt;</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_im2_col_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuIm2ColKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuArithmeticKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuMulKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_pad_layer_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">NEPadLayerKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuAddKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuSubKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuReshapeKernel</a>, and <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml#ae84c81edc1474e79618df29c6a621797">CpuActivationKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00100">100</a> of file <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(platform, thread_count);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6dda2ca87714e265e1521607c2fa7d0">default_mws</a>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00041">ICPPKernel::default_mws</a>.</p>

</div>
</div>
<a id="a1a30ad8f276a2310571c36239554831a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a30ad8f276a2310571c36239554831a">&#9670;&nbsp;</a></span>name()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* name </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Name of the kernel. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> name </dd></dl>

<p>Implemented in <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuComplexMulKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_output_stage_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpOffsetContributionOutputStageKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_b_reduction_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpMatrixBReductionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpOffsetContributionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_im2_col_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuIm2ColKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CpuWinogradConv2dTransformOutputKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_mul_add_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuAddMulAddKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuMulKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_multiply_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmMatrixMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_transpose1x_w_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmTranspose1xWKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_scale_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuScaleKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_assembly_wrapper_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuDepthwiseConv2dAssemblyWrapperKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuDepthwiseConv2dNativeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_max_unpooling_layer_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuMaxUnpoolingLayerKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv3d_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuDirectConv3dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_weights_reshape_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuWeightsReshapeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuAddKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_scale_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpQuantizeDownInt32ScaleKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuCastKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_col2_im_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuCol2ImKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_addition_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmMatrixAdditionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuActivationKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_output_stage_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuDirectConv2dOutputStageKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuSubKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuDirectConv2dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_interleave4x4_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmInterleave4x4Kernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool3d_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuPool3dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_fully_connected_weights_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuConvertFullyConnectedWeightsKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuElementwiseUnaryKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpMatrixMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuPool2dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_quantize_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuQuantizeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_a_reduction_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpMatrixAReductionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernel_1_1_cpu_gemm_assembly_wrapper_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CpuGemmAssemblyWrapperKernel&lt; TypeInput, TypeOutput &gt;</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_depth_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuConcatenateDepthKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_floor_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuFloorKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_softmax_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuSoftmaxKernel</a>, <a class="el" href="classarm__compute_1_1kernels_1_1_n_e_logical_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">NELogicalKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CpuWinogradConv2dTransformInputKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_height_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuConcatenateHeightKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_width_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuConcatenateWidthKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_batch_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuConcatenateBatchKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_permute_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuPermuteKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_copy_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuCopyKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuReshapeKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_gather_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEGatherKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_quantized_signedness_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuConvertQuantizedSignednessKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_dequantize_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuDequantizeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuTransposeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_assembly_wrapper_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CpuPool2dAssemblyWrapperKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_kernel.xhtml#ad354932acfee42e9f2591d6ccd90e9c5">CpuElementwiseKernel&lt; Derived &gt;</a>, <a class="el" href="classarm__compute_1_1_n_e_col2_im_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NECol2ImKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_fill_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuFillKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_tile_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NETileKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_select_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NESelectKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_f_f_t_radix_stage_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEFFTRadixStageKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NERangeKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEReductionOperationKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_stack_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEStackLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEStridedSliceKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEBatchNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEBitwiseAndKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEBitwiseNotKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEBitwiseOrKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEBitwiseXorKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEFillBorderKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEMeanStdDevNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_non_maximum_suppression_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CPPNonMaximumSuppressionKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CPPPermuteKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NECropKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_f_f_t_digit_reverse_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEFFTDigitReverseKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_f_f_t_scale_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEFFTScaleKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NESpaceToBatchLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_upsample_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CPPUpsampleKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEBatchToSpaceLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_pad_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEPadLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_q_l_s_t_m_layer_normalization_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEQLSTMLayerNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NESpaceToDepthLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CPPBoxWithNonMaximaSuppressionLimitKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEChannelShuffleLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEDepthToSpaceLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEFuseBatchNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEInstanceNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NENormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEReorgLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEROIAlignLayerKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">CPPTopKVKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEBoundingBoxTransformKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEL2NormalizeLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEPriorBoxLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_reverse_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEReverseKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEComputeAllAnchorsKernel</a>, and <a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml#ab5656bb5b6334bdbe6e606c715872828">NEROIPoolingLayerKernel</a>.</p>

</div>
</div>
<a id="ad6586f7a2dd64942f59b8c408643a0ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6586f7a2dd64942f59b8c408643a0ea">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void run </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Execute the kernel on the passed window. </p>
<dl class="section warning"><dt>Warning</dt><dd>If <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b" title="Indicates whether or not the kernel is parallelisable.">is_parallelisable()</a> returns false then the passed window must be equal to <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a></dd></dl>
<dl class="section note"><dt>Note</dt><dd>The window has to be a region within the window returned by the <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a> method</dd>
<dd>
The width of the window has to be a multiple of <a class="el" href="_cl_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration()</a>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. (Must be a region of the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a>) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Info about executing thread and CPU. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1_n_e_space_to_batch_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NESpaceToBatchLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_fuse_batch_normalization_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEFuseBatchNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_batch_normalization_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEBatchNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_batch_to_space_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEBatchToSpaceLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_crop_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NECropKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_col2_im_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NECol2ImKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_non_maximum_suppression_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">CPPNonMaximumSuppressionKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_r_o_i_align_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEROIAlignLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_pad_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEPadLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEFillBorderKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bounding_box_transform_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEBoundingBoxTransformKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_stack_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEStackLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_f_f_t_radix_stage_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEFFTRadixStageKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_reduction_operation_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEReductionOperationKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_select_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NESelectKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_gather_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEGatherKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NENormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_l2_normalize_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEL2NormalizeLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_f_f_t_digit_reverse_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEFFTDigitReverseKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_normalization_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEMeanStdDevNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_range_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NERangeKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">CPPBoxWithNonMaximaSuppressionLimitKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_top_k_v_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">CPPTopKVKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_prior_box_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEPriorBoxLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_q_l_s_t_m_layer_normalization_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEQLSTMLayerNormalizationKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_permute_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">CPPPermuteKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_depth_to_space_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEDepthToSpaceLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_instance_normalization_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEInstanceNormalizationLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_reorg_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEReorgLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_reverse_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEReverseKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_f_f_t_scale_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEFFTScaleKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_compute_all_anchors_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEComputeAllAnchorsKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernel_1_1_cpu_gemm_assembly_wrapper_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">CpuGemmAssemblyWrapperKernel&lt; TypeInput, TypeOutput &gt;</a>, <a class="el" href="classarm__compute_1_1_n_e_space_to_depth_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NESpaceToDepthLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_channel_shuffle_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEChannelShuffleLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_tile_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NETileKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_r_o_i_pooling_layer_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEROIPoolingLayerKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEBitwiseAndKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEBitwiseOrKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEBitwiseXorKernel</a>, <a class="el" href="classarm__compute_1_1_c_p_p_upsample_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">CPPUpsampleKernel</a>, and <a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml#a112b35dd205c62ea6ed1447ef226da82">NEBitwiseNotKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00057">57</a> of file <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;default implementation of legacy run() virtual member function invoked&quot;</span>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00070">ICPPKernel::run_nd()</a>, and <a class="el" href="_single_thread_scheduler_8cpp_source.xhtml#l00038">SingleThreadScheduler::schedule()</a>.</p>

</div>
</div>
<a id="a92fc66203d7affe26cbe70194a154895"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92fc66203d7affe26cbe70194a154895">&#9670;&nbsp;</a></span>run_nd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void run_nd </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>thread_locator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>legacy compatibility layer for implemantions which do not support thread_locator In these cases we simply narrow the interface down the legacy version </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. (Must be a region of the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a>) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Info about executing thread and CPU. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">thread_locator</td><td>Specifies "where" the current thread is in the multi-dimensional space </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1cpu_1_1kernel_1_1_cpu_gemm_assembly_wrapper_kernel.xhtml#a34da2929357bb6ca5d8ca7171cfbe49f">CpuGemmAssemblyWrapperKernel&lt; TypeInput, TypeOutput &gt;</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00070">70</a> of file <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(thread_locator);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6586f7a2dd64942f59b8c408643a0ea">run</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00057">ICPPKernel::run()</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

</div>
</div>
<a id="a6b8ef149ef3b6ca5e548473916f95cd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b8ef149ef3b6ca5e548473916f95cd6">&#9670;&nbsp;</a></span>run_op()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void run_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Execute the kernel on the passed window. </p>
<dl class="section warning"><dt>Warning</dt><dd>If <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b" title="Indicates whether or not the kernel is parallelisable.">is_parallelisable()</a> returns false then the passed window must be equal to <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a></dd></dl>
<dl class="section note"><dt>Note</dt><dd>The window has to be a region within the window returned by the <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a> method</dd>
<dd>
The width of the window has to be a multiple of <a class="el" href="_cl_im2_col_kernel_8cpp.xhtml#a4e45c1f5e4280813a78a77dda71d8799">num_elems_processed_per_iteration()</a>.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td>A vector containing the tensors to operate on. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Region on which to execute the kernel. (Must be a region of the window returned by <a class="el" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6" title="The maximum window the kernel can be executed on.">window()</a>) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Info about executing thread and CPU. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuComplexMulKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_output_stage_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpOffsetContributionOutputStageKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_b_reduction_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpMatrixBReductionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpOffsetContributionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_im2_col_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuIm2ColKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_strided_slice_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">NEStridedSliceKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuWinogradConv2dTransformOutputKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_mul_add_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuAddMulAddKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuMulKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_multiply_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmMatrixMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_transpose1x_w_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmTranspose1xWKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_scale_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuScaleKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int8_scale_by_fixed_point_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpQuantizeDownInt32ToInt8ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_uint8_scale_by_fixed_point_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpQuantizeDownInt32ToUint8ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_assembly_wrapper_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuDepthwiseConv2dAssemblyWrapperKernel</a>, <a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">NEFillBorderKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_depthwise_conv2d_native_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuDepthwiseConv2dNativeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_to_int16_scale_by_fixed_point_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpQuantizeDownInt32ToInt16ScaleByFixedPointKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv3d_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuDirectConv3dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_weights_reshape_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuWeightsReshapeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuAddKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_quantize_down_int32_scale_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpQuantizeDownInt32ScaleKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_assembly_wrapper_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuPool2dAssemblyWrapperKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuCastKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_col2_im_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuCol2ImKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_matrix_addition_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmMatrixAdditionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuActivationKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_output_stage_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuDirectConv2dOutputStageKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_max_unpooling_layer_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuMaxUnpoolingLayerKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuSubKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_direct_conv2d_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuDirectConv2dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_interleave4x4_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmInterleave4x4Kernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool3d_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuPool3dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_fully_connected_weights_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuConvertFullyConnectedWeightsKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuElementwiseUnaryKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_multiply_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpMatrixMultiplyKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_pool2d_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuPool2dKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_quantize_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuQuantizeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_matrix_a_reduction_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpMatrixAReductionKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_depth_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuConcatenateDepthKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_floor_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuFloorKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_softmax_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuSoftmaxKernel</a>, <a class="el" href="classarm__compute_1_1kernels_1_1_n_e_logical_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">NELogicalKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuWinogradConv2dTransformInputKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_height_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuConcatenateHeightKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_width_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuConcatenateWidthKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_concatenate_batch_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuConcatenateBatchKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_permute_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuPermuteKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_copy_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuCopyKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuReshapeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_quantized_signedness_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuConvertQuantizedSignednessKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_dequantize_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuDequantizeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuTransposeKernel</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_kernel.xhtml#a9a49ea7d42e38bd3b3cd14d220418bd8">CpuElementwiseKernel&lt; Derived &gt;</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_kernel.xhtml#a9a49ea7d42e38bd3b3cd14d220418bd8">CpuElementwiseKernel&lt; CpuComparisonKernel &gt;</a>, <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_kernel.xhtml#a9a49ea7d42e38bd3b3cd14d220418bd8">CpuElementwiseKernel&lt; CpuArithmeticKernel &gt;</a>, and <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_fill_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuFillKernel</a>.</p>

<p class="definition">Definition at line <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00088">88</a> of file <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tensors, <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_single_thread_scheduler_8cpp_source.xhtml#l00056">SingleThreadScheduler::schedule_op()</a>, and <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00057">OMPScheduler::schedule_op()</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="ad6dda2ca87714e265e1521607c2fa7d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6dda2ca87714e265e1521607c2fa7d0">&#9670;&nbsp;</a></span>default_mws</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t default_mws = 1</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00041">41</a> of file <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00329">CpuActivationKernel::get_mws()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00208">CpuReshapeKernel::get_mws()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00146">CpuSubKernel::get_mws()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00208">CpuAddKernel::get_mws()</a>, <a class="el" href="_n_e_pad_layer_kernel_8cpp_source.xhtml#l00282">NEPadLayerKernel::get_mws()</a>, <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00100">ICPPKernel::get_mws()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01668">CpuMulKernel::get_mws()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00349">CpuArithmeticKernel::get_mws()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00414">CpuIm2ColKernel::get_mws()</a>, <a class="el" href="_cpu_gemm_assembly_wrapper_kernel_8h_source.xhtml#l00125">CpuGemmAssemblyWrapperKernel&lt; TypeInput, TypeOutput &gt;::get_mws()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_wrapper_kernel_8cpp_source.xhtml#l00388">CpuDepthwiseConv2dAssemblyWrapperKernel::get_mws()</a>, and <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00400">CpuDivisionKernel::get_mws()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/CPP/<a class="el" href="_i_c_p_p_kernel_8h_source.xhtml">ICPPKernel.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml_ad6586f7a2dd64942f59b8c408643a0ea"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6586f7a2dd64942f59b8c408643a0ea">arm_compute::ICPPKernel::run</a></div><div class="ttdeci">virtual void run(const Window &amp;window, const ThreadInfo &amp;info)</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00057">ICPPKernel.h:57</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_p_p_kernel_xhtml_ad6dda2ca87714e265e1521607c2fa7d0"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_kernel.xhtml#ad6dda2ca87714e265e1521607c2fa7d0">arm_compute::ICPPKernel::default_mws</a></div><div class="ttdeci">static constexpr size_t default_mws</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_kernel_8h_source.xhtml#l00041">ICPPKernel.h:41</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:54:07 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
