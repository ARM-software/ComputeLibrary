<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/Utils.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('arm__compute_2graph_2_utils_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Utils.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="arm__compute_2graph_2_utils_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_GRAPH_UTILS_H</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_GRAPH_UTILS_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graph_2_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pass_manager_8h.xhtml">arm_compute/graph/PassManager.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>graph</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// Forward Declaration</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span>GraphContext;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">   37</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">is_utility_node</a>(<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml">INode</a> *node)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    std::set&lt;NodeType&gt; utility_node_types = {<a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">NodeType::PrintLayer</a>};</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> utility_node_types.find(node-&gt;<a class="code" href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">type</a>()) != utility_node_types.end();</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/** Returns the tensor descriptor of a given tensor</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @param[in] g   Graph that the tensor belongs to</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @param[in] tid Tensor ID</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * @return Tensor descriptor if tensor was found else empty descriptor</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">   50</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">TensorID</a> tid)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> = g.<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">tensor</a>(tid);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> != <span class="keyword">nullptr</span>) ? <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;desc() : <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}<span class="comment"></span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/** Sets an accessor on a given tensor</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @param[in] tensor   Tensor to set the accessor to</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * @param[in] accessor Accessor to set</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * @return True if accessor was set else false</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph.xhtml#a4ebedbbf720dd9a5bd14584f723b056e">   62</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a4ebedbbf720dd9a5bd14584f723b056e">set_tensor_accessor</a>(<a class="code" href="classarm__compute_1_1graph_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, std::unique_ptr&lt;ITensorAccessor&gt; accessor)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;set_accessor(std::move(accessor));</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}<span class="comment"></span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/** Checks if a specific target is supported</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * @param[in] target Target to check</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * @return True if target is support else false</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">is_target_supported</a>(<a class="code" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target);<span class="comment"></span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">/** Returns default target for execution</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * @note If an OpenCL backend exists then OpenCL is returned,</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> *       else if the CPU backend exists returns @ref Target::NEON as target.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> *       If no backends are registered an error is raised.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @return Default target</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<a class="code" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> <a class="code" href="namespacearm__compute_1_1graph.xhtml#addc5c907a850a8b4d5458bd14f50c6f7">get_default_target</a>();<span class="comment"></span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">/** Forces a single target to all graph constructs</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * @param[in] g      Graph to force target on</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> * @param[in] target Target to force</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#ac5712330ef2d40408efb4eae5665dc6e">force_target_to_graph</a>(Graph &amp;g, <a class="code" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target);<span class="comment"></span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">/** Creates a default @ref PassManager</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> * @param[in] target Target to create the pass manager for</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> * @param[in] cfg    Graph configuration meta-data</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> * @return A PassManager with default mutating passes</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;PassManager <a class="code" href="namespacearm__compute_1_1graph.xhtml#a0a2d08174e24bcb1dfdf9d8893cd9363">create_default_pass_manager</a>(<a class="code" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target, <span class="keyword">const</span> GraphConfig &amp;cfg);<span class="comment"></span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">/** Setups requested backend context if it exists, is supported and hasn&#39;t been initialized already.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> * @param[in,out] ctx    Graph Context.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> * @param[in]     target Target to setup the backend for.</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aaef0102f19fc08d670766506b1a0b66e">setup_requested_backend_context</a>(GraphContext &amp;ctx, <a class="code" href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">Target</a> target);<span class="comment"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/** Default releases the graph context if not done manually</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * @param[in,out] ctx Graph Context</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a9562c1c1399af2f10714a7d901e19311">release_default_graph_context</a>(GraphContext &amp;ctx);<span class="comment"></span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">/** Synchronize kernels execution on the backends. On GPU, this results in a blocking call waiting for all kernels to be completed. */</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">sync_backends</a>();<span class="comment"></span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/** Get size of a tensor&#39;s given dimension depending on its layout</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * @param[in] descriptor            Descriptor</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * @param[in] data_layout_dimension Tensor data layout dimension</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @return Size of requested dimension</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(<span class="keyword">const</span> TensorDescriptor &amp;descriptor, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> data_layout_dimension);<span class="comment"></span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/** Get index of a tensor&#39;s given dimension depending on its layout</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * @param[in] data_layout           Data layout of the tensor</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> * @param[in] data_layout_dimension Tensor data layout dimension</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> * @return Idx of given dimension</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(<a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a> data_layout_dimension);<span class="comment"></span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">/** Get the list of driving nodes of a given node</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> * @param[in] node Node to find the driving node of</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * @return A list with the driving node of a given node</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;std::vector&lt;NodeIdxPair&gt; <a class="code" href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">get_driving_nodes</a>(<span class="keyword">const</span> INode &amp;node);<span class="comment"></span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">/** Get the list of driver nodes of a given node</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> * @param[in] node Node to find the driver node of</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> * @return A list with the driver node of a given node</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;std::vector&lt;NodeIdxPair&gt; <a class="code" href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">get_driver_nodes</a>(<span class="keyword">const</span> INode &amp;node);<span class="comment"></span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">/** Configures tensor</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * @param[in, out] tensor Tensor to configure</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">configure_tensor</a>(<a class="code" href="classarm__compute_1_1_tensor.xhtml">Tensor</a> *<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;} <span class="comment">// namespace graph</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_UTILS_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a634230f98a5918f214e47d913c452d3b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a634230f98a5918f214e47d913c452d3b">arm_compute::graph::get_driving_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driving_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driving nodes of a given node.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00180">Utils.cpp:180</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ac5712330ef2d40408efb4eae5665dc6e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ac5712330ef2d40408efb4eae5665dc6e">arm_compute::graph::force_target_to_graph</a></div><div class="ttdeci">void force_target_to_graph(Graph &amp;g, Target target)</div><div class="ttdoc">Forces a single target to all graph constructs.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00053">Utils.cpp:53</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:110</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00121">CoreTypes.h:121</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aaef0102f19fc08d670766506b1a0b66e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aaef0102f19fc08d670766506b1a0b66e">arm_compute::graph::setup_requested_backend_context</a></div><div class="ttdeci">void setup_requested_backend_context(GraphContext &amp;ctx, Target target)</div><div class="ttdoc">Setups requested backend context if it exists, is supported and hasn't been initialized already.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00131">Utils.cpp:131</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_tensor.xhtml">arm_compute::graph::Tensor</a></div><div class="ttdoc">Tensor object.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_tensor_8h_source.xhtml#l00040">Tensor.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a75f8e464c6b01b0a4771de38669ee9a1"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">arm_compute::graph::get_dimension_size</a></div><div class="ttdeci">size_t get_dimension_size(const TensorDescriptor &amp;descriptor, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get size of a tensor's given dimension depending on its layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00143">Utils.cpp:143</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_adaf571380533c75338da47ba3a68c199"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#adaf571380533c75338da47ba3a68c199">arm_compute::graph::is_utility_node</a></div><div class="ttdeci">bool is_utility_node(INode *node)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00037">Utils.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ad17fa352dabb4482cb996a9f8f7f3ba3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ad17fa352dabb4482cb996a9f8f7f3ba3">arm_compute::graph::get_driver_nodes</a></div><div class="ttdeci">std::vector&lt; NodeIdxPair &gt; get_driver_nodes(const INode &amp;node)</div><div class="ttdoc">Get the list of driver nodes of a given node.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00200">Utils.cpp:200</a></div></div>
<div class="ttc" id="a_pass_manager_8h_xhtml"><div class="ttname"><a href="_pass_manager_8h.xhtml">PassManager.h</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml">arm_compute::graph::INode</a></div><div class="ttdoc">Node interface.</div><div class="ttdef"><b>Definition:</b> <a href="_i_node_8h_source.xhtml#l00046">INode.h:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a6fd498c55b126dc3f078d38e8528effb"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a6fd498c55b126dc3f078d38e8528effb">arm_compute::graph::is_target_supported</a></div><div class="ttdeci">bool is_target_supported(Target target)</div><div class="ttdoc">Checks if a specific target is supported.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00034">Utils.cpp:34</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a36fd3cfa2e1d33e59e1d3e95664d8b9c"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a36fd3cfa2e1d33e59e1d3e95664d8b9c">arm_compute::graph::configure_tensor</a></div><div class="ttdeci">void configure_tensor(Tensor *tensor)</div><div class="ttdoc">Configures tensor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00220">Utils.cpp:220</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_i_node_xhtml_a6b2d83e561886647467f86c20ce39bec"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_node.xhtml#a6b2d83e561886647467f86c20ce39bec">arm_compute::graph::INode::type</a></div><div class="ttdeci">virtual NodeType type() const =0</div><div class="ttdoc">Returns node's type.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor's given dimension depending on its layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00150">Utils.cpp:150</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a0a2d08174e24bcb1dfdf9d8893cd9363"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a0a2d08174e24bcb1dfdf9d8893cd9363">arm_compute::graph::create_default_pass_manager</a></div><div class="ttdeci">PassManager create_default_pass_manager(Target target, const GraphConfig &amp;cfg)</div><div class="ttdoc">Creates a default PassManager.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00074">Utils.cpp:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_addc5c907a850a8b4d5458bd14f50c6f7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#addc5c907a850a8b4d5458bd14f50c6f7">arm_compute::graph::get_default_target</a></div><div class="ttdeci">Target get_default_target()</div><div class="ttdoc">Returns default target for execution.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00040">Utils.cpp:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml_a91bccd842a1caad3149523a05f150ee6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#a91bccd842a1caad3149523a05f150ee6">arm_compute::graph::Graph::tensor</a></div><div class="ttdeci">const Tensor * tensor(TensorID id) const</div><div class="ttdoc">Get tensor object given its id.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00228">Graph.cpp:228</a></div></div>
<div class="ttc" id="astructarm__compute_1_1graph_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">arm_compute::graph::TensorDescriptor</a></div><div class="ttdoc">Tensor metadata class.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00038">TensorDescriptor.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a415d76e29ed6d61c9f71cc6f7cf3f656">arm_compute::graph::NodeType::PrintLayer</a></div><div class="ttdeci">@ PrintLayer</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ae8f18192b411ffc62fdd293f908b4c78"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ae8f18192b411ffc62fdd293f908b4c78">arm_compute::graph::sync_backends</a></div><div class="ttdeci">void sync_backends()</div><div class="ttdoc">Synchronize kernels execution on the backends.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00120">Utils.cpp:120</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ade2275ecfd6f344e3ec7086427863aa8"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">arm_compute::graph::get_tensor_descriptor</a></div><div class="ttdeci">TensorDescriptor get_tensor_descriptor(const Graph &amp;g, TensorID tid)</div><div class="ttdoc">Returns the tensor descriptor of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">Utils.h:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml">arm_compute::graph::Graph</a></div><div class="ttdoc">Graph class.</div><div class="ttdef"><b>Definition:</b> <a href="graph_2_graph_8h_source.xhtml#l00052">Graph.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a9562c1c1399af2f10714a7d901e19311"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a9562c1c1399af2f10714a7d901e19311">arm_compute::graph::release_default_graph_context</a></div><div class="ttdeci">void release_default_graph_context(GraphContext &amp;ctx)</div><div class="ttdoc">Default releases the graph context if not done manually.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00109">Utils.cpp:109</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml">arm_compute::Tensor</a></div><div class="ttdoc">Basic implementation of the tensor interface.</div><div class="ttdef"><b>Definition:</b> <a href="runtime_2_tensor_8h_source.xhtml#l00037">Tensor.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a31488d29805a596498c0234ae392d35d"><div class="ttname"><a href="namespacearm__compute.xhtml#a31488d29805a596498c0234ae392d35d">arm_compute::Target</a></div><div class="ttdeci">Target</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="agraph_2_graph_8h_xhtml"><div class="ttname"><a href="graph_2_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a615af95e19b5d9f74d2760183566a9a3"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a615af95e19b5d9f74d2760183566a9a3">arm_compute::graph::TensorID</a></div><div class="ttdeci">unsigned int TensorID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00071">Types.h:71</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a4ebedbbf720dd9a5bd14584f723b056e"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a4ebedbbf720dd9a5bd14584f723b056e">arm_compute::graph::set_tensor_accessor</a></div><div class="ttdeci">Status set_tensor_accessor(Tensor *tensor, std::unique_ptr&lt; ITensorAccessor &gt; accessor)</div><div class="ttdoc">Sets an accessor on a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00062">Utils.h:62</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="arm__compute_2graph_2_utils_8h.xhtml">Utils.h</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:53:52 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
