<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/SVEMath.inl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_s_v_e_math_8inl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SVEMath.inl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_s_v_e_math_8inl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2020-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef ACL_SRC_CORE_NEON_SVEMATH_INL</span></div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="_s_v_e_math_8inl.xhtml#a7925d0b54fe60bcdbb368ff47f4d09cd">   26</a></span>&#160;<span class="preprocessor">#define ACL_SRC_CORE_NEON_SVEMATH_INL</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#if defined(__ARM_FEATURE_SVE) &amp;&amp; defined(ARM_COMPUTE_ENABLE_SVE)</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#ifndef M_PI</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#define M_PI (3.14159265358979323846)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#endif // M_PI</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">inline</span> svfloat32_t svtaylor_poly_f32_z(svbool_t    pg,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                       svfloat32_t x,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                                       svfloat32_t coeff_1,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                       svfloat32_t coeff_2,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                       svfloat32_t coeff_3,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                       svfloat32_t coeff_4,</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                       svfloat32_t coeff_5,</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                       svfloat32_t coeff_6,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                       svfloat32_t coeff_7,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                       svfloat32_t coeff_8)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> A   = svmla_f32_z(pg, coeff_1, coeff_5, x);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> B   = svmla_f32_z(pg, coeff_3, coeff_7, x);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> C   = svmla_f32_z(pg, coeff_2, coeff_6, x);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> D   = svmla_f32_z(pg, coeff_4, coeff_8, x);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> x2  = svmul_f32_z(pg, x, x);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> x4  = svmul_f32_z(pg, x2, x2);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> res = svmla_f32_z(pg, svmla_f32_z(pg, A, B, x2), svmla_f32_z(pg, C, D, x2), x4);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">inline</span> svfloat16_t svtaylor_poly_f16_z(svbool_t    pg,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                                       svfloat16_t x,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                       svfloat16_t coeff_1,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                       svfloat16_t coeff_2,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                       svfloat16_t coeff_3,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                       svfloat16_t coeff_4,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                       svfloat16_t coeff_5,</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                                       svfloat16_t coeff_6,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                       svfloat16_t coeff_7,</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                       svfloat16_t coeff_8)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> A   = svmla_f16_z(pg, coeff_1, coeff_5, x);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> B   = svmla_f16_z(pg, coeff_3, coeff_7, x);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> C   = svmla_f16_z(pg, coeff_2, coeff_6, x);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> D   = svmla_f16_z(pg, coeff_4, coeff_8, x);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> x2  = svmul_f16_z(pg, x, x);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> x4  = svmul_f16_z(pg, x2, x2);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> res = svmla_f16_z(pg, svmla_f16_z(pg, A, B, x2), svmla_f16_z(pg, C, D, x2), x4);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">inline</span> svfloat16_t svinv_f16_z(svbool_t pg, svfloat16_t x)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">auto</span> recip = svrecpe_f16(x);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    recip      = svmul_f16_z(pg, svrecps_f16(x, recip), recip);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    recip      = svmul_f16_z(pg, svrecps_f16(x, recip), recip);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> recip;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">inline</span> svfloat32_t svinv_f32_z(svbool_t pg, svfloat32_t x)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">auto</span> recip = svrecpe_f32(x);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    recip      = svmul_f32_z(pg, svrecps_f32(x, recip), recip);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    recip      = svmul_f32_z(pg, svrecps_f32(x, recip), recip);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> recip;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> uint32_t svexp_f32_coeff[] = {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    0x3f7ffff6, <span class="comment">// x^1: 0x1.ffffecp-1f</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    0x3efffedb, <span class="comment">// x^2: 0x1.fffdb6p-2f</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    0x3e2aaf33, <span class="comment">// x^3: 0x1.555e66p-3f</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    0x3d2b9f17, <span class="comment">// x^4: 0x1.573e2ep-5f</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    0x3c072010, <span class="comment">// x^5: 0x1.0e4020p-7f</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;};</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">inline</span> svfloat32_t svexp_f32_z(svbool_t pg, svfloat32_t x)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c1 = svreinterpret_f32_u32(svdup_n_u32(svexp_f32_coeff[0]));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c2 = svreinterpret_f32_u32(svdup_n_u32(svexp_f32_coeff[1]));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c3 = svreinterpret_f32_u32(svdup_n_u32(svexp_f32_coeff[2]));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c4 = svreinterpret_f32_u32(svdup_n_u32(svexp_f32_coeff[3]));</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c5 = svreinterpret_f32_u32(svdup_n_u32(svexp_f32_coeff[4]));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> shift   = svreinterpret_f32_u32(svdup_n_u32(0x4b00007f)); <span class="comment">// 2^23 + 127 = 0x1.0000fep23f</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> inv_ln2 = svreinterpret_f32_u32(svdup_n_u32(0x3fb8aa3b)); <span class="comment">// 1 / ln(2) = 0x1.715476p+0f</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> neg_ln2_hi =</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        svreinterpret_f32_u32(svdup_n_u32(0xbf317200)); <span class="comment">// -ln(2) from bits  -1 to -19: -0x1.62e400p-1f</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> neg_ln2_lo =</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        svreinterpret_f32_u32(svdup_n_u32(0xb5bfbe8e)); <span class="comment">// -ln(2) from bits -20 to -42: -0x1.7f7d1cp-20f</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> inf       = svdup_n_f32(std::numeric_limits&lt;float&gt;::infinity());</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> max_input = svdup_n_f32(88.37f); <span class="comment">// Approximately ln(2^127.5)</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> zero      = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> min_input = svdup_n_f32(-86.64f); <span class="comment">// Approximately ln(2^-125)</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Range reduction:</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">//   e^x = 2^n * e^r</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// where:</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">//   n = floor(x / ln(2))</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">//   r = x - n * ln(2)</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="comment">// By adding x / ln(2) with 2^23 + 127 (shift):</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">//   * As FP32 fraction part only has 23-bits, the addition of 2^23 + 127 forces decimal part</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">//     of x / ln(2) out of the result. The integer part of x / ln(2) (i.e. n) + 127 will occupy</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">//     the whole fraction part of z in FP32 format.</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">//     Subtracting 2^23 + 127 (shift) from z will result in the integer part of x / ln(2)</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">//     (i.e. n) because the decimal part has been pushed out and lost.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">//   * The addition of 127 makes the FP32 fraction part of z ready to be used as the exponent</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">//     in FP32 format. Left shifting z by 23 bits will result in 2^n.</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> z     = svmla_f32_z(pg, shift, x, inv_ln2);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> n     = svsub_f32_z(pg, z, shift);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = svreinterpret_f32_u32(svlsl_n_u32_z(pg, svreinterpret_u32_f32(z), 23)); <span class="comment">// 2^n</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// The calculation of n * ln(2) is done using 2 steps to achieve accuracy beyond FP32.</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="comment">// This outperforms longer Taylor series (3-4 tabs) both in term of accuracy and performance.</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> r_hi = svmla_f32_z(pg, x, n, neg_ln2_hi);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> r    = svmla_f32_z(pg, r_hi, n, neg_ln2_lo);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Compute the truncated Taylor series of e^r.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">//   poly = scale * (1 + c1 * r + c2 * r^2 + c3 * r^3 + c4 * r^4 + c5 * r^5)</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> r2 = svmul_f32_z(pg, r, r);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p1     = svmul_f32_z(pg, c1, r);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p23    = svmla_f32_z(pg, c2, c3, r);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p45    = svmla_f32_z(pg, c4, c5, r);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p2345  = svmla_f32_z(pg, p23, p45, r2);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> p12345 = svmla_f32_z(pg, p1, p2345, r2);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">auto</span> poly = svmla_f32_z(pg, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, p12345, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="comment">// Handle underflow and overflow.</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    poly = svsel_f32(svcmplt_f32(pg, x, min_input), zero, poly);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    poly = svsel_f32(svcmpgt_f32(pg, x, max_input), inf, poly);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> poly;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">inline</span> svfloat16_t svexp_f16_z(svbool_t pg, svfloat16_t x)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">auto</span> bottom = svcvt_f32_z(pg, x);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">auto</span> pg_top = svptrue_b16();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">auto</span> top    = svcvt_f32_z(pg_top, svreinterpret_f16(svrevh_z(svptrue_b16(), svreinterpret_u32(x))));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    bottom = svexp_f32_z(pg, bottom);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    top    = svexp_f32_z(pg_top, top);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> svtrn1(svcvt_f16_z(pg, bottom), svcvt_f16_z(pg_top, top));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">inline</span> svfloat16_t svexp_f16_z_sve2(svbool_t pg, svfloat16_t x)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">auto</span> bottom = svcvt_f32_z(pg, x);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">auto</span> top    = svcvtlt_f32_x(pg, x);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> pg_top = pg;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    bottom = svexp_f32_z(pg, bottom);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    top    = svexp_f32_z(pg_top, top);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> svcvtnt_f16_m(svcvt_f16_z(pg, bottom), pg_top, top);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">inline</span> svfloat32_t svtanh_f32_z(svbool_t pg, svfloat32_t val)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> svfloat32_t CONST_1        = svdup_n_f32(1.f);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">const</span> svfloat32_t CONST_2        = svdup_n_f32(2.f);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> svfloat32_t CONST_MIN_TANH = svdup_n_f32(-10.f);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> svfloat32_t CONST_MAX_TANH = svdup_n_f32(10.f);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    svfloat32_t x     = svmin_f32_z(pg, svmax_f32_z(pg, val, CONST_MIN_TANH), CONST_MAX_TANH);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    svfloat32_t exp2x = svexp_f32_z(pg, svmul_f32_z(pg, CONST_2, x));</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    svfloat32_t num   = svsub_f32_z(pg, exp2x, CONST_1);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    svfloat32_t den   = svadd_f32_z(pg, exp2x, CONST_1);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    svfloat32_t tanh  = svdiv_f32_z(pg, num, den);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> tanh;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">inline</span> svfloat16_t svtanh_f16_z(svbool_t pg, svfloat16_t val)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> svfloat16_t CONST_1        = svdup_n_f16(1.f);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> svfloat16_t CONST_2        = svdup_n_f16(2.f);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> svfloat16_t CONST_MIN_TANH = svdup_n_f16(-10.f);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> svfloat16_t CONST_MAX_TANH = svdup_n_f16(10.f);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> svfloat16_t x     = svmin_f16_z(pg, svmax_f16_z(pg, val, CONST_MIN_TANH), CONST_MAX_TANH);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> svfloat16_t exp2x = svexp_f16_z(pg, svmul_f16_z(pg, CONST_2, x));</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> svfloat16_t num   = svsub_f16_z(pg, exp2x, CONST_1);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> svfloat16_t den   = svadd_f16_z(pg, exp2x, CONST_1);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">const</span> svfloat16_t tanh  = svdiv_f16_z(pg, num, den);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> tanh;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">inline</span> svfloat32_t svlog_f32_z(svbool_t pg, svfloat32_t x)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">    /** Logarithm polynomial coefficients */</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_1 = svdup_n_f32(-2.29561495781f);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_2 = svdup_n_f32(-2.47071170807f);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_3 = svdup_n_f32(-5.68692588806f);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_4 = svdup_n_f32(-0.165253549814f);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_5 = svdup_n_f32(5.17591238022f);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_6 = svdup_n_f32(0.844007015228f);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_7 = svdup_n_f32(4.58445882797f);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">const</span> svfloat32_t log_tab_8 = svdup_n_f32(0.0141278216615f);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> CONST_127 = svdup_n_s32(127);           <span class="comment">// 127</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> CONST_LN2 = svdup_n_f32(0.6931471805f); <span class="comment">// ln(2)</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="comment">// Extract exponent</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">auto</span> m   = svsub_s32_z(pg, svasr_n_s32_z(pg, svreinterpret_s32_f32(x), 23), CONST_127);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">auto</span> val = svreinterpret_f32_s32(svsub_s32_z(pg, svreinterpret_s32_f32(x), svlsl_n_s32_z(pg, m, 23)));</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Polynomial Approximation</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">auto</span> poly = svtaylor_poly_f32_z(pg, val, log_tab_1, log_tab_2, log_tab_3, log_tab_4, log_tab_5, log_tab_6,</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                    log_tab_7, log_tab_8);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Reconstruct</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    poly = svmla_f32_z(pg, poly, svcvt_f32_s32_z(pg, m), CONST_LN2);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">return</span> poly;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">inline</span> svfloat16_t svlog_f16_z(svbool_t pg, svfloat16_t x)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">auto</span> bottom = svcvt_f32_z(pg, x);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">auto</span> pg_top = svptrue_b16();</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">auto</span> top    = svcvt_f32_z(pg_top, svreinterpret_f16(svrevh_z(svptrue_b16(), svreinterpret_u32(x))));</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    bottom = svlog_f32_z(pg, bottom);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    top    = svlog_f32_z(pg_top, top);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">return</span> svtrn1(svcvt_f16_z(pg, bottom), svcvt_f16_z(pg_top, top));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">inline</span> svfloat16_t svlog_f16_z_sve2(svbool_t pg, svfloat16_t x)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">auto</span> bottom = svcvt_f32_z(pg, x);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">auto</span> top    = svcvtlt_f32_x(pg, x);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">auto</span> pg_top = pg;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    bottom = svlog_f32_z(pg, bottom);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    top    = svlog_f32_z(pg_top, top);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span> svcvtnt_f16_m(svcvt_f16_z(pg, bottom), pg_top, top);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keyword">inline</span> svfloat32_t svsin_f32_z(svbool_t pg, svfloat32_t val)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;{</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">using</span> ScalarType = float;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">using</span> IntType    = uint32_t;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">te_sin_coeff2</a> = 0.166666666666f; <span class="comment">// 1/(2*3)</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">te_sin_coeff3</a> = 0.05f;           <span class="comment">// 1/(4*5)</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">te_sin_coeff4</a> = 0.023809523810f; <span class="comment">// 1/(6*7)</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    constexpr <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">te_sin_coeff5</a> = 0.013888888889f; <span class="comment">// 1/(8*9)</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pi_v   = wrapper::svdup_n(ScalarType(<a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a>));</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pio2_v = wrapper::svdup_n(ScalarType(<a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a> / 2));</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> ipi_v  = wrapper::svdup_n(ScalarType(1 / <a class="code" href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a>));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="comment">//Find positive or negative</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> c_v    = svabs_z(pg, wrapper::svcvt_z&lt;int32_t&gt;(pg, svmul_z(pg, val, ipi_v)));</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> sign_v = svcmple(pg, val, wrapper::svdup_n(ScalarType(0)));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> odd_v  = svcmpne(pg, svand_z(pg, wrapper::svreinterpret&lt;IntType&gt;(c_v), wrapper::svdup_n(IntType(1))),</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                wrapper::svdup_n(IntType(0)));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">auto</span> neg_v = sveor_z(pg, odd_v, sign_v);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">//Modulus a - (n * int(a*(1/n)))</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keyword">auto</span>       ma    = svsub_z(pg, svabs_z(pg, val), svmul_z(pg, pi_v, wrapper::svcvt_z&lt;ScalarType&gt;(pg, c_v)));</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> reb_v = svcmpge(pg, ma, pio2_v);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">//Rebase a between 0 and pi/2</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    ma = svsel(reb_v, svsub_z(pg, pi_v, ma), ma);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">//Taylor series</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> ma2 = svmul_z(pg, ma, ma);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">//2nd elem: x^3 / 3!</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">auto</span> elem = svmul_z(pg, svmul_z(pg, ma, ma2), wrapper::svdup_n(ScalarType(<a class="code" href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">te_sin_coeff2</a>)));</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">auto</span> res  = svsub_z(pg, ma, elem);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">//3rd elem: x^5 / 5!</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    elem = svmul_z(pg, svmul_z(pg, elem, ma2), wrapper::svdup_n(ScalarType(<a class="code" href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">te_sin_coeff3</a>)));</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    res  = svadd_z(pg, res, elem);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">//4th elem: x^7 / 7!float32x2_t vsin_f32(float32x2_t val)</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    elem = svmul_z(pg, svmul_z(pg, elem, ma2), wrapper::svdup_n(ScalarType(<a class="code" href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">te_sin_coeff4</a>)));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    res  = svsub_z(pg, res, elem);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="comment">//5th elem: x^9 / 9!</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    elem = svmul_z(pg, svmul_z(pg, elem, ma2), wrapper::svdup_n(ScalarType(<a class="code" href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">te_sin_coeff5</a>)));</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    res  = svadd_z(pg, res, elem);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="comment">//Change of sign</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    res = svneg_m(res, neg_v, res);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keyword">inline</span> svfloat16_t svsin_f16_z(svbool_t pg, svfloat16_t val)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">auto</span> bottom = svcvt_f32_z(pg, val);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">auto</span> pg_top = svptrue_b16();</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">auto</span> top    = svcvt_f32_z(pg_top, svreinterpret_f16(svrevh_z(svptrue_b16(), svreinterpret_u32(val))));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    bottom = svsin_f32_z(pg, bottom);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    top    = svsin_f32_z(pg_top, top);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keywordflow">return</span> svtrn1(svcvt_f16_z(pg, bottom), svcvt_f16_z(pg_top, top));</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keyword">inline</span> svfloat16_t svsin_f16_z_sve2(svbool_t pg, svfloat16_t val)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;{</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">auto</span> bottom = svcvt_f32_z(pg, val);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">auto</span> top    = svcvtlt_f32_x(pg, val);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">auto</span> pg_top = pg;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    bottom = svsin_f32_z(pg, bottom);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    top    = svsin_f32_z(pg_top, top);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> svcvtnt_f16_m(svcvt_f16_z(pg, bottom), pg_top, top);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;}</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">inline</span> svfloat32_t svpow_f32_z(svbool_t pg, svfloat32_t a, svfloat32_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;{</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">return</span> svexp_f32_z(pg, svmul_z(pg, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, svlog_f32_z(pg, a)));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;}</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="keyword">inline</span> svfloat16_t svpow_f16_z(svbool_t pg, svfloat16_t a, svfloat16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keyword">auto</span> a_bottom = svcvt_f32_z(pg, a);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keyword">auto</span> b_bottom = svcvt_f32_z(pg, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keyword">auto</span> pg_top = svptrue_b16();</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keyword">auto</span> a_top  = svcvt_f32_z(pg_top, svreinterpret_f16(svrevh_z(svptrue_b16(), svreinterpret_u32(a))));</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">auto</span> b_top  = svcvt_f32_z(pg_top, svreinterpret_f16(svrevh_z(svptrue_b16(), svreinterpret_u32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))));</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keyword">auto</span> res_bottom = svpow_f32_z(pg, a_bottom, b_bottom);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">auto</span> res_top    = svpow_f32_z(pg_top, a_top, b_top);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">return</span> svtrn1(svcvt_f16_z(pg, res_bottom), svcvt_f16_z(pg_top, res_top));</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="preprocessor">#ifdef ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="keyword">inline</span> svfloat16_t svpow_f16_z_sve2(svbool_t pg, svfloat16_t a, svfloat16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keyword">auto</span> a_bottom = svcvt_f32_z(pg, a);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">auto</span> b_bottom = svcvt_f32_z(pg, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">auto</span> pg_top = pg;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">auto</span> a_top  = svcvtlt_f32_x(pg, a);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">auto</span> b_top  = svcvtlt_f32_x(pg, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160; </div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keyword">auto</span> res_bottom = svpow_f32_z(pg, a_bottom, b_bottom);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">auto</span> res_top    = svpow_f32_z(pg_top, a_top, b_top);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">return</span> svcvtnt_f16_m(svcvt_f16_z(pg, res_bottom), pg_top, res_top);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;}</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">#endif // ARM_COMPUTE_ENABLE_SVE2</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_ENABLE_SVE2)</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keyword">inline</span> svuint8_t convert_float_to_int&lt;svuint8_t&gt;(<span class="keyword">const</span> svfloat32_t &amp;in_0,</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                                 <span class="keyword">const</span> svfloat32_t &amp;in_1,</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                                 <span class="keyword">const</span> svfloat32_t &amp;in_2,</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                                                 <span class="keyword">const</span> svfloat32_t &amp;in_3)</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;{</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    svuint8_t  out;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = svptrue_b32();</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">auto</span>       tmp_0       = svcvt_u32_f32_z(all_true_pg, in_0);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">auto</span>       tmp_1       = svcvt_u32_f32_z(all_true_pg, in_1);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keyword">auto</span>       tmp_2       = svcvt_u32_f32_z(all_true_pg, in_2);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">auto</span>       tmp_3       = svcvt_u32_f32_z(all_true_pg, in_3);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">auto</span> tmp_16_0 = svqxtnt_u32(svqxtnb_u32(tmp_0), tmp_1);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keyword">auto</span> tmp_16_1 = svqxtnt_u32(svqxtnb_u32(tmp_2), tmp_3);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_0 = svuzp1(tmp_16_0, tmp_16_0);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_1 = svuzp2(tmp_16_0, tmp_16_0);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_2 = svuzp1(tmp_16_1, tmp_16_1);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_3 = svuzp2(tmp_16_1, tmp_16_1);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160; </div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">auto</span> pg = svwhilelt_b16_s32(0, svcnth() / 2);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    tmp_16_0 = svsplice(pg, tmp_16_uzp_0, tmp_16_uzp_1);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    tmp_16_1 = svsplice(pg, tmp_16_uzp_2, tmp_16_uzp_3);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    out = svqxtnt_u16(svqxtnb_u16(tmp_16_0), tmp_16_1);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; </div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keyword">auto</span> out_uzp_0 = svuzp1(out, out);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">auto</span> out_uzp_1 = svuzp2(out, out);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    pg  = svwhilelt_b8_s32(0, svcntb() / 2);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    out = svsplice(pg, out_uzp_0, out_uzp_1);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keyword">inline</span> svint8_t convert_float_to_int&lt;svint8_t&gt;(<span class="keyword">const</span> svfloat32_t &amp;in_0,</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                               <span class="keyword">const</span> svfloat32_t &amp;in_1,</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                                               <span class="keyword">const</span> svfloat32_t &amp;in_2,</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                                               <span class="keyword">const</span> svfloat32_t &amp;in_3)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;{</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    svint8_t   out;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = svptrue_b32();</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">auto</span>       tmp_0       = svcvt_s32_f32_z(all_true_pg, in_0);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">auto</span>       tmp_1       = svcvt_s32_f32_z(all_true_pg, in_1);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keyword">auto</span>       tmp_2       = svcvt_s32_f32_z(all_true_pg, in_2);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keyword">auto</span>       tmp_3       = svcvt_s32_f32_z(all_true_pg, in_3);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keyword">auto</span> tmp_16_0 = svqxtnt_s32(svqxtnb_s32(tmp_0), tmp_1);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">auto</span> tmp_16_1 = svqxtnt_s32(svqxtnb_s32(tmp_2), tmp_3);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160; </div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_0 = svuzp1(tmp_16_0, tmp_16_0);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_1 = svuzp2(tmp_16_0, tmp_16_0);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_2 = svuzp1(tmp_16_1, tmp_16_1);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keyword">auto</span> tmp_16_uzp_3 = svuzp2(tmp_16_1, tmp_16_1);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keyword">auto</span> pg = svwhilelt_b16_s32(0, svcnth() / 2);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    tmp_16_0 = svsplice(pg, tmp_16_uzp_0, tmp_16_uzp_1);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    tmp_16_1 = svsplice(pg, tmp_16_uzp_2, tmp_16_uzp_3);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    out = svqxtnt_s16(svqxtnb_s16(tmp_16_0), tmp_16_1);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keyword">auto</span> out_uzp_0 = svuzp1(out, out);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <span class="keyword">auto</span> out_uzp_1 = svuzp2(out, out);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160; </div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    pg  = svwhilelt_b8_s32(0, svcntb() / 2);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    out = svsplice(pg, out_uzp_0, out_uzp_1);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160; </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_ENABLE_SVE2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160; </div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_ENABLE_SVE) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor">#endif // ACL_SRC_CORE_NEON_SVEMATH_INL</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_toolchain_support_8h_xhtml_ae71449b1cc6e6250b91f539153a7a0d3"><div class="ttname"><a href="_toolchain_support_8h.xhtml#ae71449b1cc6e6250b91f539153a7a0d3">M_PI</a></div><div class="ttdeci">#define M_PI</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00040">ToolchainSupport.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a542bbd5e844a0a494e3e4078a433d44b"><div class="ttname"><a href="namespacearm__compute.xhtml#a542bbd5e844a0a494e3e4078a433d44b">arm_compute::te_sin_coeff4</a></div><div class="ttdeci">constexpr float te_sin_coeff4</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00048">NEMath.inl:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a9c1bcf45a03708a37132c1e2df5cd2b0"><div class="ttname"><a href="namespacearm__compute.xhtml#a9c1bcf45a03708a37132c1e2df5cd2b0">arm_compute::te_sin_coeff3</a></div><div class="ttdeci">constexpr float te_sin_coeff3</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00047">NEMath.inl:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ae3e74f28452dea05869826c30b95f54b"><div class="ttname"><a href="namespacearm__compute.xhtml#ae3e74f28452dea05869826c30b95f54b">arm_compute::te_sin_coeff2</a></div><div class="ttdeci">constexpr float te_sin_coeff2</div><div class="ttdoc">Sin polynomial coefficients.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00046">NEMath.inl:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_afe0353e9228b8be37bcdb4a1770f44e3"><div class="ttname"><a href="namespacearm__compute.xhtml#afe0353e9228b8be37bcdb4a1770f44e3">arm_compute::te_sin_coeff5</a></div><div class="ttdeci">constexpr float te_sin_coeff5</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00049">NEMath.inl:49</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="_s_v_e_math_8inl.xhtml">SVEMath.inl</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:53:56 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
