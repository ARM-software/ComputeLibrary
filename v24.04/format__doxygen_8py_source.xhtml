<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: scripts/format_doxygen.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('format__doxygen_8py_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">format_doxygen.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="format__doxygen_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml">    1</a></span>&#160;<span class="comment">#!/usr/bin/env python3</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="keyword">import</span> os.path</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">import</span> re</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="keyword">import</span> sys</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; </div>
<div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#a0f82b9801e9e1efd94c9c7cb2f3f955b">    6</a></span>&#160;<span class="keyword">def </span><a class="code" href="namespaceformat__doxygen.xhtml#a0f82b9801e9e1efd94c9c7cb2f3f955b">process_comment</a>(fd, comment, first_param, last_param):</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    <span class="keywordflow">if</span> first_param &lt; 0:</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;        <span class="comment"># Nothing to do: just copy the comment</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;        fd.write(<span class="stringliteral">&quot;&quot;</span>.<a class="code" href="namespacearm__compute.xhtml#a5277640d2fd61696201c28a01c3de703">join</a>(comment))</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;        params = list()</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;        <span class="comment"># Measure the indentation of the first param and use that to create an empty comment line string:</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        m = re.match(<span class="stringliteral">r&quot; */&quot;</span>, comment[0])</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> m:</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;            <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;{}: Not a comment ? &#39;{}&#39;&quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>(path,comment[first_param]))</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        line_prefix = <span class="stringliteral">&quot; &quot;</span> * len(m.group(0)) + <span class="stringliteral">&quot;*&quot;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        empty_line =  line_prefix +<span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        fd.write(comment[0])</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="comment"># Copy the non param lines with the correct indentation:</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="keywordflow">for</span> comment_line <span class="keywordflow">in</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>(1,first_param):</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;            line = comment[comment_line]</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            m = re.match(<span class="stringliteral">&quot; *\*(.*)&quot;</span>, line)</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> m:</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;{}:{}: Not a comment line ? &quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>(path, n_line - len(comment) + comment_line + 1))</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            fd.write(line_prefix+ m.group(1)+<span class="stringliteral">&quot;\n&quot;</span>)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="comment"># For each param split the line into 3 columns: param, param_name, description</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">for</span> param <span class="keywordflow">in</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>(first_param, last_param):</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            m = re.match(<span class="stringliteral">r&quot;[^@]+(@param\[[^\]]+\]) +(\S+) +(.+)&quot;</span>, comment[param])</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordflow">if</span> m:</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                params.append( (<span class="stringliteral">&quot; &quot;</span>+m.group(1), m.group(2), m.group(3)) )</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="comment"># If it&#39;s not a match then it must be a multi-line param description:</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                m = re.match(<span class="stringliteral">&quot; *\* +(.*)&quot;</span>, comment[param])</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> m:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                    <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;{}:{}: Not a comment line ? &quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>(path, n_line - len(comment) + param + 1))</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                params.append( (<span class="stringliteral">&quot;&quot;</span>, <span class="stringliteral">&quot;&quot;</span>, m.group(1)) )</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="comment"># Now that we&#39;ve got a list of params, find what is the longest string for each column:</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        max_len = [0, 0]</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">for</span> p <span class="keywordflow">in</span> params:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">for</span> l <span class="keywordflow">in</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>(len(max_len)):</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                max_len[l] = max(max_len[l], len(p[l]))</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="comment"># Insert an empty line if needed before the first param to make it easier to read:</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        m = re.match(<span class="stringliteral">r&quot; *\* *$&quot;</span>, comment[first_param - 1])</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> m:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="comment"># insert empty line</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            fd.write(empty_line)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment"># Write out the formatted list of params:</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">for</span> p <span class="keywordflow">in</span> params:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            fd.write(<span class="stringliteral">&quot;{}{}{} {}{} {}\n&quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>( line_prefix,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                    p[0], <span class="stringliteral">&quot; &quot;</span> * (max_len[0] - len(p[0])),</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                    p[1], <span class="stringliteral">&quot; &quot;</span> * (max_len[1] - len(p[1])),</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    p[2]))</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="comment"># If the next line after the list of params is a command (@return, @note, @warning, etc), insert an empty line to separate it from the list of params</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">if</span> last_param &lt; len(comment) - 1:</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">if</span> re.match(<span class="stringliteral">r&quot; *\* *@\w+&quot;</span>, comment[last_param]):</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="comment"># insert empty line</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                fd.write(empty_line)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment"># Copy the remaining of the comment with the correct indentation:</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">for</span> comment_line <span class="keywordflow">in</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">range</a>(last_param,len(comment)):</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            line = comment[comment_line]</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            m = re.match(<span class="stringliteral">&quot; *\*(.*)&quot;</span>, line)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> m:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;{}:{}: Not a comment line ? &quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>(path, n_line - len(comment) + comment_line + 1))</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            fd.write(line_prefix+ m.group(1)+<span class="stringliteral">&quot;\n&quot;</span>)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&quot;__main__&quot;</span>:</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#aaa3cab7a9bd1427b93fab510347b21ef">   82</a></span>&#160;    n_file=0</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> len(sys.argv) == 2 <span class="keywordflow">and</span> sys.argv[1] == <span class="stringliteral">&#39;--all&#39;</span>:</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#a33b7040110dd4515d69b9d314e372439">   85</a></span>&#160;        paths = []</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">for</span> top_level <span class="keywordflow">in</span> [<span class="stringliteral">&quot;./arm_compute&quot;</span>, <span class="stringliteral">&quot;./src&quot;</span>, <span class="stringliteral">&quot;./examples&quot;</span>, <span class="stringliteral">&quot;./tests&quot;</span>, <span class="stringliteral">&quot;./utils&quot;</span>, <span class="stringliteral">&quot;./framework&quot;</span>, <span class="stringliteral">&quot;./support&quot;</span>]:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">for</span> root, _, files <span class="keywordflow">in</span> os.walk(top_level):</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                paths.extend([os.path.join(root, f) <span class="keywordflow">for</span> f <span class="keywordflow">in</span> files])</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        paths = sys.argv[1:]</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">for</span> path <span class="keywordflow">in</span> paths:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (path[-3:] <span class="keywordflow">not</span> <span class="keywordflow">in</span> (<span class="stringliteral">&quot;cpp&quot;</span>, <span class="stringliteral">&quot;inl&quot;</span>) <span class="keywordflow">and</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            path[-2:] <span class="keywordflow">not</span> <span class="keywordflow">in</span> (<span class="stringliteral">&quot;cl&quot;</span>) <span class="keywordflow">and</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            path[-2:] <span class="keywordflow">not</span> <span class="keywordflow">in</span> (<span class="stringliteral">&quot;cs&quot;</span>) <span class="keywordflow">and</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            path[-1] <span class="keywordflow">not</span> <span class="keywordflow">in</span> (<span class="stringliteral">&quot;h&quot;</span>)):</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        print(<span class="stringliteral">&quot;[{}] {}&quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>(n_file, path))</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        n_file += 1</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#ab1000d1f2ea9878f60bc119650013894">  104</a></span>&#160;        <span class="keyword">with</span> open(path,<span class="stringliteral">&#39;r+&#39;</span>, encoding=<span class="stringliteral">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fd:</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#a8c0288707ed90c2275d70e22bd1f16d9">  105</a></span>&#160;            comment = list()</div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#a62ce1089f60022203804ed7418ea39e8">  106</a></span>&#160;            first_param = -1</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#ab794587cd8309d35dafb5d86569354ff">  107</a></span>&#160;            last_param = -1</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#a69c10e7cc243f2a29fd63e7cebaa18c6">  108</a></span>&#160;            n_line = 0</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="namespaceformat__doxygen.xhtml#a22ea78f101680108434cb132f12afa0a">  110</a></span>&#160;            lines = fd.readlines()</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            fd.seek(0)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            fd.truncate()</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                n_line += 1</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="comment"># Start comment</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="comment"># Match C-style comment /* anywhere in the line</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">r&quot;/\*&quot;</span>, line):</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="comment">#print(&quot;Start comment {}&quot;.format(n_line))</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keywordflow">if</span> len(comment) &gt; 0:</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;{}:{}: Already in a comment!&quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>(path,n_line))</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    comment.append(line)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="comment"># Comment already started</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">elif</span> len(comment) &gt; 0:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="comment">#print(&quot;Add line to comment {}&quot;.format(n_line))</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    comment.append(line)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="comment"># Non-comment line</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    <span class="comment">#print(&quot;Normal line {}&quot;.format(n_line))</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    fd.write(line)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="comment"># Match param declaration in Doxygen comment</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="comment"># @param[in] name description</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">r&quot;@param\[[^\]]+\] +\S+ +\S&quot;</span>, line):</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <span class="comment">#print(&quot;Param {}&quot;.format(n_line))</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="keywordflow">if</span> first_param &lt; 0:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        first_param = len(comment) - 1</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    last_param = len(comment)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="comment"># Match end of C-style comment */</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">r&quot;\*/&quot;</span>, line):</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="keywordflow">if</span> re.search(<span class="stringliteral">&#39;&quot;[^&quot;]*\*/[^&quot;]*&quot;&#39;</span>, line):</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        <span class="comment">#print(&quot;End of comment inside a string: ignoring&quot;)</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <span class="comment">#print(&quot;End comment {}&quot;.format(n_line))</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        <span class="keywordflow">if</span> len(comment) &lt; 1:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                            <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;{}:{}: Was not in a comment! &quot;</span>.<a class="code" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">format</a>(path, n_line))</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        <span class="comment">#print(&quot;Process comment {} {}&quot;.format(first_param, last_param))</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        <a class="code" href="namespaceformat__doxygen.xhtml#a0f82b9801e9e1efd94c9c7cb2f3f955b">process_comment</a>(fd, comment, first_param, last_param)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        comment = list()</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        first_param = -1</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        last_param = -1</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_xhtml_a5277640d2fd61696201c28a01c3de703"><div class="ttname"><a href="namespacearm__compute.xhtml#a5277640d2fd61696201c28a01c3de703">arm_compute::join</a></div><div class="ttdeci">std::string join(const std::vector&lt; std::string &gt; strings, const std::string &amp;sep)</div><div class="ttdoc">Join a sequence of strings with separator sep.</div><div class="ttdef"><b>Definition:</b> <a href="_string_utils_8cpp_source.xhtml#l00066">StringUtils.cpp:66</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a87f09c74765be18a99038478f96daf9b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a87f09c74765be18a99038478f96daf9b">arm_compute::test::validation::reference::range</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; range(SimpleTensor&lt; T &gt; &amp;dst, float start, const size_t num_of_elements, float step)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_range_8cpp_source.xhtml#l00050">Range.cpp:50</a></div></div>
<div class="ttc" id="anamespaceformat__doxygen_xhtml_a0f82b9801e9e1efd94c9c7cb2f3f955b"><div class="ttname"><a href="namespaceformat__doxygen.xhtml#a0f82b9801e9e1efd94c9c7cb2f3f955b">format_doxygen.process_comment</a></div><div class="ttdeci">def process_comment(fd, comment, first_param, last_param)</div><div class="ttdef"><b>Definition:</b> <a href="format__doxygen_8py_source.xhtml#l00006">format_doxygen.py:6</a></div></div>
<div class="ttc" id="anamespaceupdate__supported__ops_xhtml_a387137c43ed9616d39ba90e890d181eb"><div class="ttname"><a href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">update_supported_ops.format</a></div><div class="ttdeci">format</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00405">update_supported_ops.py:405</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_53e6fa9553ac22a5646d2a2b2d7b97a1.xhtml">scripts</a></li><li class="navelem"><a class="el" href="format__doxygen_8py.xhtml">format_doxygen.py</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:53:53 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
