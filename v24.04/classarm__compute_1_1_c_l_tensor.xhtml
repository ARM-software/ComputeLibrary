<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CLTensor Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_l_tensor.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CLTensor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Basic implementation of the OpenCL tensor interface.  
 <a href="classarm__compute_1_1_c_l_tensor.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml">CLTensor.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CLTensor:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_l_tensor__coll__graph.svg" width="278" height="187"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aff6b3e9d4c2636c898a7b660222bcbac"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#aff6b3e9d4c2636c898a7b660222bcbac">CLTensor</a> (<a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *ctx=nullptr)</td></tr>
<tr class="memdesc:aff6b3e9d4c2636c898a7b660222bcbac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#aff6b3e9d4c2636c898a7b660222bcbac">More...</a><br /></td></tr>
<tr class="separator:aff6b3e9d4c2636c898a7b660222bcbac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43744c546ed0596889150e9185461b5c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a43744c546ed0596889150e9185461b5c">~CLTensor</a> ()=default</td></tr>
<tr class="memdesc:a43744c546ed0596889150e9185461b5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a43744c546ed0596889150e9185461b5c">More...</a><br /></td></tr>
<tr class="separator:a43744c546ed0596889150e9185461b5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a040168642eb2444b17c81b02f0bfd440"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a040168642eb2444b17c81b02f0bfd440">CLTensor</a> (const <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;)=delete</td></tr>
<tr class="memdesc:a040168642eb2444b17c81b02f0bfd440"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent copying by construction.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a040168642eb2444b17c81b02f0bfd440">More...</a><br /></td></tr>
<tr class="separator:a040168642eb2444b17c81b02f0bfd440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5501bdb45d21bcda651a8cd11de6acec"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a5501bdb45d21bcda651a8cd11de6acec">CLTensor</a> (<a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a5501bdb45d21bcda651a8cd11de6acec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move constructor.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a5501bdb45d21bcda651a8cd11de6acec">More...</a><br /></td></tr>
<tr class="separator:a5501bdb45d21bcda651a8cd11de6acec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af759a79a4c42cfb64e654a2d5686295b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#af759a79a4c42cfb64e654a2d5686295b">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;)=delete</td></tr>
<tr class="memdesc:af759a79a4c42cfb64e654a2d5686295b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent copaingy by assignment.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#af759a79a4c42cfb64e654a2d5686295b">More...</a><br /></td></tr>
<tr class="separator:af759a79a4c42cfb64e654a2d5686295b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac369859b3cf7dd3ad9d1355633557b23"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#ac369859b3cf7dd3ad9d1355633557b23">operator=</a> (<a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ac369859b3cf7dd3ad9d1355633557b23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default move assignment operator.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#ac369859b3cf7dd3ad9d1355633557b23">More...</a><br /></td></tr>
<tr class="separator:ac369859b3cf7dd3ad9d1355633557b23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4083de30daebd6bdee6b35d9c8262108"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml">CLTensorAllocator</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">allocator</a> ()</td></tr>
<tr class="memdesc:a4083de30daebd6bdee6b35d9c8262108"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the tensor's allocator.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a4083de30daebd6bdee6b35d9c8262108">More...</a><br /></td></tr>
<tr class="separator:a4083de30daebd6bdee6b35d9c8262108"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14c53d2d17be6fa8a2c9861527c7b002"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">map</a> (bool blocking=true)</td></tr>
<tr class="memdesc:a14c53d2d17be6fa8a2c9861527c7b002"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue a map operation of the allocated buffer.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a14c53d2d17be6fa8a2c9861527c7b002">More...</a><br /></td></tr>
<tr class="separator:a14c53d2d17be6fa8a2c9861527c7b002"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ffeb3b5abb3d61f62b58a391816201c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">unmap</a> ()</td></tr>
<tr class="memdesc:a1ffeb3b5abb3d61f62b58a391816201c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue an unmap operation of the allocated and mapped buffer.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a1ffeb3b5abb3d61f62b58a391816201c">More...</a><br /></td></tr>
<tr class="separator:a1ffeb3b5abb3d61f62b58a391816201c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad45f0c01a0713dfb6bd7232c7f396fc4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">info</a> () const override</td></tr>
<tr class="memdesc:ad45f0c01a0713dfb6bd7232c7f396fc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to return the tensor's metadata.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#ad45f0c01a0713dfb6bd7232c7f396fc4">More...</a><br /></td></tr>
<tr class="separator:ad45f0c01a0713dfb6bd7232c7f396fc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5b3539cef9e42dee1882e909ba34e4f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#aa5b3539cef9e42dee1882e909ba34e4f">info</a> () override</td></tr>
<tr class="memdesc:aa5b3539cef9e42dee1882e909ba34e4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to return the tensor's metadata.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#aa5b3539cef9e42dee1882e909ba34e4f">More...</a><br /></td></tr>
<tr class="separator:aa5b3539cef9e42dee1882e909ba34e4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53c338c0d76f41c472cdbf66fafdfe91"><td class="memItemLeft" align="right" valign="top">const cl::Buffer &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a53c338c0d76f41c472cdbf66fafdfe91">cl_buffer</a> () const override</td></tr>
<tr class="memdesc:a53c338c0d76f41c472cdbf66fafdfe91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to return a reference to the OpenCL buffer containing the image's data.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a53c338c0d76f41c472cdbf66fafdfe91">More...</a><br /></td></tr>
<tr class="separator:a53c338c0d76f41c472cdbf66fafdfe91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d614dfaa0606b7fef13f3e26d745b48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_c_l_quantization.xhtml">CLQuantization</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a6d614dfaa0606b7fef13f3e26d745b48">quantization</a> () const override</td></tr>
<tr class="memdesc:a6d614dfaa0606b7fef13f3e26d745b48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to return the wrapped quantization info data.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#a6d614dfaa0606b7fef13f3e26d745b48">More...</a><br /></td></tr>
<tr class="separator:a6d614dfaa0606b7fef13f3e26d745b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad702fefc10e889efafeab8a514aee30b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#ad702fefc10e889efafeab8a514aee30b">associate_memory_group</a> (<a class="el" href="classarm__compute_1_1_i_memory_group.xhtml">IMemoryGroup</a> *memory_group) override</td></tr>
<tr class="memdesc:ad702fefc10e889efafeab8a514aee30b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Associates a memory managable object with the memory group that manages it.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#ad702fefc10e889efafeab8a514aee30b">More...</a><br /></td></tr>
<tr class="separator:ad702fefc10e889efafeab8a514aee30b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a077883f1cacab26aef8c60160a19aee6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml">CLRuntimeContext</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#a077883f1cacab26aef8c60160a19aee6">context</a> ()</td></tr>
<tr class="separator:a077883f1cacab26aef8c60160a19aee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0abc7a5c0d172947f0e6a0c0dde3df0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">map</a> (cl::CommandQueue &amp;q, bool blocking=true)</td></tr>
<tr class="memdesc:ac0abc7a5c0d172947f0e6a0c0dde3df0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue a map operation of the allocated buffer on the given queue.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">More...</a><br /></td></tr>
<tr class="separator:ac0abc7a5c0d172947f0e6a0c0dde3df0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af974a2360069c2ef8df4496d00e4f6cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">unmap</a> (cl::CommandQueue &amp;q)</td></tr>
<tr class="memdesc:af974a2360069c2ef8df4496d00e4f6cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue an unmap operation of the allocated and mapped buffer on the given queue.  <a href="classarm__compute_1_1_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">More...</a><br /></td></tr>
<tr class="separator:af974a2360069c2ef8df4496d00e4f6cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_c_l_tensor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_c_l_tensor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a></td></tr>
<tr class="memitem:a64399eb327ea2e4ecd2c8086a8dc01ce inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a64399eb327ea2e4ecd2c8086a8dc01ce">ICLTensor</a> ()</td></tr>
<tr class="memdesc:a64399eb327ea2e4ecd2c8086a8dc01ce inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#a64399eb327ea2e4ecd2c8086a8dc01ce">More...</a><br /></td></tr>
<tr class="separator:a64399eb327ea2e4ecd2c8086a8dc01ce inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad49b11e9c7276ca78046ad4c339cd7c6 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#ad49b11e9c7276ca78046ad4c339cd7c6">ICLTensor</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &amp;)=delete</td></tr>
<tr class="memdesc:ad49b11e9c7276ca78046ad4c339cd7c6 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copy constructed.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#ad49b11e9c7276ca78046ad4c339cd7c6">More...</a><br /></td></tr>
<tr class="separator:ad49b11e9c7276ca78046ad4c339cd7c6 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af72219f9b5e8803950eb8863a23c076e inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#af72219f9b5e8803950eb8863a23c076e">operator=</a> (const <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &amp;)=delete</td></tr>
<tr class="memdesc:af72219f9b5e8803950eb8863a23c076e inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#af72219f9b5e8803950eb8863a23c076e">More...</a><br /></td></tr>
<tr class="separator:af72219f9b5e8803950eb8863a23c076e inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae81da2706cd5717c6c4d7cea239a1e03 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#ae81da2706cd5717c6c4d7cea239a1e03">ICLTensor</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:ae81da2706cd5717c6c4d7cea239a1e03 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#ae81da2706cd5717c6c4d7cea239a1e03">More...</a><br /></td></tr>
<tr class="separator:ae81da2706cd5717c6c4d7cea239a1e03 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a7368baa4f8580ea732b2a352217b80 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a6a7368baa4f8580ea732b2a352217b80">operator=</a> (<a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml">ICLTensor</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a6a7368baa4f8580ea732b2a352217b80 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#a6a7368baa4f8580ea732b2a352217b80">More...</a><br /></td></tr>
<tr class="separator:a6a7368baa4f8580ea732b2a352217b80 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0bce17c5cd01f2b45cc59afd615913e inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#aa0bce17c5cd01f2b45cc59afd615913e">~ICLTensor</a> ()=default</td></tr>
<tr class="memdesc:aa0bce17c5cd01f2b45cc59afd615913e inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#aa0bce17c5cd01f2b45cc59afd615913e">More...</a><br /></td></tr>
<tr class="separator:aa0bce17c5cd01f2b45cc59afd615913e inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0abc7a5c0d172947f0e6a0c0dde3df0 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">map</a> (cl::CommandQueue &amp;q, bool blocking=true)</td></tr>
<tr class="memdesc:ac0abc7a5c0d172947f0e6a0c0dde3df0 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue a map operation of the allocated buffer on the given queue.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">More...</a><br /></td></tr>
<tr class="separator:ac0abc7a5c0d172947f0e6a0c0dde3df0 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af974a2360069c2ef8df4496d00e4f6cc inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">unmap</a> (cl::CommandQueue &amp;q)</td></tr>
<tr class="memdesc:af974a2360069c2ef8df4496d00e4f6cc inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enqueue an unmap operation of the allocated and mapped buffer on the given queue.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">More...</a><br /></td></tr>
<tr class="separator:af974a2360069c2ef8df4496d00e4f6cc inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b94593f2b06f00d380ec3a3e6abccb2 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a7b94593f2b06f00d380ec3a3e6abccb2">clear</a> (cl::CommandQueue &amp;q)</td></tr>
<tr class="memdesc:a7b94593f2b06f00d380ec3a3e6abccb2 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the contents of the tensor synchronously.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#a7b94593f2b06f00d380ec3a3e6abccb2">More...</a><br /></td></tr>
<tr class="separator:a7b94593f2b06f00d380ec3a3e6abccb2 inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24954cca5108a24706441fd99a7fb04c inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memItemLeft" align="right" valign="top">uint8_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">buffer</a> () const override</td></tr>
<tr class="memdesc:a24954cca5108a24706441fd99a7fb04c inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface to be implemented by the child class to return a pointer to CPU memory.  <a href="classarm__compute_1_1_i_c_l_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">More...</a><br /></td></tr>
<tr class="separator:a24954cca5108a24706441fd99a7fb04c inherit pub_methods_classarm__compute_1_1_i_c_l_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_tensor"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_tensor')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a></td></tr>
<tr class="memitem:a4aa2df36743089ac6814d83e7d4b7ffc inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a4aa2df36743089ac6814d83e7d4b7ffc">~ITensor</a> ()=default</td></tr>
<tr class="memdesc:a4aa2df36743089ac6814d83e7d4b7ffc inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_tensor.xhtml#a4aa2df36743089ac6814d83e7d4b7ffc">More...</a><br /></td></tr>
<tr class="separator:a4aa2df36743089ac6814d83e7d4b7ffc inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbd73147d41e8a640bc299d12613c31e inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memItemLeft" align="right" valign="top">uint8_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;id) const</td></tr>
<tr class="memdesc:adbd73147d41e8a640bc299d12613c31e inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the element at the passed coordinates.  <a href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">More...</a><br /></td></tr>
<tr class="separator:adbd73147d41e8a640bc299d12613c31e inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a774ad8d5f4837f3d7de1876d367c5b inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a4a774ad8d5f4837f3d7de1876d367c5b">copy_from</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;src)</td></tr>
<tr class="memdesc:a4a774ad8d5f4837f3d7de1876d367c5b inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy the content of another tensor.  <a href="classarm__compute_1_1_i_tensor.xhtml#a4a774ad8d5f4837f3d7de1876d367c5b">More...</a><br /></td></tr>
<tr class="separator:a4a774ad8d5f4837f3d7de1876d367c5b inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade74189c92e70baa2848986c10dbe7ef inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ade74189c92e70baa2848986c10dbe7ef">print</a> (std::ostream &amp;s, <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> io_fmt=<a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>()) const</td></tr>
<tr class="memdesc:ade74189c92e70baa2848986c10dbe7ef inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print a tensor to a given stream using user defined formatting information.  <a href="classarm__compute_1_1_i_tensor.xhtml#ade74189c92e70baa2848986c10dbe7ef">More...</a><br /></td></tr>
<tr class="separator:ade74189c92e70baa2848986c10dbe7ef inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a209ea2ddfdfa80703799c92da8beb643 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a209ea2ddfdfa80703799c92da8beb643">is_used</a> () const</td></tr>
<tr class="memdesc:a209ea2ddfdfa80703799c92da8beb643 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags if the tensor is used or not.  <a href="classarm__compute_1_1_i_tensor.xhtml#a209ea2ddfdfa80703799c92da8beb643">More...</a><br /></td></tr>
<tr class="separator:a209ea2ddfdfa80703799c92da8beb643 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bc00234de9adf8c99a21eb1d7d494c2 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">mark_as_unused</a> () const</td></tr>
<tr class="memdesc:a9bc00234de9adf8c99a21eb1d7d494c2 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks a tensor as unused.  <a href="classarm__compute_1_1_i_tensor.xhtml#a9bc00234de9adf8c99a21eb1d7d494c2">More...</a><br /></td></tr>
<tr class="separator:a9bc00234de9adf8c99a21eb1d7d494c2 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bac1e8a45b7823cbd4f74fe44f8c602 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0bac1e8a45b7823cbd4f74fe44f8c602">mark_as_used</a> () const</td></tr>
<tr class="memdesc:a0bac1e8a45b7823cbd4f74fe44f8c602 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks a tensor as used.  <a href="classarm__compute_1_1_i_tensor.xhtml#a0bac1e8a45b7823cbd4f74fe44f8c602">More...</a><br /></td></tr>
<tr class="separator:a0bac1e8a45b7823cbd4f74fe44f8c602 inherit pub_methods_classarm__compute_1_1_i_tensor"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_memory_manageable"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_memory_manageable')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_memory_manageable.xhtml">IMemoryManageable</a></td></tr>
<tr class="memitem:added32d63012f1fe88309043bdf65059 inherit pub_methods_classarm__compute_1_1_i_memory_manageable"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_memory_manageable.xhtml#added32d63012f1fe88309043bdf65059">~IMemoryManageable</a> ()=default</td></tr>
<tr class="memdesc:added32d63012f1fe88309043bdf65059 inherit pub_methods_classarm__compute_1_1_i_memory_manageable"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_memory_manageable.xhtml#added32d63012f1fe88309043bdf65059">More...</a><br /></td></tr>
<tr class="separator:added32d63012f1fe88309043bdf65059 inherit pub_methods_classarm__compute_1_1_i_memory_manageable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Basic implementation of the OpenCL tensor interface. </p>

<p class="definition">Definition at line <a class="el" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml#l00041">41</a> of file <a class="el" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml">CLTensor.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aff6b3e9d4c2636c898a7b660222bcbac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff6b3e9d4c2636c898a7b660222bcbac">&#9670;&nbsp;</a></span>CLTensor() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_runtime_context.xhtml">IRuntimeContext</a> *&#160;</td>
          <td class="paramname"><em>ctx</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>(Optional) Pointer to a <a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml">CLRuntimeContext</a>. If nullptr is passed in, the legacy api using the singletons will be used. Otherwise the memory for the tensor will allocate on the context passed in. The singletons legacy api has been deprecated and will be removed in future releases. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    : _allocator(<span class="keyword">this</span>, <span class="keyword">static_cast&lt;</span>CLRuntimeContext *<span class="keyword">&gt;</span>(ctx)), _ctx(<span class="keyword">static_cast&lt;</span>CLRuntimeContext *<span class="keyword">&gt;</span>(ctx))</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a43744c546ed0596889150e9185461b5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43744c546ed0596889150e9185461b5c">&#9670;&nbsp;</a></span>~CLTensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<a id="a040168642eb2444b17c81b02f0bfd440"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a040168642eb2444b17c81b02f0bfd440">&#9670;&nbsp;</a></span>CLTensor() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent copying by construction. </p>

</div>
</div>
<a id="a5501bdb45d21bcda651a8cd11de6acec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5501bdb45d21bcda651a8cd11de6acec">&#9670;&nbsp;</a></span>CLTensor() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4083de30daebd6bdee6b35d9c8262108"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4083de30daebd6bdee6b35d9c8262108">&#9670;&nbsp;</a></span>allocator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml">CLTensorAllocator</a> * allocator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a pointer to the tensor's allocator. </p>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the tensor's allocator </dd></dl>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> &amp;_allocator;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_tensor_handle_8cpp_source.xhtml#l00039">CLTensorHandle::allocate()</a>, <a class="el" href="_cl_aux_tensor_handler_8h_source.xhtml#l00065">CLAuxTensorHandler::CLAuxTensorHandler()</a>, <a class="el" href="_c_l_tensor_handle_8cpp_source.xhtml#l00034">CLTensorHandle::CLTensorHandle()</a>, <a class="el" href="_c_l_2_p_relu_layer_8cpp_source.xhtml#l00115">arm_compute::test::validation::compute_float_target_in_place()</a>, <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00133">CLReduceMean::configure()</a>, <a class="el" href="_c_l_f_f_t2_d_8cpp_source.xhtml#l00052">CLFFT2D::configure()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00057">CLFFT1D::configure()</a>, <a class="el" href="_c_l_r_n_n_layer_8cpp_source.xhtml#l00103">CLRNNLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00079">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_8cpp_source.xhtml#l00060">CLL2NormalizeLayer::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00097">CLArgMinMaxLayer::configure()</a>, <a class="el" href="_c_l_reduction_operation_8cpp_source.xhtml#l00121">CLReductionOperation::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_8cpp_source.xhtml#l00052">CLInstanceNormalizationLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00086">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00262">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00135">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00160">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00193">CLQLSTMLayer::configure()</a>, <a class="el" href="_c_l_tensor_handle_8cpp_source.xhtml#l00044">CLTensorHandle::free()</a>, <a class="el" href="_memory_helpers_8h_source.xhtml#l00063">arm_compute::manage_workspace()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00295">CLDepthwiseConvolutionLayer::prepare()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00385">CLFFTConvolutionLayer::prepare()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00426">CLGEMMDeconvolutionLayer::prepare()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00245">CLDirectDeconvolutionLayer::prepare()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00718">CLLSTMLayerQuantized::prepare()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01339">CLQLSTMLayer::prepare()</a>, <a class="el" href="arm__compute_2runtime_2_c_l_2functions_2_c_l_convert_fully_connected_weights_8h_source.xhtml#l00124">CLConvertFullyConnectedWeightsManaged::release()</a>, <a class="el" href="_c_l_tensor_handle_8cpp_source.xhtml#l00067">CLTensorHandle::release_if_unused()</a>, <a class="el" href="arm__compute_2runtime_2_c_l_2functions_2_c_l_convert_fully_connected_weights_8h_source.xhtml#l00116">CLConvertFullyConnectedWeightsManaged::run()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00346">CLFFTConvolutionLayer::run()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00171">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="ad702fefc10e889efafeab8a514aee30b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad702fefc10e889efafeab8a514aee30b">&#9670;&nbsp;</a></span>associate_memory_group()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void associate_memory_group </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_memory_group.xhtml">IMemoryGroup</a> *&#160;</td>
          <td class="paramname"><em>memory_group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Associates a memory managable object with the memory group that manages it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">memory_group</td><td><a class="el" href="classarm__compute_1_1_memory.xhtml" title="CPU implementation of memory object.">Memory</a> group that manages the object. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_memory_manageable.xhtml#ace3160d9bb6fdcf5e9973baaaa1fef08">IMemoryManageable</a>.</p>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    _allocator.<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a34177e00ce3d627e8a6a9ca215aaddfb">set_associated_memory_group</a>(memory_group);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00184">CLTensorAllocator::set_associated_memory_group()</a>.</p>

</div>
</div>
<a id="a53c338c0d76f41c472cdbf66fafdfe91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53c338c0d76f41c472cdbf66fafdfe91">&#9670;&nbsp;</a></span>cl_buffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const cl::Buffer &amp; cl_buffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to return a reference to the OpenCL buffer containing the image's data. </p>
<dl class="section return"><dt>Returns</dt><dd>A reference to an OpenCL buffer containing the image's data. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#a1fb4c50755a0ef424652246838ed91a6">ICLTensor</a>.</p>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> _allocator.<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#ac7e247b94ceae35db2a172961ab83df9">cl_data</a>();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00126">CLTensorAllocator::cl_data()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00037">arm_compute::create_image2d_from_tensor()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00346">CLFFTConvolutionLayer::run()</a>, and <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00171">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a077883f1cacab26aef8c60160a19aee6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a077883f1cacab26aef8c60160a19aee6">&#9670;&nbsp;</a></span>context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_runtime_context.xhtml">CLRuntimeContext</a> * context </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> _ctx;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad45f0c01a0713dfb6bd7232c7f396fc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad45f0c01a0713dfb6bd7232c7f396fc4">&#9670;&nbsp;</a></span>info() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> * info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to return the tensor's metadata. </p>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the tensor's metadata. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor</a>.</p>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> &amp;_allocator.<a class="code" href="classarm__compute_1_1_i_tensor_allocator.xhtml#af286b91f2f7596fb01ab790a1468a81a">info</a>();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_tensor_allocator_8cpp_source.xhtml#l00046">ITensorAllocator::info()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_reduce_mean_8cpp_source.xhtml#l00133">CLReduceMean::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00079">CLDepthwiseConvolutionLayer::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_8cpp_source.xhtml#l00097">CLArgMinMaxLayer::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_8cpp_source.xhtml#l00086">CLGenerateProposalsLayer::configure()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00262">CLGEMMDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00135">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00160">CLLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00193">CLQLSTMLayer::configure()</a>, <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00037">arm_compute::create_image2d_from_tensor()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00124">CLAccessor::data_layout()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00129">CLAccessor::data_type()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00109">CLAccessor::element_size()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00880">arm_compute::error_on_data_layout_not_in()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00936">arm_compute::error_on_data_type_channel_not_in()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00828">arm_compute::error_on_data_type_not_in()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00613">arm_compute::error_on_mismatching_data_layouts()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00665">arm_compute::error_on_mismatching_data_types()</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00107">arm_compute::error_on_unsupported_cpu_bf16()</a>, <a class="el" href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00090">arm_compute::error_on_unsupported_cpu_fp16()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00985">arm_compute::error_on_unsupported_fp16()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00119">CLAccessor::format()</a>, <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00462">arm_compute::get_padding_info()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00134">CLAccessor::num_channels()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00139">CLAccessor::num_elements()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00144">CLAccessor::padding()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01339">CLQLSTMLayer::prepare()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00149">CLAccessor::quantization_info()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00104">CLAccessor::shape()</a>, <a class="el" href="_c_l_accessor_8h_source.xhtml#l00114">CLAccessor::size()</a>, <a class="el" href="tests_2validation_2_c_l_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00171">arm_compute::test::validation::TEST_CASE()</a>, and <a class="el" href="utils_2_type_printer_8h_source.xhtml#l01240">arm_compute::to_string()</a>.</p>

</div>
</div>
<a id="aa5b3539cef9e42dee1882e909ba34e4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5b3539cef9e42dee1882e909ba34e4f">&#9670;&nbsp;</a></span>info() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>* info </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to return the tensor's metadata. </p>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the tensor's metadata. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a7e6b5e55a2914b1fb1966310e7733ac4">ITensor</a>.</p>

</div>
</div>
<a id="a14c53d2d17be6fa8a2c9861527c7b002"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14c53d2d17be6fa8a2c9861527c7b002">&#9670;&nbsp;</a></span>map() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void map </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>blocking</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueue a map operation of the allocated buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">blocking</td><td>If true, then the mapping will be ready to use by the time this method returns, else it is the caller's responsibility to flush the queue and wait for the mapping operation to have completed. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">ICLTensor::map</a>(_ctx == <span class="keyword">nullptr</span> ? <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().queue() : _ctx-&gt;<a class="code" href="classarm__compute_1_1_c_l_runtime_context.xhtml#aca669157282266de0605044219e0d2b6">gpu_scheduler</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>(), blocking);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>, <a class="el" href="_c_l_runtime_context_8cpp_source.xhtml#l00060">CLRuntimeContext::gpu_scheduler()</a>, <a class="el" href="_i_c_l_tensor_8cpp_source.xhtml#l00034">ICLTensor::map()</a>, and <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00040">CLScheduler::queue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00097">AclMapTensor()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00057">CLFFT1D::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_tensor_handle_8cpp_source.xhtml#l00057">CLTensorHandle::map()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00295">CLDepthwiseConvolutionLayer::prepare()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01339">CLQLSTMLayer::prepare()</a>.</p>

</div>
</div>
<a id="ac0abc7a5c0d172947f0e6a0c0dde3df0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0abc7a5c0d172947f0e6a0c0dde3df0">&#9670;&nbsp;</a></span>map() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void map</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueue a map operation of the allocated buffer on the given queue. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">q</td><td>The CL command queue to use for the mapping operation. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">blocking</td><td>If true, then the mapping will be ready to use by the time this method returns, else it is the caller's responsibility to flush the queue and wait for the mapping operation to have completed before using the returned mapping pointer. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_tensor_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_i_c_l_tensor_8cpp_source.xhtml">ICLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    _mapping = do_map(q, blocking);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac369859b3cf7dd3ad9d1355633557b23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac369859b3cf7dd3ad9d1355633557b23">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default move assignment operator. </p>

</div>
</div>
<a id="af759a79a4c42cfb64e654a2d5686295b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af759a79a4c42cfb64e654a2d5686295b">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent copaingy by assignment. </p>

</div>
</div>
<a id="a6d614dfaa0606b7fef13f3e26d745b48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d614dfaa0606b7fef13f3e26d745b48">&#9670;&nbsp;</a></span>quantization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_c_l_quantization.xhtml">CLQuantization</a> quantization </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interface to be implemented by the child class to return the wrapped quantization info data. </p>
<dl class="section return"><dt>Returns</dt><dd>A wrapped quantization info object. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml#aff9433a5bb38873d6af3d45e6f638281">ICLTensor</a>.</p>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> _allocator.<a class="code" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a5c27e81a1ad958e4de947c1da77f4cf1">quantization</a>();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_tensor_allocator_8cpp_source.xhtml#l00116">CLTensorAllocator::quantization()</a>.</p>

</div>
</div>
<a id="a1ffeb3b5abb3d61f62b58a391816201c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ffeb3b5abb3d61f62b58a391816201c">&#9670;&nbsp;</a></span>unmap() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void unmap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueue an unmap operation of the allocated and mapped buffer. </p>
<dl class="section note"><dt>Note</dt><dd>This method simply enqueues the unmap operation, it is the caller's responsibility to flush the queue and make sure the unmap is finished before the memory is accessed by the device. </dd></dl>

<p class="definition">Definition at line <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="classarm__compute_1_1_i_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">ICLTensor::unmap</a>(_ctx == <span class="keyword">nullptr</span> ? <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().queue() : _ctx-&gt;<a class="code" href="classarm__compute_1_1_c_l_runtime_context.xhtml#aca669157282266de0605044219e0d2b6">gpu_scheduler</a>()-&gt;<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler::get()</a>, <a class="el" href="_c_l_runtime_context_8cpp_source.xhtml#l00060">CLRuntimeContext::gpu_scheduler()</a>, <a class="el" href="_c_l_scheduler_8cpp_source.xhtml#l00040">CLScheduler::queue()</a>, and <a class="el" href="_i_c_l_tensor_8cpp_source.xhtml#l00039">ICLTensor::unmap()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00116">AclUnmapTensor()</a>, <a class="el" href="_c_l_f_f_t1_d_8cpp_source.xhtml#l00057">CLFFT1D::configure()</a>, <a class="el" href="_c_l_f_f_t_convolution_layer_8cpp_source.xhtml#l00119">CLFFTConvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_8cpp_source.xhtml#l00295">CLDepthwiseConvolutionLayer::prepare()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l01339">CLQLSTMLayer::prepare()</a>, <a class="el" href="_c_l_tensor_handle_8cpp_source.xhtml#l00062">CLTensorHandle::unmap()</a>, and <a class="el" href="_c_l_accessor_8h_source.xhtml#l00096">CLAccessor::~CLAccessor()</a>.</p>

</div>
</div>
<a id="af974a2360069c2ef8df4496d00e4f6cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af974a2360069c2ef8df4496d00e4f6cc">&#9670;&nbsp;</a></span>unmap() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void unmap</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enqueue an unmap operation of the allocated and mapped buffer on the given queue. </p>
<dl class="section note"><dt>Note</dt><dd>This method simply enqueues the unmap operation, it is the caller's responsibility to flush the queue and make sure the unmap is finished before the memory is accessed by the device.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">q</td><td>The CL command queue to use for the mapping operation. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_c_l_tensor_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="_i_c_l_tensor_8cpp_source.xhtml">ICLTensor.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    do_unmap(q);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    _mapping = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CL/<a class="el" href="arm__compute_2runtime_2_c_l_2_c_l_tensor_8h_source.xhtml">CLTensor.h</a></li>
<li>src/runtime/CL/<a class="el" href="runtime_2_c_l_2_cl_tensor_8cpp_source.xhtml">CLTensor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml_ac0abc7a5c0d172947f0e6a0c0dde3df0"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml#ac0abc7a5c0d172947f0e6a0c0dde3df0">arm_compute::ICLTensor::map</a></div><div class="ttdeci">void map(cl::CommandQueue &amp;q, bool blocking=true)</div><div class="ttdoc">Enqueue a map operation of the allocated buffer on the given queue.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8cpp_source.xhtml#l00034">ICLTensor.cpp:34</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_runtime_context_xhtml_aca669157282266de0605044219e0d2b6"><div class="ttname"><a href="classarm__compute_1_1_c_l_runtime_context.xhtml#aca669157282266de0605044219e0d2b6">arm_compute::CLRuntimeContext::gpu_scheduler</a></div><div class="ttdeci">CLScheduler * gpu_scheduler()</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_runtime_context_8cpp_source.xhtml#l00060">CLRuntimeContext.cpp:60</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_allocator_xhtml_a34177e00ce3d627e8a6a9ca215aaddfb"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a34177e00ce3d627e8a6a9ca215aaddfb">arm_compute::CLTensorAllocator::set_associated_memory_group</a></div><div class="ttdeci">void set_associated_memory_group(IMemoryGroup *associated_memory_group)</div><div class="ttdoc">Associates the tensor with a memory group.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00184">CLTensorAllocator.cpp:184</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_allocator_xhtml_a5c27e81a1ad958e4de947c1da77f4cf1"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#a5c27e81a1ad958e4de947c1da77f4cf1">arm_compute::CLTensorAllocator::quantization</a></div><div class="ttdeci">CLQuantization quantization() const</div><div class="ttdoc">Wrapped quantization info data accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00116">CLTensorAllocator.cpp:116</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_tensor_allocator_xhtml_ac7e247b94ceae35db2a172961ab83df9"><div class="ttname"><a href="classarm__compute_1_1_c_l_tensor_allocator.xhtml#ac7e247b94ceae35db2a172961ab83df9">arm_compute::CLTensorAllocator::cl_data</a></div><div class="ttdeci">const cl::Buffer &amp; cl_data() const</div><div class="ttdoc">Interface to be implemented by the child class to return the pointer to the CL data.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_tensor_allocator_8cpp_source.xhtml#l00126">CLTensorAllocator.cpp:126</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_allocator_xhtml_af286b91f2f7596fb01ab790a1468a81a"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_allocator.xhtml#af286b91f2f7596fb01ab790a1468a81a">arm_compute::ITensorAllocator::info</a></div><div class="ttdeci">TensorInfo &amp; info()</div><div class="ttdoc">Return a reference to the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_allocator_8cpp_source.xhtml#l00046">ITensorAllocator.cpp:46</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_c_l_tensor_xhtml_af974a2360069c2ef8df4496d00e4f6cc"><div class="ttname"><a href="classarm__compute_1_1_i_c_l_tensor.xhtml#af974a2360069c2ef8df4496d00e4f6cc">arm_compute::ICLTensor::unmap</a></div><div class="ttdeci">void unmap(cl::CommandQueue &amp;q)</div><div class="ttdoc">Enqueue an unmap operation of the allocated and mapped buffer on the given queue.</div><div class="ttdef"><b>Definition:</b> <a href="_i_c_l_tensor_8cpp_source.xhtml#l00039">ICLTensor.cpp:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a9b58d0eb9a2af8e6d7908695e1557d6c"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">arm_compute::CLScheduler::get</a></div><div class="ttdeci">static CLScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00112">CLScheduler.cpp:112</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_scheduler_xhtml_a398a2582c746d28fc125487a44c9ed74"><div class="ttname"><a href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">arm_compute::CLScheduler::queue</a></div><div class="ttdeci">cl::CommandQueue &amp; queue()</div><div class="ttdoc">Accessor for the associated CL command queue.</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_scheduler_8cpp_source.xhtml#l00040">CLScheduler.cpp:40</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml">CLTensor</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:54:07 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
