<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::detail Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1detail.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::detail Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1brelu.xhtml">brelu</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bounded RELU activation object.  <a href="structarm__compute_1_1detail_1_1brelu.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1detail_1_1compare__dimension.xhtml">compare_dimension</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to compare two <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a> objects and throw an error on mismatch.  <a href="classarm__compute_1_1detail_1_1compare__dimension.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1dummy.xhtml">dummy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Dummy activation object.  <a href="structarm__compute_1_1detail_1_1dummy.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1get__tensor__info__t.xhtml">get_tensor_info_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the info for a tensor, dummy struct.  <a href="structarm__compute_1_1detail_1_1get__tensor__info__t.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4.xhtml">get_tensor_info_t&lt; ITensorInfo * &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the info for a tensor.  <a href="structarm__compute_1_1detail_1_1get__tensor__info__t_3_01_i_tensor_info_01_5_01_4.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1_header.xhtml">Header</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1linear.xhtml">linear</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Linear activation object.  <a href="structarm__compute_1_1detail_1_1linear.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1logistic.xhtml">logistic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Logistic activation object.  <a href="structarm__compute_1_1detail_1_1logistic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1lubrelu.xhtml">lubrelu</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lower-Upper Bounded RELU activation object.  <a href="structarm__compute_1_1detail_1_1lubrelu.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1relu.xhtml">relu</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">RELU activation object.  <a href="structarm__compute_1_1detail_1_1relu.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1detail_1_1square.xhtml">square</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Square activation object.  <a href="structarm__compute_1_1detail_1_1square.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a2c0ee4eb5bed32d6fb8358d113995aa4"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4">ObjectType</a> : uint32_t { <br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4aad4e206408c1c59bfb8a057ba7857446">Context</a> = 1, 
<a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4a722ad2d05ecf4868b00c5484b82fd808">Queue</a> = 2, 
<a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a> = 3, 
<a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad">TensorPack</a> = 4, 
<br />
&#160;&#160;<a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">Operator</a> = 5, 
<a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4a4bbb8f967da6d1a610596d7257179c2b">Invalid</a> = 0x56DEAD78
<br />
 }</td></tr>
<tr class="memdesc:a2c0ee4eb5bed32d6fb8358d113995aa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">&lt; Object type enumerations  <a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4">More...</a><br /></td></tr>
<tr class="separator:a2c0ee4eb5bed32d6fb8358d113995aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a45d610a8bc262f7007c934293361e888"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a45d610a8bc262f7007c934293361e888"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a45d610a8bc262f7007c934293361e888">have_different_dimensions</a> (const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dim1, const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;dim2, unsigned int upper_dim)</td></tr>
<tr class="separator:a45d610a8bc262f7007c934293361e888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a5ba47c282279f5279617b961b8599"><td class="memTemplParams" colspan="2">template&lt;typename F &gt; </td></tr>
<tr class="memitem:a94a5ba47c282279f5279617b961b8599"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a94a5ba47c282279f5279617b961b8599">for_each_error</a> (F &amp;&amp;)</td></tr>
<tr class="separator:a94a5ba47c282279f5279617b961b8599"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fa22dee7227625fa4516f267235667c"><td class="memTemplParams" colspan="2">template&lt;typename F , typename T , typename... Ts&gt; </td></tr>
<tr class="memitem:a2fa22dee7227625fa4516f267235667c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a2fa22dee7227625fa4516f267235667c">for_each_error</a> (F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;...args)</td></tr>
<tr class="separator:a2fa22dee7227625fa4516f267235667c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47ecd4a65072f2ac3dab46b03e350ee2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a47ecd4a65072f2ac3dab46b03e350ee2">validate_internal_context</a> (const <a class="el" href="classarm__compute_1_1_i_context.xhtml">IContext</a> *ctx)</td></tr>
<tr class="memdesc:a47ecd4a65072f2ac3dab46b03e350ee2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an internal context is valid.  <a href="namespacearm__compute_1_1detail.xhtml#a47ecd4a65072f2ac3dab46b03e350ee2">More...</a><br /></td></tr>
<tr class="separator:a47ecd4a65072f2ac3dab46b03e350ee2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae48d6a6f3c6fbe0b8c9a1541a3c23c82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae48d6a6f3c6fbe0b8c9a1541a3c23c82">validate_internal_operator</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1_i_operator.xhtml">IOperator</a> *op)</td></tr>
<tr class="memdesc:ae48d6a6f3c6fbe0b8c9a1541a3c23c82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an internal operator is valid.  <a href="namespacearm__compute_1_1detail.xhtml#ae48d6a6f3c6fbe0b8c9a1541a3c23c82">More...</a><br /></td></tr>
<tr class="separator:ae48d6a6f3c6fbe0b8c9a1541a3c23c82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a855caae729317428d08d661de17d3508"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a855caae729317428d08d661de17d3508">validate_internal_queue</a> (const <a class="el" href="classarm__compute_1_1_i_queue.xhtml">IQueue</a> *queue)</td></tr>
<tr class="memdesc:a855caae729317428d08d661de17d3508"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an internal queue is valid.  <a href="namespacearm__compute_1_1detail.xhtml#a855caae729317428d08d661de17d3508">More...</a><br /></td></tr>
<tr class="separator:a855caae729317428d08d661de17d3508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fdf95bf0a83958e5ef2da382806d0a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a9fdf95bf0a83958e5ef2da382806d0a4">validate_internal_tensor</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_v2.xhtml">ITensorV2</a> *<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>)</td></tr>
<tr class="memdesc:a9fdf95bf0a83958e5ef2da382806d0a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an internal tensor is valid.  <a href="namespacearm__compute_1_1detail.xhtml#a9fdf95bf0a83958e5ef2da382806d0a4">More...</a><br /></td></tr>
<tr class="separator:a9fdf95bf0a83958e5ef2da382806d0a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaa9c71ce8a3ca5edf6880e09184e9aa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#aeaa9c71ce8a3ca5edf6880e09184e9aa">validate_internal_pack</a> (const <a class="el" href="classarm__compute_1_1_tensor_pack.xhtml">TensorPack</a> *pack)</td></tr>
<tr class="memdesc:aeaa9c71ce8a3ca5edf6880e09184e9aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if an internal <a class="el" href="classarm__compute_1_1_tensor_pack.xhtml" title="Tensor packing service.">TensorPack</a> is valid.  <a href="namespacearm__compute_1_1detail.xhtml#aeaa9c71ce8a3ca5edf6880e09184e9aa">More...</a><br /></td></tr>
<tr class="separator:aeaa9c71ce8a3ca5edf6880e09184e9aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d2ed5b1a1b431473e20ccffb16876be"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a5d2ed5b1a1b431473e20ccffb16876be">convert_to_legacy_tensor_info</a> (const <a class="el" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> &amp;desc)</td></tr>
<tr class="memdesc:a5d2ed5b1a1b431473e20ccffb16876be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a descriptor to a legacy format one.  <a href="namespacearm__compute_1_1detail.xhtml#a5d2ed5b1a1b431473e20ccffb16876be">More...</a><br /></td></tr>
<tr class="separator:a5d2ed5b1a1b431473e20ccffb16876be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2c7e9f89c3f0e2b800d85ee6697f874"><td class="memItemLeft" align="right" valign="top"><a class="el" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ac2c7e9f89c3f0e2b800d85ee6697f874">convert_to_descriptor</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;info)</td></tr>
<tr class="memdesc:ac2c7e9f89c3f0e2b800d85ee6697f874"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a legacy tensor meta-data to a descriptor.  <a href="namespacearm__compute_1_1detail.xhtml#ac2c7e9f89c3f0e2b800d85ee6697f874">More...</a><br /></td></tr>
<tr class="separator:ac2c7e9f89c3f0e2b800d85ee6697f874"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0ac96f6dc2901725a408c5d4ae11ccf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae0ac96f6dc2901725a408c5d4ae11ccf">convert_to_activation_info</a> (const <a class="el" href="struct_acl_activation_descriptor.xhtml">AclActivationDescriptor</a> &amp;desc)</td></tr>
<tr class="memdesc:ae0ac96f6dc2901725a408c5d4ae11ccf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert an AclActivation descriptor to an internal one.  <a href="namespacearm__compute_1_1detail.xhtml#ae0ac96f6dc2901725a408c5d4ae11ccf">More...</a><br /></td></tr>
<tr class="separator:ae0ac96f6dc2901725a408c5d4ae11ccf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaba543670e99c2483e0bd1996201ba3"><td class="memItemLeft" align="right" valign="top">float32x4x3_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a> (const float *ptr)</td></tr>
<tr class="separator:afaba543670e99c2483e0bd1996201ba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87f8e27c52a10ec90100fd5b0fcf663d"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a87f8e27c52a10ec90100fd5b0fcf663d"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:a87f8e27c52a10ec90100fd5b0fcf663d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d9c87411d51689909ba746f88bcff56"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a5d9c87411d51689909ba746f88bcff56"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">convolve_3x3&lt; 1 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:a5d9c87411d51689909ba746f88bcff56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2247cf9504428f406ed4da244fdb8d1c"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a2247cf9504428f406ed4da244fdb8d1c"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a2247cf9504428f406ed4da244fdb8d1c">convolve_3x3&lt; 2 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:a2247cf9504428f406ed4da244fdb8d1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0766fc0a98f3257e3867ac59fb97d5f"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ab0766fc0a98f3257e3867ac59fb97d5f"><td class="memTemplItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ab0766fc0a98f3257e3867ac59fb97d5f">convolve_3x3&lt; 3 &gt;</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</td></tr>
<tr class="separator:ab0766fc0a98f3257e3867ac59fb97d5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="memdesc:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores a float32x4x2_t array into a memory location.  <a href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">More...</a><br /></td></tr>
<tr class="separator:a1ac67082e6f68cb7ed1939240fb6bdb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad61a01ef06cc3c41e4bb5006d9307687"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ad61a01ef06cc3c41e4bb5006d9307687"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt; 1 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:ad61a01ef06cc3c41e4bb5006d9307687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaf3037739c190361ad3f827d73440a1"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:abaf3037739c190361ad3f827d73440a1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt; 2 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:abaf3037739c190361ad3f827d73440a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a208468ac4ffbfe19d7fb03402ca927f6"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a208468ac4ffbfe19d7fb03402ca927f6"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt; 3 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:a208468ac4ffbfe19d7fb03402ca927f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8ad28c706dc842c9d532e04ed697f0d"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:ab8ad28c706dc842c9d532e04ed697f0d"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">get_input_num_elems_processed</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="separator:ab8ad28c706dc842c9d532e04ed697f0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae33bedf6d9e1e2ae3b1aecfb2f208239"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ae33bedf6d9e1e2ae3b1aecfb2f208239"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae33bedf6d9e1e2ae3b1aecfb2f208239">get_input_num_elems_processed&lt; 1 &gt;</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="separator:ae33bedf6d9e1e2ae3b1aecfb2f208239"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22d6b72269d8825fc5eb711905af0828"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a22d6b72269d8825fc5eb711905af0828"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a22d6b72269d8825fc5eb711905af0828">get_input_num_elems_processed&lt; 2 &gt;</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="separator:a22d6b72269d8825fc5eb711905af0828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4de2861bd9a1fefa1424e4454cb6805e"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a4de2861bd9a1fefa1424e4454cb6805e"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a4de2861bd9a1fefa1424e4454cb6805e">get_input_num_elems_processed&lt; 3 &gt;</a> (unsigned int num_elems_written_per_iteration)</td></tr>
<tr class="separator:a4de2861bd9a1fefa1424e4454cb6805e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5db34f1ae85326efebbe1dadb65f0301"><td class="memItemLeft" align="right" valign="top">float32x4x3_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a5db34f1ae85326efebbe1dadb65f0301">load_matrix_row</a> (const float *ptr, int weights_offset=0)</td></tr>
<tr class="memdesc:a5db34f1ae85326efebbe1dadb65f0301"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads a 3x3 matrix as a row (float).  <a href="namespacearm__compute_1_1detail.xhtml#a5db34f1ae85326efebbe1dadb65f0301">More...</a><br /></td></tr>
<tr class="separator:a5db34f1ae85326efebbe1dadb65f0301"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d22164f804124f911636193e4c10e6"><td class="memTemplParams" colspan="2">template&lt;typename T , ARM_COMPUTE_REQUIRES_TA(std::is_same&lt; T, uint8_t &gt;::value||std::is_same&lt; T, int8_t &gt;::value) &gt; </td></tr>
<tr class="memitem:a87d22164f804124f911636193e4c10e6"><td class="memTemplItemLeft" align="right" valign="top">int32x4x3_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a87d22164f804124f911636193e4c10e6">load_matrix_row</a> (const T *ptr, int weights_offset=0)</td></tr>
<tr class="memdesc:a87d22164f804124f911636193e4c10e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads a 3x3 matrix as a row (uint8_t/int8_t).  <a href="namespacearm__compute_1_1detail.xhtml#a87d22164f804124f911636193e4c10e6">More...</a><br /></td></tr>
<tr class="separator:a87d22164f804124f911636193e4c10e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9f26cd83047a111336033fb7466faf1"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:aa9f26cd83047a111336033fb7466faf1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="memdesc:aa9f26cd83047a111336033fb7466faf1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores a uint32_t array into a memory location.  <a href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">More...</a><br /></td></tr>
<tr class="separator:aa9f26cd83047a111336033fb7466faf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a143f43b1fb56a8d806145e95d4c3995e"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a143f43b1fb56a8d806145e95d4c3995e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a143f43b1fb56a8d806145e95d4c3995e">store_results&lt; 1 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:a143f43b1fb56a8d806145e95d4c3995e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af63e34203346681c35b68fcca2026a06"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:af63e34203346681c35b68fcca2026a06"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#af63e34203346681c35b68fcca2026a06">store_results&lt; 2 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:af63e34203346681c35b68fcca2026a06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a991bde46f2841422fb98258127305050"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a991bde46f2841422fb98258127305050"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a991bde46f2841422fb98258127305050">store_results&lt; 3 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:a991bde46f2841422fb98258127305050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a707ebe432919e3b95fc164bc682a6a52"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a707ebe432919e3b95fc164bc682a6a52"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">accumulate_results</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:a707ebe432919e3b95fc164bc682a6a52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8412c50a5db2c94cc74cc899096c3556"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a8412c50a5db2c94cc74cc899096c3556"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">accumulate_results&lt; 1 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:a8412c50a5db2c94cc74cc899096c3556"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e42bf13e98e9df972c85e0789c20917"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a2e42bf13e98e9df972c85e0789c20917"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">accumulate_results&lt; 2 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:a2e42bf13e98e9df972c85e0789c20917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81988c246feb5c82855f969e072bce0b"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a81988c246feb5c82855f969e072bce0b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">accumulate_results&lt; 3 &gt;</a> (float *buffer, const float32x4x2_t &amp;values)</td></tr>
<tr class="separator:a81988c246feb5c82855f969e072bce0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31dcca2f3a7368cdd24e6a634b51de4b"><td class="memTemplParams" colspan="2">template&lt;unsigned int stridex&gt; </td></tr>
<tr class="memitem:a31dcca2f3a7368cdd24e6a634b51de4b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a31dcca2f3a7368cdd24e6a634b51de4b">accumulate_results</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:a31dcca2f3a7368cdd24e6a634b51de4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada0c5c8101ce3172ca465bb3ff6843b1"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ada0c5c8101ce3172ca465bb3ff6843b1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ada0c5c8101ce3172ca465bb3ff6843b1">accumulate_results&lt; 1 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:ada0c5c8101ce3172ca465bb3ff6843b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf4d4b5e75140c76124c95c0b28b28b7"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:acf4d4b5e75140c76124c95c0b28b28b7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#acf4d4b5e75140c76124c95c0b28b28b7">accumulate_results&lt; 2 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:acf4d4b5e75140c76124c95c0b28b28b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33b299a9a74e372d06b83c033958d428"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a33b299a9a74e372d06b83c033958d428"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a33b299a9a74e372d06b83c033958d428">accumulate_results&lt; 3 &gt;</a> (int32_t *buffer, const int32x4x2_t &amp;values)</td></tr>
<tr class="separator:a33b299a9a74e372d06b83c033958d428"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a703f0d5487e077348c2ac6bce80d9abb"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</td></tr>
<tr class="memdesc:a703f0d5487e077348c2ac6bce80d9abb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 4 consecutive elements on float32 when dilation.x() or dilation.y() is not 1.  <a href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">More...</a><br /></td></tr>
<tr class="separator:a703f0d5487e077348c2ac6bce80d9abb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd78cf020600423cd03654ca37776f87"><td class="memItemLeft" align="right" valign="top">float32x4x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#acd78cf020600423cd03654ca37776f87">convolve_3x3_dilation</a> (const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, unsigned int stridex, int input_offset=0)</td></tr>
<tr class="memdesc:acd78cf020600423cd03654ca37776f87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 8 consecutive elements on float32 when dilation.x() or dilation.y() is not 1.  <a href="namespacearm__compute_1_1detail.xhtml#acd78cf020600423cd03654ca37776f87">More...</a><br /></td></tr>
<tr class="separator:acd78cf020600423cd03654ca37776f87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d385d5e688ccef1d42c7d9285fb0d03"><td class="memTemplParams" colspan="2">template&lt;bool accumulate&gt; </td></tr>
<tr class="memitem:a3d385d5e688ccef1d42c7d9285fb0d03"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a3d385d5e688ccef1d42c7d9285fb0d03">convolve_3x3</a> (const float *in_top, const float *in_mid, const float *in_low, float *out_ptr, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, unsigned int stridex, int input_offset=0)</td></tr>
<tr class="memdesc:a3d385d5e688ccef1d42c7d9285fb0d03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a convolve3x3 on float32.  <a href="namespacearm__compute_1_1detail.xhtml#a3d385d5e688ccef1d42c7d9285fb0d03">More...</a><br /></td></tr>
<tr class="separator:a3d385d5e688ccef1d42c7d9285fb0d03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae63552b4bf3d8bda8762cf39c8082ce0"><td class="memTemplParams" colspan="2">template&lt;typename T , ARM_COMPUTE_REQUIRES_TA(std::is_same&lt; T, uint8_t &gt;::value||std::is_same&lt; T, int8_t &gt;::value) &gt; </td></tr>
<tr class="memitem:ae63552b4bf3d8bda8762cf39c8082ce0"><td class="memTemplItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">single_convolve_3x3_dilation</a> (const T *in_top, const T *in_mid, const T *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, size_t dilation_x, int32_t input_offset)</td></tr>
<tr class="memdesc:ae63552b4bf3d8bda8762cf39c8082ce0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 4 consecutive 8-bit elements when dilation.x() or dilation.y() is not 1.  <a href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">More...</a><br /></td></tr>
<tr class="separator:ae63552b4bf3d8bda8762cf39c8082ce0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3714766fb92e59c3264d5a981e58d7ee"><td class="memTemplParams" colspan="2">template&lt;typename T , ARM_COMPUTE_REQUIRES_TA(std::is_same&lt; T, uint8_t &gt;::value||std::is_same&lt; T, int8_t &gt;::value) &gt; </td></tr>
<tr class="memitem:a3714766fb92e59c3264d5a981e58d7ee"><td class="memTemplItemLeft" align="right" valign="top">int32x4x2_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a3714766fb92e59c3264d5a981e58d7ee">convolve_3x3_dilation</a> (const T *in_top, const T *in_mid, const T *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, const size_t dilation_x, unsigned int stridex, int input_offset)</td></tr>
<tr class="memdesc:a3714766fb92e59c3264d5a981e58d7ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a 3x3 convolution for 4 consecutive 8-bit elements when dilation.x() or dilation.y() is not 1.  <a href="namespacearm__compute_1_1detail.xhtml#a3714766fb92e59c3264d5a981e58d7ee">More...</a><br /></td></tr>
<tr class="separator:a3714766fb92e59c3264d5a981e58d7ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7917579d8077eb6d044b63f675409cd"><td class="memTemplParams" colspan="2">template&lt;bool accumulate, typename T1 , typename T2 , ARM_COMPUTE_REQUIRES_TA(std::is_same&lt; T1, uint8_t &gt;::value||std::is_same&lt; T1, int8_t &gt;::value) &gt; </td></tr>
<tr class="memitem:ab7917579d8077eb6d044b63f675409cd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#ab7917579d8077eb6d044b63f675409cd">convolve_3x3</a> (const T1 *in_top, const T1 *in_mid, const T1 *in_low, T2 *out_ptr, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, unsigned int stridex, int32_t input_offset)</td></tr>
<tr class="memdesc:ab7917579d8077eb6d044b63f675409cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a convolve3x3 on 8-bit elements.  <a href="namespacearm__compute_1_1detail.xhtml#ab7917579d8077eb6d044b63f675409cd">More...</a><br /></td></tr>
<tr class="separator:ab7917579d8077eb6d044b63f675409cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17a8ccb1f281296a0ee7eb00693febbd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1detail.xhtml#a17a8ccb1f281296a0ee7eb00693febbd">get_input_num_elems_processed</a> (unsigned int num_elems_written_per_iteration, unsigned int stridex)</td></tr>
<tr class="memdesc:a17a8ccb1f281296a0ee7eb00693febbd"><td class="mdescLeft">&#160;</td><td class="mdescRight">__ARM_FEATURE_FP16_VECTOR_ARITHMETIC  <a href="namespacearm__compute_1_1detail.xhtml#a17a8ccb1f281296a0ee7eb00693febbd">More...</a><br /></td></tr>
<tr class="separator:a17a8ccb1f281296a0ee7eb00693febbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a2c0ee4eb5bed32d6fb8358d113995aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c0ee4eb5bed32d6fb8358d113995aa4">&#9670;&nbsp;</a></span>ObjectType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4">ObjectType</a> : uint32_t</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>&lt; Object type enumerations </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a2c0ee4eb5bed32d6fb8358d113995aa4aad4e206408c1c59bfb8a057ba7857446"></a>Context&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a2c0ee4eb5bed32d6fb8358d113995aa4a722ad2d05ecf4868b00c5484b82fd808"></a>Queue&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"></a>Tensor&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad"></a>TensorPack&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf"></a>Operator&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a2c0ee4eb5bed32d6fb8358d113995aa4a4bbb8f967da6d1a610596d7257179c2b"></a>Invalid&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_object_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_object_8h_source.xhtml">Object.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                      : uint32_t</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4aad4e206408c1c59bfb8a057ba7857446">Context</a>    = 1,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4a722ad2d05ecf4868b00c5484b82fd808">Queue</a>      = 2,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">Tensor</a>     = 3,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad">TensorPack</a> = 4,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">Operator</a>   = 5,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4a4bbb8f967da6d1a610596d7257179c2b">Invalid</a>    = 0x56DEAD78</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a707ebe432919e3b95fc164bc682a6a52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a707ebe432919e3b95fc164bc682a6a52">&#9670;&nbsp;</a></span>accumulate_results() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::detail::accumulate_results </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a31dcca2f3a7368cdd24e6a634b51de4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31dcca2f3a7368cdd24e6a634b51de4b">&#9670;&nbsp;</a></span>accumulate_results() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::detail::accumulate_results </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8412c50a5db2c94cc74cc899096c3556"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8412c50a5db2c94cc74cc899096c3556">&#9670;&nbsp;</a></span>accumulate_results&lt; 1 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">arm_compute::detail::accumulate_results</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00132">132</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    vst1q_f32(buffer, vaddq_f32(vld1q_f32(buffer), values.val[0]));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    vst1q_f32(buffer + 4, vaddq_f32(vld1q_f32(buffer + 4), values.val[1]));</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00335">convolve_3x3()</a>.</p>

</div>
</div>
<a id="ada0c5c8101ce3172ca465bb3ff6843b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada0c5c8101ce3172ca465bb3ff6843b1">&#9670;&nbsp;</a></span>accumulate_results&lt; 1 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">arm_compute::detail::accumulate_results</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00154">154</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    vst1q_s32(buffer, vaddq_s32(vld1q_s32(buffer), values.val[0]));</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    vst1q_s32(buffer + 4, vaddq_s32(vld1q_s32(buffer + 4), values.val[1]));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2e42bf13e98e9df972c85e0789c20917"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e42bf13e98e9df972c85e0789c20917">&#9670;&nbsp;</a></span>accumulate_results&lt; 2 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">arm_compute::detail::accumulate_results</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00139">139</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    vst1q_f32(buffer, vaddq_f32(vld1q_f32(buffer), values.val[0]));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00335">convolve_3x3()</a>.</p>

</div>
</div>
<a id="acf4d4b5e75140c76124c95c0b28b28b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf4d4b5e75140c76124c95c0b28b28b7">&#9670;&nbsp;</a></span>accumulate_results&lt; 2 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">arm_compute::detail::accumulate_results</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00161">161</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    vst1q_s32(buffer, vaddq_s32(vld1q_s32(buffer), values.val[0]));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a81988c246feb5c82855f969e072bce0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81988c246feb5c82855f969e072bce0b">&#9670;&nbsp;</a></span>accumulate_results&lt; 3 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">arm_compute::detail::accumulate_results</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00145">145</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    vst1_f32(buffer, vadd_f32(vld1_f32(buffer), vget_low_f32(values.val[0])));</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00335">convolve_3x3()</a>.</p>

</div>
</div>
<a id="a33b299a9a74e372d06b83c033958d428"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33b299a9a74e372d06b83c033958d428">&#9670;&nbsp;</a></span>accumulate_results&lt; 3 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">arm_compute::detail::accumulate_results</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00167">167</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    vst1_s32(buffer, vadd_s32(vld1_s32(buffer), vget_low_s32(values.val[0])));</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae0ac96f6dc2901725a408c5d4ae11ccf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0ac96f6dc2901725a408c5d4ae11ccf">&#9670;&nbsp;</a></span>convert_to_activation_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> convert_to_activation_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_acl_activation_descriptor.xhtml">AclActivationDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert an AclActivation descriptor to an internal one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">desc</td><td>Descriptor to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Legacy tensor meta-data </dd></dl>

<p class="definition">Definition at line <a class="el" href="_legacy_support_8cpp_source.xhtml#l00108">108</a> of file <a class="el" href="_legacy_support_8cpp_source.xhtml">LegacySupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">switch</span> (desc.<a class="code" href="struct_acl_activation_descriptor.xhtml#a87b8b07820c2b0bdc28e9160d2c74491">type</a>)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caaca45ca22ecf96e8617763ce8e5c91c6e">AclActivationType::AclIdentity</a>:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            act = ActivationLayerInfo::ActivationFunction::IDENTITY;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa4520f3b9a2b15a38efb5212ba1761497">AclActivationType::AclLogistic</a>:</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            act = ActivationLayerInfo::ActivationFunction::LOGISTIC;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caac83260c0ed4deb793ef88a061fe74317">AclActivationType::AclTanh</a>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            act = ActivationLayerInfo::ActivationFunction::TANH;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caad91c6d00fb26edb66d8486b66f02db61">AclActivationType::AclRelu</a>:</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            act = ActivationLayerInfo::ActivationFunction::RELU;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa78ed1b379c19d6cfdf947562bc6731d1">AclActivationType::AclBoundedRelu</a>:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            act = ActivationLayerInfo::ActivationFunction::BOUNDED_RELU;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa3d93552309a4290b346c9055752ef33c">AclActivationType::AclLuBoundedRelu</a>:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            act = ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caabe5350250b1cc2492ad88f4af421a672">AclActivationType::AclLeakyRelu</a>:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            act = ActivationLayerInfo::ActivationFunction::LEAKY_RELU;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caad41cee117604b3ef2c329734b5391d4f">AclActivationType::AclSoftRelu</a>:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            act = ActivationLayerInfo::ActivationFunction::SOFT_RELU;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa7e2a3789619fd54e3e11e2982ed3c477">AclActivationType::AclElu</a>:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            act = ActivationLayerInfo::ActivationFunction::ELU;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa24815289633f0f4f5365a975fcef1175">AclActivationType::AclAbs</a>:</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            act = ActivationLayerInfo::ActivationFunction::ABS;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa20db717bd267e4ed44c61fb7451f869d">AclActivationType::AclSquare</a>:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            act = ActivationLayerInfo::ActivationFunction::SQUARE;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa6103f6803b6d1875ae40581d93586cb1">AclActivationType::AclSqrt</a>:</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            act = ActivationLayerInfo::ActivationFunction::SQRT;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caae015533cf8e6337412ee8fec8443e22d">AclActivationType::AclLinear</a>:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            act = ActivationLayerInfo::ActivationFunction::LINEAR;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa5a2544c0ca618698072f24da1eb09200">AclActivationType::AclHardSwish</a>:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            act = ActivationLayerInfo::ActivationFunction::HARD_SWISH;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">return</span> ActivationLayerInfo();</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> ActivationLayerInfo(act, desc.<a class="code" href="struct_acl_activation_descriptor.xhtml#a4aec1a5be9d9a4a394a2e49e9744286e">a</a>, desc.<a class="code" href="struct_acl_activation_descriptor.xhtml#a83fc1af92e29717b4513d121b0c72c7d">b</a>);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_acl_descriptors_8h_source.xhtml#l00056">AclActivationDescriptor::a</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00045">AclAbs</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00040">AclBoundedRelu</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00044">AclElu</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00049">AclHardSwish</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00036">AclIdentity</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00042">AclLeakyRelu</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00048">AclLinear</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00037">AclLogistic</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00041">AclLuBoundedRelu</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00039">AclRelu</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00043">AclSoftRelu</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00047">AclSqrt</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00046">AclSquare</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00038">AclTanh</a>, <a class="el" href="_acl_descriptors_8h_source.xhtml#l00057">AclActivationDescriptor::b</a>, and <a class="el" href="_acl_descriptors_8h_source.xhtml#l00055">AclActivationDescriptor::type</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_activation_8cpp_source.xhtml#l00059">CpuContext::create_activation()</a>, and <a class="el" href="_cl_activation_8cpp_source.xhtml#l00058">ClContext::create_activation()</a>.</p>

</div>
</div>
<a id="ac2c7e9f89c3f0e2b800d85ee6697f874"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2c7e9f89c3f0e2b800d85ee6697f874">&#9670;&nbsp;</a></span>convert_to_descriptor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> convert_to_descriptor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a legacy tensor meta-data to a descriptor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Legacy tensor meta-data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A converted descriptor </dd></dl>

<p class="definition">Definition at line <a class="el" href="_legacy_support_8cpp_source.xhtml#l00100">100</a> of file <a class="el" href="_legacy_support_8cpp_source.xhtml">LegacySupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>          num_dims = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_dimensions();</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> desc{<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(num_dims), create_tensor_shape_array(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>),</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                             convert_to_c_data_type(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.data_type()), <span class="keyword">nullptr</span>, 0};</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> desc;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_tensor_v2_8cpp_source.xhtml#l00037">ITensorV2::get_descriptor()</a>.</p>

</div>
</div>
<a id="a5d2ed5b1a1b431473e20ccffb16876be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d2ed5b1a1b431473e20ccffb16876be">&#9670;&nbsp;</a></span>convert_to_legacy_tensor_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> convert_to_legacy_tensor_info </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a descriptor to a legacy format one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">desc</td><td>Descriptor to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Legacy tensor meta-data </dd></dl>

<p class="definition">Definition at line <a class="el" href="_legacy_support_8cpp_source.xhtml#l00092">92</a> of file <a class="el" href="_legacy_support_8cpp_source.xhtml">LegacySupport.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    TensorInfo legacy_desc;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    legacy_desc.init(create_legacy_tensor_shape(desc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#aa38273bb50d742d3862669ae4839b807">ndims</a>, desc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#a3daf61aa16ccaec801090f1e898051e8">shape</a>), 1,</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                     convert_to_legacy_data_type(desc.<a class="code" href="struct_acl_tensor_descriptor.xhtml#aeb8b7e1875910e807e1e4e59bf089dfb">data_type</a>));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> legacy_desc;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_acl_types_8h_source.xhtml#l00196">AclTensorDescriptor::data_type</a>, <a class="el" href="src_2core_2_tensor_info_8cpp_source.xhtml#l00137">TensorInfo::init()</a>, <a class="el" href="_acl_types_8h_source.xhtml#l00194">AclTensorDescriptor::ndims</a>, and <a class="el" href="_acl_types_8h_source.xhtml#l00195">AclTensorDescriptor::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="gpu_2cl_2_cl_tensor_8cpp_source.xhtml#l00034">ClTensor::ClTensor()</a>, <a class="el" href="_cpu_tensor_8cpp_source.xhtml#l00032">CpuTensor::CpuTensor()</a>, <a class="el" href="_cpu_activation_8cpp_source.xhtml#l00059">CpuContext::create_activation()</a>, and <a class="el" href="_cl_activation_8cpp_source.xhtml#l00058">ClContext::create_activation()</a>.</p>

</div>
</div>
<a id="a87f8e27c52a10ec90100fd5b0fcf663d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87f8e27c52a10ec90100fd5b0fcf663d">&#9670;&nbsp;</a></span>convolve_3x3() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::detail::convolve_3x3 </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d385d5e688ccef1d42c7d9285fb0d03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d385d5e688ccef1d42c7d9285fb0d03">&#9670;&nbsp;</a></span>convolve_3x3() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void convolve_3x3 </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>out_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>stridex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a convolve3x3 on float32. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out_ptr</td><td>Pointer to the output. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stridex</td><td>Stride value in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>(Optional) Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00335">335</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    float32x4x2_t out = {{vdupq_n_f32(0.f), vdupq_n_f32(0.f)}};</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keyword">const</span> float32x4x2_t vtop     = vld2q_f32(in_top);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keyword">const</span> float32x4x2_t vmid     = vld2q_f32(in_mid);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keyword">const</span> float32x4x2_t vlow     = vld2q_f32(in_low);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keyword">const</span> float32x4_t   vtop_end = vld1q_f32(in_top + 8);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keyword">const</span> float32x4_t   vmid_end = vld1q_f32(in_mid + 8);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keyword">const</span> float32x4_t   vlow_end = vld1q_f32(in_low + 8);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        out.val[0] = vmulq_f32(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vtop.val[1], m0.val[1]);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop_end, 1), m0.val[2]);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vmid.val[1], m1.val[1]);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid_end, 1), m1.val[2]);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vlow.val[1], m2.val[1]);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow_end, 1), m2.val[2]);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#acf4d4b5e75140c76124c95c0b28b28b7">accumulate_results&lt;2&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a>&lt;2&gt;(out_ptr, out);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keyword">const</span> float32x4x3_t vtop = {{vld1q_f32(in_top), vld1q_f32(in_top + 4), vld1q_f32(in_top + 8)}};</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keyword">const</span> float32x4x3_t vmid = {{vld1q_f32(in_mid), vld1q_f32(in_mid + 4), vld1q_f32(in_mid + 8)}};</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keyword">const</span> float32x4x3_t vlow = {{vld1q_f32(in_low), vld1q_f32(in_low + 4), vld1q_f32(in_low + 8)}};</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        out.val[0]               = vmulq_f32(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        out.val[1]               = vmulq_f32(vtop.val[1], m0.val[0]);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 1), m0.val[1]);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 2), m0.val[2]);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 1), m1.val[1]);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 2), m1.val[2]);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 1), m2.val[1]);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 2), m2.val[2]);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 1), m0.val[1]);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 2), m0.val[2]);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vmid.val[1], m1.val[0]);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 1), m1.val[1]);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 2), m1.val[2]);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vlow.val[1], m2.val[0]);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 1), m2.val[1]);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 2), m2.val[2]);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a33b299a9a74e372d06b83c033958d428">accumulate_results&lt;3&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a>&lt;3&gt;(out_ptr, out);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#ada0c5c8101ce3172ca465bb3ff6843b1">accumulate_results&lt;1&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a>&lt;1&gt;(out_ptr, out);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00132">accumulate_results&lt; 1 &gt;()</a>, <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00139">accumulate_results&lt; 2 &gt;()</a>, <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00145">accumulate_results&lt; 3 &gt;()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00116">store_results&lt; 1 &gt;()</a>, <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00123">store_results&lt; 2 &gt;()</a>, and <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00129">store_results&lt; 3 &gt;()</a>.</p>

</div>
</div>
<a id="ab7917579d8077eb6d044b63f675409cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7917579d8077eb6d044b63f675409cd">&#9670;&nbsp;</a></span>convolve_3x3() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::detail::convolve_3x3 </td>
          <td>(</td>
          <td class="paramtype">const T1 *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T1 *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T1 *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 *&#160;</td>
          <td class="paramname"><em>out_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>stridex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a convolve3x3 on 8-bit elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">out_ptr</td><td>Pointer to the output. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stridex</td><td>Stride value in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00539">539</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">using</span> VectorType    = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T1, uint8_t&gt;::value, uint8x8x2_t, int8x8x2_t&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">using</span> OutputTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;int32_t, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keyword">const</span> int32x4_t v_input_offset = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(input_offset, OutputTagType{});</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keyword">const</span> VectorType vtop = {{<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top + 8)}};</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> VectorType vmid = {{<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid + 8)}};</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">const</span> VectorType vlow = {{<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low + 8)}};</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160; </div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keyword">const</span> int32x4x3_t vtop_s32 = {{</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[0])))),</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[0])))),</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[1])))),</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    }};</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keyword">const</span> int32x4x3_t vmid_s32 = {{</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[0])))),</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[0])))),</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[1])))),</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }};</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keyword">const</span> int32x4x3_t vlow_s32 = {{</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[0])))),</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[0])))),</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[1])))),</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }};</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    int32x4x2_t out{{</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(0), OutputTagType{}),</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(0), OutputTagType{}),</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    }};</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160; </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="comment">// 0</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], vtop_s32.val[0], m0.val[0]);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vtop_s32.val[0], vtop_s32.val[1]), m0.val[1]);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vtop_s32.val[0], vtop_s32.val[1]), m0.val[2]);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; </div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], vmid_s32.val[0], m1.val[0]);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vmid_s32.val[0], vmid_s32.val[1]), m1.val[1]);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vmid_s32.val[0], vmid_s32.val[1]), m1.val[2]);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160; </div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], vlow_s32.val[0], m2.val[0]);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vlow_s32.val[0], vlow_s32.val[1]), m2.val[1]);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vlow_s32.val[0], vlow_s32.val[1]), m2.val[2]);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160; </div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">// 1</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], vtop_s32.val[1], m0.val[0]);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vtop_s32.val[1], vtop_s32.val[2]), m0.val[1]);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vtop_s32.val[1], vtop_s32.val[2]), m0.val[2]);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], vmid_s32.val[1], m1.val[0]);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vmid_s32.val[1], vmid_s32.val[2]), m1.val[1]);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vmid_s32.val[1], vmid_s32.val[2]), m1.val[2]);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], vlow_s32.val[1], m2.val[0]);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vlow_s32.val[1], vlow_s32.val[2]), m2.val[1]);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vlow_s32.val[1], vlow_s32.val[2]), m2.val[2]);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">if</span> (stridex == 1)</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#ada0c5c8101ce3172ca465bb3ff6843b1">accumulate_results&lt;1&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a>&lt;1&gt;(out_ptr, out);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 0), out.val[0], 2);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 2), out.val[0], 3);</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#acf4d4b5e75140c76124c95c0b28b28b7">accumulate_results&lt;2&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a>&lt;2&gt;(out_ptr, out);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    {</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a33b299a9a74e372d06b83c033958d428">accumulate_results&lt;3&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">store_results</a>&lt;3&gt;(out_ptr, out);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00132">accumulate_results&lt; 1 &gt;()</a>, <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00139">accumulate_results&lt; 2 &gt;()</a>, <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00145">accumulate_results&lt; 3 &gt;()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00116">store_results&lt; 1 &gt;()</a>, <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00123">store_results&lt; 2 &gt;()</a>, <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00129">store_results&lt; 3 &gt;()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00107">arm_compute::wrapper::vaddw()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="ext_8h_source.xhtml#l00039">arm_compute::wrapper::vext_1()</a>, <a class="el" href="ext_8h_source.xhtml#l00040">arm_compute::wrapper::vext_2()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="reinterpret_8h_source.xhtml#l00044">arm_compute::wrapper::vreinterpret()</a>, and <a class="el" href="setlane_8h_source.xhtml#l00091">arm_compute::wrapper::vsetlane()</a>.</p>

</div>
</div>
<a id="a5d9c87411d51689909ba746f88bcff56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d9c87411d51689909ba746f88bcff56">&#9670;&nbsp;</a></span>convolve_3x3&lt; 1 &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00049">49</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> float32x4x3_t vtop = {{vld1q_f32(in_top), vld1q_f32(in_top + 4), vld1q_f32(in_top + 8)}};</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> float32x4x3_t vmid = {{vld1q_f32(in_mid), vld1q_f32(in_mid + 4), vld1q_f32(in_mid + 8)}};</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> float32x4x3_t vlow = {{vld1q_f32(in_low), vld1q_f32(in_low + 4), vld1q_f32(in_low + 8)}};</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    float32x4x2_t       out  = {{vmulq_f32(vtop.val[0], m0.val[0]), vmulq_f32(vtop.val[1], m0.val[0])}};</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    out.val[0]               = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 1), m0.val[1]);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    out.val[0]               = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 2), m0.val[2]);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 1), m1.val[1]);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 2), m1.val[2]);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 1), m2.val[1]);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 2), m2.val[2]);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 1), m0.val[1]);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 2), m0.val[2]);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vmid.val[1], m1.val[0]);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 1), m1.val[1]);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 2), m1.val[2]);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vlow.val[1], m2.val[0]);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 1), m2.val[1]);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 2), m2.val[2]);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00085">convolve_3x3&lt; 2 &gt;()</a>, and <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00100">convolve_3x3&lt; 3 &gt;()</a>.</p>

</div>
</div>
<a id="a2247cf9504428f406ed4da244fdb8d1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2247cf9504428f406ed4da244fdb8d1c">&#9670;&nbsp;</a></span>convolve_3x3&lt; 2 &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00085">85</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 0), out.val[0], 2);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 2), out.val[0], 3);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00049">convolve_3x3&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="ab0766fc0a98f3257e3867ac59fb97d5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0766fc0a98f3257e3867ac59fb97d5f">&#9670;&nbsp;</a></span>convolve_3x3&lt; 3 &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t <a class="el" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00100">100</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    float32x4x2_t out = <a class="code" href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">convolve_3x3&lt;1&gt;</a>(in_top, in_mid, in_low, m0, m1, m2);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    out.val[0]        = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00049">convolve_3x3&lt; 1 &gt;()</a>.</p>

</div>
</div>
<a id="acd78cf020600423cd03654ca37776f87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd78cf020600423cd03654ca37776f87">&#9670;&nbsp;</a></span>convolve_3x3_dilation() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x2_t arm_compute::detail::convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>stridex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 8 consecutive elements on float32 when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stridex</td><td>Stride value in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>(Optional) Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00281">281</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    float32x4x2_t out = {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        {<a class="code" href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">single_convolve_3x3_dilation</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset),</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;         <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">single_convolve_3x3_dilation</a>(in_top + 4, in_mid + 4, in_low + 4, m0, m1, m2, dilation_x, input_offset)}};</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 0), out.val[0], 2);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 2), out.val[0], 3);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00236">single_convolve_3x3_dilation()</a>.</p>

</div>
</div>
<a id="a3714766fb92e59c3264d5a981e58d7ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3714766fb92e59c3264d5a981e58d7ee">&#9670;&nbsp;</a></span>convolve_3x3_dilation() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x2_t arm_compute::detail::convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>stridex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 4 consecutive 8-bit elements when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stridex</td><td>Stride value in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00494">494</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    int32x4x2_t out = {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        {<a class="code" href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">single_convolve_3x3_dilation</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset),</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;         <a class="code" href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">single_convolve_3x3_dilation</a>(in_top + 4, in_mid + 4, in_low + 4, m0, m1, m2, dilation_x, input_offset)}};</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160; </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 0), out.val[0], 2);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 2), out.val[0], 3);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    {</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00236">single_convolve_3x3_dilation()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, and <a class="el" href="setlane_8h_source.xhtml#l00091">arm_compute::wrapper::vsetlane()</a>.</p>

</div>
</div>
<a id="a94a5ba47c282279f5279617b961b8599"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94a5ba47c282279f5279617b961b8599">&#9670;&nbsp;</a></span>for_each_error() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::detail::for_each_error </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00108">108</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00280">arm_compute::error_on_mismatching_dimensions()</a>, and <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00114">for_each_error()</a>.</p>

</div>
</div>
<a id="a2fa22dee7227625fa4516f267235667c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fa22dee7227625fa4516f267235667c">&#9670;&nbsp;</a></span>for_each_error() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a> arm_compute::detail::for_each_error </td>
          <td>(</td>
          <td class="paramtype">F &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>arg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00114">114</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(func(arg));</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1detail.xhtml#a2fa22dee7227625fa4516f267235667c">for_each_error</a>(func, <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>...));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a>{};</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, <a class="el" href="_error_8h_source.xhtml#l00205">ARM_COMPUTE_RETURN_ON_ERROR</a>, and <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00108">for_each_error()</a>.</p>

</div>
</div>
<a id="ab8ad28c706dc842c9d532e04ed697f0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8ad28c706dc842c9d532e04ed697f0d">&#9670;&nbsp;</a></span>get_input_num_elems_processed() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::detail::get_input_num_elems_processed </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a17a8ccb1f281296a0ee7eb00693febbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17a8ccb1f281296a0ee7eb00693febbd">&#9670;&nbsp;</a></span>get_input_num_elems_processed() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::detail::get_input_num_elems_processed </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>stridex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>__ARM_FEATURE_FP16_VECTOR_ARITHMETIC </p>
<p>Get the number of elements processed on 3x3 convolution.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_elems_written_per_iteration</td><td>Number of elements written per iteration on 3x3 convolution. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stridex</td><td>Stride value in elements across x.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of elements processed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00830">830</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;{</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="keywordflow">switch</span> (stridex)</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    {</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="keywordflow">case</span> 1:</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            <span class="keywordflow">return</span> num_elems_written_per_iteration;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        <span class="keywordflow">case</span> 2:</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="keywordflow">return</span> num_elems_written_per_iteration &lt;&lt; 1;</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        <span class="keywordflow">case</span> 3:</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="keywordflow">return</span> num_elems_written_per_iteration * 3;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;stridex not supported&quot;</span>);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>.</p>

</div>
</div>
<a id="ae33bedf6d9e1e2ae3b1aecfb2f208239"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae33bedf6d9e1e2ae3b1aecfb2f208239">&#9670;&nbsp;</a></span>get_input_num_elems_processed&lt; 1 &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">arm_compute::detail::get_input_num_elems_processed</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00138">138</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a22d6b72269d8825fc5eb711905af0828"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22d6b72269d8825fc5eb711905af0828">&#9670;&nbsp;</a></span>get_input_num_elems_processed&lt; 2 &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">arm_compute::detail::get_input_num_elems_processed</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00144">144</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration &lt;&lt; 1;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4de2861bd9a1fefa1424e4454cb6805e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4de2861bd9a1fefa1424e4454cb6805e">&#9670;&nbsp;</a></span>get_input_num_elems_processed&lt; 3 &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">arm_compute::detail::get_input_num_elems_processed</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_elems_written_per_iteration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00150">150</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> num_elems_written_per_iteration * 3;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a45d610a8bc262f7007c934293361e888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45d610a8bc262f7007c934293361e888">&#9670;&nbsp;</a></span>have_different_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::detail::have_different_dimensions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dim1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_dimensions.xhtml">Dimensions</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>dim2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>upper_dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00051">51</a> of file <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml">Validate.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = upper_dim; i &lt; arm_compute::Dimensions&lt;T&gt;::num_max_dimensions; ++i)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (dim1[i] != dim2[i])</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_group_8cpp_source.xhtml#l00039">GpuKernelComponentGroup::add_component()</a>, <a class="el" href="reference_2_batch_to_space_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::batch_to_space()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00093">compare_dimension&lt; T &gt;::operator()()</a>, <a class="el" href="_gpu_operator_group_8cpp_source.xhtml#l00066">GpuOperatorGroup::try_add_operator()</a>, <a class="el" href="_n_e_logical_kernel_8cpp_source.xhtml#l00295">NELogicalKernel::validate()</a>, and <a class="el" href="_cl_component_elementwise_binary_8cpp_source.xhtml#l00044">ClComponentElementwiseBinary::validate()</a>.</p>

</div>
</div>
<a id="afaba543670e99c2483e0bd1996201ba3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaba543670e99c2483e0bd1996201ba3">&#9670;&nbsp;</a></span>load_matrix_row() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x3_t arm_compute::detail::load_matrix_row </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00034">34</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> float32x4x3_t r = {{vld1q_dup_f32(ptr), vld1q_dup_f32(1 + ptr), vld1q_dup_f32(2 + ptr)}};</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5db34f1ae85326efebbe1dadb65f0301"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5db34f1ae85326efebbe1dadb65f0301">&#9670;&nbsp;</a></span>load_matrix_row() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x3_t arm_compute::detail::load_matrix_row </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>weights_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads a 3x3 matrix as a row (float). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to a float 3x3 matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_offset</td><td>(Optional) Weights quantization offset.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The loaded matrix. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(weights_offset);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> float32x4x3_t r = {{vld1q_dup_f32(ptr), vld1q_dup_f32(1 + ptr), vld1q_dup_f32(2 + ptr)}};</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a87d22164f804124f911636193e4c10e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87d22164f804124f911636193e4c10e6">&#9670;&nbsp;</a></span>load_matrix_row() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4x3_t arm_compute::detail::load_matrix_row </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>weights_offset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads a 3x3 matrix as a row (uint8_t/int8_t). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to a uint8_t/int8_t 3x3 matrix. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_offset</td><td>(Optional) Weights quantization offset.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The loaded matrix. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00060">60</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> int32x4_t v_weights_offset = vdupq_n_s32(weights_offset);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">/* ptr is a pointer to a row in a 3x3 matrix, the function returns 3 vectors holding exactly the same value in all lanes:</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">       r.val[0] contains the first element, r.val[1] the second element and r.val[2] the third element (in all lanes) */</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    int32x4x3_t r = {{vaddq_s32(v_weights_offset, vdupq_n_s32(*ptr)),</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                      vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 1))),</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                      vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 2)))}};</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a703f0d5487e077348c2ac6bce80d9abb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a703f0d5487e077348c2ac6bce80d9abb">&#9670;&nbsp;</a></span>single_convolve_3x3_dilation() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::detail::single_convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 4 consecutive elements on float32 when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>(Optional) Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00236">236</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> float32x4x3_t vtop = {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        {vld1q_f32(in_top), vld1q_f32(in_top + dilation_x), vld1q_f32(in_top + 2 * dilation_x)}};</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> float32x4x3_t vmid = {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {vld1q_f32(in_mid), vld1q_f32(in_mid + dilation_x), vld1q_f32(in_mid + 2 * dilation_x)}};</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> float32x4x3_t vlow = {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        {vld1q_f32(in_low), vld1q_f32(in_low + dilation_x), vld1q_f32(in_low + 2 * dilation_x)}};</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    float32x4_t out = vmulq_f32(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    out             = vmlaq_f32(out, vtop.val[1], m0.val[1]);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    out             = vmlaq_f32(out, vtop.val[2], m0.val[2]);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    out = vmlaq_f32(out, vmid.val[0], m1.val[0]);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    out = vmlaq_f32(out, vmid.val[1], m1.val[1]);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    out = vmlaq_f32(out, vmid.val[2], m1.val[2]);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    out = vmlaq_f32(out, vlow.val[0], m2.val[0]);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    out = vmlaq_f32(out, vlow.val[1], m2.val[1]);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    out = vmlaq_f32(out, vlow.val[2], m2.val[2]);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00281">convolve_3x3_dilation()</a>.</p>

</div>
</div>
<a id="ae63552b4bf3d8bda8762cf39c8082ce0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae63552b4bf3d8bda8762cf39c8082ce0">&#9670;&nbsp;</a></span>single_convolve_3x3_dilation() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t arm_compute::detail::single_convolve_3x3_dilation </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>in_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>in_mid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>in_low</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x3_t &amp;&#160;</td>
          <td class="paramname"><em>m2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dilation_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>input_offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Perform a 3x3 convolution for 4 consecutive 8-bit elements when dilation.x() or dilation.y() is not 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">in_top</td><td>Pointer to the first row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_mid</td><td>Pointer to the second row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">in_low</td><td>Pointer to the third row of the input. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m0</td><td>First row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m1</td><td>Second row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m2</td><td>Third row of the filter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dilation_x</td><td>Dilation, in elements across x. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_offset</td><td>Input quantization offset. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00428">428</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">using</span> VectorType    = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T, uint8_t&gt;::value, uint8x8x3_t, int8x8x3_t&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">using</span> OutputTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;int32_t, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keyword">const</span> int32x4_t v_input_offset = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(input_offset, OutputTagType{});</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keyword">const</span> VectorType vtop = {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        {<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top + dilation_x), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top + 2 * dilation_x)}};</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> VectorType vmid = {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        {<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid + dilation_x), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid + 2 * dilation_x)}};</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> VectorType vlow = {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        {<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low + dilation_x), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low + 2 * dilation_x)}};</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">const</span> int32x4x3_t vtop_s32 = {{</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[0])))),</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[1])))),</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[2])))),</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }};</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> int32x4x3_t vmid_s32 = {{</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[0])))),</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[1])))),</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[2])))),</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }};</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keyword">const</span> int32x4x3_t vlow_s32 = {{</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[0])))),</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[1])))),</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[2])))),</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }};</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    int32x4_t out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vtop_s32.val[0], m0.val[0]);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    out           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vtop_s32.val[1], m0.val[1]);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    out           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vtop_s32.val[2], m0.val[2]);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vmid_s32.val[0], m1.val[0]);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vmid_s32.val[1], m1.val[1]);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vmid_s32.val[2], m1.val[2]);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vlow_s32.val[0], m2.val[0]);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vlow_s32.val[1], m2.val[1]);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vlow_s32.val[2], m2.val[2]);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160; </div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00107">arm_compute::wrapper::vaddw()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, and <a class="el" href="reinterpret_8h_source.xhtml#l00044">arm_compute::wrapper::vreinterpret()</a>.</p>

</div>
</div>
<a id="a1ac67082e6f68cb7ed1939240fb6bdb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ac67082e6f68cb7ed1939240fb6bdb5">&#9670;&nbsp;</a></span>store_results() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void store_results </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stores a float32x4x2_t array into a memory location. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to the memory location where the values will be stored. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Values that will be stored. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aa9f26cd83047a111336033fb7466faf1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9f26cd83047a111336033fb7466faf1">&#9670;&nbsp;</a></span>store_results() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::detail::store_results </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Stores a uint32_t array into a memory location. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to the memory location where the values will be stored. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">values</td><td>Values that will be stored. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad61a01ef06cc3c41e4bb5006d9307687"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad61a01ef06cc3c41e4bb5006d9307687">&#9670;&nbsp;</a></span>store_results&lt; 1 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00116">116</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    vst1q_f32(buffer, values.val[0]);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    vst1q_f32(buffer + 4, values.val[1]);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00335">convolve_3x3()</a>.</p>

</div>
</div>
<a id="a143f43b1fb56a8d806145e95d4c3995e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a143f43b1fb56a8d806145e95d4c3995e">&#9670;&nbsp;</a></span>store_results&lt; 1 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a>&lt; 1 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00110">110</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    vst1q_s32(buffer, values.val[0]);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    vst1q_s32(buffer + 4, values.val[1]);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="abaf3037739c190361ad3f827d73440a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaf3037739c190361ad3f827d73440a1">&#9670;&nbsp;</a></span>store_results&lt; 2 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00123">123</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    vst1q_f32(buffer, values.val[0]);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00335">convolve_3x3()</a>.</p>

</div>
</div>
<a id="af63e34203346681c35b68fcca2026a06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af63e34203346681c35b68fcca2026a06">&#9670;&nbsp;</a></span>store_results&lt; 2 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a>&lt; 2 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00117">117</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    vst1q_s32(buffer, values.val[0]);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a208468ac4ffbfe19d7fb03402ca927f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a208468ac4ffbfe19d7fb03402ca927f6">&#9670;&nbsp;</a></span>store_results&lt; 3 &gt;() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml#l00129">129</a> of file <a class="el" href="_n_e_direct_convolution3x3_8h_source.xhtml">NEDirectConvolution3x3.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    vst1_f32(buffer, vget_low_f32(values.val[0]));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00335">convolve_3x3()</a>.</p>

</div>
</div>
<a id="a991bde46f2841422fb98258127305050"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a991bde46f2841422fb98258127305050">&#9670;&nbsp;</a></span>store_results&lt; 3 &gt;() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a>&lt; 3 &gt; </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x2_t &amp;&#160;</td>
          <td class="paramname"><em>values</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml#l00123">123</a> of file <a class="el" href="_n_e_direct_convolution_detail_8h_source.xhtml">NEDirectConvolutionDetail.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    vst1_s32(buffer, vget_low_s32(values.val[0]));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a47ecd4a65072f2ac3dab46b03e350ee2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47ecd4a65072f2ac3dab46b03e350ee2">&#9670;&nbsp;</a></span>validate_internal_context()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> arm_compute::detail::validate_internal_context </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_context.xhtml">IContext</a> *&#160;</td>
          <td class="paramname"><em>ctx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if an internal context is valid. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ctx</td><td>Internal context to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A status code </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_context_8h_source.xhtml#l00140">140</a> of file <a class="el" href="_i_context_8h_source.xhtml">IContext.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span> (ctx == <span class="keyword">nullptr</span> || !ctx-&gt;is_valid())</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <a class="code" href="src_2common_2utils_2_log_8h.xhtml#ada668c5c47184c0667c0b029d92d3b4f">ARM_COMPUTE_LOG_ERROR_ACL</a>(<span class="stringliteral">&quot;Invalid context object&quot;</span>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> StatusCode::InvalidArgument;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> StatusCode::Success;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00032">ARM_COMPUTE_LOG_ERROR_ACL</a>, <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">arm_compute::InvalidArgument</a>, <a class="el" href="_i_context_8h_source.xhtml#l00092">IContext::is_valid()</a>, and <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">arm_compute::Success</a>.</p>

<p class="reference">Referenced by <a class="el" href="_acl_activation_8cpp_source.xhtml#l00030">AclActivation()</a>, <a class="el" href="_acl_queue_8cpp_source.xhtml#l00045">AclCreateQueue()</a>, <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00071">AclCreateTensor()</a>, <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00051">AclCreateTensorPack()</a>, <a class="el" href="_acl_context_8cpp_source.xhtml#l00104">AclDestroyContext()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00034">AclGetClContext()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00088">AclGetClDevice()</a>, and <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00059">AclSetClContext()</a>.</p>

</div>
</div>
<a id="ae48d6a6f3c6fbe0b8c9a1541a3c23c82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae48d6a6f3c6fbe0b8c9a1541a3c23c82">&#9670;&nbsp;</a></span>validate_internal_operator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> arm_compute::detail::validate_internal_operator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1_i_operator.xhtml">IOperator</a> *&#160;</td>
          <td class="paramname"><em>op</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if an internal operator is valid. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Internal operator to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A status code </dd></dl>

<p class="definition">Definition at line <a class="el" href="src_2common_2_i_operator_8h_source.xhtml#l00126">126</a> of file <a class="el" href="src_2common_2_i_operator_8h_source.xhtml">IOperator.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> (op == <span class="keyword">nullptr</span> || !op-&gt;is_valid())</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="src_2common_2utils_2_log_8h.xhtml#ada668c5c47184c0667c0b029d92d3b4f">ARM_COMPUTE_LOG_ERROR_ACL</a>(<span class="stringliteral">&quot;[IOperator]: Invalid operator object&quot;</span>);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">return</span> StatusCode::InvalidArgument;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> StatusCode::Success;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00032">ARM_COMPUTE_LOG_ERROR_ACL</a>, <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">arm_compute::InvalidArgument</a>, and <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">arm_compute::Success</a>.</p>

<p class="reference">Referenced by <a class="el" href="_acl_operator_8cpp_source.xhtml#l00053">AclDestroyOperator()</a>, and <a class="el" href="_acl_operator_8cpp_source.xhtml#l00031">AclRunOperator()</a>.</p>

</div>
</div>
<a id="aeaa9c71ce8a3ca5edf6880e09184e9aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaa9c71ce8a3ca5edf6880e09184e9aa">&#9670;&nbsp;</a></span>validate_internal_pack()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> arm_compute::detail::validate_internal_pack </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_pack.xhtml">TensorPack</a> *&#160;</td>
          <td class="paramname"><em>pack</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if an internal <a class="el" href="classarm__compute_1_1_tensor_pack.xhtml" title="Tensor packing service.">TensorPack</a> is valid. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pack</td><td>Internal tensor pack to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A status code </dd></dl>

<p class="definition">Definition at line <a class="el" href="_tensor_pack_8h_source.xhtml#l00120">120</a> of file <a class="el" href="_tensor_pack_8h_source.xhtml">TensorPack.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;{</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a> == <span class="keyword">nullptr</span> || !<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">pack</a>-&gt;is_valid())</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <a class="code" href="src_2common_2utils_2_log_8h.xhtml#ada668c5c47184c0667c0b029d92d3b4f">ARM_COMPUTE_LOG_ERROR_ACL</a>(<span class="stringliteral">&quot;[TensorPack]: Invalid tensor pack object&quot;</span>);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">return</span> StatusCode::InvalidArgument;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> StatusCode::Success;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00032">ARM_COMPUTE_LOG_ERROR_ACL</a>, <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">arm_compute::InvalidArgument</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">arm_compute::test::validation::pack</a>, and <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">arm_compute::Success</a>.</p>

<p class="reference">Referenced by <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00096">AclDestroyTensorPack()</a>, <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00071">AclPackTensor()</a>, <a class="el" href="_acl_tensor_pack_8cpp_source.xhtml#l00082">AclPackTensors()</a>, and <a class="el" href="_acl_operator_8cpp_source.xhtml#l00031">AclRunOperator()</a>.</p>

</div>
</div>
<a id="a855caae729317428d08d661de17d3508"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a855caae729317428d08d661de17d3508">&#9670;&nbsp;</a></span>validate_internal_queue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> arm_compute::detail::validate_internal_queue </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_queue.xhtml">IQueue</a> *&#160;</td>
          <td class="paramname"><em>queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if an internal queue is valid. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">queue</td><td>Internal queue to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A status code </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_queue_8h_source.xhtml#l00089">89</a> of file <a class="el" href="_i_queue_8h_source.xhtml">IQueue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span> (queue == <span class="keyword">nullptr</span> || !queue-&gt;is_valid())</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <a class="code" href="src_2common_2utils_2_log_8h.xhtml#ada668c5c47184c0667c0b029d92d3b4f">ARM_COMPUTE_LOG_ERROR_ACL</a>(<span class="stringliteral">&quot;[IQueue]: Invalid queue object&quot;</span>);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> StatusCode::InvalidArgument;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> StatusCode::Success;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00032">ARM_COMPUTE_LOG_ERROR_ACL</a>, <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">arm_compute::InvalidArgument</a>, <a class="el" href="_i_queue_8h_source.xhtml#l00063">IQueue::is_valid()</a>, and <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">arm_compute::Success</a>.</p>

<p class="reference">Referenced by <a class="el" href="_acl_queue_8cpp_source.xhtml#l00087">AclDestroyQueue()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00113">AclGetClQueue()</a>, <a class="el" href="_acl_queue_8cpp_source.xhtml#l00072">AclQueueFinish()</a>, <a class="el" href="_acl_operator_8cpp_source.xhtml#l00031">AclRunOperator()</a>, and <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00138">AclSetClQueue()</a>.</p>

</div>
</div>
<a id="a9fdf95bf0a83958e5ef2da382806d0a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fdf95bf0a83958e5ef2da382806d0a4">&#9670;&nbsp;</a></span>validate_internal_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113">StatusCode</a> arm_compute::detail::validate_internal_tensor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_v2.xhtml">ITensorV2</a> *&#160;</td>
          <td class="paramname"><em>tensor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check if an internal tensor is valid. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor</td><td>Internal tensor to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A status code </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_tensor_v2_8h_source.xhtml#l00128">128</a> of file <a class="el" href="_i_tensor_v2_8h_source.xhtml">ITensorV2.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a> == <span class="keyword">nullptr</span> || !<a class="code" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>-&gt;is_valid())</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="src_2common_2utils_2_log_8h.xhtml#ada668c5c47184c0667c0b029d92d3b4f">ARM_COMPUTE_LOG_ERROR_ACL</a>(<span class="stringliteral">&quot;[ITensorV2]: Invalid tensor object&quot;</span>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> StatusCode::InvalidArgument;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> StatusCode::Success;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2common_2utils_2_log_8h_source.xhtml#l00032">ARM_COMPUTE_LOG_ERROR_ACL</a>, <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a253ca7dd096ee0956cccee4d376cab8b">arm_compute::InvalidArgument</a>, <a class="el" href="namespacearm__compute.xhtml#ae98a46f4ea1a43ca48acaf15d2eb7113a505a83f220c02df2f85c3810cd9ceb38">arm_compute::Success</a>, and <a class="el" href="_cl_workload_runtime_8cpp_source.xhtml#l00067">tensor</a>.</p>

<p class="reference">Referenced by <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00144">AclDestroyTensor()</a>, <a class="el" href="_acl_open_cl_ext_8cpp_source.xhtml#l00162">AclGetClMem()</a>, <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00097">AclMapTensor()</a>, <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00130">AclTensorImport()</a>, and <a class="el" href="_acl_tensor_8cpp_source.xhtml#l00116">AclUnmapTensor()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa4520f3b9a2b15a38efb5212ba1761497"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa4520f3b9a2b15a38efb5212ba1761497">AclLogistic</a></div><div class="ttdeci">@ AclLogistic</div><div class="ttdoc">Logistic.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00037">AclDescriptors.h:37</a></div></div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_ae63552b4bf3d8bda8762cf39c8082ce0"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">arm_compute::detail::single_convolve_3x3_dilation</a></div><div class="ttdeci">int32x4_t single_convolve_3x3_dilation(const T *in_top, const T *in_mid, const T *in_low, const int32x4x3_t &amp;m0, const int32x4x3_t &amp;m1, const int32x4x3_t &amp;m2, size_t dilation_x, int32_t input_offset)</div><div class="ttdoc">Perform a 3x3 convolution for 4 consecutive 8-bit elements when dilation.x() or dilation....</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00428">NEDirectConvolutionDetail.h:428</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00338">gemm_interleaved.hpp:338</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caabe5350250b1cc2492ad88f4af421a672"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caabe5350250b1cc2492ad88f4af421a672">AclLeakyRelu</a></div><div class="ttdeci">@ AclLeakyRelu</div><div class="ttdoc">Leaky Rectifier.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00042">AclDescriptors.h:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_acf4d4b5e75140c76124c95c0b28b28b7"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#acf4d4b5e75140c76124c95c0b28b28b7">arm_compute::detail::accumulate_results&lt; 2 &gt;</a></div><div class="ttdeci">void accumulate_results&lt; 2 &gt;(int32_t *buffer, const int32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00161">NEDirectConvolutionDetail.h:161</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4acdbd44e2664d66a4b5e62af62e8f52ad">arm_compute::detail::ObjectType::TensorPack</a></div><div class="ttdeci">@ TensorPack</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4aad4e206408c1c59bfb8a057ba7857446"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4aad4e206408c1c59bfb8a057ba7857446">arm_compute::detail::ObjectType::Context</a></div><div class="ttdeci">@ Context</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="asrc_2common_2utils_2_log_8h_xhtml_ada668c5c47184c0667c0b029d92d3b4f"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#ada668c5c47184c0667c0b029d92d3b4f">ARM_COMPUTE_LOG_ERROR_ACL</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_ERROR_ACL(msg)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_log_8h_source.xhtml#l00032">Log.h:32</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caad41cee117604b3ef2c329734b5391d4f"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caad41cee117604b3ef2c329734b5391d4f">AclSoftRelu</a></div><div class="ttdeci">@ AclSoftRelu</div><div class="ttdoc">Soft Rectifier.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00043">AclDescriptors.h:43</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa20db717bd267e4ed44c61fb7451f869d"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa20db717bd267e4ed44c61fb7451f869d">AclSquare</a></div><div class="ttdeci">@ AclSquare</div><div class="ttdoc">Square.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00046">AclDescriptors.h:46</a></div></div>
<div class="ttc" id="astruct_acl_activation_descriptor_xhtml_a4aec1a5be9d9a4a394a2e49e9744286e"><div class="ttname"><a href="struct_acl_activation_descriptor.xhtml#a4aec1a5be9d9a4a394a2e49e9744286e">AclActivationDescriptor::a</a></div><div class="ttdeci">float a</div><div class="ttdoc">Factor &amp;alpha used by some activations.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00056">AclDescriptors.h:56</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a5d9c87411d51689909ba746f88bcff56"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a5d9c87411d51689909ba746f88bcff56">arm_compute::detail::convolve_3x3&lt; 1 &gt;</a></div><div class="ttdeci">float32x4x2_t convolve_3x3&lt; 1 &gt;(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00049">NEDirectConvolution3x3.h:49</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa5a2544c0ca618698072f24da1eb09200"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa5a2544c0ca618698072f24da1eb09200">AclHardSwish</a></div><div class="ttdeci">@ AclHardSwish</div><div class="ttdoc">Hard-swish.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00049">AclDescriptors.h:49</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00205">Error.h:205</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2fa22dee7227625fa4516f267235667c"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2fa22dee7227625fa4516f267235667c">arm_compute::detail::for_each_error</a></div><div class="ttdeci">arm_compute::Status for_each_error(F &amp;&amp;func, T &amp;&amp;arg, Ts &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00114">Validate.h:114</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4a4bbb8f967da6d1a610596d7257179c2b"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4a4bbb8f967da6d1a610596d7257179c2b">arm_compute::detail::ObjectType::Invalid</a></div><div class="ttdeci">@ Invalid</div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4a722ad2d05ecf4868b00c5484b82fd808"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4a722ad2d05ecf4868b00c5484b82fd808">arm_compute::detail::ObjectType::Queue</a></div><div class="ttdeci">@ Queue</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_aeb8b7e1875910e807e1e4e59bf089dfb"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#aeb8b7e1875910e807e1e4e59bf089dfb">AclTensorDescriptor::data_type</a></div><div class="ttdeci">AclDataType data_type</div><div class="ttdoc">Tensor Data type.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00196">AclTypes.h:196</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdoc">Available activation functions.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00041">ActivationLayerInfo.h:41</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caaca45ca22ecf96e8617763ce8e5c91c6e"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caaca45ca22ecf96e8617763ce8e5c91c6e">AclIdentity</a></div><div class="ttdeci">@ AclIdentity</div><div class="ttdoc">Identity.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00036">AclDescriptors.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a33b299a9a74e372d06b83c033958d428"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a33b299a9a74e372d06b83c033958d428">arm_compute::detail::accumulate_results&lt; 3 &gt;</a></div><div class="ttdeci">void accumulate_results&lt; 3 &gt;(int32_t *buffer, const int32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00167">NEDirectConvolutionDetail.h:167</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4af20fc369b14cb5d40e695dab98bcb742">arm_compute::detail::ObjectType::Tensor</a></div><div class="ttdeci">@ Tensor</div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caac83260c0ed4deb793ef88a061fe74317"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caac83260c0ed4deb793ef88a061fe74317">AclTanh</a></div><div class="ttdeci">@ AclTanh</div><div class="ttdoc">Hyperbolic tangent.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00038">AclDescriptors.h:38</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa6103f6803b6d1875ae40581d93586cb1"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa6103f6803b6d1875ae40581d93586cb1">AclSqrt</a></div><div class="ttdeci">@ AclSqrt</div><div class="ttdoc">Square root.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00047">AclDescriptors.h:47</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caae015533cf8e6337412ee8fec8443e22d"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caae015533cf8e6337412ee8fec8443e22d">AclLinear</a></div><div class="ttdeci">@ AclLinear</div><div class="ttdoc">Linear.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00048">AclDescriptors.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1e041dc03ff256dfc8b0bf5c5fe099e0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1e041dc03ff256dfc8b0bf5c5fe099e0">arm_compute::test::validation::pack</a></div><div class="ttdeci">ITensorPack pack</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00188">Im2Col.cpp:188</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_cl_workload_runtime_8cpp_xhtml_a5555e1497e9b84ade322d8ad8b503598"><div class="ttname"><a href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a></div><div class="ttdeci">CLTensor * tensor</div><div class="ttdoc">Pointer to the auxiliary tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_cl_workload_runtime_8cpp_source.xhtml#l00067">ClWorkloadRuntime.cpp:67</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a6ee3531f4293703c9b32e28421bfc061"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">arm_compute::wrapper::vsetlane</a></div><div class="ttdeci">uint8x8_t vsetlane(const uint8_t value, const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="setlane_8h_source.xhtml#l00091">setlane.h:91</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa24815289633f0f4f5365a975fcef1175"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa24815289633f0f4f5365a975fcef1175">AclAbs</a></div><div class="ttdeci">@ AclAbs</div><div class="ttdoc">Absolute.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00045">AclDescriptors.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4f61df728949636afc38761f6ab319d3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">arm_compute::wrapper::vext_1</a></div><div class="ttdeci">uint8x8_t vext_1(uint8x8_t value_a, uint8x8_t value_b)</div><div class="ttdef"><b>Definition:</b> <a href="ext_8h_source.xhtml#l00039">ext.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_ada0c5c8101ce3172ca465bb3ff6843b1"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ada0c5c8101ce3172ca465bb3ff6843b1">arm_compute::detail::accumulate_results&lt; 1 &gt;</a></div><div class="ttdeci">void accumulate_results&lt; 1 &gt;(int32_t *buffer, const int32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00154">NEDirectConvolutionDetail.h:154</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml">AclTensorDescriptor</a></div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00192">AclTypes.h:192</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa58ed08eab6c63a3afd3fe48ad06a8fa"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">arm_compute::wrapper::vaddw</a></div><div class="ttdeci">uint16x8_t vaddw(const uint16x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00107">add.h:107</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_a3daf61aa16ccaec801090f1e898051e8"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#a3daf61aa16ccaec801090f1e898051e8">AclTensorDescriptor::shape</a></div><div class="ttdeci">int32_t * shape</div><div class="ttdoc">Tensor Shape.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00195">AclTypes.h:195</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa7e2a3789619fd54e3e11e2982ed3c477"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa7e2a3789619fd54e3e11e2982ed3c477">AclElu</a></div><div class="ttdeci">@ AclElu</div><div class="ttdoc">Exponential Linear Unit.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00044">AclDescriptors.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae1a6f6dde14fc3b0470cd0b08041ea9f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">arm_compute::wrapper::vload</a></div><div class="ttdeci">uint8x8_t vload(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00039">load.h:39</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa78ed1b379c19d6cfdf947562bc6731d1"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa78ed1b379c19d6cfdf947562bc6731d1">AclBoundedRelu</a></div><div class="ttdeci">@ AclBoundedRelu</div><div class="ttdoc">Upper Bounded Rectifier.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00040">AclDescriptors.h:40</a></div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caad91c6d00fb26edb66d8486b66f02db61"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caad91c6d00fb26edb66d8486b66f02db61">AclRelu</a></div><div class="ttdeci">@ AclRelu</div><div class="ttdoc">Rectifier.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00039">AclDescriptors.h:39</a></div></div>
<div class="ttc" id="astruct_acl_tensor_descriptor_xhtml_aa38273bb50d742d3862669ae4839b807"><div class="ttname"><a href="struct_acl_tensor_descriptor.xhtml#aa38273bb50d742d3862669ae4839b807">AclTensorDescriptor::ndims</a></div><div class="ttdeci">int32_t ndims</div><div class="ttdoc">Number or dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00194">AclTypes.h:194</a></div></div>
<div class="ttc" id="astruct_acl_activation_descriptor_xhtml_a83fc1af92e29717b4513d121b0c72c7d"><div class="ttname"><a href="struct_acl_activation_descriptor.xhtml#a83fc1af92e29717b4513d121b0c72c7d">AclActivationDescriptor::b</a></div><div class="ttdeci">float b</div><div class="ttdoc">Factor &amp;beta used by some activations.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00057">AclDescriptors.h:57</a></div></div>
<div class="ttc" id="astruct_acl_activation_descriptor_xhtml_a87b8b07820c2b0bdc28e9160d2c74491"><div class="ttname"><a href="struct_acl_activation_descriptor.xhtml#a87b8b07820c2b0bdc28e9160d2c74491">AclActivationDescriptor::type</a></div><div class="ttdeci">AclActivationType type</div><div class="ttdoc">Activation type.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00055">AclDescriptors.h:55</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2c0ee4eb5bed32d6fb8358d113995aa4ae1b3ec89ead7f83a9245ed5c9cacfdbf">arm_compute::detail::ObjectType::Operator</a></div><div class="ttdeci">@ Operator</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa247597303350172b1bf018e34402d47"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">arm_compute::wrapper::vext_2</a></div><div class="ttdeci">uint8x8_t vext_2(uint8x8_t value_a, uint8x8_t value_b)</div><div class="ttdef"><b>Definition:</b> <a href="ext_8h_source.xhtml#l00040">ext.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_aa9f26cd83047a111336033fb7466faf1"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">arm_compute::detail::store_results</a></div><div class="ttdeci">void store_results(int32_t *buffer, const int32x4x2_t &amp;values)</div><div class="ttdoc">Stores a uint32_t array into a memory location.</div></div>
<div class="ttc" id="a_acl_descriptors_8h_xhtml_ab8adf70f59f54c0698b722e5966080caa3d93552309a4290b346c9055752ef33c"><div class="ttname"><a href="_acl_descriptors_8h.xhtml#ab8adf70f59f54c0698b722e5966080caa3d93552309a4290b346c9055752ef33c">AclLuBoundedRelu</a></div><div class="ttdeci">@ AclLuBoundedRelu</div><div class="ttdoc">Lower and Upper Bounded Rectifier.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_descriptors_8h_source.xhtml#l00041">AclDescriptors.h:41</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1detail.xhtml">detail</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:54:10 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
