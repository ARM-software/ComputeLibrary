<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/CpuGemmLowpOffsetContributionKernel.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuGemmLowpOffsetContributionKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2022,2024 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_gemm_lowp_offset_contribution_kernel_8h.xhtml">src/cpu/kernels/CpuGemmLowpOffsetContributionKernel.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_error_8h.xhtml">arm_compute/core/Error.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_helpers_8h.xhtml">arm_compute/core/Helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_8h.xhtml">arm_compute/core/ITensor.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_tensor_info_8h.xhtml">arm_compute/core/TensorInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_types_8h.xhtml">arm_compute/core/Types.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_utils_8h.xhtml">arm_compute/core/Utils.h</a>&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2_validate_8h.xhtml">arm_compute/core/Validate.h</a>&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_8h.xhtml">arm_compute/core/Window.h</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_auto_configuration_8h.xhtml">src/core/helpers/AutoConfiguration.h</a>&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_window_helpers_8h.xhtml">src/core/helpers/WindowHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span>kernels</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;Status <a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(<span class="keyword">const</span> ITensorInfo *mm_result,</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                          <span class="keyword">const</span> ITensorInfo *vector_sum_col,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                          <span class="keyword">const</span> ITensorInfo *vector_sum_row,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                          int32_t            a_offset,</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                          int32_t            b_offset)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(mm_result, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// We run if the offset is nonzero or a sum col has been provided, we need</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// the second option in case the QuantizationInfo is dynamic</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (a_offset != 0 || vector_sum_col != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(vector_sum_col, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(vector_sum_col-&gt;dimension(0) != mm_result-&gt;dimension(0));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// We run if the offset is nonzero or a sum row has been provided, we need</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// the second option in case the QuantizationInfo is dynamic</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">if</span> (b_offset != 0 || vector_sum_row != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(vector_sum_row, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Check if input is a 3D reinterpretation</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_as_3d =</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            mm_result-&gt;num_dimensions() &gt; 1 &amp;&amp; mm_result-&gt;tensor_shape().y() != vector_sum_row-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// Validate input</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(reinterpret_as_3d &amp;&amp; vector_sum_row-&gt;dimension(0) !=</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                                             (mm_result-&gt;dimension(1) * mm_result-&gt;dimension(2)));</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a>(!reinterpret_as_3d &amp;&amp; vector_sum_row-&gt;dimension(0) != mm_result-&gt;dimension(1));</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a> = mm_result-&gt;tensor_shape();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 1)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_batch_idx = reinterpret_as_3d ? 3 : 2;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            TensorShape vector_sum_row_shape = vector_sum_row-&gt;tensor_shape();</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            vector_sum_row_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">collapse_from</a>(1);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">collapse_from</a>(output_batch_idx);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(vector_sum_row_shape[1] != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">output_shape</a>[output_batch_idx],</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                            <span class="stringliteral">&quot;mm_result tensor must have the same number of batches of output tensor&quot;</span>);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">if</span> (vector_sum_col != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                TensorShape vector_sum_col_shape = vector_sum_col-&gt;tensor_shape();</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                vector_sum_col_shape.collapse_from(1);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(vector_sum_col_shape[1] != 1 &amp;&amp;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                                    vector_sum_col_shape[1] != vector_sum_row_shape[1],</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                <span class="stringliteral">&quot;vector_sum_col tensor must have the same number of batches of &quot;</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                                <span class="stringliteral">&quot;vector_sum_row_shape or the number of batches must be set to 1&quot;</span>);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> Status{};</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keywordtype">void</span> run_offset_contribution_float(<span class="keyword">const</span> Window  &amp;window,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                   ITensor       *mm_result,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                   <span class="keyword">const</span> ITensor *vector_sum_col,</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                   <span class="keyword">const</span> ITensor *vector_sum_row,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                   int32_t        a_offset,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                   int32_t        b_offset,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                   int32_t        k_offset,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                   <span class="keywordtype">float</span>          <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>,</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                   <span class="keywordtype">bool</span>           slide_vector_sum_col,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                   <span class="keywordtype">bool</span>           is_gemm3d)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    Window collapsed_window = window.collapse_if_possible(window, <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    collapsed_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_input = is_gemm3d ? mm_result-&gt;info()-&gt;dimension(1) : 0;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_input  = is_gemm3d ? mm_result-&gt;info()-&gt;dimension(2) : 1;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = window.x().start();</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = window.x().end();</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 16;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// if vector_sum_col is nullptr then stride_y is 0, else get stride_y</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> sum_col_stride_y = (vector_sum_col != <span class="keyword">nullptr</span>) ? (vector_sum_col-&gt;info()-&gt;strides_in_bytes().y()) : 0;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    Iterator     mm_result_it(mm_result, collapsed_window);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span> ((a_offset != 0) &amp;&amp; (b_offset != 0) &amp;&amp; (vector_sum_col != <span class="keyword">nullptr</span>) &amp;&amp; (vector_sum_row != <span class="keyword">nullptr</span>)) <span class="comment">// true, true</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">// Set window for vector_sum_col</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        Window win_vector_sum_col(collapsed_window);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Set window for vector_sum_row</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        Window win_vector_sum_row(collapsed_window);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        Iterator vector_sum_col_it(vector_sum_col, win_vector_sum_col);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        Iterator vector_sum_row_it(vector_sum_row, win_vector_sum_row);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> sum_row_stride_y = vector_sum_row-&gt;info()-&gt;strides_in_bytes().y();</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="comment">// Offset in case vector_sum_col is batched</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> vector_sum_col_batch_offset =</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            slide_vector_sum_col ? vector_sum_col-&gt;info()-&gt;strides_in_bytes().z() : 0;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            collapsed_window,</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>    batch_id         = <span class="keywordtype">id</span>.z() / depth_input;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">size_t</span> batch_offset_col = batch_id * (sum_col_stride_y);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">auto</span> vector_sum_col_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_col_it.ptr() + batch_offset_col +</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                                                            batch_id * vector_sum_col_batch_offset);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">auto</span> mm_result_ptr      = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(mm_result_it.ptr());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="comment">// Compute the leftover term due to b_offset.</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                int32_t b_offset_term_s32 =</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_row_it.ptr() + batch_id * sum_row_stride_y) +</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                      <span class="keywordtype">id</span>.y() + (<span class="keywordtype">id</span>.z() % depth_input) * height_input);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                b_offset_term_s32 *= b_offset;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="keyword">const</span> int32x4_t b_offset_term_s32_vec = vdupq_n_s32(b_offset_term_s32);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    int32x4x4_t a_offset_term_s32 = {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        {vld1q_s32(vector_sum_col_ptr + x + 0), vld1q_s32(vector_sum_col_ptr + x + 4),</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                         vld1q_s32(vector_sum_col_ptr + x + 8), vld1q_s32(vector_sum_col_ptr + x + 12)}};</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    a_offset_term_s32.val[0] = vmulq_n_s32(a_offset_term_s32.val[0], a_offset);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    a_offset_term_s32.val[1] = vmulq_n_s32(a_offset_term_s32.val[1], a_offset);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    a_offset_term_s32.val[2] = vmulq_n_s32(a_offset_term_s32.val[2], a_offset);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    a_offset_term_s32.val[3] = vmulq_n_s32(a_offset_term_s32.val[3], a_offset);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    <span class="comment">// Add a_offset_term_s32 and b_offset_term_s32</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    int32x4x4_t offset_term_s32 = {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        {vdupq_n_s32(k_offset), vdupq_n_s32(k_offset), vdupq_n_s32(k_offset), vdupq_n_s32(k_offset)}};</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    offset_term_s32.val[0] =</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        vaddq_s32(offset_term_s32.val[0], vaddq_s32(a_offset_term_s32.val[0], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    offset_term_s32.val[1] =</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        vaddq_s32(offset_term_s32.val[1], vaddq_s32(a_offset_term_s32.val[1], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    offset_term_s32.val[2] =</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        vaddq_s32(offset_term_s32.val[2], vaddq_s32(a_offset_term_s32.val[2], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    offset_term_s32.val[3] =</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        vaddq_s32(offset_term_s32.val[3], vaddq_s32(a_offset_term_s32.val[3], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    float32x4x4_t in_f32 = {{vld1q_f32(mm_result_ptr + x + 0), vld1q_f32(mm_result_ptr + x + 4),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                             vld1q_f32(mm_result_ptr + x + 8), vld1q_f32(mm_result_ptr + x + 12)}};</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="comment">// Convert and scale the S32 offsets to match the already scaled GEMM results</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    float32x4x4_t offset_terms_scaled = {{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(offset_term_s32.val[0]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(offset_term_s32.val[1]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(offset_term_s32.val[2]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(offset_term_s32.val[3]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    }};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <span class="comment">// Add the offset terms to the GEMM result</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    in_f32.val[0] = vaddq_f32(in_f32.val[0], offset_terms_scaled.val[0]);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    in_f32.val[1] = vaddq_f32(in_f32.val[1], offset_terms_scaled.val[1]);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    in_f32.val[2] = vaddq_f32(in_f32.val[2], offset_terms_scaled.val[2]);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    in_f32.val[3] = vaddq_f32(in_f32.val[3], offset_terms_scaled.val[3]);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    vst1q_f32(mm_result_ptr + x + 0, in_f32.val[0]);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    vst1q_f32(mm_result_ptr + x + 4, in_f32.val[1]);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    vst1q_f32(mm_result_ptr + x + 8, in_f32.val[2]);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    vst1q_f32(mm_result_ptr + x + 12, in_f32.val[3]);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    int32_t a_offset_term_s32 = *(vector_sum_col_ptr + x);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    a_offset_term_s32 *= a_offset;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    mm_result_ptr[x] += (k_offset + a_offset_term_s32 + b_offset_term_s32) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            },</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            vector_sum_col_it, vector_sum_row_it, mm_result_it);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((a_offset == 0) &amp;&amp; (b_offset != 0) &amp;&amp; (vector_sum_row != <span class="keyword">nullptr</span>)) <span class="comment">// false, true</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(vector_sum_row);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment">// Set window for vector_sum_row</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        Window win_vector_sum_row(collapsed_window);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        Iterator vector_sum_row_it(vector_sum_row, win_vector_sum_row);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> sum_row_stride_y = vector_sum_row-&gt;info()-&gt;strides_in_bytes().y();</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            collapsed_window,</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> batch_id      = <span class="keywordtype">id</span>.z() / depth_input;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                <span class="keyword">auto</span>      mm_result_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(mm_result_it.ptr());</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="comment">// Compute the leftover term due to b_offset.</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                int32_t row_sum =</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_row_it.ptr() + batch_id * sum_row_stride_y) +</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                      <span class="keywordtype">id</span>.y() + (<span class="keywordtype">id</span>.z() % depth_input) * height_input);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="keywordtype">float</span> scaled_b_offset_term_f32 = row_sum * b_offset * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="keyword">const</span> float32x4_t b_offset_term_f32_vec = vdupq_n_f32(scaled_b_offset_term_f32);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    float32x4x4_t in_f32 = {{vld1q_f32(mm_result_ptr + x + 0), vld1q_f32(mm_result_ptr + x + 4),</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                             vld1q_f32(mm_result_ptr + x + 8), vld1q_f32(mm_result_ptr + x + 12)}};</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    in_f32.val[0] = vaddq_f32(in_f32.val[0], b_offset_term_f32_vec);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    in_f32.val[1] = vaddq_f32(in_f32.val[1], b_offset_term_f32_vec);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    in_f32.val[2] = vaddq_f32(in_f32.val[2], b_offset_term_f32_vec);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    in_f32.val[3] = vaddq_f32(in_f32.val[3], b_offset_term_f32_vec);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    vst1q_f32(mm_result_ptr + x + 0, in_f32.val[0]);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    vst1q_f32(mm_result_ptr + x + 4, in_f32.val[1]);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    vst1q_f32(mm_result_ptr + x + 8, in_f32.val[2]);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    vst1q_f32(mm_result_ptr + x + 12, in_f32.val[3]);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    mm_result_ptr[x] += scaled_b_offset_term_f32;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            },</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            vector_sum_row_it, mm_result_it);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((a_offset != 0) &amp;&amp; (b_offset == 0) &amp;&amp; (vector_sum_col != <span class="keyword">nullptr</span>)) <span class="comment">// true, false</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="comment">// Set window for vector_sum_col</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        Window win_vector_sum_col(collapsed_window);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        Iterator vector_sum_col_it(vector_sum_col, win_vector_sum_col);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">// Offset in case vector_sum_col is batched</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> vector_sum_col_batch_offset =</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            slide_vector_sum_col ? vector_sum_col-&gt;info()-&gt;strides_in_bytes().z() : 0;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            collapsed_window,</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>    batch_id = <span class="keywordtype">id</span>.z() / depth_input;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">size_t</span> batch_offset_col =</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                    batch_id *</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    (sum_col_stride_y); <span class="comment">// Value to offset vector_sum_col_ptr to allow for iteration of y values in tensor</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keyword">auto</span> vector_sum_col_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_col_it.ptr() + batch_offset_col +</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                                            batch_id * vector_sum_col_batch_offset);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keyword">auto</span> mm_result_ptr      = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(mm_result_it.ptr());</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    int32x4x4_t a_offset_term_s32 = {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        {vld1q_s32(vector_sum_col_ptr + x + 0), vld1q_s32(vector_sum_col_ptr + x + 4),</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                         vld1q_s32(vector_sum_col_ptr + x + 8), vld1q_s32(vector_sum_col_ptr + x + 12)}};</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    a_offset_term_s32.val[0] = vmulq_n_s32(a_offset_term_s32.val[0], a_offset);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    a_offset_term_s32.val[1] = vmulq_n_s32(a_offset_term_s32.val[1], a_offset);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    a_offset_term_s32.val[2] = vmulq_n_s32(a_offset_term_s32.val[2], a_offset);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    a_offset_term_s32.val[3] = vmulq_n_s32(a_offset_term_s32.val[3], a_offset);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    float32x4x4_t a_offset_term_scaled = {{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(a_offset_term_s32.val[0]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(a_offset_term_s32.val[1]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(a_offset_term_s32.val[2]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        vmulq_n_f32(vcvtq_f32_s32(a_offset_term_s32.val[3]), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    }};</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    float32x4x4_t in_f32 = {{vld1q_f32(mm_result_ptr + x + 0), vld1q_f32(mm_result_ptr + x + 4),</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                             vld1q_f32(mm_result_ptr + x + 8), vld1q_f32(mm_result_ptr + x + 12)}};</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    in_f32.val[0] = vaddq_f32(in_f32.val[0], a_offset_term_scaled.val[0]);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    in_f32.val[1] = vaddq_f32(in_f32.val[1], a_offset_term_scaled.val[1]);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    in_f32.val[2] = vaddq_f32(in_f32.val[2], a_offset_term_scaled.val[2]);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    in_f32.val[3] = vaddq_f32(in_f32.val[3], a_offset_term_scaled.val[3]);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                    vst1q_f32(mm_result_ptr + x + 0, in_f32.val[0]);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                    vst1q_f32(mm_result_ptr + x + 4, in_f32.val[1]);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    vst1q_f32(mm_result_ptr + x + 8, in_f32.val[2]);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    vst1q_f32(mm_result_ptr + x + 12, in_f32.val[3]);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    <span class="keyword">const</span> int32_t a_offset_term_s32 = *(vector_sum_col_ptr + x);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                    mm_result_ptr[x] += a_offset_term_s32 * a_offset * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            },</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            vector_sum_col_it, mm_result_it);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// false, false</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="comment">// No offset contribution from matrix A and matrix B</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="keywordtype">void</span> run_offset_contribution(<span class="keyword">const</span> Window  &amp;window,</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                             ITensor       *mm_result,</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                             <span class="keyword">const</span> ITensor *vector_sum_col,</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                             <span class="keyword">const</span> ITensor *vector_sum_row,</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                             int32_t        a_offset,</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                             int32_t        b_offset,</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                             int32_t        k_offset,</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                             <span class="keywordtype">bool</span>           slide_vector_sum_col,</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                             <span class="keywordtype">bool</span>           is_gemm3d)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;{</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    Window collapsed_window = window.collapse_if_possible(window, <a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    collapsed_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> height_input = is_gemm3d ? mm_result-&gt;info()-&gt;dimension(1) : 0;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> depth_input  = is_gemm3d ? mm_result-&gt;info()-&gt;dimension(2) : 1;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = window.x().start();</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = window.x().end();</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 16;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="comment">// if vector_sum_col is nullptr then stride_y is 0, else get stride_y</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> sum_col_stride_y = (vector_sum_col != <span class="keyword">nullptr</span>) ? (vector_sum_col-&gt;info()-&gt;strides_in_bytes().y()) : 0;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    Iterator     mm_result_it(mm_result, collapsed_window);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">if</span> ((a_offset != 0) &amp;&amp; (b_offset != 0) &amp;&amp; (vector_sum_col != <span class="keyword">nullptr</span>) &amp;&amp; (vector_sum_row != <span class="keyword">nullptr</span>)) <span class="comment">// true, true</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="comment">// Set window for vector_sum_col</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        Window win_vector_sum_col(collapsed_window);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="comment">// Set window for vector_sum_row</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        Window win_vector_sum_row(collapsed_window);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        Iterator vector_sum_col_it(vector_sum_col, win_vector_sum_col);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        Iterator vector_sum_row_it(vector_sum_row, win_vector_sum_row);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> sum_row_stride_y = vector_sum_row-&gt;info()-&gt;strides_in_bytes().y();</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="comment">// Offset in case vector_sum_col is batched</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> vector_sum_col_batch_offset =</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            slide_vector_sum_col ? vector_sum_col-&gt;info()-&gt;strides_in_bytes().z() : 0;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            collapsed_window,</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>    batch_id         = <span class="keywordtype">id</span>.z() / depth_input;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">size_t</span> batch_offset_col = batch_id * (sum_col_stride_y);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                <span class="keyword">auto</span> vector_sum_col_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_col_it.ptr() + batch_offset_col +</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                                                            batch_id * vector_sum_col_batch_offset);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                <span class="keyword">auto</span> mm_result_ptr      = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(mm_result_it.ptr());</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                <span class="comment">// Compute the leftover term due to b_offset.</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                int32_t b_offset_term_s32 =</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_row_it.ptr() + batch_id * sum_row_stride_y) +</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                      <span class="keywordtype">id</span>.y() + (<span class="keywordtype">id</span>.z() % depth_input) * height_input);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                b_offset_term_s32 *= b_offset;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                <span class="keyword">const</span> int32x4_t b_offset_term_s32_vec = vdupq_n_s32(b_offset_term_s32);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                    int32x4x4_t a_offset_term_s32 = {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                        {vld1q_s32(vector_sum_col_ptr + x + 0), vld1q_s32(vector_sum_col_ptr + x + 4),</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                         vld1q_s32(vector_sum_col_ptr + x + 8), vld1q_s32(vector_sum_col_ptr + x + 12)}};</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    a_offset_term_s32.val[0] = vmulq_n_s32(a_offset_term_s32.val[0], a_offset);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    a_offset_term_s32.val[1] = vmulq_n_s32(a_offset_term_s32.val[1], a_offset);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    a_offset_term_s32.val[2] = vmulq_n_s32(a_offset_term_s32.val[2], a_offset);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    a_offset_term_s32.val[3] = vmulq_n_s32(a_offset_term_s32.val[3], a_offset);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    <span class="comment">// Add a_offset_term_s32 and b_offset_term_s32</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    int32x4x4_t offset_term_s32 = {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        {vdupq_n_s32(k_offset), vdupq_n_s32(k_offset), vdupq_n_s32(k_offset), vdupq_n_s32(k_offset)}};</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160; </div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                    offset_term_s32.val[0] =</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                        vaddq_s32(offset_term_s32.val[0], vaddq_s32(a_offset_term_s32.val[0], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    offset_term_s32.val[1] =</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                        vaddq_s32(offset_term_s32.val[1], vaddq_s32(a_offset_term_s32.val[1], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    offset_term_s32.val[2] =</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        vaddq_s32(offset_term_s32.val[2], vaddq_s32(a_offset_term_s32.val[2], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    offset_term_s32.val[3] =</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        vaddq_s32(offset_term_s32.val[3], vaddq_s32(a_offset_term_s32.val[3], b_offset_term_s32_vec));</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                    int32x4x4_t in_s32 = {{vld1q_s32(mm_result_ptr + x + 0), vld1q_s32(mm_result_ptr + x + 4),</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                           vld1q_s32(mm_result_ptr + x + 8), vld1q_s32(mm_result_ptr + x + 12)}};</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    in_s32.val[0] = vaddq_s32(in_s32.val[0], offset_term_s32.val[0]);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    in_s32.val[1] = vaddq_s32(in_s32.val[1], offset_term_s32.val[1]);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    in_s32.val[2] = vaddq_s32(in_s32.val[2], offset_term_s32.val[2]);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    in_s32.val[3] = vaddq_s32(in_s32.val[3], offset_term_s32.val[3]);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160; </div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    vst1q_s32(mm_result_ptr + x + 0, in_s32.val[0]);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    vst1q_s32(mm_result_ptr + x + 4, in_s32.val[1]);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    vst1q_s32(mm_result_ptr + x + 8, in_s32.val[2]);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    vst1q_s32(mm_result_ptr + x + 12, in_s32.val[3]);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                    int32_t a_offset_term_s32 = *(vector_sum_col_ptr + x);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160; </div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    a_offset_term_s32 *= a_offset;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                    mm_result_ptr[x] += k_offset + a_offset_term_s32 + b_offset_term_s32;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            },</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            vector_sum_col_it, vector_sum_row_it, mm_result_it);</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((a_offset == 0) &amp;&amp; (b_offset != 0) &amp;&amp; (vector_sum_row != <span class="keyword">nullptr</span>)) <span class="comment">// false, true</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    {</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(vector_sum_row);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="comment">// Set window for vector_sum_row</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        Window win_vector_sum_row(collapsed_window);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        win_vector_sum_row.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160; </div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        Iterator vector_sum_row_it(vector_sum_row, win_vector_sum_row);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160; </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> sum_row_stride_y = vector_sum_row-&gt;info()-&gt;strides_in_bytes().y();</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160; </div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            collapsed_window,</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            {</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> batch_id      = <span class="keywordtype">id</span>.z() / depth_input;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <span class="keyword">auto</span>      mm_result_ptr = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(mm_result_it.ptr());</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// Compute the leftover term due to b_offset.</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                int32_t b_offset_term_s32 =</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_row_it.ptr() + batch_id * sum_row_stride_y) +</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                      <span class="keywordtype">id</span>.y() + (<span class="keywordtype">id</span>.z() % depth_input) * height_input);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                b_offset_term_s32 *= b_offset;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160; </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <span class="keyword">const</span> int32x4_t b_offset_term_s32_vec = vdupq_n_s32(b_offset_term_s32);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160; </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    int32x4x4_t in_s32 = {{vld1q_s32(mm_result_ptr + x + 0), vld1q_s32(mm_result_ptr + x + 4),</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                                           vld1q_s32(mm_result_ptr + x + 8), vld1q_s32(mm_result_ptr + x + 12)}};</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160; </div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    in_s32.val[0] = vaddq_s32(in_s32.val[0], b_offset_term_s32_vec);</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    in_s32.val[1] = vaddq_s32(in_s32.val[1], b_offset_term_s32_vec);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                    in_s32.val[2] = vaddq_s32(in_s32.val[2], b_offset_term_s32_vec);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                    in_s32.val[3] = vaddq_s32(in_s32.val[3], b_offset_term_s32_vec);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160; </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    vst1q_s32(mm_result_ptr + x + 0, in_s32.val[0]);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    vst1q_s32(mm_result_ptr + x + 4, in_s32.val[1]);</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    vst1q_s32(mm_result_ptr + x + 8, in_s32.val[2]);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    vst1q_s32(mm_result_ptr + x + 12, in_s32.val[3]);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                }</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                    mm_result_ptr[x] += b_offset_term_s32;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            },</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            vector_sum_row_it, mm_result_it);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((a_offset != 0) &amp;&amp; (b_offset == 0) &amp;&amp; (vector_sum_col != <span class="keyword">nullptr</span>)) <span class="comment">// true, false</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    {</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="comment">// Set window for vector_sum_col</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        Window win_vector_sum_col(collapsed_window);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        win_vector_sum_col.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        Iterator vector_sum_col_it(vector_sum_col, win_vector_sum_col);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; </div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="comment">// Offset in case vector_sum_col is batched</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> vector_sum_col_batch_offset =</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            slide_vector_sum_col ? vector_sum_col-&gt;info()-&gt;strides_in_bytes().z() : 0;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160; </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            collapsed_window,</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            {</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span>    batch_id = <span class="keywordtype">id</span>.z() / depth_input;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">size_t</span> batch_offset_col =</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                    batch_id *</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                    (sum_col_stride_y); <span class="comment">// Value to offset vector_sum_col_ptr to allow for iteration of y values in tensor</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                <span class="keyword">auto</span> vector_sum_col_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(vector_sum_col_it.ptr() + batch_offset_col +</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                                                            batch_id * vector_sum_col_batch_offset);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                <span class="keyword">auto</span> mm_result_ptr      = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(mm_result_it.ptr());</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160; </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    int32x4x4_t a_offset_term_s32 = {</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                        {vld1q_s32(vector_sum_col_ptr + x + 0), vld1q_s32(vector_sum_col_ptr + x + 4),</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                         vld1q_s32(vector_sum_col_ptr + x + 8), vld1q_s32(vector_sum_col_ptr + x + 12)}};</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160; </div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                    a_offset_term_s32.val[0] = vmulq_n_s32(a_offset_term_s32.val[0], a_offset);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                    a_offset_term_s32.val[1] = vmulq_n_s32(a_offset_term_s32.val[1], a_offset);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                    a_offset_term_s32.val[2] = vmulq_n_s32(a_offset_term_s32.val[2], a_offset);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                    a_offset_term_s32.val[3] = vmulq_n_s32(a_offset_term_s32.val[3], a_offset);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160; </div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    int32x4x4_t in_s32 = {{vld1q_s32(mm_result_ptr + x + 0), vld1q_s32(mm_result_ptr + x + 4),</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                           vld1q_s32(mm_result_ptr + x + 8), vld1q_s32(mm_result_ptr + x + 12)}};</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160; </div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                    in_s32.val[0] = vaddq_s32(in_s32.val[0], a_offset_term_s32.val[0]);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                    in_s32.val[1] = vaddq_s32(in_s32.val[1], a_offset_term_s32.val[1]);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    in_s32.val[2] = vaddq_s32(in_s32.val[2], a_offset_term_s32.val[2]);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                    in_s32.val[3] = vaddq_s32(in_s32.val[3], a_offset_term_s32.val[3]);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                    vst1q_s32(mm_result_ptr + x + 0, in_s32.val[0]);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                    vst1q_s32(mm_result_ptr + x + 4, in_s32.val[1]);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                    vst1q_s32(mm_result_ptr + x + 8, in_s32.val[2]);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                    vst1q_s32(mm_result_ptr + x + 12, in_s32.val[3]);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                }</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160; </div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                    <span class="comment">// Compute the leftover term due to a_offset.</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                    <span class="keyword">const</span> int32_t a_offset_term_s32 = *(vector_sum_col_ptr + x);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160; </div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                    <span class="comment">// Add the offset terms to GEMM&#39;s result</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                    <span class="comment">// Store the result with the offset contribution</span></div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                    mm_result_ptr[x] += a_offset_term_s32 * a_offset;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                }</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            },</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            vector_sum_col_it, mm_result_it);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    }</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keywordflow">else</span> <span class="comment">// false, false</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    {</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="comment">// No offset contribution from matrix A and matrix B</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    }</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160; </div>
<div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a56a4de6e15146bf12782705475db006d">  630</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a56a4de6e15146bf12782705475db006d">CpuGemmLowpOffsetContributionKernel::configure</a>(<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *mm_result,</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                                    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *vector_sum_col,</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                                    <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *vector_sum_row,</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                                                    int32_t      k,</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                                                    int32_t      a_offset,</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                                                    int32_t      b_offset,</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                                    <span class="keywordtype">float</span>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;{</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="comment">// Perform validate step</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(vector_sum_row);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(mm_result);</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(mm_result, vector_sum_col, vector_sum_row, a_offset, b_offset));</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160; </div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    _a_offset = a_offset;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    _b_offset = b_offset;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    _k        = k;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160; </div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    _scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordflow">if</span> (vector_sum_col != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="comment">// Check if vector_sum_col_shape should be slidden or not</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="comment">// Don&#39;t slide vector_sum_col_shape along the y dimension if vector_sum_col_shape has just 1 dimension and vector_sum_row_shape more than 1</span></div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="comment">// This scenario can happen when the the matrix multiplication is used to perform a convolution operation</span></div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        _slide_vector_sum_col = vector_sum_col-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">tensor_shape</a>().<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>() &gt; 1;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    }</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160; </div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="comment">// Configure kernel window</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> win = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*mm_result, <a class="code" href="classarm__compute_1_1_steps.xhtml">Steps</a>());</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    ICpuKernel::configure(win);</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;}</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160; </div>
<div class="line"><a name="l00662"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a0fcfb9468a9c61e47a13c69ffe1b0b52">  662</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a0fcfb9468a9c61e47a13c69ffe1b0b52">CpuGemmLowpOffsetContributionKernel::set_a_offset</a>(int32_t a_offset)</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;{</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    _a_offset = a_offset;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;}</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160; </div>
<div class="line"><a name="l00667"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a3f720d971554298585a807ca6ece5a1d">  667</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a3f720d971554298585a807ca6ece5a1d">CpuGemmLowpOffsetContributionKernel::set_b_offset</a>(int32_t b_offset)</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;{</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    _b_offset = b_offset;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;}</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160; </div>
<div class="line"><a name="l00672"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#ad197f6a7767dda690fd0c5474a0ea773">  672</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#ad197f6a7767dda690fd0c5474a0ea773">CpuGemmLowpOffsetContributionKernel::set_scale</a>(<span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>)</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;{</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    _scale = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;}</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160; </div>
<div class="line"><a name="l00677"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a18a1134c4a0899ab68380c56ca33500b">  677</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a18a1134c4a0899ab68380c56ca33500b">CpuGemmLowpOffsetContributionKernel::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *mm_result,</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *vector_sum_col,</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                                                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *vector_sum_row,</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                                                     int32_t            a_offset,</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                                                     int32_t            b_offset)</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;{</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(mm_result, vector_sum_col, vector_sum_row, a_offset, b_offset));</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160; </div>
<div class="line"><a name="l00687"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">  687</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">CpuGemmLowpOffsetContributionKernel::run_op</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;{</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a>(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">ICpuKernel::window</a>(), <a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>);</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160; </div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keyword">auto</span> vector_sum_col = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">auto</span> vector_sum_row = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">get_const_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keyword">auto</span> mm_result      = tensors.<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">get_tensor</a>(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>);</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160; </div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="comment">// Check if input is a 3D reinterpretation</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> reinterpret_as_3d = vector_sum_row != <span class="keyword">nullptr</span> &amp;&amp; mm_result-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">num_dimensions</a>() &gt; 1 &amp;&amp;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                   mm_result-&gt;info()-&gt;tensor_shape().y() != vector_sum_row-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160; </div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="comment">// check to see what is the output type of result</span></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keyword">auto</span> k_offset = _a_offset * _b_offset * _k;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keywordflow">if</span> (mm_result-&gt;info()-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    {</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        run_offset_contribution_float(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, mm_result, vector_sum_col, vector_sum_row, _a_offset, _b_offset, k_offset,</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                                      _scale, _slide_vector_sum_col, reinterpret_as_3d);</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    }</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    {</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        run_offset_contribution(<a class="code" href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">window</a>, mm_result, vector_sum_col, vector_sum_row, _a_offset, _b_offset, k_offset,</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                                _slide_vector_sum_col, reinterpret_as_3d);</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;}</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160; </div>
<div class="line"><a name="l00715"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">  715</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">CpuGemmLowpOffsetContributionKernel::name</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;CpuGemmLowpOffsetContributionKernel&quot;</span>;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;}</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;} <span class="comment">// namespace kernels</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassarm__compute_1_1_steps_xhtml"><div class="ttname"><a href="classarm__compute_1_1_steps.xhtml">arm_compute::Steps</a></div><div class="ttdoc">Class to describe a number of elements in each dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_steps_8h_source.xhtml#l00040">Steps.h:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7c66505457d00ece3aa4b34cab80757d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">arm_compute::ITensorInfo::tensor_shape</a></div><div class="ttdeci">virtual const TensorShape &amp; tensor_shape() const =0</div><div class="ttdoc">Size for each dimension of the tensor.</div></div>
<div class="ttc" id="aarm__compute_2core_2_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_helpers_8h.xhtml">Helpers.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaae4098f0f54b97f23d99be335c459ad"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaae4098f0f54b97f23d99be335c459ad">arm_compute::test::validation::output_shape</a></div><div class="ttdeci">TensorShape output_shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00469">LSTMLayerQuantized.cpp:469</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_1_1kernels_xhtml_acf9ea6633274730cd08b8b8fab3a6fe6"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">arm_compute::cpu::kernels::validate_arguments</a></div><div class="ttdeci">Status validate_arguments(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">CpuDirectConv2dKernel.cpp:57</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a1b35b0d258183cf9ef36adf684d0b88c"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a1b35b0d258183cf9ef36adf684d0b88c">ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_UNCONFIGURED_KERNEL(k)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l01079">Validate.h:1079</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="a_window_8h_xhtml"><div class="ttname"><a href="_window_8h.xhtml">Window.h</a></div></div>
<div class="ttc" id="a_tensor_info_8h_xhtml"><div class="ttname"><a href="_tensor_info_8h.xhtml">TensorInfo.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a341a4c8a24d190d39504656989573d91"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a341a4c8a24d190d39504656989573d91">arm_compute::ITensorPack::get_tensor</a></div><div class="ttdeci">ITensor * get_tensor(int id)</div><div class="ttdoc">Get tensor of a given id from the pac.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00063">ITensorPack.cpp:63</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel_xhtml_a56a4de6e15146bf12782705475db006d"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a56a4de6e15146bf12782705475db006d">arm_compute::cpu::kernels::CpuGemmLowpOffsetContributionKernel::configure</a></div><div class="ttdeci">void configure(ITensorInfo *mm_result, ITensorInfo *vector_sum_col, ITensorInfo *vector_sum_row, int32_t k, int32_t a_offset, int32_t b_offset, float scale=1.0f)</div><div class="ttdoc">Initialise the kernel's input and output.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00630">CpuGemmLowpOffsetContributionKernel.cpp:630</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdeci">@ ACL_SRC_0</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="a_error_8h_xhtml"><div class="ttname"><a href="_error_8h.xhtml">Error.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdeci">@ ACL_SRC_1</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="a_cpu_gemm_lowp_offset_contribution_kernel_8h_xhtml"><div class="ttname"><a href="_cpu_gemm_lowp_offset_contribution_kernel_8h.xhtml">CpuGemmLowpOffsetContributionKernel.h</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00952">Validate.h:952</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00205">Error.h:205</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml_a000c70e9839ed364ab7343de880a4d35"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml#a000c70e9839ed364ab7343de880a4d35">arm_compute::ITensorPack::get_const_tensor</a></div><div class="ttdeci">const ITensor * get_const_tensor(int id) const</div><div class="ttdoc">Get constant tensor of a given id.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8cpp_source.xhtml#l00053">ITensorPack.cpp:53</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a206d6e247e0957ac3dee45d27756fc25"><div class="ttname"><a href="_error_8h.xhtml#a206d6e247e0957ac3dee45d27756fc25">ARM_COMPUTE_RETURN_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00298">Error.h:298</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdeci">@ ACL_DST</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel_xhtml_a3f720d971554298585a807ca6ece5a1d"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a3f720d971554298585a807ca6ece5a1d">arm_compute::cpu::kernels::CpuGemmLowpOffsetContributionKernel::set_b_offset</a></div><div class="ttdeci">void set_b_offset(int32_t b_offset)</div><div class="ttdoc">Set the b offset Warning: if b_offset is non-zero then vector_sum_row must be set in run_op.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00667">CpuGemmLowpOffsetContributionKernel.cpp:667</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel_xhtml_a0fcfb9468a9c61e47a13c69ffe1b0b52"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a0fcfb9468a9c61e47a13c69ffe1b0b52">arm_compute::cpu::kernels::CpuGemmLowpOffsetContributionKernel::set_a_offset</a></div><div class="ttdeci">void set_a_offset(int32_t a_offset)</div><div class="ttdoc">Set the a offset Warning: if a_offset is non-zero then vector_sum_col must be set in run_op.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00662">CpuGemmLowpOffsetContributionKernel.cpp:662</a></div></div>
<div class="ttc" id="a_window_helpers_8h_xhtml"><div class="ttname"><a href="_window_helpers_8h.xhtml">WindowHelpers.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel_xhtml_ad197f6a7767dda690fd0c5474a0ea773"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#ad197f6a7767dda690fd0c5474a0ea773">arm_compute::cpu::kernels::CpuGemmLowpOffsetContributionKernel::set_scale</a></div><div class="ttdeci">void set_scale(float scale)</div><div class="ttdoc">Set the dequantize scale.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00672">CpuGemmLowpOffsetContributionKernel.cpp:672</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a6eb9ce82815fe429250189da7592ba75"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a6eb9ce82815fe429250189da7592ba75">ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_INVALID_SUBWINDOW(f, s)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00203">Validate.h:203</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a112cc1d5093b7672bf11569659251a7c"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a112cc1d5093b7672bf11569659251a7c">arm_compute::Dimensions::collapse_from</a></div><div class="ttdeci">void collapse_from(size_t start)</div><div class="ttdoc">Collapse dimensions starting from a given point.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00182">Dimensions.h:182</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="a_auto_configuration_8h_xhtml"><div class="ttname"><a href="_auto_configuration_8h.xhtml">AutoConfiguration.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_kernel_xhtml_ad34a46f53686c12a5c5e717cc9617fb6"><div class="ttname"><a href="classarm__compute_1_1_i_kernel.xhtml#ad34a46f53686c12a5c5e717cc9617fb6">arm_compute::IKernel::window</a></div><div class="ttdeci">const Window &amp; window() const</div><div class="ttdoc">The maximum window the kernel can be executed on.</div><div class="ttdef"><b>Definition:</b> <a href="_i_kernel_8cpp_source.xhtml#l00028">IKernel.cpp:28</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_thread_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_thread_info.xhtml">arm_compute::ThreadInfo</a></div><div class="ttdoc">Information about executing thread and CPU.</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00180">CPPTypes.h:180</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_utils_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_utils_8h.xhtml">Utils.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel_xhtml_a18a1134c4a0899ab68380c56ca33500b"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a18a1134c4a0899ab68380c56ca33500b">arm_compute::cpu::kernels::CpuGemmLowpOffsetContributionKernel::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *mm_result, const ITensorInfo *vector_sum_col, const ITensorInfo *vector_sum_row, int32_t a_offset, int32_t b_offset)</div><div class="ttdoc">Static function to check if given info will lead to a valid configuration.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00677">CpuGemmLowpOffsetContributionKernel.cpp:677</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00245">Error.h:245</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel_xhtml_a883429dd6cf828bfdd64b255afc458da"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#a883429dd6cf828bfdd64b255afc458da">arm_compute::cpu::kernels::CpuGemmLowpOffsetContributionKernel::run_op</a></div><div class="ttdeci">void run_op(ITensorPack &amp;tensors, const Window &amp;window, const ThreadInfo &amp;info) override</div><div class="ttdoc">Execute the kernel on the passed window.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00687">CpuGemmLowpOffsetContributionKernel.cpp:687</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">signed 32-bit number</div></div>
<div class="ttc" id="aclassarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel_xhtml_aef1a10d4d6422ca58d53d8414d5954bd"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_gemm_lowp_offset_contribution_kernel.xhtml#aef1a10d4d6422ca58d53d8414d5954bd">arm_compute::cpu::kernels::CpuGemmLowpOffsetContributionKernel::name</a></div><div class="ttdeci">const char * name() const override</div><div class="ttdoc">Name of the kernel.</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00715">CpuGemmLowpOffsetContributionKernel.cpp:715</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor's metadata.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00044">ITensorInfo.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::DataType::F32</a></div><div class="ttdeci">@ F32</div><div class="ttdoc">32-bit floating-point number</div></div>
<div class="ttc" id="a_i_tensor_8h_xhtml"><div class="ttname"><a href="_i_tensor_8h.xhtml">ITensor.h</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00142">Dimensions.h:142</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a1f4e725b8e1ea36b30e09dc08ae6961d"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">arm_compute::ITensorInfo::num_dimensions</a></div><div class="ttdeci">virtual size_t num_dimensions() const =0</div><div class="ttdoc">The number of dimensions of the tensor (rank)</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="_cpu_gemm_lowp_offset_contribution_kernel_8cpp.xhtml">CpuGemmLowpOffsetContributionKernel.cpp</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:53:57 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
