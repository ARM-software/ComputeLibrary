<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Window Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_window.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">Window Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Describe a multidimensional execution window.  
 <a href="classarm__compute_1_1_window.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_window_8h_source.xhtml">Window.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describe one of the image's dimensions with a start, end and step.  <a href="classarm__compute_1_1_window_1_1_dimension.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab242a9d3683ac8f480f7944ff6f40534"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> ()</td></tr>
<tr class="memdesc:ab242a9d3683ac8f480f7944ff6f40534"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor: create a window containing a single element.  <a href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">More...</a><br /></td></tr>
<tr class="separator:ab242a9d3683ac8f480f7944ff6f40534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65e2546322a23806510364033bc8fcd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ae65e2546322a23806510364033bc8fcd">Window</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;src)</td></tr>
<tr class="memdesc:ae65e2546322a23806510364033bc8fcd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="classarm__compute_1_1_window.xhtml#ae65e2546322a23806510364033bc8fcd">More...</a><br /></td></tr>
<tr class="separator:ae65e2546322a23806510364033bc8fcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a920f28ad2a867b3a6c0fa538a5183e11"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a920f28ad2a867b3a6c0fa538a5183e11">operator=</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs)</td></tr>
<tr class="memdesc:a920f28ad2a867b3a6c0fa538a5183e11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <a href="classarm__compute_1_1_window.xhtml#a920f28ad2a867b3a6c0fa538a5183e11">More...</a><br /></td></tr>
<tr class="separator:a920f28ad2a867b3a6c0fa538a5183e11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac13b9cd31178cde1e6b25302d619ea05"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ac13b9cd31178cde1e6b25302d619ea05">operator[]</a> (size_t dimension) const</td></tr>
<tr class="memdesc:ac13b9cd31178cde1e6b25302d619ea05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read only access to a given dimension of the window.  <a href="classarm__compute_1_1_window.xhtml#ac13b9cd31178cde1e6b25302d619ea05">More...</a><br /></td></tr>
<tr class="separator:ac13b9cd31178cde1e6b25302d619ea05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a273fd2ecdd45169b2f702f01a7e5e382"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a> () const</td></tr>
<tr class="memdesc:a273fd2ecdd45169b2f702f01a7e5e382"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the first dimension of the window.  <a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">More...</a><br /></td></tr>
<tr class="separator:a273fd2ecdd45169b2f702f01a7e5e382"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b522b073f3ca32d24eb4e03495ef8a6"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a> () const</td></tr>
<tr class="memdesc:a1b522b073f3ca32d24eb4e03495ef8a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the second dimension of the window.  <a href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">More...</a><br /></td></tr>
<tr class="separator:a1b522b073f3ca32d24eb4e03495ef8a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51a8c7a9d2fa20943c213e85eb8d9caf"><td class="memItemLeft" align="right" valign="top">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">z</a> () const</td></tr>
<tr class="memdesc:a51a8c7a9d2fa20943c213e85eb8d9caf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias to access the third dimension of the window.  <a href="classarm__compute_1_1_window.xhtml#a51a8c7a9d2fa20943c213e85eb8d9caf">More...</a><br /></td></tr>
<tr class="separator:a51a8c7a9d2fa20943c213e85eb8d9caf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd3d2bba51cb84d34dd7656ad2375a6e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a> (size_t dimension, const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;dim)</td></tr>
<tr class="memdesc:acd3d2bba51cb84d34dd7656ad2375a6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the values of a given dimension.  <a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">More...</a><br /></td></tr>
<tr class="separator:acd3d2bba51cb84d34dd7656ad2375a6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29b98c579478c77b57c0f75c92bd647e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">set_broadcasted</a> (size_t dimension)</td></tr>
<tr class="memdesc:a29b98c579478c77b57c0f75c92bd647e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the dimension as broadcasted dimension.  <a href="classarm__compute_1_1_window.xhtml#a29b98c579478c77b57c0f75c92bd647e">More...</a><br /></td></tr>
<tr class="separator:a29b98c579478c77b57c0f75c92bd647e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e77b72655c2e465435a83497961bdcb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">is_broadcasted</a> (size_t dimension) const</td></tr>
<tr class="memdesc:a6e77b72655c2e465435a83497961bdcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return whether a dimension has been broadcasted.  <a href="classarm__compute_1_1_window.xhtml#a6e77b72655c2e465435a83497961bdcb">More...</a><br /></td></tr>
<tr class="separator:a6e77b72655c2e465435a83497961bdcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14470b4cb59140a1b6ff3b8f16c89ab6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">use_tensor_dimensions</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>, size_t first_dimension=<a class="el" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>)</td></tr>
<tr class="memdesc:a14470b4cb59140a1b6ff3b8f16c89ab6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use the tensor's dimensions to fill the window dimensions.  <a href="classarm__compute_1_1_window.xhtml#a14470b4cb59140a1b6ff3b8f16c89ab6">More...</a><br /></td></tr>
<tr class="separator:a14470b4cb59140a1b6ff3b8f16c89ab6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae688f3eb6c2673216d12d5490e1e88dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">shift</a> (size_t dimension, int shift_value)</td></tr>
<tr class="memdesc:ae688f3eb6c2673216d12d5490e1e88dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shift the values of a given dimension by the given shift_value.  <a href="classarm__compute_1_1_window.xhtml#ae688f3eb6c2673216d12d5490e1e88dc">More...</a><br /></td></tr>
<tr class="separator:ae688f3eb6c2673216d12d5490e1e88dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf1ebf1e03a551e47f6bdac4bcf04f17"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#adf1ebf1e03a551e47f6bdac4bcf04f17">shift_dimensions</a> (unsigned int shift_value, unsigned int start_dim=0) const</td></tr>
<tr class="memdesc:adf1ebf1e03a551e47f6bdac4bcf04f17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shift down all the dimensions of a window starting from the specified dimension.  <a href="classarm__compute_1_1_window.xhtml#adf1ebf1e03a551e47f6bdac4bcf04f17">More...</a><br /></td></tr>
<tr class="separator:adf1ebf1e03a551e47f6bdac4bcf04f17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69496c7cb46a4101813d7456a6bd097b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">adjust</a> (size_t dimension, int adjust_value, bool is_at_start)</td></tr>
<tr class="memdesc:a69496c7cb46a4101813d7456a6bd097b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust the start or end of a given dimension by the given value.  <a href="classarm__compute_1_1_window.xhtml#a69496c7cb46a4101813d7456a6bd097b">More...</a><br /></td></tr>
<tr class="separator:a69496c7cb46a4101813d7456a6bd097b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8e5ab06329702df09ab7eb07e9b84d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">scale</a> (size_t dimension, float scale_value)</td></tr>
<tr class="memdesc:a5e8e5ab06329702df09ab7eb07e9b84d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the values of a given dimension by the given scale_value.  <a href="classarm__compute_1_1_window.xhtml#a5e8e5ab06329702df09ab7eb07e9b84d">More...</a><br /></td></tr>
<tr class="separator:a5e8e5ab06329702df09ab7eb07e9b84d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55ed4ad2395fd25ba847cbf6c54b85e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">set_dimension_step</a> (size_t dimension, int step)</td></tr>
<tr class="memdesc:a55ed4ad2395fd25ba847cbf6c54b85e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the step of a given dimension.  <a href="classarm__compute_1_1_window.xhtml#a55ed4ad2395fd25ba847cbf6c54b85e4">More...</a><br /></td></tr>
<tr class="separator:a55ed4ad2395fd25ba847cbf6c54b85e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">validate</a> () const</td></tr>
<tr class="memdesc:ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will validate all the window's dimensions' values when asserts are enabled.  <a href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">More...</a><br /></td></tr>
<tr class="separator:ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fb4b3d6b185c9d225073f923f1827c3"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a> (size_t dimension) const</td></tr>
<tr class="memdesc:a2fb4b3d6b185c9d225073f923f1827c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of iterations needed to iterate through a given dimension.  <a href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">More...</a><br /></td></tr>
<tr class="separator:a2fb4b3d6b185c9d225073f923f1827c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0654fca130488c15b4b66a9b7131c142"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">num_iterations_total</a> () const</td></tr>
<tr class="memdesc:a0654fca130488c15b4b66a9b7131c142"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the total number of iterations needed to iterate through the entire window.  <a href="classarm__compute_1_1_window.xhtml#a0654fca130488c15b4b66a9b7131c142">More...</a><br /></td></tr>
<tr class="separator:a0654fca130488c15b4b66a9b7131c142"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfa164a379c0c401a662792d7d0ccfba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a> () const</td></tr>
<tr class="memdesc:abfa164a379c0c401a662792d7d0ccfba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the shape of the window in number of steps.  <a href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">More...</a><br /></td></tr>
<tr class="separator:abfa164a379c0c401a662792d7d0ccfba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad82ac0dcf7e7a862a3b73f1be3ca98f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">split_window</a> (size_t dimension, size_t id, size_t total) const</td></tr>
<tr class="memdesc:ad82ac0dcf7e7a862a3b73f1be3ca98f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Split a window into a set of sub windows along a given dimension.  <a href="classarm__compute_1_1_window.xhtml#ad82ac0dcf7e7a862a3b73f1be3ca98f1">More...</a><br /></td></tr>
<tr class="separator:ad82ac0dcf7e7a862a3b73f1be3ca98f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54486ab629d17bf891146deb4b616717"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a54486ab629d17bf891146deb4b616717">first_slice_window_1D</a> () const</td></tr>
<tr class="memdesc:a54486ab629d17bf891146deb4b616717"><td class="mdescLeft">&#160;</td><td class="mdescRight">First 1D slice of the window.  <a href="classarm__compute_1_1_window.xhtml#a54486ab629d17bf891146deb4b616717">More...</a><br /></td></tr>
<tr class="separator:a54486ab629d17bf891146deb4b616717"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a016fdd5b1c05ce7d06088891a0d36bff"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a016fdd5b1c05ce7d06088891a0d36bff">first_slice_window_2D</a> () const</td></tr>
<tr class="memdesc:a016fdd5b1c05ce7d06088891a0d36bff"><td class="mdescLeft">&#160;</td><td class="mdescRight">First 2D slice of the window.  <a href="classarm__compute_1_1_window.xhtml#a016fdd5b1c05ce7d06088891a0d36bff">More...</a><br /></td></tr>
<tr class="separator:a016fdd5b1c05ce7d06088891a0d36bff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30ca5bdbb60ee281d7f1ab34f7a4ee40"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a30ca5bdbb60ee281d7f1ab34f7a4ee40">first_slice_window_3D</a> () const</td></tr>
<tr class="memdesc:a30ca5bdbb60ee281d7f1ab34f7a4ee40"><td class="mdescLeft">&#160;</td><td class="mdescRight">First 3D slice of the window.  <a href="classarm__compute_1_1_window.xhtml#a30ca5bdbb60ee281d7f1ab34f7a4ee40">More...</a><br /></td></tr>
<tr class="separator:a30ca5bdbb60ee281d7f1ab34f7a4ee40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14bbbcfa75deb1a56c83406bfc37eec2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a14bbbcfa75deb1a56c83406bfc37eec2">first_slice_window_4D</a> () const</td></tr>
<tr class="memdesc:a14bbbcfa75deb1a56c83406bfc37eec2"><td class="mdescLeft">&#160;</td><td class="mdescRight">First 4D slice of the window.  <a href="classarm__compute_1_1_window.xhtml#a14bbbcfa75deb1a56c83406bfc37eec2">More...</a><br /></td></tr>
<tr class="separator:a14bbbcfa75deb1a56c83406bfc37eec2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1a2b580ba9e1a3ed7124c3f37179bca"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ad1a2b580ba9e1a3ed7124c3f37179bca">slide_window_slice_1D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const</td></tr>
<tr class="memdesc:ad1a2b580ba9e1a3ed7124c3f37179bca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 1D window slice.  <a href="classarm__compute_1_1_window.xhtml#ad1a2b580ba9e1a3ed7124c3f37179bca">More...</a><br /></td></tr>
<tr class="separator:ad1a2b580ba9e1a3ed7124c3f37179bca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af72109ea9b9b75839d5601e39d8394de"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#af72109ea9b9b75839d5601e39d8394de">slide_window_slice_2D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const</td></tr>
<tr class="memdesc:af72109ea9b9b75839d5601e39d8394de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 2D window slice.  <a href="classarm__compute_1_1_window.xhtml#af72109ea9b9b75839d5601e39d8394de">More...</a><br /></td></tr>
<tr class="separator:af72109ea9b9b75839d5601e39d8394de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac792e3a11bc73bafafc4f4284c7f215"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#aac792e3a11bc73bafafc4f4284c7f215">slide_window_slice_3D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const</td></tr>
<tr class="memdesc:aac792e3a11bc73bafafc4f4284c7f215"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 3D window slice.  <a href="classarm__compute_1_1_window.xhtml#aac792e3a11bc73bafafc4f4284c7f215">More...</a><br /></td></tr>
<tr class="separator:aac792e3a11bc73bafafc4f4284c7f215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad41f3f5322c2797798363be2ec3fde85"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ad41f3f5322c2797798363be2ec3fde85">slide_window_slice_4D</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;slice) const</td></tr>
<tr class="memdesc:ad41f3f5322c2797798363be2ec3fde85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Slide the passed 4D window slice.  <a href="classarm__compute_1_1_window.xhtml#ad41f3f5322c2797798363be2ec3fde85">More...</a><br /></td></tr>
<tr class="separator:ad41f3f5322c2797798363be2ec3fde85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a663ce71e1992366180fcb85b0a874e2f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, size_t first, size_t last, bool *has_collapsed=nullptr) const</td></tr>
<tr class="memdesc:a663ce71e1992366180fcb85b0a874e2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse the dimensions between <code>first</code> and <code>last</code> if possible.  <a href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">More...</a><br /></td></tr>
<tr class="separator:a663ce71e1992366180fcb85b0a874e2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa46c9cd851caf7cca518accb86f9bcd7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#aa46c9cd851caf7cca518accb86f9bcd7">collapse_if_possible</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, size_t first, bool *has_collapsed=nullptr) const</td></tr>
<tr class="memdesc:aa46c9cd851caf7cca518accb86f9bcd7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse the dimensions higher than <code>first</code> if possible.  <a href="classarm__compute_1_1_window.xhtml#aa46c9cd851caf7cca518accb86f9bcd7">More...</a><br /></td></tr>
<tr class="separator:aa46c9cd851caf7cca518accb86f9bcd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6303f954929d2bdac13a4712ecf9711"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">collapse</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;full_window, size_t first, size_t last=<a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>) const</td></tr>
<tr class="memdesc:af6303f954929d2bdac13a4712ecf9711"><td class="mdescLeft">&#160;</td><td class="mdescRight">Collapse the dimensions between <code>first</code> and <code>last</code>.  <a href="classarm__compute_1_1_window.xhtml#af6303f954929d2bdac13a4712ecf9711">More...</a><br /></td></tr>
<tr class="separator:af6303f954929d2bdac13a4712ecf9711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae20ec28555d4473419cae37cf120f35d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>) const</td></tr>
<tr class="memdesc:ae20ec28555d4473419cae37cf120f35d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Don't advance in the dimension where <code>shape</code> is less equal to 1.  <a href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">More...</a><br /></td></tr>
<tr class="separator:ae20ec28555d4473419cae37cf120f35d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a8a12cc3cc3d07d9914cfa5f94b3ee5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a8a8a12cc3cc3d07d9914cfa5f94b3ee5">broadcast_if_dimension_le_one</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info) const</td></tr>
<tr class="memdesc:a8a8a12cc3cc3d07d9914cfa5f94b3ee5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Don't advance in the dimension where shape of <code>info</code> is less equal to 1.  <a href="classarm__compute_1_1_window.xhtml#a8a8a12cc3cc3d07d9914cfa5f94b3ee5">More...</a><br /></td></tr>
<tr class="separator:a8a8a12cc3cc3d07d9914cfa5f94b3ee5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:aa96e81276ee4f87ab386cd05a5539a7d"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">DimX</a> = 0</td></tr>
<tr class="memdesc:aa96e81276ee4f87ab386cd05a5539a7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 0 also known as X dimension.  <a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">More...</a><br /></td></tr>
<tr class="separator:aa96e81276ee4f87ab386cd05a5539a7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2d402364fa822b0b7775081291eeca9"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">DimY</a> = 1</td></tr>
<tr class="memdesc:ad2d402364fa822b0b7775081291eeca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 1 also known as Y dimension.  <a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">More...</a><br /></td></tr>
<tr class="separator:ad2d402364fa822b0b7775081291eeca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a893d17b56b9abc4423ce26e9a24ac5dc"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">DimZ</a> = 2</td></tr>
<tr class="memdesc:a893d17b56b9abc4423ce26e9a24ac5dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 2 also known as Z dimension.  <a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">More...</a><br /></td></tr>
<tr class="separator:a893d17b56b9abc4423ce26e9a24ac5dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60f2e7a76af978d4eb6be4ac6e8044d1"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">DimW</a> = 3</td></tr>
<tr class="memdesc:a60f2e7a76af978d4eb6be4ac6e8044d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 3 also known as W dimension.  <a href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">More...</a><br /></td></tr>
<tr class="separator:a60f2e7a76af978d4eb6be4ac6e8044d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92b721b1285e3bfc30c6739decc26fd4"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a92b721b1285e3bfc30c6739decc26fd4">DimV</a> = 4</td></tr>
<tr class="memdesc:a92b721b1285e3bfc30c6739decc26fd4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Alias for dimension 4 also known as V dimension.  <a href="classarm__compute_1_1_window.xhtml#a92b721b1285e3bfc30c6739decc26fd4">More...</a><br /></td></tr>
<tr class="separator:a92b721b1285e3bfc30c6739decc26fd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ae181d6e147a7230d02611fb9077959f0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">swap</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs)</td></tr>
<tr class="memdesc:ae181d6e147a7230d02611fb9077959f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Friend function that swaps the contents of two windows.  <a href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">More...</a><br /></td></tr>
<tr class="separator:ae181d6e147a7230d02611fb9077959f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97b2f08fa5b45ffc8dcde9c01adee28f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_window.xhtml#a97b2f08fa5b45ffc8dcde9c01adee28f">operator==</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;lhs, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;rhs)</td></tr>
<tr class="memdesc:a97b2f08fa5b45ffc8dcde9c01adee28f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether two Windows are equal.  <a href="classarm__compute_1_1_window.xhtml#a97b2f08fa5b45ffc8dcde9c01adee28f">More...</a><br /></td></tr>
<tr class="separator:a97b2f08fa5b45ffc8dcde9c01adee28f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Describe a multidimensional execution window. </p>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00039">39</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ab242a9d3683ac8f480f7944ff6f40534"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab242a9d3683ac8f480f7944ff6f40534">&#9670;&nbsp;</a></span>Window() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor: create a window containing a single element. </p>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00054">54</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        : _dims(), _is_broadcasted(utility::generate_array&lt;bool, Coordinates::num_max_dimensions, false&gt;::value)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae65e2546322a23806510364033bc8fcd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae65e2546322a23806510364033bc8fcd">&#9670;&nbsp;</a></span>Window() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>src</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">src</td><td>Copy the values from src to a new object </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00030">30</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : _dims(), _is_broadcasted(utility::generate_array&lt;bool, Coordinates::num_max_dimensions, false&gt;::value)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++i)</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(i, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>[i]);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        _is_broadcasted[i] = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>.is_broadcasted(i);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a69496c7cb46a4101813d7456a6bd097b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69496c7cb46a4101813d7456a6bd097b">&#9670;&nbsp;</a></span>adjust()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void adjust </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>adjust_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_at_start</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adjust the start or end of a given dimension by the given value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to adjust </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">adjust_value</td><td>The adjusted value. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">is_at_start</td><td>The flag to indicate whether adjust the start or end of the dimension. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00154">154</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    Window::Dimension &amp;d = _dims[dimension];</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">if</span> (is_at_start)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        d = Window::Dimension(d.start() + adjust_value, d.end(), d.step());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        d = Window::Dimension(d.start(), d.end() + adjust_value, d.step());</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>.</p>

</div>
</div>
<a id="a8a8a12cc3cc3d07d9914cfa5f94b3ee5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a8a12cc3cc3d07d9914cfa5f94b3ee5">&#9670;&nbsp;</a></span>broadcast_if_dimension_le_one() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> broadcast_if_dimension_le_one </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Don't advance in the dimension where shape of <code>info</code> is less equal to 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>An <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml" title="Store the tensor&#39;s metadata.">ITensorInfo</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Broadcast window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00421">421</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">broadcast_if_dimension_le_one</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape());</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, and <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>.</p>

</div>
</div>
<a id="ae20ec28555d4473419cae37cf120f35d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae20ec28555d4473419cae37cf120f35d">&#9670;&nbsp;</a></span>broadcast_if_dimension_le_one() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> broadcast_if_dimension_le_one </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Don't advance in the dimension where <code>shape</code> is less equal to 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>A <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" title="Shape of a tensor.">TensorShape</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Broadcast window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00134">134</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> broadcastWin(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a>; ++d)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>[d] &lt;= 1)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            broadcastWin.set_broadcasted(d);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> broadcastWin;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>, <a class="el" href="_window_8inl_source.xhtml#l00059">Window::set_broadcasted()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00298">Window::shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="add_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::add_same_neon()</a>, <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00039">arm_compute::cpu::add_same_sve()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00085">arm_compute::cpu::add_sub_q8_neon_fixedpoint()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="_window_8h_source.xhtml#l00421">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00038">arm_compute::cpu::elementwise_arithmetic_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00152">arm_compute::cpu::elementwise_comparison_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00086">arm_compute::cpu::elementwise_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00036">arm_compute::cpu::mul_F32_F32_F32()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::sub_qsymm16_neon()</a>, and <a class="el" href="sub_2neon_2impl_8h_source.xhtml#l00042">arm_compute::cpu::sub_same_neon()</a>.</p>

</div>
</div>
<a id="af6303f954929d2bdac13a4712ecf9711"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6303f954929d2bdac13a4712ecf9711">&#9670;&nbsp;</a></span>collapse()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> collapse </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>full_window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>last</em> = <code><a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapse the dimensions between <code>first</code> and <code>last</code>. </p>
<p>A dimension is collapsable if it starts from 0 and matches the corresponding dimension in the full_window</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">full_window</td><td>Full window <code>window</code> has been created from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td>Start dimension into which the following are collapsed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td>End (exclusive) dimension to collapse.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Collapsed window if successful. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00125">125</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">bool</span>   has_collapsed = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> collapsed     = <a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a>(full_window, first, last, &amp;has_collapsed);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="comment">// Make sure that the window has collapsed</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!has_collapsed);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> collapsed;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00137">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_gpu_ckw_resize_8cpp_source.xhtml#l00533">GpuCkwResize::get_window()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00351">GpuCkwDepthwiseConv2d::get_window()</a>, <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00237">GpuCkwMatMul::get_window()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00145">CLComputeAllAnchorsKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00141">CLReverseKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00138">CLStackLayerKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00412">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">CLComputeMeanVariance::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00231">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00231">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00238">ClMatMulNativeKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00231">ClMatMulLowpNativeKernel::run_op()</a>, and <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>.</p>

</div>
</div>
<a id="aa46c9cd851caf7cca518accb86f9bcd7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa46c9cd851caf7cca518accb86f9bcd7">&#9670;&nbsp;</a></span>collapse_if_possible() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> collapse_if_possible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>full_window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>has_collapsed</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapse the dimensions higher than <code>first</code> if possible. </p>
<p>A dimension is collapsable if it starts from 0 and matches the corresponding dimension in the full_window</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">full_window</td><td>Full window <code>window</code> has been created from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td>Start dimension into which the following are collapsed. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">has_collapsed</td><td>(Optional) Whether the window was collapsed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Collapsed window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00390">390</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">collapse_if_possible</a>(full_window, first, <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>, has_collapsed);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

</div>
</div>
<a id="a663ce71e1992366180fcb85b0a874e2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a663ce71e1992366180fcb85b0a874e2f">&#9670;&nbsp;</a></span>collapse_if_possible() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> collapse_if_possible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>full_window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>last</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>has_collapsed</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Collapse the dimensions between <code>first</code> and <code>last</code> if possible. </p>
<p>A dimension is collapsable if it starts from 0 and matches the corresponding dimension in the full_window</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">full_window</td><td>Full window <code>window</code> has been created from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first</td><td>Start dimension into which the following are collapsed. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">last</td><td>End (exclusive) dimension to collapse. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">has_collapsed</td><td>(Optional) Whether the window was collapsed.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Collapsed window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00072">72</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> collapsed(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">bool</span> is_collapsable = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">int</span>  collapsed_end  = _dims[first].end();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = first + 1; is_collapsable &amp;&amp; (d &lt; last); ++d)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">// The _dims&#39;s dimension must match the full _dims dimension to be collapsable:</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        is_collapsable = (_dims[d].start() == 0) &amp;&amp; (full_window[d].start() == 0) &amp;&amp; (_dims[d].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() &lt;= 1) &amp;&amp;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                         (full_window[d].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() == _dims[d].end());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        collapsed_end *= _dims[d].end();</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> (is_collapsable)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        collapsed._dims.at(first).set_end(collapsed_end);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = first + 1; is_collapsable &amp;&amp; (d &lt; last); ++d)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            collapsed.set(d, Dimension());</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span> (has_collapsed != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        *has_collapsed = is_collapsable;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> collapsed;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_8inl_source.xhtml#l00125">Window::collapse()</a>, <a class="el" href="_window_8h_source.xhtml#l00390">Window::collapse_if_possible()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">arm_compute::cpu::fp_neon_activation_impl()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::matrix_addition_f32()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00105">NEReorgLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00126">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00254">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00140">CLTileKernel::run()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00134">CLGatherKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00142">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00163">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00208">CLFillBorderKernel::run()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00220">CLDeconvolutionReshapeOutputKernel::run()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00051">CpuFillKernel::run_op()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00093">CpuConvertQuantizedSignednessKernel::run_op()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00131">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00104">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00128">ClTransposeKernel::run_op()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00105">ClReshapeKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00144">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00170">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00104">ClFillKernel::run_op()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00163">ClQuantizeKernel::run_op()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00254">ClPool3dKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00250">ClActivationKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00148">ClCastKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00185">CLStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00183">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00041">arm_compute::cpu::sve2_qsymm16_activation()</a>, and <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml#l00040">arm_compute::cpu::sve_fp32_activation()</a>.</p>

</div>
</div>
<a id="a54486ab629d17bf891146deb4b616717"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54486ab629d17bf891146deb4b616717">&#9670;&nbsp;</a></span>first_slice_window_1D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window_1D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First 1D slice of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>The first slice of the window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00290">290</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;1&gt;();</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    };</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00172">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00141">CLReverseKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00263">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00231">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00122">CpuCopyKernel::run_op()</a>, and <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>.</p>

</div>
</div>
<a id="a016fdd5b1c05ce7d06088891a0d36bff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a016fdd5b1c05ce7d06088891a0d36bff">&#9670;&nbsp;</a></span>first_slice_window_2D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window_2D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First 2D slice of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>The first slice of the window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00298">298</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;2&gt;();</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    };</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_i_c_l_simple2_d_kernel_8cpp_source.xhtml#l00030">ICLSimple2DKernel::run()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00103">CLBitwiseKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00172">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00127">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00178">CLBoundingBoxTransformKernel::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00236">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00231">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>.</p>

</div>
</div>
<a id="a30ca5bdbb60ee281d7f1ab34f7a4ee40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30ca5bdbb60ee281d7f1ab34f7a4ee40">&#9670;&nbsp;</a></span>first_slice_window_3D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window_3D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First 3D slice of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>The first slice of the window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00306">306</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;3&gt;();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    };</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_i_c_l_simple3_d_kernel_8cpp_source.xhtml#l00033">ICLSimple3DKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00126">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00254">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00141">CLReorgLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00153">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00141">CLMaxUnpoolingLayerKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00142">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00163">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00212">CLPadLayerKernel::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00208">CLFillBorderKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00158">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00263">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00231">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00105">ClReshapeKernel::run_op()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00128">ClTransposeKernel::run_op()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00131">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00104">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_kernel_runtime_8cpp_source.xhtml#l00114">ClKernelRuntime::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00170">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00104">ClFillKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00144">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00163">ClQuantizeKernel::run_op()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00124">ClDepthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00260">ClTransposedConvolutionKernel::run_op()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00138">ClBatchConcatenateKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00250">ClActivationKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00193">ClGemmReshapeLhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00148">ClCastKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00303">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00154">ClIndirectConv2dAddressPrecalculationKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00169">ClGemmReshapeRhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00273">ClGemmLowpMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00284">ClIndirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00374">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00339">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00248">ClDirectConv3dKernel::run_op()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00455">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00462">ClGemmLowpMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00183">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, and <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>.</p>

</div>
</div>
<a id="a14bbbcfa75deb1a56c83406bfc37eec2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14bbbcfa75deb1a56c83406bfc37eec2">&#9670;&nbsp;</a></span>first_slice_window_4D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> first_slice_window_4D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>First 4D slice of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>The first slice of the window. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00314">314</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">return</span> first_slice_window&lt;4&gt;();</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    };</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00140">CLTileKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00141">CLReverseKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00138">CLStackLayerKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00412">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00147">ClWidthConcatenate2TensorsKernel::run_op()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00231">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00182">ClWidthConcatenate4TensorsKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, and <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00185">CLStridedSliceKernel::run_op()</a>.</p>

</div>
</div>
<a id="a6e77b72655c2e465435a83497961bdcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e77b72655c2e465435a83497961bdcb">&#9670;&nbsp;</a></span>is_broadcasted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool is_broadcasted </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return whether a dimension has been broadcasted. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The requested dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the dimension has been broadcasted </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00066">66</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> _is_broadcasted[dimension];</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00088">ICLKernel::add_tensor_argument()</a>.</p>

</div>
</div>
<a id="a2fb4b3d6b185c9d225073f923f1827c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fb4b3d6b185c9d225073f923f1827c3">&#9670;&nbsp;</a></span>num_iterations()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t num_iterations </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the number of iterations needed to iterate through a given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The requested dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of iterations </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00196">196</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="comment">// Precondition: dimension &lt; Coordinates::num_max_dimensions</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Precondition: (end - start) % step == 0</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> (_dims.at(dimension).end() - _dims.at(dimension).start()) / _dims.at(dimension).step();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00146">CpuSubKernel::get_mws()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00208">CpuAddKernel::get_mws()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01668">CpuMulKernel::get_mws()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00349">CpuArithmeticKernel::get_mws()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00400">CpuDivisionKernel::get_mws()</a>, <a class="el" href="_window_8inl_source.xhtml#l00308">Window::num_iterations_total()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00134">NEDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_single_thread_scheduler_8cpp_source.xhtml#l00038">SingleThreadScheduler::schedule()</a>, <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00057">OMPScheduler::schedule_op()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00203">Window::split_window()</a>.</p>

</div>
</div>
<a id="a0654fca130488c15b4b66a9b7131c142"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0654fca130488c15b4b66a9b7131c142">&#9670;&nbsp;</a></span>num_iterations_total()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t num_iterations_total </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the total number of iterations needed to iterate through the entire window. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of total iterations </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00308">308</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;{</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordtype">size_t</span> total = 1;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++d)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        total *= <a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(d);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keywordflow">return</span> total;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00196">Window::num_iterations()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00146">CpuSubKernel::get_mws()</a>, <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00208">CpuAddKernel::get_mws()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01668">CpuMulKernel::get_mws()</a>, <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00349">CpuArithmeticKernel::get_mws()</a>, and <a class="el" href="_cpu_elementwise_kernel_8cpp_source.xhtml#l00400">CpuDivisionKernel::get_mws()</a>.</p>

</div>
</div>
<a id="a920f28ad2a867b3a6c0fa538a5183e11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a920f28ad2a867b3a6c0fa538a5183e11">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy assignment operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Copy the values from rhs to the current object</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to the updated object </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00040">40</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> tmp(rhs);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">swap</a>(*<span class="keyword">this</span>, tmp);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00318">Window::swap</a>.</p>

</div>
</div>
<a id="ac13b9cd31178cde1e6b25302d619ea05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac13b9cd31178cde1e6b25302d619ea05">&#9670;&nbsp;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a> &amp; operator[] </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read only access to a given dimension of the window. </p>
<dl class="section note"><dt>Note</dt><dd>Precondition: dimension &lt; <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc" title="Number of dimensions the tensor has.">Coordinates::num_max_dimensions</a></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to access</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The requested dimension </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00047">47</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Precondition: dimension &lt; Coordinates::num_max_dimensions</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> _dims.at(dimension);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5e8e5ab06329702df09ab7eb07e9b84d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e8e5ab06329702df09ab7eb07e9b84d">&#9670;&nbsp;</a></span>scale()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void scale </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scale the values of a given dimension by the given scale_value. </p>
<dl class="section note"><dt>Note</dt><dd>The end of the window is rounded up to be a multiple of step after the scaling.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to scale </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_value</td><td>Value to scale the start, end and step values of. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00169">169</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    Window::Dimension &amp;d            = _dims[dimension];</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_step  = d.step() * scale_value;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_start = d.start() * scale_value;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_diff  = (d.end() - d.start()) * scale_value;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          scaled_end   = scaled_start + <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(scaled_diff, scaled_step);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    d = Window::Dimension(scaled_start, scaled_end, scaled_step);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">arm_compute::ceil_to_multiple()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00075">CpuGemmInterleave4x4Kernel::run_op()</a>.</p>

</div>
</div>
<a id="acd3d2bba51cb84d34dd7656ad2375a6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd3d2bba51cb84d34dd7656ad2375a6e">&#9670;&nbsp;</a></span>set()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a> &amp;&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the values of a given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to set </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>The values to set the dimension to </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00053">53</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _dims[dimension] = dim;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="add_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::add_same_neon()</a>, <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00039">arm_compute::cpu::add_same_sve()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00085">arm_compute::cpu::add_sub_q8_neon_fixedpoint()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00036">arm_compute::cpu::batch_normalization_nchw()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00147">arm_compute::calculate_max_enlarged_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00198">arm_compute::calculate_max_window_horizontal()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00256">arm_compute::calculate_squashed_or_max_window()</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00137">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00146">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00141">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00144">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00115">NEFillBorderKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_c_l_crop_resize_8cpp_source.xhtml#l00123">CLCropResize::configure()</a>, <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_window_iterator_8cpp_source.xhtml#l00042">create_window()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">arm_compute::cpu::depthwise_loop_generic_fp()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">arm_compute::cpu::depthwise_loop_multiplier1_fp()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00038">arm_compute::cpu::elementwise_arithmetic_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00152">arm_compute::cpu::elementwise_comparison_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00086">arm_compute::cpu::elementwise_op()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00075">arm_compute::cpu::elementwise_sve_op()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00506">AssetsLibrary::fill_borders_with_garbage()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00174">IImageLoader::fill_image()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00253">IImageLoader::fill_planar_tensor()</a>, <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">arm_compute::cpu::fp_neon_activation_impl()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00154">arm_compute::cpu::fused_batch_normalization_conv()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00266">arm_compute::cpu::fused_batch_normalization_dwc_nchw()</a>, <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::fused_batch_normalization_dwc_nhwc()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_i_kernel_8cpp_source.xhtml#l00033">IKernel::IKernel()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00083">arm_compute::cpu::l2_normalize_yz()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00681">arm_compute::utils::load_trained_data()</a>, <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::matrix_addition_f32()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::mean_stddev_normalization()</a>, <a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00036">arm_compute::cpu::mul_F32_F32_F32()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00052">arm_compute::cpu::neon_qasymm8_meanstddevnorm()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="range_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::neon_range_function()</a>, <a class="el" href="norm__layer_2generic_2neon_2impl_8h_source.xhtml#l00058">arm_compute::normalize_float()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00163">arm_compute::cpu::poolingMxN_fp32_neon_nhwc_kernel_indices()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00043">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml#l00432">arm_compute::cpu::poolingMxNxD_fp_neon_ndhwc()</a>, <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml#l00462">arm_compute::cpu::poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00183">NEStackLayerKernel::prepare()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_n_e_f_f_t_scale_kernel_8cpp_source.xhtml#l00118">NEFFTScaleKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_n_e_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l01139">NEFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00356">CpuWinogradConv2d::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00158">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00263">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">CLComputeMeanVariance::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00051">CpuFillKernel::run_op()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00093">CpuConvertQuantizedSignednessKernel::run_op()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00122">CpuCopyKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00106">CpuFloorKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00380">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00075">CpuGemmInterleave4x4Kernel::run_op()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00088">CpuCol2ImKernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00130">ClCropKernel::run_op()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00271">CpuCastKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00303">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00374">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00273">ClGemmLowpMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00078">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00145">NEStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00096">arm_compute::run_reverse()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00543">arm_compute::utils::save_to_ppm()</a>, <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00041">arm_compute::cpu::select_op()</a>, <a class="el" href="_window_8inl_source.xhtml#l00059">Window::set_broadcasted()</a>, <a class="el" href="_window_8inl_source.xhtml#l00107">Window::shift_dimensions()</a>, <a class="el" href="reference_2_softmax_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::softmax_layer_generic()</a>, <a class="el" href="_window_8inl_source.xhtml#l00203">Window::split_window()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="sub_2neon_2impl_8h_source.xhtml#l00042">arm_compute::cpu::sub_same_neon()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00041">arm_compute::cpu::sve2_qsymm16_activation()</a>, <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml#l00040">arm_compute::cpu::sve_fp32_activation()</a>, <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00037">arm_compute::cpu::sve_logits_1d_max()</a>, <a class="el" href="arm__gemm__compute__iface_8hpp_source.xhtml#l00053">arm_gemm::to_window()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00096">AccessWindowTranspose::update_window_if_needed()</a>, <a class="el" href="_access_window_static_8cpp_source.xhtml#l00087">AccessWindowStatic::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_window_8inl_source.xhtml#l00290">Window::use_tensor_dimensions()</a>, <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">arm_compute::cpu::vector_matrix_multiply_f32()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00030">Window::Window()</a>.</p>

</div>
</div>
<a id="a29b98c579478c77b57c0f75c92bd647e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29b98c579478c77b57c0f75c92bd647e">&#9670;&nbsp;</a></span>set_broadcasted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_broadcasted </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the dimension as broadcasted dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to set </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00059">59</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(dimension, Dimension(0, 0, 0));</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    _is_broadcasted[dimension] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>.</p>

</div>
</div>
<a id="a55ed4ad2395fd25ba847cbf6c54b85e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55ed4ad2395fd25ba847cbf6c54b85e4">&#9670;&nbsp;</a></span>set_dimension_step()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_dimension_step </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the step of a given dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Dimension</a> to update </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">step</td><td>The new dimension's step value </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00181">181</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    _dims[dimension].set_step(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">arm_compute::cpu::depthwise_loop_generic_fp()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00153">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, and <a class="el" href="_window_iterator_8h_source.xhtml#l00195">WindowIterator&lt; L &gt;::set_step()</a>.</p>

</div>
</div>
<a id="abfa164a379c0c401a662792d7d0ccfba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfa164a379c0c401a662792d7d0ccfba">&#9670;&nbsp;</a></span>shape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the shape of the window in number of steps. </p>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00298">298</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    TensorShape <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">TensorShape::num_max_dimensions</a>; ++d)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>.<a class="code" href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">set</a>(d, (_dims[d].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() - _dims[d].start()) / _dims[d].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>());</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; size_t &gt;::num_max_dimensions</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00145">NEStridedSliceKernel::run_op()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00290">Window::use_tensor_dimensions()</a>.</p>

</div>
</div>
<a id="ae688f3eb6c2673216d12d5490e1e88dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae688f3eb6c2673216d12d5490e1e88dc">&#9670;&nbsp;</a></span>shift()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void shift </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>shift_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shift the values of a given dimension by the given shift_value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td>The dimension to shift </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shift_value</td><td>Value to shift the start and end values of. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00147">147</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    Window::Dimension &amp;d = _dims[dimension];</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    d                    = Window::Dimension(d.start() + shift_value, d.end() + shift_value, d.step());</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>.</p>

</div>
</div>
<a id="adf1ebf1e03a551e47f6bdac4bcf04f17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf1ebf1e03a551e47f6bdac4bcf04f17">&#9670;&nbsp;</a></span>shift_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> shift_dimensions </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>shift_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_dim</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shift down all the dimensions of a window starting from the specified dimension. </p>
<p>new_dims[i] = old_dims[i] for all i &lt; start_dim. new_dims[i] = old_dims[i+shift_value] for all i &gt;= start_dim.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shift_value</td><td>Number of dimensions to shift the window by. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start_dim</td><td>The dimension from which the dimensions start to shift.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The window with the shifted dimensions. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00107">107</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> shifted_window;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">size_t</span> n = 0;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">for</span> (; n &lt; start_dim; ++n)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        shifted_window.set(n, _dims[n]);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">for</span> (; n &lt; (<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a> - shift_value); n++)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        shifted_window.set(n, _dims[n + shift_value]);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">return</span> shifted_window;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00090">ClSoftmaxKernel::configure()</a>, and <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>.</p>

</div>
</div>
<a id="ad1a2b580ba9e1a3ed7124c3f37179bca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1a2b580ba9e1a3ed7124c3f37179bca">&#9670;&nbsp;</a></span>slide_window_slice_1D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_1D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 1D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00326">326</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;1&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>.</p>

</div>
</div>
<a id="af72109ea9b9b75839d5601e39d8394de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af72109ea9b9b75839d5601e39d8394de">&#9670;&nbsp;</a></span>slide_window_slice_2D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_2D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 2D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00338">338</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;2&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_simple2_d_kernel_8cpp_source.xhtml#l00030">ICLSimple2DKernel::run()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00103">CLBitwiseKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00172">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00127">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00231">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, and <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>.</p>

</div>
</div>
<a id="aac792e3a11bc73bafafc4f4284c7f215"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac792e3a11bc73bafafc4f4284c7f215">&#9670;&nbsp;</a></span>slide_window_slice_3D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_3D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 3D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00350">350</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;3&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_c_l_simple3_d_kernel_8cpp_source.xhtml#l00033">ICLSimple3DKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00126">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00254">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00141">CLReorgLayerKernel::run()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00141">CLMaxUnpoolingLayerKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00142">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00163">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00212">CLPadLayerKernel::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00208">CLFillBorderKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00158">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00263">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00131">ClDequantizeKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00104">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_kernel_runtime_8cpp_source.xhtml#l00114">ClKernelRuntime::run_op()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00128">ClTransposeKernel::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00170">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00104">ClFillKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00144">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00163">ClQuantizeKernel::run_op()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00138">ClBatchConcatenateKernel::run_op()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00124">ClDepthConcatenateKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00250">ClActivationKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00193">ClGemmReshapeLhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00148">ClCastKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00303">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00169">ClGemmReshapeRhsMatrixKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00273">ClGemmLowpMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00374">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00339">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00455">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00183">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, and <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>.</p>

</div>
</div>
<a id="ad41f3f5322c2797798363be2ec3fde85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad41f3f5322c2797798363be2ec3fde85">&#9670;&nbsp;</a></span>slide_window_slice_4D()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool slide_window_slice_4D </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>slice</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Slide the passed 4D window slice. </p>
<p>If slice contains the last slice then it will remain unchanged and false will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">slice</td><td>Current slice, to be updated to the next slice.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if slice contains a new slice, false if slice already contained the last slice </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00362">362</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">return</span> slide_window_slice&lt;4&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00140">CLTileKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00141">CLReverseKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00147">ClWidthConcatenate2TensorsKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00182">ClWidthConcatenate4TensorsKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00185">CLStridedSliceKernel::run_op()</a>, and <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>.</p>

</div>
</div>
<a id="ad82ac0dcf7e7a862a3b73f1be3ca98f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad82ac0dcf7e7a862a3b73f1be3ca98f1">&#9670;&nbsp;</a></span>split_window()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> split_window </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>dimension</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Split a window into a set of sub windows along a given dimension. </p>
<p>For example to split a window into 3 sub-windows along the Y axis, you would have to do:<br  />
 <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> sub0 = window.split_window( 1, 0, 3);<br  />
 <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> sub1 = window.split_window( 1, 1, 3);<br  />
 <a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> sub2 = window.split_window( 1, 2, 3);<br  />
</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dimension</td><td><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" title="Describe one of the image&#39;s dimensions with a start, end and step.">Dimension</a> along which the split will be performed </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>Id of the sub-window to return. Must be in the range (0, total-1) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total</td><td>Total number of sub-windows the window will be split into.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The subwindow "id" out of "total" </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00203">203</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keywordtype">id</span> &gt;= total);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dimension &gt;= <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">Window</a> out;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 0; d &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++d)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">if</span> (d == dimension)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordtype">int</span>       start = _dims[d].start();</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordtype">int</span>       <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   = _dims[d].end();</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>  = _dims[d].step();</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> num_it = <a class="code" href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">num_iterations</a>(d);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> rem    = num_it % total;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordtype">int</span>       work   = num_it / total;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keywordtype">int</span> it_start = work * id;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">int</span>(<span class="keywordtype">id</span>) &lt; rem)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                ++work;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                it_start += id;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                it_start += rem;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            start += it_start * <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> = std::min(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>, start + work * <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            out.set(d, Dimension(start, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            out.set(d, _dims[d]);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_window_8inl_source.xhtml#l00196">Window::num_iterations()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00057">OMPScheduler::schedule_op()</a>.</p>

</div>
</div>
<a id="a14470b4cb59140a1b6ff3b8f16c89ab6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14470b4cb59140a1b6ff3b8f16c89ab6">&#9670;&nbsp;</a></span>use_tensor_dimensions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void use_tensor_dimensions </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>first_dimension</em> = <code><a class="el" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Use the tensor's dimensions to fill the window dimensions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> to copy the dimensions from. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">first_dimension</td><td>Only copy dimensions which are greater or equal to this value. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00290">290</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = first_dimension; n &lt; <a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">num_dimensions</a>(); ++n)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(n, Window::Dimension(0, std::max(<a class="code" href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">shape</a>[n], <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(1))));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_dimensions_8h_source.xhtml#l00142">Dimensions&lt; T &gt;::num_dimensions()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00298">Window::shape()</a>.</p>

<p class="reference">Referenced by <a class="el" href="utils_2_utils_8h_source.xhtml#l00827">arm_compute::utils::compare_tensor()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00115">NEFillBorderKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00036">ITensor::copy_from()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l01016">AssetsLibrary::fill_layer_data()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00770">arm_compute::utils::fill_random_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00365">NPYLoader::fill_tensor()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00731">arm_compute::utils::fill_tensor_value()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00752">arm_compute::utils::fill_tensor_vector()</a>, <a class="el" href="reference_2_gather_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::gather()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00090">CpuFloorKernel::infer_window()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00172">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00138">CLStackLayerKernel::run()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00165">ClWinogradFilterTransformKernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00130">ClCropKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00130">ClWeightsReshapeKernel::run_op()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00455">ClDirectConv2dKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00626">arm_compute::utils::save_to_npy()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>, <a class="el" href="reference_2_softmax_layer_8cpp_source.xhtml#l00039">arm_compute::test::validation::reference::softmax_layer_generic()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00080">arm_compute::test::validation::reference::strided_slice()</a>, and <a class="el" href="tests_2validation_2_n_e_o_n_2_u_n_i_t_2_tensor_allocator_8cpp_source.xhtml#l00143">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void validate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will validate all the window's dimensions' values when asserts are enabled. </p>
<p>No-op when asserts are disabled </p>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00187">187</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a>; ++i)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_dims[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() &lt; _dims[i].start());</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((_dims[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>() != 0) &amp;&amp; (((_dims[i].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() - _dims[i].start()) % _dims[i].<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>()) != 0));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00046">Dimensions&lt; int &gt;::num_max_dimensions</a>, and <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">arm_compute::cpu::step</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01091">arm_compute::colorconvert_rgb_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00044">arm_compute::error_on_invalid_subwindow()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00026">arm_compute::error_on_mismatching_windows()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00063">arm_compute::error_on_window_not_collapsable_at_dimension()</a>, <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00057">OMPScheduler::schedule_op()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00096">AccessWindowTranspose::update_window_if_needed()</a>, and <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>.</p>

</div>
</div>
<a id="a273fd2ecdd45169b2f702f01a7e5e382"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a273fd2ecdd45169b2f702f01a7e5e382">&#9670;&nbsp;</a></span>x()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>&amp; x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the first dimension of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>First dimension of the window </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00158">158</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="add_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::add_same_neon()</a>, <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00039">arm_compute::cpu::add_same_sve()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00085">arm_compute::cpu::add_sub_q8_neon_fixedpoint()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00036">arm_compute::cpu::batch_normalization_nchw()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">AccessWindowTranspose::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00038">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00038">arm_compute::cpu::elementwise_arithmetic_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00152">arm_compute::cpu::elementwise_comparison_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00086">arm_compute::cpu::elementwise_op()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00075">arm_compute::cpu::elementwise_sve_op()</a>, <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">arm_compute::cpu::fp_neon_activation_impl()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00154">arm_compute::cpu::fused_batch_normalization_conv()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00266">arm_compute::cpu::fused_batch_normalization_dwc_nchw()</a>, <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::fused_batch_normalization_dwc_nhwc()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00194">ICLKernel::gws_from_window()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="_i_kernel_8cpp_source.xhtml#l00050">IKernel::is_window_configured()</a>, <a class="el" href="_window_iterator_8h_source.xhtml#l00165">WindowIterator&lt; L &gt;::iterate_3D()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00083">arm_compute::cpu::l2_normalize_yz()</a>, <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::matrix_addition_f32()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::mean_stddev_normalization()</a>, <a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00036">arm_compute::cpu::mul_F32_F32_F32()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00052">arm_compute::cpu::neon_qasymm8_meanstddevnorm()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="range_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::neon_range_function()</a>, <a class="el" href="norm__layer_2generic_2neon_2impl_8h_source.xhtml#l00058">arm_compute::normalize_float()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00163">arm_compute::cpu::poolingMxN_fp32_neon_nhwc_kernel_indices()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00043">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml#l00432">arm_compute::cpu::poolingMxNxD_fp_neon_ndhwc()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00274">arm_compute::cpu::roi_align()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00176">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00158">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00051">CpuFillKernel::run_op()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00093">CpuConvertQuantizedSignednessKernel::run_op()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00122">CpuCopyKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00106">CpuFloorKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00380">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00075">CpuGemmInterleave4x4Kernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00130">ClCropKernel::run_op()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00271">CpuCastKernel::run_op()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00096">arm_compute::run_reverse()</a>, <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00106">arm_compute::cpu::select_op_16()</a>, <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00123">arm_compute::cpu::select_op_32()</a>, <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00089">arm_compute::cpu::select_op_8()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="sub_2neon_2impl_8h_source.xhtml#l00042">arm_compute::cpu::sub_same_neon()</a>, <a class="el" href="sve2_2q8_8cpp_source.xhtml#l00033">arm_compute::cpu::sve2_q8_elementwise_unary()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00041">arm_compute::cpu::sve2_qsymm16_activation()</a>, <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml#l00040">arm_compute::cpu::sve_fp32_activation()</a>, <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00037">arm_compute::cpu::sve_logits_1d_max()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00201">AccessWindowTranspose::update_padding_if_needed()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00096">AccessWindowTranspose::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00093">ClFillKernel::validate()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00099">ClCropKernel::validate()</a>, <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>, <a class="el" href="_gpu_ckw_activation_8cpp_source.xhtml#l00059">GpuCkwActivation::write_component_code()</a>, <a class="el" href="_gpu_ckw_elementwise_binary_8cpp_source.xhtml#l00065">GpuCkwElementwiseBinary::write_component_code()</a>, <a class="el" href="_gpu_ckw_cast_8cpp_source.xhtml#l00059">GpuCkwCast::write_component_code()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00059">GpuCkwPool2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00060">GpuCkwMatMul::write_component_code()</a>.</p>

</div>
</div>
<a id="a1b522b073f3ca32d24eb4e03495ef8a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b522b073f3ca32d24eb4e03495ef8a6">&#9670;&nbsp;</a></span>y()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>&amp; y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the second dimension of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Second dimension of the window </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00167">167</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::compute_all_anchors()</a>, <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00031">arm_compute::cpu::compute_all_anchors_qasymm16()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">AccessWindowTranspose::compute_valid_region()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00038">AccessWindowRectangle::compute_valid_region()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00194">ICLKernel::gws_from_window()</a>, <a class="el" href="_window_iterator_8h_source.xhtml#l00165">WindowIterator&lt; L &gt;::iterate_3D()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00043">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="_n_e_batch_to_space_layer_kernel_8cpp_source.xhtml#l00158">NEBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00380">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00088">CpuCol2ImKernel::run_op()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00201">AccessWindowTranspose::update_padding_if_needed()</a>, <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00096">AccessWindowTranspose::update_window_if_needed()</a>, <a class="el" href="_i_access_window_8cpp_source.xhtml#l00108">AccessWindowRectangle::update_window_if_needed()</a>, and <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>.</p>

</div>
</div>
<a id="a51a8c7a9d2fa20943c213e85eb8d9caf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51a8c7a9d2fa20943c213e85eb8d9caf">&#9670;&nbsp;</a></span>z()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Dimension</a>&amp; z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias to access the third dimension of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Third dimension of the window </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00176">176</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> _dims.at(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00194">ICLKernel::gws_from_window()</a>, <a class="el" href="_window_iterator_8h_source.xhtml#l00165">WindowIterator&lt; L &gt;::iterate_3D()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00043">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, and <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a97b2f08fa5b45ffc8dcde9c01adee28f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97b2f08fa5b45ffc8dcde9c01adee28f">&#9670;&nbsp;</a></span>operator==</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check whether two Windows are equal. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>LHS window </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>RHS window</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the given windows are the same. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00323">323</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> (lhs._dims == rhs._dims) &amp;&amp; (lhs._is_broadcasted == rhs._is_broadcasted);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae181d6e147a7230d02611fb9077959f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae181d6e147a7230d02611fb9077959f0">&#9670;&nbsp;</a></span>swap</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void swap </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Friend function that swaps the contents of two windows. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">lhs</td><td>First window to swap. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rhs</td><td>Second window to swap. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_window_8inl_source.xhtml#l00318">318</a> of file <a class="el" href="_window_8inl_source.xhtml">Window.inl</a>.</p>
<div class="fragment"><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;{</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    lhs._dims.swap(rhs._dims);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_window_8inl_source.xhtml#l00040">Window::operator=()</a>.</p>

</div>
</div>
<h2 class="groupheader">Field Documentation</h2>
<a id="a92b721b1285e3bfc30c6739decc26fd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92b721b1285e3bfc30c6739decc26fd4">&#9670;&nbsp;</a></span>DimV</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimV = 4</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 4 also known as V dimension. </p>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00051">51</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

</div>
</div>
<a id="a60f2e7a76af978d4eb6be4ac6e8044d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60f2e7a76af978d4eb6be4ac6e8044d1">&#9670;&nbsp;</a></span>DimW</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimW = 3</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 3 also known as W dimension. </p>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00049">49</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">arm_compute::cpu::depthwise_loop_generic_fp()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">arm_compute::cpu::depthwise_loop_multiplier1_fp()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00895">CpuGemmConv2d::prepare()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00105">CpuDepthwiseConv2dAssemblyDispatch::run()</a>, and <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>.</p>

</div>
</div>
<a id="aa96e81276ee4f87ab386cd05a5539a7d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa96e81276ee4f87ab386cd05a5539a7d">&#9670;&nbsp;</a></span>DimX</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimX = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 0 also known as X dimension. </p>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00043">43</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_signed_sve2()</a>, <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qasymm8_sve2()</a>, <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::add_qsymm16_neon()</a>, <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00039">arm_compute::cpu::add_qsymm16_sve2()</a>, <a class="el" href="add_2generic_2neon_2impl_8h_source.xhtml#l00039">arm_compute::cpu::add_same_neon()</a>, <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00039">arm_compute::cpu::add_same_sve()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00085">arm_compute::cpu::add_sub_q8_neon_fixedpoint()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00036">arm_compute::cpu::batch_normalization_nchw()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00256">arm_compute::calculate_squashed_or_max_window()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00864">arm_compute::misc::shape_calculator::compute_min_max_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00367">arm_compute::misc::shape_calculator::compute_reductionB_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00688">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape()</a>, <a class="el" href="_concatenate_layer_8cpp_source.xhtml#l00116">arm_compute::test::validation::reference::concatenate_layer()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00071">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00078">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00085">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00051">ClFillKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00071">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00050">ClCropKernel::configure()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00045">CpuConcatenate::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00083">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00045">ClConcatenate::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00146">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00141">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00144">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00115">NEFillBorderKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00112">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00129">NELSTMLayer::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00135">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00160">CLLSTMLayer::configure()</a>, <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">arm_compute::cpu::depthwise_loop_generic_fp()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">arm_compute::cpu::depthwise_loop_multiplier1_fp()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00038">arm_compute::cpu::elementwise_arithmetic_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">arm_compute::cpu::elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">arm_compute::cpu::elementwise_comp_quantized_signed()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00152">arm_compute::cpu::elementwise_comparison_op()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">arm_compute::cpu::elementwise_comparison_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00086">arm_compute::cpu::elementwise_op()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">arm_compute::cpu::elementwise_op&lt; int8_t &gt;()</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">arm_compute::cpu::elementwise_op_quantized()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">arm_compute::cpu::elementwise_op_quantized_signed()</a>, <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00075">arm_compute::cpu::elementwise_sve_op()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00174">IImageLoader::fill_image()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00253">IImageLoader::fill_planar_tensor()</a>, <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">arm_compute::cpu::fp_neon_activation_impl()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00154">arm_compute::cpu::fused_batch_normalization_conv()</a>, <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00266">arm_compute::cpu::fused_batch_normalization_dwc_nchw()</a>, <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8h_source.xhtml#l00036">arm_compute::cpu::fused_batch_normalization_dwc_nhwc()</a>, <a class="el" href="_cpu_activation_kernel_8cpp_source.xhtml#l00329">CpuActivationKernel::get_mws()</a>, <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01668">CpuMulKernel::get_mws()</a>, <a class="el" href="_i_kernel_8cpp_source.xhtml#l00033">IKernel::IKernel()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00083">arm_compute::cpu::l2_normalize_yz()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00681">arm_compute::utils::load_trained_data()</a>, <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::matrix_addition_f32()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml#l00034">arm_compute::cpu::mean_stddev_normalization()</a>, <a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00036">arm_compute::cpu::mul_F32_F32_F32()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="meanstddevnorm_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00052">arm_compute::cpu::neon_qasymm8_meanstddevnorm()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="range_2generic_2neon_2impl_8h_source.xhtml#l00038">arm_compute::cpu::neon_range_function()</a>, <a class="el" href="norm__layer_2generic_2neon_2impl_8h_source.xhtml#l00058">arm_compute::normalize_float()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">arm_compute::cpu::poolingMxN_fp32_neon_nhwc()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00163">arm_compute::cpu::poolingMxN_fp32_neon_nhwc_kernel_indices()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00043">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml#l00432">arm_compute::cpu::poolingMxNxD_fp_neon_ndhwc()</a>, <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml#l00462">arm_compute::cpu::poolingMxNxD_q8_neon_ndhwc()</a>, <a class="el" href="_cpu_reshape_kernel_8cpp_source.xhtml#l00216">CpuReshapeKernel::prepare()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00183">NEStackLayerKernel::prepare()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00740">CpuGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00176">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_tile_kernel_8cpp_source.xhtml#l00090">NETileKernel::run()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00224">ClConcatenate::run()</a>, <a class="el" href="_n_e_f_f_t_scale_kernel_8cpp_source.xhtml#l00118">NEFFTScaleKernel::run()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00111">CpuPool2d::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00114">CpuSoftmaxGeneric::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00145">CLComputeAllAnchorsKernel::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_8cpp_source.xhtml#l00059">NEROIPoolingLayer::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00172">CLQLSTMLayerNormalizationKernel::run()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00127">CLMeanStdDevNormalizationKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00153">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00148">NEFFT1D::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_n_e_range_8cpp_source.xhtml#l00051">NERange::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00356">CpuWinogradConv2d::run()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00176">CLROIAlignLayerKernel::run()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00263">CLBatchNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">CLComputeMeanVariance::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00575">CpuGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00414">CpuGemm::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00051">CpuFillKernel::run_op()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00093">CpuConvertQuantizedSignednessKernel::run_op()</a>, <a class="el" href="_cpu_copy_kernel_8cpp_source.xhtml#l00122">CpuCopyKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cpu_concatenate_width_kernel_8cpp_source.xhtml#l00079">CpuConcatenateWidthKernel::run_op()</a>, <a class="el" href="_cpu_floor_kernel_8cpp_source.xhtml#l00106">CpuFloorKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00380">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00075">CpuGemmInterleave4x4Kernel::run_op()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00130">ClCropKernel::run_op()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00088">CpuCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00303">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cpu_cast_kernel_8cpp_source.xhtml#l00271">CpuCastKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00273">ClGemmLowpMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00374">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00078">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_n_e_strided_slice_kernel_8cpp_source.xhtml#l00145">NEStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_n_e_reverse_kernel_8cpp_source.xhtml#l00096">arm_compute::run_reverse()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00543">arm_compute::utils::save_to_ppm()</a>, <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00041">arm_compute::cpu::select_op()</a>, <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00036">arm_compute::cpu::sub_qsymm16_neon()</a>, <a class="el" href="sub_2neon_2impl_8h_source.xhtml#l00042">arm_compute::cpu::sub_same_neon()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00041">arm_compute::cpu::sve2_qsymm16_activation()</a>, <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml#l00040">arm_compute::cpu::sve_fp32_activation()</a>, <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00037">arm_compute::cpu::sve_logits_1d_max()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00101">CpuConcatenate::validate()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00145">ClConcatenate::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00348">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_8cpp_source.xhtml#l00488">NELSTMLayer::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00395">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_8cpp_source.xhtml#l00539">CLLSTMLayer::validate()</a>, <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">arm_compute::cpu::vector_matrix_multiply_f32()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="ad2d402364fa822b0b7775081291eeca9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2d402364fa822b0b7775081291eeca9">&#9670;&nbsp;</a></span>DimY</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimY = 1</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 1 also known as Y dimension. </p>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00045">45</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00256">arm_compute::calculate_squashed_or_max_window()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00717">arm_compute::colorconvert_iyuv_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00562">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00940">arm_compute::colorconvert_iyuv_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00767">arm_compute::colorconvert_nv12_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00490">arm_compute::colorconvert_nv12_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00880">arm_compute::colorconvert_nv12_to_yuv4()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01045">arm_compute::colorconvert_rgb_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l01001">arm_compute::colorconvert_rgb_to_nv12()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00818">arm_compute::colorconvert_yuyv_to_iyuv()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00660">arm_compute::colorconvert_yuyv_to_nv12()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00688">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape()</a>, <a class="el" href="_concatenate_layer_8cpp_source.xhtml#l00116">arm_compute::test::validation::reference::concatenate_layer()</a>, <a class="el" href="_cpu_softmax_kernel_8cpp_source.xhtml#l00137">CpuSoftmaxKernel::configure()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00045">CpuConcatenate::configure()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00045">ClConcatenate::configure()</a>, <a class="el" href="_n_e_bounding_box_transform_kernel_8cpp_source.xhtml#l00146">NEBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00141">NEROIPoolingLayerKernel::configure()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00144">NEROIAlignLayerKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00053">CpuDirectConv2d::configure()</a>, <a class="el" href="_cpu_direct_conv3d_8cpp_source.xhtml#l00049">CpuDirectConv3d::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00115">NEFillBorderKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00112">NELSTMLayerQuantized::configure()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00135">CLLSTMLayerQuantized::configure()</a>, <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="_i_tensor_8cpp_source.xhtml#l00036">ITensor::copy_from()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">arm_compute::cpu::depthwise_loop_generic_fp()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">arm_compute::cpu::depthwise_loop_multiplier1_fp()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="utils_2_utils_8cpp_source.xhtml#l00127">arm_compute::utils::draw_detection_rectangle()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00174">IImageLoader::fill_image()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00253">IImageLoader::fill_planar_tensor()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_i_kernel_8cpp_source.xhtml#l00033">IKernel::IKernel()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">arm_compute::cpu::matrix_matrix_multiply_f32()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="_n_e_stack_layer_kernel_8cpp_source.xhtml#l00183">NEStackLayerKernel::prepare()</a>, <a class="el" href="_cpu_fully_connected_8cpp_source.xhtml#l00529">CpuFullyConnected::prepare()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00740">CpuGemmLowpMatrixMultiplyCore::prepare()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l01449">NEQLSTMLayer::prepare()</a>, <a class="el" href="_i_c_p_p_simple_function_8cpp_source.xhtml#l00035">ICPPSimpleFunction::run()</a>, <a class="el" href="_cpu_dequantize_8cpp_source.xhtml#l00050">CpuDequantize::run()</a>, <a class="el" href="_i_n_e_simple_function_8cpp_source.xhtml#l00041">INESimpleFunction::run()</a>, <a class="el" href="_i_n_e_simple_function_no_border_8cpp_source.xhtml#l00040">INESimpleFunctionNoBorder::run()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00282">CpuScale::run()</a>, <a class="el" href="_cpu_pool3d_8cpp_source.xhtml#l00060">CpuPool3d::run()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00147">CpuConcatenate::run()</a>, <a class="el" href="_cpu_add_mul_add_8cpp_source.xhtml#l00104">CpuAddMulAdd::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00176">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00111">CpuPool2d::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_cpu_softmax_8cpp_source.xhtml#l00114">CpuSoftmaxGeneric::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_n_e_logical_8cpp_source.xhtml#l00067">NELogicalAnd::run()</a>, <a class="el" href="_n_e_space_to_depth_layer_8cpp_source.xhtml#l00059">NESpaceToDepthLayer::run()</a>, <a class="el" href="_cpu_gemm_lowp_output_stage_8cpp_source.xhtml#l00160">CpuGemmLowpOutputStage::run()</a>, <a class="el" href="_cpu_mat_mul_8cpp_source.xhtml#l00277">CpuMatMul::run()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00148">NEFFT1D::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_n_e_l2_normalize_layer_8cpp_source.xhtml#l00085">NEL2NormalizeLayer::run()</a>, <a class="el" href="_n_e_normalization_layer_8cpp_source.xhtml#l00079">NENormalizationLayer::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00136">CpuDirectConv2d::run()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00236">CLPriorBoxLayerKernel::run()</a>, <a class="el" href="_c_p_p_box_with_non_maxima_suppression_limit_8cpp_source.xhtml#l00274">CPPBoxWithNonMaximaSuppressionLimit::run()</a>, <a class="el" href="_n_e_fuse_batch_normalization_8cpp_source.xhtml#l00077">NEFuseBatchNormalization::run()</a>, <a class="el" href="_n_e_batch_normalization_layer_8cpp_source.xhtml#l00073">NEBatchNormalizationLayer::run()</a>, <a class="el" href="_cpu_mul_8cpp_source.xhtml#l00094">CpuComplexMul::run()</a>, <a class="el" href="_n_e_space_to_batch_layer_8cpp_source.xhtml#l00105">NESpaceToBatchLayer::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">CLComputeMeanVariance::run()</a>, <a class="el" href="_n_e_generate_proposals_layer_8cpp_source.xhtml#l00367">NEGenerateProposalsLayer::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00129">NESynthetizeFunctionWithZeroConstantKernelBorder&lt; K &gt;::run()</a>, <a class="el" href="_n_e_logical_8cpp_source.xhtml#l00099">NELogicalOr::run()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_core_8cpp_source.xhtml#l00575">CpuGemmLowpMatrixMultiplyCore::run()</a>, <a class="el" href="_cpu_gemm_8cpp_source.xhtml#l00414">CpuGemm::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00797">CpuGemmConv2d::run()</a>, <a class="el" href="_n_e_logical_8cpp_source.xhtml#l00130">NELogicalNot::run()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l01307">NEQLSTMLayer::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cpu_concatenate_height_kernel_8cpp_source.xhtml#l00085">CpuConcatenateHeightKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_lowp_matrix_multiply_kernel_8cpp_source.xhtml#l00752">CpuGemmLowpMatrixMultiplyKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00380">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cpu_gemm_interleave4x4_kernel_8cpp_source.xhtml#l00075">CpuGemmInterleave4x4Kernel::run_op()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00088">CpuCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00303">ClGemmLowpMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00374">ClGemmMatrixMultiplyNativeKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00273">ClGemmLowpMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00078">CpuGemmTranspose1xWKernel::run_op()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00248">ClDirectConv3dKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00350">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00340">ClGemmMatrixMultiplyReshapedKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00543">arm_compute::utils::save_to_ppm()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00101">CpuConcatenate::validate()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00145">ClConcatenate::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_n_e_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00348">NELSTMLayerQuantized::validate()</a>, <a class="el" href="_c_l_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00395">CLLSTMLayerQuantized::validate()</a>, <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">arm_compute::cpu::vector_matrix_multiply_f32()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a893d17b56b9abc4423ce26e9a24ac5dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a893d17b56b9abc4423ce26e9a24ac5dc">&#9670;&nbsp;</a></span>DimZ</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t DimZ = 2</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Alias for dimension 2 also known as Z dimension. </p>

<p class="definition">Definition at line <a class="el" href="_window_8h_source.xhtml#l00047">47</a> of file <a class="el" href="_window_8h_source.xhtml">Window.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">arm_compute::cpu::bilinear_neon_scale()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00688">arm_compute::misc::shape_calculator::compute_winograd_filter_transform_shape()</a>, <a class="el" href="_concatenate_layer_8cpp_source.xhtml#l00116">arm_compute::test::validation::reference::concatenate_layer()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00077">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00089">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00150">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00069">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00045">CpuConcatenate::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00128">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00045">ClConcatenate::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00079">ClCastKernel::configure()</a>, <a class="el" href="_cpu_weights_reshape_kernel_8cpp_source.xhtml#l00082">CpuWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00088">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00053">CpuDirectConv2d::configure()</a>, <a class="el" href="_n_e_fill_border_kernel_8cpp_source.xhtml#l00115">NEFillBorderKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00077">CLFillBorderKernel::configure()</a>, <a class="el" href="directconv2d_2nchw_2impl_8h_source.xhtml#l00047">arm_compute::cpu::kernels::convolve_nchw()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2impl_8cpp_source.xhtml#l00058">arm_compute::cpu::kernels::convolve_nhwc()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">arm_compute::cpu::depthwise_loop_generic_fp()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">arm_compute::cpu::depthwise_loop_multiplier1_fp()</a>, <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">arm_compute::cpu::directconv3d_float_neon_ndhwc()</a>, <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::directconv3d_quantized_neon_ndhwc()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00253">IImageLoader::fill_planar_tensor()</a>, <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">arm_compute::cpu::fp_neon_activation_impl()</a>, <a class="el" href="_gpu_ckw_resize_8cpp_source.xhtml#l00533">GpuCkwResize::get_window()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00384">GpuCkwPool2d::get_window()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00351">GpuCkwDepthwiseConv2d::get_window()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00399">GpuCkwDirectConv2d::get_window()</a>, <a class="el" href="_gpu_ckw_mat_mul_8cpp_source.xhtml#l00237">GpuCkwMatMul::get_window()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">arm_compute::cpu::instance_normalization_nchw()</a>, <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">arm_compute::cpu::l2_normalize_x()</a>, <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::matrix_addition_f32()</a>, <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">arm_compute::cpu::nearest_neon_scale()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">arm_compute::cpu::neon_qsymm16_activation()</a>, <a class="el" href="_i_n_e_simple_function_8cpp_source.xhtml#l00041">INESimpleFunction::run()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_8cpp_source.xhtml#l00054">CpuConvertFullyConnectedWeights::run()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_fill_border_8cpp_source.xhtml#l00048">NEFillBorder::run()</a>, <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00176">NEROIPoolingLayerKernel::run()</a>, <a class="el" href="_cpu_pool2d_8cpp_source.xhtml#l00111">CpuPool2d::run()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00125">CLDepthToSpaceLayerKernel::run()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00122">CLSpaceToDepthLayerKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00222">CLInstanceNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00109">CLDeconvolutionLayerUpsampleKernel::run()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00126">CLFFTScaleKernel::run()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00143">CLSelectKernel::run()</a>, <a class="el" href="_cpu_depthwise_conv2d_assembly_dispatch_8cpp_source.xhtml#l00105">CpuDepthwiseConv2dAssemblyDispatch::run()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00254">CLNormalizationLayerKernel::run()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00140">CLTileKernel::run()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00153">CLROIPoolingLayerKernel::run()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00134">CLGatherKernel::run()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00181">CLComparisonKernel::run()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00142">CLFFTDigitReverseKernel::run()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00195">CLNormalizePlanarYUVLayerKernel::run()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00141">CLReverseKernel::run()</a>, <a class="el" href="_n_e_f_f_t1_d_8cpp_source.xhtml#l00148">NEFFT1D::run()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00225">CLReductionOperationKernel::run()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00163">CLFFTRadixStageKernel::run()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00167">CLArgMinMaxLayerKernel::run()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00165">CLL2NormalizeLayerKernel::run()</a>, <a class="el" href="_cpu_direct_conv2d_8cpp_source.xhtml#l00136">CpuDirectConv2d::run()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00090">NEInstanceNormalizationLayer::run()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00208">CLFillBorderKernel::run()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00138">CLStackLayerKernel::run()</a>, <a class="el" href="_n_e_pad_layer_8cpp_source.xhtml#l00279">NEPadLayer::run()</a>, <a class="el" href="_n_e_crop_resize_8cpp_source.xhtml#l00128">NECropResize::run()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00220">CLDeconvolutionReshapeOutputKernel::run()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00412">CLDepthwiseConvolutionLayerNativeKernel::run()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00137">CLComputeMeanVariance::run()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00193">CLBatchToSpaceLayerKernel::run()</a>, <a class="el" href="_n_e_o_n_2_helper_8h_source.xhtml#l00129">NESynthetizeFunctionWithZeroConstantKernelBorder&lt; K &gt;::run()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00231">CLFuseBatchNormalizationKernel::run()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00231">CLSpaceToBatchLayerKernel::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cpu_fill_kernel_8cpp_source.xhtml#l00051">CpuFillKernel::run_op()</a>, <a class="el" href="_cl_elementwise_kernel_8cpp_source.xhtml#l00324">ClElementwiseKernel::run_op()</a>, <a class="el" href="_cpu_convert_quantized_signedness_kernel_8cpp_source.xhtml#l00093">CpuConvertQuantizedSignednessKernel::run_op()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00104">ClFloorKernel::run_op()</a>, <a class="el" href="_cl_reshape_kernel_8cpp_source.xhtml#l00105">ClReshapeKernel::run_op()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00128">ClTransposeKernel::run_op()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00170">ClElementWiseUnaryKernel::run_op()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00104">ClFillKernel::run_op()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00144">ClCopyKernel::run_op()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00231">ClScaleKernel::run_op()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00254">ClPool3dKernel::run_op()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00250">ClActivationKernel::run_op()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00129">ClPermuteKernel::run_op()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00330">ClPool2dKernel::run_op()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00380">CpuPool2dKernel::run_op()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00264">ClWinogradInputTransformKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00238">ClMatMulNativeKernel::run_op()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00148">ClCastKernel::run_op()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00231">ClMatMulLowpNativeKernel::run_op()</a>, <a class="el" href="_cpu_col2_im_kernel_8cpp_source.xhtml#l00088">CpuCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00146">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00152">ClGemmLowpQuantizeDownInt32ScaleKernel::run_op()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00308">ClWinogradOutputTransformKernel::run_op()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00161">ClCol2ImKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00194">ClGemmLowpOffsetContributionKernel::run_op()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00185">CLStridedSliceKernel::run_op()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00248">ClDirectConv3dKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00141">ClGemmLowpMatrixAReductionKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00253">ClGemmLowpOffsetContributionOutputStageKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00299">ClMulKernel::run_op()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00183">CLFillBorderKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00501">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::run_op()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00412">ClIm2ColKernel::run_op()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00219">ClGemmLowpMatrixBReductionKernel::run_op()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00434">ClComplexMulKernel::run_op()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">arm_compute::cpu::sve2_qasymm8_signed_activation()</a>, <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00041">arm_compute::cpu::sve2_qsymm16_activation()</a>, <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml#l00040">arm_compute::cpu::sve_fp32_activation()</a>, <a class="el" href="_cpu_concatenate_8cpp_source.xhtml#l00101">CpuConcatenate::validate()</a>, <a class="el" href="_cl_concatenate_8cpp_source.xhtml#l00145">ClConcatenate::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_mat_mul_kernel_helpers_8cpp_source.xhtml#l00059">arm_compute::opencl::kernels::validate_and_configure_window_for_mmul_kernels()</a>, and <a class="el" href="_window_8h_source.xhtml#l00176">Window::z()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/core/<a class="el" href="_window_8h_source.xhtml">Window.h</a></li>
<li>arm_compute/core/<a class="el" href="_window_8inl_source.xhtml">Window.inl</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a663ce71e1992366180fcb85b0a874e2f"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a663ce71e1992366180fcb85b0a874e2f">arm_compute::Window::collapse_if_possible</a></div><div class="ttdeci">Window collapse_if_possible(const Window &amp;full_window, size_t first, size_t last, bool *has_collapsed=nullptr) const</div><div class="ttdoc">Collapse the dimensions between first and last if possible.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00072">Window.inl:72</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a2fb4b3d6b185c9d225073f923f1827c3"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a2fb4b3d6b185c9d225073f923f1827c3">arm_compute::Window::num_iterations</a></div><div class="ttdeci">constexpr size_t num_iterations(size_t dimension) const</div><div class="ttdoc">Return the number of iterations needed to iterate through a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00196">Window.inl:196</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ab242a9d3683ac8f480f7944ff6f40534"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab242a9d3683ac8f480f7944ff6f40534">arm_compute::Window::Window</a></div><div class="ttdeci">constexpr Window()</div><div class="ttdoc">Default constructor: create a window containing a single element.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00054">Window.h:54</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ae181d6e147a7230d02611fb9077959f0"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae181d6e147a7230d02611fb9077959f0">arm_compute::Window::swap</a></div><div class="ttdeci">friend void swap(Window &amp;lhs, Window &amp;rhs)</div><div class="ttdoc">Friend function that swaps the contents of two windows.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00318">Window.inl:318</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_abfa164a379c0c401a662792d7d0ccfba"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#abfa164a379c0c401a662792d7d0ccfba">arm_compute::Window::shape</a></div><div class="ttdeci">TensorShape shape() const</div><div class="ttdoc">Return the shape of the window in number of steps.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00298">Window.inl:298</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">Math.h:50</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ae20ec28555d4473419cae37cf120f35d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ae20ec28555d4473419cae37cf120f35d">arm_compute::Window::broadcast_if_dimension_le_one</a></div><div class="ttdeci">Window broadcast_if_dimension_le_one(const TensorShape &amp;shape) const</div><div class="ttdoc">Don't advance in the dimension where shape is less equal to 1.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00134">Window.inl:134</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml_aea5d1efe37933e02913aec84db5b9d4b"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml#aea5d1efe37933e02913aec84db5b9d4b">arm_compute::TensorShape::set</a></div><div class="ttdeci">TensorShape &amp; set(size_t dimension, size_t value, bool apply_dim_correction=true, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00078">TensorShape.h:78</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a80a5f2d6e3a697c9aad893a3b4242615"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a80a5f2d6e3a697c9aad893a3b4242615">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const</div><div class="ttdoc">Returns the effective dimensionality of the tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00142">Dimensions.h:142</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a548131b3d37da47a2e9d32111c88dfe1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">arm_compute::test::validation::reference::slice</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; slice(const SimpleTensor&lt; T &gt; &amp;src, Coordinates starts, Coordinates ends)</div><div class="ttdef"><b>Definition:</b> <a href="_slice_operations_8cpp_source.xhtml#l00038">SliceOperations.cpp:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a1b67d5b720119d50faa286c774579ecc"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">arm_compute::Dimensions&lt; int &gt;::num_max_dimensions</a></div><div class="ttdeci">static constexpr size_t num_max_dimensions</div><div class="ttdoc">Number of dimensions the tensor has.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00046">Dimensions.h:46</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:54:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
