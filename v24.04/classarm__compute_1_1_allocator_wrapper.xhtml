<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: AllocatorWrapper Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_allocator_wrapper.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">AllocatorWrapper Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Default malloc allocator implementation.  
 <a href="classarm__compute_1_1_allocator_wrapper.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_allocator_wrapper_8h_source.xhtml">AllocatorWrapper.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a61fc993aef50ecaba06e70fa96275351"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#a61fc993aef50ecaba06e70fa96275351">AllocatorWrapper</a> (const <a class="el" href="struct_acl_allocator.xhtml">AclAllocator</a> &amp;backing_allocator) noexcept</td></tr>
<tr class="memdesc:a61fc993aef50ecaba06e70fa96275351"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor.  <a href="classarm__compute_1_1_allocator_wrapper.xhtml#a61fc993aef50ecaba06e70fa96275351">More...</a><br /></td></tr>
<tr class="separator:a61fc993aef50ecaba06e70fa96275351"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafad057238278dd04e9f6ffa72a2cd05"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#aafad057238278dd04e9f6ffa72a2cd05">AllocatorWrapper</a> (const <a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;) noexcept=default</td></tr>
<tr class="separator:aafad057238278dd04e9f6ffa72a2cd05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a440ab6e2669c07830b9488476415025e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#a440ab6e2669c07830b9488476415025e">AllocatorWrapper</a> (<a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&amp;) noexcept=default</td></tr>
<tr class="separator:a440ab6e2669c07830b9488476415025e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac86c69143ecb2b567ddc3fa6b716f5eb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#ac86c69143ecb2b567ddc3fa6b716f5eb">operator=</a> (const <a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;) noexcept=delete</td></tr>
<tr class="separator:ac86c69143ecb2b567ddc3fa6b716f5eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24a6b4582ad0c627f8e5f45d6ba295f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#a24a6b4582ad0c627f8e5f45d6ba295f0">operator=</a> (<a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&amp;other) noexcept=default</td></tr>
<tr class="separator:a24a6b4582ad0c627f8e5f45d6ba295f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0997a6135a02d99f2efb706b1f654586"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#a0997a6135a02d99f2efb706b1f654586">alloc</a> (size_t size)</td></tr>
<tr class="memdesc:a0997a6135a02d99f2efb706b1f654586"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a chunk of memory of a given size in bytes.  <a href="classarm__compute_1_1_allocator_wrapper.xhtml#a0997a6135a02d99f2efb706b1f654586">More...</a><br /></td></tr>
<tr class="separator:a0997a6135a02d99f2efb706b1f654586"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbedc913aa4651b3c3b4b3aecd9b4711"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#afbedc913aa4651b3c3b4b3aecd9b4711">free</a> (void *ptr)</td></tr>
<tr class="memdesc:afbedc913aa4651b3c3b4b3aecd9b4711"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free an allocated memory block.  <a href="classarm__compute_1_1_allocator_wrapper.xhtml#afbedc913aa4651b3c3b4b3aecd9b4711">More...</a><br /></td></tr>
<tr class="separator:afbedc913aa4651b3c3b4b3aecd9b4711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdd37890a6de9e429edae5b4840d2ffb"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#afdd37890a6de9e429edae5b4840d2ffb">aligned_alloc</a> (size_t size, size_t alignment)</td></tr>
<tr class="memdesc:afdd37890a6de9e429edae5b4840d2ffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allocate a chunk of memory of a given size in bytes, while honoring a given alignment requirement.  <a href="classarm__compute_1_1_allocator_wrapper.xhtml#afdd37890a6de9e429edae5b4840d2ffb">More...</a><br /></td></tr>
<tr class="separator:afdd37890a6de9e429edae5b4840d2ffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a274dd8714485eed9c9328973d44ec5dc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#a274dd8714485eed9c9328973d44ec5dc">aligned_free</a> (void *ptr)</td></tr>
<tr class="memdesc:a274dd8714485eed9c9328973d44ec5dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Free an aligned memory block.  <a href="classarm__compute_1_1_allocator_wrapper.xhtml#a274dd8714485eed9c9328973d44ec5dc">More...</a><br /></td></tr>
<tr class="separator:a274dd8714485eed9c9328973d44ec5dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7a204d3e7470de5374245c19bf0f18f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml#af7a204d3e7470de5374245c19bf0f18f">set_user_data</a> (void *user_data)</td></tr>
<tr class="memdesc:af7a204d3e7470de5374245c19bf0f18f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set user data to be used by the allocator.  <a href="classarm__compute_1_1_allocator_wrapper.xhtml#af7a204d3e7470de5374245c19bf0f18f">More...</a><br /></td></tr>
<tr class="separator:af7a204d3e7470de5374245c19bf0f18f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Default malloc allocator implementation. </p>

<p class="definition">Definition at line <a class="el" href="_allocator_wrapper_8h_source.xhtml#l00032">32</a> of file <a class="el" href="_allocator_wrapper_8h_source.xhtml">AllocatorWrapper.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a61fc993aef50ecaba06e70fa96275351"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61fc993aef50ecaba06e70fa96275351">&#9670;&nbsp;</a></span>AllocatorWrapper() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="struct_acl_allocator.xhtml">AclAllocator</a> &amp;&#160;</td>
          <td class="paramname"><em>backing_allocator</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">backing_allocator</td><td>Backing memory allocator to be used </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_allocator_wrapper_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="_allocator_wrapper_8cpp_source.xhtml">AllocatorWrapper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    : _backing_allocator(backing_allocator)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aafad057238278dd04e9f6ffa72a2cd05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafad057238278dd04e9f6ffa72a2cd05">&#9670;&nbsp;</a></span>AllocatorWrapper() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a440ab6e2669c07830b9488476415025e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a440ab6e2669c07830b9488476415025e">&#9670;&nbsp;</a></span>AllocatorWrapper() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="afdd37890a6de9e429edae5b4840d2ffb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdd37890a6de9e429edae5b4840d2ffb">&#9670;&nbsp;</a></span>aligned_alloc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * aligned_alloc </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate a chunk of memory of a given size in bytes, while honoring a given alignment requirement. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Size of memory to allocate in bytes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alignment</td><td>Alignment requirements</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the allocated memory if successful else nullptr </dd></dl>

<p class="definition">Definition at line <a class="el" href="_allocator_wrapper_8cpp_source.xhtml#l00047">47</a> of file <a class="el" href="_allocator_wrapper_8cpp_source.xhtml">AllocatorWrapper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a9c565c5aa3682e262737dfbc868a30f0">aligned_alloc</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> _backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a9c565c5aa3682e262737dfbc868a30f0">aligned_alloc</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a0f53d287ac7c064d1a49d4bd93ca1cb9">user_data</a>, size, alignment);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_acl_types_8h_source.xhtml#l00122">AclAllocator::aligned_alloc</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_acl_types_8h_source.xhtml#l00131">AclAllocator::user_data</a>.</p>

</div>
</div>
<a id="a274dd8714485eed9c9328973d44ec5dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a274dd8714485eed9c9328973d44ec5dc">&#9670;&nbsp;</a></span>aligned_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void aligned_free </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Free an aligned memory block. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to the memory to release </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_allocator_wrapper_8cpp_source.xhtml#l00053">53</a> of file <a class="el" href="_allocator_wrapper_8cpp_source.xhtml">AllocatorWrapper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a7bfd619c8403697c65a2a0178930eb65">aligned_free</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    _backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a7bfd619c8403697c65a2a0178930eb65">aligned_free</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a0f53d287ac7c064d1a49d4bd93ca1cb9">user_data</a>, ptr);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_acl_types_8h_source.xhtml#l00128">AclAllocator::aligned_free</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_acl_types_8h_source.xhtml#l00131">AclAllocator::user_data</a>.</p>

</div>
</div>
<a id="a0997a6135a02d99f2efb706b1f654586"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0997a6135a02d99f2efb706b1f654586">&#9670;&nbsp;</a></span>alloc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * alloc </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allocate a chunk of memory of a given size in bytes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">size</td><td>Size of memory to allocate in bytes</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the allocated memory if successful else nullptr </dd></dl>

<p class="definition">Definition at line <a class="el" href="_allocator_wrapper_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_allocator_wrapper_8cpp_source.xhtml">AllocatorWrapper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a66e74c5f7dee07b2c12a032a74798704">alloc</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> _backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a66e74c5f7dee07b2c12a032a74798704">alloc</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a0f53d287ac7c064d1a49d4bd93ca1cb9">user_data</a>, size);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_acl_types_8h_source.xhtml#l00108">AclAllocator::alloc</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, and <a class="el" href="_acl_types_8h_source.xhtml#l00131">AclAllocator::user_data</a>.</p>

</div>
</div>
<a id="afbedc913aa4651b3c3b4b3aecd9b4711"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbedc913aa4651b3c3b4b3aecd9b4711">&#9670;&nbsp;</a></span>free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void free </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Free an allocated memory block. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">ptr</td><td>Pointer to allocated memory </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_allocator_wrapper_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_allocator_wrapper_8cpp_source.xhtml">AllocatorWrapper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#aabaea8b6911c70fe781173575d0fb70b">free</a> == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    _backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#aabaea8b6911c70fe781173575d0fb70b">free</a>(_backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a0f53d287ac7c064d1a49d4bd93ca1cb9">user_data</a>, ptr);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_acl_types_8h_source.xhtml#l00114">AclAllocator::free</a>, and <a class="el" href="_acl_types_8h_source.xhtml#l00131">AclAllocator::user_data</a>.</p>

</div>
</div>
<a id="a24a6b4582ad0c627f8e5f45d6ba295f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24a6b4582ad0c627f8e5f45d6ba295f0">&#9670;&nbsp;</a></span>operator=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac86c69143ecb2b567ddc3fa6b716f5eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac86c69143ecb2b567ddc3fa6b716f5eb">&#9670;&nbsp;</a></span>operator=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af7a204d3e7470de5374245c19bf0f18f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7a204d3e7470de5374245c19bf0f18f">&#9670;&nbsp;</a></span>set_user_data()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_user_data </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set user data to be used by the allocator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">user_data</td><td>User data to be used by the allocator </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_allocator_wrapper_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="_allocator_wrapper_8cpp_source.xhtml">AllocatorWrapper.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">if</span> (user_data != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        _backing_allocator.<a class="code" href="struct_acl_allocator.xhtml#a0f53d287ac7c064d1a49d4bd93ca1cb9">user_data</a> = user_data;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_acl_types_8h_source.xhtml#l00131">AclAllocator::user_data</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/common/<a class="el" href="_allocator_wrapper_8h_source.xhtml">AllocatorWrapper.h</a></li>
<li>src/common/<a class="el" href="_allocator_wrapper_8cpp_source.xhtml">AllocatorWrapper.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astruct_acl_allocator_xhtml_a66e74c5f7dee07b2c12a032a74798704"><div class="ttname"><a href="struct_acl_allocator.xhtml#a66e74c5f7dee07b2c12a032a74798704">AclAllocator::alloc</a></div><div class="ttdeci">void *(* alloc)(void *user_data, size_t size)</div><div class="ttdoc">Allocate a block of size bytes of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00108">AclTypes.h:108</a></div></div>
<div class="ttc" id="astruct_acl_allocator_xhtml_a7bfd619c8403697c65a2a0178930eb65"><div class="ttname"><a href="struct_acl_allocator.xhtml#a7bfd619c8403697c65a2a0178930eb65">AclAllocator::aligned_free</a></div><div class="ttdeci">void(* aligned_free)(void *user_data, void *ptr)</div><div class="ttdoc">Allocate a block of size bytes of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00128">AclTypes.h:128</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="astruct_acl_allocator_xhtml_a0f53d287ac7c064d1a49d4bd93ca1cb9"><div class="ttname"><a href="struct_acl_allocator.xhtml#a0f53d287ac7c064d1a49d4bd93ca1cb9">AclAllocator::user_data</a></div><div class="ttdeci">void * user_data</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00131">AclTypes.h:131</a></div></div>
<div class="ttc" id="astruct_acl_allocator_xhtml_a9c565c5aa3682e262737dfbc868a30f0"><div class="ttname"><a href="struct_acl_allocator.xhtml#a9c565c5aa3682e262737dfbc868a30f0">AclAllocator::aligned_alloc</a></div><div class="ttdeci">void *(* aligned_alloc)(void *user_data, size_t size, size_t alignment)</div><div class="ttdoc">Allocate a block of size bytes of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00122">AclTypes.h:122</a></div></div>
<div class="ttc" id="astruct_acl_allocator_xhtml_aabaea8b6911c70fe781173575d0fb70b"><div class="ttname"><a href="struct_acl_allocator.xhtml#aabaea8b6911c70fe781173575d0fb70b">AclAllocator::free</a></div><div class="ttdeci">void(* free)(void *user_data, void *ptr)</div><div class="ttdoc">Release a block of size bytes of memory.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_types_8h_source.xhtml#l00114">AclTypes.h:114</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_allocator_wrapper.xhtml">AllocatorWrapper</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:54:06 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
