<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_conv/addressing.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('addressing_8hpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">addressing.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="addressing_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2022 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">/* arm_conv kernels share a lot of similarities in how they address input and</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> * output tensors. Consequently, this file contains common approaches to</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> * preparing these tensor descriptions. Generic (i.e., untyped) methods are</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> * contained within the `arm_conv::addressing` namespace, and typed wrappers</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> * are provided within an anonymous namespace within `arm_conv`. The various</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> * methods are described below.</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cstddef&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__conv.xhtml">arm_conv</a> {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>addressing {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/* Pointer array</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * -------------</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * Constructs an array of pointers which point to a `array_rows` x `array_cols`</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * chunk of a tensor. The array of pointers will be written into `dest`.</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> * `base_ptr` should point at the first VALID element of the chunk of tensor</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * (i.e., if there&#39;s one padded row, and one padded column, then `base_ptr`</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * should point at the element which will be at position (1, 1) in the array).</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * `ld_row` and `ld_col` are in bytes, and describe the strides over rows and</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * columns (respectively) of the NHWC-ordered tensor. `pad_buffer` should point</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * at a suitably sized (and initialised) area of memory which can be addressed</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * by elements of the array which represent padding.</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * `pad_top` and `pad_left` describe the padding on the top and left of the</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * array, respectively, and `valid_rows` and `valid_cols` describe the number</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * of rows and columns between the element pointed to by `base_ptr` and the</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * edge of the image (that is `valid_rows` may be greater than `array_rows` and</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> * likewise for the columns).</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#ac9211d5ee87bf4727d20cb4fbb73d413">fill_pointer_array</a>(</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordtype">size_t</span> element_size,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordtype">void</span> **<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> array_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> array_cols,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keywordtype">void</span> *base_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordtype">void</span> *pad_buffer,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/* Interleaved multi-point pointer array</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> * -------------------------------------</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * For each point in a `output_rows` x `output_cols` array, constructs</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * `kernel_rows` x `kernel_cols` array of pointers. The pointers are</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * interleaved thusly:</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> *   for ki in kernel_rows:</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> *       for kj in kernel_cols:</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> *           for oi in output_rows:</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> *               for oj in output_cols:</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> *                   get pointer for point (oi*stride_rows + ki, oj*stride_cols + kj)</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * Other arguments are as for `fill_pointer_array`.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * The name reflects that this is the form of addressing mode used by &quot;generic&quot;</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * depthwise and pooling kernels.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#aa3e4bd2f9db0e2bf819f3aa1f3635bd5">fill_pointer_array_generic_kernel</a>(</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordtype">size_t</span> element_size,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordtype">void</span> **<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_cols,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_cols,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordtype">void</span> *base_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordtype">void</span> *pad_buffer,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">/* NCHW-patch addressed by row</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> * ---------------------------</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> * Construct an array of pointers, each of which points at a row of an</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> * NCHW-ordered patch of a tensor. Memory addressed by the pointers may be</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> * outside of the original tensor, and should therefore not be written to</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * (modifications will be lost).</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * `dest_row_pointers` should point at a `patch_rows` list of pointers; each of</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * which will point at a 1 x `patch_cols` NCHW-ordered sample of the source</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * tensor.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"> * `dest_patch` should point to a `element_size * patch_rows * patch_cols` area</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"> * of memory which can be written to by this function to form samples of the</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"> * source tensor.</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> * `src_ptr` should point at the first VALID element of the chunk of tensor</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * (i.e., if there&#39;s one padded row, and one padded column, then `src_ptr`</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * should point at the element which will be at position (1, 1) in the array).</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> * `ld_row` and `ld_col` are in bytes, and describe the strides over rows and</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * columns (respectively) of the NHWC-ordered tensor. If `ld_col` ==</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> * `element_size` then copies from the source tensor will be elided and source</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> * data may be addressed directly.</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> * `pad_row` should point to a `patch_cols` array of (appropriately</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> * initialised) padding values.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> * Other arguments are as for `fill_pointer_array`.</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#a719b338d6f0e8dbca5c79e186e35d7dc">fill_nchw_patch_array</a>(</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordtype">size_t</span> element_size,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span> **dest_row_pointers,  <span class="comment">// Array of pointers to each row of the patch</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordtype">void</span> *dest_patch,  <span class="comment">// Pointer to space which can be used to construct the patch</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> patch_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> patch_cols,  <span class="comment">// Patch size</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span> *src_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,  <span class="comment">// Source tensor</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span> *pad_row,  <span class="comment">// Pointer to a row of padding values</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#a8907161c1f7f9e0fba0a270607659cc8">fill_patch_array_generic_kernel</a>(</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordtype">size_t</span> element_size,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span> **dest_pointers,  <span class="comment">// Pointers: one per output row per kernel point</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keywordtype">void</span> *dest_patch,  <span class="comment">// Pointer to space which can be used to construct the patch</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_cols,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_cols,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span> *src_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,  <span class="comment">// Source tensor</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">void</span> *pad_row,  <span class="comment">// Pointer to a row of padding values</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}  <span class="comment">// namespace addressing</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">namespace </span>{</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">/* Pointer array</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * -------------</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> * See `addressing::fill_pointer_array`. No copies are made by this method,</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * memory pointed to by the pointer array is contained within the base tensor</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * and the padding buffer.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#ac9211d5ee87bf4727d20cb4fbb73d413">fill_pointer_array</a>(</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  T **<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> array_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> array_cols,</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  T *base_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  T *pad_buffer,</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <a class="code" href="namespacearm__conv_1_1addressing.xhtml#ac9211d5ee87bf4727d20cb4fbb73d413">addressing::fill_pointer_array</a>(</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">sizeof</span>(T), (<span class="keywordtype">void</span> **) <a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>, array_rows, array_cols,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    (<span class="keywordtype">void</span> *) base_ptr, ld_row, ld_col,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    (<span class="keywordtype">void</span> *) pad_buffer,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    pad_top, valid_rows,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    pad_left, valid_cols</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  );</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">/* Interleaved multi-point pointer array</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> * -------------------------------------</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"> * See `addressing::fill_pointer_array_generic_kernel`. No copies are made by</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> * this method, memory pointed to by the pointer array is contained within the</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment"> * base tensor and the padding buffer.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#aa3e4bd2f9db0e2bf819f3aa1f3635bd5">fill_pointer_array_generic_kernel</a>(</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  T **<a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>,</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_cols,</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_cols,</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  T *base_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  T *pad_buffer,</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;{</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <a class="code" href="namespacearm__conv_1_1addressing.xhtml#aa3e4bd2f9db0e2bf819f3aa1f3635bd5">addressing::fill_pointer_array_generic_kernel</a>(</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">sizeof</span>(T),</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    (<span class="keywordtype">void</span> **) <a class="code" href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">dest</a>,</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    output_rows, output_cols,</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    kernel_rows, kernel_cols,</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    stride_rows, stride_cols,</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    (<span class="keywordtype">void</span> *) base_ptr, ld_row, ld_col,</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    (<span class="keywordtype">void</span> *) pad_buffer,</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    pad_top, valid_rows,</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    pad_left, valid_cols</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  );</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#a719b338d6f0e8dbca5c79e186e35d7dc">fill_nchw_patch_array</a>(</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keyword">const</span> T **dest_row_pointers,  <span class="comment">// Array of pointers to each row of the patch</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  T *dest_patch,  <span class="comment">// Pointer to space which can be used to construct the patch</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> patch_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> patch_cols,  <span class="comment">// Patch size</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  <span class="keyword">const</span> T *src_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,  <span class="comment">// Source tensor</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keyword">const</span> T *pad_row,  <span class="comment">// Pointer to a row of padding values</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <a class="code" href="namespacearm__conv_1_1addressing.xhtml#a719b338d6f0e8dbca5c79e186e35d7dc">addressing::fill_nchw_patch_array</a>(</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">sizeof</span>(T),</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> **<span class="keyword">&gt;</span>(dest_row_pointers),</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(dest_patch),</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    patch_rows, patch_cols,</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(src_ptr), ld_row, ld_col,</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(pad_row),</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    pad_top, valid_rows,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    pad_left, valid_cols</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  );</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__conv_1_1addressing.xhtml#a8907161c1f7f9e0fba0a270607659cc8">fill_patch_array_generic_kernel</a>(</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  <span class="keyword">const</span> T **dest_pointers,  <span class="comment">// Pointers: one per output row per kernel point</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  T *dest_patch,  <span class="comment">// Pointer to space which can be used to construct the patch</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_cols,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_cols,</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_rows, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stride_cols,</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="keyword">const</span> T *src_ptr, <span class="keywordtype">size_t</span> ld_row, <span class="keywordtype">size_t</span> ld_col,  <span class="comment">// Source tensor</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keyword">const</span> T *pad_row,  <span class="comment">// Pointer to a row of padding values</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_top, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_rows,</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pad_left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> valid_cols</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;{</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <a class="code" href="namespacearm__conv_1_1addressing.xhtml#a8907161c1f7f9e0fba0a270607659cc8">addressing::fill_patch_array_generic_kernel</a>(</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">sizeof</span>(T),</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> **<span class="keyword">&gt;</span>(dest_pointers),</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(dest_patch),</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    output_rows, output_cols,</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    kernel_rows, kernel_cols,</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    stride_rows, stride_cols,</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(src_ptr), ld_row, ld_col,</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(pad_row),</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    pad_top, valid_rows,</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    pad_left, valid_cols</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  );</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}  <span class="comment">// namespace {anonymous}</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}  <span class="comment">// namespace arm_conv</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__conv_1_1addressing_xhtml_a8907161c1f7f9e0fba0a270607659cc8"><div class="ttname"><a href="namespacearm__conv_1_1addressing.xhtml#a8907161c1f7f9e0fba0a270607659cc8">arm_conv::addressing::fill_patch_array_generic_kernel</a></div><div class="ttdeci">void fill_patch_array_generic_kernel(size_t element_size, const void **dest_pointers_raw, void *patch_raw, const unsigned int output_rows, const unsigned int output_cols, const unsigned int kernel_rows, const unsigned int kernel_cols, const unsigned int stride_rows, const unsigned int stride_cols, const void *src_ptr_raw, size_t ld_row, size_t ld_col, const void *pad_row, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00259">addressing.cpp:259</a></div></div>
<div class="ttc" id="anamespacearm__conv_1_1addressing_xhtml_ac9211d5ee87bf4727d20cb4fbb73d413"><div class="ttname"><a href="namespacearm__conv_1_1addressing.xhtml#ac9211d5ee87bf4727d20cb4fbb73d413">arm_conv::addressing::fill_pointer_array</a></div><div class="ttdeci">void fill_pointer_array(size_t element_size, void **dest_raw, const unsigned int array_rows, const unsigned int array_cols, void *base_ptr_raw, size_t ld_row, size_t ld_col, void *pad_buffer_raw, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00033">addressing.cpp:33</a></div></div>
<div class="ttc" id="anamespacearm__conv_1_1addressing_xhtml_aa3e4bd2f9db0e2bf819f3aa1f3635bd5"><div class="ttname"><a href="namespacearm__conv_1_1addressing.xhtml#aa3e4bd2f9db0e2bf819f3aa1f3635bd5">arm_conv::addressing::fill_pointer_array_generic_kernel</a></div><div class="ttdeci">void fill_pointer_array_generic_kernel(const size_t element_size, void **dest_raw, const unsigned int output_rows, const unsigned int output_cols, const unsigned int kernel_rows, const unsigned int kernel_cols, const unsigned int stride_rows, const unsigned int stride_cols, void *base_ptr_raw, size_t ld_row, size_t ld_col, void *pad_buffer_raw, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00089">addressing.cpp:89</a></div></div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_ab0bede79c5f4cbed9c2cd932a0ace201"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#ab0bede79c5f4cbed9c2cd932a0ace201">GemmTuner.dest</a></div><div class="ttdeci">dest</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00644">GemmTuner.py:644</a></div></div>
<div class="ttc" id="anamespacearm__conv_1_1addressing_xhtml_a719b338d6f0e8dbca5c79e186e35d7dc"><div class="ttname"><a href="namespacearm__conv_1_1addressing.xhtml#a719b338d6f0e8dbca5c79e186e35d7dc">arm_conv::addressing::fill_nchw_patch_array</a></div><div class="ttdeci">void fill_nchw_patch_array(size_t element_size, const void **dest_row_pointers_raw, void *dest_patch_raw, const unsigned int patch_rows, unsigned int patch_cols, const void *src_ptr_raw, size_t ld_row, size_t ld_col, const void *pad_row, const unsigned int pad_top, const unsigned int valid_rows, const unsigned int pad_left, const unsigned int valid_cols)</div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00171">addressing.cpp:171</a></div></div>
<div class="ttc" id="anamespacearm__conv_xhtml"><div class="ttname"><a href="namespacearm__conv.xhtml">arm_conv</a></div><div class="ttdef"><b>Definition:</b> <a href="addressing_8cpp_source.xhtml#l00030">addressing.cpp:30</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_ea98ae4f30fbc97db6231c6535bdb2d9.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="addressing_8hpp.xhtml">addressing.hpp</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:53:54 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
