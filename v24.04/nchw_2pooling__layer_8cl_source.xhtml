<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/cl_kernels/nchw/pooling_layer.cl Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('nchw_2pooling__layer_8cl_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">pooling_layer.cl</div>  </div>
</div><!--header-->
<div class="contents">
<a href="nchw_2pooling__layer_8cl.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#if defined(POOL_AVG) || defined(POOL_L2)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">   27</a></span>&#160;<span class="preprocessor">#define POOL_OP(x, y) ((x) + (y))</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* defined(POOL_AVG) || defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#if defined(QUANTIZED)</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#define POOL_OP(x, y) (max((x), (y)))</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#else // defined(QUANTIZED)</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#define POOL_OP(x, y) (fmax((x), (y)))</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#endif // defined(QUANTIZED)</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(POOL_AVG) || defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#if defined(POOL_L2)</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#define POW2_OP(x, vec_size) ((x) * (x))</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="nchw_2pooling__layer_8cl.xhtml#a03898439d164d74f8c35bafb67262d95">   39</a></span>&#160;<span class="preprocessor">#define POW2_OP(x, vec_size) (x)</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="nchw_2pooling__layer_8cl.xhtml#a5db17889d824975fefb2ce2f4690637f">   42</a></span>&#160;<span class="preprocessor">#define DIV_OP(x, y) (x * (1.f / y))</span></div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="nchw_2pooling__layer_8cl.xhtml#ac9af19bec38fe50b4b9585c0e5c0ccca">   43</a></span>&#160;<span class="preprocessor">#define SQRT_OP(x) sqrt((x))</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#if defined(FP_MIXED_PRECISION) || defined(QUANTIZED)</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#define CONVERT_TO_ACC_DATA_TYPE(x, n) CONVERT(x, VEC_DATA_TYPE(ACC_DATA_TYPE, n))</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#define VLOAD_AND_CONVERT_TO_ACC_DATA_TYPE(n, offset, ptr) CONVERT_TO_ACC_DATA_TYPE(vload##n(offset, ptr), n)</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#else </span><span class="comment">/* defined(FP_MIXED_PRECISION) || defined(QUANTIZED)*/</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="nchw_2pooling__layer_8cl.xhtml#af6c2e106d0b5d1cb755bbc79d0b09d52">   49</a></span>&#160;<span class="preprocessor">#define VLOAD_AND_CONVERT_TO_ACC_DATA_TYPE(n, offset, ptr) vload##n(offset, ptr)</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(FP_MIXED_PRECISION) || defined(QUANTIZED)*/</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="nchw_2pooling__layer_8cl.xhtml#ae9df7602479b001f6280f2f528f10a92">   52</a></span>&#160;ACC_DATA_TYPE <a class="code" href="nchw_2pooling__layer_8cl.xhtml#ae9df7602479b001f6280f2f528f10a92">calculate_avg_scale</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x, <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y, <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_w, <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_h,</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                                  <span class="keyword">const</span> <span class="keywordtype">int</span> pad_x, <span class="keyword">const</span> <span class="keywordtype">int</span> pad_y, <span class="keyword">const</span> <span class="keywordtype">int</span> stride_x, <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordtype">int</span>       start_x = get_global_id(0) * stride_x - pad_x;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">int</span>       start_y = get_global_id(1) * stride_y - pad_y;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_x   = min(start_x + pool_size_x, upper_bound_w);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> end_y   = min(start_y + pool_size_y, upper_bound_h);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">#if defined(EXCLUDE_PADDING)</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    start_x = max(0, start_x);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    start_y = max(0, start_y);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(EXCLUDE_PADDING) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> ((end_y - start_y) * (end_x - start_x));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#if defined(POOL_SIZE_X) &amp;&amp; defined(POOL_SIZE_Y)</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/** Performs a pooling function of pool size equal to N  (NCHW)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment"> * @note Datatype must be passed using -DDATA_TYPE e.g. -DDATA_TYPE=float. Supported data types are F16/F32/QASYMM8;</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * @note Pool sizes must be passed using -DPOOL_SIZE_X and -DPOOL_SIZE_Y e.g. -DPOOL_SIZE_X=13;</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * @note In case of average pooling the following information must be passed at compile time:</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *       -DPOOL_AVG must be provided otherwise max pooling will be performed.</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> *       -DMAX_WIDTH and -DMAX_HEIGHT which are the maximum accessible indeces in x and y dimensions (width + pad)</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> *       -DSTRIDE_X and -DSTRIDE_Y which are the steps of the window along the x and y directions</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> *       -DPAD_X and -DPAD_Y which are the pooling paddings in x and y dimension</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * @note The initial value for the pooling operation must be passed at compile time using -DINITIAL_VALUE e.g. -DINITIAL_VALUE=0</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * @param[in]  src_ptr                           Pointer to the source tensor. Supported data types: F16/F32/QASYMM8</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * @param[in]  src_stride_x                      Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * @param[in]  src_step_x                        src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> * @param[in]  src_stride_y                      Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * @param[in]  src_step_y                        src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * @param[in]  src_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> * @param[in]  src_step_z                        src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * @param[out] dst_ptr                           Pointer to the destination tensor. Supported data types: same as @p src_ptr</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                      Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> * @param[in]  dst_step_x                        dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                      Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> * @param[in]  dst_step_y                        dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                      Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> * @param[in]  dst_step_z                        dst_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;__kernel <span class="keywordtype">void</span> pooling_layer_MxN_nchw(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>))</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">int</span> id0 = get_global_id(0);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">int</span> id1 = get_global_id(1);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">int</span> id2 = get_global_id(2);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">int</span> x_coords = (id0 * STRIDE_X) - PAD_X;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">int</span> y_coords = (id1 * STRIDE_Y) - PAD_Y;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + y_coords * (int)src_stride_y + id2 * src_stride_z;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 8)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    vdata               = INITIAL_VALUE;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    ACC_DATA_TYPE sdata = INITIAL_VALUE;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    const <span class="keywordtype">int</span> end_x = min((<span class="keywordtype">int</span>)POOL_SIZE_X, (<span class="keywordtype">int</span>)(SRC_WIDTH - x_coords));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    const <span class="keywordtype">int</span> end_y = min((<span class="keywordtype">int</span>)POOL_SIZE_Y, (<span class="keywordtype">int</span>)(SRC_HEIGHT - y_coords));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Load data</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a>(<span class="keywordtype">int</span> y = 0; y &lt; end_y; ++y)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span>((y_coords + y) &gt;= 0)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordtype">int</span> x = 0;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">for</span>(; x &lt;= (end_x - 8); x += 8)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                int8 src_x = (int8)(x_coords + x) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#ac22ba2ef169d8979d68d9553ae34d284">VEC_OFFS</a>(<span class="keywordtype">int</span>, 8);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">#if defined(POOL_AVG) || defined(POOL_L2)</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#ab93c703745163416901d212560f435f1">SELECT_VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 8)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                cond_x = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(src_x &lt; 0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#ab93c703745163416901d212560f435f1">SELECT_VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 8));</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                src_x  = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>(src_x, (int8)0, (int8)(SRC_WIDTH - 1));</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 8)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                data0 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(<a class="code" href="nchw_2pooling__layer_8cl.xhtml#af6c2e106d0b5d1cb755bbc79d0b09d52">VLOAD_AND_CONVERT_TO_ACC_DATA_TYPE</a>(8, 0, (__global DATA_TYPE *)(src_addr + src_x.s0 * sizeof(DATA_TYPE) + y * src_stride_y)), (<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 8))0, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#abcadce1c5f0c9f446d1a72cac2421121">REVERSE</a>(cond_x, 8));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">#else  // defined(POOL_AVG) || defined(POOL_L2)</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                src_x = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>(src_x, 0, SRC_WIDTH - 1);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 8)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                data0               = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#af6c2e106d0b5d1cb755bbc79d0b09d52">VLOAD_AND_CONVERT_TO_ACC_DATA_TYPE</a>(8, 0, (__global DATA_TYPE *)(src_addr + src_x.s0 * sizeof(DATA_TYPE) + y * src_stride_y));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">#endif // defined(POOL_AVG) || defined(POOL_L2</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">#if defined(POOL_L2)</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="comment">// Raise to power of 2 for L2 Pooling</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                data0 *= data0;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                vdata = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(vdata, data0);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="comment">// Leftover</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keywordflow">for</span>(; x &lt; end_x; ++x)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordtype">int</span> src_x = x_coords + x;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">#if defined(POOL_AVG) || defined(POOL_L2)</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a9f6f7c0fb85ccb1d435727786fed952d">SELECT_DATA_TYPE</a>(ACC_DATA_TYPE)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                cond_x              = (src_x &lt; 0);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                src_x               = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>(src_x, 0, SRC_WIDTH - 1);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                ACC_DATA_TYPE data0 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>((ACC_DATA_TYPE)(*((__global DATA_TYPE *)(src_addr + src_x * <span class="keyword">sizeof</span>(DATA_TYPE) + y * src_stride_y))), (ACC_DATA_TYPE)0, cond_x);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">#else  // defined(POOL_AVG) || defined(POOL_L2)</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                src_x               = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>(src_x, 0, SRC_WIDTH - 1);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                ACC_DATA_TYPE data0 = (ACC_DATA_TYPE)(*((__global DATA_TYPE *)(src_addr + src_x * <span class="keyword">sizeof</span>(DATA_TYPE) + y * src_stride_y)));</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#endif // defined(POOL_AVG) || defined(POOL_L2)</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#if defined(POOL_L2)</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="comment">// Raise to power of 2 for L2 Pooling</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                data0 *= data0;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                sdata = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(sdata, data0);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// Reduce result</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 4)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    reduce4 = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(vdata.s0123, vdata.s4567);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(ACC_DATA_TYPE, 2)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    reduce2           = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(reduce4.s01, reduce4.s23);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    ACC_DATA_TYPE res = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(reduce2.s0, reduce2.s1);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    res               = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(res, sdata);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#if defined(POOL_AVG) || defined(POOL_L2)</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="comment">// Divide by pool region in case of average pooling</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    res = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a5db17889d824975fefb2ce2f4690637f">DIV_OP</a>(res, <a class="code" href="nchw_2pooling__layer_8cl.xhtml#ae9df7602479b001f6280f2f528f10a92">calculate_avg_scale</a>(POOL_SIZE_X, POOL_SIZE_Y, MAX_WIDTH, MAX_HEIGHT, PAD_X, PAD_Y, STRIDE_X, STRIDE_Y));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(POOL_AVG) || defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">#if defined(QUANTIZED)</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    DATA_TYPE result_q8 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a>(res, DATA_TYPE);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#if defined(OFFSET_IN1) &amp;&amp; defined(OFFSET_OUT) &amp;&amp; defined(SCALE_IN1) &amp;&amp; defined(SCALE_OUT)</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> result_f32   = convert_float(result_q8);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> input_offset = (float)OFFSET_IN1;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> input_scale  = (float)SCALE_IN1;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> scale_out    = (float)SCALE_OUT;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> offset_out   = (float)OFFSET_OUT;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> in_f32       = (result_f32 - input_offset) * input_scale;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> out_f32      = in_f32 / scale_out + offset_out;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    result_q8                = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a>(convert_int_rte(out_f32), DATA_TYPE);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(OFFSET_IN1) &amp;&amp; defined(OFFSET_OUT) &amp;&amp; defined(SCALE_IN1) &amp;&amp; defined(SCALE_OUT) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    *(__global DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + id0 * <span class="keyword">sizeof</span>(DATA_TYPE) + id1 * dst_stride_y + id2 * dst_stride_z) = result_q8;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor">#else // defined(QUANTIZED)</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#if defined(POOL_L2)</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Take square root of the result in L2 pooling</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    res = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#ac9af19bec38fe50b4b9585c0e5c0ccca">SQRT_OP</a>(res);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(POOL_L2) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    *(__global DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + id0 * <span class="keyword">sizeof</span>(DATA_TYPE) + id1 * dst_stride_y + id2 * dst_stride_z) = (DATA_TYPE)res;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">#endif // defined(QUANTIZED)</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#endif // defined(POOL_SIZE_X) &amp;&amp; defined(POOL_SIZE_Y)</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">/** Performs a MAX pooling of pool size equal to 2, and record max value indices for NCHW.</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> * @note Datatype must be passed using -DDATA_TYPE e.g. -DDATA_TYPE=half. Supported data types are F32</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> * @note Pool sizes must be passed using -DPOOL_SIZE_X and -DPOOL_SIZE_Y e.g. -DPOOL_SIZE_X=13;</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment"> * @note Tensors width and height must be passed at compile time using -DMAX_WIDTH and -DMAX_HEIGHT</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"> * @note Pool strides must be passed at compile time using -DSTRIDE_X and -DSTRIDE_Y which are the steps of the window along the x and y directions</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"> * @param[in]  src_ptr                               Pointer to the source tensor. Supported data types: F16/F32</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> * @param[in]  src_stride_x                          Stride of the source tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * @param[in]  src_step_x                            src_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * @param[in]  src_stride_y                          Stride of the source tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * @param[in]  src_step_y                            src_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * @param[in]  src_stride_z                          Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @param[in]  src_step_z                            src_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * @param[in]  src_offset_first_element_in_bytes     The offset of the first element in the source tensor</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * @param[out] dst_ptr                               Pointer to the destination tensor. Supported data types: same as @p src_ptr</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> * @param[in]  dst_stride_x                          Stride of the destination tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * @param[in]  dst_step_x                            dst_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> * @param[in]  dst_stride_y                          Stride of the destination tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> * @param[in]  dst_step_y                            dst_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> * @param[in]  dst_stride_z                          Stride of the source tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> * @param[in]  dst_step_z                            dst_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"> * @param[in]  dst_offset_first_element_in_bytes     The offset of the first element in the destination tensor</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment"> * @param[in]  indices_ptr                           Pointer to the indices tensor. Supported data types: U32</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"> * @param[in]  indices_stride_x                      Stride of the indices tensor in X dimension (in bytes)</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"> * @param[in]  indices_step_x                        indices_stride_x * number of elements along X processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"> * @param[in]  indices_stride_y                      Stride of the indices tensor in Y dimension (in bytes)</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"> * @param[in]  indices_step_y                        indices_stride_y * number of elements along Y processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment"> * @param[in]  indices_stride_z                      Stride of the indices tensor in Z dimension (in bytes)</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"> * @param[in]  indices_step_z                        indices_stride_z * number of elements along Z processed per workitem(in bytes)</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"> * @param[in]  indices_offset_first_element_in_bytes The offset of the first element in the indices tensor</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="nchw_2pooling__layer_8cl.xhtml#a6adfe5bdedd59399edc19cbaf9e15aec">  246</a></span>&#160;__kernel <span class="keywordtype">void</span> <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a6adfe5bdedd59399edc19cbaf9e15aec">pooling_layer_2_nchw_indices</a>(</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>),</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a>(indices))</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">int</span> id0 = get_global_id(0);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordtype">int</span> id1 = get_global_id(1);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordtype">int</span> id2 = get_global_id(2);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    int2 x_coords = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>((int2)((id0 * STRIDE_X) - PAD_X), (int2)0, (int2)(SRC_WIDTH - 1));</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    int2 y_coords = <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">clamp</a>((int2)((id1 * STRIDE_Y) - PAD_Y) + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#ac22ba2ef169d8979d68d9553ae34d284">VEC_OFFS</a>(<span class="keywordtype">int</span>, 2), (int2)0, (int2)(SRC_HEIGHT - 1));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    __global uchar *src_addr = src_ptr + src_offset_first_element_in_bytes + id2 * src_stride_z;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="comment">// Load data</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    data0 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(2)(0, (__global DATA_TYPE *)(src_addr + x_coords.s0 * <span class="keyword">sizeof</span>(DATA_TYPE) + y_coords.s0 * (int)src_stride_y));</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a>(DATA_TYPE, 2)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    data1 = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a>(2)(0, (__global DATA_TYPE *)(src_addr + x_coords.s1 * <span class="keyword">sizeof</span>(DATA_TYPE) + y_coords.s1 * (int)src_stride_y));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// Perform calculations</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    DATA_TYPE data0_max = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(data0.s0, data0.s1);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    DATA_TYPE data1_max = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(data1.s0, data1.s1);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    DATA_TYPE res       = <a class="code" href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a>(data0_max, data1_max);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    *(__global DATA_TYPE *)(dst_ptr + dst_offset_first_element_in_bytes + id0 * <span class="keyword">sizeof</span>(DATA_TYPE) + id1 * dst_stride_y + id2 * dst_stride_z) = res;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">#if defined(SRC_BATCH)</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    uint offset_top    = (x_coords.s0 + y_coords.s0 * SRC_WIDTH + id2 * (SRC_WIDTH * SRC_HEIGHT)) % SRC_BATCH;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    uint offset_bottom = offset_top + SRC_WIDTH;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    uint index0 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(offset_top + 1, offset_top, isgreaterequal(data0.s0, data0.s1));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    uint index1 = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(offset_bottom + 1, offset_bottom, isgreaterequal(data1.s0, data1.s1));</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    uint index  = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">select</a>(index1, index0, isgreaterequal(data0_max, data1_max));</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    *(__global uint *)(indices_ptr + indices_offset_first_element_in_bytes + id0 * <span class="keyword">sizeof</span>(uint) + id1 * indices_stride_y + id2 * indices_stride_z) = index;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">#endif // defined(SRC_BATCH)</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">}</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a23fb01b6f3453cc0e48a026fd44f6acd"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a23fb01b6f3453cc0e48a026fd44f6acd">CONVERT_SAT</a></div><div class="ttdeci">#define CONVERT_SAT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00770">helpers.h:770</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a9f6f7c0fb85ccb1d435727786fed952d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a9f6f7c0fb85ccb1d435727786fed952d">SELECT_DATA_TYPE</a></div><div class="ttdeci">#define SELECT_DATA_TYPE(type)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00788">helpers.h:788</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a36f754c05b6fddf6df0d8d0a74f8159f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a36f754c05b6fddf6df0d8d0a74f8159f">VEC_DATA_TYPE</a></div><div class="ttdeci">#define VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00764">helpers.h:764</a></div></div>
<div class="ttc" id="anchw_2pooling__layer_8cl_xhtml_a482ef7d59a5f474ca126e737c7f0978a"><div class="ttname"><a href="nchw_2pooling__layer_8cl.xhtml#a482ef7d59a5f474ca126e737c7f0978a">POOL_OP</a></div><div class="ttdeci">#define POOL_OP(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="nchw_2pooling__layer_8cl_source.xhtml#l00027">pooling_layer.cl:27</a></div></div>
<div class="ttc" id="anchw_2pooling__layer_8cl_xhtml_ae9df7602479b001f6280f2f528f10a92"><div class="ttname"><a href="nchw_2pooling__layer_8cl.xhtml#ae9df7602479b001f6280f2f528f10a92">calculate_avg_scale</a></div><div class="ttdeci">ACC_DATA_TYPE calculate_avg_scale(const int pool_size_x, const int pool_size_y, const int upper_bound_w, const int upper_bound_h, const int pad_x, const int pad_y, const int stride_x, const int stride_y)</div><div class="ttdef"><b>Definition:</b> <a href="nchw_2pooling__layer_8cl_source.xhtml#l00052">pooling_layer.cl:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a96efecf997f13a914609ddf1eb67f624"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">arm_compute::utility::clamp</a></div><div class="ttdeci">DataType clamp(const DataType &amp;n, const DataType &amp;lower=std::numeric_limits&lt; RangeType &gt;::lowest(), const DataType &amp;upper=std::numeric_limits&lt; RangeType &gt;::max())</div><div class="ttdoc">Performs clamping among a lower and upper value.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00102">Utility.h:102</a></div></div>
<div class="ttc" id="anchw_2pooling__layer_8cl_xhtml_a6adfe5bdedd59399edc19cbaf9e15aec"><div class="ttname"><a href="nchw_2pooling__layer_8cl.xhtml#a6adfe5bdedd59399edc19cbaf9e15aec">pooling_layer_2_nchw_indices</a></div><div class="ttdeci">__kernel void pooling_layer_2_nchw_indices(__global uchar *src_ptr, uint src_stride_x, uint src_step_x, uint src_stride_y, uint src_step_y, uint src_stride_z, uint src_step_z, uint src_offset_first_element_in_bytes, __global uchar *dst_ptr, uint dst_stride_x, uint dst_step_x, uint dst_stride_y, uint dst_step_y, uint dst_stride_z, uint dst_step_z, uint dst_offset_first_element_in_bytes, __global uchar *indices_ptr, uint indices_stride_x, uint indices_step_x, uint indices_stride_y, uint indices_step_y, uint indices_stride_z, uint indices_step_z, uint indices_offset_first_element_in_bytes)</div><div class="ttdoc">Performs a MAX pooling of pool size equal to 2, and record max value indices for NCHW.</div><div class="ttdef"><b>Definition:</b> <a href="nchw_2pooling__layer_8cl_source.xhtml#l00246">pooling_layer.cl:246</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a287e2fc366c312b468382c95bb90f91f"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a287e2fc366c312b468382c95bb90f91f">VLOAD</a></div><div class="ttdeci">#define VLOAD(size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00204">helpers.h:204</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a6b83038822d1ae7ab619b684ed3b7fc0"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a6b83038822d1ae7ab619b684ed3b7fc0">TENSOR3D_DECLARATION</a></div><div class="ttdeci">#define TENSOR3D_DECLARATION(name)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00852">helpers.h:852</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a0886942393a3ba0dfefaa7516b159784"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">arm_compute::test::validation::for</a></div><div class="ttdeci">for(size_t k=0;k&lt; _target.size();++k)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_unstack_8cpp_source.xhtml#l00091">Unstack.cpp:91</a></div></div>
<div class="ttc" id="anchw_2pooling__layer_8cl_xhtml_af6c2e106d0b5d1cb755bbc79d0b09d52"><div class="ttname"><a href="nchw_2pooling__layer_8cl.xhtml#af6c2e106d0b5d1cb755bbc79d0b09d52">VLOAD_AND_CONVERT_TO_ACC_DATA_TYPE</a></div><div class="ttdeci">#define VLOAD_AND_CONVERT_TO_ACC_DATA_TYPE(n, offset, ptr)</div><div class="ttdef"><b>Definition:</b> <a href="nchw_2pooling__layer_8cl_source.xhtml#l00049">pooling_layer.cl:49</a></div></div>
<div class="ttc" id="anchw_2pooling__layer_8cl_xhtml_a5db17889d824975fefb2ce2f4690637f"><div class="ttname"><a href="nchw_2pooling__layer_8cl.xhtml#a5db17889d824975fefb2ce2f4690637f">DIV_OP</a></div><div class="ttdeci">#define DIV_OP(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="nchw_2pooling__layer_8cl_source.xhtml#l00042">pooling_layer.cl:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a27e22718d532b621774aca14ce8b1101"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a27e22718d532b621774aca14ce8b1101">arm_compute::test::validation::reference::select</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; select(const SimpleTensor&lt; uint8_t &gt; &amp;c, const SimpleTensor&lt; T &gt; &amp;x, const SimpleTensor&lt; T &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="reference_2_select_8cpp_source.xhtml#l00038">Select.cpp:38</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_aa8d95ba04fc73845abc6045952cae5be"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#aa8d95ba04fc73845abc6045952cae5be">CONVERT</a></div><div class="ttdeci">#define CONVERT(x, type)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00767">helpers.h:767</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_abcadce1c5f0c9f446d1a72cac2421121"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#abcadce1c5f0c9f446d1a72cac2421121">REVERSE</a></div><div class="ttdeci">#define REVERSE(x, s)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00102">helpers.h:102</a></div></div>
<div class="ttc" id="anchw_2pooling__layer_8cl_xhtml_ac9af19bec38fe50b4b9585c0e5c0ccca"><div class="ttname"><a href="nchw_2pooling__layer_8cl.xhtml#ac9af19bec38fe50b4b9585c0e5c0ccca">SQRT_OP</a></div><div class="ttdeci">#define SQRT_OP(x)</div><div class="ttdef"><b>Definition:</b> <a href="nchw_2pooling__layer_8cl_source.xhtml#l00043">pooling_layer.cl:43</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_ab93c703745163416901d212560f435f1"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#ab93c703745163416901d212560f435f1">SELECT_VEC_DATA_TYPE</a></div><div class="ttdeci">#define SELECT_VEC_DATA_TYPE(type, size)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00787">helpers.h:787</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml">helpers.h</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_ac22ba2ef169d8979d68d9553ae34d284"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#ac22ba2ef169d8979d68d9553ae34d284">VEC_OFFS</a></div><div class="ttdeci">#define VEC_OFFS(dt, s)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l00200">helpers.h:200</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="dir_25885286e9dad4fa105b7b25a8031bbf.xhtml">cl_kernels</a></li><li class="navelem"><a class="el" href="dir_1ccb7f4a7e52306ff18714d5cd53d367.xhtml">nchw</a></li><li class="navelem"><a class="el" href="nchw_2pooling__layer_8cl.xhtml">pooling_layer.cl</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:53:53 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
