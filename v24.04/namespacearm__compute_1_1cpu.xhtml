<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::cpu Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">24.04</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__compute_1_1cpu.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::cpu Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu_1_1kernel"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernel.xhtml">kernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__compute_1_1cpu_1_1kernels"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml">kernels</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1_act_fp_impl_params.xhtml">ActFpImplParams</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant parameters needed by the activation implementation.  <a href="structarm__compute_1_1cpu_1_1_act_fp_impl_params.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml">AsmGemmInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml">CpuActivation</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_activation_kernel.xhtml">kernels::CpuActivationKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_activation.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_add.xhtml">CpuAdd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_kernel.xhtml">kernels::CpuAddKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_add.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_add_mul_add.xhtml">CpuAddMulAdd</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_add_mul_add_kernel.xhtml">kernels::CpuAddMulAddKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_add_mul_add.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml">CpuAuxTensorHandler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> handler to wrap and handle tensor allocations on workspace buffers.  <a href="classarm__compute_1_1cpu_1_1_cpu_aux_tensor_handler.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1_cpu_capabilities.xhtml">CpuCapabilities</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure that encodes the CPU capabilities to be used.  <a href="structarm__compute_1_1cpu_1_1_cpu_capabilities.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_cast.xhtml">CpuCast</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_cast_kernel.xhtml">kernels::CpuCastKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_cast.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_complex_mul.xhtml">CpuComplexMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_complex_mul_kernel.xhtml">kernels::CpuComplexMulKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_complex_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_concatenate.xhtml">CpuConcatenate</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute concatenate tensors along a given axis.  <a href="classarm__compute_1_1cpu_1_1_cpu_concatenate.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_context.xhtml">CpuContext</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU context implementation class.  <a href="classarm__compute_1_1cpu_1_1_cpu_context.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_conv2d.xhtml">CpuConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a convolution layer.  <a href="classarm__compute_1_1cpu_1_1_cpu_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_convert_fully_connected_weights.xhtml">CpuConvertFullyConnectedWeights</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_convert_fully_connected_weights_kernel.xhtml">kernels::CpuConvertFullyConnectedWeightsKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_convert_fully_connected_weights.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_copy.xhtml">CpuCopy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_copy_kernel.xhtml">kernels::CpuCopyKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_copy.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d.xhtml">CpuDepthwiseConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to execute a depthwise convolution.  <a href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d_assembly_dispatch.xhtml">CpuDepthwiseConv2dAssemblyDispatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Depthwise convolution assembly kernel glue.  <a href="classarm__compute_1_1cpu_1_1_cpu_depthwise_conv2d_assembly_dispatch.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_dequantize.xhtml">CpuDequantize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_dequantize_kernel.xhtml">kernels::CpuDequantizeKernel</a> that dequantizes an input tensor.  <a href="classarm__compute_1_1cpu_1_1_cpu_dequantize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_direct_conv2d.xhtml">CpuDirectConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run the direct convolution.  <a href="classarm__compute_1_1cpu_1_1_cpu_direct_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_direct_conv3d.xhtml">CpuDirectConv3d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to run the direct convolution.  <a href="classarm__compute_1_1cpu_1_1_cpu_direct_conv3d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for division and power.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_base.xhtml">CpuElementwiseBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml">CpuElementwiseComparison</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_comparison_kernel.xhtml">cpu::kernels::CpuComparisonKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_comparison_kernel.xhtml">cpu::kernels::CpuComparisonKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml">CpuElementwiseDivision</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for division.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_division.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml">CpuElementwisePower</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> for power.  <a href="classarm__compute_1_1cpu_1_1_cpu_elementwise_power.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_unary.xhtml">CpuElementwiseUnary</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fill.xhtml">CpuFill</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_fill_kernel.xhtml">kernels::CpuFillKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_fill.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_flatten.xhtml">CpuFlatten</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to flatten a given input.  <a href="classarm__compute_1_1cpu_1_1_cpu_flatten.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_floor.xhtml">CpuFloor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_floor_kernel.xhtml">kernels::CpuFloorKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_floor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml">CpuFullyConnected</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a Fully Connected layer.  <a href="classarm__compute_1_1cpu_1_1_cpu_fully_connected.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml">CpuGemm</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMM.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml">CpuGemmAssemblyDispatch</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assembly kernel glue.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_conv2d.xhtml">CpuGemmConv2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute the convolution layer.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_conv2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_direct_conv2d.xhtml">CpuGemmDirectConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_matrix_multiply_core.xhtml">CpuGemmLowpMatrixMultiplyCore</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMMLowpMatrixMultiplyCore.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_matrix_multiply_core.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_output_stage.xhtml">CpuGemmLowpOutputStage</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to execute GEMMLowpQuantizeDown kernels.  <a href="classarm__compute_1_1cpu_1_1_cpu_gemm_lowp_output_stage.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_mat_mul.xhtml">CpuMatMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to execute MatMul Operation.  <a href="classarm__compute_1_1cpu_1_1_cpu_mat_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_max_unpooling.xhtml">CpuMaxUnpooling</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_max_unpooling_layer_kernel.xhtml">kernels::CpuMaxUnpoolingLayerKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_max_unpooling.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_mul.xhtml">CpuMul</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_mul_kernel.xhtml">kernels::CpuMulKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_mul.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml">CpuPermute</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_permute_kernel.xhtml">kernels::CpuPermuteKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_permute.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_pool2d.xhtml">CpuPool2d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a pooling layer with the specified pooling operation.  <a href="classarm__compute_1_1cpu_1_1_cpu_pool2d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_pool3d.xhtml">CpuPool3d</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to simulate a pooling layer with the specified pooling operation.  <a href="classarm__compute_1_1cpu_1_1_cpu_pool3d.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_quantize.xhtml">CpuQuantize</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_quantize_kernel.xhtml">kernels::CpuQuantizeKernel</a> that dequantizes an input tensor.  <a href="classarm__compute_1_1cpu_1_1_cpu_quantize.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_queue.xhtml">CpuQueue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU queue implementation class.  <a href="classarm__compute_1_1cpu_1_1_cpu_queue.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_reshape.xhtml">CpuReshape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_reshape_kernel.xhtml">kernels::CpuReshapeKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_reshape.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_scale.xhtml">CpuScale</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute Scale.  <a href="classarm__compute_1_1cpu_1_1_cpu_scale.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml">CpuSoftmaxGeneric</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to compute a SoftmaxLayer and a Log SoftmaxLayer.  <a href="classarm__compute_1_1cpu_1_1_cpu_softmax_generic.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_sub.xhtml">CpuSub</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_sub_kernel.xhtml">kernels::CpuSubKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_sub.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_tensor.xhtml">CpuTensor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">CPU tensor implementation class.  <a href="classarm__compute_1_1cpu_1_1_cpu_tensor.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_transpose.xhtml">CpuTranspose</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_transpose_kernel.xhtml">kernels::CpuTransposeKernel</a>.  <a href="classarm__compute_1_1cpu_1_1_cpu_transpose.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d.xhtml">CpuWinogradConv2d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_input_kernel.xhtml">CpuWinogradConv2dTransformInputKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_cpu_winograd_conv2d_transform_output_kernel.xhtml">CpuWinogradConv2dTransformOutputKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__compute_1_1cpu_1_1_depthwise_convolution_run_info.xhtml">DepthwiseConvolutionRunInfo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1cpu_1_1_i_cpu_kernel.xhtml">ICpuKernel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a186f98d6356749c10297655b3b05f70c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a186f98d6356749c10297655b3b05f70c">ICpuOperator</a> = <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">experimental::INEOperator</a></td></tr>
<tr class="separator:a186f98d6356749c10297655b3b05f70c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb6ece39851b42c09fe28c2ab0b27adf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adb6ece39851b42c09fe28c2ab0b27adf">CpuElementwiseMax</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt;</td></tr>
<tr class="memdesc:adb6ece39851b42c09fe28c2ab0b27adf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for maximum operation.  <a href="namespacearm__compute_1_1cpu.xhtml#adb6ece39851b42c09fe28c2ab0b27adf">More...</a><br /></td></tr>
<tr class="separator:adb6ece39851b42c09fe28c2ab0b27adf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbd129adc090ebe5de9f015531e4c7cf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adbd129adc090ebe5de9f015531e4c7cf">CpuElementwiseMin</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt;</td></tr>
<tr class="memdesc:adbd129adc090ebe5de9f015531e4c7cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for minimum operation.  <a href="namespacearm__compute_1_1cpu.xhtml#adbd129adc090ebe5de9f015531e4c7cf">More...</a><br /></td></tr>
<tr class="separator:adbd129adc090ebe5de9f015531e4c7cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e9db85fa6787c18e9bccc8a45c206f9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e9db85fa6787c18e9bccc8a45c206f9">CpuElementwiseSquaredDiff</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt;</td></tr>
<tr class="memdesc:a8e9db85fa6787c18e9bccc8a45c206f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for squared difference operation.  <a href="namespacearm__compute_1_1cpu.xhtml#a8e9db85fa6787c18e9bccc8a45c206f9">More...</a><br /></td></tr>
<tr class="separator:a8e9db85fa6787c18e9bccc8a45c206f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0a37b068450a7e7c63b0bf5d65dbf0e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa0a37b068450a7e7c63b0bf5d65dbf0e">NEEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt;</td></tr>
<tr class="memdesc:aa0a37b068450a7e7c63b0bf5d65dbf0e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run equal comparison.  <a href="namespacearm__compute_1_1cpu.xhtml#aa0a37b068450a7e7c63b0bf5d65dbf0e">More...</a><br /></td></tr>
<tr class="separator:aa0a37b068450a7e7c63b0bf5d65dbf0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fa32460d63a4499680df2b5933ea01f"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3fa32460d63a4499680df2b5933ea01f">NENotEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt;</td></tr>
<tr class="memdesc:a3fa32460d63a4499680df2b5933ea01f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run not equal comparison.  <a href="namespacearm__compute_1_1cpu.xhtml#a3fa32460d63a4499680df2b5933ea01f">More...</a><br /></td></tr>
<tr class="separator:a3fa32460d63a4499680df2b5933ea01f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb9428c08ab9b91d102ca6269364eda9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb9428c08ab9b91d102ca6269364eda9">NEGreater</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt;</td></tr>
<tr class="memdesc:acb9428c08ab9b91d102ca6269364eda9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater comparison.  <a href="namespacearm__compute_1_1cpu.xhtml#acb9428c08ab9b91d102ca6269364eda9">More...</a><br /></td></tr>
<tr class="separator:acb9428c08ab9b91d102ca6269364eda9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a308bbf4b2dd91df7ce97f856f62865a0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a308bbf4b2dd91df7ce97f856f62865a0">NEGreaterEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt;</td></tr>
<tr class="memdesc:a308bbf4b2dd91df7ce97f856f62865a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run greater-equal comparison.  <a href="namespacearm__compute_1_1cpu.xhtml#a308bbf4b2dd91df7ce97f856f62865a0">More...</a><br /></td></tr>
<tr class="separator:a308bbf4b2dd91df7ce97f856f62865a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a242490d7db27c65f3dd63bd2fe55d7f6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a242490d7db27c65f3dd63bd2fe55d7f6">NELess</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt;</td></tr>
<tr class="memdesc:a242490d7db27c65f3dd63bd2fe55d7f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less comparison.  <a href="namespacearm__compute_1_1cpu.xhtml#a242490d7db27c65f3dd63bd2fe55d7f6">More...</a><br /></td></tr>
<tr class="separator:a242490d7db27c65f3dd63bd2fe55d7f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a21c9cce9003a875ff3163bf7752abe"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a21c9cce9003a875ff3163bf7752abe">NELessEqual</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt;</td></tr>
<tr class="memdesc:a6a21c9cce9003a875ff3163bf7752abe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Basic function to run less-equal comparison.  <a href="namespacearm__compute_1_1cpu.xhtml#a6a21c9cce9003a875ff3163bf7752abe">More...</a><br /></td></tr>
<tr class="separator:a6a21c9cce9003a875ff3163bf7752abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac628ee7e5c3f38368a66f11582fe377e"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac628ee7e5c3f38368a66f11582fe377e">KernelType</a> = <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml">kernels::CpuElementwiseUnaryKernel</a></td></tr>
<tr class="separator:ac628ee7e5c3f38368a66f11582fe377e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2f4c203980958815b7fdf27f08cb3a5"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af2f4c203980958815b7fdf27f08cb3a5">CpuPRelu</a> = <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt;</td></tr>
<tr class="memdesc:af2f4c203980958815b7fdf27f08cb3a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for PRelu operation.  <a href="namespacearm__compute_1_1cpu.xhtml#af2f4c203980958815b7fdf27f08cb3a5">More...</a><br /></td></tr>
<tr class="separator:af2f4c203980958815b7fdf27f08cb3a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:afa3ebf7e0ea95c0c9cadb30c62bad67a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67a">KernelSelectionType</a> { <a class="el" href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67aaa054ccb4ff684c73cbc2d272d45e32df">Preferred</a>, 
<a class="el" href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67aaeaa4dc5078017a5c5bebf383ab6f5124">Supported</a>
 }</td></tr>
<tr class="separator:afa3ebf7e0ea95c0c9cadb30c62bad67a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c378cf8ee66b2333bdf4868eeba2710"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710">AsmConvMethod</a> { <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34">Im2Col</a>, 
<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">Indirect</a>, 
<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">Conv</a>
 }</td></tr>
<tr class="separator:a3c378cf8ee66b2333bdf4868eeba2710"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:aa64c9a243c1b8d4a5bb9cfa0c69d9c64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa64c9a243c1b8d4a5bb9cfa0c69d9c64">fp16_neon_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa64c9a243c1b8d4a5bb9cfa0c69d9c64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b5a907c9f3c15c309f9c538a4bd08c4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2b5a907c9f3c15c309f9c538a4bd08c4">fp16_sve_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2b5a907c9f3c15c309f9c538a4bd08c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97667081943a6baea73dd6c7957a34fa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a97667081943a6baea73dd6c7957a34fa">fp32_neon_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a97667081943a6baea73dd6c7957a34fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fc7ff87cd5070e32f7bd2a4bef72f0f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1fc7ff87cd5070e32f7bd2a4bef72f0f">fp32_sve_batch_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1fc7ff87cd5070e32f7bd2a4bef72f0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a2f6a7115885dea466b90572061d47e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9a2f6a7115885dea466b90572061d47e">fp16_batch_normalization_nchw_non_fused</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:a9a2f6a7115885dea466b90572061d47e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4447e4458da4aaeca9c8fd8de9788166"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4447e4458da4aaeca9c8fd8de9788166">fp32_batch_normalization_nchw_non_fused</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:a4447e4458da4aaeca9c8fd8de9788166"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28ba9aa86f0eea79bf10367a11fa099f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a28ba9aa86f0eea79bf10367a11fa099f">fp16_batch_normalization_nchw_non_fused_relu</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:a28ba9aa86f0eea79bf10367a11fa099f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9964de6f96b7f2e105a333cf2b1559bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9964de6f96b7f2e105a333cf2b1559bf">fp16_batch_normalization_nchw_non_fused_brelu</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:a9964de6f96b7f2e105a333cf2b1559bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6822ade25c2f5ea275f9d01bbf8584e5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6822ade25c2f5ea275f9d01bbf8584e5">fp16_batch_normalization_nchw_non_fused_lubrelu</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:a6822ade25c2f5ea275f9d01bbf8584e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51580bd8678045961052c0afb776dbbf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a51580bd8678045961052c0afb776dbbf">fp32_batch_normalization_nchw_non_fused_relu</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:a51580bd8678045961052c0afb776dbbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a3eabce968b87d10bf818471328d616"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3a3eabce968b87d10bf818471328d616">fp32_batch_normalization_nchw_non_fused_brelu</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:a3a3eabce968b87d10bf818471328d616"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae120c218f665b6535e9b2c0c5084ac39"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae120c218f665b6535e9b2c0c5084ac39">fp32_batch_normalization_nchw_non_fused_lubrelu</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:ae120c218f665b6535e9b2c0c5084ac39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37b6e9241ddcff7dee741037b2ebeb95"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a37b6e9241ddcff7dee741037b2ebeb95">neon_fp32_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a37b6e9241ddcff7dee741037b2ebeb95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ccc771afb5f199744c317c23279e378"><td class="memItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1ccc771afb5f199744c317c23279e378">mask_float_vector</a> (const float32x4_t &amp;in, const uint32x4_t &amp;mask)</td></tr>
<tr class="separator:a1ccc771afb5f199744c317c23279e378"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f12d1ad25f1b07f7c058c9608d53e93"><td class="memTemplParams" colspan="2">template&lt;typename T , const ActFpImplParams &amp; P&gt; </td></tr>
<tr class="memitem:a0f12d1ad25f1b07f7c058c9608d53e93"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0f12d1ad25f1b07f7c058c9608d53e93">fp_neon_activation_impl</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0f12d1ad25f1b07f7c058c9608d53e93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd810229385586c08de20cf832eac6b4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afd810229385586c08de20cf832eac6b4">neon_qasymm8_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afd810229385586c08de20cf832eac6b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0964146baaed5ec1b37f112e6f5d30c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa0964146baaed5ec1b37f112e6f5d30c">neon_qasymm8_signed_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa0964146baaed5ec1b37f112e6f5d30c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9d98dcdc80fe0cd05822b4c4464e895"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad9d98dcdc80fe0cd05822b4c4464e895">neon_qsymm16_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad9d98dcdc80fe0cd05822b4c4464e895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab01d09b8c1aea6b452dfebb7db046577"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab01d09b8c1aea6b452dfebb7db046577">sve_fp32_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab01d09b8c1aea6b452dfebb7db046577"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a874c4d85f1abc927406b1c4d6f80b46e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a874c4d85f1abc927406b1c4d6f80b46e">sve2_qasymm8_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a874c4d85f1abc927406b1c4d6f80b46e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbe60f4e3af40412c448c9fb6f202cd3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbe60f4e3af40412c448c9fb6f202cd3">sve2_qasymm8_signed_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abbe60f4e3af40412c448c9fb6f202cd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab063d1141474a9c7a4de6dcd4de1f99a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab063d1141474a9c7a4de6dcd4de1f99a">sve2_qsymm16_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab063d1141474a9c7a4de6dcd4de1f99a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a7f7d38e4ee6c869712f00389058605"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5a7f7d38e4ee6c869712f00389058605">sve2_q8_activation_lut</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5a7f7d38e4ee6c869712f00389058605"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6474bcd414bfe7b2450dd6578099c4c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6474bcd414bfe7b2450dd6578099c4c9">sve_fp16_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6474bcd414bfe7b2450dd6578099c4c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15366b69756528ef0aa3070728aeae7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a15366b69756528ef0aa3070728aeae7f">sve_fp16_activation_lut</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a15366b69756528ef0aa3070728aeae7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8452dbdcf57cf54556fa29f801960d1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad8452dbdcf57cf54556fa29f801960d1">neon_fp16_activation</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad8452dbdcf57cf54556fa29f801960d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2c124680c75e5d3fe454ef5caefd5ae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad2c124680c75e5d3fe454ef5caefd5ae">add_fp32_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad2c124680c75e5d3fe454ef5caefd5ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf3f09a8f78441a9d5899398238e4e6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adcf3f09a8f78441a9d5899398238e4e6">sub_q8_neon_fixedpoint_possible</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst)</td></tr>
<tr class="separator:adcf3f09a8f78441a9d5899398238e4e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d12d4b685a01367a23a1e201300e06b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5d12d4b685a01367a23a1e201300e06b">add_q8_neon_fixedpoint_possible</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst)</td></tr>
<tr class="separator:a5d12d4b685a01367a23a1e201300e06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6584a40cba8021fe443986524b98319b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">add_sub_q8_neon_fixedpoint_possible</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *src1, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *dst, bool is_addition)</td></tr>
<tr class="separator:a6584a40cba8021fe443986524b98319b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c5290cc7856ef99db64d9a6b475dba2"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a4c5290cc7856ef99db64d9a6b475dba2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c5290cc7856ef99db64d9a6b475dba2">add_q8_neon_fixedpoint</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4c5290cc7856ef99db64d9a6b475dba2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a400fdac6bb36c02b9bf3ab5936a3fbd1"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a400fdac6bb36c02b9bf3ab5936a3fbd1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a400fdac6bb36c02b9bf3ab5936a3fbd1">add_sub_q8_neon_fixedpoint</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool is_addition)</td></tr>
<tr class="separator:a400fdac6bb36c02b9bf3ab5936a3fbd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a990ee09727a5f2205afa13a59576e98d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">add_sub_qasymm8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool is_addition)</td></tr>
<tr class="separator:a990ee09727a5f2205afa13a59576e98d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4555abacb6f1b8d4510a0c38b2675778"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">add_sub_qasymm8_signed_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool is_addition)</td></tr>
<tr class="separator:a4555abacb6f1b8d4510a0c38b2675778"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5ab9358391aa54ff6cd6934a6cfc6b2"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af5ab9358391aa54ff6cd6934a6cfc6b2">add_q8_neon_fixedpoint&lt; int8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af5ab9358391aa54ff6cd6934a6cfc6b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfd7331f875669695cb9af58b5921275"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abfd7331f875669695cb9af58b5921275">add_q8_neon_fixedpoint&lt; uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abfd7331f875669695cb9af58b5921275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a8774284dc5c784b77e14670087e590"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9a8774284dc5c784b77e14670087e590">add_sub_q8_neon_fixedpoint&lt; int8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool is_addition)</td></tr>
<tr class="separator:a9a8774284dc5c784b77e14670087e590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d36ee278add50c2b9f29cc6746206f1"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2d36ee278add50c2b9f29cc6746206f1">add_sub_q8_neon_fixedpoint&lt; uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool is_addition)</td></tr>
<tr class="separator:a2d36ee278add50c2b9f29cc6746206f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21e96f6030e02320e0f48039837f94b"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:aa21e96f6030e02320e0f48039837f94b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa21e96f6030e02320e0f48039837f94b">add_same_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa21e96f6030e02320e0f48039837f94b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a006257e7774d270fdcb973d831c601bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a006257e7774d270fdcb973d831c601bc">add_u8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a006257e7774d270fdcb973d831c601bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05ce4a57b547b092a04dd9f1ce597fa6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05ce4a57b547b092a04dd9f1ce597fa6">add_s16_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a05ce4a57b547b092a04dd9f1ce597fa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a164fbc92bcd9d8dd343cc1e364498a24"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a164fbc92bcd9d8dd343cc1e364498a24">add_s32_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a164fbc92bcd9d8dd343cc1e364498a24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61432523ea69cfc30a1aece3b93e6207"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a61432523ea69cfc30a1aece3b93e6207">add_qasymm8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a61432523ea69cfc30a1aece3b93e6207"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cdb8e82259a848a08aecc1ff53999d6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9cdb8e82259a848a08aecc1ff53999d6">add_qasymm8_signed_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9cdb8e82259a848a08aecc1ff53999d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad37c71a18fef7a166093eadde4d314a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad37c71a18fef7a166093eadde4d314a3">add_qsymm16_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad37c71a18fef7a166093eadde4d314a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2ab2fb878bb198cd6104e1d0dff8043"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa2ab2fb878bb198cd6104e1d0dff8043">add_fp32_sve</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa2ab2fb878bb198cd6104e1d0dff8043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac689517877e4c549a4e209c6f4071d1c"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:ac689517877e4c549a4e209c6f4071d1c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac689517877e4c549a4e209c6f4071d1c">add_same_sve</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac689517877e4c549a4e209c6f4071d1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a855955a410dcb97226318ba9c64fee78"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a855955a410dcb97226318ba9c64fee78">add_same_sve&lt; float &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a855955a410dcb97226318ba9c64fee78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfd6ff1ff8b79f594df25d64404e7590"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abfd6ff1ff8b79f594df25d64404e7590">add_same_sve&lt; uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abfd6ff1ff8b79f594df25d64404e7590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c36ad549e97f081b9424caaa9bc8272"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1c36ad549e97f081b9424caaa9bc8272">add_same_sve&lt; int16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1c36ad549e97f081b9424caaa9bc8272"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dae474260c001eee4ea5a8f03699e92"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3dae474260c001eee4ea5a8f03699e92">add_same_sve&lt; int32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3dae474260c001eee4ea5a8f03699e92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5f84c839b4b2635aca4223fd962d79"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adc5f84c839b4b2635aca4223fd962d79">add_u8_sve</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:adc5f84c839b4b2635aca4223fd962d79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81008dcf18ba115cfb93b68a31936189"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a81008dcf18ba115cfb93b68a31936189">add_s16_sve</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a81008dcf18ba115cfb93b68a31936189"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85af451c597b6e1079495f7689108336"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a85af451c597b6e1079495f7689108336">add_s32_sve</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a85af451c597b6e1079495f7689108336"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d11c1d054cf7db7b82fcba880a823f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a87d11c1d054cf7db7b82fcba880a823f">add_qasymm8_sve2</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a87d11c1d054cf7db7b82fcba880a823f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0fea5772fee23340f22a003c85e7829"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab0fea5772fee23340f22a003c85e7829">add_qasymm8_signed_sve2</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab0fea5772fee23340f22a003c85e7829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3860d0e40530102ca0f9b72aab835a3e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3860d0e40530102ca0f9b72aab835a3e">add_qsymm16_sve2</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3860d0e40530102ca0f9b72aab835a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c61fd97af6b1dd6934c54f6c605a35e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c61fd97af6b1dd6934c54f6c605a35e">add_fp16_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3c61fd97af6b1dd6934c54f6c605a35e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8619f36d58f8afe49148c4a85446b17"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8619f36d58f8afe49148c4a85446b17">add_fp16_sve</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af8619f36d58f8afe49148c4a85446b17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae5e85ddf5333a19e6d815e4acf7cf61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aae5e85ddf5333a19e6d815e4acf7cf61">add_mul_add_fp32_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mul, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_add, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *add_output, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *final_output, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aae5e85ddf5333a19e6d815e4acf7cf61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cdc9cbc3be2c3a505a4135e4fe53c4c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8cdc9cbc3be2c3a505a4135e4fe53c4c">add_mul_add_fp16_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mul, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_add, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *add_output, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *final_output, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8cdc9cbc3be2c3a505a4135e4fe53c4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa88b701deaf0108727d8c20a2c52bcc2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa88b701deaf0108727d8c20a2c52bcc2">add_mul_add_u8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mul, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_add, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *add_output, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *final_output, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa88b701deaf0108727d8c20a2c52bcc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d1e7b520dd6baea223dd51054d21321"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5d1e7b520dd6baea223dd51054d21321">add_mul_add_s8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input2, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mul, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_add, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *add_output, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *final_output, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> policy, const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;act_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5d1e7b520dd6baea223dd51054d21321"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95887d3e821902663e2d364ec0b71fa8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a95887d3e821902663e2d364ec0b71fa8">neon_fp32_boundingboxtransform</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *boxes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *pred_boxes, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *deltas, <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> bbinfo, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a95887d3e821902663e2d364ec0b71fa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea3a0fb40df47ae7c0b421618d4e35e6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aea3a0fb40df47ae7c0b421618d4e35e6">bounding_box_transform_qsymm16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *boxes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *pred_boxes, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *deltas, <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> bbinfo, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aea3a0fb40df47ae7c0b421618d4e35e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e47985453d09e1a0724c18b0edd789a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9e47985453d09e1a0724c18b0edd789a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9e47985453d09e1a0724c18b0edd789a">bounding_box_transform</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *boxes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *pred_boxes, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *deltas, <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> bbinfo, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9e47985453d09e1a0724c18b0edd789a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4805585e3b72dbae02d2a7dd600860ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4805585e3b72dbae02d2a7dd600860ec">neon_qu16_boundingboxtransform</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *boxes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *pred_boxes, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *deltas, <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> bbinfo, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4805585e3b72dbae02d2a7dd600860ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55fa9349268bc4dc8069e7d9b24405da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a55fa9349268bc4dc8069e7d9b24405da">neon_fp16_boundingboxtransform</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *boxes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *pred_boxes, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *deltas, <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> bbinfo, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a55fa9349268bc4dc8069e7d9b24405da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ece6e755aaa7215d7e4d3dee0d0a216"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0ece6e755aaa7215d7e4d3dee0d0a216">neon_fp32_to_fp16_cast</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_dst, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0ece6e755aaa7215d7e4d3dee0d0a216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f4d18132606a90cb885b83ae53bed1a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3f4d18132606a90cb885b83ae53bed1a">neon_u8_to_fp16_cast</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_dst, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3f4d18132606a90cb885b83ae53bed1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac34d8d43a81990da4c1f5f6c8c21081e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac34d8d43a81990da4c1f5f6c8c21081e">neon_fp16_to_other_dt_cast</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_dst, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac34d8d43a81990da4c1f5f6c8c21081e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0a19bad967040b76b3356cf5cd43497"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad0a19bad967040b76b3356cf5cd43497">neon_s32_to_fp16_cast</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_dst, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad0a19bad967040b76b3356cf5cd43497"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad23b9b4c1dd4bcb03d6894e878e64fd2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad23b9b4c1dd4bcb03d6894e878e64fd2">neon_qasymm8_signed_to_fp16_cast</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_dst, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad23b9b4c1dd4bcb03d6894e878e64fd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa204f8fbfe2d4f9f3310e3034f23b3e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa204f8fbfe2d4f9f3310e3034f23b3e8">neon_fp32_to_bfloat16_cast</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_dst, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa204f8fbfe2d4f9f3310e3034f23b3e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6cd1a0f739089b9e26caaf5091b666e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab6cd1a0f739089b9e26caaf5091b666e">neon_bfloat16_to_fp32_cast</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *_dst, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;<a class="el" href="_cl_workload_runtime_8cpp.xhtml#a5555e1497e9b84ade322d8ad8b503598">tensor</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> _policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab6cd1a0f739089b9e26caaf5091b666e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb624fed36c03d8e2aed044647a36900"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afb624fed36c03d8e2aed044647a36900"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afb624fed36c03d8e2aed044647a36900">directconv3d_float_neon_ndhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afb624fed36c03d8e2aed044647a36900"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5332a2bdbe6989559614f8baff0b0df4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5332a2bdbe6989559614f8baff0b0df4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5332a2bdbe6989559614f8baff0b0df4">directconv3d_quantized_neon_ndhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;conv_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5332a2bdbe6989559614f8baff0b0df4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3be09105863ab9faa320e7c0c253071"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad3be09105863ab9faa320e7c0c253071"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad3be09105863ab9faa320e7c0c253071">load_as_f32</a> (T *ptr)</td></tr>
<tr class="separator:ad3be09105863ab9faa320e7c0c253071"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05f81d14dacef28ba48fa56aa7de043f"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a05f81d14dacef28ba48fa56aa7de043f"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05f81d14dacef28ba48fa56aa7de043f">load_as_f32</a> (float *ptr)</td></tr>
<tr class="separator:a05f81d14dacef28ba48fa56aa7de043f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadaf3e96ea2acc499810b09aa5488f8e"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:aadaf3e96ea2acc499810b09aa5488f8e"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aadaf3e96ea2acc499810b09aa5488f8e">load_as_f32</a> (int32_t *ptr)</td></tr>
<tr class="separator:aadaf3e96ea2acc499810b09aa5488f8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d433a967e930c8961bc23d5ef95a214"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a5d433a967e930c8961bc23d5ef95a214"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5d433a967e930c8961bc23d5ef95a214">load_as_f32</a> (uint32_t *ptr)</td></tr>
<tr class="separator:a5d433a967e930c8961bc23d5ef95a214"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fa7bab8730a3115ff070414b5841361"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a1fa7bab8730a3115ff070414b5841361"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1fa7bab8730a3115ff070414b5841361">load_as_f32</a> (int16_t *ptr)</td></tr>
<tr class="separator:a1fa7bab8730a3115ff070414b5841361"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0fcdcdbfa9f41960d9419ea37d430df"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:aa0fcdcdbfa9f41960d9419ea37d430df"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa0fcdcdbfa9f41960d9419ea37d430df">load_as_f32</a> (uint16_t *ptr)</td></tr>
<tr class="separator:aa0fcdcdbfa9f41960d9419ea37d430df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d403f9cb2551b9eaf994188f46fb38f"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a9d403f9cb2551b9eaf994188f46fb38f"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9d403f9cb2551b9eaf994188f46fb38f">load_as_f32</a> (uint8_t *ptr)</td></tr>
<tr class="separator:a9d403f9cb2551b9eaf994188f46fb38f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3aa8003f658c620589d1fb3a446ac582"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3aa8003f658c620589d1fb3a446ac582">fp32_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:a3aa8003f658c620589d1fb3a446ac582"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eee3d782c8d385143bd5991559ae039"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8eee3d782c8d385143bd5991559ae039"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8eee3d782c8d385143bd5991559ae039">in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:a8eee3d782c8d385143bd5991559ae039"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86c41bd6f17806079552ebacf486f743"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a86c41bd6f17806079552ebacf486f743">u8_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:a86c41bd6f17806079552ebacf486f743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4bce17f1ab84502a7264aa6ee9fe8b7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae4bce17f1ab84502a7264aa6ee9fe8b7">u16_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:ae4bce17f1ab84502a7264aa6ee9fe8b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac2234643490e0d1d52af361a81ccfe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ac2234643490e0d1d52af361a81ccfe">u32_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:a8ac2234643490e0d1d52af361a81ccfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afce91e14811fc7ab82c764efb12c0443"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afce91e14811fc7ab82c764efb12c0443">s8_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:afce91e14811fc7ab82c764efb12c0443"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeda05854c52c61e264016d08bb812703"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeda05854c52c61e264016d08bb812703">s16_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:aeda05854c52c61e264016d08bb812703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f4b44c08f32f60bee79357a8db1ab34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7f4b44c08f32f60bee79357a8db1ab34">s32_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:a7f4b44c08f32f60bee79357a8db1ab34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f729f1847218335d50fca5b1f2bcf0d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3f729f1847218335d50fca5b1f2bcf0d">fp16_in_bounds_crop_window</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float *output_ptr, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> input_offset, int32_t window_step_x, int32_t output_width_start, int32_t output_width_limit, bool input_has_single_channel, bool is_width_flipped)</td></tr>
<tr class="separator:a3f729f1847218335d50fca5b1f2bcf0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc2c89fc26ee94755a3da5ce715db4ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afc2c89fc26ee94755a3da5ce715db4ac">depth_to_space_nhwc_any</a> (const uint8_t *src, uint8_t *dst, const uintptr_t src_shape[4], const uintptr_t src_strides[4], const uintptr_t dst_strides[4], uintptr_t element_size, uintptr_t block_size)</td></tr>
<tr class="separator:afc2c89fc26ee94755a3da5ce715db4ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72ad2e7a80704bf6bcd4315471174ca1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a72ad2e7a80704bf6bcd4315471174ca1">depth_to_space_nchw_any</a> (const uint8_t *src, uint8_t *dst, const uintptr_t src_shape[4], const uintptr_t src_strides[4], const uintptr_t dst_strides[4], uintptr_t element_size, uintptr_t block_size)</td></tr>
<tr class="separator:a72ad2e7a80704bf6bcd4315471174ca1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10cae4c8f0f98bdc589fa0376a8616c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a10cae4c8f0f98bdc589fa0376a8616c8">neon_fp32_deptwiseconv2dnative</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a10cae4c8f0f98bdc589fa0376a8616c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa24e71dcbdb8bc6a6f42e5803790b71f"><td class="memItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a> (const int32x4_t &amp;a, const int32_t &amp;b)</td></tr>
<tr class="separator:aa24e71dcbdb8bc6a6f42e5803790b71f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac48f4a6361751e9231f1df22dc15eb6a"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac48f4a6361751e9231f1df22dc15eb6a">saturating_doubling_high_mul</a> (const int32_t &amp;a, const int32_t &amp;b)</td></tr>
<tr class="separator:ac48f4a6361751e9231f1df22dc15eb6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c4b348b45b7517f391ef9f95961d19f"><td class="memItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a> (const int32x4_t &amp;x, const int exponent)</td></tr>
<tr class="separator:a0c4b348b45b7517f391ef9f95961d19f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0b9efe43da5d21e76247e4bf586280a"><td class="memItemLeft" align="right" valign="top">int32x2_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad0b9efe43da5d21e76247e4bf586280a">rounding_divide_by_exp2</a> (const int32x2_t &amp;x, const int exponent)</td></tr>
<tr class="separator:ad0b9efe43da5d21e76247e4bf586280a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb942e32cd7322ef1e315255f33cc176"><td class="memItemLeft" align="right" valign="top">int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb942e32cd7322ef1e315255f33cc176">rounding_divide_by_exp2</a> (const int32_t &amp;x, const int exponent)</td></tr>
<tr class="separator:acb942e32cd7322ef1e315255f33cc176"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a2b594dc6c251f07190189c716685ec"><td class="memTemplParams" colspan="2">template&lt;typename T , typename TW &gt; </td></tr>
<tr class="memitem:a5a2b594dc6c251f07190189c716685ec"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5a2b594dc6c251f07190189c716685ec">run_depthwise_quanitized8bit</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a5a2b594dc6c251f07190189c716685ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e11bb008b174952651f4a9946adc1a4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7e11bb008b174952651f4a9946adc1a4">run_depthwise_quanitized8bit&lt; uint8_t, uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a7e11bb008b174952651f4a9946adc1a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5063b10e78012bdbfe34caca8ea26697"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a5063b10e78012bdbfe34caca8ea26697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22c00c0ee5bab5833057b869cfbbf3bd"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a22c00c0ee5bab5833057b869cfbbf3bd">run_depthwise_quanitized8bit&lt; uint8_t, int8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a22c00c0ee5bab5833057b869cfbbf3bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07fe0eb0607dbbd9e369137a01bb860"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">is_valid_input_region</a> (int32_t base_w, uint32_t base_h, uint32_t w, uint32_t h, const <a class="el" href="structarm__compute_1_1cpu_1_1_depthwise_convolution_run_info.xhtml">DepthwiseConvolutionRunInfo</a> &amp;run_info, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation)</td></tr>
<tr class="separator:ac07fe0eb0607dbbd9e369137a01bb860"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e8b7ad27a89ed894f2cc8b732a7b032"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0e8b7ad27a89ed894f2cc8b732a7b032"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0e8b7ad27a89ed894f2cc8b732a7b032">depthwise_loop_multiplier1_fp</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases)</td></tr>
<tr class="separator:a0e8b7ad27a89ed894f2cc8b732a7b032"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a290a58727fef5da244133a6ff8270fbd"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a290a58727fef5da244133a6ff8270fbd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a290a58727fef5da244133a6ff8270fbd">depthwise_loop_generic_fp</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;conv_info, const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;dilation, unsigned int depth_multiplier, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases)</td></tr>
<tr class="separator:a290a58727fef5da244133a6ff8270fbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae813f6571bf298ee67ad35c1559c7441"><td class="memTemplParams" colspan="2">template&lt;typename T , typename TW &gt; </td></tr>
<tr class="memitem:ae813f6571bf298ee67ad35c1559c7441"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae813f6571bf298ee67ad35c1559c7441">run_depthwise_float</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *biases, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:ae813f6571bf298ee67ad35c1559c7441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a622fe0b26eed0b8ba28255bfe7efacfc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a622fe0b26eed0b8ba28255bfe7efacfc">neon_qu8_deptwiseconv2dnative</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a622fe0b26eed0b8ba28255bfe7efacfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af901c81c20bdb1692739af6577bea29d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af901c81c20bdb1692739af6577bea29d">neon_qp8_qu8_deptwiseconv2dnative</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:af901c81c20bdb1692739af6577bea29d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb3a1d2cbd838058e9f2ec370301b6da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb3a1d2cbd838058e9f2ec370301b6da">neon_qs8_deptwiseconv2dnative</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:acb3a1d2cbd838058e9f2ec370301b6da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5184f842959f2ed8c15c3142491c6c28"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5184f842959f2ed8c15c3142491c6c28">neon_qp8_qs8_deptwiseconv2dnative</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a5184f842959f2ed8c15c3142491c6c28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e521ca03e66524e6db0f8b3ea9e3567"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e521ca03e66524e6db0f8b3ea9e3567">neon_fp16_deptwiseconv2dnative</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, bool has_biases, const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;info)</td></tr>
<tr class="separator:a1e521ca03e66524e6db0f8b3ea9e3567"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8909d1c05d50e28f4d52c6ddfbb06d4"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:af8909d1c05d50e28f4d52c6ddfbb06d4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">neon_fp32_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af8909d1c05d50e28f4d52c6ddfbb06d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace3da456fb564b9c3df7992f3e495376"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ace3da456fb564b9c3df7992f3e495376">neon_fp32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ace3da456fb564b9c3df7992f3e495376"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a000160c59f0735bda44082db86c5d415"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a000160c59f0735bda44082db86c5d415">neon_fp32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a000160c59f0735bda44082db86c5d415"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95bfc98c921c6b965e9e36c4057cb6fe"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a95bfc98c921c6b965e9e36c4057cb6fe">neon_fp32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a95bfc98c921c6b965e9e36c4057cb6fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb12dc76e546b9062d3267264cc1830c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeb12dc76e546b9062d3267264cc1830c">neon_fp32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aeb12dc76e546b9062d3267264cc1830c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79cf8c5fe4f7ccfb1c2a2f1fd0500f7"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af79cf8c5fe4f7ccfb1c2a2f1fd0500f7">neon_fp32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af79cf8c5fe4f7ccfb1c2a2f1fd0500f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab093c9a7a75706a36482adb85662076f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab093c9a7a75706a36482adb85662076f">neon_fp32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab093c9a7a75706a36482adb85662076f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af39b7e31a237f1e3f646feddbb91ed64"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af39b7e31a237f1e3f646feddbb91ed64">neon_fp32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af39b7e31a237f1e3f646feddbb91ed64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b93ca48103f377f7a103d0f5466ba98"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9b93ca48103f377f7a103d0f5466ba98">neon_fp32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9b93ca48103f377f7a103d0f5466ba98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb6ac6d7a2301e053b26d95781db3e44"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:acb6ac6d7a2301e053b26d95781db3e44"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb6ac6d7a2301e053b26d95781db3e44">neon_fp32_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acb6ac6d7a2301e053b26d95781db3e44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c5808cefb48b06a3da5949364f7bf1c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c5808cefb48b06a3da5949364f7bf1c">neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4c5808cefb48b06a3da5949364f7bf1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada67793ec7dfd2576805c69f6d35de42"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ada67793ec7dfd2576805c69f6d35de42">neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ada67793ec7dfd2576805c69f6d35de42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5d2c5edc8155f4d1493f7dd1b64b35f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa5d2c5edc8155f4d1493f7dd1b64b35f">neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa5d2c5edc8155f4d1493f7dd1b64b35f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac20096b787268ba66590b9e49d3be87d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac20096b787268ba66590b9e49d3be87d">neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac20096b787268ba66590b9e49d3be87d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a599c145b239b4093f8c90babc91feafe"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a599c145b239b4093f8c90babc91feafe">neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a599c145b239b4093f8c90babc91feafe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a817c6e65dcb6b00b2ad180c06fc99098"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a817c6e65dcb6b00b2ad180c06fc99098">neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a817c6e65dcb6b00b2ad180c06fc99098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename VectorType &gt; </td></tr>
<tr class="memitem:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">elementwise_arithm_op</a> (const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;b)</td></tr>
<tr class="separator:abbfe5d27e11d8842fdb4cef411832f8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4a309149d475d17fdfd2d11c26b916"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a6e4a309149d475d17fdfd2d11c26b916"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6e4a309149d475d17fdfd2d11c26b916">elementwise_arithm_op_broadcast</a> (const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;a, const ScalarType &amp;broadcast_value, const bool reorder)</td></tr>
<tr class="separator:a6e4a309149d475d17fdfd2d11c26b916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82713bd9209865da67e8624a162ef9c1"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a82713bd9209865da67e8624a162ef9c1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">elementwise_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, OutputScalarType(*scalar_func)(const InputScalarType &amp;, const InputScalarType &amp;), int(*broadcast_func)(int, int, int, const InputScalarType *, const InputScalarType &amp;, OutputScalarType *, const bool), int(*neon_func)(int, int, int, const InputScalarType *, const InputScalarType *, OutputScalarType *))</td></tr>
<tr class="separator:a82713bd9209865da67e8624a162ef9c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType &gt; </td></tr>
<tr class="memitem:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memTemplItemLeft" align="right" valign="top">ScalarType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c0ec3e8fab2ea0202cedcc94da53f25">elementwise_arithm_op_scalar</a> (const ScalarType &amp;a, const ScalarType &amp;b)</td></tr>
<tr class="separator:a4c0ec3e8fab2ea0202cedcc94da53f25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memTemplItemLeft" align="right" valign="top">int32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2dd8a3579e2536f06cbda2c602ff6261">elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; int32_t, 4 &gt; &gt;</a> (const int32x4_t &amp;a, const int32x4_t &amp;b)</td></tr>
<tr class="separator:a2dd8a3579e2536f06cbda2c602ff6261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad3c3a3a2edcc9ae7274708f1babf305a">elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;</a> (const float32x4_t &amp;a, const float32x4_t &amp;b)</td></tr>
<tr class="separator:ad3c3a3a2edcc9ae7274708f1babf305a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memTemplItemLeft" align="right" valign="top">float32x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af7232f84a3d1ac94e631f1abf4f1fdca">elementwise_arithm_op&lt; ArithmeticOperation::POWER, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;</a> (const float32x4_t &amp;a, const float32x4_t &amp;b)</td></tr>
<tr class="separator:af7232f84a3d1ac94e631f1abf4f1fdca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7ecfb489f7d67ef4d8c1ba77e1060702">elementwise_arithm_op_loop</a> (int window_start_x, int window_end_x, int window_step_x, const ScalarType *input1_ptr, const ScalarType *input2_ptr, ScalarType *output_ptr)</td></tr>
<tr class="separator:a7ecfb489f7d67ef4d8c1ba77e1060702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d55687f004c1a3302485b2cb8da093b"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a1d55687f004c1a3302485b2cb8da093b"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d55687f004c1a3302485b2cb8da093b">elementwise_arithm_op_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const ScalarType *non_broadcast_input_ptr, const ScalarType &amp;broadcast_value, ScalarType *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a1d55687f004c1a3302485b2cb8da093b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op, typename VectorType &gt; </td></tr>
<tr class="memitem:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a29b215a8ed4583d1d4ac5d1e226bf9ef">elementwise_arithm_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a29b215a8ed4583d1d4ac5d1e226bf9ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb34d4000c420ca4fed96903be0fdc64"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType &gt; </td></tr>
<tr class="memitem:abb34d4000c420ca4fed96903be0fdc64"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abb34d4000c420ca4fed96903be0fdc64">elementwise_comp_op_scalar</a> (const InputScalarType &amp;a, const InputScalarType &amp;b)</td></tr>
<tr class="separator:abb34d4000c420ca4fed96903be0fdc64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputVectorType , typename OutputVectorType &gt; </td></tr>
<tr class="memitem:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memTemplItemLeft" align="right" valign="top">OutputVectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac758cf39f9e6885c73b6814ac80ff0ec">elementwise_comp_op</a> (const InputVectorType &amp;a, const InputVectorType &amp;b)</td></tr>
<tr class="separator:ac758cf39f9e6885c73b6814ac80ff0ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType , typename OutputVectorType &gt; </td></tr>
<tr class="memitem:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memTemplItemLeft" align="right" valign="top">OutputVectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae6f48be843bb47d4779d6613cd3ce68d">elementwise_comp_op_broadcast</a> (const InputVectorType &amp;a, const InputScalarType &amp;broadcast_value, const bool reorder)</td></tr>
<tr class="separator:ae6f48be843bb47d4779d6613cd3ce68d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad2a62b7914c8bff0e139b376ec38dbe7">elementwise_comp_op_broadcast_8_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:ad2a62b7914c8bff0e139b376ec38dbe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a324f99e84c7277809b5a774363197382"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a324f99e84c7277809b5a774363197382"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a324f99e84c7277809b5a774363197382">elementwise_comp_op_broadcast_16_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a324f99e84c7277809b5a774363197382"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15e0926812301b45c7e24e7eea269ab2"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a15e0926812301b45c7e24e7eea269ab2"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a15e0926812301b45c7e24e7eea269ab2">elementwise_comp_op_broadcast_32_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *non_broadcast_input_ptr, const InputScalarType &amp;broadcast_value, uint8_t *output_ptr, const bool reorder)</td></tr>
<tr class="separator:a15e0926812301b45c7e24e7eea269ab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0df077147bf38575572e36582af9f573"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a0df077147bf38575572e36582af9f573"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0df077147bf38575572e36582af9f573">elementwise_comp_op_8_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:a0df077147bf38575572e36582af9f573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550901088b6a737a17d7eeb052ba9ef6"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a550901088b6a737a17d7eeb052ba9ef6"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a550901088b6a737a17d7eeb052ba9ef6">elementwise_comp_op_16_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:a550901088b6a737a17d7eeb052ba9ef6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae64977c9bd4690e8e3607e6fea754199"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:ae64977c9bd4690e8e3607e6fea754199"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae64977c9bd4690e8e3607e6fea754199">elementwise_comp_op_32_loop</a> (int window_start_x, int window_end_x, int window_step_x, const InputScalarType *input1_ptr, const InputScalarType *input2_ptr, uint8_t *output_ptr)</td></tr>
<tr class="separator:ae64977c9bd4690e8e3607e6fea754199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8cc8f4068cf9120bf433df94926221f"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:af8cc8f4068cf9120bf433df94926221f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8cc8f4068cf9120bf433df94926221f">elementwise_comp_op_8</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af8cc8f4068cf9120bf433df94926221f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a38e6bb15e7ac2da0795f3cfef2f29d6d">elementwise_comp_op_16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a38e6bb15e7ac2da0795f3cfef2f29d6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b186f6a61b072a9952403a3ef8548b4"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op, typename InputScalarType , typename InputVectorType &gt; </td></tr>
<tr class="memitem:a3b186f6a61b072a9952403a3ef8548b4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3b186f6a61b072a9952403a3ef8548b4">elementwise_comp_op_32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3b186f6a61b072a9952403a3ef8548b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae239dc51a686a455c70ff87fce9ea5aa"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae239dc51a686a455c70ff87fce9ea5aa">load_quantized</a> (const uint8_t *input1_ptr, const int32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;scale)</td></tr>
<tr class="separator:ae239dc51a686a455c70ff87fce9ea5aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bb53d2922eed568fcd9de9081faeeb7"><td class="memItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a> (const int8_t *input1_ptr, const int32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;scale)</td></tr>
<tr class="separator:a5bb53d2922eed568fcd9de9081faeeb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a981cf35141a952f493df0398da0b3d99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a981cf35141a952f493df0398da0b3d99">store_quantized</a> (uint8_t *output_ptr, const uint32x4x4_t &amp;out)</td></tr>
<tr class="separator:a981cf35141a952f493df0398da0b3d99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0460ff15e5977217b8fae5cf6abed0b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0460ff15e5977217b8fae5cf6abed0b1">store_quantized</a> (uint8_t *output_ptr, const int32x4x4_t &amp;out)</td></tr>
<tr class="separator:a0460ff15e5977217b8fae5cf6abed0b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83e9db0e07a3f67c702e65cc54fa9119"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a83e9db0e07a3f67c702e65cc54fa9119">store_quantized</a> (uint8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;invscale)</td></tr>
<tr class="separator:a83e9db0e07a3f67c702e65cc54fa9119"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac9f2850a80f033f33e04660ac3bbd08"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac9f2850a80f033f33e04660ac3bbd08">store_quantized_signed</a> (int8_t *output_ptr, const int32x4x4_t &amp;out)</td></tr>
<tr class="separator:aac9f2850a80f033f33e04660ac3bbd08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77016f5946f5a276e68576bb1b68877"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a> (int8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const float32x4_t &amp;invscale)</td></tr>
<tr class="separator:af77016f5946f5a276e68576bb1b68877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06083700f047b600de212931e66daab7"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a06083700f047b600de212931e66daab7"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a06083700f047b600de212931e66daab7">elementwise_arithm_op_quantized_scalar</a> (const float &amp;a, const float &amp;b, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qinfo)</td></tr>
<tr class="separator:a06083700f047b600de212931e66daab7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memTemplItemLeft" align="right" valign="top">int8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d0c8d90c3c46f6f1eb5f80e1a82254c">elementwise_arithm_op_quantized_signed_scalar</a> (const float &amp;a, const float &amp;b, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qinfo)</td></tr>
<tr class="separator:a1d0c8d90c3c46f6f1eb5f80e1a82254c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53285ac0836360e8a03088185fd669bc"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a53285ac0836360e8a03088185fd669bc"><td class="memTemplItemLeft" align="right" valign="top">float32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a53285ac0836360e8a03088185fd669bc">elementwise_arithm_op</a> (const float32x4x4_t &amp;a, const float32x4x4_t &amp;b)</td></tr>
<tr class="separator:a53285ac0836360e8a03088185fd669bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac216018d489f5f9ea7d1907f593a039e"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:ac216018d489f5f9ea7d1907f593a039e"><td class="memTemplItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac216018d489f5f9ea7d1907f593a039e">elementwise_comp_op_quantized_scalar</a> (const float &amp;a, const float &amp;b, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a> qinfo)</td></tr>
<tr class="separator:ac216018d489f5f9ea7d1907f593a039e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaa460d8a451197db97d0af703bf8316"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:afaa460d8a451197db97d0af703bf8316"><td class="memTemplItemLeft" align="right" valign="top">uint32x4x4_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afaa460d8a451197db97d0af703bf8316">elementwise_comp_op</a> (const float32x4x4_t &amp;a, const float32x4x4_t &amp;b)</td></tr>
<tr class="separator:afaa460d8a451197db97d0af703bf8316"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a918ccd824090fc763e31459310bdea53"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a918ccd824090fc763e31459310bdea53"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a918ccd824090fc763e31459310bdea53">elementwise_arithm_op_quantized_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a918ccd824090fc763e31459310bdea53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a136ae2cf27f2d1d2aac2da4c33d24c1c">elementwise_arithm_op_quantized_singed_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, int8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a136ae2cf27f2d1d2aac2da4c33d24c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab1893a2a9fc472d75b5fe897e63c5a41">elementwise_arithm_op_quantized_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:ab1893a2a9fc472d75b5fe897e63c5a41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77a76d4cabb3dcbb44ecb12034a28e46">elementwise_arithm_op_quantized_signed_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, int8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a77a76d4cabb3dcbb44ecb12034a28e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c8d923ab1f2263472ff1815a0655701"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a4c8d923ab1f2263472ff1815a0655701"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c8d923ab1f2263472ff1815a0655701">elementwise_comp_op_quantized_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *input1_ptr, const uint8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a4c8d923ab1f2263472ff1815a0655701"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c7874a7ad657bd64f21bc52840ce4ee">elementwise_comp_op_quantized_signed_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *input1_ptr, const int8_t *input2_ptr, uint8_t *output_ptr, int32x4_t voffset1, int32x4_t voffset2, float32x4_t vscale1, float32x4_t vscale2, float32x4_t voffseto, float32x4_t invvscaleo)</td></tr>
<tr class="separator:a4c7874a7ad657bd64f21bc52840ce4ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a26d9b05aae3ad0b55e92cde353d3bd15">elementwise_comp_op_quantized_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const uint8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a26d9b05aae3ad0b55e92cde353d3bd15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a30b6a7350fda90e0f6d8dc86df9d586f">elementwise_comp_op_quantized_signed_broadcast_loop</a> (int window_start_x, int window_end_x, int window_step_x, const int8_t *non_broadcast_input_ptr, float32x4x4_t broadcast_vector, uint8_t *output_ptr, int32x4_t voffset_non_broadcast, float32x4_t vscale_non_broadcast, float32x4_t voffseto, float32x4_t invvscaleo, bool reorder)</td></tr>
<tr class="separator:a30b6a7350fda90e0f6d8dc86df9d586f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3f4470575b8ef973d136101ea80b68"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>), int(*broadcast_func)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:aae3f4470575b8ef973d136101ea80b68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d498841f133c2ce4c31076a6f700a4f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">elementwise_comp_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:a8d498841f133c2ce4c31076a6f700a4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1806b9850ee209fa95836d94e33e176f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">elementwise_op_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, int8_t(*scalar_func)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</td></tr>
<tr class="separator:a1806b9850ee209fa95836d94e33e176f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9627c97b4adec6501e3b1f23ec750fbc">elementwise_arithm_op_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9627c97b4adec6501e3b1f23ec750fbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9953a8057dee990456f905a5099c9730"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a9953a8057dee990456f905a5099c9730"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9953a8057dee990456f905a5099c9730">elementwise_arithm_op_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9953a8057dee990456f905a5099c9730"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0cc9dbc4c9cc16127d546998da1bd4c7">elementwise_comp_op_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0cc9dbc4c9cc16127d546998da1bd4c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aada344073480d0eb85f751181cef6d8e"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:aada344073480d0eb85f751181cef6d8e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aada344073480d0eb85f751181cef6d8e">elementwise_comp_op_quantized_signed</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aada344073480d0eb85f751181cef6d8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80f249016dbcc431fa33089ec6fadd4e"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a80f249016dbcc431fa33089ec6fadd4e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">neon_s32_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a80f249016dbcc431fa33089ec6fadd4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b8ebb4367a9d5b49a1dccbf1111e75"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b8ebb4367a9d5b49a1dccbf1111e75">neon_s32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a49b8ebb4367a9d5b49a1dccbf1111e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f1fdb9c9d8b0aac643147d41a5b9c04"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0f1fdb9c9d8b0aac643147d41a5b9c04">neon_s32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0f1fdb9c9d8b0aac643147d41a5b9c04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7024c326dd6dbc4a1ed84afdae251e7"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa7024c326dd6dbc4a1ed84afdae251e7">neon_s32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa7024c326dd6dbc4a1ed84afdae251e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a933845a7603c8c4295d2df3f885db306"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a933845a7603c8c4295d2df3f885db306">neon_s32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a933845a7603c8c4295d2df3f885db306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbb27906986fe741d69a2f64ad7e6ae0"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acbb27906986fe741d69a2f64ad7e6ae0">neon_s32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acbb27906986fe741d69a2f64ad7e6ae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf1dfa31b7a48f836c5ee7bbc52f7cc4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adf1dfa31b7a48f836c5ee7bbc52f7cc4">neon_s32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:adf1dfa31b7a48f836c5ee7bbc52f7cc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb06f70b91a8f81b90bd80426d795d3a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb06f70b91a8f81b90bd80426d795d3a">neon_s32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acb06f70b91a8f81b90bd80426d795d3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35f4e9d1fdbc3b7c270ac2c1e155619a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a35f4e9d1fdbc3b7c270ac2c1e155619a">neon_s32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a35f4e9d1fdbc3b7c270ac2c1e155619a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0469bd9f1f5a4df12bcb7ff3cdbb6a43"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a0469bd9f1f5a4df12bcb7ff3cdbb6a43"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">neon_s16_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0469bd9f1f5a4df12bcb7ff3cdbb6a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63574b05c48d24c551186e2e581dbc61"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a63574b05c48d24c551186e2e581dbc61">neon_s16_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a63574b05c48d24c551186e2e581dbc61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75e9d50ad6be3295188f9349c934d39"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa75e9d50ad6be3295188f9349c934d39">neon_s16_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa75e9d50ad6be3295188f9349c934d39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a540ffb4e984eb7515c23f7de1a365076"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a540ffb4e984eb7515c23f7de1a365076">neon_s16_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a540ffb4e984eb7515c23f7de1a365076"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a936e5fd5f8904fce51155d450165e012"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a936e5fd5f8904fce51155d450165e012">neon_s16_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a936e5fd5f8904fce51155d450165e012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f012f2d513566b6c9c8a54891dacede"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0f012f2d513566b6c9c8a54891dacede">neon_s16_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0f012f2d513566b6c9c8a54891dacede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97b8783af088791994b2412cafde8944"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a97b8783af088791994b2412cafde8944">neon_s16_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a97b8783af088791994b2412cafde8944"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af786536ae3569e727a983b444ac78bc8"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af786536ae3569e727a983b444ac78bc8">neon_s16_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af786536ae3569e727a983b444ac78bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1554298a63c25c943d3964490a2f571"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af1554298a63c25c943d3964490a2f571">neon_s16_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af1554298a63c25c943d3964490a2f571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab11b3f4b86665b08ca8b9fb00e38bb9d"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:ab11b3f4b86665b08ca8b9fb00e38bb9d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">neon_u8_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab11b3f4b86665b08ca8b9fb00e38bb9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e02212404334bb7684275e2b183719"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a47e02212404334bb7684275e2b183719">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a47e02212404334bb7684275e2b183719"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca40b8e906e7c797b78f611217e2017c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aca40b8e906e7c797b78f611217e2017c">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aca40b8e906e7c797b78f611217e2017c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a380179c89ead515c75eae47612ddf9bb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a380179c89ead515c75eae47612ddf9bb">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a380179c89ead515c75eae47612ddf9bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2442fd415b42ceeba06051d5908bb210"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2442fd415b42ceeba06051d5908bb210">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2442fd415b42ceeba06051d5908bb210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addef285be991e7bee50060465f455459"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#addef285be991e7bee50060465f455459">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:addef285be991e7bee50060465f455459"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b6616dc7142e89df08763de1e61733f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b6616dc7142e89df08763de1e61733f">neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8b6616dc7142e89df08763de1e61733f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b0752a4d54894e23581ff38b15aada9"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a8b0752a4d54894e23581ff38b15aada9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">neon_s16_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8b0752a4d54894e23581ff38b15aada9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa813ea436e922c1658d5040583a67439"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa813ea436e922c1658d5040583a67439">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa813ea436e922c1658d5040583a67439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45c86ddbd5f40d0e0d6875fce3279702"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a45c86ddbd5f40d0e0d6875fce3279702">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a45c86ddbd5f40d0e0d6875fce3279702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f14392b48a6b49e4c4ba59a0d919cc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52f14392b48a6b49e4c4ba59a0d919cc">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a52f14392b48a6b49e4c4ba59a0d919cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ef4712ef5c670d134c366a36cd7a5f5"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6ef4712ef5c670d134c366a36cd7a5f5">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6ef4712ef5c670d134c366a36cd7a5f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e76328d3f2d1d0757d9c5d05cbf8466"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e76328d3f2d1d0757d9c5d05cbf8466">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1e76328d3f2d1d0757d9c5d05cbf8466"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a764259e9c2bb12070806136a3f59d429"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a764259e9c2bb12070806136a3f59d429">neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a764259e9c2bb12070806136a3f59d429"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8109015040dabe0728f37ebf7facf3df"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a8109015040dabe0728f37ebf7facf3df"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">neon_s32_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8109015040dabe0728f37ebf7facf3df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac20b0bcbe2d5163a9a70e8d84b2effbb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac20b0bcbe2d5163a9a70e8d84b2effbb">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac20b0bcbe2d5163a9a70e8d84b2effbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2d90675d2c2470f2aafc2bed01621d0"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa2d90675d2c2470f2aafc2bed01621d0">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa2d90675d2c2470f2aafc2bed01621d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adeae56332e60300e0cb61c540fd40d3f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adeae56332e60300e0cb61c540fd40d3f">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:adeae56332e60300e0cb61c540fd40d3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cb6e822641c2d1ba5249dc9966e2418"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4cb6e822641c2d1ba5249dc9966e2418">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4cb6e822641c2d1ba5249dc9966e2418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae14e2d1aeaa5ee1f7392efd1b0fcc40e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae14e2d1aeaa5ee1f7392efd1b0fcc40e">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ae14e2d1aeaa5ee1f7392efd1b0fcc40e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe8e18cc7c50f2a571de0958cdc6bf9e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abe8e18cc7c50f2a571de0958cdc6bf9e">neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abe8e18cc7c50f2a571de0958cdc6bf9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a5b347d0d1e809d9aa97f3a3dac8183"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a6a5b347d0d1e809d9aa97f3a3dac8183"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">neon_qasymm8_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6a5b347d0d1e809d9aa97f3a3dac8183"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64d2added9373c602a94a47b277877dd"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a64d2added9373c602a94a47b277877dd">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a64d2added9373c602a94a47b277877dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cfc15db6b93df949f1b62ff74a037f1"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4cfc15db6b93df949f1b62ff74a037f1">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4cfc15db6b93df949f1b62ff74a037f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a033036e20d0a83aed4b59797a3742bf0"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a033036e20d0a83aed4b59797a3742bf0">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a033036e20d0a83aed4b59797a3742bf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b57b753d548a5e51017a2ee6a650038"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4b57b753d548a5e51017a2ee6a650038">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4b57b753d548a5e51017a2ee6a650038"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8676fc5b59d032093bad4bb3370bbabe"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8676fc5b59d032093bad4bb3370bbabe">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8676fc5b59d032093bad4bb3370bbabe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac78be48c6f759c020fc1e7d08a67a2f2"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac78be48c6f759c020fc1e7d08a67a2f2">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac78be48c6f759c020fc1e7d08a67a2f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68cc430ff9308337a5181f7287ddd770"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a68cc430ff9308337a5181f7287ddd770">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a68cc430ff9308337a5181f7287ddd770"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff0d75a6faa1681536f24798c0f6493c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aff0d75a6faa1681536f24798c0f6493c">neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aff0d75a6faa1681536f24798c0f6493c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac40fc459862ae0050b89550bd76fbcc"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:aac40fc459862ae0050b89550bd76fbcc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac40fc459862ae0050b89550bd76fbcc">neon_qasymm8_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aac40fc459862ae0050b89550bd76fbcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4f41b679a97ce2334575643747ce4b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8d4f41b679a97ce2334575643747ce4b">neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8d4f41b679a97ce2334575643747ce4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbfa0f3c9212b3d204c266482c99044c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afbfa0f3c9212b3d204c266482c99044c">neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afbfa0f3c9212b3d204c266482c99044c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a388eb281a0ce14391d13509357acaec4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a388eb281a0ce14391d13509357acaec4">neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a388eb281a0ce14391d13509357acaec4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81dc0e97c7fc4e6f9f3c314d363adc2d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a81dc0e97c7fc4e6f9f3c314d363adc2d">neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a81dc0e97c7fc4e6f9f3c314d363adc2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07e6cb4195ebae7fb9269e80a4b999aa"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a07e6cb4195ebae7fb9269e80a4b999aa">neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a07e6cb4195ebae7fb9269e80a4b999aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c5d7247dc71f1660fe47d037e4c5ad1"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2c5d7247dc71f1660fe47d037e4c5ad1">neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2c5d7247dc71f1660fe47d037e4c5ad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ec4688c02d3bdc86bdaa5989e723acc"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a8ec4688c02d3bdc86bdaa5989e723acc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">neon_qasymm8_signed_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8ec4688c02d3bdc86bdaa5989e723acc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d81fc28789c483f9292cd022b5bfc51"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5d81fc28789c483f9292cd022b5bfc51">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5d81fc28789c483f9292cd022b5bfc51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0f5d1b84b8b8820ed08897aab1b96e4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac0f5d1b84b8b8820ed08897aab1b96e4">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac0f5d1b84b8b8820ed08897aab1b96e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37197ac33ccd55bb904d8a026e255723"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a37197ac33ccd55bb904d8a026e255723">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a37197ac33ccd55bb904d8a026e255723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a639b777d0028bfbede16f8c86930c5c5"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a639b777d0028bfbede16f8c86930c5c5">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a639b777d0028bfbede16f8c86930c5c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5bf451ee9badec697229d16331f1b13"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa5bf451ee9badec697229d16331f1b13">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa5bf451ee9badec697229d16331f1b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afeee9aa63f523e914eb64ab97d45dbc9"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afeee9aa63f523e914eb64ab97d45dbc9">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afeee9aa63f523e914eb64ab97d45dbc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45b49bdc127b618fc3f1d452f9f288b2"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a45b49bdc127b618fc3f1d452f9f288b2">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a45b49bdc127b618fc3f1d452f9f288b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5032a649ca660bd27fc8a86dae8d091"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad5032a649ca660bd27fc8a86dae8d091">neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad5032a649ca660bd27fc8a86dae8d091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ebb6108697495178fef6c9ea5e68e3"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:ac6ebb6108697495178fef6c9ea5e68e3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6ebb6108697495178fef6c9ea5e68e3">neon_qasymm8_signed_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac6ebb6108697495178fef6c9ea5e68e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a565883b4bab624f86677dfc0b9743ee8"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a565883b4bab624f86677dfc0b9743ee8">neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a565883b4bab624f86677dfc0b9743ee8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33b7289c3174e0c0539f65674b44b75e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a33b7289c3174e0c0539f65674b44b75e">neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a33b7289c3174e0c0539f65674b44b75e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af728cffe5323591ea906d8a7631e0aa6"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af728cffe5323591ea906d8a7631e0aa6">neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af728cffe5323591ea906d8a7631e0aa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaeb4b0fb3f6dfd02917c3ae02ebd585"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adaeb4b0fb3f6dfd02917c3ae02ebd585">neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:adaeb4b0fb3f6dfd02917c3ae02ebd585"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a176226aec58accc8ca6c259ab5f39e84"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a176226aec58accc8ca6c259ab5f39e84">neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a176226aec58accc8ca6c259ab5f39e84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a514549fdb57a523370852649fa3b0d02"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a514549fdb57a523370852649fa3b0d02">neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a514549fdb57a523370852649fa3b0d02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e3db6438b14b698362aed08c3042549"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a1e3db6438b14b698362aed08c3042549"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">sve_fp32_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1e3db6438b14b698362aed08c3042549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63d98e110573bfc3553312663fecde4e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a63d98e110573bfc3553312663fecde4e">sve_fp32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a63d98e110573bfc3553312663fecde4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a73274ae11d9fb623636994fbe32e92"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a73274ae11d9fb623636994fbe32e92">sve_fp32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0a73274ae11d9fb623636994fbe32e92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2a79419570cf999bccba826a1b62e98"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab2a79419570cf999bccba826a1b62e98">sve_fp32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab2a79419570cf999bccba826a1b62e98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfe00af03f8c7255fa6d0a1246d3591f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acfe00af03f8c7255fa6d0a1246d3591f">sve_fp32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acfe00af03f8c7255fa6d0a1246d3591f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1a4bcb89dc1eb9c566f8d5a83d1c91a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad1a4bcb89dc1eb9c566f8d5a83d1c91a">sve_fp32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad1a4bcb89dc1eb9c566f8d5a83d1c91a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34b8733d2c94b6d1a49f6bdad330f3f9"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a34b8733d2c94b6d1a49f6bdad330f3f9">sve_fp32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a34b8733d2c94b6d1a49f6bdad330f3f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08f0a6abde67075e8d1c99e631ec30ab"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a08f0a6abde67075e8d1c99e631ec30ab">sve_fp32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a08f0a6abde67075e8d1c99e631ec30ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee60f20ae5553d638819a20e7b0afe28"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aee60f20ae5553d638819a20e7b0afe28">sve_fp32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aee60f20ae5553d638819a20e7b0afe28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa48efa48628548d9a7fc080a0a074ccd"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:aa48efa48628548d9a7fc080a0a074ccd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa48efa48628548d9a7fc080a0a074ccd">sve_fp32_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa48efa48628548d9a7fc080a0a074ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bfaceb243768eb0bc319d9d91b1695f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6bfaceb243768eb0bc319d9d91b1695f">sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6bfaceb243768eb0bc319d9d91b1695f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a671a93238626dd044d4265e5c880ee9d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a671a93238626dd044d4265e5c880ee9d">sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a671a93238626dd044d4265e5c880ee9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cfa194d2b37e290bc4ce16b7e0f139c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7cfa194d2b37e290bc4ce16b7e0f139c">sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7cfa194d2b37e290bc4ce16b7e0f139c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e21843bb90caa3548333f95fcd41db1"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2e21843bb90caa3548333f95fcd41db1">sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2e21843bb90caa3548333f95fcd41db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac654e16dcb588358533d0eb8330d2448"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac654e16dcb588358533d0eb8330d2448">sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac654e16dcb588358533d0eb8330d2448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4719e44b87bc440a656c9df41ead408"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa4719e44b87bc440a656c9df41ead408">sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa4719e44b87bc440a656c9df41ead408"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81823026a6bec62b7d98d83d8f044e5e"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a81823026a6bec62b7d98d83d8f044e5e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a81823026a6bec62b7d98d83d8f044e5e">elementwise_arithmetic_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a81823026a6bec62b7d98d83d8f044e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a984f3b544f65c7fa631b0e25c35644"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3a984f3b544f65c7fa631b0e25c35644">elementwise_arithmetic_op&lt; float32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3a984f3b544f65c7fa631b0e25c35644"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afada74256ea2ed8e55c8f8ce09b2e51d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afada74256ea2ed8e55c8f8ce09b2e51d">elementwise_arithmetic_op&lt; float16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afada74256ea2ed8e55c8f8ce09b2e51d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45b95eaeb59fa40d8fb73c6a0b70fa98"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a45b95eaeb59fa40d8fb73c6a0b70fa98">elementwise_arithmetic_op&lt; int16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a45b95eaeb59fa40d8fb73c6a0b70fa98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1cab9e8929674344a45c9331a64085f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae1cab9e8929674344a45c9331a64085f">elementwise_arithmetic_op&lt; int32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ae1cab9e8929674344a45c9331a64085f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a538ec2af6a9dd99b0c3836e116de10"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType &gt; </td></tr>
<tr class="memitem:a0a538ec2af6a9dd99b0c3836e116de10"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a538ec2af6a9dd99b0c3836e116de10">elementwise_comparison_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0a538ec2af6a9dd99b0c3836e116de10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b9d5cafbf1dbb9e2c9426ad417ef07f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1b9d5cafbf1dbb9e2c9426ad417ef07f">elementwise_comparison_op&lt; float32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1b9d5cafbf1dbb9e2c9426ad417ef07f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a794fe4751f2f6ed37cb425b57e88ee59"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a794fe4751f2f6ed37cb425b57e88ee59">elementwise_comparison_op&lt; float16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a794fe4751f2f6ed37cb425b57e88ee59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84c6e004ed6f806afa00c74dd7ff1440"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a84c6e004ed6f806afa00c74dd7ff1440">elementwise_comparison_op&lt; uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a84c6e004ed6f806afa00c74dd7ff1440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a445e8f34f62074a5a635cd34b1c926d7"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a445e8f34f62074a5a635cd34b1c926d7">elementwise_comparison_op&lt; int16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a445e8f34f62074a5a635cd34b1c926d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a428217640659bfcde131837f375d6769"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a428217640659bfcde131837f375d6769">elementwise_comparison_op&lt; int32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a428217640659bfcde131837f375d6769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4c7cdb5bf40eec637c642649299bb9d"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:ab4c7cdb5bf40eec637c642649299bb9d"><td class="memTemplItemLeft" align="right" valign="top">svint32_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab4c7cdb5bf40eec637c642649299bb9d">elementwise_pow&lt; svint32_t &gt;</a> (svbool_t &amp;pg, const svint32_t &amp;a, const svint32_t &amp;b)</td></tr>
<tr class="separator:ab4c7cdb5bf40eec637c642649299bb9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87b3d208f9167d096a67f50c55c5b4ab"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a87b3d208f9167d096a67f50c55c5b4ab"><td class="memTemplItemLeft" align="right" valign="top">svint32_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a87b3d208f9167d096a67f50c55c5b4ab">elementwise_div&lt; svint32_t &gt;</a> (svbool_t &amp;pg, const svint32_t &amp;a, const svint32_t &amp;b)</td></tr>
<tr class="separator:a87b3d208f9167d096a67f50c55c5b4ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75678e7da692b3e871e40af6c8ab394e"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a75678e7da692b3e871e40af6c8ab394e"><td class="memTemplItemLeft" align="right" valign="top">svint16_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a75678e7da692b3e871e40af6c8ab394e">elementwise_div&lt; svint16_t &gt;</a> (svbool_t &amp;pg, const svint16_t &amp;a, const svint16_t &amp;b)</td></tr>
<tr class="separator:a75678e7da692b3e871e40af6c8ab394e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7ae4e4823c3fe48546d9ef7d99ed259"><td class="memTemplParams" colspan="2">template&lt;typename VectorType &gt; </td></tr>
<tr class="memitem:af7ae4e4823c3fe48546d9ef7d99ed259"><td class="memTemplItemLeft" align="right" valign="top">VectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af7ae4e4823c3fe48546d9ef7d99ed259">elementwise_pow</a> (svbool_t &amp;pg, const VectorType &amp;a, const VectorType &amp;b)</td></tr>
<tr class="separator:af7ae4e4823c3fe48546d9ef7d99ed259"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fca2bb83034016f5060055c59707167"><td class="memTemplParams" colspan="2">template&lt;typename VectorType &gt; </td></tr>
<tr class="memitem:a3fca2bb83034016f5060055c59707167"><td class="memTemplItemLeft" align="right" valign="top">VectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3fca2bb83034016f5060055c59707167">elementwise_div</a> (svbool_t &amp;pg, const VectorType &amp;a, const VectorType &amp;b)</td></tr>
<tr class="separator:a3fca2bb83034016f5060055c59707167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a496c4e0ab041ed1bb09f27599297e5c6"><td class="memTemplParams" colspan="2">template&lt;uint32_t bytewidth&gt; </td></tr>
<tr class="memitem:a496c4e0ab041ed1bb09f27599297e5c6"><td class="memTemplItemLeft" align="right" valign="top">svbool_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a496c4e0ab041ed1bb09f27599297e5c6">narrow_to_byte_predicate</a> (svbool_t pg)</td></tr>
<tr class="separator:a496c4e0ab041ed1bb09f27599297e5c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec7d24124baeea1879c7d98f45c229a1"><td class="memTemplParams" colspan="2">template&lt;typename VectorType &gt; </td></tr>
<tr class="memitem:aec7d24124baeea1879c7d98f45c229a1"><td class="memTemplItemLeft" align="right" valign="top">VectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aec7d24124baeea1879c7d98f45c229a1">elementwise_arithmetic_op</a> (svbool_t &amp;pg, const VectorType &amp;a, const VectorType &amp;b, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op)</td></tr>
<tr class="separator:aec7d24124baeea1879c7d98f45c229a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a880bad15409a72d55f1af6893b688f3e"><td class="memTemplParams" colspan="2">template&lt;typename InputVectorType , typename OutputVectorType &gt; </td></tr>
<tr class="memitem:a880bad15409a72d55f1af6893b688f3e"><td class="memTemplItemLeft" align="right" valign="top">OutputVectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a880bad15409a72d55f1af6893b688f3e">elementwise_comparison_op</a> (svbool_t &amp;pg, const InputVectorType &amp;a, const InputVectorType &amp;b, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op)</td></tr>
<tr class="separator:a880bad15409a72d55f1af6893b688f3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaf811068ee1b93b346bed157516baaf"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:aaaf811068ee1b93b346bed157516baaf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">sve_s32_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aaaf811068ee1b93b346bed157516baaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5123f3ad297040d12571b93b7b175dc4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5123f3ad297040d12571b93b7b175dc4">sve_s32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5123f3ad297040d12571b93b7b175dc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8a5bdf06d4d0540165863c7202a11ea"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab8a5bdf06d4d0540165863c7202a11ea">sve_s32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab8a5bdf06d4d0540165863c7202a11ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add1739093ecca6210c06c628d5606112"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#add1739093ecca6210c06c628d5606112">sve_s32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:add1739093ecca6210c06c628d5606112"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afca779fe4d06c69e187a1b02b684c4b6"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afca779fe4d06c69e187a1b02b684c4b6">sve_s32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afca779fe4d06c69e187a1b02b684c4b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82c00d67f2ff19378e13bb41acbc9193"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a82c00d67f2ff19378e13bb41acbc9193">sve_s32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a82c00d67f2ff19378e13bb41acbc9193"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d5148c90d1c207a0d7c29b92e80793f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7d5148c90d1c207a0d7c29b92e80793f">sve_s32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7d5148c90d1c207a0d7c29b92e80793f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6745544148d28e221195fecda70f837c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6745544148d28e221195fecda70f837c">sve_s32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6745544148d28e221195fecda70f837c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ca1be328b9aa1346a52fa1cbfb6939b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2ca1be328b9aa1346a52fa1cbfb6939b">sve_s32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2ca1be328b9aa1346a52fa1cbfb6939b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e3c86bcb110d6ca97a63a429b499e55"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a5e3c86bcb110d6ca97a63a429b499e55"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">sve_s16_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5e3c86bcb110d6ca97a63a429b499e55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bb80197ffeedd6c6320406551ed7199"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3bb80197ffeedd6c6320406551ed7199">sve_s16_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3bb80197ffeedd6c6320406551ed7199"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb41a3a123953953908d673afc6d931"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6bb41a3a123953953908d673afc6d931">sve_s16_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6bb41a3a123953953908d673afc6d931"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45090ead2f890c4ca3d80496cf49ca5e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a45090ead2f890c4ca3d80496cf49ca5e">sve_s16_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a45090ead2f890c4ca3d80496cf49ca5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa956575ffcc07bd978c6e5ebd32baecc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa956575ffcc07bd978c6e5ebd32baecc">sve_s16_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa956575ffcc07bd978c6e5ebd32baecc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8faee508ea0f1c15da7db9c11285ea05"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8faee508ea0f1c15da7db9c11285ea05">sve_s16_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8faee508ea0f1c15da7db9c11285ea05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6f88f73843af6e83339f45164625064"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6f88f73843af6e83339f45164625064">sve_s16_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac6f88f73843af6e83339f45164625064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cd151e43c3ee27e45f73b33ec1031d6"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5cd151e43c3ee27e45f73b33ec1031d6">sve_s16_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5cd151e43c3ee27e45f73b33ec1031d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad341fee8320dae165cb5f476e8ac886e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad341fee8320dae165cb5f476e8ac886e">sve_s16_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad341fee8320dae165cb5f476e8ac886e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52656637b2039572e6a51a10d9384823"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a52656637b2039572e6a51a10d9384823"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">sve_u8_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a52656637b2039572e6a51a10d9384823"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d141d930d36dc163914160758e1f831"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4d141d930d36dc163914160758e1f831">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4d141d930d36dc163914160758e1f831"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2261d1ae0d3f14bfee980cee8bb20367"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2261d1ae0d3f14bfee980cee8bb20367">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2261d1ae0d3f14bfee980cee8bb20367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e19625bfb223cbdd32d0e16ceeda021"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e19625bfb223cbdd32d0e16ceeda021">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5e19625bfb223cbdd32d0e16ceeda021"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad82c8006a7d3836bf07a99ccb918db87"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad82c8006a7d3836bf07a99ccb918db87">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad82c8006a7d3836bf07a99ccb918db87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a011aee7952393c8bdd5013964a526c5a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a011aee7952393c8bdd5013964a526c5a">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a011aee7952393c8bdd5013964a526c5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a466970007f65bc27a53326e90961dddd"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a466970007f65bc27a53326e90961dddd">sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a466970007f65bc27a53326e90961dddd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b16389b2a82a84265a682a75c010d1"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a49b16389b2a82a84265a682a75c010d1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">sve_s16_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a49b16389b2a82a84265a682a75c010d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cf7b66ba4d9fd274b32eaedfab958d1"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7cf7b66ba4d9fd274b32eaedfab958d1">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7cf7b66ba4d9fd274b32eaedfab958d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af171684aa5092d42ee1c19b9394e47df"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af171684aa5092d42ee1c19b9394e47df">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af171684aa5092d42ee1c19b9394e47df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04b9502d6d1490ed94ea0b40103ee04a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a04b9502d6d1490ed94ea0b40103ee04a">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a04b9502d6d1490ed94ea0b40103ee04a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3594cfaf53e53e953183c0df893cf006"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3594cfaf53e53e953183c0df893cf006">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3594cfaf53e53e953183c0df893cf006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac37db9604164425c8af90176d8ee03d7"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac37db9604164425c8af90176d8ee03d7">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac37db9604164425c8af90176d8ee03d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad39a3517b07c7a672d80275e81d2f458"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad39a3517b07c7a672d80275e81d2f458">sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad39a3517b07c7a672d80275e81d2f458"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd0e30e25070c711398b9dd70a0efcec"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:abd0e30e25070c711398b9dd70a0efcec"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">sve_s32_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abd0e30e25070c711398b9dd70a0efcec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee8c4e7eaaa3128833e155c2cadef62"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acee8c4e7eaaa3128833e155c2cadef62">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acee8c4e7eaaa3128833e155c2cadef62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c4496a042e47d86d98db772eab20601"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c4496a042e47d86d98db772eab20601">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4c4496a042e47d86d98db772eab20601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7382dcd41afd0835a27912f35328c82"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa7382dcd41afd0835a27912f35328c82">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa7382dcd41afd0835a27912f35328c82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f4cf6d08469389ce4a2ff0fa5422abc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8f4cf6d08469389ce4a2ff0fa5422abc">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8f4cf6d08469389ce4a2ff0fa5422abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a650e38245db43187e0f29ed6dbc45679"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a650e38245db43187e0f29ed6dbc45679">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a650e38245db43187e0f29ed6dbc45679"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac94c8f6370b6d2330ad9fe9d86828deb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac94c8f6370b6d2330ad9fe9d86828deb">sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac94c8f6370b6d2330ad9fe9d86828deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14b1d4cb1a66c829bfb6057b2084731b"><td class="memItemLeft" align="right" valign="top">svfloat32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a14b1d4cb1a66c829bfb6057b2084731b">load_quantized</a> (const int8_t *ptr, svbool_t pg, const svint32_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const svfloat32_t &amp;scale)</td></tr>
<tr class="separator:a14b1d4cb1a66c829bfb6057b2084731b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eb02640072c41490fb1ff8c91ff0992"><td class="memItemLeft" align="right" valign="top">svfloat32x4_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a> (const uint8_t *ptr, svbool_t pg, const svint32_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const svfloat32_t &amp;scale)</td></tr>
<tr class="separator:a2eb02640072c41490fb1ff8c91ff0992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf3491c5999edd9001ac739d5826cf91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#adf3491c5999edd9001ac739d5826cf91">store_quantized</a> (uint8_t *ptr, svbool_t pg, svfloat32x4_t data, const svint32_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const svfloat32_t &amp;inv_scale)</td></tr>
<tr class="separator:adf3491c5999edd9001ac739d5826cf91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac09fd4bf645cc493520464b767c7d872"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a> (int8_t *ptr, svbool_t pg, svfloat32x4_t data, const svint32_t &amp;<a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, const svfloat32_t &amp;inv_scale)</td></tr>
<tr class="separator:ac09fd4bf645cc493520464b767c7d872"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ef5eea9af75917b76d393c3748d1ed7"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a3ef5eea9af75917b76d393c3748d1ed7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3ef5eea9af75917b76d393c3748d1ed7">elementwise_arithmetic_quantized_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3ef5eea9af75917b76d393c3748d1ed7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7935ecf20a1fb8a8f4c410e461fbce90"><td class="memTemplParams" colspan="2">template&lt;typename InputScalarType , typename OutputScalarType  = uint8_t&gt; </td></tr>
<tr class="memitem:a7935ecf20a1fb8a8f4c410e461fbce90"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7935ecf20a1fb8a8f4c410e461fbce90">elementwise_comparison_quantized_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a> op, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7935ecf20a1fb8a8f4c410e461fbce90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c95a0102a9dfe557451971fc9596436"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:a3c95a0102a9dfe557451971fc9596436"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">sve2_qasymm8_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3c95a0102a9dfe557451971fc9596436"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f4ec0de080f14131894421e583c1b58"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6f4ec0de080f14131894421e583c1b58">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6f4ec0de080f14131894421e583c1b58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaf5ac2982c56cb9727142b5733b8d9b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acaf5ac2982c56cb9727142b5733b8d9b">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acaf5ac2982c56cb9727142b5733b8d9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a278e7454642b9864c9a63721064dbb2a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a278e7454642b9864c9a63721064dbb2a">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a278e7454642b9864c9a63721064dbb2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a131c4be775c57c6b845db274b550f6c9"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a131c4be775c57c6b845db274b550f6c9">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a131c4be775c57c6b845db274b550f6c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a797981daa78ea5c04c9bb68d53a6f2cc"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a797981daa78ea5c04c9bb68d53a6f2cc">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a797981daa78ea5c04c9bb68d53a6f2cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6d3ff1ec600b1e228e7c9a53f4a685a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6d3ff1ec600b1e228e7c9a53f4a685a">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac6d3ff1ec600b1e228e7c9a53f4a685a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a940fcc8c3dba6181911eb08cd997554c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a940fcc8c3dba6181911eb08cd997554c">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a940fcc8c3dba6181911eb08cd997554c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af57cc390a794bcac0a693116d3f5142e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af57cc390a794bcac0a693116d3f5142e">sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af57cc390a794bcac0a693116d3f5142e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e422502af8d8face08d6d77b25d92c7"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a8e422502af8d8face08d6d77b25d92c7"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e422502af8d8face08d6d77b25d92c7">sve2_qasymm8_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8e422502af8d8face08d6d77b25d92c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66f229d8302e5f6053823d609daf4f49"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a66f229d8302e5f6053823d609daf4f49">sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a66f229d8302e5f6053823d609daf4f49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7331b85d340ec316dc8a26cf55b1e0a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa7331b85d340ec316dc8a26cf55b1e0a">sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa7331b85d340ec316dc8a26cf55b1e0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13eef2c6a0251585da5ab62ae4e5f8f9"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a13eef2c6a0251585da5ab62ae4e5f8f9">sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a13eef2c6a0251585da5ab62ae4e5f8f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0194e5261e392e91d4eafedcb763dbf"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab0194e5261e392e91d4eafedcb763dbf">sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab0194e5261e392e91d4eafedcb763dbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab7deb2c5e8a4408b3d934f37189321b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aab7deb2c5e8a4408b3d934f37189321b">sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aab7deb2c5e8a4408b3d934f37189321b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad687c234ec8ab79d980eb333a64a14bf"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad687c234ec8ab79d980eb333a64a14bf">sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad687c234ec8ab79d980eb333a64a14bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaf6b9bd4537ecb95726014e19a4daa9"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:aeaf6b9bd4537ecb95726014e19a4daa9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">sve2_qasymm8_signed_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aeaf6b9bd4537ecb95726014e19a4daa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae68131e9a6b3a31bac12ca145b725659"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae68131e9a6b3a31bac12ca145b725659">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::ADD &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ae68131e9a6b3a31bac12ca145b725659"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd4fe0ceb7ed6ee4cb1f05302db86a3e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd4fe0ceb7ed6ee4cb1f05302db86a3e">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SUB &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abd4fe0ceb7ed6ee4cb1f05302db86a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc31d3b4c7b8f7fb0aa273bc7f4f457b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abc31d3b4c7b8f7fb0aa273bc7f4f457b">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::DIV &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abc31d3b4c7b8f7fb0aa273bc7f4f457b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa90615c12bb77fd8ecedf4fe49abe5cb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa90615c12bb77fd8ecedf4fe49abe5cb">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MIN &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa90615c12bb77fd8ecedf4fe49abe5cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a789201888e4482dd041aa4237679b9f4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a789201888e4482dd041aa4237679b9f4">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MAX &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a789201888e4482dd041aa4237679b9f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54a5215a043e7ba4a2a76d23eaf99d8d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a54a5215a043e7ba4a2a76d23eaf99d8d">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a54a5215a043e7ba4a2a76d23eaf99d8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1eab8aea47093d8566cf371dceb8526e"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1eab8aea47093d8566cf371dceb8526e">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::POWER &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1eab8aea47093d8566cf371dceb8526e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dab3765a8d7fb4a89804c3ded50862c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1dab3765a8d7fb4a89804c3ded50862c">sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1dab3765a8d7fb4a89804c3ded50862c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9453ef37dff125bbe1036a3c5983d22f"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a9453ef37dff125bbe1036a3c5983d22f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9453ef37dff125bbe1036a3c5983d22f">sve2_qasymm8_signed_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9453ef37dff125bbe1036a3c5983d22f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88eccf31c649e60c63fb44fc947a0a64"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a88eccf31c649e60c63fb44fc947a0a64">sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a88eccf31c649e60c63fb44fc947a0a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4339d3a76719c6a6086f217cf727c2cb"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4339d3a76719c6a6086f217cf727c2cb">sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4339d3a76719c6a6086f217cf727c2cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ed3dc217a696ccd86f4714ac8e73255"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0ed3dc217a696ccd86f4714ac8e73255">sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0ed3dc217a696ccd86f4714ac8e73255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dfdd3c82f5110ccffac9e0a7e6cf86f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9dfdd3c82f5110ccffac9e0a7e6cf86f">sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9dfdd3c82f5110ccffac9e0a7e6cf86f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee8567aba28b3a56ed5bd4dec3007a8a"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aee8567aba28b3a56ed5bd4dec3007a8a">sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aee8567aba28b3a56ed5bd4dec3007a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad953acb7596a0f5a88b868f149865d1c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad953acb7596a0f5a88b868f149865d1c">sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad953acb7596a0f5a88b868f149865d1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf9bcd0a1f73fa33944c7bd4d12041cd"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:abf9bcd0a1f73fa33944c7bd4d12041cd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abf9bcd0a1f73fa33944c7bd4d12041cd">sve_fp16_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abf9bcd0a1f73fa33944c7bd4d12041cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec756ab02c2d2e38049647d281398743"><td class="memTemplParams" colspan="2">template&lt;ArithmeticOperation op&gt; </td></tr>
<tr class="memitem:aec756ab02c2d2e38049647d281398743"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aec756ab02c2d2e38049647d281398743">neon_fp16_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aec756ab02c2d2e38049647d281398743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cd05ed6561d49b62c5201be588b2f21"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a7cd05ed6561d49b62c5201be588b2f21"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7cd05ed6561d49b62c5201be588b2f21">sve_fp16_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7cd05ed6561d49b62c5201be588b2f21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72684fb557998f19eca6aa52da02d11a"><td class="memTemplParams" colspan="2">template&lt;ComparisonOperation op&gt; </td></tr>
<tr class="memitem:a72684fb557998f19eca6aa52da02d11a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a72684fb557998f19eca6aa52da02d11a">neon_fp16_comparison_elementwise_binary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a72684fb557998f19eca6aa52da02d11a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a947d8062431683fa590c0adf360381e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a947d8062431683fa590c0adf360381e4">neon_fp32_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a947d8062431683fa590c0adf360381e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9a0d70dfa153ee766d9c184deac4aec"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:ac9a0d70dfa153ee766d9c184deac4aec"><td class="memTemplItemLeft" align="right" valign="top">ScalarType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac9a0d70dfa153ee766d9c184deac4aec">elementwise_op_scalar_imp</a> (<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const ScalarType &amp;a)</td></tr>
<tr class="separator:ac9a0d70dfa153ee766d9c184deac4aec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f495c76ff4bbde6bc84c4dda788e1f6"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a9f495c76ff4bbde6bc84c4dda788e1f6"><td class="memTemplItemLeft" align="right" valign="top">VectorType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9f495c76ff4bbde6bc84c4dda788e1f6">elementwise_op_imp</a> (<a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const VectorType &amp;a)</td></tr>
<tr class="separator:a9f495c76ff4bbde6bc84c4dda788e1f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09d2d3f428d66266a790a9fa05be7cc1"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a09d2d3f428d66266a790a9fa05be7cc1"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a09d2d3f428d66266a790a9fa05be7cc1">elementwise_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:a09d2d3f428d66266a790a9fa05be7cc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d141bd8c7a674e096eb68492c1e21dd"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a4d141bd8c7a674e096eb68492c1e21dd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4d141bd8c7a674e096eb68492c1e21dd">elementwise_op&lt; int8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:a4d141bd8c7a674e096eb68492c1e21dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5617a6674f304d90561fecf9411b76"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:afd5617a6674f304d90561fecf9411b76"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afd5617a6674f304d90561fecf9411b76">elementwise_op&lt; uint8_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:afd5617a6674f304d90561fecf9411b76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a696953a52bd2b684ca3b324a739091ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a696953a52bd2b684ca3b324a739091ec">neon_s32_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a696953a52bd2b684ca3b324a739091ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67087cab3d942db1430f86b509c22994"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a67087cab3d942db1430f86b509c22994">neon_qasymm8_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a67087cab3d942db1430f86b509c22994"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d72c7ec80974fef6b77f0821b66881a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d72c7ec80974fef6b77f0821b66881a">neon_qasymm8_signed_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a1d72c7ec80974fef6b77f0821b66881a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42dda581086a3bdea7efcbc01914dc64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a42dda581086a3bdea7efcbc01914dc64">sve_fp32_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a42dda581086a3bdea7efcbc01914dc64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5fb60334de87138c78d17d6f76b85a4"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:ad5fb60334de87138c78d17d6f76b85a4"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if&lt; <a class="el" href="structarm__compute_1_1utils_1_1traits_1_1is__floating__point.xhtml">utils::traits::is_floating_point</a>&lt; ScalarType &gt;::value, VectorType &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad5fb60334de87138c78d17d6f76b85a4">elementwise_op_sve_imp</a> (svbool_t pg, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const VectorType &amp;a)</td></tr>
<tr class="separator:ad5fb60334de87138c78d17d6f76b85a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1b90763fee2161591d1d66667bf2c1b"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:ac1b90763fee2161591d1d66667bf2c1b"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if&lt; std::is_integral&lt; ScalarType &gt;::value, VectorType &gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac1b90763fee2161591d1d66667bf2c1b">elementwise_op_sve_imp</a> (svbool_t pg, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const VectorType &amp;a)</td></tr>
<tr class="separator:ac1b90763fee2161591d1d66667bf2c1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a141c67fa888313cbfbae1a938098ba"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a1a141c67fa888313cbfbae1a938098ba"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1a141c67fa888313cbfbae1a938098ba">elementwise_sve_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:a1a141c67fa888313cbfbae1a938098ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37aa22fdb419a6d705e184b229cc14ee"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a37aa22fdb419a6d705e184b229cc14ee">elementwise_sve_op&lt; float16_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:a37aa22fdb419a6d705e184b229cc14ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77512808087f88d133abae9a79c0e180"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77512808087f88d133abae9a79c0e180">elementwise_sve_op&lt; float32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:a77512808087f88d133abae9a79c0e180"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e280a9f427dfc6c0f690c7083cba34d"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3e280a9f427dfc6c0f690c7083cba34d">elementwise_sve_op&lt; int32_t &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op)</td></tr>
<tr class="separator:a3e280a9f427dfc6c0f690c7083cba34d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88991a206d5322d7d289bc4c4a0af226"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a88991a206d5322d7d289bc4c4a0af226">sve_s32_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a88991a206d5322d7d289bc4c4a0af226"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dbbe2505bbf5bf5a4ab2bb234e7c48c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2dbbe2505bbf5bf5a4ab2bb234e7c48c">sve2_q8_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a2dbbe2505bbf5bf5a4ab2bb234e7c48c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b93b94881438f1871032adbdceb2958"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0b93b94881438f1871032adbdceb2958">sve_fp16_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a0b93b94881438f1871032adbdceb2958"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a577a53c0cbfebf232dd2feb3017221b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a577a53c0cbfebf232dd2feb3017221b5">neon_fp16_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a577a53c0cbfebf232dd2feb3017221b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d1345afba54a2f89d324e7c9c0eb7af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4d1345afba54a2f89d324e7c9c0eb7af">neon_q8_elementwise_unary</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a> op, const uint8_t *lut)</td></tr>
<tr class="separator:a4d1345afba54a2f89d324e7c9c0eb7af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a675a82f6a2cbbcecd80e3561257611fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a675a82f6a2cbbcecd80e3561257611fd">fp16_neon_floor</a> (const void *src, void *dst, int len)</td></tr>
<tr class="separator:a675a82f6a2cbbcecd80e3561257611fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740ffe76254ad6ca7f8f68e1e268ae7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a740ffe76254ad6ca7f8f68e1e268ae7e">fp32_neon_floor</a> (const void *src, void *dst, int len)</td></tr>
<tr class="separator:a740ffe76254ad6ca7f8f68e1e268ae7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1c2277c124e247e7ac794019c3ba563"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac1c2277c124e247e7ac794019c3ba563">fused_batch_normalization_conv_f32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *conv_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *conv_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac1c2277c124e247e7ac794019c3ba563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2bd926ffb919c8d69bbf968a708b43f"><td class="memTemplParams" colspan="2">template&lt;typename T , bool fused_activation, typename F &gt; </td></tr>
<tr class="memitem:aa2bd926ffb919c8d69bbf968a708b43f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa2bd926ffb919c8d69bbf968a708b43f">batch_normalization_nchw</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_gamma, float epsilon, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="separator:aa2bd926ffb919c8d69bbf968a708b43f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a351bdc53a92772fc3ba1069405c32529"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a351bdc53a92772fc3ba1069405c32529"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a351bdc53a92772fc3ba1069405c32529">fused_batch_normalization_conv</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *conv_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *conv_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a351bdc53a92772fc3ba1069405c32529"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a680c24b25652c9479e6ba2f81c5c2436"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a680c24b25652c9479e6ba2f81c5c2436"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a680c24b25652c9479e6ba2f81c5c2436">fused_batch_normalization_dwc_nchw</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a680c24b25652c9479e6ba2f81c5c2436"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6caaa80274300a8d8d02adea5147d153"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6caaa80274300a8d8d02adea5147d153">fused_batch_normalization_conv_f16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *conv_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *conv_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6caaa80274300a8d8d02adea5147d153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5478d2d4bfc1da85f1949ffec04bc4a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5478d2d4bfc1da85f1949ffec04bc4a7">fused_batch_normalization_dwc_nhwc_f16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5478d2d4bfc1da85f1949ffec04bc4a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9adb943c7b6cacea9bb1985a9e60064c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9adb943c7b6cacea9bb1985a9e60064c">fused_batch_normalization_dwc_nhwc_f32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9adb943c7b6cacea9bb1985a9e60064c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f25f1f4ea795d3bf4f442b1fbac3473"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3f25f1f4ea795d3bf4f442b1fbac3473">fused_batch_normalization_dwc_nchw_f16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3f25f1f4ea795d3bf4f442b1fbac3473"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d64fee71ccceb978c2b7f7ca27adf23"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9d64fee71ccceb978c2b7f7ca27adf23">fused_batch_normalization_dwc_nchw_f32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9d64fee71ccceb978c2b7f7ca27adf23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2384e44e93363e69edba5547f0cde22"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab2384e44e93363e69edba5547f0cde22"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab2384e44e93363e69edba5547f0cde22">fused_batch_normalization_dwc_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_weights, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dwc_bias, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_weights, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *fused_bias, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_mean, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_var, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_beta, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *bn_gamma, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab2384e44e93363e69edba5547f0cde22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a369e86fda1b88d9a907975bb0f79632a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a369e86fda1b88d9a907975bb0f79632a">neon_fp32_gemm_matrix_add</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, float beta)</td></tr>
<tr class="separator:a369e86fda1b88d9a907975bb0f79632a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a074a73c207b678e25b31f8076a4a7b45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a074a73c207b678e25b31f8076a4a7b45">matrix_addition_f32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, float beta)</td></tr>
<tr class="separator:a074a73c207b678e25b31f8076a4a7b45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77e69bea899bb8caf2f855db36ba2307"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77e69bea899bb8caf2f855db36ba2307">neon_fp16_gemm_matrix_add</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, float beta)</td></tr>
<tr class="separator:a77e69bea899bb8caf2f855db36ba2307"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace163115b0ead7f9f333cecff7d898fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ace163115b0ead7f9f333cecff7d898fd">neon_fp32_gemm_matrix_mul</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *lhs, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rhs, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info, float alpha, const bool is_dst_vector)</td></tr>
<tr class="separator:ace163115b0ead7f9f333cecff7d898fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef362eaeea03ec75104e13cb530ef02d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aef362eaeea03ec75104e13cb530ef02d">vector_matrix_multiply_f32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *lhs, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rhs, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info, float alpha)</td></tr>
<tr class="separator:aef362eaeea03ec75104e13cb530ef02d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a614928b75209ad4ec4e4cdfab5e19cc8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a614928b75209ad4ec4e4cdfab5e19cc8">matrix_matrix_multiply_f32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *lhs, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rhs, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info, float alpha)</td></tr>
<tr class="separator:a614928b75209ad4ec4e4cdfab5e19cc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad21abd99f7f0339e68cd6106229a06e6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad21abd99f7f0339e68cd6106229a06e6">neon_fp16_gemm_matrix_mul</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *lhs, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rhs, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info, float alpha, const bool is_dst_vector)</td></tr>
<tr class="separator:ad21abd99f7f0339e68cd6106229a06e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af04cae6a0d49608ac063e8d638ea9780"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af04cae6a0d49608ac063e8d638ea9780">neon_fp32_computeallanchors</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *anchors, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *all_anchors, <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> anchors_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af04cae6a0d49608ac063e8d638ea9780"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef4214cfa8378eaebdbd1d3dc139f370"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aef4214cfa8378eaebdbd1d3dc139f370">compute_all_anchors_qasymm16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *anchors, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *all_anchors, <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> anchors_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aef4214cfa8378eaebdbd1d3dc139f370"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada5ad0dbce712a2380e03e821bbe9de2"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ada5ad0dbce712a2380e03e821bbe9de2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ada5ad0dbce712a2380e03e821bbe9de2">compute_all_anchors</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *anchors, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *all_anchors, <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> anchors_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ada5ad0dbce712a2380e03e821bbe9de2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9e95678ec007131159995d2f238636a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa9e95678ec007131159995d2f238636a">neon_qu16_computeallanchors</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *anchors, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *all_anchors, <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> anchors_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa9e95678ec007131159995d2f238636a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02e40293e17e9c6a7581233e13c666eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a02e40293e17e9c6a7581233e13c666eb">neon_fp16_computeallanchors</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *anchors, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *all_anchors, <a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a> anchors_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a02e40293e17e9c6a7581233e13c666eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9496198912f56c21412a6c7269adb961"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9496198912f56c21412a6c7269adb961">neon_fp32_instancenorm</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float gamma, float beta, float epsilon, bool use_mixed_precision, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9496198912f56c21412a6c7269adb961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a3377ac3e3280b91c86b775c696675a"><td class="memTemplParams" colspan="2">template&lt;typename InputType , typename AccType &gt; </td></tr>
<tr class="memitem:a4a3377ac3e3280b91c86b775c696675a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4a3377ac3e3280b91c86b775c696675a">vector_float_sum</a> (AccType &amp;result, AccType &amp;result_square, const InputType &amp;inputs)</td></tr>
<tr class="separator:a4a3377ac3e3280b91c86b775c696675a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abae8774fe34bba0075fc5f9df030c019"><td class="memTemplParams" colspan="2">template&lt;typename InputType , typename AccType &gt; </td></tr>
<tr class="memitem:abae8774fe34bba0075fc5f9df030c019"><td class="memTemplItemLeft" align="right" valign="top">InputType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abae8774fe34bba0075fc5f9df030c019">vector_float_norm</a> (const InputType &amp;inputs, const AccType &amp;vec_mean, const AccType &amp;vec_multip, const AccType &amp;vec_beta)</td></tr>
<tr class="separator:abae8774fe34bba0075fc5f9df030c019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed803ee96db751816bca1a17adca8f79"><td class="memTemplParams" colspan="2">template&lt;typename T , typename AccType &gt; </td></tr>
<tr class="memitem:aed803ee96db751816bca1a17adca8f79"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aed803ee96db751816bca1a17adca8f79">instance_normalization_nchw</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float gamma, float beta, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aed803ee96db751816bca1a17adca8f79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afffa511a4a4aedc45434f9bddd02ca24"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afffa511a4a4aedc45434f9bddd02ca24">instance_normalization_nchw&lt; float &gt;</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float gamma, float beta, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afffa511a4a4aedc45434f9bddd02ca24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c7fd7cfd75b0e0e4bc90000bcb13f53"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7c7fd7cfd75b0e0e4bc90000bcb13f53">neon_fp16_instancenorm</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float gamma, float beta, float epsilon, bool use_mixed_precision, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7c7fd7cfd75b0e0e4bc90000bcb13f53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a289537cdf057a33f61417d4367bf7acc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a289537cdf057a33f61417d4367bf7acc">neon_fp32_l2_normalize_x</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *sum, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, size_t unused_axis)</td></tr>
<tr class="separator:a289537cdf057a33f61417d4367bf7acc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57e5af4bd548ad1e725c586be0fe32c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a57e5af4bd548ad1e725c586be0fe32c2">neon_fp32_l2_normalize_yz</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *sum, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, size_t axis)</td></tr>
<tr class="separator:a57e5af4bd548ad1e725c586be0fe32c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0842104a48f814276c1c33c380991f7c"><td class="memTemplParams" colspan="2">template&lt;typename T , int S&gt; </td></tr>
<tr class="memitem:a0842104a48f814276c1c33c380991f7c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0842104a48f814276c1c33c380991f7c">l2_normalize_x</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *sum, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0842104a48f814276c1c33c380991f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeafec2a1966410c78ff2f822b1fcec66"><td class="memTemplParams" colspan="2">template&lt;typename T , int S&gt; </td></tr>
<tr class="memitem:aeafec2a1966410c78ff2f822b1fcec66"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeafec2a1966410c78ff2f822b1fcec66">l2_normalize_yz</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *sum, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, size_t axis)</td></tr>
<tr class="separator:aeafec2a1966410c78ff2f822b1fcec66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaeddf3dd8e62805aa3189cae6e9eb240"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaeddf3dd8e62805aa3189cae6e9eb240">neon_fp16_l2_normalize_x</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *sum, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, size_t axis)</td></tr>
<tr class="separator:aaeddf3dd8e62805aa3189cae6e9eb240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1db242ae3c8a36146943e66240b68394"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1db242ae3c8a36146943e66240b68394">neon_fp16_l2_normalize_yz</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *sum, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, size_t axis)</td></tr>
<tr class="separator:a1db242ae3c8a36146943e66240b68394"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdb5a72b44bc8efeee1b07d0d2db9787"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abdb5a72b44bc8efeee1b07d0d2db9787">neon_fp32_maxunpooling</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *indices, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abdb5a72b44bc8efeee1b07d0d2db9787"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20c77191f56411327e80c9fe3b3d837b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a20c77191f56411327e80c9fe3b3d837b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a20c77191f56411327e80c9fe3b3d837b">max_unpooling</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *indices, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a20c77191f56411327e80c9fe3b3d837b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae90d41b1f4a8a71813f639d9aa70c96b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae90d41b1f4a8a71813f639d9aa70c96b">neon_qs8_maxunpooling</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *indices, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ae90d41b1f4a8a71813f639d9aa70c96b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a380df8a1a376c3a1e1e1d3db96763518"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a380df8a1a376c3a1e1e1d3db96763518">neon_qu8_maxunpooling</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *indices, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a380df8a1a376c3a1e1e1d3db96763518"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a699fd3f49b2dc8962ae85981a29bd36f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a699fd3f49b2dc8962ae85981a29bd36f">neon_fp16_maxunpooling</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *indices, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a699fd3f49b2dc8962ae85981a29bd36f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ee1b9fa3211487ff04f668ee2fb413c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3ee1b9fa3211487ff04f668ee2fb413c">neon_fp32_meanstddevnorm</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3ee1b9fa3211487ff04f668ee2fb413c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6c7d81b90742a0ab1c99a495c094285"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , int size&gt; </td></tr>
<tr class="memitem:ae6c7d81b90742a0ab1c99a495c094285"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae6c7d81b90742a0ab1c99a495c094285">mean_stddev_normalization</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ae6c7d81b90742a0ab1c99a495c094285"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeed4536d89bb131303af92922deb0a68"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeed4536d89bb131303af92922deb0a68">mean_stddev_normalization&lt; float, 4 &gt;</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aeed4536d89bb131303af92922deb0a68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92e7e2b5ae1f89ff6c4191797700a41d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a92e7e2b5ae1f89ff6c4191797700a41d">neon_qasymm8_meanstddevnorm</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a92e7e2b5ae1f89ff6c4191797700a41d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee6b63002da7f5c2eb9e58122f704a71"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aee6b63002da7f5c2eb9e58122f704a71">neon_fp16_meanstddevnorm</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float epsilon, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aee6b63002da7f5c2eb9e58122f704a71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01fe446199ad99735bc0fcc4c4734b01"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a01fe446199ad99735bc0fcc4c4734b01">mul_F32_F32_F32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, float scale)</td></tr>
<tr class="separator:a01fe446199ad99735bc0fcc4c4734b01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca645d55b58aed670b5fea206486df9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aca645d55b58aed670b5fea206486df9a">mul_F16_F16_F16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, float scale)</td></tr>
<tr class="separator:aca645d55b58aed670b5fea206486df9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdc48966718036ae58fd06afea4bb94a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acdc48966718036ae58fd06afea4bb94a">neon_normalize_float32_4_0_2D</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:acdc48966718036ae58fd06afea4bb94a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85a0a0292bb19ad458617cddaa2c8450"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a85a0a0292bb19ad458617cddaa2c8450">neon_normalize_float32_4_0</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:a85a0a0292bb19ad458617cddaa2c8450"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba728f7ed4bb5852d3785f9c3c19e96"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2ba728f7ed4bb5852d3785f9c3c19e96">neon_normalize_float32_4_1_2D</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:a2ba728f7ed4bb5852d3785f9c3c19e96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbdf409e0ccffb72cf0da4423ee40e76"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbdf409e0ccffb72cf0da4423ee40e76">neon_normalize_float32_4_1</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:abbdf409e0ccffb72cf0da4423ee40e76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0151f7451dd40370fcc9e8492eb0f167"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0151f7451dd40370fcc9e8492eb0f167">neon_normalize_float32_4_2</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:a0151f7451dd40370fcc9e8492eb0f167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac67308f22f73503c7a543fa772257a33"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac67308f22f73503c7a543fa772257a33">neon_normalize_float16_8_0_2D</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:ac67308f22f73503c7a543fa772257a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f883070aa6e1648eeea6283cd55fa99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1f883070aa6e1648eeea6283cd55fa99">neon_normalize_float16_8_0</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:a1f883070aa6e1648eeea6283cd55fa99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23054e184000df87c18f74539239a448"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a23054e184000df87c18f74539239a448">neon_normalize_float16_8_1_2D</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:a23054e184000df87c18f74539239a448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0bcf5bfe2428dc4ba0c9e17de0c846"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2e0bcf5bfe2428dc4ba0c9e17de0c846">neon_normalize_float16_8_1</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:a2e0bcf5bfe2428dc4ba0c9e17de0c846"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa80eb743ddc903016261a7854f79e7b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa80eb743ddc903016261a7854f79e7b3">neon_normalize_float16_8_2</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in_squared, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> ninfo)</td></tr>
<tr class="separator:aa80eb743ddc903016261a7854f79e7b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0d0c68bacf4e3bdbe6813e769cd46c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af0d0c68bacf4e3bdbe6813e769cd46c2">poolingMxN_fp32_neon_nhwc_kernel_indices</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af0d0c68bacf4e3bdbe6813e769cd46c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf656cc44c210ddef37bf59c2851a713"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acf656cc44c210ddef37bf59c2851a713">poolingMxN_fp32_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acf656cc44c210ddef37bf59c2851a713"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8377fe826bf521b54420609f64305833"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8377fe826bf521b54420609f64305833">poolingMxN_qasymm8_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8377fe826bf521b54420609f64305833"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84b7dbf3cd11ed10bd6d276833450744"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a84b7dbf3cd11ed10bd6d276833450744">poolingMxN_qasymm8_signed_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a84b7dbf3cd11ed10bd6d276833450744"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8966e308573541aa625e4a7f955d424"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8966e308573541aa625e4a7f955d424">poolingMxN_fp16_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af8966e308573541aa625e4a7f955d424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43f4b3af9ede2d90ab47796b6eeae22d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a43f4b3af9ede2d90ab47796b6eeae22d"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a43f4b3af9ede2d90ab47796b6eeae22d">get_initial_min</a> (bool use_inf_as_limit)</td></tr>
<tr class="separator:a43f4b3af9ede2d90ab47796b6eeae22d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80763dd41a2676071d6c4bb52801bc41"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a80763dd41a2676071d6c4bb52801bc41"><td class="memTemplItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80763dd41a2676071d6c4bb52801bc41">offset_no_padding</a> (uint32_t padded_offset, const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;id, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;info, int pool_stride_x, int pool_stride_y, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>)</td></tr>
<tr class="separator:a80763dd41a2676071d6c4bb52801bc41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fb9537b47012988a3865769e0e0d009"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7fb9537b47012988a3865769e0e0d009"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7fb9537b47012988a3865769e0e0d009">poolingMxN_q8_neon_nhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst1, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_src, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7fb9537b47012988a3865769e0e0d009"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade9fbd383266a15c5a4f149ff89bedba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ade9fbd383266a15c5a4f149ff89bedba">neon_q8_pool3d</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ade9fbd383266a15c5a4f149ff89bedba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84bffd1c044a2ad84283a4c6a2e83cec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a84bffd1c044a2ad84283a4c6a2e83cec">neon_q8_signed_pool3d</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a84bffd1c044a2ad84283a4c6a2e83cec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab13b326bfbcf3b8a3df50467840572f2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab13b326bfbcf3b8a3df50467840572f2">neon_fp16_pool3d</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab13b326bfbcf3b8a3df50467840572f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1376382ed5c959529d464bce2c7ade60"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1376382ed5c959529d464bce2c7ade60">neon_fp32_pool3d</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1376382ed5c959529d464bce2c7ade60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab90f963b3f474cc05ae27dc3544df76a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab90f963b3f474cc05ae27dc3544df76a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab90f963b3f474cc05ae27dc3544df76a">poolingMxNxD_fp_neon_ndhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab90f963b3f474cc05ae27dc3544df76a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf5abf1b3ec5bf068860463401caf67e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:abf5abf1b3ec5bf068860463401caf67e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abf5abf1b3ec5bf068860463401caf67e">poolingMxNxD_q8_neon_ndhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abf5abf1b3ec5bf068860463401caf67e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0fbb63ac498fd9817cfca2e5e445148"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab0fbb63ac498fd9817cfca2e5e445148"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab0fbb63ac498fd9817cfca2e5e445148">avg_poolingMxNxD_q8_neon_ndhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_out, const int window_step_x)</td></tr>
<tr class="separator:ab0fbb63ac498fd9817cfca2e5e445148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f764a97cef5e5afa5daaf6ec2ee9f2b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6f764a97cef5e5afa5daaf6ec2ee9f2b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6f764a97cef5e5afa5daaf6ec2ee9f2b">max_poolingMxNxD_q8_neon_ndhwc</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst0, <a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window_out, const int window_step_x)</td></tr>
<tr class="separator:a6f764a97cef5e5afa5daaf6ec2ee9f2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d3f077656e993e4d09054fb5addad39"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1d3f077656e993e4d09054fb5addad39">fp32_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1d3f077656e993e4d09054fb5addad39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b0bf2d3bb1a9d2c0ea9a052136aaed4"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9b0bf2d3bb1a9d2c0ea9a052136aaed4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9b0bf2d3bb1a9d2c0ea9a052136aaed4">neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9b0bf2d3bb1a9d2c0ea9a052136aaed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af758e0f1c2ee0fcbfaf4070ed39713a8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af758e0f1c2ee0fcbfaf4070ed39713a8">u8_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af758e0f1c2ee0fcbfaf4070ed39713a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d863f1cf55ba6414143ca56c18f90b2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5d863f1cf55ba6414143ca56c18f90b2">u16_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5d863f1cf55ba6414143ca56c18f90b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e91697bb00bef9bf1ccdb30c862c482"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7e91697bb00bef9bf1ccdb30c862c482">u32_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7e91697bb00bef9bf1ccdb30c862c482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf629d39ed5424c78a91380d89f77ea4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaf629d39ed5424c78a91380d89f77ea4">s8_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aaf629d39ed5424c78a91380d89f77ea4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69d4ed27232bf67f70a2344ee2524d8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a69d4ed27232bf67f70a2344ee2524d8c">s16_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a69d4ed27232bf67f70a2344ee2524d8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe56ca8fcab6c074fef28d73a349bdc3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afe56ca8fcab6c074fef28d73a349bdc3">s32_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afe56ca8fcab6c074fef28d73a349bdc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8607f917f09d89342011eca8ac3dd6df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8607f917f09d89342011eca8ac3dd6df">fp16_neon_range_function</a> (<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, float start, float <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8607f917f09d89342011eca8ac3dd6df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a334bfe81953ded3a839cc8918fc9d84b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a334bfe81953ded3a839cc8918fc9d84b">neon_fp32_roialign</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rois, <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info)</td></tr>
<tr class="separator:a334bfe81953ded3a839cc8918fc9d84b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a295486f37ddf5262ab18f2e4ce1efaf6"><td class="memTemplParams" colspan="2">template&lt;typename input_data_type &gt; </td></tr>
<tr class="memitem:a295486f37ddf5262ab18f2e4ce1efaf6"><td class="memTemplItemLeft" align="right" valign="top">input_data_type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a295486f37ddf5262ab18f2e4ce1efaf6">roi_align_1x1</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, unsigned int roi_batch, float region_start_x, float bin_size_x, int grid_size_x, float region_end_x, float region_start_y, float bin_size_y, int grid_size_y, float region_end_y, int pz)</td></tr>
<tr class="memdesc:a295486f37ddf5262ab18f2e4ce1efaf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Average pooling over an aligned window.  <a href="namespacearm__compute_1_1cpu.xhtml#a295486f37ddf5262ab18f2e4ce1efaf6">More...</a><br /></td></tr>
<tr class="separator:a295486f37ddf5262ab18f2e4ce1efaf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb7f6883b48ff894a6a0ab9eb6467be0"><td class="memTemplParams" colspan="2">template&lt;typename input_data_type &gt; </td></tr>
<tr class="memitem:acb7f6883b48ff894a6a0ab9eb6467be0"><td class="memTemplItemLeft" align="right" valign="top">input_data_type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb7f6883b48ff894a6a0ab9eb6467be0">roi_align_1x1_qasymm8</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, unsigned int roi_batch, float region_start_x, float bin_size_x, int grid_size_x, float region_end_x, float region_start_y, float bin_size_y, int grid_size_y, float region_end_y, int pz, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_qinfo)</td></tr>
<tr class="memdesc:acb7f6883b48ff894a6a0ab9eb6467be0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Average pooling over an aligned window.  <a href="namespacearm__compute_1_1cpu.xhtml#acb7f6883b48ff894a6a0ab9eb6467be0">More...</a><br /></td></tr>
<tr class="separator:acb7f6883b48ff894a6a0ab9eb6467be0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae34c923cebe0f52cde52dbef0eca2d5b"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae34c923cebe0f52cde52dbef0eca2d5b">compute_region_coordinate</a> (int p, float bin_size, float roi_anchor, float max_value)</td></tr>
<tr class="separator:ae34c923cebe0f52cde52dbef0eca2d5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaad622e2ecb6e5239714d2b749c528d"><td class="memTemplParams" colspan="2">template&lt;typename input_data_type , typename roi_data_type &gt; </td></tr>
<tr class="memitem:abaad622e2ecb6e5239714d2b749c528d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abaad622e2ecb6e5239714d2b749c528d">roi_align</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rois, <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info)</td></tr>
<tr class="separator:abaad622e2ecb6e5239714d2b749c528d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3379ba3f9c8e44bc3025c938591f2493"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3379ba3f9c8e44bc3025c938591f2493">neon_qu8_roialign</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rois, <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info)</td></tr>
<tr class="separator:a3379ba3f9c8e44bc3025c938591f2493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90df037a4cda55d9fe22a6f32821306c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a90df037a4cda55d9fe22a6f32821306c">neon_qs8_roialign</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rois, <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info)</td></tr>
<tr class="separator:a90df037a4cda55d9fe22a6f32821306c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1d8c05596996977afe27a1cf62a65bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af1d8c05596996977afe27a1cf62a65bf">neon_fp16_roialign</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *rois, <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;info)</td></tr>
<tr class="separator:af1d8c05596996977afe27a1cf62a65bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a503eae482390645cffa1439822fa864a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a503eae482390645cffa1439822fa864a">s8_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a503eae482390645cffa1439822fa864a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f0a2858d9233ec0443a1d1f2b3ca07c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9f0a2858d9233ec0443a1d1f2b3ca07c">u8_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9f0a2858d9233ec0443a1d1f2b3ca07c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2aa72fde3eb94fa8822a4bb84e8d468"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae2aa72fde3eb94fa8822a4bb84e8d468">s16_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ae2aa72fde3eb94fa8822a4bb84e8d468"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a594fa7dfda56b0775950658f6937af9c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a594fa7dfda56b0775950658f6937af9c">qasymm8_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a594fa7dfda56b0775950658f6937af9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5afa676c133f2bd00b896680e5176cd4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5afa676c133f2bd00b896680e5176cd4">qasymm8_signed_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5afa676c133f2bd00b896680e5176cd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5df47efaaa19dd62657db56f3d6129f9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5df47efaaa19dd62657db56f3d6129f9">fp16_common_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5df47efaaa19dd62657db56f3d6129f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7110248fdbe9eb708cda53069adaa471"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7110248fdbe9eb708cda53069adaa471">fp16_bilinear_neon_scale_nchw</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7110248fdbe9eb708cda53069adaa471"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7fbf3b06a874297ca3aea18783562c4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae7fbf3b06a874297ca3aea18783562c4">fp16_nearest_neon_scale_nchw</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ae7fbf3b06a874297ca3aea18783562c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9b26a65178cfe477d292f394c0638b3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af9b26a65178cfe477d292f394c0638b3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af9b26a65178cfe477d292f394c0638b3">nearest_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af9b26a65178cfe477d292f394c0638b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19c90203a243568f6429307584a1475a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a19c90203a243568f6429307584a1475a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a19c90203a243568f6429307584a1475a">bilinear_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a19c90203a243568f6429307584a1475a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bc4661d8856bc18b82ecece8694634c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2bc4661d8856bc18b82ecece8694634c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2bc4661d8856bc18b82ecece8694634c">common_neon_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2bc4661d8856bc18b82ecece8694634c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab68fd045b9a5083bb30745437cbb603a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab68fd045b9a5083bb30745437cbb603a">fp32_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab68fd045b9a5083bb30745437cbb603a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11bc1d142af115f27986158afcd94360"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a11bc1d142af115f27986158afcd94360">u8_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a11bc1d142af115f27986158afcd94360"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e667bbff11c6a32d56b10f0e9626438"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4e667bbff11c6a32d56b10f0e9626438">s16_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4e667bbff11c6a32d56b10f0e9626438"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a433a50d9bda93287b0e904adb3209b1a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a433a50d9bda93287b0e904adb3209b1a">fp16_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a433a50d9bda93287b0e904adb3209b1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8225bb56462d5dc53bcd91a7ab7e427"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab8225bb56462d5dc53bcd91a7ab7e427">qasymm8_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ab8225bb56462d5dc53bcd91a7ab7e427"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dfe2c548a30336abb7be2dca919a71d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4dfe2c548a30336abb7be2dca919a71d">qasymm8_signed_sve_scale</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *offsets, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dx, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dy, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a> border_mode, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> constant_border_value, float sampling_offset, bool align_corners, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a4dfe2c548a30336abb7be2dca919a71d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b159321540febe0876bcf2a30ddd573"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7b159321540febe0876bcf2a30ddd573">neon_f32_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a7b159321540febe0876bcf2a30ddd573"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a235fbeb87b90d63f750dc0fb28a1df8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a235fbeb87b90d63f750dc0fb28a1df8c">neon_f32_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a235fbeb87b90d63f750dc0fb28a1df8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbe41cb9880a3a6a154741e478000e70"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:abbe41cb9880a3a6a154741e478000e70"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbe41cb9880a3a6a154741e478000e70">select_op</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *cond, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const int window_step_x, const int window_start_x, const int window_end_x, const int limit, VectorType(*condition_conversion)(const uint8_t *))</td></tr>
<tr class="separator:abbe41cb9880a3a6a154741e478000e70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc318e8b6238acea1db57f15129e346c"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:acc318e8b6238acea1db57f15129e346c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acc318e8b6238acea1db57f15129e346c">select_op_8</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *cond, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acc318e8b6238acea1db57f15129e346c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa2b2016e44e25ee4937bc1bd9be8981"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:afa2b2016e44e25ee4937bc1bd9be8981"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afa2b2016e44e25ee4937bc1bd9be8981">select_op_16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *cond, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afa2b2016e44e25ee4937bc1bd9be8981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b064432e48e53f48155f9c9ed3a0726"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType , typename VectorType &gt; </td></tr>
<tr class="memitem:a9b064432e48e53f48155f9c9ed3a0726"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9b064432e48e53f48155f9c9ed3a0726">select_op_32</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *cond, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9b064432e48e53f48155f9c9ed3a0726"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1196a3701dd39364fd4ffbcf8c34772f"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a1196a3701dd39364fd4ffbcf8c34772f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1196a3701dd39364fd4ffbcf8c34772f">select_op_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *cond, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in1, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in2, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1196a3701dd39364fd4ffbcf8c34772f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fccbafb6dd43e52f82ac6e046ca54e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6fccbafb6dd43e52f82ac6e046ca54e8">neon_s8_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6fccbafb6dd43e52f82ac6e046ca54e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60b481be9c9285daa60221f1e0f7440a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a60b481be9c9285daa60221f1e0f7440a">neon_s16_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a60b481be9c9285daa60221f1e0f7440a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9e21306be38f9b98e4ef4f830c2799b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa9e21306be38f9b98e4ef4f830c2799b">neon_s32_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa9e21306be38f9b98e4ef4f830c2799b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb9f2796ed654c5f01cc81751b6c3ace"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb9f2796ed654c5f01cc81751b6c3ace">neon_s8_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acb9f2796ed654c5f01cc81751b6c3ace"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01d5234b292775035a018b7843f2d3b2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a01d5234b292775035a018b7843f2d3b2">neon_s16_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a01d5234b292775035a018b7843f2d3b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a569dfb122469904884d875fc75efc9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a569dfb122469904884d875fc75efc9">neon_s32_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a0a569dfb122469904884d875fc75efc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14c68a05fddd0d81615f4a155e6a4433"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a14c68a05fddd0d81615f4a155e6a4433">neon_u8_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a14c68a05fddd0d81615f4a155e6a4433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf7db8f8a95e6bf26a8185ec864fb2f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abf7db8f8a95e6bf26a8185ec864fb2f1">neon_u16_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abf7db8f8a95e6bf26a8185ec864fb2f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74b270b1634701a9b56500cbc5d7861b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a74b270b1634701a9b56500cbc5d7861b">neon_u32_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a74b270b1634701a9b56500cbc5d7861b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a397dba8ef3313bb4d4ba40509527be8d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a397dba8ef3313bb4d4ba40509527be8d">neon_u8_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a397dba8ef3313bb4d4ba40509527be8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad96c727881fe21925e370537c2841e3f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ad96c727881fe21925e370537c2841e3f">neon_u16_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ad96c727881fe21925e370537c2841e3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa595d2a67367aa82c2e7d7dadfc5dd36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa595d2a67367aa82c2e7d7dadfc5dd36">neon_u32_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa595d2a67367aa82c2e7d7dadfc5dd36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1178c7489ce4729ff482c5d7b06355e8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1178c7489ce4729ff482c5d7b06355e8">neon_f16_select_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1178c7489ce4729ff482c5d7b06355e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a75b7cedf76680be80b90c20922a3e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9a75b7cedf76680be80b90c20922a3e7">neon_f16_select_not_same_rank</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *c, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *x, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *y, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9a75b7cedf76680be80b90c20922a3e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade70a1a9e32344ca8493c754c6ae57d4"><td class="memTemplParams" colspan="2">template&lt;bool IS_LOG&gt; </td></tr>
<tr class="memitem:ade70a1a9e32344ca8493c754c6ae57d4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ade70a1a9e32344ca8493c754c6ae57d4">neon_fp32_softmax</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ade70a1a9e32344ca8493c754c6ae57d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbe3d6cd6d00011918ef48fae85674a5"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbe3d6cd6d00011918ef48fae85674a5">neon_fp32_softmax&lt; true &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abbe3d6cd6d00011918ef48fae85674a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2078854f03f35e14b1d3876e435c4ec8"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2078854f03f35e14b1d3876e435c4ec8">neon_fp32_softmax&lt; false &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2078854f03f35e14b1d3876e435c4ec8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c458f6616fcb859a32d7cf5e8ff217f"><td class="memTemplParams" colspan="2">template&lt;typename T , bool IS_LOG&gt; </td></tr>
<tr class="memitem:a1c458f6616fcb859a32d7cf5e8ff217f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">neon_softmax_x_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a1c458f6616fcb859a32d7cf5e8ff217f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9021da1d85f0769fe8304a4004d52b36"><td class="memTemplParams" colspan="2">template&lt;typename T , bool IS_LOG&gt; </td></tr>
<tr class="memitem:a9021da1d85f0769fe8304a4004d52b36"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">neon_softmax_non_x_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a9021da1d85f0769fe8304a4004d52b36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3aaf673970c1794596cb544ad57a21b"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa3aaf673970c1794596cb544ad57a21b">neon_softmax_x_quantized&lt; qasymm8_signed_t, true &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa3aaf673970c1794596cb544ad57a21b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72a1d2c1987c73fc91646342e8acf3b2"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a72a1d2c1987c73fc91646342e8acf3b2">neon_softmax_x_quantized&lt; qasymm8_signed_t, false &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a72a1d2c1987c73fc91646342e8acf3b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af506cbd9b9e544e37b3f5d2f47aaac3f"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#af506cbd9b9e544e37b3f5d2f47aaac3f">neon_softmax_x_quantized&lt; qasymm8_t, true &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:af506cbd9b9e544e37b3f5d2f47aaac3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa865ca925c6f9ea8b8c9f51041859ccf"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa865ca925c6f9ea8b8c9f51041859ccf">neon_softmax_x_quantized&lt; qasymm8_t, false &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa865ca925c6f9ea8b8c9f51041859ccf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d7f3080ef278a831c60b51ad9a74567"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5d7f3080ef278a831c60b51ad9a74567">neon_softmax_non_x_quantized&lt; qasymm8_signed_t, true &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a5d7f3080ef278a831c60b51ad9a74567"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d24734f5becfb5db7582d9fc49f0e4"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a56d24734f5becfb5db7582d9fc49f0e4">neon_softmax_non_x_quantized&lt; qasymm8_signed_t, false &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a56d24734f5becfb5db7582d9fc49f0e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e0ecab27ddba7f6f81d3d874502c55c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2e0ecab27ddba7f6f81d3d874502c55c">neon_softmax_non_x_quantized&lt; qasymm8_t, true &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a2e0ecab27ddba7f6f81d3d874502c55c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3871c43d0d557bad9c2f2e5b118b0d1c"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3871c43d0d557bad9c2f2e5b118b0d1c">neon_softmax_non_x_quantized&lt; qasymm8_t, false &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a3871c43d0d557bad9c2f2e5b118b0d1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a220170f52a43bcae9b6601cf64c57d78"><td class="memTemplParams" colspan="2">template&lt;typename T , bool IS_LOG&gt; </td></tr>
<tr class="memitem:a220170f52a43bcae9b6601cf64c57d78"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a220170f52a43bcae9b6601cf64c57d78">neon_softmax_x_float</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a220170f52a43bcae9b6601cf64c57d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2bcab3c2f23155b736d39ac3c43b073"><td class="memTemplParams" colspan="2">template&lt;typename T , bool IS_LOG&gt; </td></tr>
<tr class="memitem:aa2bcab3c2f23155b736d39ac3c43b073"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa2bcab3c2f23155b736d39ac3c43b073">neon_softmax_non_x_float</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa2bcab3c2f23155b736d39ac3c43b073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6baa57fb22eece212466b7fce7e74d32"><td class="memTemplParams" colspan="2">template&lt;bool IS_LOG&gt; </td></tr>
<tr class="memitem:a6baa57fb22eece212466b7fce7e74d32"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6baa57fb22eece212466b7fce7e74d32">neon_qasymm8_softmax</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6baa57fb22eece212466b7fce7e74d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a083ad2760e0a9825a117bacb77a31cff"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a083ad2760e0a9825a117bacb77a31cff">neon_qasymm8_softmax&lt; true &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a083ad2760e0a9825a117bacb77a31cff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affbf59ea9c533b60cd6ec14651742a32"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#affbf59ea9c533b60cd6ec14651742a32">neon_qasymm8_softmax&lt; false &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:affbf59ea9c533b60cd6ec14651742a32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e779d4c2dd2bcc8940e5a51c7d10c53"><td class="memTemplParams" colspan="2">template&lt;bool IS_LOG&gt; </td></tr>
<tr class="memitem:a6e779d4c2dd2bcc8940e5a51c7d10c53"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6e779d4c2dd2bcc8940e5a51c7d10c53">neon_qasymm8_signed_softmax</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a6e779d4c2dd2bcc8940e5a51c7d10c53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94c803cbbf07ea64c979844cc4b55378"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a94c803cbbf07ea64c979844cc4b55378">neon_qasymm8_signed_softmax&lt; true &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a94c803cbbf07ea64c979844cc4b55378"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2759e790417f0e5b27642ab37abebc5"><td class="memItemLeft" align="right" valign="top">template void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac2759e790417f0e5b27642ab37abebc5">neon_qasymm8_signed_softmax&lt; false &gt;</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:ac2759e790417f0e5b27642ab37abebc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55285cff4817fd07fc12c9a63ac6da0c"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a55285cff4817fd07fc12c9a63ac6da0c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a55285cff4817fd07fc12c9a63ac6da0c">sve_logits_1d_max</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="memdesc:a55285cff4817fd07fc12c9a63ac6da0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">TODO: (COMPMID-6505) Similar to Neon(TM), this implementation be converted to a single kernel that performs softmax operation.  <a href="namespacearm__compute_1_1cpu.xhtml#a55285cff4817fd07fc12c9a63ac6da0c">More...</a><br /></td></tr>
<tr class="separator:a55285cff4817fd07fc12c9a63ac6da0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36b9463036932300ebfc671d0efeee39"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:a36b9463036932300ebfc671d0efeee39"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a36b9463036932300ebfc671d0efeee39">sve_softmax_logits_1d_float</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *max, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, bool is_log, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a36b9463036932300ebfc671d0efeee39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5013e8be22e6e48f85184dcea771e4c"><td class="memTemplParams" colspan="2">template&lt;typename ScalarType &gt; </td></tr>
<tr class="memitem:aa5013e8be22e6e48f85184dcea771e4c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa5013e8be22e6e48f85184dcea771e4c">sve2_softmax_logits_1d_quantized</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *max, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, float beta, bool is_log, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="memdesc:aa5013e8be22e6e48f85184dcea771e4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">TODO: (COMPMID-6505) Similar to Neon(TM), this implementation be converted to a single kernel that performs softmax operation.  <a href="namespacearm__compute_1_1cpu.xhtml#aa5013e8be22e6e48f85184dcea771e4c">More...</a><br /></td></tr>
<tr class="separator:aa5013e8be22e6e48f85184dcea771e4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7e09d2fcad987231f530acd97f7d57f"><td class="memTemplParams" colspan="2">template&lt;bool IS_LOG&gt; </td></tr>
<tr class="memitem:aa7e09d2fcad987231f530acd97f7d57f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa7e09d2fcad987231f530acd97f7d57f">neon_fp16_softmax</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *in, void *const tmp, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *out, const float beta, int axis, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:aa7e09d2fcad987231f530acd97f7d57f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42caf294cb15e85fa40a9bcc63c8b513"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a42caf294cb15e85fa40a9bcc63c8b513"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a42caf294cb15e85fa40a9bcc63c8b513">sub_same_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a42caf294cb15e85fa40a9bcc63c8b513"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd3f44874d06b5e32227f1571ac4d6f5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd3f44874d06b5e32227f1571ac4d6f5">sub_qasymm8_neon_fixedpoint</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:abd3f44874d06b5e32227f1571ac4d6f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a821669b9a7371c137101867896163a11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a821669b9a7371c137101867896163a11">sub_qasymm8_signed_neon_fixedpoint</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a821669b9a7371c137101867896163a11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee71620d39960df76ed85d99151f255"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#acee71620d39960df76ed85d99151f255">sub_qasymm8_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:acee71620d39960df76ed85d99151f255"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8acc2922a77f7c97eb724c61d30440fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8acc2922a77f7c97eb724c61d30440fc">sub_qasymm8_signed_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a8acc2922a77f7c97eb724c61d30440fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe75050a14b59a82245e5ed873bdf1ab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afe75050a14b59a82245e5ed873bdf1ab">sub_qsymm16_neon</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:afe75050a14b59a82245e5ed873bdf1ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a686a3f866d2ab2658aa1c1e30d906996"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a686a3f866d2ab2658aa1c1e30d906996">sub_same_neon_fp16</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src0, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *src1, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *dst, const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;policy, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window)</td></tr>
<tr class="separator:a686a3f866d2ab2658aa1c1e30d906996"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a443d09c5e20d13e6f4063d0f60616fb5"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> = <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a></td></tr>
<tr class="separator:a443d09c5e20d13e6f4063d0f60616fb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2daf774ab1f2b95de283245a361d455f"><td class="memItemLeft" align="right" valign="top">const size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2daf774ab1f2b95de283245a361d455f">width_idx</a> = <a class="el" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>)</td></tr>
<tr class="separator:a2daf774ab1f2b95de283245a361d455f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6d92f521dc4f05ac7f4c856dcfe263e"><td class="memItemLeft" align="right" valign="top">const size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa6d92f521dc4f05ac7f4c856dcfe263e">height_idx</a> = <a class="el" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>)</td></tr>
<tr class="separator:aa6d92f521dc4f05ac7f4c856dcfe263e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2065fcea8e34c2f3ee039d5a0332348b"><td class="memItemLeft" align="right" valign="top">const size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a> = <a class="el" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>)</td></tr>
<tr class="separator:a2065fcea8e34c2f3ee039d5a0332348b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdf11c92be0cb1099e5fdcf3d5c94055"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a> = <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0)</td></tr>
<tr class="separator:afdf11c92be0cb1099e5fdcf3d5c94055"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab11d49bc60990d21ee07967c219129ae"><td class="memItemLeft" align="right" valign="top">constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11d49bc60990d21ee07967c219129ae">dim_single_unit_step</a> = <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1)</td></tr>
<tr class="separator:ab11d49bc60990d21ee07967c219129ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33ac5aaccfb4b36763818ca148b44c6c"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a> = 8</td></tr>
<tr class="separator:a33ac5aaccfb4b36763818ca148b44c6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05c10bc9018179245c50d45b330a1c6a"><td class="memItemLeft" align="right" valign="top">constexpr int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> = 4</td></tr>
<tr class="separator:a05c10bc9018179245c50d45b330a1c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="adb6ece39851b42c09fe28c2ab0b27adf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb6ece39851b42c09fe28c2ab0b27adf">&#9670;&nbsp;</a></span>CpuElementwiseMax</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#adb6ece39851b42c09fe28c2ab0b27adf">CpuElementwiseMax</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for maximum operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00065">65</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="adbd129adc090ebe5de9f015531e4c7cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbd129adc090ebe5de9f015531e4c7cf">&#9670;&nbsp;</a></span>CpuElementwiseMin</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#adbd129adc090ebe5de9f015531e4c7cf">CpuElementwiseMin</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for minimum operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00067">67</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a8e9db85fa6787c18e9bccc8a45c206f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e9db85fa6787c18e9bccc8a45c206f9">&#9670;&nbsp;</a></span>CpuElementwiseSquaredDiff</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e9db85fa6787c18e9bccc8a45c206f9">CpuElementwiseSquaredDiff</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for squared difference operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00069">69</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="af2f4c203980958815b7fdf27f08cb3a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2f4c203980958815b7fdf27f08cb3a5">&#9670;&nbsp;</a></span>CpuPRelu</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af2f4c203980958815b7fdf27f08cb3a5">CpuPRelu</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_arithmetic.xhtml">CpuElementwiseArithmetic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class to run <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_arithmetic_kernel.xhtml">cpu::kernels::CpuArithmeticKernel</a> except for PRelu operation. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_p_relu_8h_source.xhtml#l00034">34</a> of file <a class="el" href="_cpu_p_relu_8h_source.xhtml">CpuPRelu.h</a>.</p>

</div>
</div>
<a id="a186f98d6356749c10297655b3b05f70c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a186f98d6356749c10297655b3b05f70c">&#9670;&nbsp;</a></span>ICpuOperator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a186f98d6356749c10297655b3b05f70c">ICpuOperator</a> =  <a class="el" href="classarm__compute_1_1experimental_1_1_i_n_e_operator.xhtml">experimental::INEOperator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_i_cpu_operator_8h_source.xhtml#l00033">33</a> of file <a class="el" href="_i_cpu_operator_8h_source.xhtml">ICpuOperator.h</a>.</p>

</div>
</div>
<a id="ac628ee7e5c3f38368a66f11582fe377e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac628ee7e5c3f38368a66f11582fe377e">&#9670;&nbsp;</a></span>KernelType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac628ee7e5c3f38368a66f11582fe377e">KernelType</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1kernels_1_1_cpu_elementwise_unary_kernel.xhtml">kernels::CpuElementwiseUnaryKernel</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_unary_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="_cpu_elementwise_unary_8cpp_source.xhtml">CpuElementwiseUnary.cpp</a>.</p>

</div>
</div>
<a id="aa0a37b068450a7e7c63b0bf5d65dbf0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0a37b068450a7e7c63b0bf5d65dbf0e">&#9670;&nbsp;</a></span>NEEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa0a37b068450a7e7c63b0bf5d65dbf0e">NEEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00172">172</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="acb9428c08ab9b91d102ca6269364eda9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb9428c08ab9b91d102ca6269364eda9">&#9670;&nbsp;</a></span>NEGreater</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb9428c08ab9b91d102ca6269364eda9">NEGreater</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00176">176</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a308bbf4b2dd91df7ce97f856f62865a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a308bbf4b2dd91df7ce97f856f62865a0">&#9670;&nbsp;</a></span>NEGreaterEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a308bbf4b2dd91df7ce97f856f62865a0">NEGreaterEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run greater-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00178">178</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a242490d7db27c65f3dd63bd2fe55d7f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a242490d7db27c65f3dd63bd2fe55d7f6">&#9670;&nbsp;</a></span>NELess</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a242490d7db27c65f3dd63bd2fe55d7f6">NELess</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00180">180</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a6a21c9cce9003a875ff3163bf7752abe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a21c9cce9003a875ff3163bf7752abe">&#9670;&nbsp;</a></span>NELessEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a21c9cce9003a875ff3163bf7752abe">NELessEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run less-equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00182">182</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<a id="a3fa32460d63a4499680df2b5933ea01f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fa32460d63a4499680df2b5933ea01f">&#9670;&nbsp;</a></span>NENotEqual</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3fa32460d63a4499680df2b5933ea01f">NENotEqual</a> =  <a class="el" href="classarm__compute_1_1cpu_1_1_cpu_elementwise_comparison_static.xhtml">CpuElementwiseComparisonStatic</a>&lt;<a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Basic function to run not equal comparison. </p>

<p class="definition">Definition at line <a class="el" href="_cpu_elementwise_8h_source.xhtml#l00174">174</a> of file <a class="el" href="_cpu_elementwise_8h_source.xhtml">CpuElementwise.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a3c378cf8ee66b2333bdf4868eeba2710"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c378cf8ee66b2333bdf4868eeba2710">&#9670;&nbsp;</a></span>AsmConvMethod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710">AsmConvMethod</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34"></a>Im2Col&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c"></a>Indirect&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef"></a>Conv&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00037">37</a> of file <a class="el" href="_cpu_gemm_assembly_dispatch_8h_source.xhtml">CpuGemmAssemblyDispatch.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34">Im2Col</a>,</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">Indirect</a>,</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">Conv</a></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<a id="afa3ebf7e0ea95c0c9cadb30c62bad67a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa3ebf7e0ea95c0c9cadb30c62bad67a">&#9670;&nbsp;</a></span>KernelSelectionType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67a">KernelSelectionType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="afa3ebf7e0ea95c0c9cadb30c62bad67aaa054ccb4ff684c73cbc2d272d45e32df"></a>Preferred&#160;</td><td class="fielddoc"><p>Retrieve the best implementation available for the given Cpu ISA, ignoring the build flags. </p>
</td></tr>
<tr><td class="fieldname"><a id="afa3ebf7e0ea95c0c9cadb30c62bad67aaeaa4dc5078017a5c5bebf383ab6f5124"></a>Supported&#160;</td><td class="fielddoc"><p>Retrieve the best implementation available for the given Cpu ISA that is supported by the current build. </p>
</td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_i_cpu_kernel_8h_source.xhtml#l00035">35</a> of file <a class="el" href="_i_cpu_kernel_8h_source.xhtml">ICpuKernel.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67aaa054ccb4ff684c73cbc2d272d45e32df">Preferred</a>, <span class="comment">/**&lt; Retrieve the best implementation available for the given Cpu ISA, ignoring the build flags */</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67aaeaa4dc5078017a5c5bebf383ab6f5124">Supported</a> <span class="comment">/**&lt; Retrieve the best implementation available for the given Cpu ISA that is supported by the current build */</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;};</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a3c61fd97af6b1dd6934c54f6c605a35e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c61fd97af6b1dd6934c54f6c605a35e">&#9670;&nbsp;</a></span>add_fp16_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_fp16_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af8619f36d58f8afe49148c4a85446b17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8619f36d58f8afe49148c4a85446b17">&#9670;&nbsp;</a></span>add_fp16_sve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_fp16_sve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad2c124680c75e5d3fe454ef5caefd5ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2c124680c75e5d3fe454ef5caefd5ae">&#9670;&nbsp;</a></span>add_fp32_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_fp32_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2add_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="cpu_2kernels_2add_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> add_same_neon&lt;float&gt;(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00208">CpuAddKernel::get_mws()</a>.</p>

</div>
</div>
<a id="aa2ab2fb878bb198cd6104e1d0dff8043"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2ab2fb878bb198cd6104e1d0dff8043">&#9670;&nbsp;</a></span>add_fp32_sve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_fp32_sve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2add_2generic_2sve_2fp32_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="cpu_2kernels_2add_2generic_2sve_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a855955a410dcb97226318ba9c64fee78">add_same_sve&lt;float&gt;</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a855955a410dcb97226318ba9c64fee78">add_same_sve&lt; float &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="a8cdc9cbc3be2c3a505a4135e4fe53c4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cdc9cbc3be2c3a505a4135e4fe53c4c">&#9670;&nbsp;</a></span>add_mul_add_fp16_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_mul_add_fp16_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mul</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_add</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>add_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>final_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aae5e85ddf5333a19e6d815e4acf7cf61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae5e85ddf5333a19e6d815e4acf7cf61">&#9670;&nbsp;</a></span>add_mul_add_fp32_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_mul_add_fp32_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mul</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_add</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>add_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>final_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5d1e7b520dd6baea223dd51054d21321"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d1e7b520dd6baea223dd51054d21321">&#9670;&nbsp;</a></span>add_mul_add_s8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_mul_add_s8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mul</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_add</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>add_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>final_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa88b701deaf0108727d8c20a2c52bcc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa88b701deaf0108727d8c20a2c52bcc2">&#9670;&nbsp;</a></span>add_mul_add_u8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_mul_add_u8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mul</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_add</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>add_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>final_output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4c5290cc7856ef99db64d9a6b475dba2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c5290cc7856ef99db64d9a6b475dba2">&#9670;&nbsp;</a></span>add_q8_neon_fixedpoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_q8_neon_fixedpoint </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00078">78</a> of file <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    add_sub_q8_neon_fixedpoint&lt;ScalarType&gt;(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">true</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="af5ab9358391aa54ff6cd6934a6cfc6b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5ab9358391aa54ff6cd6934a6cfc6b2">&#9670;&nbsp;</a></span>add_q8_neon_fixedpoint&lt; int8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c5290cc7856ef99db64d9a6b475dba2">arm_compute::cpu::add_q8_neon_fixedpoint</a>&lt; int8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abfd7331f875669695cb9af58b5921275"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfd7331f875669695cb9af58b5921275">&#9670;&nbsp;</a></span>add_q8_neon_fixedpoint&lt; uint8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a4c5290cc7856ef99db64d9a6b475dba2">arm_compute::cpu::add_q8_neon_fixedpoint</a>&lt; uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5d12d4b685a01367a23a1e201300e06b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d12d4b685a01367a23a1e201300e06b">&#9670;&nbsp;</a></span>add_q8_neon_fixedpoint_possible()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool add_q8_neon_fixedpoint_possible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">add_sub_q8_neon_fixedpoint_possible</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00045">add_sub_q8_neon_fixedpoint_possible()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_add_kernel_8cpp_source.xhtml#l00145">CpuAddKernel::configure()</a>.</p>

</div>
</div>
<a id="a61432523ea69cfc30a1aece3b93e6207"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61432523ea69cfc30a1aece3b93e6207">&#9670;&nbsp;</a></span>add_qasymm8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qasymm8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="add_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">add_sub_qasymm8_neon</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">true</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">add_sub_qasymm8_neon()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="a9cdb8e82259a848a08aecc1ff53999d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9cdb8e82259a848a08aecc1ff53999d6">&#9670;&nbsp;</a></span>add_qasymm8_signed_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qasymm8_signed_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="add_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">add_sub_qasymm8_signed_neon</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">true</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">add_sub_qasymm8_signed_neon()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="ab0fea5772fee23340f22a003c85e7829"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0fea5772fee23340f22a003c85e7829">&#9670;&nbsp;</a></span>add_qasymm8_signed_sve2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qasymm8_signed_sve2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="add_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> invvscaleo = svdup_n_f32(1.f / oq_info.scale);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> voffseto   = svdup_n_f32(oq_info.offset);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span>     all_true_pg          = svptrue_b8();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1  = is_broadcast_input_2 ? svdup_n_f32(iq1_info.scale) : svdup_n_f32(iq2_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale2  = is_broadcast_input_2 ? svdup_n_f32(iq2_info.scale) : svdup_n_f32(iq1_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset1 = is_broadcast_input_2 ? svdup_n_s32(iq1_info.offset) : svdup_n_s32(iq2_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset2 = is_broadcast_input_2 ? svdup_n_s32(iq2_info.offset) : svdup_n_s32(iq1_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            win,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keyword">const</span> int8_t broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>   broadcast_value_vec = svdup_n_s8(broadcast_value);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordtype">int</span>        x    = window_start_x;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                svbool_t   pg   = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = svmul_f32_z(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlb_s16(broadcast_value_vec)), voffset2)),</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = svmul_f32_z(</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlb_s16(broadcast_value_vec)), voffset2)),</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = svmul_f32_z(</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlt_s16(broadcast_value_vec)), voffset2)),</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = svmul_f32_z(</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlt_s16(broadcast_value_vec)), voffset2)),</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a    = svld1_s8(pg, non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = svmul_f32_z(</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlb_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = svmul_f32_z(</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlb_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = svmul_f32_z(</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlt_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = svmul_f32_z(</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlt_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_0 =</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_1 =</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_2 =</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_2, bf_2), invvscaleo));</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_3 =</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_3, bf_3), invvscaleo));</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pa  = svqxtnt_s32(svqxtnb_s32(rf_0), rf_1);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pb  = svqxtnt_s32(svqxtnb_s32(rf_2), rf_3);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res = svqxtnt_s16(svqxtnb_s16(pa), pb);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    svst1_s8(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    x += svcntb();</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            },</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1  = svdup_n_f32(iq1_info.scale);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale2  = svdup_n_f32(iq2_info.scale);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset1 = svdup_n_s32(iq1_info.offset);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset2 = svdup_n_s32(iq2_info.offset);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            win,</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                svbool_t pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a = svld1_s8(pg, input1_ptr + x);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = svld1_s8(pg, input2_ptr + x);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = svmul_f32_z(</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlb_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = svmul_f32_z(</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlb_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = svmul_f32_z(</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlt_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = svmul_f32_z(</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlt_s16(a)), voffset1)), vscale1);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = svmul_f32_z(</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlb_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)), voffset2)), vscale2);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = svmul_f32_z(</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlb_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)), voffset2)), vscale2);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = svmul_f32_z(</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlb_s32(svmovlt_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)), voffset2)), vscale2);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = svmul_f32_z(</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        pg, svcvt_f32_s32_z(pg, svsub_s32_z(pg, svmovlt_s32(svmovlt_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)), voffset2)), vscale2);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_0 =</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_1 =</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_2 =</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_2, bf_2), invvscaleo));</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_3 =</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        svcvt_s32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_3, bf_3), invvscaleo));</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pa  = svqxtnt_s32(svqxtnb_s32(rf_0), rf_1);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pb  = svqxtnt_s32(svqxtnb_s32(rf_2), rf_3);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res = svqxtnt_s16(svqxtnb_s16(pa), pb);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    svst1_s8(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    x += svcntb();</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(svptrue_b8(), pg));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            },</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a87d11c1d054cf7db7b82fcba880a823f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87d11c1d054cf7db7b82fcba880a823f">&#9670;&nbsp;</a></span>add_qasymm8_sve2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qasymm8_sve2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="add_2generic_2sve2_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg           = svptrue_b8();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> invvscaleo = svdup_n_f32(1.f / oq_info.scale);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> voffseto   = svdup_n_f32(oq_info.offset);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> svfloat32_t vscale1  = is_broadcast_input_2 ? svdup_n_f32(iq1_info.scale) : svdup_n_f32(iq2_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">const</span> svfloat32_t vscale2  = is_broadcast_input_2 ? svdup_n_f32(iq2_info.scale) : svdup_n_f32(iq1_info.<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> svint32_t   voffset1 = is_broadcast_input_2 ? svdup_n_s32(iq1_info.offset) : svdup_n_s32(iq2_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> svint32_t   voffset2 = is_broadcast_input_2 ? svdup_n_s32(iq2_info.offset) : svdup_n_s32(iq1_info.<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            win,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keyword">const</span> uint8_t   broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keyword">const</span> svuint8_t broadcast_value_vec = svdup_n_u8(broadcast_value);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                svbool_t pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = svmul_f32_z(</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    pg,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    svcvt_f32_s32_z(</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                        pg, svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlb_u16(broadcast_value_vec))),</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                        voffset2)),</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = svmul_f32_z(</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    pg,</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    svcvt_f32_s32_z(</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        pg, svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlb_u16(broadcast_value_vec))),</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                        voffset2)),</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = svmul_f32_z(</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    pg,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    svcvt_f32_s32_z(</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        pg, svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlt_u16(broadcast_value_vec))),</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                        voffset2)),</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = svmul_f32_z(</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    pg,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    svcvt_f32_s32_z(</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        pg, svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlt_u16(broadcast_value_vec))),</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                        voffset2)),</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    vscale2);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="keyword">const</span> svuint8_t a = svld1_u8(pg, non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = svmul_f32_z(</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        pg,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlb_u16(a))), voffset1)),</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = svmul_f32_z(</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        pg,</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlb_u16(a))), voffset1)),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = svmul_f32_z(</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        pg,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlt_u16(a))), voffset1)),</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = svmul_f32_z(</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        pg,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlt_u16(a))), voffset1)),</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_0 =</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_1 =</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_2 =</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_2, bf_2), invvscaleo));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_3 =</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_3, bf_3), invvscaleo));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pa = svqxtnt_u32(svqxtnb_u32(rf_0), rf_1);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pb = svqxtnt_u32(svqxtnb_u32(rf_2), rf_3);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res = svqxtnt_u16(svqxtnb_u16(pa), pb);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    svst1_u8(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    x += svcntb();</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            },</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1  = svdup_n_f32(iq1_info.scale);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale2  = svdup_n_f32(iq2_info.scale);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset1 = svdup_n_s32(iq1_info.offset);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset2 = svdup_n_s32(iq2_info.offset);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            win,</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                svbool_t pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a    = svld1_u8(pg, input1_ptr + x);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>    = svld1_u8(pg, input2_ptr + x);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = svmul_f32_z(</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        pg,</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlb_u16(a))), voffset1)),</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = svmul_f32_z(</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        pg,</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlb_u16(a))), voffset1)),</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = svmul_f32_z(</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        pg,</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlt_u16(a))), voffset1)),</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = svmul_f32_z(</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        pg,</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlt_u16(a))), voffset1)),</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        vscale1);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = svmul_f32_z(</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        pg,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlb_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), voffset2)),</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        vscale2);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = svmul_f32_z(</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        pg,</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlb_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), voffset2)),</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        vscale2);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = svmul_f32_z(</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        pg,</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlb_u32(svmovlt_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), voffset2)),</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        vscale2);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = svmul_f32_z(</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        pg,</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        svcvt_f32_s32_z(pg,</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                        svsub_s32_z(pg, svreinterpret_s32_u32(svmovlt_u32(svmovlt_u16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), voffset2)),</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        vscale2);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_0 =</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_1 =</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_2 =</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_2, bf_2), invvscaleo));</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_3 =</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        svcvt_u32_f32_z(pg, svmla_f32_z(pg, voffseto, svadd_f32_z(pg, af_3, bf_3), invvscaleo));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pa  = svqxtnt_u32(svqxtnb_u32(rf_0), rf_1);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> pb  = svqxtnt_u32(svqxtnb_u32(rf_2), rf_3);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res = svqxtnt_u16(svqxtnb_u16(pa), pb);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    svst1_u8(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    x += svcntb();</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            },</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="ad37c71a18fef7a166093eadde4d314a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad37c71a18fef7a166093eadde4d314a3">&#9670;&nbsp;</a></span>add_qsymm16_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qsymm16_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="add_2generic_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 8;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> float32x4_t vscale1    = vdupq_n_f32(iq1_info.scale);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> float32x4_t vscale2    = vdupq_n_f32(iq2_info.scale);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            win,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keyword">const</span> int16_t   broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">const</span> int16x8_t broadcast_value_vec = vdupq_n_s16(broadcast_value);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>  bf_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(broadcast_value_vec))), vscale2);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>  bf_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(broadcast_value_vec))), vscale2);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>  = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value) * broadcast_qinfo.scale;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keyword">const</span> int16x8_t a    = vld1q_s16(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>      af_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>      af_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    rf_0 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    rf_1 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    rf_0 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    rf_1 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    vst1q_s16(output_ptr + x, pa);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x)) * non_broadcast_qinfo.scale;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>((afs + <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>), oq_info);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            },</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            win,</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    <span class="keyword">const</span> int16x8_t a = vld1q_s16(input1_ptr + x);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keyword">const</span> int16x8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_s16(input2_ptr + x);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), vscale2);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), vscale2);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    rf_0 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    rf_1 = vcvtnq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    rf_0 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    rf_1 = vcvtq_s32_f32(vmulq_f32(vaddq_f32(af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    vst1q_s16(output_ptr + x, pa);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                }</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x))) * iq1_info.scale;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input2_ptr + x))) * iq2_info.scale;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>((afs + <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            },</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_unstack_8cpp_source.xhtml#l00091">arm_compute::test::validation::for()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00468">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a3860d0e40530102ca0f9b72aab835a3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3860d0e40530102ca0f9b72aab835a3e">&#9670;&nbsp;</a></span>add_qsymm16_sve2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_qsymm16_sve2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="add_2generic_2sve2_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vscale1     = svdup_n_f32(iq1_info.scale);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vscale2     = svdup_n_f32(iq2_info.scale);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> invvscaleo  = svdup_n_f32(1.f / oq_info.scale);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = svptrue_b16();</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            win,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">const</span> int16_t broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>    broadcast_value_vec = svdup_n_s16(broadcast_value);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                svbool_t pg = svwhilelt_b16(x, window_end_x);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlb_s32(broadcast_value_vec)), vscale2);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlt_s32(broadcast_value_vec)), vscale2);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a    = svld1_s16(pg, non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlb_s32(a)), vscale1);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlt_s32(a)), vscale1);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_0 = svcvt_s32_f32_z(pg, svmul_f32_z(pg, svadd_f32_z(pg, af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_1 = svcvt_s32_f32_z(pg, svmul_f32_z(pg, svadd_f32_z(pg, af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res = svqxtnt_s32(svqxtnb_s32(rf_0), rf_1);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    svst1_s16(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    x += svcnth();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    pg = svwhilelt_b16(x, window_end_x);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            },</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            win,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                svbool_t pg = svwhilelt_b16(x, window_end_x);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    <span class="keyword">auto</span> a = svld1_s16(pg, input1_ptr + x);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = svld1_s16(pg, input2_ptr + x);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlb_s32(a)), vscale1);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlt_s32(a)), vscale1);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlb_s32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)), vscale2);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = svmul_f32_z(pg, svcvt_f32_s32_z(pg, svmovlt_s32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)), vscale2);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_0 = svcvt_s32_f32_z(pg, svmul_f32_z(pg, svadd_f32_z(pg, af_0, bf_0), invvscaleo));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> rf_1 = svcvt_s32_f32_z(pg, svmul_f32_z(pg, svadd_f32_z(pg, af_1, bf_1), invvscaleo));</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res = svqxtnt_s32(svqxtnb_s32(rf_0), rf_1);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    svst1_s16(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    x += svcnth();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    pg = svwhilelt_b16(x, window_end_x);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            },</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a05ce4a57b547b092a04dd9f1ce597fa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05ce4a57b547b092a04dd9f1ce597fa6">&#9670;&nbsp;</a></span>add_s16_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_s16_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2integer_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="add_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> add_same_neon&lt;int16_t&gt;(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="a81008dcf18ba115cfb93b68a31936189"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81008dcf18ba115cfb93b68a31936189">&#9670;&nbsp;</a></span>add_s16_sve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_s16_sve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1c36ad549e97f081b9424caaa9bc8272">add_same_sve&lt;int16_t&gt;</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1c36ad549e97f081b9424caaa9bc8272">add_same_sve&lt; int16_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="a164fbc92bcd9d8dd343cc1e364498a24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a164fbc92bcd9d8dd343cc1e364498a24">&#9670;&nbsp;</a></span>add_s32_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_s32_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2integer_8cpp_source.xhtml#l00043">43</a> of file <a class="el" href="add_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> add_same_neon&lt;int32_t&gt;(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="a85af451c597b6e1079495f7689108336"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85af451c597b6e1079495f7689108336">&#9670;&nbsp;</a></span>add_s32_sve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_s32_sve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3dae474260c001eee4ea5a8f03699e92">add_same_sve&lt;int32_t&gt;</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3dae474260c001eee4ea5a8f03699e92">add_same_sve&lt; int32_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="aa21e96f6030e02320e0f48039837f94b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa21e96f6030e02320e0f48039837f94b">&#9670;&nbsp;</a></span>add_same_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::add_same_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8h_source.xhtml#l00039">39</a> of file <a class="el" href="add_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;ScalarType, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16 / <span class="keyword">sizeof</span>(ScalarType);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            win,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keyword">const</span> ScalarType broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>       broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, ExactTagType{});</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res             = (policy == ConvertPolicy::SATURATE)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                     ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4b3ec2db417aa33bc7d68ad6e1ff7952">wrapper::vqadd</a>(broadcast_value_vec, non_broadcast_v)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                                     : <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(broadcast_value_vec, non_broadcast_v);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = *(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    *(output_ptr + x)          = (policy == ConvertPolicy::SATURATE)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                                     ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ac4358b7409261f013124bd6068aeee79">wrapper::add_sat</a>(broadcast_value, non_broadcast_v)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                                     : broadcast_value + non_broadcast_v;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            },</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            win,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res =</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        (policy == ConvertPolicy::SATURATE) ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4b3ec2db417aa33bc7d68ad6e1ff7952">wrapper::vqadd</a>(val1, val2) : <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(val1, val2);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val1 = *(input1_ptr + x);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val2 = *(input2_ptr + x);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    *(output_ptr + x) =</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        (policy == ConvertPolicy::SATURATE) ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ac4358b7409261f013124bd6068aeee79">wrapper::add_sat</a>(val1, val2) : val1 + val2;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            },</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="scalar_2add_8h_source.xhtml#l00033">arm_compute::wrapper::add_sat()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00073">arm_compute::wrapper::vqadd()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="ac689517877e4c549a4e209c6f4071d1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac689517877e4c549a4e209c6f4071d1c">&#9670;&nbsp;</a></span>add_same_sve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_same_sve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="add_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg           = wrapper::svptrue&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_sat                = (policy == ConvertPolicy::SATURATE);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    Iterator input1(src0, window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape()));</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Iterator input2(src1, window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape()));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            win,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keyword">const</span> ScalarType broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>       broadcast_value_vec = wrapper::svdup_n(broadcast_value);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = svld1(pg, non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keyword">auto</span>       res             = is_sat ? wrapper::svqadd(broadcast_value_vec, non_broadcast_v)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                        : svadd_z(pg, broadcast_value_vec, non_broadcast_v);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    svst1(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            },</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            win,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val1 = svld1(pg, input1_ptr + x);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val2 = svld1(pg, input2_ptr + x);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res  = is_sat ? wrapper::svqadd(val1, val2) : svadd_z(pg, val1, val2);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    svst1(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            },</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a855955a410dcb97226318ba9c64fee78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a855955a410dcb97226318ba9c64fee78">&#9670;&nbsp;</a></span>add_same_sve&lt; float &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac689517877e4c549a4e209c6f4071d1c">arm_compute::cpu::add_same_sve</a>&lt; float &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2add_2generic_2sve_2fp32_8cpp_source.xhtml#l00034">add_fp32_sve()</a>.</p>

</div>
</div>
<a id="a1c36ad549e97f081b9424caaa9bc8272"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c36ad549e97f081b9424caaa9bc8272">&#9670;&nbsp;</a></span>add_same_sve&lt; int16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac689517877e4c549a4e209c6f4071d1c">arm_compute::cpu::add_same_sve</a>&lt; int16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml#l00040">add_s16_sve()</a>.</p>

</div>
</div>
<a id="a3dae474260c001eee4ea5a8f03699e92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dae474260c001eee4ea5a8f03699e92">&#9670;&nbsp;</a></span>add_same_sve&lt; int32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac689517877e4c549a4e209c6f4071d1c">arm_compute::cpu::add_same_sve</a>&lt; int32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml#l00046">add_s32_sve()</a>.</p>

</div>
</div>
<a id="abfd6ff1ff8b79f594df25d64404e7590"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfd6ff1ff8b79f594df25d64404e7590">&#9670;&nbsp;</a></span>add_same_sve&lt; uint8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac689517877e4c549a4e209c6f4071d1c">arm_compute::cpu::add_same_sve</a>&lt; uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml#l00034">add_u8_sve()</a>.</p>

</div>
</div>
<a id="a400fdac6bb36c02b9bf3ab5936a3fbd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a400fdac6bb36c02b9bf3ab5936a3fbd1">&#9670;&nbsp;</a></span>add_sub_q8_neon_fixedpoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_sub_q8_neon_fixedpoint </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_addition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00085">85</a> of file <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in0_info = src0-&gt;info();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in1_info = src1-&gt;info();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in0_shape = in0_info-&gt;tensor_shape();</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in1_shape = in1_info-&gt;tensor_shape();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Create input windows.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    Window in0_win = window.broadcast_if_dimension_le_one(in0_shape);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    Window in1_win = window.broadcast_if_dimension_le_one(in1_shape);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = window.x().start();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = window.x().end();</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    is_broadcast_across_x = in0_shape.x() != in1_shape.x();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq0_info  = in0_info-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq1_info  = in1_info-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> oq_info   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in0_scale = iq0_info.scale / oq_info.scale;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in1_scale = is_addition ? (iq1_info.scale / oq_info.scale) : (-(iq1_info.scale / oq_info.scale));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq_info.offset) - in0_scale * float(iq0_info.offset) - in1_scale * float(iq1_info.offset);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    constexpr <span class="keywordtype">float</span> _2pow11        = 2048;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      in0_scale_5p11 = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(in0_scale * _2pow11));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      in1_scale_5p11 = <span class="keyword">static_cast&lt;</span>int16_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(in1_scale * _2pow11));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      offset_21p11   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> * _2pow11));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    constexpr uint8_t shift_amount_remainder = 3;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="comment">// Prefix: a = non-broadcast, b = broadcast.</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> is_broadcast_input_1 = in1_win.x().step() == 0;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">auto</span>       a_win                = is_broadcast_input_1 ? in0_win : in1_win;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keyword">auto</span>       b_win                = is_broadcast_input_1 ? in1_win : in0_win;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_tensor             = is_broadcast_input_1 ? src0 : src1;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> b_tensor             = is_broadcast_input_1 ? src1 : src0;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_scale_5p11  = is_broadcast_input_1 ? in0_scale_5p11 : in1_scale_5p11;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> b_scale       = is_broadcast_input_1 ? in1_scale : in0_scale;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_vscale_5p11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(a_scale_5p11, wrapper::traits::vector_64_tag());</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a_scale = is_broadcast_input_1 ? in0_scale : in1_scale;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        a_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        Iterator a_input_it(a_tensor, a_win);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        Iterator b_input_it(b_tensor, b_win);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        Iterator out_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            win,</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(a_input_it.ptr());</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(b_input_it.ptr());</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.ptr());</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_val                   = *b_ptr;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled                = b_scale * b_val;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled_21p11          = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(b_scaled * _2pow11));</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled_offseted_21p11 = b_scaled_21p11 + offset_21p11;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_vscaled_offseted_21p11 =</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(b_scaled_offseted_21p11, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b_scaled_offseted = b_scaled + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="comment">// Load the input.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(a_ptr + x);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="comment">// Widen the non-broadcast elements to signed 16-bit regardless of the input signedness.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_8p0)));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_vin_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_8p0)));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="comment">// Multiply the non-broadcast elements by the scale factor, add the scaled broadcast elements and the offset.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="comment">// Widen and store the result in 32-bit integer.</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_00 =</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_16p0_0), a_vscale_5p11);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_01 =</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_16p0_0), a_vscale_5p11);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_10 =</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(a_vin_16p0_1), a_vscale_5p11);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_11 =</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(b_vscaled_offseted_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(a_vin_16p0_1), a_vscale_5p11);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <span class="comment">// Remove 3 bits of the fractional part, round, narrow to 16-bit and saturate the result.</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_0 =</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_00),</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_01));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_1 =</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_10),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_11));</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="comment">// Remove 8 bits of the fractional part, round, narrow to 8-bit and saturate the result.</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p0 =</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn&lt;8&gt;(vout_8p8_0), wrapper::vqrshrn&lt;8&gt;(vout_8p8_1));</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="comment">// Store the result.</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, vout_8p0);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="comment">// Process the left-over elements.</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    out_ptr[x] = wrapper::vqrshrn&lt;8&gt;(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        int32_t(a_ptr[x]) * a_scale_5p11 + b_scaled_offseted_21p11));</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    out_ptr[x] = utility::clamp&lt;int, ScalarType&gt;(</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(<span class="keywordtype">float</span>(a_ptr[x]) * a_scale + b_scaled_offseted));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            },</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            b_input_it, a_input_it, out_it);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale0_5p11  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(in0_scale_5p11, wrapper::traits::vector_64_tag());</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1_5p11  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(in1_scale_5p11, wrapper::traits::vector_64_tag());</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset_21p11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(offset_21p11, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Clear the x dimension on the execution window as we process the whole row each iteration.</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        in0_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        in1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        Iterator in0_it(src0, in0_win);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        Iterator in1_it(src1, in1_win);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        Iterator out_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            win,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in0_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in0_it.ptr());</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in1_it.ptr());</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.ptr());</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    <span class="comment">// Load the inputs.</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in0_ptr + x);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_8p0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in1_ptr + x);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    <span class="comment">// Widen the input elements to signed 16-bit regardless of the input signedness.</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_8p0)));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin0_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_8p0)));</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_16p0_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_8p0)));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin1_16p0_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_8p0)));</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    <span class="comment">// Multiply the input elements by the scale factor and add the offset.</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="comment">// Widen and store the result in 32-bit integer.</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_00 =</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_16p0_0), vscale0_5p11);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_01 =</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_16p0_0), vscale0_5p11);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_10 =</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin0_16p0_1), vscale0_5p11);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vscaled0_offseted_21p11_11 =</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(voffset_21p11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin0_16p0_1), vscale0_5p11);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_00 =</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_00, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_16p0_0), vscale1_5p11);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_01 =</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_01, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_16p0_0), vscale1_5p11);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_10 =</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_10, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vin1_16p0_1), vscale1_5p11);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_21p11_11 =</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(vscaled0_offseted_21p11_11, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vin1_16p0_1), vscale1_5p11);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    <span class="comment">// Remove 3 bits of the fractional part, round, narrow to 16-bit and saturate the result.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_0 =</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_00),</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_01));</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p8_1 =</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_10),</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                          wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(vout_21p11_11));</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    <span class="comment">// Remove 8 bits of the fractional part, round, narrow to 8-bit and saturate the result.</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vout_8p0 =</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(wrapper::vqrshrn&lt;8&gt;(vout_8p8_0), wrapper::vqrshrn&lt;8&gt;(vout_8p8_1));</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    <span class="comment">// Store the result.</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, vout_8p0);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                <span class="comment">// Process the left-over elements.</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                    out_ptr[x] = wrapper::vqrshrn&lt;8&gt;(wrapper::vqrshrn_ex&lt;shift_amount_remainder, ScalarType&gt;(</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                        int32_t(in0_ptr[x]) * in0_scale_5p11 + int32_t(in1_ptr[x]) * in1_scale_5p11 + offset_21p11));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    out_ptr[x] = utility::clamp&lt;int, ScalarType&gt;(</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                        <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(<span class="keywordtype">float</span>(in0_ptr[x]) * in0_scale + <span class="keywordtype">float</span>(in1_ptr[x]) * in1_scale + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>));</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            },</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            in0_it, in1_it, out_it);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00200">arm_compute::support::cpp11::lround()</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00076">arm_compute::wrapper::vmlal()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="reinterpret_8h_source.xhtml#l00044">arm_compute::wrapper::vreinterpret()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a9a8774284dc5c784b77e14670087e590"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a8774284dc5c784b77e14670087e590">&#9670;&nbsp;</a></span>add_sub_q8_neon_fixedpoint&lt; int8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a400fdac6bb36c02b9bf3ab5936a3fbd1">arm_compute::cpu::add_sub_q8_neon_fixedpoint</a>&lt; int8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_addition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00034">sub_qasymm8_signed_neon_fixedpoint()</a>.</p>

</div>
</div>
<a id="a2d36ee278add50c2b9f29cc6746206f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d36ee278add50c2b9f29cc6746206f1">&#9670;&nbsp;</a></span>add_sub_q8_neon_fixedpoint&lt; uint8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a400fdac6bb36c02b9bf3ab5936a3fbd1">arm_compute::cpu::add_sub_q8_neon_fixedpoint</a>&lt; uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_addition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00033">sub_qasymm8_neon_fixedpoint()</a>.</p>

</div>
</div>
<a id="a6584a40cba8021fe443986524b98319b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6584a40cba8021fe443986524b98319b">&#9670;&nbsp;</a></span>add_sub_q8_neon_fixedpoint_possible()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool add_sub_q8_neon_fixedpoint_possible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_addition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq0 = src0-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> iq1 = src1-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> oq  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale0 = iq0.scale / oq.scale;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale1 = iq1.scale / oq.scale;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (scale0 &lt; -15.f || scale0 &gt; 15.f || scale1 &lt; -15.f || scale1 &gt; 15.f)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// The scale factor cannot be stored as 5.11 signed fixed-point number.</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq.offset) - scale0 * float(iq0.offset) - scale1 * float(iq1.offset);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> max_acc = is_addition ? ((std::abs(scale0) + std::abs(scale1)) * 256.f + std::abs(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>))</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                                     : ((std::abs(scale0) - std::abs(scale1)) * 256.f + std::abs(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>));</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (max_acc &gt; 1048575.f) <span class="comment">// 2^20 - 1</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// It might not be possible to store the result as 21.11 signed fixed-point number.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00040">add_q8_neon_fixedpoint_possible()</a>, and <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00035">sub_q8_neon_fixedpoint_possible()</a>.</p>

</div>
</div>
<a id="a990ee09727a5f2205afa13a59576e98d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a990ee09727a5f2205afa13a59576e98d">&#9670;&nbsp;</a></span>add_sub_qasymm8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_sub_qasymm8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_addition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">311</a> of file <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;{</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale1 = iq1_info.scale / oq_info.scale;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale2 = is_addition ? (iq2_info.scale / oq_info.scale) : (-(iq2_info.scale / oq_info.scale));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq_info.offset) - scale1 * float(iq1_info.offset) - scale2 * float(iq2_info.offset);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> af_scale = is_broadcast_input_2 ? scale1 : scale2;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bf_scale = is_broadcast_input_2 ? scale2 : scale1;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1  = vdupq_n_f32(af_scale);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            win,</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = non_broadcast_input.ptr();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = output.ptr();</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value = *broadcast_input.ptr();</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf              = vdupq_n_f32(<span class="keywordtype">float</span>(broadcast_value) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>             = float(broadcast_value) * bf_scale + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keyword">const</span> uint8x16_t a = vld1q_u8(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_0 = vmovl_u8(vget_low_u8(a));</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_1 = vmovl_u8(vget_high_u8(a));</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(bf, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                    rf_0 = vcvtnq_s32_f32(af_0);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    rf_1 = vcvtnq_s32_f32(af_1);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    rf_2 = vcvtnq_s32_f32(af_2);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    rf_3 = vcvtnq_s32_f32(af_3);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    rf_0          = vcvtq_s32_f32(af_0);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    rf_1          = vcvtq_s32_f32(af_1);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    rf_2          = vcvtq_s32_f32(af_2);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    rf_3          = vcvtq_s32_f32(af_3);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                    vst1q_u8(output_ptr + x, vcombine_u8(pa, pb));</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(non_broadcast_input_ptr[x]) * af_scale + <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            },</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1 = vdupq_n_f32(scale1);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale2 = vdupq_n_f32(scale2);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            win,</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = input1.ptr();</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = input2.ptr();</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = output.ptr();</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                    <span class="keyword">const</span> uint8x16_t a = vld1q_u8(input1_ptr + x);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    <span class="keyword">const</span> uint8x16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_u8(input2_ptr + x);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_0 = vmovl_u8(vget_low_u8(a));</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_u16_1 = vmovl_u8(vget_high_u8(a));</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_u16_0 = vmovl_u8(vget_low_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_u16_1 = vmovl_u8(vget_high_u8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_0))), vscale1);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_low_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(voffset, vcvtq_f32_u32(vmovl_u16(vget_high_u16(a_u16_1))), vscale1);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmlaq_f32(af_0, vcvtq_f32_u32(vmovl_u16(vget_low_u16(b_u16_0))), vscale2);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmlaq_f32(af_1, vcvtq_f32_u32(vmovl_u16(vget_high_u16(b_u16_0))), vscale2);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = vmlaq_f32(af_2, vcvtq_f32_u32(vmovl_u16(vget_low_u16(b_u16_1))), vscale2);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = vmlaq_f32(af_3, vcvtq_f32_u32(vmovl_u16(vget_high_u16(b_u16_1))), vscale2);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    rf_0 = vcvtnq_s32_f32(bf_0);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    rf_1 = vcvtnq_s32_f32(bf_1);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    rf_2 = vcvtnq_s32_f32(bf_2);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    rf_3 = vcvtnq_s32_f32(bf_3);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    rf_0          = vcvtq_s32_f32(bf_0);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    rf_1          = vcvtq_s32_f32(bf_1);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    rf_2          = vcvtq_s32_f32(bf_2);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    rf_3          = vcvtq_s32_f32(bf_3);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    vst1q_u8(output_ptr + x, vcombine_u8(pa, pb));</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                }</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160; </div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                {</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(input1_ptr[x]) * scale1 + float(input2_ptr[x]) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            },</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00200">arm_compute::support::cpp11::lround()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00215">arm_compute::support::cpp11::trunc()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00033">add_qasymm8_neon()</a>, and <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00039">sub_qasymm8_neon()</a>.</p>

</div>
</div>
<a id="a4555abacb6f1b8d4510a0c38b2675778"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4555abacb6f1b8d4510a0c38b2675778">&#9670;&nbsp;</a></span>add_sub_qasymm8_signed_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_sub_qasymm8_signed_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_addition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">501</a> of file <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160; </div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160; </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale1 = iq1_info.scale / oq_info.scale;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale2 = is_addition ? (iq2_info.scale / oq_info.scale) : (-(iq2_info.scale / oq_info.scale));</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = float(oq_info.offset) - scale1 * float(iq1_info.offset) - scale2 * float(iq2_info.offset);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160; </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    {</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160; </div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> af_scale = is_broadcast_input_2 ? scale1 : scale2;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> bf_scale = is_broadcast_input_2 ? scale2 : scale1;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1  = vdupq_n_f32(af_scale);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160; </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            win,</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            {</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> bf              = vdupq_n_f32(<span class="keywordtype">float</span>(broadcast_value) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>             = float(broadcast_value) * bf_scale + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160; </div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                    <span class="keyword">const</span> int8x16_t a = vld1q_s8(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_0 = vmovl_s8(vget_low_s8(a));</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_1 = vmovl_s8(vget_high_s8(a));</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160; </div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(bf, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160; </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                    rf_0 = vcvtnq_s32_f32(af_0);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                    rf_1 = vcvtnq_s32_f32(af_1);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    rf_2 = vcvtnq_s32_f32(af_2);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    rf_3 = vcvtnq_s32_f32(af_3);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                    rf_0          = vcvtq_s32_f32(af_0);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                    rf_1          = vcvtq_s32_f32(af_1);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                    rf_2          = vcvtq_s32_f32(af_2);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                    rf_3          = vcvtq_s32_f32(af_3);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                    vst1q_s8(output_ptr + x, vcombine_s8(pa, pb));</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                }</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160; </div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                {</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(non_broadcast_input_ptr[x]) * af_scale + <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                }</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            },</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160; </div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale1 = vdupq_n_f32(scale1);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> vscale2 = vdupq_n_f32(scale2);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> voffset = vdupq_n_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            win,</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160; </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                {</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                    <span class="keyword">const</span> int8x16_t a = vld1q_s8(input1_ptr + x);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                    <span class="keyword">const</span> int8x16_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_s8(input2_ptr + x);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160; </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_0 = vmovl_s8(vget_low_s8(a));</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a_s16_1 = vmovl_s8(vget_high_s8(a));</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_s16_0 = vmovl_s8(vget_low_s8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> b_s16_1 = vmovl_s8(vget_high_s8(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160; </div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_0 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_1 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_0))), vscale1);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_2 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_low_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> af_3 = vmlaq_f32(voffset, vcvtq_f32_s32(vmovl_s16(vget_high_s16(a_s16_1))), vscale1);</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_0 = vmlaq_f32(af_0, vcvtq_f32_s32(vmovl_s16(vget_low_s16(b_s16_0))), vscale2);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_1 = vmlaq_f32(af_1, vcvtq_f32_s32(vmovl_s16(vget_high_s16(b_s16_0))), vscale2);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_2 = vmlaq_f32(af_2, vcvtq_f32_s32(vmovl_s16(vget_low_s16(b_s16_1))), vscale2);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bf_3 = vmlaq_f32(af_3, vcvtq_f32_s32(vmovl_s16(vget_high_s16(b_s16_1))), vscale2);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160; </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    int32x4_t rf_0{};</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                    int32x4_t rf_1{};</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                    int32x4_t rf_2{};</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    int32x4_t rf_3{};</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160; </div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                    rf_0 = vcvtnq_s32_f32(bf_0);</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                    rf_1 = vcvtnq_s32_f32(bf_1);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                    rf_2 = vcvtnq_s32_f32(bf_2);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                    rf_3 = vcvtnq_s32_f32(bf_3);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                    rf_0          = vcvtq_s32_f32(bf_0);</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                    rf_1          = vcvtq_s32_f32(bf_1);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                    rf_2          = vcvtq_s32_f32(bf_2);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                    rf_3          = vcvtq_s32_f32(bf_3);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160; </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_0), vqmovn_s32(rf_1)));</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(rf_2), vqmovn_s32(rf_3)));</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                    vst1q_s8(output_ptr + x, vcombine_s8(pa, pb));</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                }</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160; </div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                {</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result = float(input1_ptr[x]) * scale1 + float(input2_ptr[x]) * scale2 + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(result));</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    output_ptr[x] = utility::clamp&lt;int, int8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">support::cpp11::trunc</a>(result));</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                }</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            },</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00200">arm_compute::support::cpp11::lround()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00215">arm_compute::support::cpp11::trunc()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00033">add_qasymm8_signed_neon()</a>, and <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">sub_qasymm8_signed_neon()</a>.</p>

</div>
</div>
<a id="a006257e7774d270fdcb973d831c601bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a006257e7774d270fdcb973d831c601bc">&#9670;&nbsp;</a></span>add_u8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_u8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2integer_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="add_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> add_same_neon&lt;uint8_t&gt;(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="adc5f84c839b4b2635aca4223fd962d79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5f84c839b4b2635aca4223fd962d79">&#9670;&nbsp;</a></span>add_u8_sve()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void add_u8_sve </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="add_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abfd6ff1ff8b79f594df25d64404e7590">add_same_sve&lt;uint8_t&gt;</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abfd6ff1ff8b79f594df25d64404e7590">add_same_sve&lt; uint8_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="ab0fbb63ac498fd9817cfca2e5e445148"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0fbb63ac498fd9817cfca2e5e445148">&#9670;&nbsp;</a></span>avg_poolingMxNxD_q8_neon_ndhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::avg_poolingMxNxD_q8_neon_ndhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>window_step_x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00039">39</a> of file <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml">quantized.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">using</span> q8x8_t  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 8&gt;::type</a>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">using</span> q8x16_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 16&gt;::type</a>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">using</span> q16_t   = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;T&gt;;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">using</span> q16x8_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;q16_t, 8&gt;::type</a>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">using</span> q32_t   = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;q16_t&gt;;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">using</span> q32x4_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;q32_t, 4&gt;::type</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">int</span> pool_stride_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.stride.width);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordtype">int</span> pool_stride_y = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.stride.height);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">int</span> pool_stride_z = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.stride.depth);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_z = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape()[3] : pool_info.pool_size.depth;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.top);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_bottom = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.bottom);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.left);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_right  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.right);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_front  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.front);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_back   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.back);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1) + (pool_info.exclude_padding ? 0 : pool_pad_right);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2) + (pool_info.exclude_padding ? 0 : pool_pad_bottom);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3) + (pool_info.exclude_padding ? 0 : pool_pad_back);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_c = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3]);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> n_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[4]);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> uint8_t *in_ptr_start = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = input_dim_c;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = 0;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    Iterator out(dst0, window_out);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> float32x4_t             half_scale_v = vdupq_n_f32(0.5f);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo src_qinfo    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo dst_qinfo    = dst0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> quant_rescale = dst_qinfo.scale / src_qinfo.scale;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// &quot;new_offset&quot; doesn&#39;t have to consider the &quot;half_scale_v&quot; in its computation</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="comment">// With a requantization performed in a single step there won&#39;t be uncertainties introduced</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> int32_t new_offset =</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        dst_qinfo.offset - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.offset) / quant_rescale);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        window_out,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// Computing the theoretical input starting/ending points</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_width  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * pool_stride_x - pool_pad_left;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * pool_stride_y - pool_pad_top;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_depth  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>[3]) * pool_stride_z - pool_pad_front;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, -in_idx_width);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x_t = std::min(input_dim_w + pool_pad_left - in_idx_width, pool_size_x);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, -in_idx_height);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y_t = std::min(input_dim_h + pool_pad_top - in_idx_height, pool_size_y);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_z = std::max(0, -in_idx_depth);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z_t = std::min(input_dim_d + pool_pad_front - in_idx_depth, pool_size_z);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment">// The end of width to consider in calculation should exclude PAD_X, PAD_Y and PAD_Z</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x = std::min(pool_end_x_t, input_dim_w - in_idx_width);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y = std::min(pool_end_y_t, input_dim_h - in_idx_height);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z = std::min(pool_end_z_t, input_dim_d - in_idx_depth);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="comment">// Calculate scale</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> =</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                calculate_avg_scale_pool3d(pool_info.exclude_padding, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, pool_size_z,</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                           upper_bound_w, upper_bound_h, upper_bound_d, pool_pad_left, pool_pad_top,</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                                           pool_pad_front, pool_stride_x, pool_stride_y, pool_stride_z);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr_n = in_ptr_start + <span class="keywordtype">id</span>[4] * n_stride;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordtype">int</span> x_off = window_start_x;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x) <span class="comment">// C</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                q32x4_t vres1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                q32x4_t vres2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                q32x4_t vres3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                q32x4_t vres4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                            <span class="keyword">const</span> q8x16_t  data     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            <span class="keyword">const</span> q16x8_t data_q16  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data));</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                            <span class="keyword">const</span> q16x8_t data2_q16 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            vres1                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data_q16)));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                            vres2                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres2, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data_q16)));</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                            vres3                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres3, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data2_q16)));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            vres4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres4, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data2_q16)));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keyword">const</span> float32x4x4_t vres = {{</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        vcvtq_f32_q32(vres1),</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        vcvtq_f32_q32(vres2),</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        vcvtq_f32_q32(vres3),</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        vcvtq_f32_q32(vres4),</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }};</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>          requantized_dst =</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        vrequantize_pooling_with_scale&lt;q8x16_t&gt;(vres, quant_rescale, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, new_offset);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(requantized_dst));</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off + 8, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(requantized_dst));</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keyword">const</span> float32x4_t scale_v = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    vres1 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres1), scale_v));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    vres2 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres2), scale_v));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    vres3 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres3), scale_v));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    vres4 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres4), scale_v));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keyword">const</span> q8x8_t res1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres1), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres2)));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keyword">const</span> q8x8_t res2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres3), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres4)));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off, res1);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off + 8, res2);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt; window_end_x; ++x_off)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                q32_t res = <span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <span class="keyword">const</span> T        data     = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            res += data;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> res_f           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> new_scale       = quant_rescale / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>  requantized_dst = quantize&lt;T&gt;(res_f, UniformQuantizationInfo(new_scale, new_offset));</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = requantized_dst;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    res = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.5f + <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        },</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        out);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00643">Padding3D::back</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00641">Padding3D::bottom</a>, <a class="el" href="_size3_d_8h_source.xhtml#l00093">Size3D::depth</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01252">Pooling3dLayerInfo::exclude_padding</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00642">Padding3D::front</a>, <a class="el" href="_size3_d_8h_source.xhtml#l00092">Size3D::height</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01253">Pooling3dLayerInfo::is_global_pooling</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00638">Padding3D::left</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01251">Pooling3dLayerInfo::padding</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01249">Pooling3dLayerInfo::pool_size</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00639">Padding3D::right</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01250">Pooling3dLayerInfo::stride</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00640">Padding3D::top</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_size3_d_8h_source.xhtml#l00091">Size3D::width</a>.</p>

</div>
</div>
<a id="aa2bd926ffb919c8d69bbf968a708b43f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2bd926ffb919c8d69bbf968a708b43f">&#9670;&nbsp;</a></span>batch_normalization_nchw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::batch_normalization_nchw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00036">36</a> of file <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Window win_to_use = window;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    win_to_use.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win_to_use);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Iterator output(out, win_to_use);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    F activation_functor(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Hold information about the current feature map we are iterating.</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Only compute denominator and constants once per feature map.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a> = -1;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_mean = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_mean-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_var  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_var-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_gamma =</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        (in_gamma != <span class="keyword">nullptr</span>) ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_gamma-&gt;ptr_to_element(Coordinates(0, 0))) : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_beta =</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        (in_beta != <span class="keyword">nullptr</span>) ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_beta-&gt;ptr_to_element(Coordinates(0, 0))) : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    T mean        = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    T var         = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    T gamma       = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    T beta        = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    T denominator = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">auto</span>       mean_vec        = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(mean, ExactTagType{});</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">auto</span>       var_vec         = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(var, ExactTagType{});</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">auto</span>       gamma_vec       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(gamma, ExactTagType{});</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">auto</span>       beta_vec        = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(beta, ExactTagType{});</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">auto</span>       denominator_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(denominator, ExactTagType{});</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> epsilon_vec     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>), ExactTagType{});</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        win_to_use,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a> != <span class="keywordtype">id</span>.z())</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                mean     = input_mean[<span class="keywordtype">id</span>.z()];</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                var      = input_var[<span class="keywordtype">id</span>.z()];</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                mean_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(mean, ExactTagType{});</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                var_vec  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(var, ExactTagType{});</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">if</span> (input_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    gamma     = input_gamma[<span class="keywordtype">id</span>.z()];</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    gamma_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(gamma, ExactTagType{});</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">if</span> (input_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    beta     = input_beta[<span class="keywordtype">id</span>.z()];</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    beta_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(beta, ExactTagType{});</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="comment">// Calculate denominator</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                denominator_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(var_vec, epsilon_vec));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                denominator     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(denominator_vec, 0);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">slice</a>           = <span class="keywordtype">id</span>.z();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="comment">// Perform core calculations using vector operations</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="comment">// Calculate x bar</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> numerator = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x), mean_vec);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> x_bar     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(numerator, denominator_vec);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keyword">auto</span>       res       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(beta_vec, x_bar, gamma_vec);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="comment">// Perform fused activation</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">if</span> (fused_activation)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    activation_functor(res);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="comment">// Store results</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keyword">const</span> T numerator = input_ptr[x] - mean;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keyword">const</span> T x_bar     = numerator * denominator;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                T       res       = beta + x_bar * gamma;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="comment">// Perform fused activation</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">if</span> (fused_activation)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    activation_functor(res);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="comment">// Store results</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                *(output_ptr + x) = res;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        },</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_slice_operations_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::slice()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00048">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a19c90203a243568f6429307584a1475a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19c90203a243568f6429307584a1475a">&#9670;&nbsp;</a></span>bilinear_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::bilinear_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00315">315</a> of file <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml">list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(offsets);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dy);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="comment">// Compute the ratio between source and destination dimensions</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> =</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1), align_corners);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> =</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(2), align_corners);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_dim_w     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_dim_h     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_dim_ch   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> step_cout    = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    Window window_execution = window;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    window_execution.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    Window win_in_out(window);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    win_in_out.set(Window::DimY, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    win_in_out.set(Window::DimZ, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in_out);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_in_out);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_start = window_execution.y().start();</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_end   = window_execution.y().end();</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_step  = window_execution.y().step();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_start = window_execution.z().start();</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_end   = window_execution.z().end();</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_step  = window_execution.z().step();</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_start = window_execution[3].start();</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_end   = window_execution[3].end();</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_step  = window_execution[3].step();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> (border_mode == BorderMode::CONSTANT)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">using</span> ConstType = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T, float16_t&gt;::value, <a class="code" href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">half</a>, T&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keyword">using</span> ConstType = T;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keyword">const</span> T const_border_value = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(constant_border_value.get&lt;ConstType&gt;());</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bo = bo_start; bo &lt; bo_end; bo += bo_step)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr_base  = in.ptr() + bo * in_stride_w;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            uint8_t       *out_ptr_base = out.ptr() + bo * out_stride_w;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> yo = yo_start; yo &lt; yo_end; yo += yo_step)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> yi_f = ((yo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_offset);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> yi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(yi_f));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                <span class="comment">// Weight for the y coordinate</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a1 = (yi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(yi));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b1 = (1.f - a1);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xo = xo_start; xo &lt; xo_end; xo += xo_step)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> xi_f = ((xo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_offset);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(xi_f));</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    <span class="comment">// Weight for the x coordinate</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a = (xi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(xi));</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = (1.f - a);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s00_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * b1);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s01_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * b1);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s10_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * a1);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s11_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * a1);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr  = in_ptr_base + xi * in_stride_y + yi * in_stride_z;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                    uint8_t       *out_ptr = out_ptr_base + xo * out_stride_y + yo * out_stride_z;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    <span class="keywordtype">int</span> cout = 0;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt;= (out_dim_ch - step_cout); cout += step_cout)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                        <span class="keyword">auto</span> in00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                        <span class="keyword">auto</span> in01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                        <span class="keyword">auto</span> in10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                        <span class="keyword">auto</span> in11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value), ExactTagType{});</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                        <span class="keywordflow">if</span> ((yi &gt;= 0) &amp;&amp; (yi &lt; in_dim_h))</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                            {</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                in00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                            }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                            {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                                in01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y));</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                        }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                        <span class="keywordflow">if</span> (((yi + 1) &gt;= 0) &amp;&amp; ((yi + 1) &lt; in_dim_h))</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                        {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                            {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                in10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_z));</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                            }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                            {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                in11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y + in_stride_z));</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                            }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        }</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s00  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s00_s, ExactTagType{});</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s01  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s01_s, ExactTagType{});</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s10  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s10_s, ExactTagType{});</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> s11  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s11_s, ExactTagType{});</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                        <span class="keyword">auto</span>       out0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in00, s00);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in01, s01);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in10, s10);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                        out0            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in11, s11);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T)), out0);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    }</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt; out_dim_ch; ++cout)</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        <span class="keyword">auto</span> in00 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                        <span class="keyword">auto</span> in01 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                        <span class="keyword">auto</span> in10 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                        <span class="keyword">auto</span> in11 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(const_border_value);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                        <span class="keywordflow">if</span> ((yi &gt;= 0) &amp;&amp; (yi &lt; in_dim_h))</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                        {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                            {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                                in00 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                            }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                            {</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                in01 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y));</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                            }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                        }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        <span class="keywordflow">if</span> (((yi + 1) &gt;= 0) &amp;&amp; ((yi + 1) &lt; in_dim_h))</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                            <span class="keywordflow">if</span> ((xi &gt;= 0) &amp;&amp; (xi &lt; in_dim_w))</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                            {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                                in10 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_z));</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                            }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                            <span class="keywordflow">if</span> (((xi + 1) &gt;= 0) &amp;&amp; ((xi + 1) &lt; in_dim_w))</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                            {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                                in11 = *(</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + in_stride_y + in_stride_z));</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                            }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                        <span class="keyword">auto</span> out0 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                        out0 += in00 * s00_s;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                        out0 += in01 * s01_s;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                        out0 += in10 * s10_s;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                        out0 += in11 * s11_s;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T))) = out0;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        }</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    }</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (border_mode == BorderMode::REPLICATE)</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bo = bo_start; bo &lt; bo_end; bo += bo_step)</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr  = in.ptr() + bo * in_stride_w;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            uint8_t       *out_ptr = out.ptr() + bo * out_stride_w;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160; </div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> yo = yo_start; yo &lt; yo_end; yo += yo_step)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> yi_f = ((yo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> - sampling_offset);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> yi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(yi_f));</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="comment">// Weight for the y coordinate</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a1 = (yi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(yi));</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> b1 = (1.f - a1);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi0 = utility::clamp&lt;int&gt;(yi, 0, in_dim_h - 1);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi1 = utility::clamp&lt;int&gt;(yi + 1, 0, in_dim_h - 1);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi0_offset = yi0 * in_stride_z;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> yi1_offset = yi1 * in_stride_z;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> y_offset = yo * out_stride_z;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xo = xo_start; xo &lt; xo_end; xo += xo_step)</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                {</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> xi_f = ((xo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> - sampling_offset);</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                    <span class="comment">// Integer coordinate</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> xi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(xi_f));</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    <span class="comment">// Weight for the x coordinate</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a = (xi_f - <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(xi));</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = (1.f - a);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160; </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s00_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * b1);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s01_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * b1);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s10_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * a1);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s11_s = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(a * a1);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160; </div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s00_s, ExactTagType{});</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s01_s, ExactTagType{});</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s10_s, ExactTagType{});</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> s11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(s11_s, ExactTagType{});</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi0 = utility::clamp&lt;int&gt;(xi, 0, in_dim_w - 1);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi1 = utility::clamp&lt;int&gt;(xi + 1, 0, in_dim_w - 1);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160; </div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi0_offset = xi0 * in_stride_y;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> xi1_offset = xi1 * in_stride_y;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = xo * out_stride_y + y_offset;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                    <span class="keywordtype">int</span> cout = 0;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt;= (out_dim_ch - step_cout); cout += step_cout)</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                    {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in00 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi0_offset));</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in01 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi0_offset));</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in10 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi1_offset));</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in11 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                            <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi1_offset));</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                        <span class="keyword">auto</span> out0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(in00, s00);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                        out0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in01, s01);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                        out0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in10, s10);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                        out0      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out0, in11, s11);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + cout * <span class="keyword">sizeof</span>(T)), out0);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                    }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160; </div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                    <span class="keywordflow">for</span> (; cout &lt; out_dim_ch; ++cout)</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                    {</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                        <span class="keyword">const</span> T in00 =</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi0_offset));</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                        <span class="keyword">const</span> T in01 =</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi0_offset));</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                        <span class="keyword">const</span> T in10 =</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi0_offset + yi1_offset));</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                        <span class="keyword">const</span> T in11 =</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T) + xi1_offset + yi1_offset));</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                        T out0 = in00 * s00_s;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                        out0 += in01 * s01_s;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                        out0 += in10 * s10_s;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                        out0 += in11 * s11_s;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + cout * <span class="keyword">sizeof</span>(T))) = out0;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                    }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                }</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            }</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_scale_utils_8cpp_source.xhtml#l00032">arm_compute::scale_utils::calculate_resize_ratio()</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a8d6b5cada83510220f59e00ce86d4d92">arm_compute::CONSTANT</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_pixel_value_8h_source.xhtml#l00228">PixelValue::get()</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::REPLICATE</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">arm_compute::test::validation::scale_x</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">arm_compute::test::validation::scale_y</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>, and <a class="el" href="_window_8h_source.xhtml#l00176">Window::z()</a>.</p>

</div>
</div>
<a id="a9e47985453d09e1a0724c18b0edd789a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e47985453d09e1a0724c18b0edd789a">&#9670;&nbsp;</a></span>bounding_box_transform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::bounding_box_transform </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>pred_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a>&#160;</td>
          <td class="paramname"><em>bbinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8h_source.xhtml#l00033">33</a> of file <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_classes  = deltas-&gt;info()-&gt;tensor_shape()[0] &gt;&gt; 2;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> deltas_width = deltas-&gt;info()-&gt;tensor_shape()[0];</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    img_h        = std::floor(bbinfo.img_height() / bbinfo.scale() + 0.5f);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    img_w        = std::floor(bbinfo.img_width() / bbinfo.scale() + 0.5f);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale_after  = (bbinfo.apply_scale() ? T(bbinfo.scale()) : T(1));</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale_before = T(bbinfo.scale());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(scale_before &lt;= 0);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> = (bbinfo.correct_transform_coords() ? T(1.f) : T(0.f));</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">auto</span> pred_ptr  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(pred_boxes-&gt;buffer() + pred_boxes-&gt;info()-&gt;offset_first_element_in_bytes());</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span> delta_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(deltas-&gt;buffer() + deltas-&gt;info()-&gt;offset_first_element_in_bytes());</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Iterator box_it(boxes, window);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        window,</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> ptr    = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(box_it.ptr());</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> b0     = *ptr;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> b1     = *(ptr + 1);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> b2     = *(ptr + 2);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> b3     = *(ptr + 3);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keyword">const</span> T    width  = (b2 / scale_before) - (b0 / scale_before) + T(1.f);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keyword">const</span> T    height = (b3 / scale_before) - (b1 / scale_before) + T(1.f);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">const</span> T    ctr_x  = (b0 / scale_before) + T(0.5f) * width;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keyword">const</span> T    ctr_y  = (b1 / scale_before) + T(0.5f) * height;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; num_classes; ++j)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="comment">// Extract deltas</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">size_t</span> delta_id = <span class="keywordtype">id</span>.y() * deltas_width + 4u * j;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keyword">const</span> T      dx       = delta_ptr[delta_id] / T(bbinfo.weights()[0]);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="keyword">const</span> T      dy       = delta_ptr[delta_id + 1] / T(bbinfo.weights()[1]);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                T            dw       = delta_ptr[delta_id + 2] / T(bbinfo.weights()[2]);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                T            dh       = delta_ptr[delta_id + 3] / T(bbinfo.weights()[3]);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="comment">// Clip dw and dh</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                dw = std::min(dw, T(bbinfo.bbox_xform_clip()));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                dh = std::min(dh, T(bbinfo.bbox_xform_clip()));</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="comment">// Determine the predictions</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keyword">const</span> T pred_ctr_x = dx * width + ctr_x;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">const</span> T pred_ctr_y = dy * height + ctr_y;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keyword">const</span> T pred_w     = std::exp(dw) * width;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keyword">const</span> T pred_h     = std::exp(dh) * height;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="comment">// Store the prediction into the output tensor</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                pred_ptr[delta_id] = scale_after * utility::clamp&lt;T&gt;(pred_ctr_x - T(0.5f) * pred_w, T(0), T(img_w - 1));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                pred_ptr[delta_id + 1] =</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    scale_after * utility::clamp&lt;T&gt;(pred_ctr_y - T(0.5f) * pred_h, T(0), T(img_h - 1));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                pred_ptr[delta_id + 2] =</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    scale_after * utility::clamp&lt;T&gt;(pred_ctr_x + T(0.5f) * pred_w - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, T(0), T(img_w - 1));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                pred_ptr[delta_id + 3] =</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    scale_after * utility::clamp&lt;T&gt;(pred_ctr_y + T(0.5f) * pred_h - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, T(0), T(img_h - 1));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        },</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        box_it);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01508">BoundingBoxTransformInfo::apply_scale()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01488">BoundingBoxTransformInfo::bbox_xform_clip()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01513">BoundingBoxTransformInfo::correct_transform_coords()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01493">BoundingBoxTransformInfo::img_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01498">BoundingBoxTransformInfo::img_width()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01503">BoundingBoxTransformInfo::scale()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01483">BoundingBoxTransformInfo::weights()</a>.</p>

</div>
</div>
<a id="aea3a0fb40df47ae7c0b421618d4e35e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea3a0fb40df47ae7c0b421618d4e35e6">&#9670;&nbsp;</a></span>bounding_box_transform_qsymm16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bounding_box_transform_qsymm16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>pred_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a>&#160;</td>
          <td class="paramname"><em>bbinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_classes  = deltas-&gt;info()-&gt;tensor_shape()[0] &gt;&gt; 2;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> deltas_width = deltas-&gt;info()-&gt;tensor_shape()[0];</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    img_h        = std::floor(bbinfo.img_height() / bbinfo.scale() + 0.5f);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    img_w        = std::floor(bbinfo.img_width() / bbinfo.scale() + 0.5f);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale_after  = (bbinfo.apply_scale() ? bbinfo.scale() : 1.f);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scale_before = bbinfo.scale();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>       = (bbinfo.correct_transform_coords() ? 1.f : 0.f);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">auto</span> pred_ptr =</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keyword">reinterpret_cast&lt;</span>uint16_t *<span class="keyword">&gt;</span>(pred_boxes-&gt;buffer() + pred_boxes-&gt;info()-&gt;offset_first_element_in_bytes());</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span> delta_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(deltas-&gt;buffer() + deltas-&gt;info()-&gt;offset_first_element_in_bytes());</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> boxes_qinfo  = boxes-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> deltas_qinfo = deltas-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> pred_qinfo   = pred_boxes-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    Iterator box_it(boxes, window);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        window,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  ptr    = <span class="keyword">reinterpret_cast&lt;</span>uint16_t *<span class="keyword">&gt;</span>(box_it.ptr());</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  b0     = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(*ptr, boxes_qinfo);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  b1     = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(*(ptr + 1), boxes_qinfo);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  b2     = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(*(ptr + 2), boxes_qinfo);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>  b3     = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(*(ptr + 3), boxes_qinfo);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> width  = (b2 / scale_before) - (b0 / scale_before) + 1.f;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> height = (b3 / scale_before) - (b1 / scale_before) + 1.f;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> ctr_x  = (b0 / scale_before) + 0.5f * width;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> ctr_y  = (b1 / scale_before) + 0.5f * height;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; num_classes; ++j)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="comment">// Extract deltas</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">size_t</span> delta_id = <span class="keywordtype">id</span>.y() * deltas_width + 4u * j;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span>  dx       = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(delta_ptr[delta_id], deltas_qinfo) / bbinfo.weights()[0];</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span>  dy       = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(delta_ptr[delta_id + 1], deltas_qinfo) / bbinfo.weights()[1];</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordtype">float</span>        dw       = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(delta_ptr[delta_id + 2], deltas_qinfo) / bbinfo.weights()[2];</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keywordtype">float</span>        dh       = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(delta_ptr[delta_id + 3], deltas_qinfo) / bbinfo.weights()[3];</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="comment">// Clip dw and dh</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                dw = std::min(dw, bbinfo.bbox_xform_clip());</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                dh = std::min(dh, bbinfo.bbox_xform_clip());</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="comment">// Determine the predictions</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> pred_ctr_x = dx * width + ctr_x;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> pred_ctr_y = dy * height + ctr_y;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> pred_w     = std::exp(dw) * width;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> pred_h     = std::exp(dh) * height;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="comment">// Store the prediction into the output tensor</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                pred_ptr[delta_id] = <a class="code" href="namespacearm__compute.xhtml#a3fcdebf0b2654721ecdfa39b6bbd542d">quantize_qasymm16</a>(</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    scale_after * utility::clamp&lt;float&gt;(pred_ctr_x - 0.5f * pred_w, 0.f, img_w - 1.f), pred_qinfo);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                pred_ptr[delta_id + 1] = <a class="code" href="namespacearm__compute.xhtml#a3fcdebf0b2654721ecdfa39b6bbd542d">quantize_qasymm16</a>(</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    scale_after * utility::clamp&lt;float&gt;(pred_ctr_y - 0.5f * pred_h, 0.f, img_h - 1.f), pred_qinfo);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                pred_ptr[delta_id + 2] = <a class="code" href="namespacearm__compute.xhtml#a3fcdebf0b2654721ecdfa39b6bbd542d">quantize_qasymm16</a>(</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    scale_after * utility::clamp&lt;float&gt;(pred_ctr_x + 0.5f * pred_w - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, 0.f, img_w - 1.f),</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    pred_qinfo);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                pred_ptr[delta_id + 3] = <a class="code" href="namespacearm__compute.xhtml#a3fcdebf0b2654721ecdfa39b6bbd542d">quantize_qasymm16</a>(</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    scale_after * utility::clamp&lt;float&gt;(pred_ctr_y + 0.5f * pred_h - <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, 0.f, img_h - 1.f),</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    pred_qinfo);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        },</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        box_it);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01508">BoundingBoxTransformInfo::apply_scale()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01488">BoundingBoxTransformInfo::bbox_xform_clip()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01513">BoundingBoxTransformInfo::correct_transform_coords()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00537">arm_compute::dequantize_qasymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00367">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01493">BoundingBoxTransformInfo::img_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01498">BoundingBoxTransformInfo::img_width()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00521">arm_compute::quantize_qasymm16()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01503">BoundingBoxTransformInfo::scale()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01483">BoundingBoxTransformInfo::weights()</a>.</p>

<p class="reference">Referenced by <a class="el" href="boundingboxtransform_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00029">neon_qu16_boundingboxtransform()</a>.</p>

</div>
</div>
<a id="a2bc4661d8856bc18b82ecece8694634c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bc4661d8856bc18b82ecece8694634c">&#9670;&nbsp;</a></span>common_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::common_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00592">592</a> of file <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml">list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;{</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::BILINEAR)</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    {</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        bilinear_neon_scale&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                               align_corners, window);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    }</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        nearest_neon_scale&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="ada5ad0dbce712a2380e03e821bbe9de2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada5ad0dbce712a2380e03e821bbe9de2">&#9670;&nbsp;</a></span>compute_all_anchors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::compute_all_anchors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>all_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a>&#160;</td>
          <td class="paramname"><em>anchors_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="genproposals_2generic_2neon_2impl_8h_source.xhtml#l00036">36</a> of file <a class="el" href="genproposals_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    Iterator all_anchors_it(all_anchors, window);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    Iterator anchors_it(all_anchors, window);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_anchors = anchors-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> T      stride      = 1.f / anchors_info.spatial_scale();</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> feat_width  = anchors_info.feat_width();</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        window,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> anchor_offset = <span class="keywordtype">id</span>.y() % num_anchors;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_anchor_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(all_anchors_it.ptr());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> anchor_ptr     = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(anchors-&gt;ptr_to_element(Coordinates(0, anchor_offset)));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> shift_idy = <span class="keywordtype">id</span>.y() / num_anchors;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">const</span> T      shiftx    = (shift_idy % feat_width) * stride;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keyword">const</span> T      shifty    = (shift_idy / feat_width) * stride;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            *out_anchor_ptr       = *anchor_ptr + shiftx;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            *(out_anchor_ptr + 1) = *(1 + anchor_ptr) + shifty;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            *(out_anchor_ptr + 2) = *(2 + anchor_ptr) + shiftx;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            *(out_anchor_ptr + 3) = *(3 + anchor_ptr) + shifty;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        },</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        all_anchors_it);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01428">ComputeAnchorsInfo::feat_width()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01434">ComputeAnchorsInfo::spatial_scale()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="aef4214cfa8378eaebdbd1d3dc139f370"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef4214cfa8378eaebdbd1d3dc139f370">&#9670;&nbsp;</a></span>compute_all_anchors_qasymm16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void compute_all_anchors_qasymm16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>all_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a>&#160;</td>
          <td class="paramname"><em>anchors_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    Iterator all_anchors_it(all_anchors, window);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    Iterator anchors_it(all_anchors, window);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> num_anchors = anchors-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>  stride      = 1.f / anchors_info.spatial_scale();</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> feat_width  = anchors_info.feat_width();</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a> = anchors-&gt;info()-&gt;quantization_info().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        window,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> anchor_offset = <span class="keywordtype">id</span>.y() % num_anchors;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_anchor_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(all_anchors_it.ptr());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> anchor_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(anchors-&gt;ptr_to_element(Coordinates(0, anchor_offset)));</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">size_t</span> shift_idy = <span class="keywordtype">id</span>.y() / num_anchors;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span>  shiftx    = (shift_idy % feat_width) * stride;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span>  shifty    = (shift_idy / feat_width) * stride;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> new_anchor_x1 = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(*anchor_ptr, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>) + shiftx;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> new_anchor_y1 = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(*(1 + anchor_ptr), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>) + shifty;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> new_anchor_x2 = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(*(2 + anchor_ptr), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>) + shiftx;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> new_anchor_y2 = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(*(3 + anchor_ptr), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>) + shifty;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            *out_anchor_ptr       = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(new_anchor_x1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            *(out_anchor_ptr + 1) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(new_anchor_y1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            *(out_anchor_ptr + 2) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(new_anchor_x2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            *(out_anchor_ptr + 3) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(new_anchor_y2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>.<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        },</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        all_anchors_it);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00484">arm_compute::dequantize_qsymm16()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01428">ComputeAnchorsInfo::feat_width()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00468">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00120">QuantizationInfo::scale()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01434">ComputeAnchorsInfo::spatial_scale()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="genproposals_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00029">neon_qu16_computeallanchors()</a>.</p>

</div>
</div>
<a id="ae34c923cebe0f52cde52dbef0eca2d5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae34c923cebe0f52cde52dbef0eca2d5b">&#9670;&nbsp;</a></span>compute_region_coordinate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float arm_compute::cpu::compute_region_coordinate </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>bin_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>roi_anchor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>max_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00267">267</a> of file <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> region_start = p * bin_size + roi_anchor;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">utility::clamp</a>(region_start, 0.0f, max_value);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_utility_8h_source.xhtml#l00102">arm_compute::utility::clamp()</a>.</p>

<p class="reference">Referenced by <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00274">roi_align()</a>.</p>

</div>
</div>
<a id="a72ad2e7a80704bf6bcd4315471174ca1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72ad2e7a80704bf6bcd4315471174ca1">&#9670;&nbsp;</a></span>depth_to_space_nchw_any()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void depth_to_space_nchw_any </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uintptr_t&#160;</td>
          <td class="paramname"><em>src_shape</em>[4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uintptr_t&#160;</td>
          <td class="paramname"><em>src_strides</em>[4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uintptr_t&#160;</td>
          <td class="paramname"><em>dst_strides</em>[4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uintptr_t&#160;</td>
          <td class="paramname"><em>element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uintptr_t&#160;</td>
          <td class="paramname"><em>block_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depth__to__space_2nchw_2any_2impl_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="depth__to__space_2nchw_2any_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src_strides[0] != element_size);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dst_strides[0] != element_size);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dst_channels         = src_shape[2] / (block_size * block_size);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_block_col_stride = dst_channels * src_strides[2];</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_block_row_stride = block_size * dst_channels * src_strides[2];</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">auto</span> *src_batch_ptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">auto</span> *dst_batch_ptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span> (uintptr_t batch = 0; batch &lt; src_shape[3]; ++batch)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">auto</span> *src_channel_ptr = src_batch_ptr;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">auto</span> *dst_channel_ptr = dst_batch_ptr;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">for</span> (uintptr_t channel = 0; channel &lt; dst_channels; ++channel)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keyword">auto</span> *src_height_block_ptr = src_channel_ptr;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keyword">auto</span> *dst_row_ptr          = dst_channel_ptr;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">for</span> (uintptr_t height_block = 0; height_block &lt; src_shape[1]; ++height_block)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keyword">auto</span> *src_block_row_ptr = src_height_block_ptr;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keywordflow">for</span> (uintptr_t block_row = 0; block_row &lt; block_size; ++block_row)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                    <span class="keyword">auto</span> *src_width_block_ptr = src_block_row_ptr;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                    <span class="keyword">auto</span> *dst_col_ptr         = dst_row_ptr;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                    <span class="keywordflow">for</span> (uintptr_t width_block = 0; width_block &lt; src_shape[0]; ++width_block)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                        <span class="keyword">auto</span> *src_block_col_ptr = src_width_block_ptr;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                        <span class="keywordflow">for</span> (uintptr_t block_col = 0; block_col &lt; block_size; ++block_col)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                        {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                            <span class="comment">// The source pointer is accumulated as:</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                            <span class="comment">//</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                            <span class="comment">// src_block_col_ptr =</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                            <span class="comment">//   src +</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                            <span class="comment">//   batch * dst_strides[3] +</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                            <span class="comment">//   (channel + (block_row * block_size + block_col) * dst_channels) * src_strides[2] +</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                            <span class="comment">//   height_block * src_strides[1] +</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                            <span class="comment">//   width_block * element_size;</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                            <span class="comment">//</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                            <span class="comment">// The destination pointer is accumuated as:</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                            <span class="comment">//</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                            <span class="comment">// dst_col_ptr =</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                            <span class="comment">//   dst +</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                            <span class="comment">//   batch * dst_strides[3] +</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                            <span class="comment">//   channel * dst_strides[2] +</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                            <span class="comment">//   (height_block * block_size + block_row) * dst_strides[1] +</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                            <span class="comment">//   (width_block * block_size + block_col) * element_size</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                            std::memcpy(dst_col_ptr, src_block_col_ptr, element_size);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                            src_block_col_ptr += src_block_col_stride;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                            dst_col_ptr += element_size;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        src_width_block_ptr += element_size;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    src_block_row_ptr += src_block_row_stride;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    dst_row_ptr += dst_strides[1];</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                src_height_block_ptr += src_strides[1];</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            src_channel_ptr += src_strides[2];</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            dst_channel_ptr += dst_strides[2];</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        src_batch_ptr += src_strides[3];</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        dst_batch_ptr += dst_strides[3];</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00134">NEDepthToSpaceLayerKernel::run()</a>.</p>

</div>
</div>
<a id="afc2c89fc26ee94755a3da5ce715db4ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc2c89fc26ee94755a3da5ce715db4ac">&#9670;&nbsp;</a></span>depth_to_space_nhwc_any()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void depth_to_space_nhwc_any </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uintptr_t&#160;</td>
          <td class="paramname"><em>src_shape</em>[4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uintptr_t&#160;</td>
          <td class="paramname"><em>src_strides</em>[4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uintptr_t&#160;</td>
          <td class="paramname"><em>dst_strides</em>[4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uintptr_t&#160;</td>
          <td class="paramname"><em>element_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uintptr_t&#160;</td>
          <td class="paramname"><em>block_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depth__to__space_2nhwc_2any_2impl_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="depth__to__space_2nhwc_2any_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(src_strides[0] != element_size);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(dst_strides[0] != element_size);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> src_block_row_stride   = (src_shape[0] / block_size) * element_size;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dst_width_block_stride = block_size * dst_strides[1];</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span> *src_batch_ptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">auto</span> *dst_batch_ptr = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span> (uintptr_t batch = 0; batch &lt; src_shape[3]; ++batch)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keyword">auto</span> *src_height_block_ptr = src_batch_ptr;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">auto</span> *dst_row_ptr          = dst_batch_ptr;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">for</span> (uintptr_t height_block = 0; height_block &lt; src_shape[2]; ++height_block)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">auto</span> *src_block_row_ptr = src_height_block_ptr;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">for</span> (uintptr_t block_row = 0; block_row &lt; block_size; ++block_row)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keyword">auto</span> *src_width_block_ptr = src_block_row_ptr;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keyword">auto</span> *dst_width_block_ptr = dst_row_ptr;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordflow">for</span> (uintptr_t width_block = 0; width_block &lt; src_shape[1]; ++width_block)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                    <span class="comment">// The source pointer is accumulated as:</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                    <span class="comment">//</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                    <span class="comment">// src_width_block_ptr =</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                    <span class="comment">//   src +</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                    <span class="comment">//   batch * src_strides[3] +</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                    <span class="comment">//   height_block * src_strides[2] +</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                    <span class="comment">//   width_block * src_strides[1] +</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="comment">//   block_row * (src_shape[0] / block_size) * element_size;</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    <span class="comment">//</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="comment">// The destination pointer is accumulated as:</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    <span class="comment">//</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    <span class="comment">// dst_width_block_ptr =</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="comment">//     dst +</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    <span class="comment">//     batch * dst_strides[3] +</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="comment">//     (height_block * block_size + block_row) * dst_strides[2] +</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="comment">//     width_block * block_size * dst_strides[1];</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    std::memcpy(dst_width_block_ptr, src_width_block_ptr, src_block_row_stride);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    src_width_block_ptr += src_strides[1];</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    dst_width_block_ptr += dst_width_block_stride;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                src_block_row_ptr += src_block_row_stride;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                dst_row_ptr += dst_strides[2];</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            src_height_block_ptr += src_strides[2];</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        src_batch_ptr += src_strides[3];</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        dst_batch_ptr += dst_strides[3];</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00134">NEDepthToSpaceLayerKernel::run()</a>.</p>

</div>
</div>
<a id="a290a58727fef5da244133a6ff8270fbd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a290a58727fef5da244133a6ff8270fbd">&#9670;&nbsp;</a></span>depthwise_loop_generic_fp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::depthwise_loop_generic_fp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>depth_multiplier</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">244</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info =</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        DepthwiseConvolutionRunInfo(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window, depth_multiplier);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    Window execution_window = window;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    execution_window.set(Window::DimX, Window::Dimension(0, run_info.input_depth, 1));</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    Window win_input = execution_window;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    win_input.set(Window::DimX, Window::Dimension(0, run_info.input_depth, 1));</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    win_input.set(Window::DimY, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    win_input.set(Window::DimZ, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    Window win_weights = window;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    win_weights.set_dimension_step(Window::DimX, run_info.x_step);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    win_weights.set(Window::DimY, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    win_weights.set(Window::DimZ, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    win_weights.set(Window::DimW, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    Window win_output = window;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    win_output.set_dimension_step(Window::DimX, run_info.x_step);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    Iterator input_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_input);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    Iterator weights_it(weights, win_weights);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    Iterator output_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_output);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    Iterator biases_it{};</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        biases_it = Iterator(biases, win_weights);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    }</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        execution_window,</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            std::vector&lt;T&gt; acc(depth_multiplier, <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0));</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> input_y      = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> input_z      = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordtype">int</span>       input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keyword">auto</span> weights_ptr = weights_it.ptr();</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordtype">int</span> offs = input_offset;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">is_valid_input_region</a>(input_y, input_z, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h, run_info, dilation);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input_val =</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                        is_valid_region ? *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() + std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(offs),</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                                                                            run_info.input_max_offset)))</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                        : T(0);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> m = 0; m &lt; depth_multiplier; ++m)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_val =</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(weights_ptr + m * <span class="keyword">sizeof</span>(T) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * run_info.weights_stride_y));</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        acc.at(m) = <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">support::cpp11::fma</a>(weights_val, input_val, acc.at(m));</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    offs += dilation.x() * run_info.input_stride_y;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                }</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                weights_ptr += run_info.weights_stride_z;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                input_offset += dilation.y() * run_info.input_stride_z;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> m = 0; m &lt; depth_multiplier; ++m)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> biases_val = *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(biases_it.ptr() + m * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr() + m * <span class="keyword">sizeof</span>(T))) = acc.at(m) + biases_val;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> m = 0; m &lt; depth_multiplier; ++m)</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr() + m * <span class="keyword">sizeof</span>(T))) = acc.at(m);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        },</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        input_it, weights_it, biases_it, output_it);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00041">dim_manual_loop</a>, <a class="el" href="_window_8h_source.xhtml#l00049">Window::DimW</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00253">arm_compute::support::cpp11::fma()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00097">is_valid_input_region()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8inl_source.xhtml#l00181">Window::set_dimension_step()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00073">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00082">Size2D::y()</a>.</p>

</div>
</div>
<a id="a0e8b7ad27a89ed894f2cc8b732a7b032"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e8b7ad27a89ed894f2cc8b732a7b032">&#9670;&nbsp;</a></span>depthwise_loop_multiplier1_fp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::depthwise_loop_multiplier1_fp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">114</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    constexpr <span class="keyword">auto</span> element_per_vector = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a> / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">using</span> VectorType                  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::type</a>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">using</span> TagType                     = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::tag_type;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info = DepthwiseConvolutionRunInfo(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keyword">const</span> VectorType zero_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), TagType{});</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    Window execution_window = window;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    execution_window.set(Window::DimX, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ab11d49bc60990d21ee07967c219129ae">dim_single_unit_step</a>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    Window win_input = window;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    win_input.set(Window::DimX, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    win_input.set(Window::DimY, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    win_input.set(Window::DimZ, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    Window win_weights = win_input;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    win_weights.set(Window::DimW, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    Window win_output = window;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    win_output.set(Window::DimX, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    Iterator input_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_input);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    Iterator weights_it(weights, win_weights);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    Iterator output_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_output);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    Iterator biases_it{};</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        biases_it = Iterator(biases, win_weights);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        execution_window,</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">const</span> int32_t input_y           = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keyword">const</span> int32_t input_z           = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keyword">const</span> int64_t base_input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keyword">auto</span> <span class="keyword">const</span> base_weights_ptr = weights_it.ptr();</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            uint32_t   x                = run_info.x_start;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a> (; x &lt; run_info.x_leftover_start; x += run_info.x_step)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                VectorType acc          = zero_vector;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keyword">auto</span>       weights_ptr  = base_weights_ptr;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                int64_t    input_offset = base_input_offset;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="keywordflow">for</span> (uint32_t h = 0; h &lt; run_info.weights_height; ++h)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="keywordflow">for</span> (uint32_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">is_valid_input_region</a>(input_y, input_z, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h, run_info, dilation);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> input_vals =</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                            is_valid_region</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                      input_it.ptr() + std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(offs), run_info.input_max_offset)))</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                : zero_vector;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_vals =</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(weights_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * run_info.weights_stride_y) + x);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        acc = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc, weights_vals, input_vals);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        offs += dilation.x() * run_info.input_stride_y;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    weights_ptr += run_info.weights_stride_z;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    input_offset += dilation.y() * run_info.input_stride_z;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> biases_vals = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(biases_it.ptr()) + x);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    acc                    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(acc, biases_vals);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr()) + x, acc);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">for</span> (; x &lt; run_info.x_end; ++x)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keyword">auto</span>    acc_scalar   = T{0};</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keyword">auto</span>    weights_ptr  = base_weights_ptr;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                int64_t input_offset = base_input_offset;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">is_valid_input_region</a>(input_y, input_z, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h, run_info, dilation);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> input_vals =</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            is_valid_region</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                ? *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() +</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                                         std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(offs), run_info.input_max_offset))</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                : 0;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_vals =</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(weights_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * run_info.weights_stride_y) + x);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        acc_scalar += (input_vals * weights_vals);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        offs += dilation.x() * run_info.input_stride_y;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    weights_ptr += run_info.weights_stride_z;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    input_offset += dilation.y() * run_info.input_stride_z;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> biases_vals = *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(biases_it.ptr()) + x);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    acc_scalar += biases_vals;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr()) + x) = acc_scalar;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        },</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        input_it, weights_it, biases_it, output_it);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00041">dim_manual_loop</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00042">dim_single_unit_step</a>, <a class="el" href="_window_8h_source.xhtml#l00049">Window::DimW</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_unstack_8cpp_source.xhtml#l00091">arm_compute::test::validation::for()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00097">is_valid_input_region()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00043">vector_size</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00073">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00082">Size2D::y()</a>.</p>

</div>
</div>
<a id="afb624fed36c03d8e2aed044647a36900"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb624fed36c03d8e2aed044647a36900">&#9670;&nbsp;</a></span>directconv3d_float_neon_ndhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::directconv3d_float_neon_ndhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml#l00040">40</a> of file <a class="el" href="cpu_2kernels_2conv3d_2neon_2list_8h_source.xhtml">list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>     = src0;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> ITensor *weights = src1;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> ITensor *biases  = src2;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">using</span> vtype                                = wrapper::traits::neon_bitvector&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">using</span> vector_type                          = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">vtype::type</a>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">using</span> tag_type                             = <span class="keyword">typename</span> vtype::tag_type;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    constexpr <span class="keywordtype">int</span> num_elems_read_per_iteration = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Scalar quantities (N D H W Cin)</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> element_size   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y() / element_size;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z() / element_size;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3] / element_size;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_n = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[4] / element_size;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_d    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Kernel info (D H W Cin Cout)</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_w = weights-&gt;info()-&gt;strides_in_bytes()[2] / element_size;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_h = weights-&gt;info()-&gt;strides_in_bytes()[3] / element_size;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_d = weights-&gt;info()-&gt;strides_in_bytes()[4] / element_size;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_w    = weights-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_h    = weights-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_d    = weights-&gt;info()-&gt;dimension(4);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// Convolution padding and stride</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_top   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.padding.top;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_left  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.padding.left;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_front = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.padding.front;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride.width;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_h  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride.height;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_d  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride.depth;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Setup input window for the output iterator</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    Window window_out = window;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Setup input window for the weights iterator</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    Window window_w = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*weights-&gt;info(), Steps());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    window_w.set(Window::DimY, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    window_w.set(Window::DimZ, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    window_w.set(Window::DimW, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    window_w.set(4, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window_out);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    Iterator wei(weights, window_w);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> T *biases_ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">if</span> (biases != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        biases_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(biases-&gt;buffer() + biases-&gt;info()-&gt;offset_first_element_in_bytes());</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        window_out,</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// We are computing the theoretical input starting points</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * conv_stride_w - conv_pad_left;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * conv_stride_h - conv_pad_top;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>[3]) * conv_stride_d - conv_pad_front;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end_t   = in_w_start_t + kernel_dim_w;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end_t   = in_h_start_t + kernel_dim_h;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_end_t   = in_d_start_t + kernel_dim_d;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment">// We are computing the valid initial and ending input points by checking the borders</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start = std::max(in_w_start_t, 0);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start = std::max(in_h_start_t, 0);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_start = std::max(in_d_start_t, 0);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end   = std::min(in_w_end_t, input_dim_w);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end   = std::min(in_h_end_t, input_dim_h);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_end   = std::min(in_d_end_t, input_dim_d);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="comment">// We use the input points to select the valid weight points to use</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_w_start = in_w_start - in_w_start_t;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_start = in_h_start - in_h_start_t;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_d_start = in_d_start - in_d_start_t;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_w_end   = kernel_dim_w - (in_w_end_t - in_w_end);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_end   = kernel_dim_h - (in_h_end_t - in_h_end);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_d_end   = kernel_dim_d - (in_d_end_t - in_d_end);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>      index_c_out_end = weights-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>      index_c_in_end  = weights-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_start =</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes()) +</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordtype">id</span>[4] * input_stride_n;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                window_w,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                [&amp;](<span class="keyword">const</span> Coordinates &amp;id_w)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="comment">/*</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">            * This is the loop in the weights, and it goes along OFM (output feature map)</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">            */</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_ptr_start = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(wei.ptr());</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    T          out_temp          = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    T         *out_ptr           = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr());</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_d = wei_d_start, index_in_d = in_d_start; index_wei_d &lt; wei_d_end;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                         ++index_wei_d, ++index_in_d)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr_d      = in_ptr_start + index_in_d * input_stride_d;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_ptr_d = weights_ptr_start + index_wei_d * kernel_stride_d;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_h = wei_h_start, index_in_h = in_h_start; index_wei_h &lt; wei_h_end;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                             ++index_wei_h, ++index_in_h)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                            <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_row      = in_ptr_d + index_in_h * input_stride_h;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                            <span class="keyword">const</span> T *<span class="keyword">const</span> weights_ptr_row = weights_ptr_d + index_wei_h * kernel_stride_h;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_w = wei_w_start, index_in_w = in_w_start; index_wei_w &lt; wei_w_end;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                 ++index_wei_w, ++index_in_w)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                            {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                <span class="keyword">const</span> T    *in_ptr_mover      = in_ptr_row + index_in_w * input_stride_w;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                <span class="keyword">const</span> T    *weights_ptr_mover = weights_ptr_row + index_wei_w * kernel_stride_w;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                                <span class="keywordtype">int</span>         index_c_in        = 0;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                vector_type out_temp_vec      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                vector_type w_vec             = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                <span class="keywordflow">for</span> (; index_c_in &lt;= index_c_in_end - num_elems_read_per_iteration;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                     index_c_in += num_elems_read_per_iteration,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                     in_ptr_mover += num_elems_read_per_iteration)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_mover);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                    <span class="comment">//Load Cin weights</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_elems_read_per_iteration;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                         ++k, weights_ptr_mover += index_c_out_end)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                        w_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(*weights_ptr_mover, w_vec, k);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                    out_temp_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out_temp_vec, w_vec, src_vec);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                out_temp += <a class="code" href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">vreduce</a>(out_temp_vec);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                <span class="keywordflow">for</span> (; index_c_in &lt; index_c_in_end;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                     ++index_c_in, ++in_ptr_mover, weights_ptr_mover += index_c_out_end)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_val = *(in_ptr_mover);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> w_val   = *(weights_ptr_mover);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                    out_temp += src_val * w_val;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                            }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + id_w[0])) =</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        (biases_ptr != <span class="keyword">nullptr</span>) ? out_temp + biases_ptr[id_w[0]] : out_temp;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                },</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                wei);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        },</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        out);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00049">Window::DimW</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="_n_e_math_8inl_source.xhtml#l00537">arm_compute::vreduce()</a>, and <a class="el" href="setlane_8h_source.xhtml#l00091">arm_compute::wrapper::vsetlane()</a>.</p>

</div>
</div>
<a id="a5332a2bdbe6989559614f8baff0b0df4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5332a2bdbe6989559614f8baff0b0df4">&#9670;&nbsp;</a></span>directconv3d_quantized_neon_ndhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::directconv3d_quantized_neon_ndhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_conv3d_info.xhtml">Conv3dInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml#l00041">41</a> of file <a class="el" href="conv3d_2neon_2quantized_8h_source.xhtml">quantized.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>     = src0;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> ITensor *weights = src1;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> ITensor *biases  = src2;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">using</span> vtype                                = wrapper::traits::neon_bitvector&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">using</span> vector_type                          = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">vtype::type</a>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">using</span> tag_type                             = <span class="keyword">typename</span> vtype::tag_type;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    constexpr <span class="keywordtype">int</span> num_elems_read_per_iteration = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">using</span> q16_t                                = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;T&gt;;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">using</span> q32_t                                = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;q16_t&gt;;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">using</span> q32x4_t                              = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;q32_t, 4&gt;::type</a>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> int32_t input_offset   = -<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>   input_scale    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> int32_t weights_offset = -weights-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>   weights_scale  = weights-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> int32_t output_offset  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>   output_scale   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    int32_t     output_multiplier = 0;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    int32_t     output_shift      = 0;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier        = input_scale * weights_scale / output_scale;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a>(multiplier, &amp;output_multiplier, &amp;output_shift);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// Scalar quantities (N D H W Cin)</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> element_size   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y() / element_size;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z() / element_size;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3] / element_size;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_stride_n = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[4] / element_size;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_d    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Kernel info (D H W Cin Cout)</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_w = weights-&gt;info()-&gt;strides_in_bytes()[2] / element_size;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_h = weights-&gt;info()-&gt;strides_in_bytes()[3] / element_size;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_stride_d = weights-&gt;info()-&gt;strides_in_bytes()[4] / element_size;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_w    = weights-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_h    = weights-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          kernel_dim_d    = weights-&gt;info()-&gt;dimension(4);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// Convolution padding and stride</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_top   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.padding.top;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_left  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.padding.left;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_pad_front = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.padding.front;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride.width;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_h  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride.height;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> conv_stride_d  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>.stride.depth;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Setup input window for the output iterator</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    Window window_out = window;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// Setup input window for the weights iterator</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    Window window_w = <a class="code" href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">calculate_max_window</a>(*weights-&gt;info(), Steps());</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    window_w.set(Window::DimY, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    window_w.set(Window::DimZ, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    window_w.set(Window::DimW, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    window_w.set(4, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window_out);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    Iterator wei(weights, window_w);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> int32_t *biases_ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (biases != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        biases_ptr = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases-&gt;buffer() + biases-&gt;info()-&gt;offset_first_element_in_bytes());</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        window_out,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="comment">// We are computing the theoretical input starting points</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * conv_stride_w - conv_pad_left;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * conv_stride_h - conv_pad_top;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_start_t = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>[3]) * conv_stride_d - conv_pad_front;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end_t   = in_w_start_t + kernel_dim_w;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end_t   = in_h_start_t + kernel_dim_h;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_end_t   = in_d_start_t + kernel_dim_d;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="comment">// We are computing the valid initial and ending input points by checking the borders</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_start = std::max(in_w_start_t, 0);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_start = std::max(in_h_start_t, 0);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_start = std::max(in_d_start_t, 0);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_w_end   = std::min(in_w_end_t, input_dim_w);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_h_end   = std::min(in_h_end_t, input_dim_h);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_d_end   = std::min(in_d_end_t, input_dim_d);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="comment">// We use the input points to select the valid weight points to use</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_w_start = in_w_start - in_w_start_t;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_start = in_h_start - in_h_start_t;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_d_start = in_d_start - in_d_start_t;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_w_end   = kernel_dim_w - (in_w_end_t - in_w_end);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_h_end   = kernel_dim_h - (in_h_end_t - in_h_end);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> wei_d_end   = kernel_dim_d - (in_d_end_t - in_d_end);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>      index_c_out_end = weights-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>      index_c_in_end  = weights-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_start =</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes()) +</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordtype">id</span>[4] * input_stride_n;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                window_w,</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                [&amp;](<span class="keyword">const</span> Coordinates &amp;id_w)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    <span class="comment">/*</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">            * This is the loop in the weights, and it goes along OFM (output feature map)</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">            */</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> weights_ptr_start = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(wei.ptr());</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    int32_t    acc               = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(0);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    T         *out_ptr           = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr());</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_d = wei_d_start, index_in_d = in_d_start; index_wei_d &lt; wei_d_end;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                         ++index_wei_d, ++index_in_d)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr_d      = in_ptr_start + index_in_d * input_stride_d;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_ptr_d = weights_ptr_start + index_wei_d * kernel_stride_d;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_h = wei_h_start, index_in_h = in_h_start; index_wei_h &lt; wei_h_end;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                             ++index_wei_h, ++index_in_h)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                            <span class="keyword">const</span> T *<span class="keyword">const</span> in_ptr_row      = in_ptr_d + index_in_h * input_stride_h;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                            <span class="keyword">const</span> T *<span class="keyword">const</span> weights_ptr_row = weights_ptr_d + index_wei_h * kernel_stride_h;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> index_wei_w = wei_w_start, index_in_w = in_w_start; index_wei_w &lt; wei_w_end;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                 ++index_wei_w, ++index_in_w)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                            {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                <span class="keyword">const</span> T    *in_ptr_mover      = in_ptr_row + index_in_w * input_stride_w;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                <span class="keyword">const</span> T    *weights_ptr_mover = weights_ptr_row + index_wei_w * kernel_stride_w;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                <span class="keywordtype">int</span>         index_c_in        = 0;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                vector_type w_vec             = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                q32x4_t acc_q32_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                q32x4_t acc_q32_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                q32x4_t acc_q32_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                q32x4_t acc_q32_3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0), tag_type());</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                <span class="keywordflow">for</span> (; index_c_in &lt;= index_c_in_end - num_elems_read_per_iteration;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                     index_c_in += num_elems_read_per_iteration,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                     in_ptr_mover += num_elems_read_per_iteration)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr_mover);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                    <span class="comment">//Load Cin weights</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_elems_read_per_iteration;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                         ++k, weights_ptr_mover += index_c_out_end)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                    {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                        w_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(*weights_ptr_mover, w_vec, k);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                    q32x4_t src_q32_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(input_offset), tag_type());</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                    q32x4_t src_q32_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(input_offset), tag_type());</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                    q32x4_t src_q32_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(input_offset), tag_type());</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                    q32x4_t src_q32_3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(input_offset), tag_type());</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                    q32x4_t wei_q32_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(weights_offset), tag_type());</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                    q32x4_t wei_q32_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(weights_offset), tag_type());</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                    q32x4_t wei_q32_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(weights_offset), tag_type());</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                    q32x4_t wei_q32_3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(weights_offset), tag_type());</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_q16_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(src_vec));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_q16_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(src_vec));</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> wei_q16_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(w_vec));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> wei_q16_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(w_vec));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                    src_q32_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(src_q32_0, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(src_q16_0)));</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                    src_q32_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(src_q32_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(src_q16_0)));</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                    src_q32_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(src_q32_2, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(src_q16_1)));</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                    src_q32_3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(src_q32_3, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(src_q16_1)));</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                    wei_q32_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(wei_q32_0, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(wei_q16_0)));</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                    wei_q32_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(wei_q32_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(wei_q16_0)));</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                    wei_q32_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(wei_q32_2, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(wei_q16_1)));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                    wei_q32_3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(wei_q32_3, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(wei_q16_1)));</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                    acc_q32_0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc_q32_0, wei_q32_0, src_q32_0);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                    acc_q32_1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc_q32_1, wei_q32_1, src_q32_1);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                    acc_q32_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc_q32_2, wei_q32_2, src_q32_2);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                    acc_q32_3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(acc_q32_3, wei_q32_3, src_q32_3);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">#if defined(__aarch64__)</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                acc += wrapper::vaddv(acc_q32_0);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                acc += wrapper::vaddv(acc_q32_1);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                acc += wrapper::vaddv(acc_q32_2);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                acc += wrapper::vaddv(acc_q32_3);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor">#else // __aarch64__</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                <span class="keyword">auto</span> temp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(acc_q32_0), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(acc_q32_0));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                temp      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(temp, temp);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                acc += <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(temp, 0);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                temp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(acc_q32_1), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(acc_q32_1));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                temp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(temp, temp);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                acc += <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(temp, 0);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                temp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(acc_q32_2), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(acc_q32_2));</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                temp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(temp, temp);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                acc += <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(temp, 0);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                temp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(acc_q32_3), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(acc_q32_3));</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                temp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(temp, temp);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                acc += <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(temp, 0);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                <span class="keywordflow">for</span> (; index_c_in &lt; index_c_in_end;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                     ++index_c_in, ++in_ptr_mover, weights_ptr_mover += index_c_out_end)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> src_val = *(in_ptr_mover) + input_offset;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                    <span class="keyword">const</span> <span class="keyword">auto</span> w_val   = *(weights_ptr_mover) + weights_offset;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                    acc += src_val * w_val;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                            }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="keywordflow">if</span> (biases)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        acc += *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(biases_ptr + id_w[0]);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    T out_val =</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <a class="code" href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">finalize_quantization</a>(acc, output_multiplier, output_shift, output_offset, T(0), T(0), <span class="keyword">false</span>);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + id_w[0])) = out_val;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                },</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                wei);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        },</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        out);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="_window_helpers_8cpp_source.xhtml#l00029">arm_compute::calculate_max_window()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00043">arm_compute::quantization::calculate_quantized_multiplier()</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00049">Window::DimW</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00084">arm_compute::finalize_quantization()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#ad0bd5cc32e7e4c0699eccba91e5de397">ITensorInfo::offset_first_element_in_bytes()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00187">arm_compute::wrapper::vpadd()</a>, and <a class="el" href="setlane_8h_source.xhtml#l00091">arm_compute::wrapper::vsetlane()</a>.</p>

</div>
</div>
<a id="a53285ac0836360e8a03088185fd669bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53285ac0836360e8a03088185fd669bc">&#9670;&nbsp;</a></span>elementwise_arithm_op() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::cpu::elementwise_arithm_op </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00643">643</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;{</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keyword">using</span> neon_vector_float = wrapper::traits::neon_vector&lt;float, 4&gt;;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    float32x4x4_t out       = {{</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;              elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[0], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[0]),</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;              elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[1], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[1]),</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;              elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[2], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[2]),</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;              elementwise_arithm_op&lt;op, neon_vector_float&gt;(a.val[3], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[3]),</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }};</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="a29b215a8ed4583d1d4ac5d1e226bf9ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29b215a8ed4583d1d4ac5d1e226bf9ef">&#9670;&nbsp;</a></span>elementwise_arithm_op() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_arithm_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00301">301</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;{</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">using</span> scalar_type = <span class="keyword">typename</span> VectorType::scalar_type;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    elementwise_op&lt;scalar_type, scalar_type, VectorType&gt;(</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        in1, in2, out, window, &amp;elementwise_arithm_op_scalar&lt;op, scalar_type&gt;,</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        &amp;elementwise_arithm_op_broadcast_loop&lt;op, scalar_type, VectorType&gt;,</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        &amp;elementwise_arithm_op_loop&lt;op, scalar_type, VectorType&gt;);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="abbfe5d27e11d8842fdb4cef411832f8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbfe5d27e11d8842fdb4cef411832f8e">&#9670;&nbsp;</a></span>elementwise_arithm_op() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> arm_compute::cpu::elementwise_arithm_op </td>
          <td>(</td>
          <td class="paramtype">const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00034">34</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">using</span> vec_type    = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">using</span> scalar_type = <span class="keyword">typename</span> VectorType::scalar_type;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">using</span> tag_type    = <span class="keyword">typename</span> VectorType::tag_type;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    vec_type res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>scalar_type<span class="keyword">&gt;</span>(0), tag_type{});</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ArithmeticOperation::MAX</a>:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ArithmeticOperation::MIN</a>:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">ArithmeticOperation::SQUARED_DIFF</a>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keyword">const</span> vec_type tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            res                = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(tmp, tmp);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">ArithmeticOperation::PRELU</a>:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">const</span> vec_type zero = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>scalar_type<span class="keyword">&gt;</span>(0), tag_type{});</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keyword">const</span> vec_type tmp  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span>     gt   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(a, zero);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(gt, a, tmp);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">arm_compute::MIN</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">arm_compute::PRELU</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::SQUARED_DIFF</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, and <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>.</p>

</div>
</div>
<a id="ad3c3a3a2edcc9ae7274708f1babf305a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3c3a3a2edcc9ae7274708f1babf305a">&#9670;&nbsp;</a></span>elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">arm_compute::cpu::elementwise_arithm_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a>, typename <a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector</a>&lt; float, 4 &gt; &gt; </td>
          <td>(</td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00232">232</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;{</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, and <a class="el" href="div_8h_source.xhtml#l00059">arm_compute::wrapper::vdiv()</a>.</p>

</div>
</div>
<a id="a2dd8a3579e2536f06cbda2c602ff6261"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dd8a3579e2536f06cbda2c602ff6261">&#9670;&nbsp;</a></span>elementwise_arithm_op&lt; ArithmeticOperation::DIV, typename wrapper::traits::neon_vector&lt; int32_t, 4 &gt; &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">arm_compute::cpu::elementwise_arithm_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a>, typename <a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector</a>&lt; int32_t, 4 &gt; &gt; </td>
          <td>(</td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00216">216</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    int32x4_t result;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// Neon(TM) does not have vector integer division</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    result[0] = a[0] / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[0];</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    result[1] = a[1] / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[1];</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    result[2] = a[2] / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[2];</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    result[3] = a[3] / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>[3];</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="af7232f84a3d1ac94e631f1abf4f1fdca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7232f84a3d1ac94e631f1abf4f1fdca">&#9670;&nbsp;</a></span>elementwise_arithm_op&lt; ArithmeticOperation::POWER, typename wrapper::traits::neon_vector&lt; float, 4 &gt; &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abbfe5d27e11d8842fdb4cef411832f8e">arm_compute::cpu::elementwise_arithm_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a>, typename <a class="el" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector</a>&lt; float, 4 &gt; &gt; </td>
          <td>(</td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00240">240</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">wrapper::vpow</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, and <a class="el" href="pow_8h_source.xhtml#l00041">arm_compute::wrapper::vpow()</a>.</p>

</div>
</div>
<a id="a6e4a309149d475d17fdfd2d11c26b916"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e4a309149d475d17fdfd2d11c26b916">&#9670;&nbsp;</a></span>elementwise_arithm_op_broadcast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> arm_compute::cpu::elementwise_arithm_op_broadcast </td>
          <td>(</td>
          <td class="paramtype">const typename <a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00074">74</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">using</span> tag_type = <span class="keyword">typename</span> VectorType::tag_type;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">using</span> vec_type = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">VectorType::type</a>;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    vec_type broadcast_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, tag_type{});</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op&lt;op, VectorType&gt;(reorder ? broadcast_vector : a, reorder ? a : broadcast_vector);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, and <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>.</p>

</div>
</div>
<a id="a1d55687f004c1a3302485b2cb8da093b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d55687f004c1a3302485b2cb8da093b">&#9670;&nbsp;</a></span>elementwise_arithm_op_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ScalarType *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00282">282</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;{</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x));</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x,</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                        elementwise_arithm_op_broadcast&lt;op, ScalarType, VectorType&gt;(a, broadcast_value, reorder));</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="a7ecfb489f7d67ef4d8c1ba77e1060702"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ecfb489f7d67ef4d8c1ba77e1060702">&#9670;&nbsp;</a></span>elementwise_arithm_op_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ScalarType *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00264">264</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, elementwise_arithm_op&lt;op, VectorType&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="a9627c97b4adec6501e3b1f23ec750fbc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9627c97b4adec6501e3b1f23ec750fbc">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_arithm_op_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01283">1283</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;{</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a>(in1, in2, out, window, &amp;elementwise_arithm_op_quantized_scalar&lt;op&gt;,</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                             &amp;elementwise_arithm_op_quantized_broadcast_loop&lt;op&gt;,</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                             &amp;elementwise_arithm_op_quantized_loop&lt;op&gt;);</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">elementwise_op_quantized()</a>.</p>

</div>
</div>
<a id="ab1893a2a9fc472d75b5fe897e63c5a41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1893a2a9fc472d75b5fe897e63c5a41">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00725">725</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;{</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    {</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <span class="keyword">const</span> float32x4x4_t af =</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf =</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            elementwise_arithm_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, rf, voffseto, invvscaleo);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    }</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00550">load_quantized()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>.</p>

</div>
</div>
<a id="a918ccd824090fc763e31459310bdea53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a918ccd824090fc763e31459310bdea53">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00673">673</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;{</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <span class="comment">// Get inputs and compute output</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input1_ptr + x, voffset1, vscale1);</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input2_ptr + x, voffset2, vscale2);</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(af, bf);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, rf, voffseto, invvscaleo);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    }</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00550">load_quantized()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>.</p>

</div>
</div>
<a id="a06083700f047b600de212931e66daab7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06083700f047b600de212931e66daab7">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::cpu::elementwise_arithm_op_quantized_scalar </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00630">630</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;{</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(elementwise_arithm_op_scalar&lt;op&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00309">arm_compute::quantize_qasymm8()</a>.</p>

</div>
</div>
<a id="a9953a8057dee990456f905a5099c9730"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9953a8057dee990456f905a5099c9730">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_arithm_op_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01291">1291</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;{</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">elementwise_op_quantized_signed</a>(in1, in2, out, window, &amp;elementwise_arithm_op_quantized_signed_scalar&lt;op&gt;,</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                                    &amp;elementwise_arithm_op_quantized_signed_broadcast_loop&lt;op&gt;,</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                                    &amp;elementwise_arithm_op_quantized_singed_loop&lt;op&gt;);</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">elementwise_op_quantized_signed()</a>.</p>

</div>
</div>
<a id="a77a76d4cabb3dcbb44ecb12034a28e46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77a76d4cabb3dcbb44ecb12034a28e46">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_signed_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_signed_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00749">749</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;{</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    {</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keyword">const</span> float32x4x4_t af =</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf =</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            elementwise_arithm_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a>(output_ptr + x, rf, voffseto, invvscaleo);</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    }</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00570">load_quantized_signed()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00608">store_quantized_signed()</a>.</p>

</div>
</div>
<a id="a1d0c8d90c3c46f6f1eb5f80e1a82254c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d0c8d90c3c46f6f1eb5f80e1a82254c">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_signed_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int8_t arm_compute::cpu::elementwise_arithm_op_quantized_signed_scalar </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00637">637</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;{</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(elementwise_arithm_op_scalar&lt;op&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00323">arm_compute::quantize_qasymm8_signed()</a>.</p>

</div>
</div>
<a id="a136ae2cf27f2d1d2aac2da4c33d24c1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a136ae2cf27f2d1d2aac2da4c33d24c1c">&#9670;&nbsp;</a></span>elementwise_arithm_op_quantized_singed_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_arithm_op_quantized_singed_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00699">699</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;{</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    {</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="comment">// Get inputs and compute output</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input1_ptr + x, voffset1, vscale1);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input2_ptr + x, voffset2, vscale2);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        <span class="keyword">const</span> float32x4x4_t rf = elementwise_arithm_op&lt;op&gt;(af, bf);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a>(output_ptr + x, rf, voffseto, invvscaleo);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    }</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00570">load_quantized_signed()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00608">store_quantized_signed()</a>.</p>

</div>
</div>
<a id="a4c0ec3e8fab2ea0202cedcc94da53f25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c0ec3e8fab2ea0202cedcc94da53f25">&#9670;&nbsp;</a></span>elementwise_arithm_op_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ScalarType arm_compute::cpu::elementwise_arithm_op_scalar </td>
          <td>(</td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00176">176</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">auto</span> res = ScalarType(0);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ArithmeticOperation::MAX</a>:</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            res = std::max(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ArithmeticOperation::MIN</a>:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            res = std::min(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">ArithmeticOperation::SQUARED_DIFF</a>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        {</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            res = (a - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>) * (a - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">ArithmeticOperation::PRELU</a>:</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            res = (a &gt; 0 ? a : a * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">ArithmeticOperation::DIV</a>:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            res = a / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">case</span> ArithmeticOperation::POWER:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            res = std::pow(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">arm_compute::DIV</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">arm_compute::MIN</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">arm_compute::POWER</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">arm_compute::PRELU</a>, and <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::SQUARED_DIFF</a>.</p>

</div>
</div>
<a id="a81823026a6bec62b7d98d83d8f044e5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81823026a6bec62b7d98d83d8f044e5e">&#9670;&nbsp;</a></span>elementwise_arithmetic_op() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void elementwise_arithmetic_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">using</span> VectorType = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">sve_vector&lt;ScalarType&gt;::type</a>;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = svptrue&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            win,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keyword">auto</span>       output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keyword">const</span> ScalarType broadcast_value   = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>       broadcast_vector  = svdup_n(broadcast_value);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                svbool_t pg = svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_vector = svld1(pg, non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    VectorType res{};</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <span class="keywordflow">if</span> (is_broadcast_input_2)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        res = <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">elementwise_arithmetic_op&lt;typename sve_vector&lt;ScalarType&gt;::type</a>&gt;(pg, non_broadcast_vector,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                                                               broadcast_vector, op);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        res = <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">elementwise_arithmetic_op&lt;typename sve_vector&lt;ScalarType&gt;::type</a>&gt;(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                            pg, broadcast_vector, non_broadcast_vector, op);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    svst1(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    x += svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    pg = svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            },</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            win,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                svbool_t pg = svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in1 = svld1(pg, input1_ptr + x);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in2 = svld1(pg, input2_ptr + x);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res = <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">elementwise_arithmetic_op&lt;typename sve_vector&lt;ScalarType&gt;::type</a>&gt;(pg, in1, in2, op);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    svst1(pg, output_ptr + x, res);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    x += svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    pg = svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            },</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="aec7d24124baeea1879c7d98f45c229a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec7d24124baeea1879c7d98f45c229a1">&#9670;&nbsp;</a></span>elementwise_arithmetic_op() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">VectorType arm_compute::cpu::elementwise_arithmetic_op </td>
          <td>(</td>
          <td class="paramtype">svbool_t &amp;&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00073">73</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">using</span> ScalarType = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::sve_scalar&lt;VectorType&gt;::type</a>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    VectorType res{};</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">ArithmeticOperation::MAX</a>:</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            res = svmax_z(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">ArithmeticOperation::MIN</a>:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            res = svmin_z(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">ArithmeticOperation::SQUARED_DIFF</a>:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> tmp = svsub_z(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            res            = svmul_z(pg, tmp, tmp);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">ArithmeticOperation::PRELU</a>:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> zero = svdup_n(ScalarType(0));</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> tmp  = svmul_z(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> gt   = svcmpgt(pg, a, zero);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            res             = svsel(gt, a, tmp);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">ArithmeticOperation::DIV</a>:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3fca2bb83034016f5060055c59707167">elementwise_div</a>(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">case</span> ArithmeticOperation::POWER:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af7ae4e4823c3fe48546d9ef7d99ed259">elementwise_pow</a>(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">arm_compute::DIV</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00045">elementwise_div()</a>, <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00039">elementwise_pow()</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">arm_compute::MIN</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">arm_compute::POWER</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">arm_compute::PRELU</a>, <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">arm_compute::SQUARED_DIFF</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>.</p>

</div>
</div>
<a id="afada74256ea2ed8e55c8f8ce09b2e51d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afada74256ea2ed8e55c8f8ce09b2e51d">&#9670;&nbsp;</a></span>elementwise_arithmetic_op&lt; float16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a81823026a6bec62b7d98d83d8f044e5e">arm_compute::cpu::elementwise_arithmetic_op</a>&lt; float16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3a984f3b544f65c7fa631b0e25c35644"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a984f3b544f65c7fa631b0e25c35644">&#9670;&nbsp;</a></span>elementwise_arithmetic_op&lt; float32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a81823026a6bec62b7d98d83d8f044e5e">arm_compute::cpu::elementwise_arithmetic_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2sve_2fp32_8cpp_source.xhtml#l00033">sve_fp32_elementwise_binary()</a>.</p>

</div>
</div>
<a id="a45b95eaeb59fa40d8fb73c6a0b70fa98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45b95eaeb59fa40d8fb73c6a0b70fa98">&#9670;&nbsp;</a></span>elementwise_arithmetic_op&lt; int16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a81823026a6bec62b7d98d83d8f044e5e">arm_compute::cpu::elementwise_arithmetic_op</a>&lt; int16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00071">sve_s16_elementwise_binary()</a>.</p>

</div>
</div>
<a id="ae1cab9e8929674344a45c9331a64085f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1cab9e8929674344a45c9331a64085f">&#9670;&nbsp;</a></span>elementwise_arithmetic_op&lt; int32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a81823026a6bec62b7d98d83d8f044e5e">arm_compute::cpu::elementwise_arithmetic_op</a>&lt; int32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00033">sve_s32_elementwise_binary()</a>.</p>

</div>
</div>
<a id="a3ef5eea9af75917b76d393c3748d1ed7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ef5eea9af75917b76d393c3748d1ed7">&#9670;&nbsp;</a></span>elementwise_arithmetic_quantized_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_arithmetic_quantized_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8ae">ArithmeticOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">96</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = wrapper::svptrue&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_voffset = svdup_n(out-&gt;info()-&gt;quantization_info().uniform().offset);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_vscale  = svdup_n(1.f / out-&gt;info()-&gt;quantization_info().uniform().scale);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_qinfo =</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            is_broadcast_input_2 ? in1-&gt;info()-&gt;quantization_info() : in2-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_qinfo =</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            is_broadcast_input_2 ? in2-&gt;info()-&gt;quantization_info() : in1-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_voffset = svdup_n(non_broadcast_qinfo.uniform().offset);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_vscale  = svdup_n(non_broadcast_qinfo.uniform().scale);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            win,</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keyword">auto</span>       output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keyword">const</span> ScalarType broadcast_value   = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span>      broadcast_value_f =</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <a class="code" href="namespacearm__compute.xhtml#ab8005b943e23486a2000a7966d664df2">Qasymm8QuantizationHelper&lt;ScalarType&gt;::dequantize</a>(broadcast_value, broadcast_qinfo);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in2 = svcreate4(svdup_n(broadcast_value_f), svdup_n(broadcast_value_f),</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                           svdup_n(broadcast_value_f), svdup_n(broadcast_value_f));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in1 =</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(non_broadcast_input_ptr + x, pg, non_broadcast_voffset, non_broadcast_vscale);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    svfloat32x4_t result{};</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    <span class="keywordflow">if</span> (!is_broadcast_input_2)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        result =</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                            svcreate4(elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in2, 0), svget4(in1, 0), op),</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                      elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in2, 1), svget4(in1, 1), op),</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                                      elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in2, 2), svget4(in1, 2), op),</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                      elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in2, 3), svget4(in1, 3), op));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        result =</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                            svcreate4(elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 0), svget4(in2, 0), op),</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                      elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 1), svget4(in2, 1), op),</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                      elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 2), svget4(in2, 2), op),</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                      elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 3), svget4(in2, 3), op));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, pg, result, output_voffset, output_vscale);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            },</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in1_voffset = svdup_n(in1-&gt;info()-&gt;quantization_info().uniform().offset);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in1_vscale  = svdup_n(in1-&gt;info()-&gt;quantization_info().uniform().scale);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in2_voffset = svdup_n(in2-&gt;info()-&gt;quantization_info().uniform().offset);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in2_vscale  = svdup_n(in2-&gt;info()-&gt;quantization_info().uniform().scale);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            win,</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in1 = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input1_ptr + x, pg, in1_voffset, in1_vscale);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in2 = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input2_ptr + x, pg, in2_voffset, in2_vscale);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result =</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        svcreate4(elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 0), svget4(in2, 0), op),</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                  elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 1), svget4(in2, 1), op),</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                  elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 2), svget4(in2, 2), op),</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                  elementwise_arithmetic_op&lt;svfloat32_t&gt;(pg, svget4(in1, 3), svget4(in2, 3), op));</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, pg, result, output_voffset, output_vscale);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            },</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00280">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::dequantize()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00550">load_quantized()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="afaa460d8a451197db97d0af703bf8316"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afaa460d8a451197db97d0af703bf8316">&#9670;&nbsp;</a></span>elementwise_comp_op() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32x4x4_t arm_compute::cpu::elementwise_comp_op </td>
          <td>(</td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00663">663</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;{</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    uint32x4x4_t out = {{elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[0], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[0]),</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                         elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[1], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[1]),</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                         elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[2], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[2]),</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                         elementwise_comp_op&lt;op, float32x4_t, uint32x4_t&gt;(a.val[3], <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>.val[3])}};</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="ac758cf39f9e6885c73b6814ac80ff0ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac758cf39f9e6885c73b6814ac80ff0ec">&#9670;&nbsp;</a></span>elementwise_comp_op() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">OutputVectorType arm_compute::cpu::elementwise_comp_op </td>
          <td>(</td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00343">343</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    OutputVectorType res = {0, 0, 0, 0};</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Equal:</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::NotEqual:</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">wrapper::vnot</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Greater:</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::GreaterEqual:</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Less:</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, a);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::LessEqual:</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, a);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::Equal</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::Greater</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::GreaterEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::Less</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::LessEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::NotEqual</a>, <a class="el" href="ceq_8h_source.xhtml#l00039">arm_compute::wrapper::vceq()</a>, <a class="el" href="cge_8h_source.xhtml#l00039">arm_compute::wrapper::vcge()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, and <a class="el" href="not_8h_source.xhtml#l00039">arm_compute::wrapper::vnot()</a>.</p>

</div>
</div>
<a id="a38e6bb15e7ac2da0795f3cfef2f29d6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38e6bb15e7ac2da0795f3cfef2f29d6d">&#9670;&nbsp;</a></span>elementwise_comp_op_16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00533">533</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;{</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        in1, in2, out, window, &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        &amp;elementwise_comp_op_broadcast_16_loop&lt;op, InputScalarType, InputVectorType&gt;,</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        &amp;elementwise_comp_op_16_loop&lt;op, InputScalarType, InputVectorType&gt;);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a550901088b6a737a17d7eeb052ba9ef6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a550901088b6a737a17d7eeb052ba9ef6">&#9670;&nbsp;</a></span>elementwise_comp_op_16_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_16_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00472">472</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;{</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint16x8_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res));</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    }</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="a3b186f6a61b072a9952403a3ef8548b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b186f6a61b072a9952403a3ef8548b4">&#9670;&nbsp;</a></span>elementwise_comp_op_32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00542">542</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;{</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        in1, in2, out, window, &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        &amp;elementwise_comp_op_broadcast_32_loop&lt;op, InputScalarType, InputVectorType&gt;,</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        &amp;elementwise_comp_op_32_loop&lt;op, InputScalarType, InputVectorType&gt;);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae64977c9bd4690e8e3607e6fea754199"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae64977c9bd4690e8e3607e6fea754199">&#9670;&nbsp;</a></span>elementwise_comp_op_32_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_32_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00491">491</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="keyword">auto</span>       a    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keyword">auto</span>       <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res  = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        a               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x + 4);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>               = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x + 4);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res2 = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(res2))));</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    }</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">if</span> (x &lt;= window_end_x - 4)</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint32x4_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        {</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            *(output_ptr + x + i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(res, i);</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        }</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        x = +4;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="af8cc8f4068cf9120bf433df94926221f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8cc8f4068cf9120bf433df94926221f">&#9670;&nbsp;</a></span>elementwise_comp_op_8()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_8 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00524">524</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    elementwise_op&lt;InputScalarType, uint8_t, InputVectorType&gt;(</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        in1, in2, out, window, &amp;elementwise_comp_op_scalar&lt;op, InputScalarType&gt;,</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        &amp;elementwise_comp_op_broadcast_8_loop&lt;op, InputScalarType, InputVectorType&gt;,</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        &amp;elementwise_comp_op_8_loop&lt;op, InputScalarType, InputVectorType&gt;);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0df077147bf38575572e36582af9f573"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0df077147bf38575572e36582af9f573">&#9670;&nbsp;</a></span>elementwise_comp_op_8_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_8_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00453">453</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;{</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> res = elementwise_comp_op&lt;op, InputVectorType, uint8x16_t&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="ae6f48be843bb47d4779d6613cd3ce68d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6f48be843bb47d4779d6613cd3ce68d">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">OutputVectorType arm_compute::cpu::elementwise_comp_op_broadcast </td>
          <td>(</td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00376">376</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    InputVectorType broadcast_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, wrapper::traits::vector_128_tag());</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op&lt;op, InputVectorType, OutputVectorType&gt;(reorder ? broadcast_vector : a,</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                                                      reorder ? a : broadcast_vector);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>.</p>

</div>
</div>
<a id="a324f99e84c7277809b5a774363197382"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a324f99e84c7277809b5a774363197382">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast_16_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_broadcast_16_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00403">403</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint16x8_t&gt;(</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, reorder);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(a));</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="a15e0926812301b45c7e24e7eea269ab2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15e0926812301b45c7e24e7eea269ab2">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast_32_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_broadcast_32_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00422">422</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x), broadcast_value, reorder);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x + 4), broadcast_value, reorder);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(a), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))));</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">if</span> (x &lt;= window_end_x - 4)</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint32x4_t&gt;(</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, reorder);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            *(output_ptr + x + i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(a, i);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        }</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        x = +4;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="ad2a62b7914c8bff0e139b376ec38dbe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2a62b7914c8bff0e139b376ec38dbe7">&#9670;&nbsp;</a></span>elementwise_comp_op_broadcast_8_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_broadcast_8_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>broadcast_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00384">384</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;{</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> a = elementwise_comp_op_broadcast&lt;op, InputScalarType, InputVectorType, uint8x16_t&gt;(</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((non_broadcast_input_ptr + x)), broadcast_value, reorder);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, a);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="a0cc9dbc4c9cc16127d546998da1bd4c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cc9dbc4c9cc16127d546998da1bd4c7">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01299">1299</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;{</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">elementwise_op_quantized</a>(in1, in2, out, window, &amp;elementwise_comp_op_quantized_scalar&lt;op&gt;,</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;                             &amp;elementwise_comp_op_quantized_broadcast_loop&lt;op&gt;,</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                             &amp;elementwise_comp_op_quantized_loop&lt;op&gt;);</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">elementwise_op_quantized()</a>.</p>

</div>
</div>
<a id="a26d9b05aae3ad0b55e92cde353d3bd15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26d9b05aae3ad0b55e92cde353d3bd15">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00826">826</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;{</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        <span class="keyword">const</span> float32x4x4_t af =</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        <span class="keyword">const</span> uint32x4x4_t rf =</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;            elementwise_comp_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, rf);</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    }</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00550">load_quantized()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>.</p>

</div>
</div>
<a id="a4c8d923ab1f2263472ff1815a0655701"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c8d923ab1f2263472ff1815a0655701">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00774">774</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;{</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    {</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input1_ptr + x, voffset1, vscale1);</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input2_ptr + x, voffset2, vscale2);</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(af, bf);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, rf);</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    }</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00550">load_quantized()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>.</p>

</div>
</div>
<a id="ac216018d489f5f9ea7d1907f593a039e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac216018d489f5f9ea7d1907f593a039e">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::cpu::elementwise_comp_op_quantized_scalar </td>
          <td>(</td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>&#160;</td>
          <td class="paramname"><em>qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00656">656</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;{</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">qinfo</a>);</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_scalar&lt;op&gt;(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, and <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">arm_compute::test::validation::qinfo</a>.</p>

</div>
</div>
<a id="aada344073480d0eb85f751181cef6d8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aada344073480d0eb85f751181cef6d8e">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_op_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01307">1307</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;{</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">elementwise_comp_quantized_signed</a>(in1, in2, out, window, &amp;elementwise_comp_op_quantized_scalar&lt;op&gt;,</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                                      &amp;elementwise_comp_op_quantized_signed_broadcast_loop&lt;op&gt;,</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;                                      &amp;elementwise_comp_op_quantized_signed_loop&lt;op&gt;);</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">elementwise_comp_quantized_signed()</a>.</p>

</div>
</div>
<a id="a30b6a7350fda90e0f6d8dc86df9d586f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30b6a7350fda90e0f6d8dc86df9d586f">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_signed_broadcast_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_signed_broadcast_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>non_broadcast_input_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4x4_t&#160;</td>
          <td class="paramname"><em>broadcast_vector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale_non_broadcast</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reorder</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00852">852</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;{</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    {</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="keyword">const</span> float32x4x4_t af =</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(non_broadcast_input_ptr + x, voffset_non_broadcast, vscale_non_broadcast);</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="keyword">const</span> uint32x4x4_t rf =</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            elementwise_comp_op&lt;op&gt;(reorder ? broadcast_vector : af, reorder ? af : broadcast_vector);</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, rf);</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    }</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00570">load_quantized_signed()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>.</p>

</div>
</div>
<a id="a4c7874a7ad657bd64f21bc52840ce4ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c7874a7ad657bd64f21bc52840ce4ee">&#9670;&nbsp;</a></span>elementwise_comp_op_quantized_signed_loop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::cpu::elementwise_comp_op_quantized_signed_loop </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input2_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32x4_t&#160;</td>
          <td class="paramname"><em>voffset2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>vscale2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>voffseto</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float32x4_t&#160;</td>
          <td class="paramname"><em>invvscaleo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00800">800</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;{</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(voffseto, invvscaleo);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    {</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        <span class="keyword">const</span> float32x4x4_t af = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input1_ptr + x, voffset1, vscale1);</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        <span class="keyword">const</span> float32x4x4_t bf = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">load_quantized_signed</a>(input2_ptr + x, voffset2, vscale2);</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        <span class="keyword">const</span> uint32x4x4_t  rf = elementwise_comp_op&lt;op&gt;(af, bf);</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr + x, rf);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    }</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keywordflow">return</span> x;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00570">load_quantized_signed()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>.</p>

</div>
</div>
<a id="abb34d4000c420ca4fed96903be0fdc64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb34d4000c420ca4fed96903be0fdc64">&#9670;&nbsp;</a></span>elementwise_comp_op_scalar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t arm_compute::cpu::elementwise_comp_op_scalar </td>
          <td>(</td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputScalarType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00312">312</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordtype">bool</span> res = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Equal:</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            res = (a == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::NotEqual:</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            res = (a != <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Greater:</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            res = (a &gt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::GreaterEqual:</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            res = (a &gt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Less:</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            res = (a &lt; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::LessEqual:</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            res = (a &lt;= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">return</span> res ? ~static_cast&lt;uint8_t&gt;(0) : static_cast&lt;uint8_t&gt;(0);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::Equal</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::Greater</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::GreaterEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::Less</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::LessEqual</a>, and <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::NotEqual</a>.</p>

</div>
</div>
<a id="a8d498841f133c2ce4c31076a6f700a4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d498841f133c2ce4c31076a6f700a4f">&#9670;&nbsp;</a></span>elementwise_comp_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comp_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t(*)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">1013</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;{</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160; </div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    Window win = window;</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160; </div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160; </div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qinfo = out-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160; </div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.offset);</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.scale);</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160; </div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    {</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160; </div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo     = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160; </div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.offset);</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.scale);</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160; </div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160; </div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160; </div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;            win,</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;            {</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160; </div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                <span class="keyword">const</span> int8_t        broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_s8(broadcast_value), broadcast_qinfo);</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160; </div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr,</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                                          broadcast_vector, output_ptr, voffset_non_broadcast, vscale_non_broadcast,</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                                          voffseto, invvscaleo, !is_broadcast_input_2);</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                {</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(broadcast_value, broadcast_qinfo);</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                    *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs,</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                                                       !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                }</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;            },</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    }</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    {</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input1_qinfo = in1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input2_qinfo = in2-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160; </div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;        <span class="comment">// Input1 quantization info</span></div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.offset);</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.scale);</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160; </div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        <span class="comment">// Input2 quantization info</span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.offset);</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.scale);</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160; </div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160; </div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160; </div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            win,</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;            {</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160; </div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;                <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr,</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                                     voffset1, voffset2, vscale1, vscale2, voffseto, invvscaleo);</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                {</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input1_ptr + x), input1_qinfo);</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input2_ptr + x), input2_qinfo);</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                    *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;                }</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;            },</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    }</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00380">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">arm_compute::vdequantize()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01307">elementwise_comp_op_quantized_signed()</a>.</p>

</div>
</div>
<a id="a0a538ec2af6a9dd99b0c3836e116de10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a538ec2af6a9dd99b0c3836e116de10">&#9670;&nbsp;</a></span>elementwise_comparison_op() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void elementwise_comparison_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00152">152</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    static_assert(<span class="keyword">sizeof</span>(InputScalarType) &gt;= <span class="keyword">sizeof</span>(OutputScalarType),</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                  <span class="stringliteral">&quot;input data type&#39;s width should be equal to or greater than output data type&#39;s width&quot;</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">using</span> OutputVectorType = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">sve_vector&lt;OutputScalarType&gt;::type</a>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = svptrue&lt;InputScalarType&gt;();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            win,</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr =</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keyword">const</span> InputScalarType broadcast_value =</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_vector = svdup_n(broadcast_value);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                svbool_t pg = svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span>       non_broadcast_vector = svld1(pg, non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="keyword">const</span> svbool_t   output_pg            = narrow_to_byte_predicate&lt;sizeof(InputScalarType)&gt;(pg);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    OutputVectorType res{};</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="keywordflow">if</span> (is_broadcast_input_2)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        res = <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">elementwise_comparison_op&lt;typename sve_vector&lt;InputScalarType&gt;::type</a>,</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                                        <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">sve_vector&lt;OutputScalarType&gt;::type</a>&gt;(</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                            pg, non_broadcast_vector, broadcast_vector, op);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        res = <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">elementwise_comparison_op&lt;typename sve_vector&lt;InputScalarType&gt;::type</a>,</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                                        <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">sve_vector&lt;OutputScalarType&gt;::type</a>&gt;(</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                            pg, broadcast_vector, non_broadcast_vector, op);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    svst1(output_pg, output_ptr + x, res);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    x += svcnt&lt;InputScalarType&gt;();</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    pg = svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            },</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            win,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                svbool_t pg = svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in1 = svld1(pg, input1_ptr + x);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in2 = svld1(pg, input2_ptr + x);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res =</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">elementwise_comparison_op&lt;typename sve_vector&lt;InputScalarType&gt;::type</a>,</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                                  <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">sve_vector&lt;OutputScalarType&gt;::type</a>&gt;(pg, in1, in2, op);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    <span class="keyword">const</span> svbool_t output_pg = narrow_to_byte_predicate&lt;sizeof(InputScalarType)&gt;(pg);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    svst1(output_pg, output_ptr + x, res);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    x += svcnt&lt;InputScalarType&gt;();</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    pg = svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            },</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a880bad15409a72d55f1af6893b688f3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a880bad15409a72d55f1af6893b688f3e">&#9670;&nbsp;</a></span>elementwise_comparison_op() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OutputVectorType arm_compute::cpu::elementwise_comparison_op </td>
          <td>(</td>
          <td class="paramtype">svbool_t &amp;&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputVectorType &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00119">119</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    svbool_t selection_vector{};</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Equal:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            selection_vector = svcmpeq(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::NotEqual:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            selection_vector = svcmpne(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Greater:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            selection_vector = svcmpgt(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::GreaterEqual:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            selection_vector = svcmpge(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::Less:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            selection_vector = svcmplt(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">case</span> ComparisonOperation::LessEqual:</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            selection_vector = svcmple(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">using</span> InputScalarType = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::sve_scalar&lt;InputVectorType&gt;::type</a>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    selection_vector      = narrow_to_byte_predicate&lt;sizeof(InputScalarType)&gt;(selection_vector);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">using</span> OutputScalarType  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::sve_scalar&lt;OutputVectorType&gt;::type</a>;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> false_vector = svdup_n(<span class="keyword">static_cast&lt;</span>OutputScalarType<span class="keyword">&gt;</span>((uint32_t)0));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> true_vector  = svdup_n(<span class="keyword">static_cast&lt;</span>OutputScalarType<span class="keyword">&gt;</span>(~(uint32_t)0));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">auto</span>       ret          = svsel(selection_vector, true_vector, false_vector);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">arm_compute::Equal</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">arm_compute::Greater</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">arm_compute::GreaterEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">arm_compute::Less</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">arm_compute::LessEqual</a>, <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">arm_compute::NotEqual</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>.</p>

</div>
</div>
<a id="a794fe4751f2f6ed37cb425b57e88ee59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a794fe4751f2f6ed37cb425b57e88ee59">&#9670;&nbsp;</a></span>elementwise_comparison_op&lt; float16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a538ec2af6a9dd99b0c3836e116de10">arm_compute::cpu::elementwise_comparison_op</a>&lt; float16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1b9d5cafbf1dbb9e2c9426ad417ef07f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b9d5cafbf1dbb9e2c9426ad417ef07f">&#9670;&nbsp;</a></span>elementwise_comparison_op&lt; float32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a538ec2af6a9dd99b0c3836e116de10">arm_compute::cpu::elementwise_comparison_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a445e8f34f62074a5a635cd34b1c926d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a445e8f34f62074a5a635cd34b1c926d7">&#9670;&nbsp;</a></span>elementwise_comparison_op&lt; int16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a538ec2af6a9dd99b0c3836e116de10">arm_compute::cpu::elementwise_comparison_op</a>&lt; int16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00139">sve_s16_comparison_elementwise_binary()</a>.</p>

</div>
</div>
<a id="a428217640659bfcde131837f375d6769"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a428217640659bfcde131837f375d6769">&#9670;&nbsp;</a></span>elementwise_comparison_op&lt; int32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a538ec2af6a9dd99b0c3836e116de10">arm_compute::cpu::elementwise_comparison_op</a>&lt; int32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00169">sve_s32_comparison_elementwise_binary()</a>.</p>

</div>
</div>
<a id="a84c6e004ed6f806afa00c74dd7ff1440"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84c6e004ed6f806afa00c74dd7ff1440">&#9670;&nbsp;</a></span>elementwise_comparison_op&lt; uint8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0a538ec2af6a9dd99b0c3836e116de10">arm_compute::cpu::elementwise_comparison_op</a>&lt; uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00109">sve_u8_comparison_elementwise_binary()</a>.</p>

</div>
</div>
<a id="a7935ecf20a1fb8a8f4c410e461fbce90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7935ecf20a1fb8a8f4c410e461fbce90">&#9670;&nbsp;</a></span>elementwise_comparison_quantized_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_comparison_quantized_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58c">ComparisonOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">235</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    static_assert(<span class="keyword">sizeof</span>(InputScalarType) &gt;= <span class="keyword">sizeof</span>(OutputScalarType),</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                  <span class="stringliteral">&quot;input data type&#39;s width should be equal to or greater than output data type&#39;s width&quot;</span>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">using</span> OutputVectorType = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::sve_vector&lt;OutputScalarType&gt;::type</a>;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = wrapper::svptrue&lt;InputScalarType&gt;();</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_qinfo =</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            is_broadcast_input_2 ? in1-&gt;info()-&gt;quantization_info() : in2-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_qinfo =</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            is_broadcast_input_2 ? in2-&gt;info()-&gt;quantization_info() : in1-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_voffset = svdup_n(non_broadcast_qinfo.uniform().offset);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_vscale  = svdup_n(non_broadcast_qinfo.uniform().scale);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            win,</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr =</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keyword">const</span> InputScalarType broadcast_value =</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> broadcast_value_f =</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <a class="code" href="namespacearm__compute.xhtml#ab8005b943e23486a2000a7966d664df2">Qasymm8QuantizationHelper&lt;InputScalarType&gt;::dequantize</a>(broadcast_value, broadcast_qinfo);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> in2 = svcreate4(svdup_n(broadcast_value_f), svdup_n(broadcast_value_f),</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                           svdup_n(broadcast_value_f), svdup_n(broadcast_value_f));</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in1 =</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(non_broadcast_input_ptr + x, pg, non_broadcast_voffset, non_broadcast_vscale);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    svuint8x4_t result{};</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    <span class="keywordflow">if</span> (!is_broadcast_input_2)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                        result = svcreate4(elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in2, 0),</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                                                                                    svget4(in1, 0), op),</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                           elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in2, 1),</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                                                                                    svget4(in1, 1), op),</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                           elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in2, 2),</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                                                                                    svget4(in1, 2), op),</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                           elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                               pg, svget4(in2, 3), svget4(in1, 3), op));</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        result = svcreate4(elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in1, 0),</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                                                                                                    svget4(in2, 0), op),</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                           elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in1, 1),</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                                                                                    svget4(in2, 1), op),</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                           elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in1, 2),</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                                                                                    svget4(in2, 2), op),</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                                           elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                               pg, svget4(in1, 3), svget4(in2, 3), op));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> zipped_bottom = svzip1(svget4(result, 0), svget4(result, 1));</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> zipped_top    = svzip1(svget4(result, 2), svget4(result, 3));</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> zipped        = svzip1(zipped_bottom, zipped_top);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    svst1(pg, output_ptr + x, zipped);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    x += wrapper::svcnt&lt;InputScalarType&gt;();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    pg = wrapper::svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            },</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in1_voffset = svdup_n(in1-&gt;info()-&gt;quantization_info().uniform().offset);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in1_vscale  = svdup_n(in1-&gt;info()-&gt;quantization_info().uniform().scale);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in2_voffset = svdup_n(in2-&gt;info()-&gt;quantization_info().uniform().offset);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> in2_vscale  = svdup_n(in2-&gt;info()-&gt;quantization_info().uniform().scale);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            win,</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in1 = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input1_ptr + x, pg, in1_voffset, in1_vscale);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> in2 = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">load_quantized</a>(input2_ptr + x, pg, in2_voffset, in2_vscale);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> result =</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                        svcreate4(elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in1, 0),</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                                                                           svget4(in2, 0), op),</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                  elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in1, 1),</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                                                           svget4(in2, 1), op),</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                  elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in1, 2),</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                                                                           svget4(in2, 2), op),</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                  elementwise_comparison_op&lt;svfloat32_t, OutputVectorType&gt;(pg, svget4(in1, 3),</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                                                                           svget4(in2, 3), op));</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> zipped_bottom = svzip1(svget4(result, 0), svget4(result, 1));</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> zipped_top    = svzip1(svget4(result, 2), svget4(result, 3));</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> zipped        = svzip1(zipped_bottom, zipped_top);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    svst1(pg, output_ptr + x, zipped);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    x += wrapper::svcnt&lt;InputScalarType&gt;();</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    pg = wrapper::svwhilelt&lt;InputScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            },</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00280">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::dequantize()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00550">load_quantized()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a3fca2bb83034016f5060055c59707167"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fca2bb83034016f5060055c59707167">&#9670;&nbsp;</a></span>elementwise_div()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">VectorType arm_compute::cpu::elementwise_div </td>
          <td>(</td>
          <td class="paramtype">svbool_t &amp;&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00045">45</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> svdiv_z(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00073">elementwise_arithmetic_op()</a>.</p>

</div>
</div>
<a id="a75678e7da692b3e871e40af6c8ab394e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75678e7da692b3e871e40af6c8ab394e">&#9670;&nbsp;</a></span>elementwise_div&lt; svint16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">svint16_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3fca2bb83034016f5060055c59707167">arm_compute::cpu::elementwise_div</a>&lt; svint16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">svbool_t &amp;&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint16_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint16_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00290">290</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not supported&quot;</span>);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="a87b3d208f9167d096a67f50c55c5b4ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87b3d208f9167d096a67f50c55c5b4ab">&#9670;&nbsp;</a></span>elementwise_div&lt; svint32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">svint32_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3fca2bb83034016f5060055c59707167">arm_compute::cpu::elementwise_div</a>&lt; svint32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">svbool_t &amp;&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00284">284</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">return</span> svcvt_s32_z(pg, svdiv_z(pg, svcvt_f32_z(pg, a), svcvt_f32_z(pg, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)));</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="a09d2d3f428d66266a790a9fa05be7cc1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09d2d3f428d66266a790a9fa05be7cc1">&#9670;&nbsp;</a></span>elementwise_op() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00086">86</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <span class="keyword">sizeof</span>(ScalarType);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    Iterator output(out, win);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        win,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= window_end_x - window_step_x; x += window_step_x)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, elementwise_op_imp&lt;ScalarType&gt;(op, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x)));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                *(output_ptr + x) = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac9a0d70dfa153ee766d9c184deac4aec">elementwise_op_scalar_imp</a>(op, *(input_ptr + x));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        },</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00038">elementwise_op_scalar_imp()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a82713bd9209865da67e8624a162ef9c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82713bd9209865da67e8624a162ef9c1">&#9670;&nbsp;</a></span>elementwise_op() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OutputScalarType(*)(const InputScalarType &amp;, const InputScalarType &amp;)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const InputScalarType *, const InputScalarType &amp;, OutputScalarType *, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const InputScalarType *, const InputScalarType *, OutputScalarType *)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00086">86</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = std::min(16 / <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keyword">sizeof</span>(OutputScalarType)), 8);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            win,</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr =</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> InputScalarType broadcast_value =</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr,</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                          broadcast_value, output_ptr, !is_broadcast_input_2);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a      = *(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? broadcast_value : a,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                                       !is_broadcast_input_2 ? a : broadcast_value);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            },</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            win,</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>OutputScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>InputScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> a      = *(input1_ptr + x);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>      = *(input2_ptr + x);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    *(output_ptr + x) = (*scalar_func)(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            },</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a4d141bd8c7a674e096eb68492c1e21dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d141bd8c7a674e096eb68492c1e21dd">&#9670;&nbsp;</a></span>elementwise_op&lt; int8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">arm_compute::cpu::elementwise_op</a>&lt; int8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">119</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                     window_step_x     = 16;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    window_start_x    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    window_end_x      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in             = in-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out            = out-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    min_clamped_value = vdupq_n_f32((-128 - qi_out.offset) * qi_out.scale);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    max_clamped_value = vdupq_n_f32((127 - qi_out.offset) * qi_out.scale);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    Window                        win               = window;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    Iterator output(out, win);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        win,</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            int8x16_t  vout;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keyword">auto</span>       output_ptr    = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr     = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vconst_0_f32  = vdupq_n_f32(0);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keyword">auto</span>       clamped_value = (op == ElementWiseUnary::LOG) ? min_clamped_value : max_clamped_value;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= window_end_x - window_step_x; x += window_step_x)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                float32x4x4_t vtmp_deq = {{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[0]),</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[1]),</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[2]),</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[3]),</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                }};</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keywordflow">if</span> ((op == ElementWiseUnary::LOG) || (op == ElementWiseUnary::RSQRT))</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    vtmp_deq.val[0] =</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[0], vconst_0_f32), clamped_value, vtmp_deq.val[0]);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    vtmp_deq.val[1] =</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[1], vconst_0_f32), clamped_value, vtmp_deq.val[1]);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    vtmp_deq.val[2] =</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[2], vconst_0_f32), clamped_value, vtmp_deq.val[2]);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    vtmp_deq.val[3] =</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[3], vconst_0_f32), clamped_value, vtmp_deq.val[3]);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                vout = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(vtmp_deq, qi_out);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, vout);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> in    = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> tmp   = 0;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordtype">float</span>            tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">if</span> (tmp_f &lt;= 0.0)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keywordflow">if</span> (op == ElementWiseUnary::LOG)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        tmp_f = (-128 - qi_out.offset) * qi_out.scale;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == ElementWiseUnary::RSQRT)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        tmp_f = (127 - qi_out.offset) * qi_out.scale;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        tmp_f = elementwise_op_scalar_imp&lt;float&gt;(op, tmp_f);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    tmp_f = elementwise_op_scalar_imp&lt;float&gt;(op, tmp_f);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                tmp = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    tmp_f, qi_out,</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">RoundingPolicy</a>::</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        TO_ZERO); <span class="comment">// Set rounding policy TO_ZERO to be compatible with vquantize_signed() used above that follow same policy for armv7a.</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="comment">// For aarch64 LUT is used and rounding to nearest is used</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                *(output_ptr + x) = tmp;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        },</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00380">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00323">arm_compute::quantize_qasymm8_signed()</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::RSQRT</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::TO_ZERO</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">arm_compute::vdequantize()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00616">arm_compute::vquantize_signed()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">neon_qasymm8_signed_elementwise_unary()</a>.</p>

</div>
</div>
<a id="afd5617a6674f304d90561fecf9411b76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd5617a6674f304d90561fecf9411b76">&#9670;&nbsp;</a></span>elementwise_op&lt; uint8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a82713bd9209865da67e8624a162ef9c1">arm_compute::cpu::elementwise_op</a>&lt; uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">211</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                     window_step_x     = 16;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    window_start_x    = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    window_end_x      = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in             = in-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out            = out-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_0_f32      = vdupq_n_f32(0);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    min_clamped_value = vdupq_n_f32((0 - qi_out.offset) * qi_out.scale);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    max_clamped_value = vdupq_n_f32((255 - qi_out.offset) * qi_out.scale);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    Window                        win               = window;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    Iterator output(out, win);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        win,</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            uint8x16_t vout;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keyword">auto</span>       clamped_value = (op == ElementWiseUnary::LOG) ? min_clamped_value : max_clamped_value;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keyword">auto</span>       output_ptr    = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr     = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordtype">int</span>        x             = window_start_x;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= window_end_x - window_step_x; x += window_step_x)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                float32x4x4_t vtmp_deq = {{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[0]),</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[1]),</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[2]),</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    elementwise_op_imp&lt;float&gt;(op, vin_deq.val[3]),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                }};</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <span class="keywordflow">if</span> ((op == ElementWiseUnary::LOG) || (op == ElementWiseUnary::RSQRT))</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    vtmp_deq.val[0] =</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[0], vconst_0_f32), clamped_value, vtmp_deq.val[0]);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    vtmp_deq.val[1] =</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[1], vconst_0_f32), clamped_value, vtmp_deq.val[1]);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    vtmp_deq.val[2] =</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[2], vconst_0_f32), clamped_value, vtmp_deq.val[2]);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    vtmp_deq.val[3] =</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                        vbslq_f32(vcleq_f32(vin_deq.val[3], vconst_0_f32), clamped_value, vtmp_deq.val[3]);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                vout = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(vtmp_deq, qi_out);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, vout);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> in    = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> tmp   = 0;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordtype">float</span>     tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                <span class="keywordflow">if</span> (tmp_f &lt;= 0.0)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <span class="keywordflow">if</span> (op == ElementWiseUnary::LOG)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        tmp_f = (0 - qi_out.offset) * qi_out.scale;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (op == ElementWiseUnary::RSQRT)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                        tmp_f = (255 - qi_out.offset) * qi_out.scale;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        tmp_f = elementwise_op_scalar_imp&lt;float&gt;(op, tmp_f);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    tmp_f = elementwise_op_scalar_imp&lt;float&gt;(op, tmp_f);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                tmp               = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out, RoundingPolicy::TO_ZERO);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                *(output_ptr + x) = tmp;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        },</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_quantization_info_8h_source.xhtml#l00367">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00309">arm_compute::quantize_qasymm8()</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::RSQRT</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea5631ad8e27788edfca7e13535d862c06">arm_compute::TO_ZERO</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">arm_compute::vdequantize()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00591">arm_compute::vquantize()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00035">neon_qasymm8_elementwise_unary()</a>.</p>

</div>
</div>
<a id="a9f495c76ff4bbde6bc84c4dda788e1f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f495c76ff4bbde6bc84c4dda788e1f6">&#9670;&nbsp;</a></span>elementwise_op_imp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">VectorType arm_compute::cpu::elementwise_op_imp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00062">62</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::RSQRT:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(a);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::EXP:</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(a);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::NEG:</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(a);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::LOG:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(a);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ABS:</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4c1fe3150ad2ca29262dc6403605e65c">wrapper::vabs</a>(a);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ROUND:</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a98c8805795fb292b29f4967621cd8189">wrapper::vround</a>(a);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::SIN:</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ac57024ac39a9f06f1e5bb37807c0e362">wrapper::vsin</a>(a);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ABS</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::EXP</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::NEG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ROUND</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::RSQRT</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">arm_compute::SIN</a>, <a class="el" href="abs_8h_source.xhtml#l00046">arm_compute::wrapper::vabs()</a>, <a class="el" href="exp_8h_source.xhtml#l00048">arm_compute::wrapper::vexpq()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00048">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00048">arm_compute::wrapper::vlog()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="round_8h_source.xhtml#l00048">arm_compute::wrapper::vround()</a>, and <a class="el" href="sin_8h_source.xhtml#l00048">arm_compute::wrapper::vsin()</a>.</p>

</div>
</div>
<a id="aae3f4470575b8ef973d136101ea80b68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3f4470575b8ef973d136101ea80b68">&#9670;&nbsp;</a></span>elementwise_op_quantized()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t(*)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">877</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;{</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160; </div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160; </div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160; </div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qinfo = out-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160; </div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="comment">// Output quantization info (add 0.5 to round toward the nearest integer - 0.5 rounds away from zero)</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.offset + 0.5f);</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.scale);</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160; </div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    {</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160; </div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo     = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160; </div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.offset);</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.scale);</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160; </div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160; </div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160; </div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;            win,</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;            {</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160; </div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                <span class="keyword">const</span> uint8_t       broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_u8(broadcast_value), broadcast_qinfo);</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160; </div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr,</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                                          broadcast_vector, output_ptr, voffset_non_broadcast, vscale_non_broadcast,</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                                          voffseto, invvscaleo, !is_broadcast_input_2);</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                {</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(broadcast_value, broadcast_qinfo);</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                    *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs,</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                                                       !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                }</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            },</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    }</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    {</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input1_qinfo = in1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input2_qinfo = in2-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160; </div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        <span class="comment">// Input1 quantization info</span></div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.offset);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.scale);</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160; </div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="comment">// Input2 quantization info</span></div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.offset);</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.scale);</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160; </div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160; </div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160; </div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            win,</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;            {</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160; </div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr,</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                                     voffset1, voffset2, vscale1, vscale2, voffseto, invvscaleo);</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                {</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*(input1_ptr + x), input1_qinfo);</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*(input2_ptr + x), input2_qinfo);</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;                    *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                }</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;            },</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    }</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00367">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">arm_compute::vdequantize()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01283">elementwise_arithm_op_quantized()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01299">elementwise_comp_op_quantized()</a>.</p>

</div>
</div>
<a id="a1806b9850ee209fa95836d94e33e176f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1806b9850ee209fa95836d94e33e176f">&#9670;&nbsp;</a></span>elementwise_op_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::elementwise_op_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t(*)(const float &amp;, const float &amp;, <a class="el" href="structarm__compute_1_1_uniform_quantization_info.xhtml">UniformQuantizationInfo</a>)&#160;</td>
          <td class="paramname"><em>scalar_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool)&#160;</td>
          <td class="paramname"><em>broadcast_func</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t)&#160;</td>
          <td class="paramname"><em>neon_func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">1148</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;{</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(in1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(in2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160; </div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    Window win = window;</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160; </div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 16;</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = in1-&gt;info()-&gt;tensor_shape().x() != in2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160; </div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo output_qinfo = out-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160; </div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    <span class="keyword">const</span> float32x4_t voffseto   = vdupq_n_f32(output_qinfo.offset);</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / output_qinfo.scale);</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160; </div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    {</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        <span class="comment">// Select the broadcast input on the X axis</span></div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? in2 : in1;</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160; </div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo     = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160; </div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset_non_broadcast = vdupq_n_s32(non_broadcast_qinfo.offset);</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <span class="keyword">const</span> float32x4_t vscale_non_broadcast  = vdupq_n_f32(non_broadcast_qinfo.scale);</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160; </div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160; </div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160; </div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;            win,</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;            {</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160; </div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                <span class="keyword">const</span> int8_t        broadcast_value  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;                <span class="keyword">const</span> float32x4x4_t broadcast_vector = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vdupq_n_s8(broadcast_value), broadcast_qinfo);</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160; </div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                <span class="keywordtype">int</span> x = (*broadcast_func)(window_start_x, window_end_x, window_step_x, non_broadcast_input_ptr,</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                                          broadcast_vector, output_ptr, voffset_non_broadcast, vscale_non_broadcast,</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                                          voffseto, invvscaleo, !is_broadcast_input_2);</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                {</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(non_broadcast_input_ptr + x), non_broadcast_qinfo);</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(broadcast_value, broadcast_qinfo);</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;                    *(output_ptr + x) = (*scalar_func)(!is_broadcast_input_2 ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> : afs,</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;                                                       !is_broadcast_input_2 ? afs : <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                }</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;            },</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    }</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    {</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input1_qinfo = in1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input2_qinfo = in2-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160; </div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        <span class="comment">// Input1 quantization info</span></div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset1 = vdupq_n_s32(input1_qinfo.offset);</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        <span class="keyword">const</span> float32x4_t vscale1  = vdupq_n_f32(input1_qinfo.scale);</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160; </div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        <span class="comment">// Input2 quantization info</span></div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        <span class="keyword">const</span> int32x4_t   voffset2 = vdupq_n_s32(input2_qinfo.offset);</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        <span class="keyword">const</span> float32x4_t vscale2  = vdupq_n_f32(input2_qinfo.scale);</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160; </div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160; </div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        Iterator input1(in1, input1_win);</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        Iterator input2(in2, input2_win);</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        Iterator output(out, win);</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160; </div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;            win,</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;            {</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160; </div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;                <span class="keywordtype">int</span> x = (*neon_func)(window_start_x, window_end_x, window_step_x, input1_ptr, input2_ptr, output_ptr,</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;                                     voffset1, voffset2, vscale1, vscale2, voffseto, invvscaleo);</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;                {</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input1_ptr + x), input1_qinfo);</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*(input2_ptr + x), input2_qinfo);</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                    *(output_ptr + x) = (*scalar_func)(afs, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>, output_qinfo);</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;                }</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;            },</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    }</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00380">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">arm_compute::vdequantize()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01291">elementwise_arithm_op_quantized_signed()</a>.</p>

</div>
</div>
<a id="ac9a0d70dfa153ee766d9c184deac4aec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9a0d70dfa153ee766d9c184deac4aec">&#9670;&nbsp;</a></span>elementwise_op_scalar_imp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ScalarType arm_compute::cpu::elementwise_op_scalar_imp </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ScalarType &amp;&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00038">38</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::RSQRT:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> 1 / sqrt(a);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::EXP:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">return</span> std::exp(a);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::NEG:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">return</span> -a;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::LOG:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">return</span> std::log(a);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ABS:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">return</span> std::abs(a);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ROUND:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">support::cpp11::nearbyint</a>(a);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::SIN:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">return</span> std::sin(a);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED!&quot;</span>);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ABS</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::EXP</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00170">arm_compute::support::cpp11::nearbyint()</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::NEG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ROUND</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::RSQRT</a>, and <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">arm_compute::SIN</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00086">elementwise_op()</a>.</p>

</div>
</div>
<a id="ad5fb60334de87138c78d17d6f76b85a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5fb60334de87138c78d17d6f76b85a4">&#9670;&nbsp;</a></span>elementwise_op_sve_imp() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;<a class="el" href="structarm__compute_1_1utils_1_1traits_1_1is__floating__point.xhtml">utils::traits::is_floating_point</a>&lt;ScalarType&gt;::value, VectorType&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a> arm_compute::cpu::elementwise_op_sve_imp </td>
          <td>(</td>
          <td class="paramtype">svbool_t&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::RSQRT:</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">return</span> svinvsqrt(pg, a);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::EXP:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">return</span> wrapper::svexp_z(pg, a);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::NEG:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keywordflow">return</span> svneg_z(pg, a);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::LOG:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">return</span> wrapper::svlog_z(pg, a);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ABS:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">return</span> svabs_z(pg, a);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ROUND:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">return</span> svrintn_z(pg, a);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::SIN:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span> wrapper::svsin_z(pg, a);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ABS</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da8c670f8c37b95e1ed14a0ce414b049c7">arm_compute::EXP</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da4b5ffcdaf38ce4d463171f5c977c5ab3">arm_compute::LOG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::NEG</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da2ea77cf582892014b30e6fa7e558350d">arm_compute::ROUND</a>, <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da66bac724670f51e77f3688d33ca0d781">arm_compute::RSQRT</a>, and <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5b001d63db54e7383587771eeb2018a1">arm_compute::SIN</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00075">elementwise_sve_op()</a>.</p>

</div>
</div>
<a id="ac1b90763fee2161591d1d66667bf2c1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1b90763fee2161591d1d66667bf2c1b">&#9670;&nbsp;</a></span>elementwise_op_sve_imp() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;std::is_integral&lt;ScalarType&gt;::value, VectorType&gt;::<a class="el" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a> arm_compute::cpu::elementwise_op_sve_imp </td>
          <td>(</td>
          <td class="paramtype">svbool_t&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">switch</span> (op)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::NEG:</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keywordflow">return</span> svneg_z(pg, a);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">case</span> ElementWiseUnary::ABS:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">return</span> svabs_z(pg, a);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;NOT_SUPPORTED&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da7d8a220d2262f9d6c658d549ee12cf2c">arm_compute::ABS</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, and <a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936da5dd68b1a7db42a1cce4dce09dbaa179e">arm_compute::NEG</a>.</p>

</div>
</div>
<a id="af7ae4e4823c3fe48546d9ef7d99ed259"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7ae4e4823c3fe48546d9ef7d99ed259">&#9670;&nbsp;</a></span>elementwise_pow()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">VectorType arm_compute::cpu::elementwise_pow </td>
          <td>(</td>
          <td class="paramtype">svbool_t &amp;&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const VectorType &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00039">39</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> svpow_z(pg, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00073">elementwise_arithmetic_op()</a>.</p>

</div>
</div>
<a id="ab4c7cdb5bf40eec637c642649299bb9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4c7cdb5bf40eec637c642649299bb9d">&#9670;&nbsp;</a></span>elementwise_pow&lt; svint32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">svint32_t <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af7ae4e4823c3fe48546d9ef7d99ed259">arm_compute::cpu::elementwise_pow</a>&lt; svint32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">svbool_t &amp;&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml#l00278">278</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> svcvt_s32_z(pg, svpow_z(pg, svcvt_f32_z(pg, a), svcvt_f32_z(pg, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)));</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="a1a141c67fa888313cbfbae1a938098ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a141c67fa888313cbfbae1a938098ba">&#9670;&nbsp;</a></span>elementwise_sve_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void elementwise_sve_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00075">75</a> of file <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg    = wrapper::svptrue&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    Iterator output(out, win);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        win,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keyword">auto</span>       output_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordtype">int</span>        x          = window_start_x;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = svld1(pg, input_ptr + x);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                svst1(pg, output_ptr + x, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac1b90763fee2161591d1d66667bf2c1b">elementwise_op_sve_imp</a>&lt;ScalarType, decltype(vin)&gt;(pg, op, vin));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        },</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00036">elementwise_op_sve_imp()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a37aa22fdb419a6d705e184b229cc14ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37aa22fdb419a6d705e184b229cc14ee">&#9670;&nbsp;</a></span>elementwise_sve_op&lt; float16_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1a141c67fa888313cbfbae1a938098ba">arm_compute::cpu::elementwise_sve_op</a>&lt; float16_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a77512808087f88d133abae9a79c0e180"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77512808087f88d133abae9a79c0e180">&#9670;&nbsp;</a></span>elementwise_sve_op&lt; float32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1a141c67fa888313cbfbae1a938098ba">arm_compute::cpu::elementwise_sve_op</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2elementwise__unary_2generic_2sve_2fp32_8cpp_source.xhtml#l00034">sve_fp32_elementwise_unary()</a>.</p>

</div>
</div>
<a id="a3e280a9f427dfc6c0f690c7083cba34d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e280a9f427dfc6c0f690c7083cba34d">&#9670;&nbsp;</a></span>elementwise_sve_op&lt; int32_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1a141c67fa888313cbfbae1a938098ba">arm_compute::cpu::elementwise_sve_op</a>&lt; int32_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2sve_2integer_8cpp_source.xhtml#l00033">sve_s32_elementwise_unary()</a>.</p>

</div>
</div>
<a id="a9a2f6a7115885dea466b90572061d47e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a2f6a7115885dea466b90572061d47e">&#9670;&nbsp;</a></span>fp16_batch_normalization_nchw_non_fused()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_batch_normalization_nchw_non_fused </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9964de6f96b7f2e105a333cf2b1559bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9964de6f96b7f2e105a333cf2b1559bf">&#9670;&nbsp;</a></span>fp16_batch_normalization_nchw_non_fused_brelu()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_batch_normalization_nchw_non_fused_brelu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6822ade25c2f5ea275f9d01bbf8584e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6822ade25c2f5ea275f9d01bbf8584e5">&#9670;&nbsp;</a></span>fp16_batch_normalization_nchw_non_fused_lubrelu()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_batch_normalization_nchw_non_fused_lubrelu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a28ba9aa86f0eea79bf10367a11fa099f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28ba9aa86f0eea79bf10367a11fa099f">&#9670;&nbsp;</a></span>fp16_batch_normalization_nchw_non_fused_relu()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_batch_normalization_nchw_non_fused_relu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7110248fdbe9eb708cda53069adaa471"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7110248fdbe9eb708cda53069adaa471">&#9670;&nbsp;</a></span>fp16_bilinear_neon_scale_nchw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_bilinear_neon_scale_nchw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>.</p>

</div>
</div>
<a id="a5df47efaaa19dd62657db56f3d6129f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5df47efaaa19dd62657db56f3d6129f9">&#9670;&nbsp;</a></span>fp16_common_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_common_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3f729f1847218335d50fca5b1f2bcf0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f729f1847218335d50fca5b1f2bcf0d">&#9670;&nbsp;</a></span>fp16_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae7fbf3b06a874297ca3aea18783562c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7fbf3b06a874297ca3aea18783562c4">&#9670;&nbsp;</a></span>fp16_nearest_neon_scale_nchw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_nearest_neon_scale_nchw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cpu_scale_kernel_8cpp_source.xhtml#l00397">CpuScaleKernel::configure()</a>.</p>

</div>
</div>
<a id="aa64c9a243c1b8d4a5bb9cfa0c69d9c64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa64c9a243c1b8d4a5bb9cfa0c69d9c64">&#9670;&nbsp;</a></span>fp16_neon_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_neon_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a675a82f6a2cbbcecd80e3561257611fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a675a82f6a2cbbcecd80e3561257611fd">&#9670;&nbsp;</a></span>fp16_neon_floor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_neon_floor </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8607f917f09d89342011eca8ac3dd6df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8607f917f09d89342011eca8ac3dd6df">&#9670;&nbsp;</a></span>fp16_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2b5a907c9f3c15c309f9c538a4bd08c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b5a907c9f3c15c309f9c538a4bd08c4">&#9670;&nbsp;</a></span>fp16_sve_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_sve_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a433a50d9bda93287b0e904adb3209b1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a433a50d9bda93287b0e904adb3209b1a">&#9670;&nbsp;</a></span>fp16_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp16_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4447e4458da4aaeca9c8fd8de9788166"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4447e4458da4aaeca9c8fd8de9788166">&#9670;&nbsp;</a></span>fp32_batch_normalization_nchw_non_fused()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_batch_normalization_nchw_non_fused </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    batch_normalization_nchw&lt;float, false, detail::dummy&lt;float, 4&gt;&gt;(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, var, beta, gamma,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                                                    <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a3a3eabce968b87d10bf818471328d616"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a3eabce968b87d10bf818471328d616">&#9670;&nbsp;</a></span>fp32_batch_normalization_nchw_non_fused_brelu()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_batch_normalization_nchw_non_fused_brelu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml#l00065">65</a> of file <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    batch_normalization_nchw&lt;float, true, detail::brelu&lt;float, 4&gt;&gt;(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, var, beta, gamma,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                                                   <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="ae120c218f665b6535e9b2c0c5084ac39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae120c218f665b6535e9b2c0c5084ac39">&#9670;&nbsp;</a></span>fp32_batch_normalization_nchw_non_fused_lubrelu()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_batch_normalization_nchw_non_fused_lubrelu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    batch_normalization_nchw&lt;float, true, detail::lubrelu&lt;float, 4&gt;&gt;(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, var, beta, gamma,</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                                                     <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a51580bd8678045961052c0afb776dbbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51580bd8678045961052c0afb776dbbf">&#9670;&nbsp;</a></span>fp32_batch_normalization_nchw_non_fused_relu()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_batch_normalization_nchw_non_fused_relu </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nchw_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    batch_normalization_nchw&lt;float, true, detail::relu&lt;float, 4&gt;&gt;(window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, mean, var, beta, gamma,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                                                                  <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a3aa8003f658c620589d1fb3a446ac582"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3aa8003f658c620589d1fb3a446ac582">&#9670;&nbsp;</a></span>fp32_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2crop_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="cpu_2kernels_2crop_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">return</span> in_bounds_crop_window&lt;float32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, output_width_start,</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                                            output_width_limit, input_has_single_channel, is_width_flipped);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a97667081943a6baea73dd6c7957a34fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97667081943a6baea73dd6c7957a34fa">&#9670;&nbsp;</a></span>fp32_neon_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_neon_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="core_2_n_e_o_n_2kernels_2batchnormalization_2impl_2_n_e_o_n_2fp32_8cpp_source.xhtml#l00156">156</a> of file <a class="el" href="core_2_n_e_o_n_2kernels_2batchnormalization_2impl_2_n_e_o_n_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.enabled())</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        fused_map[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation()](<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>, window);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        batch_normalization&lt;detail::dummy&lt;float, 4&gt;&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, mean, var, beta, gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>, window);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a740ffe76254ad6ca7f8f68e1e268ae7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a740ffe76254ad6ca7f8f68e1e268ae7e">&#9670;&nbsp;</a></span>fp32_neon_floor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_neon_floor </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="src_2common_2utils_2_validate_8h.xhtml#a4966345d10014481a252ea1f91d2d5ab">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="src_2common_2utils_2_validate_8h.xhtml#a4966345d10014481a252ea1f91d2d5ab">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="src_2common_2utils_2_validate_8h.xhtml#a6d40659f94b26d9ac5ae03538252dcd4">ARM_COMPUTE_ASSERT</a>(len &gt;= 0);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">auto</span> psrc = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">auto</span> pdst = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">for</span> (; len &gt;= <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>; len -= <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        vst1q_f32(pdst, <a class="code" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">vfloorq_f32</a>(vld1q_f32(psrc)));</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        psrc += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        pdst += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span> (; len &gt; 0; --len)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        *pdst = std::floor(*psrc);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        ++pdst;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        ++psrc;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2common_2utils_2_validate_8h_source.xhtml#l00037">ARM_COMPUTE_ASSERT</a>, <a class="el" href="src_2common_2utils_2_validate_8h_source.xhtml#l00038">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>, and <a class="el" href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32()</a>.</p>

</div>
</div>
<a id="a1d3f077656e993e4d09054fb5addad39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d3f077656e993e4d09054fb5addad39">&#9670;&nbsp;</a></span>fp32_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2range_2generic_2neon_2fp32_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="cpu_2kernels_2range_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> neon_range_function&lt;float32_t&gt;(output, start, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, window);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>.</p>

</div>
</div>
<a id="a1fc7ff87cd5070e32f7bd2a4bef72f0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fc7ff87cd5070e32f7bd2a4bef72f0f">&#9670;&nbsp;</a></span>fp32_sve_batch_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp32_sve_batch_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab68fd045b9a5083bb30745437cbb603a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab68fd045b9a5083bb30745437cbb603a">&#9670;&nbsp;</a></span>fp32_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fp32_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2scale_2sve_2fp32_8cpp_source.xhtml#l00097">97</a> of file <a class="el" href="cpu_2kernels_2scale_2sve_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx, dy, border_mode, constant_border_value);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        fp32_sve_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a0f12d1ad25f1b07f7c058c9608d53e93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f12d1ad25f1b07f7c058c9608d53e93">&#9670;&nbsp;</a></span>fp_neon_activation_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fp_neon_activation_impl </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">60</a> of file <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">using</span> ExactTagType =</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">arm_compute::wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;</a>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = P.step_x;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    Window                                        win_collapsed  = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// In case of non-aarch64, a small delta value is added to the input</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// to prevent NAN values caused by zeros in inputs to SQRT.</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// In case of aarh64, we call vsqrt directly, so we don&#39;t use delta.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> delta = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(P.delta), ExactTagType{});</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* #ifndef __aarch64__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_inv_2      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.5f), ExactTagType{});</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_inv_sqrt_2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.70710678118f), ExactTagType{});</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      const_1           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1.f), ExactTagType{});</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      const_0           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.f), ExactTagType{});</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      const_6           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(6.f), ExactTagType{});</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      const_3           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(3.f), ExactTagType{});</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      const_inv_6       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.166666667f), ExactTagType{});</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    constexpr <span class="keywordtype">float</span> soft_relu_thresh  = 12.f;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      vsoft_relu_thresh = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(soft_relu_thresh), ExactTagType{});</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      va                = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a()), ExactTagType{});</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      vb                = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b()), ExactTagType{});</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      a                 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>      <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>                 = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            wrapper::traits::neon_bitvector_t&lt;T, wrapper::traits::BitWidth::W128&gt; tmp;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">switch</span> (act)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ABS:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4c1fe3150ad2ca29262dc6403605e65c">wrapper::vabs</a>(vin);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LINEAR:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(vb, va, vin);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">wrapper::vinv</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(const_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin))));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::RELU:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0, vin);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::BOUNDED_RELU:</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0, vin));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vb, vin));</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LEAKY_RELU:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin, const_0), vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va, vin));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin, vsoft_relu_thresh), vin,</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(const_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(vin))));</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ELU:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">wrapper::vcge</a>(vin, const_0), vin,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(vin), const_1)));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        tmp = wrapper::vsqrt(vin);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#else  </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> bitmask = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">wrapper::vceq</a>(vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(0.f, ExactTagType{}));</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">wrapper::vinv</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1ccc771afb5f199744c317c23279e378">mask_float_vector</a>(delta, bitmask))));</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a1ccc771afb5f199744c317c23279e378">mask_float_vector</a>(tmp, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">wrapper::vnot</a>(bitmask));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQUARE:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin, vin);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vb, vin)));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::IDENTITY:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        tmp = vin;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::HARD_SWISH:</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                            vin,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_6,</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                          <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin, const_3)))));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SWISH:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">wrapper::vinv</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                                     const_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va, vin))))));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::GELU:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        tmp = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                            vin,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_2,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                          <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(const_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8a5bd58601c5ec1fb14709c6361dfe2f">wrapper::verf</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin, const_inv_sqrt_2)))));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keyword">const</span> T in = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input_ptr + x));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                T       tmp;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">switch</span> (act)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ABS:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        tmp = std::abs(in);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LINEAR:</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                        tmp = a * in + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        tmp = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) / (<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) + std::exp(-in));</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::RELU:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        tmp = std::max&lt;T&gt;(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), in);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::BOUNDED_RELU:</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                        tmp = std::min&lt;T&gt;(a, std::max(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), in));</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU:</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        tmp = std::min&lt;T&gt;(a, std::max&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, in));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LEAKY_RELU:</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        tmp = (in &gt; 0) ? in : a * in;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        tmp = (in &gt; soft_relu_thresh) ? in : std::log(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) + std::exp(in));</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ELU:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        tmp = (in &gt;= 0) ? in : a * (std::exp(in) - 1);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        tmp = std::sqrt(in);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQUARE:</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                        tmp = in * in;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        tmp = a * std::tanh(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * in);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::IDENTITY:</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        tmp = in;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::HARD_SWISH:</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        tmp = in * ((std::min(std::max((in + 3), 0.0f), 6.0f)) * 0.166666667f);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SWISH:</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        tmp = in / (<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) + std::exp(-a * in));</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::GELU:</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        tmp = in * <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.5f * (1.0f + erff(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(in) / 1.41421356237f)));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                *(output_ptr + x) = tmp;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        },</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00045">mask_float_vector()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="abs_8h_source.xhtml#l00046">arm_compute::wrapper::vabs()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="ceq_8h_source.xhtml#l00039">arm_compute::wrapper::vceq()</a>, <a class="el" href="cge_8h_source.xhtml#l00039">arm_compute::wrapper::vcge()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="erf_8h_source.xhtml#l00042">arm_compute::wrapper::verf()</a>, <a class="el" href="exp_8h_source.xhtml#l00048">arm_compute::wrapper::vexpq()</a>, <a class="el" href="inv_8h_source.xhtml#l00048">arm_compute::wrapper::vinv()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00048">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00048">arm_compute::wrapper::vlog()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="not_8h_source.xhtml#l00039">arm_compute::wrapper::vnot()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, <a class="el" href="tanh_8h_source.xhtml#l00041">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a351bdc53a92772fc3ba1069405c32529"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a351bdc53a92772fc3ba1069405c32529">&#9670;&nbsp;</a></span>fused_batch_normalization_conv()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fused_batch_normalization_conv </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>conv_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>conv_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00154">154</a> of file <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">using</span> ScalarType   = T;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> size     = 16 / conv_weights-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> run_in_place_weights = (fused_weights == <span class="keyword">nullptr</span>) || (fused_weights == conv_weights);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> run_in_place_bias    = (fused_bias == <span class="keyword">nullptr</span>) || (conv_bias != <span class="keyword">nullptr</span> &amp;&amp; fused_bias == conv_bias);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// Set build options</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = size;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    Iterator conv_w_in(conv_weights, win);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    Iterator conv_w_out(run_in_place_weights ? conv_weights : fused_weights, win);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> conv_bias_in =</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        (conv_bias != <span class="keyword">nullptr</span> ? <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(conv_bias-&gt;ptr_to_element(Coordinates(0, 0))) : <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> conv_bias_out =</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        (run_in_place_bias ? conv_bias_in</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                           : <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(fused_bias-&gt;ptr_to_element(Coordinates(0, 0))));</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_mean  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_mean-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_var   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_var-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_gamma = (bn_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                 ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_gamma-&gt;ptr_to_element(Coordinates(0, 0)))</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                 : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_beta  = (bn_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                 ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_beta-&gt;ptr_to_element(Coordinates(0, 0)))</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                 : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">auto</span>       mean_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">auto</span>       var_vec     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">auto</span>       gamma_vec   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(1), ExactTagType{});</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">auto</span>       beta_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">auto</span>       rvar_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> epsilon_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>), ExactTagType{});</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">auto</span> mean                = ScalarType(0.0);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">auto</span> var                 = ScalarType(0.0);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">auto</span> gamma               = ScalarType(1.0);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">auto</span> beta                = ScalarType(0.0);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">auto</span> conv_bias_in_scalar = ScalarType(0.0);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        win,</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            var = input_var[<span class="keywordtype">id</span>[3]];</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">if</span> (input_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                gamma = input_gamma[<span class="keywordtype">id</span>[3]];</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">if</span> ((<span class="keywordtype">id</span>[0] == 0) &amp;&amp; (<span class="keywordtype">id</span>[1] == 0) &amp;&amp; (<span class="keywordtype">id</span>[2] == 0))</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keywordflow">if</span> (input_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    beta     = input_beta[<span class="keywordtype">id</span>[3]];</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    beta_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(beta, ExactTagType{});</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="comment">// Construct vectors</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                mean     = input_mean[<span class="keywordtype">id</span>[3]];</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                mean_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(mean, ExactTagType{});</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">if</span> (conv_bias_in != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    conv_bias_in_scalar = conv_bias_in[<span class="keywordtype">id</span>[3]];</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="keyword">auto</span> conv_bias_tmp_scalar = (conv_bias_in_scalar - mean) / std::sqrt(var + ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>));</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                conv_bias_out[<span class="keywordtype">id</span>[3]]      = (conv_bias_tmp_scalar * gamma) + beta;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordtype">int</span>  x              = window_start_x;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keyword">auto</span> conv_w_in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(conv_w_in.ptr());</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="keyword">auto</span> conv_w_out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(conv_w_out.ptr());</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            var_vec             = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(var, ExactTagType{});</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            gamma_vec           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(gamma, ExactTagType{});</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            rvar_vec            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(var_vec, epsilon_vec));</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                <span class="keyword">auto</span> wn = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(conv_w_in_ptr + x);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                wn      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wn, rvar_vec);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                wn      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wn, gamma_vec);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <span class="comment">// Store results</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(conv_w_out_ptr + x, wn);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                *(conv_w_out_ptr + x) = *(conv_w_in_ptr + x) / std::sqrt(var + ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)) * gamma;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        },</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        conv_w_in, conv_w_out);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00048">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a6caaa80274300a8d8d02adea5147d153"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6caaa80274300a8d8d02adea5147d153">&#9670;&nbsp;</a></span>fused_batch_normalization_conv_f16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fused_batch_normalization_conv_f16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>conv_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>conv_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac1c2277c124e247e7ac794019c3ba563"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1c2277c124e247e7ac794019c3ba563">&#9670;&nbsp;</a></span>fused_batch_normalization_conv_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fused_batch_normalization_conv_f32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>conv_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>conv_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2generic_2fp32_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2generic_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> fused_batch_normalization_conv&lt;float32_t&gt;(conv_weights, conv_bias, fused_weights, fused_bias, bn_mean,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                     bn_var, bn_beta, bn_gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, window);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>.</p>

</div>
</div>
<a id="a680c24b25652c9479e6ba2f81c5c2436"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a680c24b25652c9479e6ba2f81c5c2436">&#9670;&nbsp;</a></span>fused_batch_normalization_dwc_nchw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fused_batch_normalization_dwc_nchw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml#l00266">266</a> of file <a class="el" href="fuse__batch__normalization_2generic_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">using</span> ScalarType   = T;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> size     = 16 / dwc_weights-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> run_in_place_weights = (fused_weights == <span class="keyword">nullptr</span>) || (fused_weights == dwc_weights);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> run_in_place_bias    = (fused_bias == <span class="keyword">nullptr</span>) || (dwc_bias != <span class="keyword">nullptr</span> &amp;&amp; fused_bias == dwc_bias);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// Set build options</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = size;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    Iterator dwc_w_in(dwc_weights, win);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    Iterator dwc_w_out(run_in_place_weights ? dwc_weights : fused_weights, win);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dwc_bias_in =</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        (dwc_bias != <span class="keyword">nullptr</span> ? <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(dwc_bias-&gt;ptr_to_element(Coordinates(0, 0))) : <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">auto</span> dwc_bias_out =</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        (run_in_place_bias ? dwc_bias_in</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                           : <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(fused_bias-&gt;ptr_to_element(Coordinates(0, 0))));</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_mean  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_mean-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_var   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_var-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_gamma = (bn_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                 ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_gamma-&gt;ptr_to_element(Coordinates(0, 0)))</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                 : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_beta  = (bn_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                                 ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_beta-&gt;ptr_to_element(Coordinates(0, 0)))</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                 : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">auto</span>       mean_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keyword">auto</span>       var_vec     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">auto</span>       gamma_vec   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(1), ExactTagType{});</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">auto</span>       beta_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">auto</span>       rvar_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> epsilon_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>), ExactTagType{});</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keyword">auto</span> mean               = ScalarType(0.0);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">auto</span> var                = ScalarType(0.0);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">auto</span> gamma              = ScalarType(1.0);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">auto</span> beta               = ScalarType(0.0);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">auto</span> dwc_bias_in_scalar = ScalarType(0.0);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        win,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            var = input_var[<span class="keywordtype">id</span>[2]];</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordflow">if</span> (input_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                gamma = input_gamma[<span class="keywordtype">id</span>[2]];</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            }</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">id</span>[1] == 0)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                mean = input_mean[<span class="keywordtype">id</span>[2]];</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                <span class="comment">// Construct vectors</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                mean_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(mean, ExactTagType{});</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="keywordflow">if</span> (input_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    beta     = input_beta[<span class="keywordtype">id</span>[2]];</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    beta_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(beta, ExactTagType{});</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keywordflow">if</span> (dwc_bias_in != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                    dwc_bias_in_scalar = dwc_bias_in[<span class="keywordtype">id</span>[2]];</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <span class="keyword">auto</span> dwc_bias_tmp_scalar = (dwc_bias_in_scalar - mean) / std::sqrt(var + ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                dwc_bias_out[<span class="keywordtype">id</span>[2]]      = (dwc_bias_tmp_scalar * gamma) + beta;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            <span class="keywordtype">int</span>  x             = window_start_x;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keyword">auto</span> dwc_w_in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(dwc_w_in.ptr());</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keyword">auto</span> dwc_w_out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(dwc_w_out.ptr());</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            var_vec            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(var, ExactTagType{});</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            gamma_vec          = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(gamma, ExactTagType{});</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            rvar_vec           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(var_vec, epsilon_vec));</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                <span class="keyword">auto</span> wn = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(dwc_w_in_ptr + x);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                wn      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wn, rvar_vec);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                wn      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wn, gamma_vec);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                <span class="comment">// Store results</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(dwc_w_out_ptr + x, wn);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                *(dwc_w_out_ptr + x) = *(dwc_w_in_ptr + x) / std::sqrt(var + ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)) * gamma;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        },</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        dwc_w_in, dwc_w_out);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00048">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a3f25f1f4ea795d3bf4f442b1fbac3473"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f25f1f4ea795d3bf4f442b1fbac3473">&#9670;&nbsp;</a></span>fused_batch_normalization_dwc_nchw_f16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fused_batch_normalization_dwc_nchw_f16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9d64fee71ccceb978c2b7f7ca27adf23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d64fee71ccceb978c2b7f7ca27adf23">&#9670;&nbsp;</a></span>fused_batch_normalization_dwc_nchw_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fused_batch_normalization_dwc_nchw_f32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fuse__batch__normalization_2nchw_2all_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="fuse__batch__normalization_2nchw_2all_8cpp_source.xhtml">all.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> fused_batch_normalization_dwc_nchw&lt;float32_t&gt;(dwc_weights, dwc_bias, fused_weights, fused_bias, bn_mean,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                                         bn_var, bn_beta, bn_gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, window);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>.</p>

</div>
</div>
<a id="ab2384e44e93363e69edba5547f0cde22"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2384e44e93363e69edba5547f0cde22">&#9670;&nbsp;</a></span>fused_batch_normalization_dwc_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fused_batch_normalization_dwc_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8h_source.xhtml#l00036">36</a> of file <a class="el" href="fuse__batch__normalization_2nhwc_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">using</span> ScalarType   = T;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> size     = 16 / dwc_weights-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> run_in_place_weights = (fused_weights == <span class="keyword">nullptr</span>) || (fused_weights == dwc_weights);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> run_in_place_bias    = (fused_bias == <span class="keyword">nullptr</span>) || (dwc_bias != <span class="keyword">nullptr</span> &amp;&amp; fused_bias == dwc_bias);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Set build options</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = size;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    Iterator dwc_w_in(dwc_weights, win);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    Iterator dwc_w_out(run_in_place_weights ? dwc_weights : fused_weights, win);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> dwc_bias_in =</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        (dwc_bias != <span class="keyword">nullptr</span> ? <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(dwc_bias-&gt;ptr_to_element(Coordinates(0, 0))) : <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">auto</span> dwc_bias_out =</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        (run_in_place_bias ? dwc_bias_in</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                           : <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(fused_bias-&gt;ptr_to_element(Coordinates(0, 0))));</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_mean  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_mean-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_var   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_var-&gt;ptr_to_element(Coordinates(0, 0)));</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_gamma = (bn_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                 ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_gamma-&gt;ptr_to_element(Coordinates(0, 0)))</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                 : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_beta  = (bn_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                 ? <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(bn_beta-&gt;ptr_to_element(Coordinates(0, 0)))</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                 : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">auto</span>       mean_vec     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">auto</span>       var_vec      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">auto</span>       gamma_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(1), ExactTagType{});</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">auto</span>       beta_vec     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">auto</span>       rvar_vec     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">auto</span>       dwc_bias_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(0), ExactTagType{});</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> epsilon_vec  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>), ExactTagType{});</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">auto</span> gamma              = ScalarType(1.0);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">auto</span> beta               = ScalarType(0.0);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">auto</span> dwc_bias_in_scalar = ScalarType(0);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        win,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                var_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_var + x);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keywordflow">if</span> (input_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    gamma_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_gamma + x);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">if</span> ((<span class="keywordtype">id</span>[2] == 0) &amp;&amp; (<span class="keywordtype">id</span>[1] == 0))</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    mean_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_mean + x);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="comment">// Construct vectors</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">if</span> (input_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        beta_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_beta + x);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <span class="keywordflow">if</span> (dwc_bias_in != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        dwc_bias_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(dwc_bias_in + x);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="keyword">auto</span> dwc_bias_tmp_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(dwc_bias_vec, mean_vec),</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                                          <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(var_vec, epsilon_vec)));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    dwc_bias_tmp_vec      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(dwc_bias_tmp_vec, gamma_vec), beta_vec);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(dwc_bias_out + x, dwc_bias_tmp_vec);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keyword">auto</span> dwc_w_in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(dwc_w_in.ptr());</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keyword">auto</span> dwc_w_out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(dwc_w_out.ptr());</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keyword">auto</span> wn  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(dwc_w_in_ptr + x);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                rvar_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(var_vec, epsilon_vec));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                wn       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wn, rvar_vec);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                wn       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(wn, gamma_vec);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="comment">// Store results</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(dwc_w_out_ptr + x, wn);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keyword">auto</span> var = input_var[x];</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">if</span> (input_gamma != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    gamma = input_gamma[x];</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">if</span> (<span class="keywordtype">id</span>[2] == 0 &amp;&amp; <span class="keywordtype">id</span>[1] == 0)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keyword">auto</span> mean = input_mean[x];</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keywordflow">if</span> (input_beta != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        beta = input_beta[x];</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="keywordflow">if</span> (dwc_bias_in != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        dwc_bias_in_scalar = dwc_bias_in[x];</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keyword">auto</span> dwc_bias_tmp_scalar = (dwc_bias_in_scalar - mean) / std::sqrt(var + ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    dwc_bias_out[x]          = (dwc_bias_tmp_scalar * gamma) + beta;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> dwc_w_in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(dwc_w_in.ptr());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keyword">auto</span>       dwc_w_out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(dwc_w_out.ptr());</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                *(dwc_w_out_ptr + x) = *(dwc_w_in_ptr + x) / std::sqrt(var + ScalarType(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)) * gamma;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        },</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        dwc_w_in, dwc_w_out);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00048">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a5478d2d4bfc1da85f1949ffec04bc4a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5478d2d4bfc1da85f1949ffec04bc4a7">&#9670;&nbsp;</a></span>fused_batch_normalization_dwc_nhwc_f16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::fused_batch_normalization_dwc_nhwc_f16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9adb943c7b6cacea9bb1985a9e60064c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9adb943c7b6cacea9bb1985a9e60064c">&#9670;&nbsp;</a></span>fused_batch_normalization_dwc_nhwc_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fused_batch_normalization_dwc_nhwc_f32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dwc_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>fused_bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_var</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bn_gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nhwc_2neon_2fp32_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="cpu_2kernels_2fuse__batch__normalization_2nhwc_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> fused_batch_normalization_dwc_nhwc&lt;float32_t&gt;(dwc_weights, dwc_bias, fused_weights, fused_bias, bn_mean,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                                                         bn_var, bn_beta, bn_gamma, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, window);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>.</p>

</div>
</div>
<a id="a43f4b3af9ede2d90ab47796b6eeae22d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43f4b3af9ede2d90ab47796b6eeae22d">&#9670;&nbsp;</a></span>get_initial_min()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::cpu::get_initial_min </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_inf_as_limit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00065">65</a> of file <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml">list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> use_inf_as_limit ? -std::numeric_limits&lt;T&gt;::infinity() : std::numeric_limits&lt;T&gt;::<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">lowest</a>();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00278">arm_compute::support::cpp11::lowest()</a>.</p>

</div>
</div>
<a id="a8eee3d782c8d385143bd5991559ae039"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8eee3d782c8d385143bd5991559ae039">&#9670;&nbsp;</a></span>in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop_2generic_2neon_2impl_8h_source.xhtml#l00039">39</a> of file <a class="el" href="crop_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Reverse elements if width flipped.</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (is_width_flipped)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="comment">// Collapse first dimension if possible.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">if</span> (input_has_single_channel)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            int32_t     x = output_width_start;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            Coordinates negative_offset(input_offset);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            negative_offset.set(1, negative_offset[1] - window_step_x + 1);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= output_width_limit - window_step_x; x += window_step_x, negative_offset[1] -= window_step_x)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                <span class="keyword">auto</span> in = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ad3be09105863ab9faa320e7c0c253071">load_as_f32</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(negative_offset)));</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                in = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa7a641703a9c98932d775d915bf7a3e5">wrapper::vrev64</a>(in);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                in = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(in), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(in));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, in);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            input_offset[1] = negative_offset[1] + window_step_x - 1;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">for</span> (; x &lt; output_width_limit; ++x, --input_offset[1])</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                *(output_ptr + x) = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(*<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(input_offset)));</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">for</span> (int32_t x = output_width_start; x &lt; output_width_limit; ++x, --input_offset[1])</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                input_offset.set(0, 0);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                int32_t c = 0;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keywordflow">for</span> (; c &lt;= static_cast&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0)) - window_step_x;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                     c += window_step_x, input_offset[0] += window_step_x)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                    <span class="keyword">auto</span> in = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ad3be09105863ab9faa320e7c0c253071">load_as_f32</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(input_offset)));</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x * output-&gt;info()-&gt;dimension(0) + c, in);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">for</span> (; c &lt; static_cast&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0)); ++c, ++input_offset[0])</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    *(output_ptr + x * output-&gt;info()-&gt;dimension(0) + c) =</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(*<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(input_offset)));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// Use memcpy if the elements don&#39;t need converting to float.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;T, float&gt;::value)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            memcpy(<span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(output_ptr + output_width_start * output-&gt;info()-&gt;dimension(0)),</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                   <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(input_offset)),</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                   (output_width_limit - output_width_start) * output-&gt;info()-&gt;dimension(0) *</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                       output-&gt;info()-&gt;element_size());</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            int32_t x = 0;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            int32_t limit =</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                (output_width_limit - output_width_start) * <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(output-&gt;info()-&gt;dimension(0));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordtype">float</span> *output_start_ptr = output_ptr + output_width_start * output-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= limit - window_step_x; x += window_step_x, input_offset[0] += window_step_x)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keyword">auto</span> in = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ad3be09105863ab9faa320e7c0c253071">load_as_f32</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(input_offset)));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_start_ptr + x, in);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">for</span> (; x &lt; limit; ++x, ++input_offset[0])</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                *(output_start_ptr + x) =</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(*<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(input_offset)));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="crop__helper_8h_source.xhtml#l00034">load_as_f32()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="rev64_8h_source.xhtml#l00039">arm_compute::wrapper::vrev64()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="aed803ee96db751816bca1a17adca8f79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed803ee96db751816bca1a17adca8f79">&#9670;&nbsp;</a></span>instance_normalization_nchw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void instance_normalization_nchw </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// Clear X/Y dimensions on execution window as we handle the planes manually</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    win.set(Window::DimY, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    constexpr <span class="keywordtype">int</span>      window_step_x  = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> elements_plane = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0) * output-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    Iterator input_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, win);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        win,</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            Window win_plane = window;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            win_plane.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            win_plane.set(Window::DimZ, Window::Dimension(<span class="keywordtype">id</span>[2], <span class="keywordtype">id</span>[2] + 1, 1));</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            win_plane.set(3, Window::Dimension(<span class="keywordtype">id</span>[3], <span class="keywordtype">id</span>[3] + 1, 1));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            Iterator input_plane_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, win_plane);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            Iterator output_plane_it(output, win_plane);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keyword">auto</span> sum_h_w         = <span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(0.f);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keyword">auto</span> sum_squares_h_w = <span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(0.f);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                win_plane,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input_plane_it.ptr());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="keyword">auto</span> vec_sum_h_w         = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(0.f), ExactTagType{});</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keyword">auto</span> vec_sum_squares_h_w = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(0.f), ExactTagType{});</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <span class="keywordtype">int</span> x = window.x().start();</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keywordflow">for</span> (; x &lt;= (window.x().<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>() - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                        <span class="keyword">auto</span> vec_input_val = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4a3377ac3e3280b91c86b775c696675a">vector_float_sum</a>(vec_sum_h_w, vec_sum_squares_h_w, vec_input_val);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keyword">auto</span> vec2_sum_h_w = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_sum_h_w), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_sum_h_w));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keyword">auto</span> vec2_sum_squares_h_w =</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_sum_squares_h_w), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_sum_squares_h_w));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    vec2_sum_h_w         = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(vec2_sum_h_w, vec2_sum_h_w);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    vec2_sum_squares_h_w = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(vec2_sum_squares_h_w, vec2_sum_squares_h_w);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    sum_h_w += <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(vec2_sum_h_w, 0);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    sum_squares_h_w += <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(vec2_sum_squares_h_w, 0);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="keywordflow">for</span> (; x &lt; window.x().<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(); ++x)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> value = <span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(*(input_ptr + x));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        sum_h_w += value;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        sum_squares_h_w += value * value;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                },</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                input_plane_it, output_plane_it);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> mean_h_w = sum_h_w / elements_plane;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> var_h_w  = sum_squares_h_w / elements_plane - mean_h_w * mean_h_w;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> multip_h_w     = gamma / std::sqrt(var_h_w + <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vec_mean_h_w   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(mean_h_w), ExactTagType{});</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vec_multip_h_w = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(multip_h_w), ExactTagType{});</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vec_beta       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(beta), ExactTagType{});</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                win_plane,</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_plane_it.ptr());</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_plane_it.ptr());</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="keywordtype">int</span> x = window.x().start();</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    <span class="comment">//auto vec_val = wrapper::vdup_n(static_cast&lt;T&gt;(0.0f), ExactTagType{});</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keywordflow">for</span> (; x &lt;= (window.x().end() - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> vec_val        = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> normalized_vec = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#abae8774fe34bba0075fc5f9df030c019">vector_float_norm</a>(vec_val, vec_mean_h_w, vec_multip_h_w, vec_beta);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, normalized_vec);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <span class="keywordflow">for</span> (; x &lt; window.x().<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(); ++x)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> val    = <span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(*(input_ptr + x));</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        *(output_ptr + x) = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>((val - mean_h_w) * multip_h_w + beta);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                },</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                input_plane_it, output_plane_it);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        },</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        input_it);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00043">vector_float_norm()</a>, <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00035">vector_float_sum()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00187">arm_compute::wrapper::vpadd()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="afffa511a4a4aedc45434f9bddd02ca24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afffa511a4a4aedc45434f9bddd02ca24">&#9670;&nbsp;</a></span>instance_normalization_nchw&lt; float &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aed803ee96db751816bca1a17adca8f79">arm_compute::cpu::instance_normalization_nchw</a>&lt; float &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2instancenorm_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">neon_fp32_instancenorm()</a>.</p>

</div>
</div>
<a id="ac07fe0eb0607dbbd9e369137a01bb860"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac07fe0eb0607dbbd9e369137a01bb860">&#9670;&nbsp;</a></span>is_valid_input_region()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::cpu::is_valid_input_region </td>
          <td>(</td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>base_w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>base_h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>w</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>h</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1cpu_1_1_depthwise_convolution_run_info.xhtml">DepthwiseConvolutionRunInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>run_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> &amp;&#160;</td>
          <td class="paramname"><em>dilation</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00097">97</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> int32_t current_h  = base_h + h * dilation.y();</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_valid_h = current_h &gt;= 0 &amp;&amp; current_h &lt; static_cast&lt;int32_t&gt;(run_info.input_height);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> int32_t current_w  = base_w + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * dilation.x();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_valid_w = current_w &gt;= 0 &amp;&amp; current_w &lt; static_cast&lt;int32_t&gt;(run_info.input_width);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span> is_valid_h &amp;&amp; is_valid_w;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00063">DepthwiseConvolutionRunInfo::input_height</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00064">DepthwiseConvolutionRunInfo::input_width</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">arm_compute::test::validation::w</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00073">Size2D::x()</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00082">Size2D::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">depthwise_loop_generic_fp()</a>, and <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">depthwise_loop_multiplier1_fp()</a>.</p>

</div>
</div>
<a id="a0842104a48f814276c1c33c380991f7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0842104a48f814276c1c33c380991f7c">&#9670;&nbsp;</a></span>l2_normalize_x()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::l2_normalize_x </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>sum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00040">40</a> of file <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, S&gt;::tag_type;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(in-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    Iterator input_it(in, win_collapsed);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Iterator sum_it(sum, win_collapsed);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Iterator output_it(out, win_collapsed);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input_it.ptr());</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keyword">const</span> T    sum_value      = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(sum_it.ptr());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keyword">const</span> T    norm_value     = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1.f) / std::sqrt(std::max(sum_value, <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> vec_norm_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(norm_value, ExactTagType{});</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="comment">// Compute elements over vector steps</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x), vec_norm_value));</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                out_ptr[x] = in_ptr[x] * norm_value;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        },</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        input_it, sum_it, output_it);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00038">arm_compute::data_size_from_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="aeafec2a1966410c78ff2f822b1fcec66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeafec2a1966410c78ff2f822b1fcec66">&#9670;&nbsp;</a></span>l2_normalize_yz()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::l2_normalize_yz </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>sum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml#l00083">83</a> of file <a class="el" href="l2normlayer_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, S&gt;::tag_type;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(in-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    Window window_sum(win);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    window_sum.set(axis, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    Iterator input_it(in, win);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    Iterator sum_it(sum, window_sum);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    Iterator output_it(out, win);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vec_eps = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>), ExactTagType{});</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        win,</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input_it.ptr());</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> sum_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(sum_it.ptr());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr());</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="comment">// Compute elements over vector steps</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_norm_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">wrapper::vinvsqrt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(sum_ptr + x), vec_eps));</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x), vec_norm_value));</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keyword">const</span> T norm_value = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1.f) / std::sqrt(std::max(sum_ptr[x], <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                out_ptr[x]         = in_ptr[x] * norm_value;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        },</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        input_it, sum_it, output_it);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_data_type_utils_8h_source.xhtml#l00038">arm_compute::data_size_from_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="invsqrt_8h_source.xhtml#l00048">arm_compute::wrapper::vinvsqrt()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a05f81d14dacef28ba48fa56aa7de043f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05f81d14dacef28ba48fa56aa7de043f">&#9670;&nbsp;</a></span>load_as_f32() <span class="overload">[1/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::load_as_f32 </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop__helper_8h_source.xhtml#l00049">49</a> of file <a class="el" href="crop__helper_8h_source.xhtml">crop_helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(ptr);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>.</p>

</div>
</div>
<a id="a1fa7bab8730a3115ff070414b5841361"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fa7bab8730a3115ff070414b5841361">&#9670;&nbsp;</a></span>load_as_f32() <span class="overload">[2/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::load_as_f32 </td>
          <td>(</td>
          <td class="paramtype">int16_t *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop__helper_8h_source.xhtml#l00067">67</a> of file <a class="el" href="crop__helper_8h_source.xhtml">crop_helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> vcvtq_f32_s32(vmovl_s16(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(ptr)));</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>.</p>

</div>
</div>
<a id="aadaf3e96ea2acc499810b09aa5488f8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aadaf3e96ea2acc499810b09aa5488f8e">&#9670;&nbsp;</a></span>load_as_f32() <span class="overload">[3/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::load_as_f32 </td>
          <td>(</td>
          <td class="paramtype">int32_t *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop__helper_8h_source.xhtml#l00055">55</a> of file <a class="el" href="crop__helper_8h_source.xhtml">crop_helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> vcvtq_f32_s32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(ptr));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>.</p>

</div>
</div>
<a id="ad3be09105863ab9faa320e7c0c253071"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3be09105863ab9faa320e7c0c253071">&#9670;&nbsp;</a></span>load_as_f32() <span class="overload">[4/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::load_as_f32 </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop__helper_8h_source.xhtml#l00034">34</a> of file <a class="el" href="crop__helper_8h_source.xhtml">crop_helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(ptr);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Type not supported.&quot;</span>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, and <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

<p class="reference">Referenced by <a class="el" href="crop_2generic_2neon_2impl_8h_source.xhtml#l00039">in_bounds_crop_window()</a>.</p>

</div>
</div>
<a id="aa0fcdcdbfa9f41960d9419ea37d430df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0fcdcdbfa9f41960d9419ea37d430df">&#9670;&nbsp;</a></span>load_as_f32() <span class="overload">[5/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::load_as_f32 </td>
          <td>(</td>
          <td class="paramtype">uint16_t *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop__helper_8h_source.xhtml#l00073">73</a> of file <a class="el" href="crop__helper_8h_source.xhtml">crop_helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> vcvtq_f32_u32(vmovl_u16(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(ptr)));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>.</p>

</div>
</div>
<a id="a5d433a967e930c8961bc23d5ef95a214"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d433a967e930c8961bc23d5ef95a214">&#9670;&nbsp;</a></span>load_as_f32() <span class="overload">[6/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::load_as_f32 </td>
          <td>(</td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop__helper_8h_source.xhtml#l00061">61</a> of file <a class="el" href="crop__helper_8h_source.xhtml">crop_helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> vcvtq_f32_u32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(ptr));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>.</p>

</div>
</div>
<a id="a9d403f9cb2551b9eaf994188f46fb38f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d403f9cb2551b9eaf994188f46fb38f">&#9670;&nbsp;</a></span>load_as_f32() <span class="overload">[7/7]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::load_as_f32 </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop__helper_8h_source.xhtml#l00079">79</a> of file <a class="el" href="crop__helper_8h_source.xhtml">crop_helper.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> vcvtq_f32_u32(vmovl_u16(vget_low_u16(vmovl_u8(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(ptr)))));</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>.</p>

</div>
</div>
<a id="a14b1d4cb1a66c829bfb6057b2084731b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14b1d4cb1a66c829bfb6057b2084731b">&#9670;&nbsp;</a></span>load_quantized() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">svfloat32x4_t arm_compute::cpu::load_quantized </td>
          <td>(</td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">svbool_t&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svfloat32_t &amp;&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00034">34</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">auto</span> x = svld1(pg, ptr);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> widened = svcreate4(svmovlb(svmovlb(x)), svmovlt(svmovlb(x)), svmovlb(svmovlt(x)), svmovlt(svmovlt(x)));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    pg = svptrue_b8();</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> svcreate4(svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svget4(widened, 0), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                     svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svget4(widened, 1), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                     svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svget4(widened, 2), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                     svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svget4(widened, 3), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>));</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="ae239dc51a686a455c70ff87fce9ea5aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae239dc51a686a455c70ff87fce9ea5aa">&#9670;&nbsp;</a></span>load_quantized() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::cpu::load_quantized </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00550">550</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;{</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>        x   = vld1q_u8(input1_ptr);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keyword">const</span> float32x4x4_t out = {{</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        vmulq_f32(</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)),</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        vmulq_f32(</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)),</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        vmulq_f32(</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            vcvtq_f32_s32(vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)),</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        vmulq_f32(vcvtq_f32_s32(</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                      vsubq_s32(vreinterpretq_s32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(x))))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)),</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }};</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00725">elementwise_arithm_op_quantized_broadcast_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00673">elementwise_arithm_op_quantized_loop()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00826">elementwise_comp_op_quantized_broadcast_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00774">elementwise_comp_op_quantized_loop()</a>, and <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00235">elementwise_comparison_quantized_op()</a>.</p>

</div>
</div>
<a id="a2eb02640072c41490fb1ff8c91ff0992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eb02640072c41490fb1ff8c91ff0992">&#9670;&nbsp;</a></span>load_quantized() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">svfloat32x4_t arm_compute::cpu::load_quantized </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">svbool_t&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svfloat32_t &amp;&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00048">48</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">auto</span> x = svld1(pg, ptr);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">//vprint(x);</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> widened = svcreate4(svmovlb(svmovlb(x)), svmovlt(svmovlb(x)), svmovlb(svmovlt(x)), svmovlt(svmovlt(x)));</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    pg = svptrue_b8();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> svcreate4(svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svreinterpret_s32(svget4(widened, 0)), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                     svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svreinterpret_s32(svget4(widened, 1)), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                     svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svreinterpret_s32(svget4(widened, 2)), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                     svmul_z(pg, svcvt_f32_z(pg, svsub_z(pg, svreinterpret_s32(svget4(widened, 3)), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

</div>
</div>
<a id="a5bb53d2922eed568fcd9de9081faeeb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bb53d2922eed568fcd9de9081faeeb7">&#9670;&nbsp;</a></span>load_quantized_signed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4x4_t arm_compute::cpu::load_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>input1_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00570">570</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;{</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a> x   = vld1q_s8(input1_ptr);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">const</span> float32x4x4_t out = {{</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_low_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_low_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_low_s16(vmovl_s8(vget_high_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        vmulq_f32(vcvtq_f32_s32(vsubq_s32(vmovl_s16(vget_high_s16(vmovl_s8(vget_high_s8(x)))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>)), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>),</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    }};</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00749">elementwise_arithm_op_quantized_signed_broadcast_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00699">elementwise_arithm_op_quantized_singed_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00852">elementwise_comp_op_quantized_signed_broadcast_loop()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00800">elementwise_comp_op_quantized_signed_loop()</a>.</p>

</div>
</div>
<a id="a1ccc771afb5f199744c317c23279e378"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ccc771afb5f199744c317c23279e378">&#9670;&nbsp;</a></span>mask_float_vector()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float32x4_t arm_compute::cpu::mask_float_vector </td>
          <td>(</td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32x4_t &amp;&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00045">45</a> of file <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">auto</span> int_in = vreinterpretq_u32_f32(in);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> vreinterpretq_f32_u32(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ac071623f14587f7cc6c4aea757d4378b">wrapper::vand</a>(int_in, mask));</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="and_8h_source.xhtml#l00039">arm_compute::wrapper::vand()</a>.</p>

<p class="reference">Referenced by <a class="el" href="activation_2generic_2neon_2impl_8h_source.xhtml#l00060">fp_neon_activation_impl()</a>.</p>

</div>
</div>
<a id="a074a73c207b678e25b31f8076a4a7b45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a074a73c207b678e25b31f8076a4a7b45">&#9670;&nbsp;</a></span>matrix_addition_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void matrix_addition_f32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">const</span> float32x4_t beta_f32 = vdupq_n_f32(beta);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x  = 16;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    Window win = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        win,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(in.ptr());</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">for</span> (; x &lt; (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            {</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                float32x4x4_t       alpha_ab = vld4q_f32(out_ptr + x);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keyword">const</span> float32x4x4_t c        = vld4q_f32(in_ptr + x);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="comment">// Multiply matrix C by its weight and accumulate</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                alpha_ab.val[0] = vmlaq_f32(alpha_ab.val[0], c.val[0], beta_f32);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                alpha_ab.val[1] = vmlaq_f32(alpha_ab.val[1], c.val[1], beta_f32);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                alpha_ab.val[2] = vmlaq_f32(alpha_ab.val[2], c.val[2], beta_f32);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                alpha_ab.val[3] = vmlaq_f32(alpha_ab.val[3], c.val[3], beta_f32);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                vst4q_f32(out_ptr + x, alpha_ab);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="comment">// Left-over loop</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                *(out_ptr + x) += *(in_ptr + x) * beta;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        },</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        in, out);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2gemm__matrix__add_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">neon_fp32_gemm_matrix_add()</a>.</p>

</div>
</div>
<a id="a614928b75209ad4ec4e4cdfab5e19cc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a614928b75209ad4ec4e4cdfab5e19cc8">&#9670;&nbsp;</a></span>matrix_matrix_multiply_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void matrix_matrix_multiply_f32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">279</a> of file <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    out_width   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0));</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    out_height  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1));</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> in_b_stride = rhs-&gt;info()-&gt;strides_in_bytes()[1] / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(rhs-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> out_stride1 = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[1] / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> out_stride2 = out_stride1 * 2;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> out_stride3 = out_stride1 * 3;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    num_elems_matrix_b_x = rhs-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// Set step_x and step_y for matrix A. Scale by a factor of 4 the Y range as the input interleaved matrix A has 4 times less the rows of the dst matrix</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    Window win_a(window);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    win_a.set(Window::DimX, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    win_a.set(Window::DimY, Window::Dimension(window.y().start() / 4, std::max(window.y().end() / 4, 1), 1));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    Window win_b;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// Don&#39;t slice matrix B along the z dimension if matrix B has just 2 dimensions and matrix A more than 2</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// This scenario can happen when the the matrix multiplication is used to perform a convolution operation</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">if</span> (rhs-&gt;info()-&gt;num_dimensions() &gt;= 3)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        win_b = window;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="comment">// Set step_x and step_y for matrix B. Scale by a factor of 4 the X range as the input transposed matrix A has 4 times less the cols of the dst matrix</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// The step along the x direction is 2 times the in_b_stride because for each iteration we compute 2 blocks of size 4x4</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    win_b.set(Window::DimX, Window::Dimension(window.x().start() / 4, window.x().end() / 4, 2 * in_b_stride));</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    win_b.set(Window::DimY, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    Iterator ina(lhs, win_a);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    Iterator inb(rhs, win_b);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> multiply_alpha = !(<a class="code" href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#ab2dcf325d146568ecc8d4a4bd36c02ac">helpers::float_ops::is_one</a>(alpha));</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">const</span> float32x4_t alpha_f32 = vdupq_n_f32(alpha);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// The implementation assumes that the matrix A and Matrix B have been reshaped respectively with CpuGemmInterleave4x4 and CpuGemmTranspose1xW</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// The reshaping of the matrices helps to have a cache friendly implementation and helps to avoid the data re-arrangements needed for computing 16x4 elements per iteration</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">// All the values needed for computing a single 4x4 block will be read from consecutive memory positions</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        window,</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keyword">auto</span> mtx_a0 = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ina.ptr());</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            <span class="keyword">auto</span> mtx_b0 = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(inb.ptr());</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keyword">auto</span> mtx_b1 = mtx_b0 + in_b_stride;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            float32x4_t acc00 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            float32x4_t acc10 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            float32x4_t acc20 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            float32x4_t acc30 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            float32x4_t acc01 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            float32x4_t acc11 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            float32x4_t acc21 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            float32x4_t acc31 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_a0)));</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b0)));</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b1)));</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keyword">auto</span> mtx_b0_end_addr = mtx_b0 + num_elems_matrix_b_x;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            <span class="keywordflow">for</span> (; mtx_b0 &lt;= (mtx_b0_end_addr - 32);)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                float32x4_t a0 = vld1q_dup_f32(mtx_a0 + 0);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                float32x4_t a1 = vld1q_dup_f32(mtx_a0 + 1);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                float32x4_t a2 = vld1q_dup_f32(mtx_a0 + 2);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                float32x4_t a3 = vld1q_dup_f32(mtx_a0 + 3);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                float32x4_t b00 = vld1q_f32(mtx_b0);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                float32x4_t b10 = vld1q_f32(mtx_b1);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                float32x4_t b01 = vld1q_f32(mtx_b0 + 4);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                float32x4_t b11 = vld1q_f32(mtx_b1 + 4);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_a0)));</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b0)));</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b1)));</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                acc00 = vmlaq_f32(acc00, b00, a0);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                acc10 = vmlaq_f32(acc10, b00, a1);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                acc20 = vmlaq_f32(acc20, b00, a2);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                acc30 = vmlaq_f32(acc30, b00, a3);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                float32x4_t a4 = vld1q_dup_f32(mtx_a0 + 4);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                float32x4_t a5 = vld1q_dup_f32(mtx_a0 + 5);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                float32x4_t a6 = vld1q_dup_f32(mtx_a0 + 6);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                float32x4_t a7 = vld1q_dup_f32(mtx_a0 + 7);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                acc01 = vmlaq_f32(acc01, b10, a0);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                acc11 = vmlaq_f32(acc11, b10, a1);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                acc21 = vmlaq_f32(acc21, b10, a2);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                acc31 = vmlaq_f32(acc31, b10, a3);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                acc00 = vmlaq_f32(acc00, b01, a4);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                acc10 = vmlaq_f32(acc10, b01, a5);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                acc20 = vmlaq_f32(acc20, b01, a6);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                acc30 = vmlaq_f32(acc30, b01, a7);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                acc01 = vmlaq_f32(acc01, b11, a4);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                acc11 = vmlaq_f32(acc11, b11, a5);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                acc21 = vmlaq_f32(acc21, b11, a6);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                acc31 = vmlaq_f32(acc31, b11, a7);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                mtx_a0 += 8;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                mtx_b0 += 8;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                mtx_b1 += 8;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                a0 = vld1q_dup_f32(mtx_a0 + 0);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                a1 = vld1q_dup_f32(mtx_a0 + 1);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                a2 = vld1q_dup_f32(mtx_a0 + 2);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                a3 = vld1q_dup_f32(mtx_a0 + 3);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                b00 = vld1q_f32(mtx_b0);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                b10 = vld1q_f32(mtx_b1);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                b01 = vld1q_f32(mtx_b0 + 4);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                b11 = vld1q_f32(mtx_b1 + 4);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                acc00 = vmlaq_f32(acc00, b00, a0);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                acc10 = vmlaq_f32(acc10, b00, a1);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                acc20 = vmlaq_f32(acc20, b00, a2);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                acc30 = vmlaq_f32(acc30, b00, a3);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                a4 = vld1q_dup_f32(mtx_a0 + 4);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                a5 = vld1q_dup_f32(mtx_a0 + 5);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                a6 = vld1q_dup_f32(mtx_a0 + 6);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                a7 = vld1q_dup_f32(mtx_a0 + 7);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                acc01 = vmlaq_f32(acc01, b10, a0);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                acc11 = vmlaq_f32(acc11, b10, a1);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                acc21 = vmlaq_f32(acc21, b10, a2);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                acc31 = vmlaq_f32(acc31, b10, a3);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                acc00 = vmlaq_f32(acc00, b01, a4);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                acc10 = vmlaq_f32(acc10, b01, a5);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                acc20 = vmlaq_f32(acc20, b01, a6);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                acc30 = vmlaq_f32(acc30, b01, a7);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160; </div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                acc01 = vmlaq_f32(acc01, b11, a4);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                acc11 = vmlaq_f32(acc11, b11, a5);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                acc21 = vmlaq_f32(acc21, b11, a6);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                acc31 = vmlaq_f32(acc31, b11, a7);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                mtx_a0 += 8;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                mtx_b0 += 8;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                mtx_b1 += 8;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                a0  = vld1q_dup_f32(mtx_a0 + 0);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                a1  = vld1q_dup_f32(mtx_a0 + 1);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                a2  = vld1q_dup_f32(mtx_a0 + 2);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                a3  = vld1q_dup_f32(mtx_a0 + 3);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                b00 = vld1q_f32(mtx_b0);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                b10 = vld1q_f32(mtx_b1);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                b01 = vld1q_f32(mtx_b0 + 4);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                b11 = vld1q_f32(mtx_b1 + 4);</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160; </div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_a0)));</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b0)));</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b1)));</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                acc00 = vmlaq_f32(acc00, b00, a0);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                acc10 = vmlaq_f32(acc10, b00, a1);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                acc20 = vmlaq_f32(acc20, b00, a2);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                acc30 = vmlaq_f32(acc30, b00, a3);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                a4 = vld1q_dup_f32(mtx_a0 + 4);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                a5 = vld1q_dup_f32(mtx_a0 + 5);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                a6 = vld1q_dup_f32(mtx_a0 + 6);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                a7 = vld1q_dup_f32(mtx_a0 + 7);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                acc01 = vmlaq_f32(acc01, b10, a0);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                acc11 = vmlaq_f32(acc11, b10, a1);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                acc21 = vmlaq_f32(acc21, b10, a2);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                acc31 = vmlaq_f32(acc31, b10, a3);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                acc00 = vmlaq_f32(acc00, b01, a4);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                acc10 = vmlaq_f32(acc10, b01, a5);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                acc20 = vmlaq_f32(acc20, b01, a6);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                acc30 = vmlaq_f32(acc30, b01, a7);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                acc01 = vmlaq_f32(acc01, b11, a4);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                acc11 = vmlaq_f32(acc11, b11, a5);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                acc21 = vmlaq_f32(acc21, b11, a6);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                acc31 = vmlaq_f32(acc31, b11, a7);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                mtx_a0 += 8;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                mtx_b0 += 8;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                mtx_b1 += 8;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160; </div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                a0  = vld1q_dup_f32(mtx_a0 + 0);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                a1  = vld1q_dup_f32(mtx_a0 + 1);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                a2  = vld1q_dup_f32(mtx_a0 + 2);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                a3  = vld1q_dup_f32(mtx_a0 + 3);</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                b00 = vld1q_f32(mtx_b0);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                b10 = vld1q_f32(mtx_b1);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                b01 = vld1q_f32(mtx_b0 + 4);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                b11 = vld1q_f32(mtx_b1 + 4);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160; </div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                acc00 = vmlaq_f32(acc00, b00, a0);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                acc10 = vmlaq_f32(acc10, b00, a1);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                acc20 = vmlaq_f32(acc20, b00, a2);</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                acc30 = vmlaq_f32(acc30, b00, a3);</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160; </div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                a4 = vld1q_dup_f32(mtx_a0 + 4);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                a5 = vld1q_dup_f32(mtx_a0 + 5);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                a6 = vld1q_dup_f32(mtx_a0 + 6);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                a7 = vld1q_dup_f32(mtx_a0 + 7);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                acc01 = vmlaq_f32(acc01, b10, a0);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                acc11 = vmlaq_f32(acc11, b10, a1);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                acc21 = vmlaq_f32(acc21, b10, a2);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                acc31 = vmlaq_f32(acc31, b10, a3);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160; </div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                acc00 = vmlaq_f32(acc00, b01, a4);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                acc10 = vmlaq_f32(acc10, b01, a5);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                acc20 = vmlaq_f32(acc20, b01, a6);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                acc30 = vmlaq_f32(acc30, b01, a7);</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                acc01 = vmlaq_f32(acc01, b11, a4);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                acc11 = vmlaq_f32(acc11, b11, a5);</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                acc21 = vmlaq_f32(acc21, b11, a6);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                acc31 = vmlaq_f32(acc31, b11, a7);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160; </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                mtx_a0 += 8;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                mtx_b0 += 8;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                mtx_b1 += 8;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            }</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160; </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">for</span> (; mtx_b0 &lt; mtx_b0_end_addr;)</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                float32x4_t a0  = vld1q_dup_f32(mtx_a0 + 0);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                float32x4_t a1  = vld1q_dup_f32(mtx_a0 + 1);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                float32x4_t a2  = vld1q_dup_f32(mtx_a0 + 2);</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                float32x4_t a3  = vld1q_dup_f32(mtx_a0 + 3);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                float32x4_t b00 = vld1q_f32(mtx_b0);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                float32x4_t b10 = vld1q_f32(mtx_b1);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160; </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*2]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_a0)));</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*2]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b0)));</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*2]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(mtx_b1)));</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                <span class="comment">// 4x4 block 0</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                acc00 = vmlaq_f32(acc00, b00, a0);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                acc10 = vmlaq_f32(acc10, b00, a1);</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                acc20 = vmlaq_f32(acc20, b00, a2);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                acc30 = vmlaq_f32(acc30, b00, a3);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                <span class="comment">// 4x4 block 1</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                acc01 = vmlaq_f32(acc01, b10, a0);</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                acc11 = vmlaq_f32(acc11, b10, a1);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                acc21 = vmlaq_f32(acc21, b10, a2);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                acc31 = vmlaq_f32(acc31, b10, a3);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                mtx_a0 += 4;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                mtx_b0 += 4;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                mtx_b1 += 4;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            }</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160; </div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            <span class="comment">// Multiply by the weight of matrix product (alpha)</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            <span class="keywordflow">if</span> (multiply_alpha)</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            {</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                acc00 = vmulq_f32(acc00, alpha_f32);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                acc10 = vmulq_f32(acc10, alpha_f32);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                acc20 = vmulq_f32(acc20, alpha_f32);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                acc30 = vmulq_f32(acc30, alpha_f32);</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                acc01 = vmulq_f32(acc01, alpha_f32);</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                acc11 = vmulq_f32(acc11, alpha_f32);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                acc21 = vmulq_f32(acc21, alpha_f32);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                acc31 = vmulq_f32(acc31, alpha_f32);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            }</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160; </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> mtx_out0 = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr());</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> mtx_out1 = mtx_out0 + 4;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.x() &lt; (out_width - 8))</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            {</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                vst1q_f32(mtx_out0, acc00);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                vst1q_f32(mtx_out1, acc01);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 1 &lt; out_height)</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                {</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                    vst1q_f32(mtx_out0 + out_stride1, acc10);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    vst1q_f32(mtx_out1 + out_stride1, acc11);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 2 &lt; out_height)</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                    {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                        vst1q_f32(mtx_out0 + out_stride2, acc20);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                        vst1q_f32(mtx_out1 + out_stride2, acc21);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                        <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 3 &lt; out_height)</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                        {</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                            vst1q_f32(mtx_out0 + out_stride3, acc30);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                            vst1q_f32(mtx_out1 + out_stride3, acc31);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                        }</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                    }</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            }</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.x() &lt; (out_width - 4))</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            {</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                vst1q_f32(mtx_out0, acc00);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 1 &lt; out_height)</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                {</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                    vst1q_f32(mtx_out0 + out_stride1, acc10);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 2 &lt; out_height)</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                    {</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                        vst1q_f32(mtx_out0 + out_stride2, acc20);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                        <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 3 &lt; out_height)</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                        {</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                            vst1q_f32(mtx_out0 + out_stride3, acc30);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                        }</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                    }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                <span class="comment">// Left-over columns</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> columns_left = out_width - <span class="keywordtype">id</span>.x() - 4;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> x = 0; x &lt; columns_left; ++x)</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                {</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                    *(mtx_out1 + x) = acc01[x];</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                    <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 1 &lt; out_height)</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                    {</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                        *(mtx_out1 + x + out_stride1) = acc11[x];</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                        <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 2 &lt; out_height)</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                        {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                            *(mtx_out1 + x + out_stride2) = acc21[x];</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                            <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 3 &lt; out_height)</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                            {</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                                *(mtx_out1 + x + out_stride3) = acc31[x];</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                            }</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                        }</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                    }</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                }</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            }</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            {</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                <span class="comment">// Left-over columns</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> columns_left = out_width - <span class="keywordtype">id</span>.x();</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = 0; x &lt; columns_left; ++x)</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                {</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                    *(mtx_out0 + x) = acc00[x];</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                    <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 1 &lt; out_height)</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                    {</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                        *(mtx_out0 + x + out_stride1) = acc10[x];</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                        <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 2 &lt; out_height)</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                        {</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                            *(mtx_out0 + x + out_stride2) = acc20[x];</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                            <span class="keywordflow">if</span> (<span class="keywordtype">id</span>.y() + 3 &lt; out_height)</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                            {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                                *(mtx_out0 + x + out_stride3) = acc30[x];</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                            }</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                        }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                    }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                }</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            }</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        },</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        ina, inb, out);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00038">arm_compute::data_size_from_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="float__ops_8h_source.xhtml#l00100">arm_compute::helpers::float_ops::is_one()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2gemm__matrix__mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">neon_fp32_gemm_matrix_mul()</a>.</p>

</div>
</div>
<a id="a6f764a97cef5e5afa5daaf6ec2ee9f2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f764a97cef5e5afa5daaf6ec2ee9f2b">&#9670;&nbsp;</a></span>max_poolingMxNxD_q8_neon_ndhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::max_poolingMxNxD_q8_neon_ndhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>window_step_x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml#l00232">232</a> of file <a class="el" href="pool3d_2neon_2quantized_8h_source.xhtml">quantized.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">using</span> q8x8_t  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 8&gt;::type</a>;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">using</span> q8x16_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 16&gt;::type</a>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_half_step_x = window_step_x / 2;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">int</span> pool_stride_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.stride.width);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordtype">int</span> pool_stride_y = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.stride.height);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">int</span> pool_stride_z = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.stride.depth);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_z = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape()[3] : pool_info.pool_size.depth;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.top);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.left);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_front = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(pool_info.padding.front);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_c = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_d = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(3);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z());</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> w_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3]);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> n_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[4]);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">const</span> uint8_t *in_ptr_start = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes();</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = input_dim_c;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    Iterator out(dst0, window_out);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo src_qinfo = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo dst_qinfo = dst0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>   requant_scale = dst_qinfo.scale / src_qinfo.scale;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> int32_t requant_offset =</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        dst_qinfo.offset - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.offset) / requant_scale);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo requant_qinfo = UniformQuantizationInfo(requant_scale, requant_offset);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        window_out,</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="comment">// Computing the theoretical input starting/ending points</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_width  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * pool_stride_x - pool_pad_left;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * pool_stride_y - pool_pad_top;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_idx_depth  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>[3]) * pool_stride_z - pool_pad_front;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, -in_idx_width);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x_t = std::min(input_dim_w + pool_pad_left - in_idx_width, pool_size_x);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, -in_idx_height);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y_t = std::min(input_dim_h + pool_pad_top - in_idx_height, pool_size_y);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_z = std::max(0, -in_idx_depth);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z_t = std::min(input_dim_d + pool_pad_front - in_idx_depth, pool_size_z);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="comment">// The end of width to consider in calculation should exclude PAD_X, PAD_Y and PAD_Z</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x = std::min(pool_end_x_t, input_dim_w - in_idx_width);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y = std::min(pool_end_y_t, input_dim_h - in_idx_height);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_z = std::min(pool_end_z_t, input_dim_d - in_idx_depth);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr_n = in_ptr_start + <span class="keywordtype">id</span>[4] * n_stride;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordtype">int</span> x_off = window_start_x;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x) <span class="comment">// C</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                q8x16_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            <span class="keyword">const</span> q8x16_t  data     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                            vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                        }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                                    ? vrequantize_pooling&lt;q8x8_t, q8x16_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vres),</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                                                                           <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vres), requant_qinfo)</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                    : vres);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            }</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="comment">// Leftovers using half the window step</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_half_step_x); x_off += window_half_step_x)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                q8x8_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), wrapper::traits::vector_64_tag{});</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                            <span class="keyword">const</span> q8x8_t   data     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160; </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off,</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                (src_qinfo != dst_qinfo) ? vrequantize_pooling&lt;q8x8_t&gt;(vres, requant_qinfo) : vres);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt; window_end_x; ++x_off)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;            {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                T res = std::numeric_limits&lt;T&gt;::min();</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> z = pool_start_z; z &lt; pool_end_z; ++z)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_z = in_ptr_n + (z + in_idx_depth) * w_stride;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                        <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_z + (y + in_idx_height) * z_stride;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                            <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x + in_idx_width) * y_stride;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                            <span class="keyword">const</span> T        data     = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr_x) + x_off);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                            res = std::max(res, data);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                        }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> res_f                           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = quantize&lt;T&gt;(res_f, requant_qinfo);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        },</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        out);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_size3_d_8h_source.xhtml#l00093">Size3D::depth</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00642">Padding3D::front</a>, <a class="el" href="_size3_d_8h_source.xhtml#l00092">Size3D::height</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01253">Pooling3dLayerInfo::is_global_pooling</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00638">Padding3D::left</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01251">Pooling3dLayerInfo::padding</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01249">Pooling3dLayerInfo::pool_size</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01250">Pooling3dLayerInfo::stride</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00640">Padding3D::top</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_size3_d_8h_source.xhtml#l00091">Size3D::width</a>.</p>

</div>
</div>
<a id="a20c77191f56411327e80c9fe3b3d837b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20c77191f56411327e80c9fe3b3d837b">&#9670;&nbsp;</a></span>max_unpooling()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::max_unpooling </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="maxunpool_2generic_2neon_2impl_8h_source.xhtml#l00035">35</a> of file <a class="el" href="maxunpool_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    Iterator  input_itr(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, window);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    Iterator  indices_itr(indices, window);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">auto</span>      out_ptr      = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output-&gt;buffer());</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_w = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(output-&gt;info()-&gt;strides_in_bytes()[3]);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        window,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            <span class="keyword">auto</span> vindices                                         = <span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(indices_itr.ptr());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keyword">auto</span> vinput                                           = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_itr.ptr());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            out_ptr[<span class="keywordtype">id</span>[3] * out_stride_w / <span class="keyword">sizeof</span>(T) + *vindices] = *vinput;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        },</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        input_itr, indices_itr);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>.</p>

</div>
</div>
<a id="ae6c7d81b90742a0ab1c99a495c094285"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6c7d81b90742a0ab1c99a495c094285">&#9670;&nbsp;</a></span>mean_stddev_normalization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mean_stddev_normalization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="meanstddevnorm_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;ScalarType, size&gt;::tag_type;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// Set build options</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = size;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Iterator input_itr(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, win);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    Iterator output_itr(output, win);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        win,</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordtype">int</span>  x       = window_start_x;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input_itr.ptr());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output_itr.ptr());</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">auto</span> sum_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(0.f), ExactTagType{});</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keyword">auto</span> sum_sq_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(0.f), ExactTagType{});</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="keyword">auto</span> data  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                sum_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(sum_vec, data);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                sum_sq_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(sum_sq_vec, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(data, data));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keyword">auto</span> sum_carry_res    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(sum_vec), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(sum_vec));</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keyword">auto</span> sum_sq_carry_res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(sum_sq_vec), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(sum_sq_vec));</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; size / 4; ++i)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                sum_carry_res    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(sum_carry_res, sum_carry_res);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                sum_sq_carry_res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(sum_sq_carry_res, sum_sq_carry_res);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keyword">auto</span> sum    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(sum_carry_res, 0);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keyword">auto</span> sum_sq = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(sum_sq_carry_res, 0);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                ScalarType data = *(in_ptr + x);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                sum += data;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                sum_sq += data * data;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            ScalarType mean       = sum / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            ScalarType var        = (sum_sq / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0)) - (mean * mean);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            ScalarType stddev_inv = 1.f / sqrt(var + <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keyword">auto</span> mean_vec       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(mean, ExactTagType{});</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keyword">auto</span> stddev_inv_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(stddev_inv, ExactTagType{});</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">for</span> (x = window_start_x; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keyword">auto</span> data = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keyword">auto</span> res  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(data, mean_vec), stddev_inv_vec);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="comment">// Store results</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, res);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                *(out_ptr + x) = (*(in_ptr + x) - mean) * stddev_inv;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        },</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        input_itr, output_itr);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00187">arm_compute::wrapper::vpadd()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="aeed4536d89bb131303af92922deb0a68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeed4536d89bb131303af92922deb0a68">&#9670;&nbsp;</a></span>mean_stddev_normalization&lt; float, 4 &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae6c7d81b90742a0ab1c99a495c094285">arm_compute::cpu::mean_stddev_normalization</a>&lt; float, 4 &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2meanstddevnorm_2generic_2neon_2fp32_8cpp_source.xhtml#l00030">neon_fp32_meanstddevnorm()</a>.</p>

</div>
</div>
<a id="aca645d55b58aed670b5fea206486df9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca645d55b58aed670b5fea206486df9a">&#9670;&nbsp;</a></span>mul_F16_F16_F16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::mul_F16_F16_F16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01503">CpuMulKernel::configure()</a>.</p>

</div>
</div>
<a id="a01fe446199ad99735bc0fcc4c4734b01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01fe446199ad99735bc0fcc4c4734b01">&#9670;&nbsp;</a></span>mul_F32_F32_F32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mul_F32_F32_F32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="cpu_2kernels_2mul_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src2-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16 / <span class="keyword">sizeof</span>(float);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src1-&gt;info()-&gt;tensor_shape().x() != src2-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;float, window_step_x&gt;::tag_type;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src2 : src1;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            win,</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>  broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, ExactTagType{});</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span>  scale_vec           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, ExactTagType{});</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keyword">auto</span>       res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(broadcast_value_vec, non_broadcast_v), scale_vec);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = *(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    *(output_ptr + x)          = broadcast_value * non_broadcast_v * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            },</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            broadcast_input, non_broadcast_input, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        Iterator input1(src1, input1_win);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        Iterator input2(src2, input2_win);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>(out, win);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            win,</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>.ptr());</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="comment">// Compute window_step_x elements per iteration</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ta1       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ta2       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> scale_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, ExactTagType{});</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(ta1, ta2), scale_vec);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ta1    = *(input1_ptr + x);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> ta2    = *(input2_ptr + x);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    *(output_ptr + x) = ta1 * ta2 * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            },</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            input1, input2, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01503">CpuMulKernel::configure()</a>, and <a class="el" href="_cpu_mul_kernel_8cpp_source.xhtml#l01668">CpuMulKernel::get_mws()</a>.</p>

</div>
</div>
<a id="a496c4e0ab041ed1bb09f27599297e5c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a496c4e0ab041ed1bb09f27599297e5c6">&#9670;&nbsp;</a></span>narrow_to_byte_predicate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">svbool_t arm_compute::cpu::narrow_to_byte_predicate </td>
          <td>(</td>
          <td class="paramtype">svbool_t&#160;</td>
          <td class="paramname"><em>pg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00051">51</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_false = svpfalse();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">switch</span> (bytewidth)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> 8:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            pg = svuzp1_b32(pg, all_false);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">/* fall through */</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">case</span> 4:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            pg = svuzp1_b16(pg, all_false);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="comment">/* fall through */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">case</span> 2:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            pg = svuzp1_b8(pg, all_false);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">/* fall through */</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> pg;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="af9b26a65178cfe477d292f394c0638b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9b26a65178cfe477d292f394c0638b3">&#9670;&nbsp;</a></span>nearest_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::nearest_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml#l00219">219</a> of file <a class="el" href="cpu_2kernels_2scale_2neon_2list_8h_source.xhtml">list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(offsets);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">// Compute the ratio between source and destination dimensions</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> =</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(1), align_corners);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> =</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <a class="code" href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">scale_utils::calculate_resize_ratio</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(2), align_corners);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_y  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_z  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_w  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_y = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[1];</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_z = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[2];</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_stride_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;strides_in_bytes()[3];</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> out_dim_ch   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> step_cout    = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    Window window_execution = window;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    window_execution.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    Window win_in_out(window);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    win_in_out.set(Window::DimY, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    win_in_out.set(Window::DimZ, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_in_out);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_in_out);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_start = window_execution.y().start();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_end   = window_execution.y().end();</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> xo_step  = window_execution.y().step();</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_start = window_execution.z().start();</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_end   = window_execution.z().end();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> yo_step  = window_execution.z().step();</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_start = window_execution[3].start();</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_end   = window_execution[3].end();</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bo_step  = window_execution[3].step();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bo = bo_start; bo &lt; bo_end; bo += bo_step)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keyword">const</span> uint8_t *in_ptr_base  = in.ptr() + bo * in_stride_w;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        uint8_t       *out_ptr_base = out.ptr() + bo * out_stride_w;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> yo = yo_start; yo &lt; yo_end; yo += yo_step)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordtype">float</span> yi_f = ((yo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a>);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordtype">int</span>   yi   = 0;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">if</span> (align_corners)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                yi = <a class="code" href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">utils::rounding::round_half_away_from_zero</a>(yi_f);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                yi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(yi_f));</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> xo = xo_start; xo &lt; xo_end; xo += xo_step)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            {</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                <span class="comment">// Floating-point coordinate</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <span class="keywordtype">float</span> xi_f = ((xo + sampling_offset) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a>);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                <span class="keywordtype">int</span>   xi   = 0;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="keywordflow">if</span> (align_corners)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    xi = <a class="code" href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">utils::rounding::round_half_away_from_zero</a>(xi_f);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    xi = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(xi_f));</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                <span class="keyword">const</span> uint8_t *in_ptr  = in_ptr_base + xi * in_stride_y + yi * in_stride_z;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                uint8_t       *out_ptr = out_ptr_base + xo * out_stride_y + yo * out_stride_z;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordtype">int</span> cout = 0;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordflow">for</span> (; cout &lt;= (out_dim_ch - step_cout); cout += step_cout)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    <span class="keyword">auto</span> out0 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T)), out0);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <span class="keywordflow">for</span> (; cout &lt; out_dim_ch; ++cout)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keyword">auto</span> out0 = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr + cout * <span class="keyword">sizeof</span>(T)));</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr + cout * <span class="keyword">sizeof</span>(T))) = out0;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_scale_utils_8cpp_source.xhtml#l00032">arm_compute::scale_utils::calculate_resize_ratio()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="support_2_rounding_8h_source.xhtml#l00107">arm_compute::utils::rounding::round_half_away_from_zero()</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">arm_compute::test::validation::scale_x</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">arm_compute::test::validation::scale_y</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>, and <a class="el" href="_window_8h_source.xhtml#l00176">Window::z()</a>.</p>

</div>
</div>
<a id="ab6cd1a0f739089b9e26caaf5091b666e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6cd1a0f739089b9e26caaf5091b666e">&#9670;&nbsp;</a></span>neon_bfloat16_to_fp32_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_bfloat16_to_fp32_cast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9a75b7cedf76680be80b90c20922a3e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a75b7cedf76680be80b90c20922a3e7">&#9670;&nbsp;</a></span>neon_f16_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_f16_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1178c7489ce4729ff482c5d7b06355e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1178c7489ce4729ff482c5d7b06355e8">&#9670;&nbsp;</a></span>neon_f16_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_f16_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a235fbeb87b90d63f750dc0fb28a1df8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a235fbeb87b90d63f750dc0fb28a1df8c">&#9670;&nbsp;</a></span>neon_f32_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_f32_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2select_2generic_2neon_2fp32_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="cpu_2kernels_2select_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> select_op_not_same_rank&lt;float&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7b159321540febe0876bcf2a30ddd573"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b159321540febe0876bcf2a30ddd573">&#9670;&nbsp;</a></span>neon_f32_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_f32_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2select_2generic_2neon_2fp32_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="cpu_2kernels_2select_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> select_op_32&lt;float, uint32x4_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad8452dbdcf57cf54556fa29f801960d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8452dbdcf57cf54556fa29f801960d1">&#9670;&nbsp;</a></span>neon_fp16_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a55fa9349268bc4dc8069e7d9b24405da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55fa9349268bc4dc8069e7d9b24405da">&#9670;&nbsp;</a></span>neon_fp16_boundingboxtransform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_boundingboxtransform </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>pred_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a>&#160;</td>
          <td class="paramname"><em>bbinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a72684fb557998f19eca6aa52da02d11a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72684fb557998f19eca6aa52da02d11a">&#9670;&nbsp;</a></span>neon_fp16_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a02e40293e17e9c6a7581233e13c666eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02e40293e17e9c6a7581233e13c666eb">&#9670;&nbsp;</a></span>neon_fp16_computeallanchors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_computeallanchors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>all_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a>&#160;</td>
          <td class="paramname"><em>anchors_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e521ca03e66524e6db0f8b3ea9e3567"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e521ca03e66524e6db0f8b3ea9e3567">&#9670;&nbsp;</a></span>neon_fp16_deptwiseconv2dnative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_deptwiseconv2dnative </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aec756ab02c2d2e38049647d281398743"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec756ab02c2d2e38049647d281398743">&#9670;&nbsp;</a></span>neon_fp16_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a577a53c0cbfebf232dd2feb3017221b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a577a53c0cbfebf232dd2feb3017221b5">&#9670;&nbsp;</a></span>neon_fp16_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a77e69bea899bb8caf2f855db36ba2307"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77e69bea899bb8caf2f855db36ba2307">&#9670;&nbsp;</a></span>neon_fp16_gemm_matrix_add()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_gemm_matrix_add </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad21abd99f7f0339e68cd6106229a06e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad21abd99f7f0339e68cd6106229a06e6">&#9670;&nbsp;</a></span>neon_fp16_gemm_matrix_mul()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_gemm_matrix_mul </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_dst_vector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7c7fd7cfd75b0e0e4bc90000bcb13f53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c7fd7cfd75b0e0e4bc90000bcb13f53">&#9670;&nbsp;</a></span>neon_fp16_instancenorm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_instancenorm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_mixed_precision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaeddf3dd8e62805aa3189cae6e9eb240"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaeddf3dd8e62805aa3189cae6e9eb240">&#9670;&nbsp;</a></span>neon_fp16_l2_normalize_x()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_l2_normalize_x </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>sum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1db242ae3c8a36146943e66240b68394"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1db242ae3c8a36146943e66240b68394">&#9670;&nbsp;</a></span>neon_fp16_l2_normalize_yz()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_l2_normalize_yz </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>sum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a699fd3f49b2dc8962ae85981a29bd36f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a699fd3f49b2dc8962ae85981a29bd36f">&#9670;&nbsp;</a></span>neon_fp16_maxunpooling()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_maxunpooling </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aee6b63002da7f5c2eb9e58122f704a71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee6b63002da7f5c2eb9e58122f704a71">&#9670;&nbsp;</a></span>neon_fp16_meanstddevnorm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_meanstddevnorm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab13b326bfbcf3b8a3df50467840572f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab13b326bfbcf3b8a3df50467840572f2">&#9670;&nbsp;</a></span>neon_fp16_pool3d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_pool3d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af1d8c05596996977afe27a1cf62a65bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1d8c05596996977afe27a1cf62a65bf">&#9670;&nbsp;</a></span>neon_fp16_roialign()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_roialign </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rois</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa7e09d2fcad987231f530acd97f7d57f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7e09d2fcad987231f530acd97f7d57f">&#9670;&nbsp;</a></span>neon_fp16_softmax()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_softmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac34d8d43a81990da4c1f5f6c8c21081e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac34d8d43a81990da4c1f5f6c8c21081e">&#9670;&nbsp;</a></span>neon_fp16_to_other_dt_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp16_to_other_dt_cast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a37b6e9241ddcff7dee741037b2ebeb95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37b6e9241ddcff7dee741037b2ebeb95">&#9670;&nbsp;</a></span>neon_fp32_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2activation_2generic_2neon_2fp32_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="cpu_2kernels_2activation_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    fp_neon_activation_impl&lt;float, Fp32Params&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>, window);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a95887d3e821902663e2d364ec0b71fa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95887d3e821902663e2d364ec0b71fa8">&#9670;&nbsp;</a></span>neon_fp32_boundingboxtransform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_boundingboxtransform </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>pred_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a>&#160;</td>
          <td class="paramname"><em>bbinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2boundingboxtransform_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="cpu_2kernels_2boundingboxtransform_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> bounding_box_transform&lt;float&gt;(boxes, pred_boxes, deltas, bbinfo, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="acb6ac6d7a2301e053b26d95781db3e44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb6ac6d7a2301e053b26d95781db3e44">&#9670;&nbsp;</a></span>neon_fp32_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2neon_2fp32_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_32&lt;op, float, float32x4_t&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4c5808cefb48b06a3da5949364f7bf1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c5808cefb48b06a3da5949364f7bf1c">&#9670;&nbsp;</a></span>neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb6ac6d7a2301e053b26d95781db3e44">arm_compute::cpu::neon_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa5d2c5edc8155f4d1493f7dd1b64b35f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5d2c5edc8155f4d1493f7dd1b64b35f">&#9670;&nbsp;</a></span>neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb6ac6d7a2301e053b26d95781db3e44">arm_compute::cpu::neon_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac20096b787268ba66590b9e49d3be87d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac20096b787268ba66590b9e49d3be87d">&#9670;&nbsp;</a></span>neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb6ac6d7a2301e053b26d95781db3e44">arm_compute::cpu::neon_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a599c145b239b4093f8c90babc91feafe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a599c145b239b4093f8c90babc91feafe">&#9670;&nbsp;</a></span>neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb6ac6d7a2301e053b26d95781db3e44">arm_compute::cpu::neon_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a817c6e65dcb6b00b2ad180c06fc99098"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a817c6e65dcb6b00b2ad180c06fc99098">&#9670;&nbsp;</a></span>neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb6ac6d7a2301e053b26d95781db3e44">arm_compute::cpu::neon_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ada67793ec7dfd2576805c69f6d35de42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada67793ec7dfd2576805c69f6d35de42">&#9670;&nbsp;</a></span>neon_fp32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#acb6ac6d7a2301e053b26d95781db3e44">arm_compute::cpu::neon_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af04cae6a0d49608ac063e8d638ea9780"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af04cae6a0d49608ac063e8d638ea9780">&#9670;&nbsp;</a></span>neon_fp32_computeallanchors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_computeallanchors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>all_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a>&#160;</td>
          <td class="paramname"><em>anchors_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2genproposals_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="cpu_2kernels_2genproposals_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> compute_all_anchors&lt;float&gt;(anchors, all_anchors, anchors_info, window);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a10cae4c8f0f98bdc589fa0376a8616c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10cae4c8f0f98bdc589fa0376a8616c8">&#9670;&nbsp;</a></span>neon_fp32_deptwiseconv2dnative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_deptwiseconv2dnative </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2depthwiseconv2d_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="cpu_2kernels_2depthwiseconv2d_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> run_depthwise_float&lt;float, float&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, has_biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="working__space_8hpp_source.xhtml#l00322">bias</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="af8909d1c05d50e28f4d52c6ddfbb06d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8909d1c05d50e28f4d52c6ddfbb06d4">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2neon_2fp32_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op&lt;op, typename wrapper::traits::neon_vector&lt;float, 4&gt;&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ace3da456fb564b9c3df7992f3e495376"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace3da456fb564b9c3df7992f3e495376">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a95bfc98c921c6b965e9e36c4057cb6fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95bfc98c921c6b965e9e36c4057cb6fe">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af79cf8c5fe4f7ccfb1c2a2f1fd0500f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af79cf8c5fe4f7ccfb1c2a2f1fd0500f7">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aeb12dc76e546b9062d3267264cc1830c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb12dc76e546b9062d3267264cc1830c">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af39b7e31a237f1e3f646feddbb91ed64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af39b7e31a237f1e3f646feddbb91ed64">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9b93ca48103f377f7a103d0f5466ba98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b93ca48103f377f7a103d0f5466ba98">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab093c9a7a75706a36482adb85662076f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab093c9a7a75706a36482adb85662076f">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a000160c59f0735bda44082db86c5d415"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a000160c59f0735bda44082db86c5d415">&#9670;&nbsp;</a></span>neon_fp32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#af8909d1c05d50e28f4d52c6ddfbb06d4">arm_compute::cpu::neon_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a947d8062431683fa590c0adf360381e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a947d8062431683fa590c0adf360381e4">&#9670;&nbsp;</a></span>neon_fp32_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2elementwise__unary_2generic_2neon_2fp32_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="cpu_2kernels_2elementwise__unary_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(lut);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> elementwise_op&lt;float&gt;(in, out, window, op);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a369e86fda1b88d9a907975bb0f79632a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a369e86fda1b88d9a907975bb0f79632a">&#9670;&nbsp;</a></span>neon_fp32_gemm_matrix_add()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_gemm_matrix_add </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2gemm__matrix__add_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="cpu_2kernels_2gemm__matrix__add_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a074a73c207b678e25b31f8076a4a7b45">matrix_addition_f32</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, beta);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">matrix_addition_f32()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="ace163115b0ead7f9f333cecff7d898fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace163115b0ead7f9f333cecff7d898fd">&#9670;&nbsp;</a></span>neon_fp32_gemm_matrix_mul()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_gemm_matrix_mul </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>is_dst_vector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2gemm__matrix__mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="cpu_2kernels_2gemm__matrix__mul_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> (is_dst_vector) ? <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aef362eaeea03ec75104e13cb530ef02d">vector_matrix_multiply_f32</a>(lhs, rhs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, alpha)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                           : <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a614928b75209ad4ec4e4cdfab5e19cc8">matrix_matrix_multiply_f32</a>(lhs, rhs, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, alpha);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">matrix_matrix_multiply_f32()</a>, and <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">vector_matrix_multiply_f32()</a>.</p>

</div>
</div>
<a id="a9496198912f56c21412a6c7269adb961"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9496198912f56c21412a6c7269adb961">&#9670;&nbsp;</a></span>neon_fp32_instancenorm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_instancenorm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>use_mixed_precision</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2instancenorm_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="cpu_2kernels_2instancenorm_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(use_mixed_precision);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afffa511a4a4aedc45434f9bddd02ca24">instance_normalization_nchw&lt;float&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, gamma, beta, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, window);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="namespacearm__compute_1_1cpu.xhtml#afffa511a4a4aedc45434f9bddd02ca24">instance_normalization_nchw&lt; float &gt;()</a>.</p>

</div>
</div>
<a id="a289537cdf057a33f61417d4367bf7acc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a289537cdf057a33f61417d4367bf7acc">&#9670;&nbsp;</a></span>neon_fp32_l2_normalize_x()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_l2_normalize_x </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>sum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>unused_axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2l2normlayer_2generic_2neon_2fp32_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="cpu_2kernels_2l2normlayer_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(unused_axis);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> l2_normalize_x&lt;float, 4&gt;(in, sum, out, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, window);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>.</p>

</div>
</div>
<a id="a57e5af4bd548ad1e725c586be0fe32c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57e5af4bd548ad1e725c586be0fe32c2">&#9670;&nbsp;</a></span>neon_fp32_l2_normalize_yz()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_l2_normalize_yz </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>sum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2l2normlayer_2generic_2neon_2fp32_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="cpu_2kernels_2l2normlayer_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> l2_normalize_yz&lt;float, 4&gt;(in, sum, out, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, window, axis);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>.</p>

</div>
</div>
<a id="abdb5a72b44bc8efeee1b07d0d2db9787"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdb5a72b44bc8efeee1b07d0d2db9787">&#9670;&nbsp;</a></span>neon_fp32_maxunpooling()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_maxunpooling </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2maxunpool_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="cpu_2kernels_2maxunpool_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> max_unpooling&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, indices, output, window);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a3ee1b9fa3211487ff04f668ee2fb413c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ee1b9fa3211487ff04f668ee2fb413c">&#9670;&nbsp;</a></span>neon_fp32_meanstddevnorm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_meanstddevnorm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2meanstddevnorm_2generic_2neon_2fp32_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="cpu_2kernels_2meanstddevnorm_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aeed4536d89bb131303af92922deb0a68">mean_stddev_normalization&lt;float, 4&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>, window);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeed4536d89bb131303af92922deb0a68">mean_stddev_normalization&lt; float, 4 &gt;()</a>.</p>

</div>
</div>
<a id="a1376382ed5c959529d464bce2c7ade60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1376382ed5c959529d464bce2c7ade60">&#9670;&nbsp;</a></span>neon_fp32_pool3d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_pool3d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2pool3d_2neon_2fp32_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="cpu_2kernels_2pool3d_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> poolingMxNxD_fp_neon_ndhwc&lt;float&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a334bfe81953ded3a839cc8918fc9d84b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a334bfe81953ded3a839cc8918fc9d84b">&#9670;&nbsp;</a></span>neon_fp32_roialign()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_roialign </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rois</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2roialign_2generic_2neon_2fp32_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="cpu_2kernels_2roialign_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> roi_align&lt;float, float&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, rois, pool_info, window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="ade70a1a9e32344ca8493c754c6ae57d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade70a1a9e32344ca8493c754c6ae57d4">&#9670;&nbsp;</a></span>neon_fp32_softmax()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_fp32_softmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2softmax_2generic_2neon_2fp32_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="cpu_2kernels_2softmax_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (axis == 0)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> neon_softmax_x_float&lt;float, IS_LOG&gt;(in, tmp, out, beta, axis, window);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span> neon_softmax_non_x_float&lt;float, IS_LOG&gt;(in, tmp, out, beta, axis, window);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2078854f03f35e14b1d3876e435c4ec8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2078854f03f35e14b1d3876e435c4ec8">&#9670;&nbsp;</a></span>neon_fp32_softmax&lt; false &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ade70a1a9e32344ca8493c754c6ae57d4">arm_compute::cpu::neon_fp32_softmax</a>&lt; false &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abbe3d6cd6d00011918ef48fae85674a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbe3d6cd6d00011918ef48fae85674a5">&#9670;&nbsp;</a></span>neon_fp32_softmax&lt; true &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ade70a1a9e32344ca8493c754c6ae57d4">arm_compute::cpu::neon_fp32_softmax</a>&lt; true &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa204f8fbfe2d4f9f3310e3034f23b3e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa204f8fbfe2d4f9f3310e3034f23b3e8">&#9670;&nbsp;</a></span>neon_fp32_to_bfloat16_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp32_to_bfloat16_cast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0ece6e755aaa7215d7e4d3dee0d0a216"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ece6e755aaa7215d7e4d3dee0d0a216">&#9670;&nbsp;</a></span>neon_fp32_to_fp16_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_fp32_to_fp16_cast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1f883070aa6e1648eeea6283cd55fa99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f883070aa6e1648eeea6283cd55fa99">&#9670;&nbsp;</a></span>neon_normalize_float16_8_0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_normalize_float16_8_0 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="ac67308f22f73503c7a543fa772257a33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac67308f22f73503c7a543fa772257a33">&#9670;&nbsp;</a></span>neon_normalize_float16_8_0_2D()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_normalize_float16_8_0_2D </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a2e0bcf5bfe2428dc4ba0c9e17de0c846"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e0bcf5bfe2428dc4ba0c9e17de0c846">&#9670;&nbsp;</a></span>neon_normalize_float16_8_1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_normalize_float16_8_1 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a23054e184000df87c18f74539239a448"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23054e184000df87c18f74539239a448">&#9670;&nbsp;</a></span>neon_normalize_float16_8_1_2D()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_normalize_float16_8_1_2D </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="aa80eb743ddc903016261a7854f79e7b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa80eb743ddc903016261a7854f79e7b3">&#9670;&nbsp;</a></span>neon_normalize_float16_8_2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_normalize_float16_8_2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a85a0a0292bb19ad458617cddaa2c8450"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85a0a0292bb19ad458617cddaa2c8450">&#9670;&nbsp;</a></span>neon_normalize_float32_4_0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_normalize_float32_4_0 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    arm_compute::normalize_float&lt;float, 4, 0, false&gt;(window, in, in_squared, out, ninfo);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="acdc48966718036ae58fd06afea4bb94a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdc48966718036ae58fd06afea4bb94a">&#9670;&nbsp;</a></span>neon_normalize_float32_4_0_2D()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_normalize_float32_4_0_2D </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    arm_compute::normalize_float&lt;float, 4, 0, true&gt;(window, in, in_squared, out, ninfo);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="abbdf409e0ccffb72cf0da4423ee40e76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbdf409e0ccffb72cf0da4423ee40e76">&#9670;&nbsp;</a></span>neon_normalize_float32_4_1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_normalize_float32_4_1 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    arm_compute::normalize_float&lt;float, 4, 1, false&gt;(window, in, in_squared, out, ninfo);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a2ba728f7ed4bb5852d3785f9c3c19e96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ba728f7ed4bb5852d3785f9c3c19e96">&#9670;&nbsp;</a></span>neon_normalize_float32_4_1_2D()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_normalize_float32_4_1_2D </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    arm_compute::normalize_float&lt;float, 4, 1, true&gt;(window, in, in_squared, out, ninfo);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a0151f7451dd40370fcc9e8492eb0f167"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0151f7451dd40370fcc9e8492eb0f167">&#9670;&nbsp;</a></span>neon_normalize_float32_4_2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_normalize_float32_4_2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in_squared</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>ninfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="cpu_2kernels_2norm__layer_2generic_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    arm_compute::normalize_float&lt;float, 4, 2, false&gt;(window, in, in_squared, out, ninfo);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_n_e_normalization_layer_kernel_8cpp_source.xhtml#l00079">NENormalizationLayerKernel::configure()</a>.</p>

</div>
</div>
<a id="a4d1345afba54a2f89d324e7c9c0eb7af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d1345afba54a2f89d324e7c9c0eb7af">&#9670;&nbsp;</a></span>neon_q8_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_q8_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ade9fbd383266a15c5a4f149ff89bedba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade9fbd383266a15c5a4f149ff89bedba">&#9670;&nbsp;</a></span>neon_q8_pool3d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_q8_pool3d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool3d_2neon_2qasymm8_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="pool3d_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> poolingMxNxD_q8_neon_ndhwc&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a84bffd1c044a2ad84283a4c6a2e83cec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84bffd1c044a2ad84283a4c6a2e83cec">&#9670;&nbsp;</a></span>neon_q8_signed_pool3d()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_q8_signed_pool3d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool3d_2neon_2qasymm8__signed_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="pool3d_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> poolingMxNxD_q8_neon_ndhwc&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="afd810229385586c08de20cf832eac6b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd810229385586c08de20cf832eac6b4">&#9670;&nbsp;</a></span>neon_qasymm8_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = 16;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>            va       = vdupq_n_u8(<a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a(), qi_in));</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>            vb       = vdupq_n_u8(<a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b(), qi_in));</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>               a        = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a(), qi_in);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>               <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>        = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b(), qi_in);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>               const_0  = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(0.f, qi_in);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">qasymm8x16_t</a>            vconst_0 = vdupq_n_u8(const_0);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1 = vdupq_n_f32(1.f);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vconst_0_f32 = vdupq_n_f32(0);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#else  // #ifndef __aarch64__</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_inv_2      = vdupq_n_f32(0.5f);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_inv_sqrt_2 = vdupq_n_f32(0.70710678118f);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> float32x4_t va_f32 = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> float32x4_t vb_f32 = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       a_f32  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a();</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       b_f32  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_6_f32     = vdupq_n_f32(6.f);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_0_f32     = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_3_f32     = vdupq_n_f32(3.f);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_inv_6_f32 = vdupq_n_f32(0.166666667f);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">float</span>       s  = qi_in.scale / qi_out.scale;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">float</span>       o  = -qi_in.offset * s + qi_out.offset;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    float32x4_t vs = vdupq_n_f32(s);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    float32x4_t vo = vdupq_n_f32(o);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            wrapper::traits::neon_bitvector_t&lt;qasymm8_t, wrapper::traits::BitWidth::W128&gt; tmp;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::RELU)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    tmp = vmaxq_u8(vconst_0, vin);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    tmp = vmlaq_qasymm8&lt;RoundingPolicy::TO_NEAREST_UP&gt;(tmp, vs, vo);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    tmp = vminq_u8(va, vmaxq_u8(vconst_0, vin));</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    tmp = vmlaq_qasymm8&lt;RoundingPolicy::TO_NEAREST_UP&gt;(tmp, vs, vo);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    tmp = vminq_u8(va, vmaxq_u8(vb, vin));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    tmp = vmlaq_qasymm8&lt;RoundingPolicy::TO_NEAREST_UP&gt;(tmp, vs, vo);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#ifndef __aarch64__ // LUT-based implementation is used for aarch64 instead.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[0])))),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[1])))),</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[2])))),</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[3])))),</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    }};</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], vb_f32))),</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], vb_f32))),</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[2], vb_f32))),</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[3], vb_f32))),</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    }};</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#ifndef __aarch64__ // LUT-based implementation is used for aarch64 instead.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                            vin_deq.val[0],</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[0], const_3_f32))))),</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                            vin_deq.val[1],</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[1], const_3_f32))))),</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                            vin_deq.val[2],</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[2], const_3_f32))))),</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                            vin_deq.val[3],</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[3], const_3_f32))))),</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    }};</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    <span class="keyword">const</span> uint32x4x4_t pos_mask = {{</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[0], vconst_0_f32),</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[1], vconst_0_f32),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[2], vconst_0_f32),</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[3], vconst_0_f32),</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    }};</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[0], vin_deq.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[0])),</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[1], vin_deq.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[1])),</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[2], vin_deq.val[2], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[2])),</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[3], vin_deq.val[3], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[3])),</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    }};</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#else  // #ifndef __aarch64__</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::GELU)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0],</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                      <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_2,</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8a5bd58601c5ec1fb14709c6361dfe2f">wrapper::verf</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                                                vin_deq.val[0], const_inv_sqrt_2))))),</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1],</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                      <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_2,</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8a5bd58601c5ec1fb14709c6361dfe2f">wrapper::verf</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                                                vin_deq.val[1], const_inv_sqrt_2))))),</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[2],</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                      <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_2,</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8a5bd58601c5ec1fb14709c6361dfe2f">wrapper::verf</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                                                                vin_deq.val[2], const_inv_sqrt_2))))),</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[3],</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                      <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(const_inv_2,</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8a5bd58601c5ec1fb14709c6361dfe2f">wrapper::verf</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                                                vin_deq.val[3], const_inv_sqrt_2))))),</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    }};</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">vquantize</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> in  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a> tmp = 0;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::RELU)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    tmp = std::max(const_0, in);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    tmp = utility::clamp&lt;int32_t, qasymm8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(tmp * s + o));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    tmp = std::min(a, std::max(const_0, in));</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    tmp = utility::clamp&lt;int32_t, qasymm8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(tmp * s + o));</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                }</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    tmp = std::min(a, std::max(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, in));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    tmp = utility::clamp&lt;int32_t, qasymm8_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(tmp * s + o));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="preprocessor">#ifndef __aarch64__ // LUT-based implementation is used for aarch64 instead.</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    tmp_f       = 1.f / (1.f + std::exp(-tmp_f));</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                    tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    tmp_f       = a_f32 * std::tanh(b_f32 * tmp_f);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#ifndef __aarch64__ // LUT-based implementation is used for aarch64 instead.</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    tmp_f       = tmp_f * ((std::min(std::max((tmp_f + 3), 0.0f), 6.0f)) * 0.166666667f);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    tmp_f       = tmp_f &gt; 0 ? tmp_f : tmp_f * a_f32;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::GELU)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(in, qi_in);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    tmp         = tmp_f * 0.5f * (1.0f + std::erff(in / 1.41421356237f));</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    tmp         = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                *(output_ptr + x) = tmp;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        },</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00367">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00200">arm_compute::support::cpp11::lround()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00309">arm_compute::quantize_qasymm8()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">arm_compute::vdequantize()</a>, <a class="el" href="div_8h_source.xhtml#l00059">arm_compute::wrapper::vdiv()</a>, <a class="el" href="erf_8h_source.xhtml#l00042">arm_compute::wrapper::verf()</a>, <a class="el" href="exp_8h_source.xhtml#l00048">arm_compute::wrapper::vexpq()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00591">arm_compute::vquantize()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="tanh_8h_source.xhtml#l00041">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="aac40fc459862ae0050b89550bd76fbcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac40fc459862ae0050b89550bd76fbcc">&#9670;&nbsp;</a></span>neon_qasymm8_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_quantized&lt;op&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a8d4f41b679a97ce2334575643747ce4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d4f41b679a97ce2334575643747ce4b">&#9670;&nbsp;</a></span>neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac40fc459862ae0050b89550bd76fbcc">arm_compute::cpu::neon_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a388eb281a0ce14391d13509357acaec4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a388eb281a0ce14391d13509357acaec4">&#9670;&nbsp;</a></span>neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac40fc459862ae0050b89550bd76fbcc">arm_compute::cpu::neon_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a81dc0e97c7fc4e6f9f3c314d363adc2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81dc0e97c7fc4e6f9f3c314d363adc2d">&#9670;&nbsp;</a></span>neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac40fc459862ae0050b89550bd76fbcc">arm_compute::cpu::neon_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a07e6cb4195ebae7fb9269e80a4b999aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07e6cb4195ebae7fb9269e80a4b999aa">&#9670;&nbsp;</a></span>neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac40fc459862ae0050b89550bd76fbcc">arm_compute::cpu::neon_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2c5d7247dc71f1660fe47d037e4c5ad1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c5d7247dc71f1660fe47d037e4c5ad1">&#9670;&nbsp;</a></span>neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac40fc459862ae0050b89550bd76fbcc">arm_compute::cpu::neon_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afbfa0f3c9212b3d204c266482c99044c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbfa0f3c9212b3d204c266482c99044c">&#9670;&nbsp;</a></span>neon_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aac40fc459862ae0050b89550bd76fbcc">arm_compute::cpu::neon_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6a5b347d0d1e809d9aa97f3a3dac8183"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a5b347d0d1e809d9aa97f3a3dac8183">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op_quantized&lt;op&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a64d2added9373c602a94a47b277877dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64d2added9373c602a94a47b277877dd">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a033036e20d0a83aed4b59797a3742bf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a033036e20d0a83aed4b59797a3742bf0">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8676fc5b59d032093bad4bb3370bbabe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8676fc5b59d032093bad4bb3370bbabe">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4b57b753d548a5e51017a2ee6a650038"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b57b753d548a5e51017a2ee6a650038">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a68cc430ff9308337a5181f7287ddd770"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68cc430ff9308337a5181f7287ddd770">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aff0d75a6faa1681536f24798c0f6493c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff0d75a6faa1681536f24798c0f6493c">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac78be48c6f759c020fc1e7d08a67a2f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac78be48c6f759c020fc1e7d08a67a2f2">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4cfc15db6b93df949f1b62ff74a037f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cfc15db6b93df949f1b62ff74a037f1">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6a5b347d0d1e809d9aa97f3a3dac8183">arm_compute::cpu::neon_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a67087cab3d942db1430f86b509c22994"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67087cab3d942db1430f86b509c22994">&#9670;&nbsp;</a></span>neon_qasymm8_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(lut);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afd5617a6674f304d90561fecf9411b76">elementwise_op&lt;uint8_t&gt;</a>(in, out, window, op);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">elementwise_op&lt; uint8_t &gt;()</a>.</p>

</div>
</div>
<a id="a92e7e2b5ae1f89ff6c4191797700a41d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92e7e2b5ae1f89ff6c4191797700a41d">&#9670;&nbsp;</a></span>neon_qasymm8_meanstddevnorm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_meanstddevnorm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="meanstddevnorm_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00052">52</a> of file <a class="el" href="meanstddevnorm_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 16;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out        = output-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                   output_scale  = qi_out.scale;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                     output_offset = qi_out.offset;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    Iterator input_itr(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, win);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    Iterator output_itr(output, win);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       output_inv_scale = 1.0f / output_scale;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> float32x4_t quant_max_vec    = vdupq_n_f32(255.0f);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> float32x4_t quant_min_vec    = vdupq_n_f32(0.0f);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        win,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordtype">int</span>  x       = window_start_x;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(input_itr.ptr());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output_itr.ptr());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            uint32x4_t sum_vec    = vdupq_n_u32(0);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            uint32x4_t sum_sq_vec = vdupq_n_u32(0);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keyword">const</span> uint8x16_t data         = vld1q_u8(in_ptr + x);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                sum_vec                       = vaddq_u32(sum_vec, vpaddlq_u16(vpaddlq_u8(data)));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">const</span> uint16x8_t squares_low  = vmull_u8(vget_low_u8(data), vget_low_u8(data));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keyword">const</span> uint16x8_t squares_high = vmull_u8(vget_high_u8(data), vget_high_u8(data));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                sum_sq_vec = vaddq_u32(sum_sq_vec, vaddq_u32(vpaddlq_u16(squares_low), vpaddlq_u16(squares_high)));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            sum_vec         = vpaddq_u32(sum_vec, sum_vec);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            sum_vec         = vpaddq_u32(sum_vec, sum_vec);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            uint32_t sum    = vgetq_lane_u32(sum_vec, 0);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            sum_sq_vec      = vpaddq_u32(sum_sq_vec, sum_sq_vec);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            sum_sq_vec      = vpaddq_u32(sum_sq_vec, sum_sq_vec);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            uint32_t sum_sq = vgetq_lane_u32(sum_sq_vec, 0);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#elif __arm__ // #ifdef __aarch64__</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            uint32_t sum = vgetq_lane_u32(sum_vec, 0) + vgetq_lane_u32(sum_vec, 1) + vgetq_lane_u32(sum_vec, 2) +</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                           vgetq_lane_u32(sum_vec, 3);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            uint32_t sum_sq = vgetq_lane_u32(sum_sq_vec, 0) + vgetq_lane_u32(sum_sq_vec, 1) +</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                              vgetq_lane_u32(sum_sq_vec, 2) + vgetq_lane_u32(sum_sq_vec, 3);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">#endif        // #ifdef __aarch64__</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keyword">auto</span> data = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(*(in_ptr + x));</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                sum += data;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                sum_sq += (data * data);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> mean = (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sum) / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0)));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span> var =</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sum_sq) / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(0))) - (mean * mean);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">float</span>       stdev_inv = 1.0f / sqrtf(var + <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">const</span> float32x4_t v_scale   = vdupq_n_f32(stdev_inv * output_inv_scale);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">const</span> float32x4_t v_offset  = vdupq_n_f32(-mean * stdev_inv * output_inv_scale + output_offset);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">for</span> (x = window_start_x; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keyword">const</span> uint8x16_t data = vld1q_u8(in_ptr + x);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                float32x4_t      db1  = vcvtq_f32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_low_u8(data)))));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                float32x4_t      db2  = vcvtq_f32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_low_u8(data)))));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                float32x4_t      db3  = vcvtq_f32_u32(vmovl_u16(vget_low_u16(vmovl_u8(vget_high_u8(data)))));</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                float32x4_t      db4  = vcvtq_f32_u32(vmovl_u16(vget_high_u16(vmovl_u8(vget_high_u8(data)))));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                db1 = clamp_v4f32(vaddq_f32(vmulq_f32(db1, v_scale), v_offset), quant_min_vec, quant_max_vec);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                db2 = clamp_v4f32(vaddq_f32(vmulq_f32(db2, v_scale), v_offset), quant_min_vec, quant_max_vec);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                db3 = clamp_v4f32(vaddq_f32(vmulq_f32(db3, v_scale), v_offset), quant_min_vec, quant_max_vec);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                db4 = clamp_v4f32(vaddq_f32(vmulq_f32(db4, v_scale), v_offset), quant_min_vec, quant_max_vec);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keyword">const</span> uint8x16_t out = fuse_shorts_u16(fuse_words_f32(db1, db2), fuse_words_f32(db3, db4));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                vst1q_u8(out_ptr + x, out);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keyword">auto</span>          data = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a><span class="keyword">&gt;</span>(*(in_ptr + x));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keyword">const</span> uint8_t res =</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    data * (stdev_inv * output_inv_scale) + (-mean * stdev_inv * output_inv_scale + output_offset);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                *(out_ptr + x) = res;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        },</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        input_itr, output_itr);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="aa0964146baaed5ec1b37f112e6f5d30c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0964146baaed5ec1b37f112e6f5d30c">&#9670;&nbsp;</a></span>neon_qasymm8_signed_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_signed_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = 16;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>     va       = vdupq_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a(), qi_in));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>     vb       = vdupq_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b(), qi_in));</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>        a        = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a(), qi_in);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>        = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b(), qi_in);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>        const_0  = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(0.f, qi_in);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">qasymm8x16_signed_t</a>     vconst_0 = vdupq_n_s8(const_0);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vconst_1     = vdupq_n_f32(1.f);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vconst_0_f32 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">const</span> float32x4_t va_f32          = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">const</span> float32x4_t vb_f32          = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       a_f32           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       b_f32           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_6_f32     = vdupq_n_f32(6.f);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_0_f32     = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_3_f32     = vdupq_n_f32(3.f);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>        const_inv_6_f32 = vdupq_n_f32(0.166666667f);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">float</span>       s  = qi_in.scale / qi_out.scale;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">float</span>       o  = -qi_in.offset * s + qi_out.offset;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    float32x4_t vs = vdupq_n_f32(s);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    float32x4_t vo = vdupq_n_f32(o);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            wrapper::traits::neon_bitvector_t&lt;qasymm8_signed_t, wrapper::traits::BitWidth::W128&gt; tmp;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::RELU)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    tmp = vmaxq_s8(vconst_0, vin);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    tmp = vmlaq_qasymm8_signed&lt;RoundingPolicy::TO_NEAREST_UP&gt;(tmp, vs, vo);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    tmp = vminq_s8(va, vmaxq_s8(vconst_0, vin));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    tmp = vmlaq_qasymm8_signed&lt;RoundingPolicy::TO_NEAREST_UP&gt;(tmp, vs, vo);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    tmp = vminq_s8(va, vmaxq_s8(vb, vin));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    tmp = vmlaq_qasymm8_signed&lt;RoundingPolicy::TO_NEAREST_UP&gt;(tmp, vs, vo);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">#ifndef __aarch64__ // LUT-based implementation is used for aarch64 instead.</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[0])))),</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[1])))),</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[2])))),</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[3])))),</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    }};</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], vb_f32))),</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], vb_f32))),</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[2], vb_f32))),</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[3], vb_f32))),</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    }};</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                            vin_deq.val[0],</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[0], const_3_f32))))),</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                            vin_deq.val[1],</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[1], const_3_f32))))),</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                            vin_deq.val[2],</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[2], const_3_f32))))),</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                            vin_deq.val[3],</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                const_inv_6_f32,</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(const_6_f32,</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                              <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(const_0_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vin_deq.val[3], const_3_f32))))),</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    }};</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">vdequantize</a>(vin, qi_in);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    <span class="keyword">const</span> uint32x4x4_t pos_mask = {{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        wrapper::vcgtz(vin_deq.val[0]),</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        wrapper::vcgtz(vin_deq.val[1]),</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                        wrapper::vcgtz(vin_deq.val[2]),</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        wrapper::vcgtz(vin_deq.val[3]),</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    }};</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    <span class="keyword">const</span> uint32x4x4_t pos_mask = {{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[0], vconst_0_f32),</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[1], vconst_0_f32),</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[2], vconst_0_f32),</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(vin_deq.val[3], vconst_0_f32),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    }};</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keyword">const</span> float32x4x4_t tmp_dep = {{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[0], vin_deq.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[0])),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[1], vin_deq.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[1])),</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[2], vin_deq.val[2], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[2])),</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(pos_mask.val[3], vin_deq.val[3], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, vin_deq.val[3])),</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    }};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">vquantize_signed</a>(tmp_dep, qi_out);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> in  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a> tmp = 0;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::RELU)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    tmp = std::max(const_0, in);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    tmp = utility::clamp&lt;int32_t, qasymm8_signed_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(tmp * s + o));</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    tmp = std::min(a, std::max(const_0, in));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    tmp = utility::clamp&lt;int32_t, qasymm8_signed_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(tmp * s + o));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    tmp = std::min(a, std::max(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, in));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    tmp = utility::clamp&lt;int32_t, qasymm8_signed_t&gt;(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">support::cpp11::lround</a>(tmp * s + o));</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#ifndef __aarch64__ // LUT-based implementation is used for aarch64 instead.</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    tmp_f       = 1.f / (1.f + std::exp(-tmp_f));</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    tmp_f       = a_f32 * std::tanh(b_f32 * tmp_f);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    tmp_f       = tmp_f * ((std::min(std::max((tmp_f + 3), 0.0f), 6.0f)) * 0.166666667f);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(in, qi_in);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    tmp_f       = tmp_f &gt; 0 ? tmp_f : tmp_f * a_f32;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    tmp         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                *(output_ptr + x) = tmp;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        },</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00380">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_toolchain_support_8h_source.xhtml#l00200">arm_compute::support::cpp11::lround()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00323">arm_compute::quantize_qasymm8_signed()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00410">arm_compute::vdequantize()</a>, <a class="el" href="div_8h_source.xhtml#l00059">arm_compute::wrapper::vdiv()</a>, <a class="el" href="exp_8h_source.xhtml#l00048">arm_compute::wrapper::vexpq()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="_n_e_asymm_8h_source.xhtml#l00616">arm_compute::vquantize_signed()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="tanh_8h_source.xhtml#l00041">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="ac6ebb6108697495178fef6c9ea5e68e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6ebb6108697495178fef6c9ea5e68e3">&#9670;&nbsp;</a></span>neon_qasymm8_signed_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_signed_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_quantized_signed&lt;op&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a565883b4bab624f86677dfc0b9743ee8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a565883b4bab624f86677dfc0b9743ee8">&#9670;&nbsp;</a></span>neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6ebb6108697495178fef6c9ea5e68e3">arm_compute::cpu::neon_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af728cffe5323591ea906d8a7631e0aa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af728cffe5323591ea906d8a7631e0aa6">&#9670;&nbsp;</a></span>neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6ebb6108697495178fef6c9ea5e68e3">arm_compute::cpu::neon_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adaeb4b0fb3f6dfd02917c3ae02ebd585"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaeb4b0fb3f6dfd02917c3ae02ebd585">&#9670;&nbsp;</a></span>neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6ebb6108697495178fef6c9ea5e68e3">arm_compute::cpu::neon_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a176226aec58accc8ca6c259ab5f39e84"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a176226aec58accc8ca6c259ab5f39e84">&#9670;&nbsp;</a></span>neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6ebb6108697495178fef6c9ea5e68e3">arm_compute::cpu::neon_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a514549fdb57a523370852649fa3b0d02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a514549fdb57a523370852649fa3b0d02">&#9670;&nbsp;</a></span>neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6ebb6108697495178fef6c9ea5e68e3">arm_compute::cpu::neon_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a33b7289c3174e0c0539f65674b44b75e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33b7289c3174e0c0539f65674b44b75e">&#9670;&nbsp;</a></span>neon_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ac6ebb6108697495178fef6c9ea5e68e3">arm_compute::cpu::neon_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8ec4688c02d3bdc86bdaa5989e723acc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ec4688c02d3bdc86bdaa5989e723acc">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_signed_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op_quantized_signed&lt;op&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5d81fc28789c483f9292cd022b5bfc51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d81fc28789c483f9292cd022b5bfc51">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a37197ac33ccd55bb904d8a026e255723"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37197ac33ccd55bb904d8a026e255723">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa5bf451ee9badec697229d16331f1b13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5bf451ee9badec697229d16331f1b13">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a639b777d0028bfbede16f8c86930c5c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a639b777d0028bfbede16f8c86930c5c5">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a45b49bdc127b618fc3f1d452f9f288b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45b49bdc127b618fc3f1d452f9f288b2">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad5032a649ca660bd27fc8a86dae8d091"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5032a649ca660bd27fc8a86dae8d091">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afeee9aa63f523e914eb64ab97d45dbc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afeee9aa63f523e914eb64ab97d45dbc9">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac0f5d1b84b8b8820ed08897aab1b96e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0f5d1b84b8b8820ed08897aab1b96e4">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8ec4688c02d3bdc86bdaa5989e723acc">arm_compute::cpu::neon_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1d72c7ec80974fef6b77f0821b66881a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d72c7ec80974fef6b77f0821b66881a">&#9670;&nbsp;</a></span>neon_qasymm8_signed_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_signed_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(lut);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4d141bd8c7a674e096eb68492c1e21dd">elementwise_op&lt;int8_t&gt;</a>(in, out, window, op);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">elementwise_op&lt; int8_t &gt;()</a>.</p>

</div>
</div>
<a id="a6e779d4c2dd2bcc8940e5a51c7d10c53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e779d4c2dd2bcc8940e5a51c7d10c53">&#9670;&nbsp;</a></span>neon_qasymm8_signed_softmax()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_signed_softmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="softmax_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (axis == 0)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">return</span> neon_softmax_x_quantized&lt;qasymm8_signed_t, IS_LOG&gt;(in, tmp, out, beta, axis, window);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span> neon_softmax_non_x_quantized&lt;qasymm8_signed_t, IS_LOG&gt;(in, tmp, out, beta, axis, window);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac2759e790417f0e5b27642ab37abebc5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2759e790417f0e5b27642ab37abebc5">&#9670;&nbsp;</a></span>neon_qasymm8_signed_softmax&lt; false &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6e779d4c2dd2bcc8940e5a51c7d10c53">arm_compute::cpu::neon_qasymm8_signed_softmax</a>&lt; false &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a94c803cbbf07ea64c979844cc4b55378"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94c803cbbf07ea64c979844cc4b55378">&#9670;&nbsp;</a></span>neon_qasymm8_signed_softmax&lt; true &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6e779d4c2dd2bcc8940e5a51c7d10c53">arm_compute::cpu::neon_qasymm8_signed_softmax</a>&lt; true &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad23b9b4c1dd4bcb03d6894e878e64fd2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad23b9b4c1dd4bcb03d6894e878e64fd2">&#9670;&nbsp;</a></span>neon_qasymm8_signed_to_fp16_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_qasymm8_signed_to_fp16_cast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6baa57fb22eece212466b7fce7e74d32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6baa57fb22eece212466b7fce7e74d32">&#9670;&nbsp;</a></span>neon_qasymm8_softmax()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qasymm8_softmax </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="softmax_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span> (axis == 0)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">return</span> neon_softmax_x_quantized&lt;qasymm8_t, IS_LOG&gt;(in, tmp, out, beta, axis, window);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span> neon_softmax_non_x_quantized&lt;qasymm8_t, IS_LOG&gt;(in, tmp, out, beta, axis, window);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="affbf59ea9c533b60cd6ec14651742a32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affbf59ea9c533b60cd6ec14651742a32">&#9670;&nbsp;</a></span>neon_qasymm8_softmax&lt; false &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6baa57fb22eece212466b7fce7e74d32">arm_compute::cpu::neon_qasymm8_softmax</a>&lt; false &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a083ad2760e0a9825a117bacb77a31cff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a083ad2760e0a9825a117bacb77a31cff">&#9670;&nbsp;</a></span>neon_qasymm8_softmax&lt; true &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a6baa57fb22eece212466b7fce7e74d32">arm_compute::cpu::neon_qasymm8_softmax</a>&lt; true &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5184f842959f2ed8c15c3142491c6c28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5184f842959f2ed8c15c3142491c6c28">&#9670;&nbsp;</a></span>neon_qp8_qs8_deptwiseconv2dnative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qp8_qs8_deptwiseconv2dnative </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">run_depthwise_quanitized8bit&lt;int8_t, int8_t&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, has_biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="working__space_8hpp_source.xhtml#l00322">bias</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="af901c81c20bdb1692739af6577bea29d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af901c81c20bdb1692739af6577bea29d">&#9670;&nbsp;</a></span>neon_qp8_qu8_deptwiseconv2dnative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qp8_qu8_deptwiseconv2dnative </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a22c00c0ee5bab5833057b869cfbbf3bd">run_depthwise_quanitized8bit&lt;uint8_t, int8_t&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, has_biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="working__space_8hpp_source.xhtml#l00322">bias</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a22c00c0ee5bab5833057b869cfbbf3bd">run_depthwise_quanitized8bit&lt; uint8_t, int8_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="acb3a1d2cbd838058e9f2ec370301b6da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb3a1d2cbd838058e9f2ec370301b6da">&#9670;&nbsp;</a></span>neon_qs8_deptwiseconv2dnative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qs8_deptwiseconv2dnative </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">run_depthwise_quanitized8bit&lt;int8_t, int8_t&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, has_biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="working__space_8hpp_source.xhtml#l00322">bias</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="ae90d41b1f4a8a71813f639d9aa70c96b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae90d41b1f4a8a71813f639d9aa70c96b">&#9670;&nbsp;</a></span>neon_qs8_maxunpooling()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qs8_maxunpooling </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="maxunpool_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="maxunpool_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> max_unpooling&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, indices, output, window);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a90df037a4cda55d9fe22a6f32821306c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90df037a4cda55d9fe22a6f32821306c">&#9670;&nbsp;</a></span>neon_qs8_roialign()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qs8_roialign </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rois</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="roialign_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="roialign_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> roi_align&lt;int8_t, uint16_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, rois, pool_info, window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="ad9d98dcdc80fe0cd05822b4c4464e895"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9d98dcdc80fe0cd05822b4c4464e895">&#9670;&nbsp;</a></span>neon_qsymm16_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qsymm16_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00042">42</a> of file <a class="el" href="activation_2generic_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    constexpr <span class="keywordtype">int</span>                                 window_step_x  = 8;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1 = vdupq_n_f32(1.f);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> float32x4_t             va_f32   = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> float32x4_t             vb_f32   = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                   a_f32    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a();</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>                   b_f32    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            wrapper::traits::neon_bitvector_t&lt;qsymm16_t, wrapper::traits::BitWidth::W128&gt; tmp;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tmp);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">vdequantize_int16</a>(vin, qi_in.scale);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keyword">const</span> float32x4x2_t tmp_dep = {{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[0])))),</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vconst_1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">wrapper::vneg</a>(vin_deq.val[1])))),</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    }};</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">vquantize_int16</a>(tmp_dep, qi_out.scale);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">vdequantize_int16</a>(vin, qi_in.scale);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="keyword">const</span> float32x4x2_t tmp_dep = {{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[0], vb_f32))),</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">wrapper::vtanh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vin_deq.val[1], vb_f32))),</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    }};</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">vquantize_int16</a>(tmp_dep, qi_out.scale);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = <a class="code" href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">vdequantize_int16</a>(vin, qi_in.scale);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keyword">const</span> float32x4x2_t tmp_dep = {{<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vb_f32, vin_deq.val[0])),</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(va_f32, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vb_f32, vin_deq.val[1]))}};</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    tmp = <a class="code" href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">vquantize_int16</a>(tmp_dep, qi_out.scale);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, tmp);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> in  = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> *<span class="keyword">&gt;</span>(input_ptr + x));</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <a class="code" href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">qsymm16_t</a> tmp = 0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(in, qi_in.scale);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    tmp_f       = 1.f / (1.f + std::exp(-tmp_f));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    tmp         = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(in, qi_in.scale);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    tmp_f       = a_f32 * std::tanh(b_f32 * tmp_f);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    tmp         = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <span class="keywordtype">float</span> tmp_f = <a class="code" href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">dequantize_qsymm16</a>(in, qi_in.scale);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    tmp_f       = std::min&lt;float&gt;(a_f32, std::max&lt;float&gt;(b_f32, tmp_f));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    tmp         = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(tmp_f, qi_out);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                *(output_ptr + x) = tmp;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        },</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00484">arm_compute::dequantize_qsymm16()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00468">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="_n_e_symm_8h_source.xhtml#l00135">arm_compute::vdequantize_int16()</a>, <a class="el" href="div_8h_source.xhtml#l00059">arm_compute::wrapper::vdiv()</a>, <a class="el" href="exp_8h_source.xhtml#l00048">arm_compute::wrapper::vexpq()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="min_8h_source.xhtml#l00039">arm_compute::wrapper::vmin()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="neg_8h_source.xhtml#l00039">arm_compute::wrapper::vneg()</a>, <a class="el" href="_n_e_symm_8h_source.xhtml#l00150">arm_compute::vquantize_int16()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="tanh_8h_source.xhtml#l00041">arm_compute::wrapper::vtanh()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a4805585e3b72dbae02d2a7dd600860ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4805585e3b72dbae02d2a7dd600860ec">&#9670;&nbsp;</a></span>neon_qu16_boundingboxtransform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qu16_boundingboxtransform </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>pred_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a>&#160;</td>
          <td class="paramname"><em>bbinfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="boundingboxtransform_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="boundingboxtransform_2generic_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aea3a0fb40df47ae7c0b421618d4e35e6">bounding_box_transform_qsymm16</a>(boxes, pred_boxes, deltas, bbinfo, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00032">bounding_box_transform_qsymm16()</a>.</p>

</div>
</div>
<a id="aa9e95678ec007131159995d2f238636a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9e95678ec007131159995d2f238636a">&#9670;&nbsp;</a></span>neon_qu16_computeallanchors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qu16_computeallanchors </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>all_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_compute_anchors_info.xhtml">ComputeAnchorsInfo</a>&#160;</td>
          <td class="paramname"><em>anchors_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="genproposals_2generic_2neon_2qsymm16_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="genproposals_2generic_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aef4214cfa8378eaebdbd1d3dc139f370">compute_all_anchors_qasymm16</a>(anchors, all_anchors, anchors_info, window);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00031">compute_all_anchors_qasymm16()</a>.</p>

</div>
</div>
<a id="a622fe0b26eed0b8ba28255bfe7efacfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a622fe0b26eed0b8ba28255bfe7efacfc">&#9670;&nbsp;</a></span>neon_qu8_deptwiseconv2dnative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qu8_deptwiseconv2dnative </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a7e11bb008b174952651f4a9946adc1a4">run_depthwise_quanitized8bit&lt;uint8_t, uint8_t&gt;</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window, has_biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="working__space_8hpp_source.xhtml#l00322">bias</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a7e11bb008b174952651f4a9946adc1a4">run_depthwise_quanitized8bit&lt; uint8_t, uint8_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a380df8a1a376c3a1e1e1d3db96763518"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a380df8a1a376c3a1e1e1d3db96763518">&#9670;&nbsp;</a></span>neon_qu8_maxunpooling()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qu8_maxunpooling </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>indices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="maxunpool_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="maxunpool_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> max_unpooling&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, indices, output, window);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a3379ba3f9c8e44bc3025c938591f2493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3379ba3f9c8e44bc3025c938591f2493">&#9670;&nbsp;</a></span>neon_qu8_roialign()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_qu8_roialign </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rois</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="roialign_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00029">29</a> of file <a class="el" href="roialign_2generic_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> roi_align&lt;uint8_t, uint16_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, rois, pool_info, window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a9b0bf2d3bb1a9d2c0ea9a052136aaed4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b0bf2d3bb1a9d2c0ea9a052136aaed4">&#9670;&nbsp;</a></span>neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="range_2generic_2neon_2impl_8h_source.xhtml#l00038">38</a> of file <a class="el" href="range_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector&lt;T, wrapper::traits::BitWidth::W128&gt;::tag_type;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> step_vec  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>), ExactTagType{});</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> start_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(start), ExactTagType{});</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">auto</span>       id_vec    = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.f), ExactTagType{});</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x  = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    Window win{window};</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Iterator output_it(output, win);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        win,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordtype">int</span>        x       = window_start_x;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> count = 0; count &lt; window_step_x; ++count)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    id_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(x + count), id_vec, count);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="comment">// start + step * id</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> res_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(start_vec, id_vec, step_vec);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, res_vec);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> res = start + x * <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                *(out_ptr + x) = res;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        },</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        output_it);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="setlane_8h_source.xhtml#l00091">arm_compute::wrapper::vsetlane()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a8b0752a4d54894e23581ff38b15aada9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b0752a4d54894e23581ff38b15aada9">&#9670;&nbsp;</a></span>neon_s16_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s16_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml#l00139">139</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_16&lt;op, int16_t, int16x8_t&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa813ea436e922c1658d5040583a67439"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa813ea436e922c1658d5040583a67439">&#9670;&nbsp;</a></span>neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">arm_compute::cpu::neon_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a52f14392b48a6b49e4c4ba59a0d919cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52f14392b48a6b49e4c4ba59a0d919cc">&#9670;&nbsp;</a></span>neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">arm_compute::cpu::neon_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6ef4712ef5c670d134c366a36cd7a5f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ef4712ef5c670d134c366a36cd7a5f5">&#9670;&nbsp;</a></span>neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">arm_compute::cpu::neon_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e76328d3f2d1d0757d9c5d05cbf8466"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e76328d3f2d1d0757d9c5d05cbf8466">&#9670;&nbsp;</a></span>neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">arm_compute::cpu::neon_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a764259e9c2bb12070806136a3f59d429"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a764259e9c2bb12070806136a3f59d429">&#9670;&nbsp;</a></span>neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">arm_compute::cpu::neon_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a45c86ddbd5f40d0e0d6875fce3279702"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45c86ddbd5f40d0e0d6875fce3279702">&#9670;&nbsp;</a></span>neon_s16_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8b0752a4d54894e23581ff38b15aada9">arm_compute::cpu::neon_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0469bd9f1f5a4df12bcb7ff3cdbb6a43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s16_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op&lt;op, typename wrapper::traits::neon_vector&lt;int16_t, 8&gt;&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a63574b05c48d24c551186e2e581dbc61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63574b05c48d24c551186e2e581dbc61">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a540ffb4e984eb7515c23f7de1a365076"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a540ffb4e984eb7515c23f7de1a365076">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0f012f2d513566b6c9c8a54891dacede"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f012f2d513566b6c9c8a54891dacede">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a936e5fd5f8904fce51155d450165e012"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a936e5fd5f8904fce51155d450165e012">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af786536ae3569e727a983b444ac78bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af786536ae3569e727a983b444ac78bc8">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af1554298a63c25c943d3964490a2f571"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1554298a63c25c943d3964490a2f571">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a97b8783af088791994b2412cafde8944"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97b8783af088791994b2412cafde8944">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa75e9d50ad6be3295188f9349c934d39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa75e9d50ad6be3295188f9349c934d39">&#9670;&nbsp;</a></span>neon_s16_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a0469bd9f1f5a4df12bcb7ff3cdbb6a43">arm_compute::cpu::neon_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a01d5234b292775035a018b7843f2d3b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01d5234b292775035a018b7843f2d3b2">&#9670;&nbsp;</a></span>neon_s16_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s16_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">return</span> select_op_not_same_rank&lt;int16_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a60b481be9c9285daa60221f1e0f7440a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60b481be9c9285daa60221f1e0f7440a">&#9670;&nbsp;</a></span>neon_s16_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s16_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> select_op_16&lt;int16_t, uint16x8_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a8109015040dabe0728f37ebf7facf3df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8109015040dabe0728f37ebf7facf3df">&#9670;&nbsp;</a></span>neon_s32_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s32_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml#l00169">169</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_32&lt;op, int32_t, int32x4_t&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac20b0bcbe2d5163a9a70e8d84b2effbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac20b0bcbe2d5163a9a70e8d84b2effbb">&#9670;&nbsp;</a></span>neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">arm_compute::cpu::neon_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adeae56332e60300e0cb61c540fd40d3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adeae56332e60300e0cb61c540fd40d3f">&#9670;&nbsp;</a></span>neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">arm_compute::cpu::neon_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4cb6e822641c2d1ba5249dc9966e2418"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cb6e822641c2d1ba5249dc9966e2418">&#9670;&nbsp;</a></span>neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">arm_compute::cpu::neon_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae14e2d1aeaa5ee1f7392efd1b0fcc40e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae14e2d1aeaa5ee1f7392efd1b0fcc40e">&#9670;&nbsp;</a></span>neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">arm_compute::cpu::neon_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abe8e18cc7c50f2a571de0958cdc6bf9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe8e18cc7c50f2a571de0958cdc6bf9e">&#9670;&nbsp;</a></span>neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">arm_compute::cpu::neon_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa2d90675d2c2470f2aafc2bed01621d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2d90675d2c2470f2aafc2bed01621d0">&#9670;&nbsp;</a></span>neon_s32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8109015040dabe0728f37ebf7facf3df">arm_compute::cpu::neon_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a80f249016dbcc431fa33089ec6fadd4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80f249016dbcc431fa33089ec6fadd4e">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s32_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> elementwise_arithm_op&lt;op, typename wrapper::traits::neon_vector&lt;int32_t, 4&gt;&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a49b8ebb4367a9d5b49a1dccbf1111e75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49b8ebb4367a9d5b49a1dccbf1111e75">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa7024c326dd6dbc4a1ed84afdae251e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7024c326dd6dbc4a1ed84afdae251e7">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acbb27906986fe741d69a2f64ad7e6ae0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbb27906986fe741d69a2f64ad7e6ae0">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a933845a7603c8c4295d2df3f885db306"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a933845a7603c8c4295d2df3f885db306">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acb06f70b91a8f81b90bd80426d795d3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb06f70b91a8f81b90bd80426d795d3a">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a35f4e9d1fdbc3b7c270ac2c1e155619a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35f4e9d1fdbc3b7c270ac2c1e155619a">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adf1dfa31b7a48f836c5ee7bbc52f7cc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf1dfa31b7a48f836c5ee7bbc52f7cc4">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0f1fdb9c9d8b0aac643147d41a5b9c04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f1fdb9c9d8b0aac643147d41a5b9c04">&#9670;&nbsp;</a></span>neon_s32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a80f249016dbcc431fa33089ec6fadd4e">arm_compute::cpu::neon_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a696953a52bd2b684ca3b324a739091ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a696953a52bd2b684ca3b324a739091ec">&#9670;&nbsp;</a></span>neon_s32_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s32_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2neon_2integer_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="elementwise__unary_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(lut);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> elementwise_op&lt;int32_t&gt;(in, out, window, op);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>.</p>

</div>
</div>
<a id="a0a569dfb122469904884d875fc75efc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a569dfb122469904884d875fc75efc9">&#9670;&nbsp;</a></span>neon_s32_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s32_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> select_op_not_same_rank&lt;int32_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa9e21306be38f9b98e4ef4f830c2799b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9e21306be38f9b98e4ef4f830c2799b">&#9670;&nbsp;</a></span>neon_s32_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s32_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> select_op_32&lt;int32_t, uint32x4_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad0a19bad967040b76b3356cf5cd43497"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0a19bad967040b76b3356cf5cd43497">&#9670;&nbsp;</a></span>neon_s32_to_fp16_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_s32_to_fp16_cast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acb9f2796ed654c5f01cc81751b6c3ace"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb9f2796ed654c5f01cc81751b6c3ace">&#9670;&nbsp;</a></span>neon_s8_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s8_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> select_op_not_same_rank&lt;int8_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6fccbafb6dd43e52f82ac6e046ca54e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fccbafb6dd43e52f82ac6e046ca54e8">&#9670;&nbsp;</a></span>neon_s8_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_s8_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">return</span> select_op_8&lt;int8_t, uint8x16_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa2bcab3c2f23155b736d39ac3c43b073"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2bcab3c2f23155b736d39ac3c43b073">&#9670;&nbsp;</a></span>neon_softmax_non_x_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_softmax_non_x_float </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2neon_2impl_8h_source.xhtml#l00233">233</a> of file <a class="el" href="softmax_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tmp);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    Iterator in_it(in, window);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    Iterator out_it(out, window);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>         beta_vec        = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(beta), ExactTagType{});</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    constexpr <span class="keywordtype">int</span>      vec_size        = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">const</span> ITensorInfo *in_info         = in-&gt;info();</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> ITensorInfo *out_info        = out-&gt;info();</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          x_width         = in_info-&gt;valid_region().shape.x();</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> in_axis_stride  = in_info-&gt;strides_in_bytes()[axis];</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> out_axis_stride = out_info-&gt;strides_in_bytes()[axis];</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          axis_width      = in_info-&gt;dimension(axis);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        window,</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;winCoords)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> vector_exceeds_bounds = (winCoords[0] + vec_size) &gt; x_width;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr  = in_it.ptr();</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            uint8_t       *out_ptr = out_it.ptr();</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="comment">// Init max value</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(support::cpp11::lowest&lt;T&gt;(), ExactTagType{});</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="comment">/* Compute Max */</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> current_value =</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>((i * in_axis_stride) + in_ptr));</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vec_max, current_value);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> base_ptr_in = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>((i * in_axis_stride) + in_ptr);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        <span class="keywordtype">int</span>            j           = 0;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                        <span class="keywordflow">for</span> (; j &lt; (x_width - winCoords[0]); ++j)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> current_value = *(base_ptr_in + j);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                            vec_max[j]               = std::max(vec_max[j], current_value);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            } <span class="comment">// compute max</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keyword">auto</span> vec_sum_transformed = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keyword">auto</span> vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="keyword">auto</span> vec_sum = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vec_one = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1), ExactTagType{});</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    <span class="comment">/* Loop over row and compute exponentials and sum */</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                        vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>((i * in_axis_stride) + in_ptr));</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(vec_elements, vec_max);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                        {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                            vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_elements, beta_vec);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                            vec_sum      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vec_sum, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(vec_elements));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_elements, beta_vec));</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                            vec_sum      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vec_sum, vec_elements);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                        }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>((i * out_axis_stride) + out_ptr), vec_elements);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                    }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                    <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    {</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        vec_sum_transformed = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_one, vec_sum);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                    }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                        vec_sum_transformed = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> base_ptr_in  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>((i * in_axis_stride) + in_ptr);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                        T *<span class="keyword">const</span>       base_ptr_out = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>((i * out_axis_stride) + out_ptr);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                        <span class="keywordtype">int</span>            j            = 0;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        <span class="keywordflow">for</span> (; j &lt; (x_width - winCoords[0]); ++j)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                        {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                            vec_elements[j] = *(base_ptr_in + j);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                            vec_elements[j] -= vec_max[j];</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                            <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                vec_elements[j] *= beta;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                vec_sum[j] += std::exp(vec_elements[j]);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                            {</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                vec_elements[j] = std::exp(vec_elements[j] * beta);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                vec_sum[j] += vec_elements[j];</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                            }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                            *(base_ptr_out + j) = vec_elements[j];</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                        }</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    <span class="keywordtype">int</span> j = 0;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    <span class="keywordflow">for</span> (; j &lt; (x_width - winCoords[0]); ++j)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                            vec_sum_transformed[j] = 1 / vec_sum[j];</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                        {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                            vec_sum_transformed[j] = std::log(vec_sum[j]);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                        }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            } <span class="comment">// Compute exponentials and sum</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    <span class="comment">/* Loop over row and compute softmax */</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                        T *<span class="keyword">const</span> base_ptr_out = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>((i * out_axis_stride) + out_ptr);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                        <span class="keyword">auto</span>     vec_in       = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(base_ptr_out);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                        {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(base_ptr_out, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(vec_in, vec_sum_transformed));</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                        }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                        {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(base_ptr_out, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_in, vec_sum_transformed));</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        T *<span class="keyword">const</span> base_ptr_out = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>((i * out_axis_stride) + out_ptr);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                        <span class="keywordtype">int</span>      j            = 0;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                        <span class="keywordflow">for</span> (; j &lt; (x_width - winCoords[0]); ++j)</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                        {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                            <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                            {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                *(base_ptr_out + j) -= vec_sum_transformed[j];</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                            }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                            {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                *(base_ptr_out + j) *= vec_sum_transformed[j];</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                            }</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                        }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            } <span class="comment">// Normalize exponentials</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        },</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        in_it, out_it);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, <a class="el" href="div_8h_source.xhtml#l00059">arm_compute::wrapper::vdiv()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="exp_8h_source.xhtml#l00048">arm_compute::wrapper::vexpq()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00048">arm_compute::wrapper::vlog()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>.</p>

</div>
</div>
<a id="a9021da1d85f0769fe8304a4004d52b36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9021da1d85f0769fe8304a4004d52b36">&#9670;&nbsp;</a></span>neon_softmax_non_x_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_softmax_non_x_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00255">255</a> of file <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    static_assert(std::is_same&lt;T, qasymm8_t&gt;::value || std::is_same&lt;T, qasymm8_signed_t&gt;::value,</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                  <span class="stringliteral">&quot;quantized type should be either qasymm8_t or qasymm8_signed_t.&quot;</span>);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       scale_beta     = -beta * in-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">const</span> float32x4_t scale_beta_vec = vdupq_n_f32(scale_beta);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    Iterator in_it(in, window);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    Iterator out_it(out, window);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    constexpr <span class="keywordtype">int</span>      vec_size        = 16;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">const</span> ITensorInfo *in_info         = in-&gt;info();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keyword">const</span> ITensorInfo *out_info        = out-&gt;info();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          x_width         = in_info-&gt;valid_region().shape.x();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          in_axis_stride  = in_info-&gt;strides_in_bytes()[axis];</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          out_axis_stride = out_info-&gt;strides_in_bytes()[axis];</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          tmp_axis_stride = in_axis_stride;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          axis_width      = in_info-&gt;dimension(axis);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>          end_actual      = std::min(window[0].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), x_width);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        window,</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;winCoords)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">bool</span> vector_exceeds_bounds = ((winCoords[0] + vec_size) &gt; end_actual);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordtype">int</span> num_remaining         = (end_actual - winCoords[0]);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordtype">int</span> num_remaining_full    = num_remaining / 4;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordtype">int</span> num_remaining_partial = num_remaining % 4;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr  = in_it.ptr();</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            uint8_t       *out_ptr = out_it.ptr();</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            uint8_t       *tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(support::cpp11::lowest&lt;T&gt;(), ExactTagType{});</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="comment">/* Compute Max */</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> current_value =</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr));</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                        vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vec_max, current_value);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> base_ptr_in = ((i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr));</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        <span class="keywordtype">int</span>            j           = 0;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <span class="keywordflow">for</span> (; j &lt; num_remaining; ++j)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            <span class="keyword">const</span> T current_value = *(base_ptr_in + j);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                            vec_max[j]            = std::max(vec_max[j], current_value);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                        }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            } <span class="comment">// Compute Max</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            float32x4x4_t vec_sum_transformed = {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            };</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                float32x4x4_t vec_sum = vec_sum_transformed;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keyword">auto</span> vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                float32x4x4_t vec_elements_flt;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    {</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        vec_elements     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>((i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr));</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                        vec_elements     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(vec_max, vec_elements);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                        vec_elements_flt = convert_int_to_float&lt;float32x4x4_t&gt;(vec_elements);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                            vec_elements_flt.val[0] = vmulq_f32(vec_elements_flt.val[0], scale_beta_vec);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                            vec_elements_flt.val[1] = vmulq_f32(vec_elements_flt.val[1], scale_beta_vec);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                            vec_elements_flt.val[2] = vmulq_f32(vec_elements_flt.val[2], scale_beta_vec);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                            vec_elements_flt.val[3] = vmulq_f32(vec_elements_flt.val[3], scale_beta_vec);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[0]));</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[1]));</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[2]));</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[3]));</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                        }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                            vec_elements_flt.val[0] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[0], scale_beta_vec));</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                            vec_elements_flt.val[1] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[1], scale_beta_vec));</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                            vec_elements_flt.val[2] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[2], scale_beta_vec));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                            vec_elements_flt.val[3] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[3], scale_beta_vec));</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], vec_elements_flt.val[0]);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], vec_elements_flt.val[1]);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], vec_elements_flt.val[2]);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], vec_elements_flt.val[3]);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        vst4q_f32((i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr), vec_elements_flt);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keyword">auto</span> vec_256 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a><span class="keyword">&gt;</span>(256.f), ExactTagType{});</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                    <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[0]);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[1]);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[2]);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[3]);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[0]);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[1]);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[2]);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[3]);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                    }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                        <span class="keyword">const</span> T *<span class="keyword">const</span> base_ptr_in  = (i * in_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_ptr);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                        <span class="keyword">auto</span>           vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                        <span class="comment">//vec_els is functionally redundant but is needed as a workaround for a toolchain bug.</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                        std::vector&lt;T&gt; vec_els(16);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                        {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                            {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                                vec_els[k * 4 + j] = *(base_ptr_in + (4 * k + j));</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                            }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                        }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                        {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                            vec_els[num_remaining_full * 4 + j] = *(base_ptr_in + (4 * num_remaining_full + j));</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                        }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> q = 0; q &lt; 16; q++)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                        {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                            vec_elements[q] = vec_els[q];</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                        vec_elements                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(vec_max, vec_elements);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                        float32x4x4_t vec_elements_flt = convert_int_to_float&lt;float32x4x4_t&gt;(vec_elements);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                        {</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            vec_elements_flt.val[0] = vmulq_f32(vec_elements_flt.val[0], scale_beta_vec);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                            vec_elements_flt.val[1] = vmulq_f32(vec_elements_flt.val[1], scale_beta_vec);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                            vec_elements_flt.val[2] = vmulq_f32(vec_elements_flt.val[2], scale_beta_vec);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                            vec_elements_flt.val[3] = vmulq_f32(vec_elements_flt.val[3], scale_beta_vec);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[0]));</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[1]));</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[2]));</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[3]));</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                        }</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                        {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                            vec_elements_flt.val[0] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[0], scale_beta_vec));</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                            vec_elements_flt.val[1] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[1], scale_beta_vec));</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                            vec_elements_flt.val[2] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[2], scale_beta_vec));</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                            vec_elements_flt.val[3] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[3], scale_beta_vec));</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                            vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], vec_elements_flt.val[0]);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                            vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], vec_elements_flt.val[1]);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                            vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], vec_elements_flt.val[2]);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                            vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], vec_elements_flt.val[3]);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                        }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                        <span class="keywordtype">float</span> *<span class="keyword">const</span> base_ptr_tmp = (i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                        {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                            {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                                *(base_ptr_tmp + (4 * k + j)) = vec_elements_flt.val[k][j];</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                            }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                        }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                        {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                            *(base_ptr_tmp + (4 * num_remaining_full + j)) =</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                vec_elements_flt.val[num_remaining_full][j];</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                        }</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                    }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160; </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    <span class="keyword">auto</span> vec_256 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">float32_t</a><span class="keyword">&gt;</span>(256), ExactTagType{});</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[0]);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[1]);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[2]);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">wrapper::vdiv</a>(vec_256, vec_sum.val[3]);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    {</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                        vec_sum_transformed.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[0]);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                        vec_sum_transformed.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[1]);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        vec_sum_transformed.val[2] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[2]);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        vec_sum_transformed.val[3] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">wrapper::vlog</a>(vec_sum.val[3]);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                }</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            } <span class="comment">// Compute exponentials and sum</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                constexpr <span class="keywordtype">bool</span> is_qasymm8_signed = std::is_same&lt;T, qasymm8_signed_t&gt;::value;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                <span class="keywordflow">if</span> (!vector_exceeds_bounds)</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                    {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                        <span class="keyword">using</span> int_vec_type   = wrapper::traits::neon_vector_t&lt;T, 16&gt;;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                        float32x4x4_t vec_in = vld4q_f32((i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr));</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                        int_vec_type normalized_value{};</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160; </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                            <span class="keyword">const</span> float32x4x4_t sub = {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                vsubq_f32(vec_in.val[0], vec_sum_transformed.val[0]),</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                vsubq_f32(vec_in.val[1], vec_sum_transformed.val[1]),</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                vsubq_f32(vec_in.val[2], vec_sum_transformed.val[2]),</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                vsubq_f32(vec_in.val[3], vec_sum_transformed.val[3]),</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                            };</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                            normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(sub);</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                        }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                        {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                            float32x4x4_t mul = {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                vmulq_f32(vec_in.val[0], vec_sum_transformed.val[0]),</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                                vmulq_f32(vec_in.val[1], vec_sum_transformed.val[1]),</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                                vmulq_f32(vec_in.val[2], vec_sum_transformed.val[2]),</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                vmulq_f32(vec_in.val[3], vec_sum_transformed.val[3]),</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                            };</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160; </div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                            <span class="keywordflow">if</span> (is_qasymm8_signed)</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                            {</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> offset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(128.f, wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                mul.val[0]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[0], offset_vec);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                mul.val[1]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[1], offset_vec);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                                mul.val[2]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[2], offset_vec);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                                mul.val[3]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[3], offset_vec);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                            }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                            normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(mul);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                        }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>((i * out_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr), normalized_value);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    }</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                }</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    <span class="keywordflow">for</span> (; i &lt; axis_width; ++i)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                        T *<span class="keyword">const</span>     base_ptr_out = (i * out_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_ptr);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                        <span class="keywordtype">float</span> *<span class="keyword">const</span> base_ptr_tmp = (i * tmp_axis_stride) + <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp_ptr);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                        <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                        {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                            {</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                                    *(base_ptr_out + (4 * k + j)) = utils::cast::saturate_cast&lt;T&gt;(</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                                        (*(base_ptr_tmp + (4 * k + j)) - vec_sum_transformed.val[k][j]));</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                                }</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                            }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                            {</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                                *(base_ptr_out + (4 * num_remaining_full + j)) =</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                    utils::cast::saturate_cast&lt;T&gt;(*(base_ptr_tmp + (4 * num_remaining_full + j)) -</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                                                  vec_sum_transformed.val[num_remaining_full][j]);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                            }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                        }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                        {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; num_remaining_full; ++k)</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                            {</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                                {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                                    *(base_ptr_out + (4 * k + j)) = utils::cast::saturate_cast&lt;T&gt;(</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                        *(base_ptr_tmp + (4 * k + j)) * vec_sum_transformed.val[k][j] -</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                                        (is_qasymm8_signed ? 128.f : 0));</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                }</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                            }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; num_remaining_partial; ++j)</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                            {</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                *(base_ptr_out + (4 * num_remaining_full + j)) =</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                    utils::cast::saturate_cast&lt;T&gt;(*(base_ptr_tmp + (4 * num_remaining_full + j)) *</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                                                      vec_sum_transformed.val[num_remaining_full][j] -</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                                                  (is_qasymm8_signed ? 128.f : 0));</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                            }</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                        }</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                    }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                }</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            } <span class="comment">// Normalize exponentials</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        },</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        in_it, out_it);</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, <a class="el" href="div_8h_source.xhtml#l00059">arm_compute::wrapper::vdiv()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00048">arm_compute::wrapper::vlog()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00074">arm_compute::wrapper::vqsub()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>.</p>

</div>
</div>
<a id="a56d24734f5becfb5db7582d9fc49f0e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56d24734f5becfb5db7582d9fc49f0e4">&#9670;&nbsp;</a></span>neon_softmax_non_x_quantized&lt; qasymm8_signed_t, false &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">arm_compute::cpu::neon_softmax_non_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>, false &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5d7f3080ef278a831c60b51ad9a74567"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d7f3080ef278a831c60b51ad9a74567">&#9670;&nbsp;</a></span>neon_softmax_non_x_quantized&lt; qasymm8_signed_t, true &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">arm_compute::cpu::neon_softmax_non_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>, true &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3871c43d0d557bad9c2f2e5b118b0d1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3871c43d0d557bad9c2f2e5b118b0d1c">&#9670;&nbsp;</a></span>neon_softmax_non_x_quantized&lt; qasymm8_t, false &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">arm_compute::cpu::neon_softmax_non_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>, false &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2e0ecab27ddba7f6f81d3d874502c55c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e0ecab27ddba7f6f81d3d874502c55c">&#9670;&nbsp;</a></span>neon_softmax_non_x_quantized&lt; qasymm8_t, true &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9021da1d85f0769fe8304a4004d52b36">arm_compute::cpu::neon_softmax_non_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>, true &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a220170f52a43bcae9b6601cf64c57d78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a220170f52a43bcae9b6601cf64c57d78">&#9670;&nbsp;</a></span>neon_softmax_x_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_softmax_x_float </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2neon_2impl_8h_source.xhtml#l00065">65</a> of file <a class="el" href="softmax_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(axis);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(tmp);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_width = in-&gt;info()-&gt;valid_region().shape.x();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    Iterator in_it(in, window);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    Iterator out_it(out, window);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    constexpr <span class="keywordtype">int</span> vec_size = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> sum_stages = log2(vec_size &gt;&gt; 1);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> beta_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(beta), ExactTagType{});</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        window,</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keyword">const</span> T *in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_it.ptr());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            T       *out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_it.ptr());</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            T max_val;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="comment">/* Compute Max */</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="comment">// Init max value</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(support::cpp11::lowest&lt;T&gt;(), ExactTagType{});</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordtype">int</span>  x       = 0;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> current_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    vec_max                  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vec_max, current_value);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                max_val = wrapper::vmaxv(vec_max);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keyword">auto</span> carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_max), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_max));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sum_stages; ++i)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(carry_max, carry_max);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                max_val      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(carry_max, 0);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    max_val = std::max(*(in_ptr + x), max_val);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            } <span class="comment">// compute max</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            T sum_transformed{};</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="comment">/* Get max value */</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(max_val, ExactTagType{});</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keyword">auto</span> vec_sum = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), ExactTagType{});</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="comment">/* Loop over row and compute exponentials and sum */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordtype">int</span> x = 0;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    <span class="keyword">auto</span> vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    vec_elements      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(vec_elements, vec_max);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_elements, beta_vec);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        vec_sum      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vec_sum, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(vec_elements));</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        vec_elements = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">wrapper::vexpq</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_elements, beta_vec));</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        vec_sum      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vec_sum, vec_elements);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, vec_elements);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="comment">/* Reduce sum */</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                T sum{};</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                sum = wrapper_vaddv(vec_sum, sum_stages);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">auto</span> sum_res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_sum), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_sum));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sum_stages; ++i)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    sum_res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">wrapper::vpadd</a>(sum_res, sum_res);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                sum = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(sum_res, 0);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="comment">/* Run remaining elements */</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    T element{};</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        element = (in_ptr[x] - max_val) * beta;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        sum += std::exp(element);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        element = std::exp((in_ptr[x] - max_val) * beta);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        sum += element;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    out_ptr[x] = element;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    sum_transformed = T(1) / sum;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    sum_transformed = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(std::log(sum));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            } <span class="comment">// Compute exponentials and sum</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> sum_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(sum_transformed), ExactTagType{});</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="comment">/* Loop over row and compute softmax */</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordtype">int</span> x = 0;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vec_in = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(out_ptr + x);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(vec_in, sum_vec));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vec_in, sum_vec));</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                <span class="comment">/* Run remaining elements */</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        out_ptr[x] = out_ptr[x] - sum_transformed;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        out_ptr[x] = out_ptr[x] * sum_transformed;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            } <span class="comment">// Normalize exponentials</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        },</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        in_it, out_it);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="exp_8h_source.xhtml#l00048">arm_compute::wrapper::vexpq()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00187">arm_compute::wrapper::vpadd()</a>, <a class="el" href="pmax_8h_source.xhtml#l00039">arm_compute::wrapper::vpmax()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>.</p>

</div>
</div>
<a id="a1c458f6616fcb859a32d7cf5e8ff217f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c458f6616fcb859a32d7cf5e8ff217f">&#9670;&nbsp;</a></span>neon_softmax_x_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_softmax_x_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="softmax_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(axis);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    static_assert(std::is_same&lt;T, qasymm8_t&gt;::value || std::is_same&lt;T, qasymm8_signed_t&gt;::value,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                  <span class="stringliteral">&quot;quantized type should be either qasymm8_t or qasymm8_signed_t.&quot;</span>);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_width = in-&gt;info()-&gt;valid_region().shape.x();</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       scale_beta     = -beta * in-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> float32x4_t scale_beta_vec = vdupq_n_f32(scale_beta);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Iterator in_it(in, window);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    Iterator out_it(out, window);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    constexpr <span class="keywordtype">int</span> vec_size = 16;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> sum_stages = log2(vec_size &gt;&gt; 1);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        window,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keyword">const</span> T *in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(in_it.ptr());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            T       *out_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out_it.ptr());</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordtype">float</span>   *tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            T max_val;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="comment">/* Compute Max */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="comment">// Init max value</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(support::cpp11::lowest&lt;T&gt;(), ExactTagType{});</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordtype">int</span>  x       = 0;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> current_value = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    vec_max                  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vec_max, current_value);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                max_val = wrapper::vmaxv(vec_max);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">auto</span> carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vec_max), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vec_max));</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; sum_stages; ++i)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    carry_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">wrapper::vpmax</a>(carry_max, carry_max);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                max_val      = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(carry_max, 0);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    max_val = std::max(*(in_ptr + x), max_val);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            } <span class="comment">// Compute Max</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordtype">float</span> sum_transformed{};</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="comment">/* Get max value */</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_max = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(max_val, wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                float32x4x4_t vec_sum = {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    vdupq_n_f32(0.f),</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                };</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="comment">/* Loop over row and compute exponentials and sum */</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordtype">int</span> x = 0;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="keyword">auto</span> vec_elements              = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(in_ptr + x);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    vec_elements                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(vec_max, vec_elements);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    float32x4x4_t vec_elements_flt = convert_int_to_float&lt;float32x4x4_t&gt;(vec_elements);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        vec_elements_flt.val[0] = vmulq_f32(vec_elements_flt.val[0], scale_beta_vec);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        vec_elements_flt.val[1] = vmulq_f32(vec_elements_flt.val[1], scale_beta_vec);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        vec_elements_flt.val[2] = vmulq_f32(vec_elements_flt.val[2], scale_beta_vec);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        vec_elements_flt.val[3] = vmulq_f32(vec_elements_flt.val[3], scale_beta_vec);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                        vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[0]));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[1]));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[2]));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vec_elements_flt.val[3]));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        vec_elements_flt.val[0] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[0], scale_beta_vec));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        vec_elements_flt.val[1] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[1], scale_beta_vec));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        vec_elements_flt.val[2] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[2], scale_beta_vec));</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        vec_elements_flt.val[3] = <a class="code" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">vexpq_f32</a>(vmulq_f32(vec_elements_flt.val[3], scale_beta_vec));</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        vec_sum.val[0]          = vaddq_f32(vec_sum.val[0], vec_elements_flt.val[0]);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        vec_sum.val[1]          = vaddq_f32(vec_sum.val[1], vec_elements_flt.val[1]);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        vec_sum.val[2]          = vaddq_f32(vec_sum.val[2], vec_elements_flt.val[2]);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        vec_sum.val[3]          = vaddq_f32(vec_sum.val[3], vec_elements_flt.val[3]);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    vst4q_f32(tmp_ptr + x, vec_elements_flt);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="comment">/* Reduce sum */</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> float32x4_t sum_16_byte =</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    vaddq_f32(vaddq_f32(vec_sum.val[0], vec_sum.val[1]), vaddq_f32(vec_sum.val[2], vec_sum.val[3]));</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordtype">float</span> sum;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                sum = wrapper::vaddv(sum_16_byte);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#else  // __aarch64__</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="keyword">auto</span> sum_res = vpadd_f32(vget_high_f32(sum_16_byte), vget_low_f32(sum_16_byte));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                sum_res      = vpadd_f32(sum_res, sum_res);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                sum          = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(sum_res, 0);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#endif // __aarch64__</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="comment">/* Run remaining elements */</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keywordtype">float</span> element{};</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    {</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        element = (max_val - in_ptr[x]) * scale_beta;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        sum += std::exp(element);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        element = std::exp((max_val - in_ptr[x]) * scale_beta);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        sum += element;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    tmp_ptr[x] = element;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">if</span> (!IS_LOG)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    sum_transformed = 256.f / sum;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    sum_transformed = std::log(sum);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            } <span class="comment">// Compute exponentials and sum</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                constexpr <span class="keywordtype">bool</span> is_qasymm8_signed = std::is_same&lt;T, qasymm8_signed_t&gt;::value;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keyword">const</span> float32x4_t sum_vec = vdupq_n_f32(sum_transformed);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="comment">/* Loop over row and compute softmax */</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordtype">int</span> x = 0;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (input_width - vec_size); x += vec_size)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="keyword">using</span> int_vec_type   = wrapper::traits::neon_vector_t&lt;T, 16&gt;;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    float32x4x4_t vec_in = vld4q_f32(tmp_ptr + x);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    int_vec_type  normalized_value{};</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        <span class="keyword">const</span> float32x4x4_t sub = {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                            vsubq_f32(vec_in.val[0], sum_vec),</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                            vsubq_f32(vec_in.val[1], sum_vec),</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                            vsubq_f32(vec_in.val[2], sum_vec),</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                            vsubq_f32(vec_in.val[3], sum_vec),</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        };</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(sub);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        float32x4x4_t mul = {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                            vmulq_f32(vec_in.val[0], sum_vec),</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            vmulq_f32(vec_in.val[1], sum_vec),</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            vmulq_f32(vec_in.val[2], sum_vec),</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            vmulq_f32(vec_in.val[3], sum_vec),</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                        };</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keywordflow">if</span> (is_qasymm8_signed)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> offset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(128.f, wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                            mul.val[0]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[0], offset_vec);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                            mul.val[1]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[1], offset_vec);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                            mul.val[2]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[2], offset_vec);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                            mul.val[3]            = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(mul.val[3], offset_vec);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        normalized_value = convert_float_to_int&lt;float32x4x4_t, int_vec_type&gt;(mul);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(out_ptr + x, normalized_value);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="comment">/* Run remaining elements */</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">for</span> (; x &lt; input_width; ++x)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="keywordflow">if</span> (IS_LOG)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        out_ptr[x] = utils::cast::saturate_cast&lt;T&gt;(tmp_ptr[x] - sum_transformed);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        out_ptr[x] = utils::cast::saturate_cast&lt;T&gt;((tmp_ptr[x] * sum_transformed) -</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                                                   (is_qasymm8_signed ? 128.f : 0));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            } <span class="comment">// Normalize exponentials</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        },</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        in_it, out_it);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlane_8h_source.xhtml#l00091">arm_compute::wrapper::vgetlane()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="pmax_8h_source.xhtml#l00039">arm_compute::wrapper::vpmax()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00074">arm_compute::wrapper::vqsub()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>.</p>

</div>
</div>
<a id="a72a1d2c1987c73fc91646342e8acf3b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72a1d2c1987c73fc91646342e8acf3b2">&#9670;&nbsp;</a></span>neon_softmax_x_quantized&lt; qasymm8_signed_t, false &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">arm_compute::cpu::neon_softmax_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>, false &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa3aaf673970c1794596cb544ad57a21b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3aaf673970c1794596cb544ad57a21b">&#9670;&nbsp;</a></span>neon_softmax_x_quantized&lt; qasymm8_signed_t, true &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">arm_compute::cpu::neon_softmax_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">qasymm8_signed_t</a>, true &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa865ca925c6f9ea8b8c9f51041859ccf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa865ca925c6f9ea8b8c9f51041859ccf">&#9670;&nbsp;</a></span>neon_softmax_x_quantized&lt; qasymm8_t, false &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">arm_compute::cpu::neon_softmax_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>, false &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af506cbd9b9e544e37b3f5d2f47aaac3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af506cbd9b9e544e37b3f5d2f47aaac3f">&#9670;&nbsp;</a></span>neon_softmax_x_quantized&lt; qasymm8_t, true &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1c458f6616fcb859a32d7cf5e8ff217f">arm_compute::cpu::neon_softmax_x_quantized</a>&lt; <a class="el" href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">qasymm8_t</a>, true &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad96c727881fe21925e370537c2841e3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad96c727881fe21925e370537c2841e3f">&#9670;&nbsp;</a></span>neon_u16_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_u16_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00086">86</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">return</span> select_op_not_same_rank&lt;uint16_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="abf7db8f8a95e6bf26a8185ec864fb2f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf7db8f8a95e6bf26a8185ec864fb2f1">&#9670;&nbsp;</a></span>neon_u16_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_u16_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> select_op_16&lt;uint16_t, uint16x8_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="aa595d2a67367aa82c2e7d7dadfc5dd36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa595d2a67367aa82c2e7d7dadfc5dd36">&#9670;&nbsp;</a></span>neon_u32_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_u32_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> select_op_not_same_rank&lt;uint32_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a74b270b1634701a9b56500cbc5d7861b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74b270b1634701a9b56500cbc5d7861b">&#9670;&nbsp;</a></span>neon_u32_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_u32_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00076">76</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> select_op_32&lt;uint32_t, uint32x4_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab11b3f4b86665b08ca8b9fb00e38bb9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab11b3f4b86665b08ca8b9fb00e38bb9d">&#9670;&nbsp;</a></span>neon_u8_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_u8_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml#l00109">109</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> elementwise_comp_op_8&lt;op, uint8_t, uint8x16_t&gt;(in1, in2, out, window);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a47e02212404334bb7684275e2b183719"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47e02212404334bb7684275e2b183719">&#9670;&nbsp;</a></span>neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">arm_compute::cpu::neon_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a380179c89ead515c75eae47612ddf9bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a380179c89ead515c75eae47612ddf9bb">&#9670;&nbsp;</a></span>neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">arm_compute::cpu::neon_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2442fd415b42ceeba06051d5908bb210"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2442fd415b42ceeba06051d5908bb210">&#9670;&nbsp;</a></span>neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">arm_compute::cpu::neon_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="addef285be991e7bee50060465f455459"></a>
<h2 class="memtitle"><span class="permalink"><a href="#addef285be991e7bee50060465f455459">&#9670;&nbsp;</a></span>neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">arm_compute::cpu::neon_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8b6616dc7142e89df08763de1e61733f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b6616dc7142e89df08763de1e61733f">&#9670;&nbsp;</a></span>neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">arm_compute::cpu::neon_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aca40b8e906e7c797b78f611217e2017c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca40b8e906e7c797b78f611217e2017c">&#9670;&nbsp;</a></span>neon_u8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ab11b3f4b86665b08ca8b9fb00e38bb9d">arm_compute::cpu::neon_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a397dba8ef3313bb4d4ba40509527be8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a397dba8ef3313bb4d4ba40509527be8d">&#9670;&nbsp;</a></span>neon_u8_select_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_u8_select_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> select_op_not_same_rank&lt;uint8_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a14c68a05fddd0d81615f4a155e6a4433"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14c68a05fddd0d81615f4a155e6a4433">&#9670;&nbsp;</a></span>neon_u8_select_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void neon_u8_select_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="select_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> select_op_8&lt;uint8_t, uint8x16_t&gt;(c, x, y, output, window);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3f4d18132606a90cb885b83ae53bed1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f4d18132606a90cb885b83ae53bed1a">&#9670;&nbsp;</a></span>neon_u8_to_fp16_cast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::neon_u8_to_fp16_cast </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>_dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a>&#160;</td>
          <td class="paramname"><em>_policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a80763dd41a2676071d6c4bb52801bc41"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80763dd41a2676071d6c4bb52801bc41">&#9670;&nbsp;</a></span>offset_no_padding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t arm_compute::cpu::offset_no_padding </td>
          <td>(</td>
          <td class="paramtype">uint32_t&#160;</td>
          <td class="paramname"><em>padded_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pool_stride_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pool_stride_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>data_layout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00071">71</a> of file <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml">list.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_left    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().left;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_right   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().right;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_top     = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().top;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_bottom  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.padding().bottom;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_y = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes().y());</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> in_stride_w = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.strides_in_bytes()[3]);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_horiz   = pad_left + pad_right;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pad_vert    = pad_top + pad_bottom;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == DataLayout::NCHW)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">const</span> uint32_t offset_base =</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            padded_offset - <span class="keyword">sizeof</span>(T) * pad_horiz * <span class="keywordtype">id</span>.y() * pool_stride_y <span class="comment">/* subtract padding elems per row */</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            - pad_top * <span class="keyword">sizeof</span>(T)                                          <span class="comment">/* top padding */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            - <span class="keyword">sizeof</span>(T) * pad_horiz * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape()[1] * <span class="keywordtype">id</span>.z() -</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            pad_vert * in_stride_y * <span class="keywordtype">id</span>.z() <span class="comment">/* for each Z plane there are height*pad_right padding elems */</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            - in_stride_w * <span class="keywordtype">id</span>[3];</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> offset_base;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keyword">const</span> uint32_t offset_base = padded_offset -</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                     <span class="keyword">sizeof</span>(T) * pad_horiz * <span class="keywordtype">id</span>.y() * pool_stride_x <span class="comment">// subtract padding elems per row</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                     - pad_top * <span class="keyword">sizeof</span>(T)                          <span class="comment">// top padding</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                     - <span class="keyword">sizeof</span>(T) * pad_horiz * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.tensor_shape()[1] * <span class="keywordtype">id</span>.z() *</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                           pool_stride_y <span class="comment">// for each Z plane there are width*pad_right padding elems</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                     - in_stride_w * <span class="keywordtype">id</span>[3];</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">return</span> offset_base;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">data_layout</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>.</p>

</div>
</div>
<a id="af8966e308573541aa625e4a7f955d424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8966e308573541aa625e4a7f955d424">&#9670;&nbsp;</a></span>poolingMxN_fp16_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::poolingMxN_fp16_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acf656cc44c210ddef37bf59c2851a713"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf656cc44c210ddef37bf59c2851a713">&#9670;&nbsp;</a></span>poolingMxN_fp32_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void poolingMxN_fp32_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">282</a> of file <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">if</span> ((pool_info.pool_type == <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>) &amp;&amp; pool_info.use_kernel_indices &amp;&amp; (dst1 != <span class="keyword">nullptr</span>))</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af0d0c68bacf4e3bdbe6813e769cd46c2">poolingMxN_fp32_neon_nhwc_kernel_indices</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, dst1, pool_info, window);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (pool_info.pool_size == Size2D(2, 2) &amp;&amp; pool_info.pool_type == <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a> &amp;&amp;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;             !pool_info.pad_stride_info.has_padding() &amp;&amp; (dst1 != <span class="keyword">nullptr</span>))</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        pooling2_f32_maxpool_indices(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, dst1, pool_info, window_src, window);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = window.x().start();</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x   = window.x().end();</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 4;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        Window window_out = window;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, window_src);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        Iterator out(dst0, window_out);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x =</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y =</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_right               = pool_info.pad_stride_info.pad_right();</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top                 = pool_info.pad_stride_info.pad_top();</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left                = pool_info.pad_stride_info.pad_left();</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_bottom              = pool_info.pad_stride_info.pad_bottom();</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordtype">int</span>       pool_stride_x                = 0;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordtype">int</span>       pool_stride_y                = 0;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info.stride();</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>   upper_bound_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1) + (pool_info.exclude_padding ? 0 : pool_pad_right);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>   upper_bound_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2) + (pool_info.exclude_padding ? 0 : pool_pad_bottom);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> min_value     = get_initial_min&lt;float&gt;(pool_info.use_inf_as_limit);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        float32x4_t vres;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            window_out,</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>    = <span class="keywordtype">id</span>.y() * pool_stride_x;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>   = <span class="keywordtype">id</span>.z() * pool_stride_y;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_y = pool_pad_top - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_x = pool_pad_left - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, window_src.z().start() + pool_limit_y);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y   = std::min(pool_size_y, window_src.z().end() + pool_limit_y);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, window_src.y().start() + pool_limit_x);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x   = std::min(pool_size_x, window_src.y().end() + pool_limit_x);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                <span class="keywordtype">int</span> x_off = window_start_x;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    <span class="keywordflow">if</span> (pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        <span class="comment">// Calculate scale</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = calculate_avg_scale_pool2d(</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                            upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x, pool_stride_y);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                        <span class="keyword">const</span> float32x4_t scale_v = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        vres = vdupq_n_f32(0.0f);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                        {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                            {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                <span class="keyword">const</span> float32x4_t data = vld1q_f32(</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                        in.ptr() +</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                        (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                        (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                    x_off);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                <span class="comment">// Get power of 2 in case of l2 pooling and accumulate</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                <span class="keywordflow">if</span> (pool_info.pool_type == PoolingType::L2)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                    vres = vmlaq_f32(vres, data, data);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                                {</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                    vres = vaddq_f32(vres, data);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                                }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                            }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                        }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                        <span class="comment">// Divide by scale</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                        vres = vmulq_f32(vres, scale_v);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    {</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        vres = vdupq_n_f32(min_value);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                        {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                            {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                <span class="keyword">const</span> float32x4_t data = vld1q_f32(</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                                    <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                                        in.ptr() +</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                                        (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                                        (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                    x_off);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                vres = vmaxq_f32(vres, data);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                            }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                        }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    <span class="comment">// Calculate square-root in case of l2 pooling</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keywordflow">if</span> (pool_info.pool_type == PoolingType::L2)</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                    {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                        float32x4_t l2_res = {<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sqrt(vgetq_lane_f32(vres, 0))),</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                                              <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sqrt(vgetq_lane_f32(vres, 1))),</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                                              <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sqrt(vgetq_lane_f32(vres, 2))),</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                                              <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sqrt(vgetq_lane_f32(vres, 3)))};</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                        vres               = l2_res;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                    }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                    vst1q_f32(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr()) + x_off, vres);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                <span class="keywordflow">for</span> (; x_off &lt; window_end_x; ++x_off)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    <span class="keywordtype">float</span> res = 0.0f;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                    <span class="keywordflow">if</span> (pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                    {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                        <span class="comment">// Calculate scale</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = calculate_avg_scale_pool2d(</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                            pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w,</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                            upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x, pool_stride_y);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                        {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;                            {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">float</span> data =</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                          in.ptr() +</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                          (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                          (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                      x_off);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                <span class="comment">// Get power of 2 in case of l2 pooling and accumulate</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                <span class="keywordflow">if</span> (pool_info.pool_type == PoolingType::L2)</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                                {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                                    res += data * data;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                                }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                                    res += data;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                                }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                            }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                        }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160; </div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        <span class="comment">// Divide by scale</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                        res *= <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                    {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                        res = min_value;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                        {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                            {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                                <span class="keyword">const</span> <span class="keywordtype">float</span> data =</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                                          in.ptr() +</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                          (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                                          (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                                      x_off);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                                res = std::max(res, data);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                            }</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                        }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160; </div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                    <span class="comment">// Calculate square-root in case of l2 pooling</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                    <span class="keywordflow">if</span> (pool_info.pool_type == PoolingType::L2)</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                    {</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                        res = std::sqrt(res);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                    }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            },</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            in, out);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01148">PoolingLayerInfo::exclude_padding</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00245">PadStrideInfo::has_padding()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00263">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00262">arm_compute::test::validation::idx_width</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01149">PoolingLayerInfo::is_global_pooling</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::L2</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="_core_types_8h_source.xhtml#l00233">PadStrideInfo::pad_bottom()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00218">PadStrideInfo::pad_left()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00223">PadStrideInfo::pad_right()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01147">PoolingLayerInfo::pad_stride_info</a>, <a class="el" href="_core_types_8h_source.xhtml#l00228">PadStrideInfo::pad_top()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01145">PoolingLayerInfo::pool_size</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01144">PoolingLayerInfo::pool_type</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00163">poolingMxN_fp32_neon_nhwc_kernel_indices()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00192">PadStrideInfo::stride()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01151">PoolingLayerInfo::use_inf_as_limit</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01152">PoolingLayerInfo::use_kernel_indices</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>, and <a class="el" href="_window_8h_source.xhtml#l00176">Window::z()</a>.</p>

</div>
</div>
<a id="af0d0c68bacf4e3bdbe6813e769cd46c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0d0c68bacf4e3bdbe6813e769cd46c2">&#9670;&nbsp;</a></span>poolingMxN_fp32_neon_nhwc_kernel_indices()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::poolingMxN_fp32_neon_nhwc_kernel_indices </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00163">163</a> of file <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>     window_start_x = window.x().start();</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>     window_end_x   = window.x().end();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x  = 4;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    Window window_out = window;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    Iterator out(dst0, window_out);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    Iterator indices(dst1, window_out);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top  = pool_info.pad_stride_info.pad_top();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left = pool_info.pad_stride_info.pad_left();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">int</span> pool_stride_x                      = 0;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">int</span> pool_stride_y                      = 0;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info.stride();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> min_value = get_initial_min&lt;float&gt;(pool_info.use_inf_as_limit);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    float32x4_t vres;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    uint32x4_t  vidx;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    constexpr <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>  = 1;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    constexpr <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a> = 2;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    constexpr <span class="keywordtype">int</span> idx_batch  = 3;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> y_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y());</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> z_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z());</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> n_stride = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes()[idx_batch]);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_dim_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> uint8_t *in_ptr_start = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;buffer() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;offset_first_element_in_bytes();</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        window_out,</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.y()) * pool_stride_x - pool_pad_left;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a> = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<span class="keywordtype">id</span>.z()) * pool_stride_y - pool_pad_top;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, -<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, -<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x = std::min(pool_size_x, input_dim_w - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y = std::min(pool_size_y, input_dim_h - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keyword">const</span> uint8_t *in_ptr_n = in_ptr_start + <span class="keywordtype">id</span>[idx_batch] * n_stride;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_ptr_y_offset = (z_stride * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>) + (pool_start_y * z_stride);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> in_ptr_x_offset = (y_stride * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>) + (pool_start_x * y_stride);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keywordtype">int</span> x_off = window_start_x;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                vres                             = vdupq_n_f32(min_value);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                vidx                             = vdupq_n_u32(0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keyword">const</span> uint8_t *in_ptr_y          = in_ptr_n + in_ptr_y_offset + in_ptr_x_offset;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                uint32_t       curr_kernel_index = pool_size_x * pool_start_y;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x_off * <span class="keyword">sizeof</span>(float));</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    curr_kernel_index += pool_start_x;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        <span class="keyword">const</span> float32x4_t data      = vld1q_f32(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(in_ptr_x));</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        <span class="keyword">const</span> uint32x4_t  vidx_curr = vdupq_n_u32(curr_kernel_index);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        <span class="keyword">const</span> uint32x4_t  idxMask   = vcgtq_f32(data, vres);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        vidx                        = vbslq_u32(idxMask, vidx_curr, vidx);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        vres                        = vmaxq_f32(vres, data);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        in_ptr_x += y_stride;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        curr_kernel_index++;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    curr_kernel_index += (pool_size_x - pool_end_x);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    in_ptr_y += z_stride;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                vst1q_f32(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr()) + x_off, vres);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                vst1q_u32(<span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(indices.ptr()) + x_off, vidx);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt; window_end_x; ++x_off)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <span class="keywordtype">float</span>          res      = min_value;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                uint32_t       idx      = 0<a class="code" href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">U</a>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keyword">const</span> uint8_t *in_ptr_y = in_ptr_n + in_ptr_y_offset + in_ptr_x_offset;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="keyword">const</span> uint8_t *in_ptr_x = in_ptr_y + (x_off * <span class="keyword">sizeof</span>(float));</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> data = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(in_ptr_x));</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        <span class="keywordflow">if</span> (data &gt; res)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                        {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                            idx = pool_size_x * y + x;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                            res = data;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                        in_ptr_x += y_stride;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    }</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                    in_ptr_y += z_stride;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="comment">// Store result</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr()) + x_off)        = res;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(indices.ptr()) + x_off) = idx;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        },</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        out, indices);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00263">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00262">arm_compute::test::validation::idx_width</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01149">PoolingLayerInfo::is_global_pooling</a>, <a class="el" href="_core_types_8h_source.xhtml#l00218">PadStrideInfo::pad_left()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01147">PoolingLayerInfo::pad_stride_info</a>, <a class="el" href="_core_types_8h_source.xhtml#l00228">PadStrideInfo::pad_top()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01145">PoolingLayerInfo::pool_size</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00192">PadStrideInfo::stride()</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00065">arm_compute::utils::cast::U</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01151">PoolingLayerInfo::use_inf_as_limit</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00282">poolingMxN_fp32_neon_nhwc()</a>.</p>

</div>
</div>
<a id="a7fb9537b47012988a3865769e0e0d009"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fb9537b47012988a3865769e0e0d009">&#9670;&nbsp;</a></span>poolingMxN_q8_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::poolingMxN_q8_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00043">43</a> of file <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml">quantized.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dst1);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x     = window.x().start();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x       = window.x().end();</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x      = 16;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_half_step_x = window_step_x / 2;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Window window_out = window;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    Iterator in(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, window_src);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    Iterator out(dst0, window_out);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">using</span> q8x8_t  = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 8&gt;::type</a>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">using</span> q8x16_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;T, 16&gt;::type</a>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">using</span> q16_t   = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;T&gt;;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">using</span> q16x8_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;q16_t, 8&gt;::type</a>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">using</span> q32_t   = <span class="keyword">typename</span> wrapper::traits::promote_t&lt;q16_t&gt;;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">using</span> q32x4_t = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;q32_t, 4&gt;::type</a>;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_x = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().y() : pool_info.pool_size.width;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_size_y = pool_info.is_global_pooling ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;tensor_shape().z() : pool_info.pool_size.height;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_right  = pool_info.pad_stride_info.pad_right();</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_top    = pool_info.pad_stride_info.pad_top();</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_left   = pool_info.pad_stride_info.pad_left();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pool_pad_bottom = pool_info.pad_stride_info.pad_bottom();</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">int</span> pool_stride_x                      = 0;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">int</span> pool_stride_y                      = 0;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::tie(pool_stride_x, pool_stride_y) = pool_info.pad_stride_info.stride();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_w = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(1) + (pool_info.exclude_padding ? 0 : pool_pad_right);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> upper_bound_h = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;dimension(2) + (pool_info.exclude_padding ? 0 : pool_pad_bottom);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> float32x4_t             half_scale_v = vdupq_n_f32(0.5f);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo src_qinfo    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo dst_qinfo    = dst0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> quant_rescale = dst_qinfo.scale / src_qinfo.scale;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// &quot;new_offset&quot; doesn&#39;t have to consider the &quot;half_scale_v&quot; in its computation</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// With a requantization performed in a single step there won&#39;t be uncertainties introduced</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> int32_t new_offset =</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        dst_qinfo.offset - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.offset) / quant_rescale);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>   requant_scale = dst_qinfo.scale / src_qinfo.scale;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> int32_t requant_offset =</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        dst_qinfo.offset - <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(src_qinfo.offset) / requant_scale);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo requant_qinfo = UniformQuantizationInfo(requant_scale, requant_offset);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        window_out,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        {</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>    = <span class="keywordtype">id</span>.y() * pool_stride_x;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>   = <span class="keywordtype">id</span>.z() * pool_stride_y;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_y = pool_pad_top - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_limit_x = pool_pad_left - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_y = std::max(0, window_src.z().start() + pool_limit_y);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_y   = std::min(pool_size_y, window_src.z().end() + pool_limit_y);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_start_x = std::max(0, window_src.y().start() + pool_limit_x);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> pool_end_x   = std::min(pool_size_x, window_src.y().end() + pool_limit_x);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordtype">int</span> x_off = window_start_x;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_step_x); x_off += window_step_x)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keywordflow">if</span> (pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    q32x4_t vres1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    q32x4_t vres2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    q32x4_t vres3 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    q32x4_t vres4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="comment">// Calculate scale</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = calculate_avg_scale_pool2d(</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                        pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w,</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x, pool_stride_y);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                            <span class="keyword">const</span> q8x16_t data = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                                <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                    in.ptr() +</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                                    (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                    (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                x_off);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            <span class="keyword">const</span> q16x8_t data_q16  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data));</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                            <span class="keyword">const</span> q16x8_t data2_q16 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data));</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                            vres1                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres1, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data_q16)));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                            vres2                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres2, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data_q16)));</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                            vres3                   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres3, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(data2_q16)));</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                            vres4 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(vres4, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(data2_q16)));</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        <span class="keyword">const</span> float32x4x4_t vres = {{</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                            vcvtq_f32_q32(vres1),</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            vcvtq_f32_q32(vres2),</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                            vcvtq_f32_q32(vres3),</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                            vcvtq_f32_q32(vres4),</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        }};</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span>          requantized_dst =</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                            vrequantize_pooling_with_scale&lt;q8x16_t&gt;(vres, quant_rescale, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>, new_offset);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="comment">// Store result</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(requantized_dst));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off + 8,</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(requantized_dst));</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                        <span class="keyword">const</span> float32x4_t scale_v = vdupq_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                        <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        vres1 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres1), scale_v));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        vres2 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres2), scale_v));</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        vres3 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres3), scale_v));</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        vres4 = vcvtq_q32_f32&lt;q32x4_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(half_scale_v, vcvtq_f32_q32(vres4), scale_v));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        <span class="keyword">const</span> q8x8_t res1 =</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres1), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres2)));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        <span class="keyword">const</span> q8x8_t res2 =</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres3), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(vres4)));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        <span class="comment">// Store result</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off, res1);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off + 8, res2);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                {</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    q8x16_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), wrapper::traits::vector_128_tag{});</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            <span class="keyword">const</span> q8x16_t data = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                    in.ptr() +</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                    (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                    (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                x_off);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                            vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off,</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                    (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                        ? vrequantize_pooling&lt;q8x8_t, q8x16_t&gt;(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(vres),</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                                                               <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(vres), requant_qinfo)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                        : vres);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordflow">if</span> (pool_info.pool_type == <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordflow">for</span> (; x_off &lt;= (window_end_x - window_half_step_x); x_off += window_half_step_x)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    q8x8_t vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(std::numeric_limits&lt;T&gt;::min(), wrapper::traits::vector_64_tag{});</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                            <span class="keyword">const</span> q8x8_t data = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                    in.ptr() +</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                    (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                    (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                x_off);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                            vres = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(vres, data);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off,</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                    (src_qinfo != dst_qinfo) ? vrequantize_pooling&lt;q8x8_t&gt;(vres, requant_qinfo) : vres);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="comment">// Left-overs loop</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">for</span> (; x_off &lt; window_end_x; ++x_off)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="keywordflow">if</span> (pool_info.pool_type != <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    q32_t res = <span class="keyword">static_cast&lt;</span>q32_t<span class="keyword">&gt;</span>(0.f);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    <span class="comment">// Calculate scale</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a> = calculate_avg_scale_pool2d(</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        pool_info.exclude_padding, DataLayout::NHWC, <span class="keywordtype">id</span>, pool_size_x, pool_size_y, upper_bound_w,</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        upper_bound_h, pool_pad_left, pool_pad_top, pool_stride_x, pool_stride_y);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    <span class="comment">// Perform pooling</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                        {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                            <span class="keyword">const</span> T data =</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                      in.ptr() +</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                      (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                      (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                  x_off);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                            res += data;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> res_f          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> new_scale      = quant_rescale / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> requantized_dst = quantize&lt;T&gt;(res_f, UniformQuantizationInfo(new_scale, new_offset));</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        <span class="comment">// Store result</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = requantized_dst;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        <span class="comment">// Divide by scale and add 0.5f to round to nearest instead of rounding towards zero</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                        res = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0.5f + <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res) * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">scale</a>);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        <span class="comment">// Store result</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    T res = std::numeric_limits&lt;T&gt;::min();</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> y = pool_start_y; y &lt; pool_end_y; ++y)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> x = pool_start_x; x &lt; pool_end_x; ++x)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                        {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                            <span class="keyword">const</span> T data =</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                      in.ptr() +</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                      (x - pool_pad_left) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().y()) +</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                      (y - pool_pad_top) * <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;strides_in_bytes().z())) +</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                  x_off);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                            res = std::max(res, data);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    <span class="comment">// Store result</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    <span class="keywordflow">if</span> (src_qinfo != dst_qinfo)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">float</span> res_f                           = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(res);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = quantize&lt;T&gt;(res_f, requant_qinfo);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                        *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(out.ptr()) + x_off) = res;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        },</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        in, out);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01148">PoolingLayerInfo::exclude_padding</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00263">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00262">arm_compute::test::validation::idx_width</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01149">PoolingLayerInfo::is_global_pooling</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_core_types_8h_source.xhtml#l00233">PadStrideInfo::pad_bottom()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00218">PadStrideInfo::pad_left()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00223">PadStrideInfo::pad_right()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01147">PoolingLayerInfo::pad_stride_info</a>, <a class="el" href="_core_types_8h_source.xhtml#l00228">PadStrideInfo::pad_top()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01145">PoolingLayerInfo::pool_size</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01144">PoolingLayerInfo::pool_type</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">arm_compute::test::validation::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_core_types_8h_source.xhtml#l00192">PadStrideInfo::stride()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="combine_8h_source.xhtml#l00039">arm_compute::wrapper::vcombine()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="gethigh_8h_source.xhtml#l00039">arm_compute::wrapper::vgethigh()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="max_8h_source.xhtml#l00039">arm_compute::wrapper::vmax()</a>, <a class="el" href="mla_8h_source.xhtml#l00046">arm_compute::wrapper::vmla()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, <a class="el" href="movn_8h_source.xhtml#l00039">arm_compute::wrapper::vmovn()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>, and <a class="el" href="_window_8h_source.xhtml#l00176">Window::z()</a>.</p>

</div>
</div>
<a id="a8377fe826bf521b54420609f64305833"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8377fe826bf521b54420609f64305833">&#9670;&nbsp;</a></span>poolingMxN_qasymm8_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void poolingMxN_qasymm8_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool2d_2neon_2qasymm8_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="pool2d_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    poolingMxN_q8_neon_nhwc&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, dst1, pool_info, window_src, window);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a84b7dbf3cd11ed10bd6d276833450744"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84b7dbf3cd11ed10bd6d276833450744">&#9670;&nbsp;</a></span>poolingMxN_qasymm8_signed_neon_nhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void poolingMxN_qasymm8_signed_neon_nhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window_src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool2d_2neon_2qasymm8__signed_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="pool2d_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    poolingMxN_q8_neon_nhwc&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, dst1, pool_info, window_src, window);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="ab90f963b3f474cc05ae27dc3544df76a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab90f963b3f474cc05ae27dc3544df76a">&#9670;&nbsp;</a></span>poolingMxNxD_fp_neon_ndhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::poolingMxNxD_fp_neon_ndhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml#l00432">432</a> of file <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>     window_start_x = window.x().start();</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>     window_end_x   = window.x().end();</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x  = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    Window        window_out     = window;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">// Needed to handle loop left-over</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">switch</span> (pool_info.pool_type)</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>:</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            max_poolingMxNxD_fp_neon_ndhwc&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window_out, window_start_x, window_end_x,</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                                              window_step_x);</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">case</span> PoolingType::AVG:</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            avg_poolingMxNxD_fp_neon_ndhwc&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window_out, window_start_x, window_end_x,</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                                              window_step_x);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keywordflow">case</span> PoolingType::L2:</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            l2_poolingMxNxD_fp_neon_ndhwc&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window_out, window_start_x, window_end_x,</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                             window_step_x);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Pool operation not supported&quot;</span>);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::AVG</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a7e6aa2d53f6ee2b1a34b017fa403cb76">arm_compute::L2</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01248">Pooling3dLayerInfo::pool_type</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="abf5abf1b3ec5bf068860463401caf67e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf5abf1b3ec5bf068860463401caf67e">&#9670;&nbsp;</a></span>poolingMxNxD_q8_neon_ndhwc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::poolingMxNxD_q8_neon_ndhwc </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling3d_layer_info.xhtml">Pooling3dLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml#l00462">462</a> of file <a class="el" href="pool3d_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;{</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x = 16;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    Window        window_out    = window;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160; </div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="comment">// Needed to handle loop left-over</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    window_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">switch</span> (pool_info.pool_type)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">PoolingType::MAX</a>:</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            max_poolingMxNxD_q8_neon_ndhwc&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window_out, window_step_x);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">case</span> PoolingType::AVG:</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            avg_poolingMxNxD_q8_neon_ndhwc&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, dst0, pool_info, window_out, window_step_x);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Pool operation not supported&quot;</span>);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93afcefd647d6a866603c627b11347c707a">arm_compute::AVG</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="namespacearm__compute.xhtml#a9172da722f0a434e5cc07c0a3c115d93a26a4b44a837bf97b972628509912b4a5">arm_compute::MAX</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01248">Pooling3dLayerInfo::pool_type</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a594fa7dfda56b0775950658f6937af9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a594fa7dfda56b0775950658f6937af9c">&#9670;&nbsp;</a></span>qasymm8_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2neon_2qasymm8_8cpp_source.xhtml#l00375">375</a> of file <a class="el" href="scale_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;{</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::BILINEAR)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info() == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info())</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a9f0a2858d9233ec0443a1d1f2b3ca07c">u8_neon_scale</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, policy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                          align_corners, window);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            qasymm8_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                        align_corners, window);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        nearest_neon_scale&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, and <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml#l00737">u8_neon_scale()</a>.</p>

</div>
</div>
<a id="a5afa676c133f2bd00b896680e5176cd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5afa676c133f2bd00b896680e5176cd4">&#9670;&nbsp;</a></span>qasymm8_signed_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_signed_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml#l00362">362</a> of file <a class="el" href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::BILINEAR)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info() == <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info() &amp;&amp;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            border_mode == BorderMode::REPLICATE)</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a503eae482390645cffa1439822fa864a">s8_neon_scale</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, policy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                          align_corners, window);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            qasymm8_signed_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value,</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                               sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        nearest_neon_scale&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, <a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327a4ef59320fbe90fe47d40f1f71e4c5daa">arm_compute::REPLICATE</a>, <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml#l00714">s8_neon_scale()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a4dfe2c548a30336abb7be2dca919a71d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dfe2c548a30336abb7be2dca919a71d">&#9670;&nbsp;</a></span>qasymm8_signed_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_signed_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2sve_2qasymm8__signed_8cpp_source.xhtml#l00097">97</a> of file <a class="el" href="scale_2sve_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx, dy, border_mode, constant_border_value);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        qasymm8_signed_sve_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not Implemented&quot;</span>);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="ab8225bb56462d5dc53bcd91a7ab7e427"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8225bb56462d5dc53bcd91a7ab7e427">&#9670;&nbsp;</a></span>qasymm8_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qasymm8_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2sve_2qasymm8_8cpp_source.xhtml#l00097">97</a> of file <a class="el" href="scale_2sve_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx, dy, border_mode, constant_border_value);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        qasymm8_sve_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not Implemented&quot;</span>);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="abaad622e2ecb6e5239714d2b749c528d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaad622e2ecb6e5239714d2b749c528d">&#9670;&nbsp;</a></span>roi_align()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::roi_align </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rois</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00274">274</a> of file <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;{</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_layout();</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     values_per_roi = rois-&gt;info()-&gt;dimension(0);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> roi_list_start = window.x().start();</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> roi_list_end   = window.x().end();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::WIDTH);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a> = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::HEIGHT);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_depth  = <a class="code" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, DataLayoutDimension::CHANNEL);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_width   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">idx_width</a>);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_height  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">idx_height</a>);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_chanels = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;dimension(idx_depth);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pooled_w      = pool_info.pooled_width();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> pooled_h      = pool_info.pooled_height();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_qasymm = <a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>             *rois_ptr   = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>roi_data_type *<span class="keyword">&gt;</span>(rois-&gt;buffer());</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">const</span> QuantizationInfo &amp;rois_qinfo = rois-&gt;info()-&gt;quantization_info();</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> roi_indx = roi_list_start; roi_indx &lt; roi_list_end; ++roi_indx)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> roi_batch = rois_ptr[values_per_roi * roi_indx];</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        roi_data_type qx1 = rois_ptr[values_per_roi * roi_indx + 1];</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        roi_data_type qy1 = rois_ptr[values_per_roi * roi_indx + 2];</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        roi_data_type qx2 = rois_ptr[values_per_roi * roi_indx + 3];</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        roi_data_type qy2 = rois_ptr[values_per_roi * roi_indx + 4];</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordtype">float</span>         x1(qx1);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordtype">float</span>         x2(qx2);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordtype">float</span>         y1(qy1);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordtype">float</span>         y2(qy2);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">if</span> (is_qasymm)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            x1 = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(qx1, rois_qinfo);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            x2 = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(qx2, rois_qinfo);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            y1 = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(qy1, rois_qinfo);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            y2 = <a class="code" href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">dequantize_qasymm16</a>(qy2, rois_qinfo);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> roi_anchor_x = x1 * pool_info.spatial_scale();</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> roi_anchor_y = y1 * pool_info.spatial_scale();</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> roi_dims_x   = std::max((x2 - x1) * pool_info.spatial_scale(), 1.0f);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> roi_dims_y   = std::max((y2 - y1) * pool_info.spatial_scale(), 1.0f);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordtype">float</span>       bin_size_x   = roi_dims_x / pool_info.pooled_width();</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordtype">float</span>       bin_size_y   = roi_dims_y / pool_info.pooled_height();</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="comment">// Iterate through all feature maps</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ch = 0; ch &lt; input_chanels; ++ch)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="comment">// Iterate through all output pixels</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> py = 0; py &lt; pooled_h; ++py)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            {</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> px = 0; px &lt; pooled_w; ++px)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> region_start_x = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae34c923cebe0f52cde52dbef0eca2d5b">compute_region_coordinate</a>(px, bin_size_x, roi_anchor_x, input_width);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> region_start_y = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae34c923cebe0f52cde52dbef0eca2d5b">compute_region_coordinate</a>(py, bin_size_y, roi_anchor_y, input_height);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> region_end_x = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae34c923cebe0f52cde52dbef0eca2d5b">compute_region_coordinate</a>(px + 1, bin_size_x, roi_anchor_x, input_width);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> region_end_y =</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae34c923cebe0f52cde52dbef0eca2d5b">compute_region_coordinate</a>(py + 1, bin_size_y, roi_anchor_y, input_height);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> roi_bin_grid_x =</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                        (pool_info.sampling_ratio() &gt; 0) ? pool_info.sampling_ratio() : int(ceil(bin_size_x));</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">int</span> roi_bin_grid_y =</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                        (pool_info.sampling_ratio() &gt; 0) ? pool_info.sampling_ratio() : int(ceil(bin_size_y));</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    input_data_type out_val(0);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="keywordflow">if</span> (is_qasymm)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                    {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        out_val = roi_align_1x1_qasymm8&lt;input_data_type&gt;(</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, roi_batch, region_start_x, bin_size_x, roi_bin_grid_x, region_end_x, region_start_y,</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                            bin_size_y, roi_bin_grid_y, region_end_y, ch, output-&gt;info()-&gt;quantization_info());</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                    {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                        out_val = roi_align_1x1&lt;input_data_type&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, roi_batch, region_start_x, bin_size_x,</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                                                 roi_bin_grid_x, region_end_x, region_start_y,</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                                                 bin_size_y, roi_bin_grid_y, region_end_y, ch);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == DataLayout::NCHW)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                    {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                            output-&gt;ptr_to_element(Coordinates(px, py, ch, roi_indx)));</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        *out_ptr = out_val;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                    }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                        <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                            output-&gt;ptr_to_element(Coordinates(ch, px, py, roi_indx)));</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        *out_ptr = out_val;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                    }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00267">compute_region_coordinate()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">data_layout</a>, <a class="el" href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">arm_compute::test::validation::data_type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00537">arm_compute::dequantize_qasymm16()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00263">arm_compute::test::validation::idx_height</a>, <a class="el" href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00262">arm_compute::test::validation::idx_width</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01285">ROIPoolingLayerInfo::pooled_height()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01280">ROIPoolingLayerInfo::pooled_width()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01295">ROIPoolingLayerInfo::sampling_ratio()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01290">ROIPoolingLayerInfo::spatial_scale()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a295486f37ddf5262ab18f2e4ce1efaf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a295486f37ddf5262ab18f2e4ce1efaf6">&#9670;&nbsp;</a></span>roi_align_1x1()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">input_data_type arm_compute::cpu::roi_align_1x1 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>roi_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>bin_size_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>grid_size_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_start_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>bin_size_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>grid_size_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_end_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pz</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Average pooling over an aligned window. </p>

<p class="definition">Definition at line <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00037">37</a> of file <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> ((region_end_x &lt;= region_start_x) || (region_end_y &lt;= region_start_y))</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> input_data_type(0);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_layout();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordtype">float</span>            avg         = 0;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="comment">// Iterate through the aligned pooling region</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> iy = 0; iy &lt; grid_size_y; ++iy)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ix = 0; ix &lt; grid_size_x; ++ix)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="comment">// Align the window in the middle of every bin</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordtype">float</span> y = region_start_y + (iy + 0.5) * bin_size_y / float(grid_size_y);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordtype">float</span> x = region_start_x + (ix + 0.5) * bin_size_x / float(grid_size_x);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="comment">// Interpolation in the [0,0] [0,1] [1,0] [1,1] square</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> y_low  = y;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> x_low  = x;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> y_high = y_low + 1;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> x_high = x_low + 1;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> ly = y - y_low;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> lx = x - x_low;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> hy = 1. - ly;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> hx = 1. - lx;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w1 = hy * hx;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w2 = hy * lx;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w3 = ly * hx;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w4 = ly * lx;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == DataLayout::NCHW)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data1 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_low, y_low, pz, roi_batch)));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data2 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_high, y_low, pz, roi_batch)));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data3 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_low, y_high, pz, roi_batch)));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data4 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_high, y_high, pz, roi_batch)));</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    avg += w1 * data1 + w2 * data2 + w3 * data3 + w4 * data4;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data1 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_low, y_low, roi_batch)));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data2 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_high, y_low, roi_batch)));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data3 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_low, y_high, roi_batch)));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> data4 = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_high, y_high, roi_batch)));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    avg += w1 * data1 + w2 * data2 + w3 * data3 + w4 * data4;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        avg /= grid_size_x * grid_size_y;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">return</span> input_data_type(avg);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">data_layout</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>.</p>

<p class="reference">Referenced by <a class="el" href="reference_2_r_o_i_align_layer_8cpp_source.xhtml#l00140">arm_compute::test::validation::reference::roi_align_layer()</a>.</p>

</div>
</div>
<a id="acb7f6883b48ff894a6a0ab9eb6467be0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb7f6883b48ff894a6a0ab9eb6467be0">&#9670;&nbsp;</a></span>roi_align_1x1_qasymm8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">input_data_type arm_compute::cpu::roi_align_1x1_qasymm8 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>roi_batch</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>bin_size_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>grid_size_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_start_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>bin_size_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>grid_size_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>region_end_y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pz</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_qinfo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Average pooling over an aligned window. </p>

<p class="definition">Definition at line <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00115">115</a> of file <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> ((region_end_x &lt;= region_start_x) || (region_end_y &lt;= region_start_y))</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">return</span> input_data_type(out_qinfo.uniform().offset);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordtype">float</span>                         avg         = 0;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo input_qinfo = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>       is_qasymm_signed = <a class="code" href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">is_data_type_quantized_asymmetric_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_type());</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>      = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;info()-&gt;data_layout();</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">// Iterate through the aligned pooling region</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> iy = 0; iy &lt; grid_size_y; ++iy)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> ix = 0; ix &lt; grid_size_x; ++ix)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="comment">// Align the window in the middle of every bin</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordtype">float</span> y = region_start_y + (iy + 0.5) * bin_size_y / float(grid_size_y);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordtype">float</span> x = region_start_x + (ix + 0.5) * bin_size_x / float(grid_size_x);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="comment">// Interpolation in the [0,0] [0,1] [1,0] [1,1] square</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> y_low  = y;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> x_low  = x;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> y_high = y_low + 1;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">int</span> x_high = x_low + 1;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> ly = y - y_low;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> lx = x - x_low;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> hy = 1. - ly;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> hx = 1. - lx;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w1 = hy * hx;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w2 = hy * lx;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w3 = ly * hx;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> w4 = ly * lx;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a> == DataLayout::NCHW)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keywordflow">if</span> (is_qasymm_signed)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        <span class="keywordtype">float</span> data1 =</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                          Coordinates(x_low, y_low, pz, roi_batch))),</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        <span class="keywordtype">float</span> data2 =</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                          Coordinates(x_high, y_low, pz, roi_batch))),</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        <span class="keywordtype">float</span> data3 =</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                          Coordinates(x_low, y_high, pz, roi_batch))),</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        <span class="keywordtype">float</span> data4 =</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                          Coordinates(x_high, y_high, pz, roi_batch))),</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        avg += w1 * data1 + w2 * data2 + w3 * data3 + w4 * data4;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        <span class="keywordtype">float</span> data1 =</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_low, y_low, pz, roi_batch))),</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        <span class="keywordtype">float</span> data2 =</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_high, y_low, pz, roi_batch))),</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        <span class="keywordtype">float</span> data3 =</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_low, y_high, pz, roi_batch))),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        <span class="keywordtype">float</span> data4 =</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(x_high, y_high, pz, roi_batch))),</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                        avg += w1 * data1 + w2 * data2 + w3 * data3 + w4 * data4;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <span class="keywordflow">if</span> (is_qasymm_signed)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data1 =</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                                          Coordinates(pz, x_low, y_low, roi_batch))),</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data2 =</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                                          Coordinates(pz, x_high, y_low, roi_batch))),</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data3 =</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                                          Coordinates(pz, x_low, y_high, roi_batch))),</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data4 =</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                                          Coordinates(pz, x_high, y_high, roi_batch))),</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                                                      input_qinfo);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        avg += w1 * data1 + w2 * data2 + w3 * data3 + w4 * data4;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data1 =</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_low, y_low, roi_batch))),</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data2 =</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_high, y_low, roi_batch))),</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data3 =</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_low, y_high, roi_batch))),</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> data4 =</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                            <a class="code" href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a>(*<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>input_data_type *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>-&gt;ptr_to_element(Coordinates(pz, x_high, y_high, roi_batch))),</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                               input_qinfo);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        avg += w1 * data1 + w2 * data2 + w3 * data3 + w4 * data4;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        avg /= grid_size_x * grid_size_y;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        input_data_type res = 0;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">if</span> (is_qasymm_signed)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            res = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(avg, out_qinfo);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        {</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            res = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(avg, out_qinfo);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">data_layout</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00367">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00380">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00365">arm_compute::is_data_type_quantized_asymmetric_signed()</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a6b99f356fe3b30a2a850b5ea897c289f">arm_compute::NCHW</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00309">arm_compute::quantize_qasymm8()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00323">arm_compute::quantize_qasymm8_signed()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>.</p>

</div>
</div>
<a id="acb942e32cd7322ef1e315255f33cc176"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb942e32cd7322ef1e315255f33cc176">&#9670;&nbsp;</a></span>rounding_divide_by_exp2() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32_t arm_compute::cpu::rounding_divide_by_exp2 </td>
          <td>(</td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">61</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> int32x2_t xs = vdup_n_s32(x);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> vget_lane_s32(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#acb942e32cd7322ef1e315255f33cc176">rounding_divide_by_exp2</a>(xs, exponent), 0);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00045">rounding_divide_by_exp2()</a>.</p>

</div>
</div>
<a id="ad0b9efe43da5d21e76247e4bf586280a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0b9efe43da5d21e76247e4bf586280a">&#9670;&nbsp;</a></span>rounding_divide_by_exp2() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x2_t arm_compute::cpu::rounding_divide_by_exp2 </td>
          <td>(</td>
          <td class="paramtype">const int32x2_t &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00053">53</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> int32x2_t shift = vdup_n_s32(-exponent);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> int32x2_t fixup = vshr_n_s32(vand_s32(x, shift), 31);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> int32x2_t fixed = vqadd_s32(x, fixup);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> vrshl_s32(fixed, shift);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a0c4b348b45b7517f391ef9f95961d19f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c4b348b45b7517f391ef9f95961d19f">&#9670;&nbsp;</a></span>rounding_divide_by_exp2() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t arm_compute::cpu::rounding_divide_by_exp2 </td>
          <td>(</td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>exponent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> int32x4_t shift = vdupq_n_s32(-exponent);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> int32x4_t fixup = vshrq_n_s32(vandq_s32(x, shift), 31);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> int32x4_t fixed = vqaddq_s32(x, fixup);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> vrshlq_s32(fixed, shift);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">rounding_divide_by_exp2()</a>.</p>

</div>
</div>
<a id="ae813f6571bf298ee67ad35c1559c7441"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae813f6571bf298ee67ad35c1559c7441">&#9670;&nbsp;</a></span>run_depthwise_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::run_depthwise_float </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00340">340</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;{</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    PadStrideInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_stride_info;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  depth_multiplier = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.depth_multiplier;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    Size2D        dilation         = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dilation;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">if</span> (depth_multiplier == 1)</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        depthwise_loop_multiplier1_fp&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation, window, has_biases);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        depthwise_loop_generic_fp&lt;T&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation, depth_multiplier, window,</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                     has_biases);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a5a2b594dc6c251f07190189c716685ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a2b594dc6c251f07190189c716685ec">&#9670;&nbsp;</a></span>run_depthwise_quanitized8bit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void run_depthwise_quanitized8bit </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00559">559</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;{</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    PadStrideInfo    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_stride_info;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     depth_multiplier = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.depth_multiplier;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    Size2D           dilation         = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dilation;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    std::vector&lt;int&gt; output_multiplier;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    std::vector&lt;int&gt; output_shift;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160; </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_scale   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_scale  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keyword">auto</span>       weights_scale = weights-&gt;info()-&gt;quantization_info().scale();</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160; </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights-&gt;info()-&gt;data_type()))</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    {</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; weights-&gt;info()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>); ++i)</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            weights_scale.push_back(weights_scale.front());</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        }</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; </div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;s : weights_scale)</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        int32_t     out_mult   = 0;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        int32_t     out_shift  = 0;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier = input_scale * s / output_scale;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a>(multiplier, &amp;out_mult, &amp;out_shift);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        output_multiplier.push_back(out_mult);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        output_shift.push_back(out_shift);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160; </div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">if</span> (depth_multiplier == 1)</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    {</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        depthwise_loop_multiplier1_quantized&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation, output_multiplier,</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                                    output_shift, window, has_biases);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_pow2                 = ((depth_multiplier &amp; (depth_multiplier - 1)) == 0);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized_per_tensor = !(<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keywordflow">if</span> (is_pow2 &amp;&amp; is_quantized_per_tensor &amp;&amp; depth_multiplier &gt;= 8)</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            depthwise_loop_pow2_quantized_per_tensor&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation,</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                                            depth_multiplier, output_multiplier, output_shift, window,</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                                            has_biases);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        {</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            depthwise_loop_generic_quantized&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation, depth_multiplier,</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                                    output_multiplier, output_shift, window, has_biases);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        }</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00043">arm_compute::quantization::calculate_quantized_multiplier()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">channel_idx</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00419">arm_compute::is_data_type_quantized_per_channel()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00120">QuantizationInfo::scale()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a5063b10e78012bdbfe34caca8ea26697"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5063b10e78012bdbfe34caca8ea26697">&#9670;&nbsp;</a></span>run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5a2b594dc6c251f07190189c716685ec">arm_compute::cpu::run_depthwise_quanitized8bit</a>&lt; int8_t, int8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">neon_qp8_qs8_deptwiseconv2dnative()</a>, and <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00029">neon_qs8_deptwiseconv2dnative()</a>.</p>

</div>
</div>
<a id="a22c00c0ee5bab5833057b869cfbbf3bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22c00c0ee5bab5833057b869cfbbf3bd">&#9670;&nbsp;</a></span>run_depthwise_quanitized8bit&lt; uint8_t, int8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5a2b594dc6c251f07190189c716685ec">arm_compute::cpu::run_depthwise_quanitized8bit</a>&lt; uint8_t, int8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00040">neon_qp8_qu8_deptwiseconv2dnative()</a>.</p>

</div>
</div>
<a id="a7e11bb008b174952651f4a9946adc1a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e11bb008b174952651f4a9946adc1a4">&#9670;&nbsp;</a></span>run_depthwise_quanitized8bit&lt; uint8_t, uint8_t &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5a2b594dc6c251f07190189c716685ec">arm_compute::cpu::run_depthwise_quanitized8bit</a>&lt; uint8_t, uint8_t &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>has_biases</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00029">neon_qu8_deptwiseconv2dnative()</a>.</p>

</div>
</div>
<a id="aeda05854c52c61e264016d08bb812703"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeda05854c52c61e264016d08bb812703">&#9670;&nbsp;</a></span>s16_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s16_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00088">88</a> of file <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> in_bounds_crop_window&lt;int16_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, output_width_start,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                          output_width_limit, input_has_single_channel, is_width_flipped);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a69d4ed27232bf67f70a2344ee2524d8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69d4ed27232bf67f70a2344ee2524d8c">&#9670;&nbsp;</a></span>s16_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s16_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00053">53</a> of file <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> neon_range_function&lt;int16_t&gt;(output, start, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, window);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>.</p>

</div>
</div>
<a id="ae2aa72fde3eb94fa8822a4bb84e8d468"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2aa72fde3eb94fa8822a4bb84e8d468">&#9670;&nbsp;</a></span>s16_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s16_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml#l00760">760</a> of file <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;{</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::BILINEAR)</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    {</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        s16_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                                align_corners, window);</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    }</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    {</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        s16_neon_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    }</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a4e667bbff11c6a32d56b10f0e9626438"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e667bbff11c6a32d56b10f0e9626438">&#9670;&nbsp;</a></span>s16_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s16_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2sve_2integer_8cpp_source.xhtml#l00172">172</a> of file <a class="el" href="scale_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;{</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx, dy, border_mode, constant_border_value);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        s16_sve_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not Implemented&quot;</span>);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="a7f4b44c08f32f60bee79357a8db1ab34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f4b44c08f32f60bee79357a8db1ab34">&#9670;&nbsp;</a></span>s32_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s32_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> in_bounds_crop_window&lt;int32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, output_width_start,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                          output_width_limit, input_has_single_channel, is_width_flipped);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="afe56ca8fcab6c074fef28d73a349bdc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe56ca8fcab6c074fef28d73a349bdc3">&#9670;&nbsp;</a></span>s32_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s32_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> neon_range_function&lt;int32_t&gt;(output, start, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, window);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>.</p>

</div>
</div>
<a id="afce91e14811fc7ab82c764efb12c0443"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afce91e14811fc7ab82c764efb12c0443">&#9670;&nbsp;</a></span>s8_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s8_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">return</span> in_bounds_crop_window&lt;int8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, output_width_start,</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                                         output_width_limit, input_has_single_channel, is_width_flipped);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="aaf629d39ed5424c78a91380d89f77ea4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf629d39ed5424c78a91380d89f77ea4">&#9670;&nbsp;</a></span>s8_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s8_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> neon_range_function&lt;int8_t&gt;(output, start, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, window);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>.</p>

</div>
</div>
<a id="a503eae482390645cffa1439822fa864a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a503eae482390645cffa1439822fa864a">&#9670;&nbsp;</a></span>s8_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void s8_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml#l00714">714</a> of file <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;{</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::BILINEAR)</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    {</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        s8_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                               align_corners, window);</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    }</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    {</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not implemented&quot;</span>);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    }</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="scale_2neon_2qasymm8__signed_8cpp_source.xhtml#l00362">qasymm8_signed_neon_scale()</a>.</p>

</div>
</div>
<a id="ac48f4a6361751e9231f1df22dc15eb6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac48f4a6361751e9231f1df22dc15eb6a">&#9670;&nbsp;</a></span>saturating_doubling_high_mul() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32_t arm_compute::cpu::saturating_doubling_high_mul </td>
          <td>(</td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> vget_lane_s32(vqrdmulh_n_s32(vdup_n_s32(a), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>), 0);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="aa24e71dcbdb8bc6a6f42e5803790b71f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa24e71dcbdb8bc6a6f42e5803790b71f">&#9670;&nbsp;</a></span>saturating_doubling_high_mul() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int32x4_t arm_compute::cpu::saturating_doubling_high_mul </td>
          <td>(</td>
          <td class="paramtype">const int32x4_t &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> vqrdmulhq_n_s32(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>.</p>

</div>
</div>
<a id="abbe41cb9880a3a6a154741e478000e70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbe41cb9880a3a6a154741e478000e70">&#9670;&nbsp;</a></span>select_op()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::select_op </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>window_start_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>window_end_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">VectorType(*)(const uint8_t *)&#160;</td>
          <td class="paramname"><em>condition_conversion</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00041">41</a> of file <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#adcae039ec81e3fb90684a1c3e1e2540b">condition</a>(cond, win);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    Iterator input1(in1, win);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Iterator input2(in2, win);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    Iterator output(out, win);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        win,</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">auto</span>       output_ptr    = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> condition_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#adcae039ec81e3fb90684a1c3e1e2540b">condition</a>.ptr());</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">for</span> (; x &lt;= limit; x += window_step_x)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> c = (*condition_conversion)(condition_ptr + x);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">wrapper::vbsl</a>(c, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>));</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> c      = *(condition_ptr + x);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> a      = *(input1_ptr + x);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>      = *(input2_ptr + x);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                *(output_ptr + x) = <span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(c) ? a : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        },</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#adcae039ec81e3fb90684a1c3e1e2540b">condition</a>, input1, input2, output);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00690">arm_compute::mlgo::parser::condition()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="bsl_8h_source.xhtml#l00039">arm_compute::wrapper::vbsl()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="afa2b2016e44e25ee4937bc1bd9be8981"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa2b2016e44e25ee4937bc1bd9be8981">&#9670;&nbsp;</a></span>select_op_16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::select_op_16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00106">106</a> of file <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_step_x  = 16 / <span class="keyword">sizeof</span>(ScalarType);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    select_op&lt;ScalarType, VectorType&gt;(</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        cond, in1, in2, out, window, window_step_x, window_start_x, window_end_x, window_end_x - window_step_x,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        [](<span class="keyword">const</span> uint8_t *condition_ptr) -&gt; VectorType</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> zero =</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(0), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a>());</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(condition_ptr)), zero);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        });</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a9b064432e48e53f48155f9c9ed3a0726"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b064432e48e53f48155f9c9ed3a0726">&#9670;&nbsp;</a></span>select_op_32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::select_op_32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00123">123</a> of file <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_step_x  = 16 / <span class="keyword">sizeof</span>(ScalarType);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    select_op&lt;ScalarType, VectorType&gt;(</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        cond, in1, in2, out, window, window_step_x, window_start_x, window_end_x, window_end_x - window_step_x,</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        [](<span class="keyword">const</span> uint8_t *condition_ptr) -&gt; VectorType</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> zero =</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(0), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a>());</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(condition_ptr)))), zero);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        });</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="getlow_8h_source.xhtml#l00039">arm_compute::wrapper::vgetlow()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="movl_8h_source.xhtml#l00039">arm_compute::wrapper::vmovl()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="acc318e8b6238acea1db57f15129e346c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc318e8b6238acea1db57f15129e346c">&#9670;&nbsp;</a></span>select_op_8()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::select_op_8 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00089">89</a> of file <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_step_x  = 16 / <span class="keyword">sizeof</span>(ScalarType);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    select_op&lt;ScalarType, VectorType&gt;(</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        cond, in1, in2, out, window, window_step_x, window_start_x, window_end_x, window_end_x - window_step_x,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        [](<span class="keyword">const</span> uint8_t *condition_ptr) -&gt; VectorType</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> zero =</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(0), <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a>());</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">wrapper::vcgt</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(condition_ptr), zero);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        });</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="cgt_8h_source.xhtml#l00039">arm_compute::wrapper::vcgt()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a1196a3701dd39364fd4ffbcf8c34772f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1196a3701dd39364fd4ffbcf8c34772f">&#9670;&nbsp;</a></span>select_op_not_same_rank()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::select_op_not_same_rank </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>cond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00140">140</a> of file <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(window);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">auto</span>       output_ptr    = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out-&gt;buffer());</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> condition_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(cond-&gt;buffer());</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in1-&gt;buffer());</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in2-&gt;buffer());</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> outer_size = cond-&gt;info()-&gt;total_size() / cond-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> inner_size = (in1-&gt;info()-&gt;total_size() / in1-&gt;info()-&gt;element_size()) / outer_size;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>     = 0;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>       = 16 / in1-&gt;info()-&gt;element_size();</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; outer_size; ++i)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordtype">int</span>        x         = <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr = <span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(*(condition_ptr + i)) ? input1_ptr : input2_ptr;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">for</span> (; x &lt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + inner_size - <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>; x += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input_ptr + x));</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">if</span> (x &lt;= <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + inner_size - (<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> / 2))</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(input_ptr + x));</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            x += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a> / 2;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">for</span> (; x &lt; <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> + inner_size; ++x)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            *(output_ptr + x) = *(input_ptr + x);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a> += inner_size;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#ab988210662dbd3bf32fd563c7dd1bdbf">ITensor::buffer()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">ITensorInfo::element_size()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a18064e0011c3869d884653e9e7c47b66">ITensorInfo::total_size()</a>, <a class="el" href="load_8h_source.xhtml#l00039">arm_compute::wrapper::vload()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, and <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>.</p>

</div>
</div>
<a id="ac09fd4bf645cc493520464b767c7d872"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac09fd4bf645cc493520464b767c7d872">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">svbool_t&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">svfloat32x4_t&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svfloat32_t &amp;&#160;</td>
          <td class="paramname"><em>inv_scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00080">80</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> quantized =</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        svcreate4(svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 0), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>),</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                  svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 1), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>),</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                  svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 2), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>),</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                  svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 3), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> narrowed_bottom = svqxtnt(svqxtnb(svget4(quantized, 0)), svget4(quantized, 1));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> narrowed_top    = svqxtnt(svqxtnb(svget4(quantized, 2)), svget4(quantized, 3));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> narrowed        = svqxtnt(svqxtnb(narrowed_bottom), narrowed_top);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    svst1(pg, ptr, narrowed);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>.</p>

</div>
</div>
<a id="a83e9db0e07a3f67c702e65cc54fa9119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83e9db0e07a3f67c702e65cc54fa9119">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>rf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>invscale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00597">597</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    int32x4x4_t out = {{</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[0], invscale)),</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[1], invscale)),</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[2], invscale)),</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[3], invscale)),</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }};</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">store_quantized</a>(output_ptr, out);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">store_quantized()</a>.</p>

</div>
</div>
<a id="a0460ff15e5977217b8fae5cf6abed0b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0460ff15e5977217b8fae5cf6abed0b1">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00589">589</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;{</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovun_s16(vcombine_s16(vqmovn_s32(out.val[0]), vqmovn_s32(out.val[1])));</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovun_s16(vcombine_s16(vqmovn_s32(out.val[2]), vqmovn_s32(out.val[3])));</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    vst1q_u8(output_ptr, vcombine_u8(pa, pb));</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a981cf35141a952f493df0398da0b3d99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a981cf35141a952f493df0398da0b3d99">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00582">582</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;{</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keyword">const</span> uint8x8_t pa = vqmovn_u16(vcombine_u16(vqmovn_u32(out.val[0]), vqmovn_u32(out.val[1])));</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keyword">const</span> uint8x8_t pb = vqmovn_u16(vcombine_u16(vqmovn_u32(out.val[2]), vqmovn_u32(out.val[3])));</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    vst1q_u8(output_ptr, vcombine_u8(pa, pb));</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00725">elementwise_arithm_op_quantized_broadcast_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00673">elementwise_arithm_op_quantized_loop()</a>, <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00096">elementwise_arithmetic_quantized_op()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00826">elementwise_comp_op_quantized_broadcast_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00774">elementwise_comp_op_quantized_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00852">elementwise_comp_op_quantized_signed_broadcast_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00800">elementwise_comp_op_quantized_signed_loop()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00597">store_quantized()</a>.</p>

</div>
</div>
<a id="adf3491c5999edd9001ac739d5826cf91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf3491c5999edd9001ac739d5826cf91">&#9670;&nbsp;</a></span>store_quantized() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">svbool_t&#160;</td>
          <td class="paramname"><em>pg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">svfloat32x4_t&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svint32_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const svfloat32_t &amp;&#160;</td>
          <td class="paramname"><em>inv_scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00065">65</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;{</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> quantized =</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        svcreate4(svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 0), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>),</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                  svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 1), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>),</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                  svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 2), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>),</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                  svadd_z(pg, svcvt_s32_z(pg, svrinta_z(pg, svmul_z(pg, svget4(data, 3), inv_scale))), <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> narrowed_bottom = svqxtunt(svqxtunb(svget4(quantized, 0)), svget4(quantized, 1));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> narrowed_top    = svqxtunt(svqxtunb(svget4(quantized, 2)), svget4(quantized, 3));</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> narrowed        = svqxtnt(svqxtnb(narrowed_bottom), narrowed_top);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    svst1(pg, ptr, narrowed);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>.</p>

</div>
</div>
<a id="af77016f5946f5a276e68576bb1b68877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af77016f5946f5a276e68576bb1b68877">&#9670;&nbsp;</a></span>store_quantized_signed() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>rf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float32x4_t &amp;&#160;</td>
          <td class="paramname"><em>invscale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00615">615</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;{</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    int32x4x4_t out = {{</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[0], invscale)),</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[1], invscale)),</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[2], invscale)),</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        vcvtq_s32_f32(vmlaq_f32(<a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, rf.val[3], invscale)),</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    }};</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">store_quantized_signed</a>(output_ptr, out);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00608">store_quantized_signed()</a>.</p>

</div>
</div>
<a id="aac9f2850a80f033f33e04660ac3bbd08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac9f2850a80f033f33e04660ac3bbd08">&#9670;&nbsp;</a></span>store_quantized_signed() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::store_quantized_signed </td>
          <td>(</td>
          <td class="paramtype">int8_t *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32x4x4_t &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00608">608</a> of file <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;{</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keyword">const</span> int8x8_t pa = vqmovn_s16(vcombine_s16(vqmovn_s32(out.val[0]), vqmovn_s32(out.val[1])));</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keyword">const</span> int8x8_t pb = vqmovn_s16(vcombine_s16(vqmovn_s32(out.val[2]), vqmovn_s32(out.val[3])));</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    vst1q_s8(output_ptr, vcombine_s8(pa, pb));</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00749">elementwise_arithm_op_quantized_signed_broadcast_loop()</a>, <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00699">elementwise_arithm_op_quantized_singed_loop()</a>, and <a class="el" href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00615">store_quantized_signed()</a>.</p>

</div>
</div>
<a id="adcf3f09a8f78441a9d5899398238e4e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcf3f09a8f78441a9d5899398238e4e6">&#9670;&nbsp;</a></span>sub_q8_neon_fixedpoint_possible()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sub_q8_neon_fixedpoint_possible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">add_sub_q8_neon_fixedpoint_possible</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00045">add_sub_q8_neon_fixedpoint_possible()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cpu_sub_kernel_8cpp_source.xhtml#l00118">CpuSubKernel::configure()</a>.</p>

</div>
</div>
<a id="acee71620d39960df76ed85d99151f255"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acee71620d39960df76ed85d99151f255">&#9670;&nbsp;</a></span>sub_qasymm8_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qasymm8_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">add_sub_qasymm8_neon</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">false</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">add_sub_qasymm8_neon()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="abd3f44874d06b5e32227f1571ac4d6f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd3f44874d06b5e32227f1571ac4d6f5">&#9670;&nbsp;</a></span>sub_qasymm8_neon_fixedpoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qasymm8_neon_fixedpoint </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="sub_2neon_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2d36ee278add50c2b9f29cc6746206f1">add_sub_q8_neon_fixedpoint&lt;uint8_t&gt;</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">false</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a2d36ee278add50c2b9f29cc6746206f1">add_sub_q8_neon_fixedpoint&lt; uint8_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="a8acc2922a77f7c97eb724c61d30440fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8acc2922a77f7c97eb724c61d30440fc">&#9670;&nbsp;</a></span>sub_qasymm8_signed_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qasymm8_signed_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">add_sub_qasymm8_signed_neon</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">false</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">add_sub_qasymm8_signed_neon()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="a821669b9a7371c137101867896163a11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a821669b9a7371c137101867896163a11">&#9670;&nbsp;</a></span>sub_qasymm8_signed_neon_fixedpoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qasymm8_signed_neon_fixedpoint </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="sub_2neon_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a9a8774284dc5c784b77e14670087e590">add_sub_q8_neon_fixedpoint&lt;int8_t&gt;</a>(src0, src1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, policy, window, <span class="keyword">false</span> <span class="comment">/*is_addition*/</span>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9a8774284dc5c784b77e14670087e590">add_sub_q8_neon_fixedpoint&lt; int8_t &gt;()</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>.</p>

</div>
</div>
<a id="afe75050a14b59a82245e5ed873bdf1ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe75050a14b59a82245e5ed873bdf1ab">&#9670;&nbsp;</a></span>sub_qsymm16_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sub_qsymm16_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="sub_2neon_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(policy);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>  window_step_x         = 8;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq1_info = src0-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo iq2_info = src1-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo oq_info  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> float32x4_t vscale1    = vdupq_n_f32(iq1_info.scale);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> float32x4_t vscale2    = vdupq_n_f32(iq2_info.scale);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> float32x4_t invvscaleo = vdupq_n_f32(1.f / oq_info.scale);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>                    is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        Window                        broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Window                        non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keyword">const</span> ITensor                *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keyword">const</span> ITensor                *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo broadcast_qinfo      = broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keyword">const</span> UniformQuantizationInfo non_broadcast_qinfo = non_broadcast_tensor-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            win,</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keyword">const</span> int16_t   broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">const</span> int16x8_t broadcast_value_vec = vdupq_n_s16(broadcast_value);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">const</span> float32x4x2_t bf  = {{</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                     vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(broadcast_value_vec))), vscale2),</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                     vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(broadcast_value_vec))), vscale2),</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                }};</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span>         <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(broadcast_value) * broadcast_qinfo.scale;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="keyword">const</span> int16x8_t     a  = vld1q_s16(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keyword">const</span> float32x4x2_t af = {{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1),</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1),</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    }};</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keyword">const</span> int32x4x4_t rf = {{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0])</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                                                      : vsubq_f32(af.val[0], bf.val[0]),</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                                 invvscaleo)),</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1])</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                                                      : vsubq_f32(af.val[1], bf.val[1]),</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                                 invvscaleo)),</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        vcvtq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[0], af.val[0])</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                                                     : vsubq_f32(af.val[0], bf.val[0]),</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                                invvscaleo)),</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        vcvtq_s32_f32(vmulq_f32(is_broadcast_input_2 ? vsubq_f32(bf.val[1], af.val[1])</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                                     : vsubq_f32(af.val[1], bf.val[1]),</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                                invvscaleo)),</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    }};</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1]));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    vst1q_s16(output_ptr + x, pa);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(*(non_broadcast_input_ptr + x)) * non_broadcast_qinfo.scale;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>(is_broadcast_input_2 ? (<a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a> - afs) : (afs - <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>), oq_info);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            },</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            win,</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="keyword">const</span> int16x8_t a = vld1q_s16(input1_ptr + x);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keyword">const</span> int16x8_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = vld1q_s16(input2_ptr + x);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    <span class="keyword">const</span> float32x4x2_t af = {{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(a))), vscale1),</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(a))), vscale1),</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }};</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keyword">const</span> float32x4x2_t bf = {{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_low_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), vscale2),</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        vmulq_f32(vcvtq_f32_s32(vmovl_s16(vget_high_s16(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>))), vscale2),</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    }};</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    <span class="keyword">const</span> int32x4x2_t rf = {{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                        vcvtnq_s32_f32(vmulq_f32(vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">#else  //__aarch64__</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        vcvtq_s32_f32(vmulq_f32(vsubq_f32(af.val[0], bf.val[0]), invvscaleo)),</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        vcvtq_s32_f32(vmulq_f32(vsubq_f32(af.val[1], bf.val[1]), invvscaleo)),</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#endif //__aarch64__</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    }};</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keyword">const</span> int16x8_t pa = vcombine_s16(vqmovn_s32(rf.val[0]), vqmovn_s32(rf.val[1]));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    vst1q_s16(output_ptr + x, pa);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> afs   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input1_ptr + x))) * iq1_info.scale;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>   = <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>((*(input2_ptr + x))) * iq2_info.scale;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    *(output_ptr + x) = <a class="code" href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">quantize_qsymm16</a>((afs - <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">bfs</a>), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info());</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            },</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="_topological_sort_8cpp_source.xhtml#l00072">arm_compute::graph::bfs()</a>, <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_unstack_8cpp_source.xhtml#l00091">arm_compute::test::validation::for()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00468">arm_compute::quantize_qsymm16()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a42caf294cb15e85fa40a9bcc63c8b513"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42caf294cb15e85fa40a9bcc63c8b513">&#9670;&nbsp;</a></span>sub_same_neon()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sub_same_neon </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>SIMD vector tag type.</p>

<p class="definition">Definition at line <a class="el" href="sub_2neon_2impl_8h_source.xhtml#l00042">42</a> of file <a class="el" href="sub_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">    /** SIMD vector tag type. */</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">using</span> ExactTagType = <span class="keyword">typename</span> wrapper::traits::neon_bitvector_tag_t&lt;T, wrapper::traits::BitWidth::W128&gt;;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">bool</span> is_sat = policy == ConvertPolicy::SATURATE;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="comment">// Create input windows</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    Window input1_win = window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Window input2_win = window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape());</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    Window win = window;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    constexpr <span class="keywordtype">int</span> window_step_x         = 16 / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_start_x        = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>    window_end_x          = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>    is_broadcast_across_x = src0-&gt;info()-&gt;tensor_shape().x() != src1-&gt;info()-&gt;tensor_shape().x();</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    Iterator input1(src0, window.broadcast_if_dimension_le_one(src0-&gt;info()-&gt;tensor_shape()));</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    Iterator input2(src1, window.broadcast_if_dimension_le_one(src1-&gt;info()-&gt;tensor_shape()));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, window);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span> (is_broadcast_across_x)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span>     is_broadcast_input_2 = input2_win.x().step() == 0;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        Window         broadcast_win        = is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        Window         non_broadcast_win    = !is_broadcast_input_2 ? input2_win : input1_win;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keyword">const</span> ITensor *broadcast_tensor     = is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keyword">const</span> ITensor *non_broadcast_tensor = !is_broadcast_input_2 ? src1 : src0;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        non_broadcast_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        Iterator broadcast_input(broadcast_tensor, broadcast_win);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        Iterator non_broadcast_input(non_broadcast_tensor, non_broadcast_win);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            win,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_input_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(non_broadcast_input.ptr());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr              = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keyword">const</span> T    broadcast_value     = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(broadcast_input.ptr());</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> broadcast_value_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(broadcast_value, ExactTagType{});</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    <span class="keyword">auto</span>       res             = is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(broadcast_value_vec, non_broadcast_v)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                        : wrapper::<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">vsub</a>(broadcast_value_vec, non_broadcast_v);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="keywordflow">if</span> (is_broadcast_input_2)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        res = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(res, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(-1), ExactTagType{}));</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                {</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> non_broadcast_v = *(non_broadcast_input_ptr + x);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keyword">auto</span>       res =</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1737829276757f7640dd77e6b6c8d1f5">wrapper::sub_sat</a>(broadcast_value, non_broadcast_v) : broadcast_value - non_broadcast_v;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keywordflow">if</span> (is_broadcast_input_2)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        res = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(-1) * res;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    *(output_ptr + x) = res;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            },</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            broadcast_input, non_broadcast_input, output);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// Clear X Dimension on execution window as we handle manually</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        input1_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        input2_win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        Iterator input1(src0, input1_win);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        Iterator input2(src1, input2_win);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            win,</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input1_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input1.ptr());</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> input2_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>T *<span class="keyword">&gt;</span>(input2.ptr());</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">for</span> (; x &lt;= (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input1_ptr + x);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val2 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(input2_ptr + x);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> res  = is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">wrapper::vqsub</a>(val1, val2) : wrapper::<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">vsub</a>(val1, val2);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(output_ptr + x, res);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="comment">// Compute left-over elements</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val1   = *(input1_ptr + x);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> val2   = *(input2_ptr + x);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    *(output_ptr + x) = is_sat ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1737829276757f7640dd77e6b6c8d1f5">wrapper::sub_sat</a>(val1, val2) : val1 - val2;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            },</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            input1, input2, output);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8inl_source.xhtml#l00134">Window::broadcast_if_dimension_le_one()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6fa4729d95f983955f0d93a30179deb2b86">arm_compute::SATURATE</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="scalar_2sub_8h_source.xhtml#l00033">arm_compute::wrapper::sub_sat()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7c66505457d00ece3aa4b34cab80757d">ITensorInfo::tensor_shape()</a>, <a class="el" href="dup__n_8h_source.xhtml#l00041">arm_compute::wrapper::vdup_n()</a>, <a class="el" href="load_8h_source.xhtml#l00058">arm_compute::wrapper::vloadq()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00074">arm_compute::wrapper::vqsub()</a>, <a class="el" href="store_8h_source.xhtml#l00039">arm_compute::wrapper::vstore()</a>, <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a686a3f866d2ab2658aa1c1e30d906996"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a686a3f866d2ab2658aa1c1e30d906996">&#9670;&nbsp;</a></span>sub_same_neon_fp16()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sub_same_neon_fp16 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a82b8ac759c804bc1fb4e2d21e178fb6f">ConvertPolicy</a> &amp;&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a7f7d38e4ee6c869712f00389058605"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a7f7d38e4ee6c869712f00389058605">&#9670;&nbsp;</a></span>sve2_q8_activation_lut()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sve2_q8_activation_lut </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2dbbe2505bbf5bf5a4ab2bb234e7c48c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dbbe2505bbf5bf5a4ab2bb234e7c48c">&#9670;&nbsp;</a></span>sve2_q8_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_q8_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="sve2_2q8_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="sve2_2q8_8cpp_source.xhtml">q8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(op);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">auto</span>       win          = window;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x = window.x().end();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    win.set(0, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    Iterator src_it(in, win);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    Iterator dst_it(out, win);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        win,</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> src_ptr = src_it.ptr();</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keyword">auto</span>       dst_ptr = dst_it.ptr();</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            lut_u8_sve2(lut, 1, window_end_x, &amp;src_ptr, &amp;dst_ptr);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        },</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        src_it, dst_it);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a874c4d85f1abc927406b1c4d6f80b46e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a874c4d85f1abc927406b1c4d6f80b46e">&#9670;&nbsp;</a></span>sve2_qasymm8_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_qasymm8_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="activation_2generic_2sve2_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    va       = svdup_n_u8(<a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a(), qi_in));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vb       = svdup_n_u8(<a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b(), qi_in));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_0  = <a class="code" href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a>(0.f, qi_in);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_0 = svdup_n_u8(const_0);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1 = svdup_n_f32(1.f);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    va_f32   = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vb_f32   = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">bool</span> requant = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span> (qi_in.scale == qi_out.scale &amp;&amp; qi_in.offset == qi_out.offset)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        requant = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordtype">float</span> s  = qi_in.scale / qi_out.scale;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">float</span> o  = -qi_in.offset * s + qi_out.offset;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">auto</span>  vs = svdup_n_f32(s);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">auto</span>  vo = svdup_n_f32(o);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization with int32_t</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> voffset_in = svdup_n_s32(qi_in.offset);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    int32_t    s_s32      = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(s * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    int32_t    o_s32      = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(o * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vs_s32     = svdup_n_s32(s_s32);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vo_s32     = svdup_n_s32(o_s32);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization for leaky relu</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    int32_t    s_leaky_s32  = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(s * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a() * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    int32_t    o_leaky_s32  = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>((-qi_in.offset * s * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a() + qi_out.offset) * (1 &lt;&lt; 8),</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                                    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vs_leaky_s32 = svdup_n_s32(s_leaky_s32);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vo_leaky_s32 = svdup_n_s32(o_leaky_s32);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            svuint8_t tmp;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            svbool_t pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = svld1_u8(pg, input_ptr + x);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::RELU)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    tmp = svmax_u8_z(pg, vconst_0, vin);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    tmp = requant ? svmla_qasymm8_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    tmp = svmin_u8_z(pg, va, svmax_u8_z(pg, vconst_0, vin));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    tmp = requant ? svmla_qasymm8_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    tmp = svmin_u8_z(pg, va, svmax_u8_z(pg, vb, vin));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    tmp = svmla_qasymm8_z(pg, tmp, vs, vo);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 0))))),</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 1))))),</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 2))))),</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 3))))));</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    tmp = svquantize_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 0), vb_f32))),</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 1), vb_f32))),</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 2), vb_f32))),</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 3), vb_f32))));</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    tmp = svquantize_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    svbool_t    p0, p1, p2, p3;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    svint32x4_t tmp_dep;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="comment">// Expand to int32</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="keyword">const</span> svint32x4_t vin_s32 = svcreate4_s32(svreinterpret_s32_u32(svmovlb_u32(svmovlb_u16(vin))),</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                                              svreinterpret_s32_u32(svmovlt_u32(svmovlb_u16(vin))),</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                                                              svreinterpret_s32_u32(svmovlb_u32(svmovlt_u16(vin))),</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                              svreinterpret_s32_u32(svmovlt_u32(svmovlt_u16(vin))));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="comment">// Compare elements to input offset</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keywordflow">if</span> (qi_in.scale &gt;= 0)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        p0 = svcmplt_s32(pg, svget4_s32(vin_s32, 0), voffset_in);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        p1 = svcmplt_s32(pg, svget4_s32(vin_s32, 1), voffset_in);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        p2 = svcmplt_s32(pg, svget4_s32(vin_s32, 2), voffset_in);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        p3 = svcmplt_s32(pg, svget4_s32(vin_s32, 3), voffset_in);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        p0 = svcmpgt_s32(pg, svget4_s32(vin_s32, 0), voffset_in);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                        p1 = svcmpgt_s32(pg, svget4_s32(vin_s32, 1), voffset_in);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        p2 = svcmpgt_s32(pg, svget4_s32(vin_s32, 2), voffset_in);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        p3 = svcmpgt_s32(pg, svget4_s32(vin_s32, 3), voffset_in);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="comment">// Multiply negative elements and requantize if necessary</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    <span class="keywordflow">if</span> (requant)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        tmp_dep = svcreate4_s32(</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                          svmla_s32_m(pg, svsel(p0, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 0),</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                                      svsel(p0, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                          8),</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                          svmla_s32_m(pg, svsel(p1, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 1),</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                                      svsel(p1, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                          8),</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                          svmla_s32_m(pg, svsel(p2, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 2),</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                                      svsel(p2, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                          8),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                          svmla_s32_m(pg, svsel(p3, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 3),</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                                                      svsel(p3, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                          8));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        tmp_dep = svcreate4_s32(</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                            svasr_n_s32_m(p0, svmad_s32_m(p0, svget4_s32(vin_s32, 0), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                            svasr_n_s32_m(p1, svmad_s32_m(p1, svget4_s32(vin_s32, 1), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                            svasr_n_s32_m(p2, svmad_s32_m(p2, svget4_s32(vin_s32, 2), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                            svasr_n_s32_m(p3, svmad_s32_m(p3, svget4_s32(vin_s32, 3), vs_leaky_s32, vo_leaky_s32), 8));</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    <span class="comment">// Convert uint32 vectors to uint16 vectors (with saturation)</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> v_low_u16  = svqxtunt_s32(svqxtunb_s32(svget4_s32(tmp_dep, 0)), svget4_s32(tmp_dep, 1));</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> v_high_u16 = svqxtunt_s32(svqxtunb_s32(svget4_s32(tmp_dep, 2)), svget4_s32(tmp_dep, 3));</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="comment">// convert uint16 vectors to uint8 vectors (with saturation)</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    tmp = svqxtnt_u16(svqxtnb_u16(v_low_u16), v_high_u16);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                svst1_u8(pg, output_ptr + x, tmp);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                x += svcntb();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            } <span class="keywordflow">while</span> (svptest_any(svptrue_b8(), pg));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        },</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00309">arm_compute::quantize_qasymm8()</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00036">arm_compute::round()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::TO_NEAREST_EVEN</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a8e422502af8d8face08d6d77b25d92c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e422502af8d8face08d6d77b25d92c7">&#9670;&nbsp;</a></span>sve2_qasymm8_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_qasymm8_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> elementwise_comparison_quantized_op&lt;uint8_t&gt;(in1, in2, out, op, window);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a66f229d8302e5f6053823d609daf4f49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66f229d8302e5f6053823d609daf4f49">&#9670;&nbsp;</a></span>sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e422502af8d8face08d6d77b25d92c7">arm_compute::cpu::sve2_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a13eef2c6a0251585da5ab62ae4e5f8f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13eef2c6a0251585da5ab62ae4e5f8f9">&#9670;&nbsp;</a></span>sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e422502af8d8face08d6d77b25d92c7">arm_compute::cpu::sve2_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab0194e5261e392e91d4eafedcb763dbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0194e5261e392e91d4eafedcb763dbf">&#9670;&nbsp;</a></span>sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e422502af8d8face08d6d77b25d92c7">arm_compute::cpu::sve2_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aab7deb2c5e8a4408b3d934f37189321b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab7deb2c5e8a4408b3d934f37189321b">&#9670;&nbsp;</a></span>sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e422502af8d8face08d6d77b25d92c7">arm_compute::cpu::sve2_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad687c234ec8ab79d980eb333a64a14bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad687c234ec8ab79d980eb333a64a14bf">&#9670;&nbsp;</a></span>sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e422502af8d8face08d6d77b25d92c7">arm_compute::cpu::sve2_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa7331b85d340ec316dc8a26cf55b1e0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7331b85d340ec316dc8a26cf55b1e0a">&#9670;&nbsp;</a></span>sve2_qasymm8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a8e422502af8d8face08d6d77b25d92c7">arm_compute::cpu::sve2_qasymm8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3c95a0102a9dfe557451971fc9596436"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c95a0102a9dfe557451971fc9596436">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_qasymm8_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8_8cpp_source.xhtml">qasymm8.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> elementwise_arithmetic_quantized_op&lt;uint8_t&gt;(in1, in2, out, op, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6f4ec0de080f14131894421e583c1b58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f4ec0de080f14131894421e583c1b58">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a278e7454642b9864c9a63721064dbb2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a278e7454642b9864c9a63721064dbb2a">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a797981daa78ea5c04c9bb68d53a6f2cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a797981daa78ea5c04c9bb68d53a6f2cc">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a131c4be775c57c6b845db274b550f6c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a131c4be775c57c6b845db274b550f6c9">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a940fcc8c3dba6181911eb08cd997554c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a940fcc8c3dba6181911eb08cd997554c">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af57cc390a794bcac0a693116d3f5142e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af57cc390a794bcac0a693116d3f5142e">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac6d3ff1ec600b1e228e7c9a53f4a685a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6d3ff1ec600b1e228e7c9a53f4a685a">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acaf5ac2982c56cb9727142b5733b8d9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaf5ac2982c56cb9727142b5733b8d9b">&#9670;&nbsp;</a></span>sve2_qasymm8_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3c95a0102a9dfe557451971fc9596436">arm_compute::cpu::sve2_qasymm8_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abbe60f4e3af40412c448c9fb6f202cd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbe60f4e3af40412c448c9fb6f202cd3">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_qasymm8_signed_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="activation_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in           = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out          = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    va              = svdup_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a(), qi_in));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vb              = svdup_n_s8(<a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b(), qi_in));</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_0         = <a class="code" href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">quantize_qasymm8_signed</a>(0.f, qi_in);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_0        = svdup_n_s8(const_0);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1        = svdup_n_f32(1.f);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    va_f32          = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vb_f32          = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_6_f32     = svdup_n_f32(6.f);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_0_f32     = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_3_f32     = svdup_n_f32(3.f);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    const_inv_6_f32 = svdup_n_f32(0.166666667f);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">bool</span> requant = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> (qi_in.scale == qi_out.scale &amp;&amp; qi_in.offset == qi_out.offset)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        requant = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">float</span> s  = qi_in.scale / qi_out.scale;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">float</span> o  = -qi_in.offset * s + qi_out.offset;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">auto</span>  vs = svdup_n_f32(s);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">auto</span>  vo = svdup_n_f32(o);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization with int32_t</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> voffset_in = svdup_n_s32(qi_in.offset);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    int32_t    s_s32      = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(s * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    int32_t    o_s32      = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(o * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vs_s32     = svdup_n_s32(s_s32);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vo_s32     = svdup_n_s32(o_s32);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// Initialise scale/offset for re-quantization for leaky relu</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    int32_t    s_leaky_s32  = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>(s * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a() * (1 &lt;&lt; 8), <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    int32_t    o_leaky_s32  = <a class="code" href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">round</a>((-qi_in.offset * s * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a() + qi_out.offset) * (1 &lt;&lt; 8),</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                    <a class="code" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a>);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vs_leaky_s32 = svdup_n_s32(s_leaky_s32);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vo_leaky_s32 = svdup_n_s32(o_leaky_s32);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int8_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            svint8_t tmp;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            svbool_t pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = svld1_s8(pg, input_ptr + x);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::RELU)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    tmp = svmax_s8_z(pg, vconst_0, vin);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    tmp = requant ? svmla_qasymm8_signed_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::BOUNDED_RELU)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    tmp = svmin_s8_z(pg, va, svmax_s8_z(pg, vconst_0, vin));</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    tmp = requant ? svmla_qasymm8_signed_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    tmp = svmin_s8_z(pg, va, svmax_s8_z(pg, vb, vin));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    tmp = requant ? svmla_qasymm8_signed_z(pg, tmp, vs, vo) : tmp;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                }</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 0))))),</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 1))))),</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 2))))),</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget4_f32(vin_deq, 3))))));</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    tmp = svquantize_signed_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 0), vb_f32))),</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 1), vb_f32))),</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 2), vb_f32))),</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget4_f32(vin_deq, 3), vb_f32))));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    tmp = svquantize_signed_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::HARD_SWISH)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vin_deq = svdequantize_z(pg, vin, qi_in);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <span class="keyword">const</span> svfloat32x4_t tmp_dep = svcreate4_f32(</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 0),</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 0),</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                                                                                    const_3_f32))))),</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 1),</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 1),</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                                                                                    const_3_f32))))),</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 2),</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 2),</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                                                                                    const_3_f32))))),</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        svmul_f32_z(pg, svget4_f32(vin_deq, 3),</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                                    svmul_f32_z(pg, const_inv_6_f32,</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                                                svmin_f32_z(pg, const_6_f32,</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                                            svmax_f32_z(pg, const_0_f32,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                                                        svadd_f32_z(pg, svget4_f32(vin_deq, 3),</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                                                                                    const_3_f32))))));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    tmp = svquantize_signed_z(pg, tmp_dep, qi_out);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LEAKY_RELU)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    svbool_t    p0, p1, p2, p3;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    svint32x4_t tmp_dep;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="comment">// Expand to int32</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    <span class="keyword">const</span> svint32x4_t vin_s32 =</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                        svcreate4_s32(svmovlb_s32(svmovlb_s16(vin)), svmovlt_s32(svmovlb_s16(vin)),</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                      svmovlb_s32(svmovlt_s16(vin)), svmovlt_s32(svmovlt_s16(vin)));</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="comment">// Compare elements to input offset</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    <span class="keywordflow">if</span> (qi_in.scale &gt;= 0)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                        p0 = svcmplt_s32(pg, svget4_s32(vin_s32, 0), voffset_in);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                        p1 = svcmplt_s32(pg, svget4_s32(vin_s32, 1), voffset_in);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        p2 = svcmplt_s32(pg, svget4_s32(vin_s32, 2), voffset_in);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        p3 = svcmplt_s32(pg, svget4_s32(vin_s32, 3), voffset_in);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        p0 = svcmpgt_s32(pg, svget4_s32(vin_s32, 0), voffset_in);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        p1 = svcmpgt_s32(pg, svget4_s32(vin_s32, 1), voffset_in);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                        p2 = svcmpgt_s32(pg, svget4_s32(vin_s32, 2), voffset_in);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                        p3 = svcmpgt_s32(pg, svget4_s32(vin_s32, 3), voffset_in);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="comment">// Multiply negative elements and requantize if necessary</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keywordflow">if</span> (requant)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        tmp_dep = svcreate4_s32(</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                                          svmla_s32_m(pg, svsel(p0, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 0),</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                                                      svsel(p0, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                                          8),</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                                          svmla_s32_m(pg, svsel(p1, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 1),</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                                                      svsel(p1, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                          8),</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                          svmla_s32_m(pg, svsel(p2, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 2),</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                      svsel(p2, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                          8),</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                            svasr_n_s32_m(pg,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                          svmla_s32_m(pg, svsel(p3, vo_leaky_s32, vo_s32), svget4_s32(vin_s32, 3),</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                      svsel(p3, vs_leaky_s32, vs_s32)),</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                          8));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        tmp_dep = svcreate4_s32(</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                            svasr_n_s32_m(p0, svmad_s32_m(p0, svget4_s32(vin_s32, 0), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                            svasr_n_s32_m(p1, svmad_s32_m(p1, svget4_s32(vin_s32, 1), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                            svasr_n_s32_m(p2, svmad_s32_m(p2, svget4_s32(vin_s32, 2), vs_leaky_s32, vo_leaky_s32), 8),</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                            svasr_n_s32_m(p3, svmad_s32_m(p3, svget4_s32(vin_s32, 3), vs_leaky_s32, vo_leaky_s32), 8));</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    <span class="comment">// Convert uint32 vectors to uint16 vectors (with saturation)</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> v_low_s16  = svqxtnt_s32(svqxtnb_s32(svget4_s32(tmp_dep, 0)), svget4_s32(tmp_dep, 1));</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> v_high_s16 = svqxtnt_s32(svqxtnb_s32(svget4_s32(tmp_dep, 2)), svget4_s32(tmp_dep, 3));</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    <span class="comment">// convert uint16 vectors to uint8 vectors (with saturation)</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    tmp = svqxtnt_s16(svqxtnb_s16(v_low_s16), v_high_s16);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                svst1_s8(pg, output_ptr + x, tmp);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                x += svcntb();</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                pg = svwhilelt_b8(x, window_end_x);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            } <span class="keywordflow">while</span> (svptest_any(svptrue_b8(), pg));</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        },</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00063">UniformQuantizationInfo::offset</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00323">arm_compute::quantize_qasymm8_signed()</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00036">arm_compute::round()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::TO_NEAREST_EVEN</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a9453ef37dff125bbe1036a3c5983d22f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9453ef37dff125bbe1036a3c5983d22f">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_qasymm8_signed_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> elementwise_comparison_quantized_op&lt;int8_t&gt;(in1, in2, out, op, window);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a88eccf31c649e60c63fb44fc947a0a64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88eccf31c649e60c63fb44fc947a0a64">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9453ef37dff125bbe1036a3c5983d22f">arm_compute::cpu::sve2_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0ed3dc217a696ccd86f4714ac8e73255"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ed3dc217a696ccd86f4714ac8e73255">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9453ef37dff125bbe1036a3c5983d22f">arm_compute::cpu::sve2_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9dfdd3c82f5110ccffac9e0a7e6cf86f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9dfdd3c82f5110ccffac9e0a7e6cf86f">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9453ef37dff125bbe1036a3c5983d22f">arm_compute::cpu::sve2_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aee8567aba28b3a56ed5bd4dec3007a8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee8567aba28b3a56ed5bd4dec3007a8a">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9453ef37dff125bbe1036a3c5983d22f">arm_compute::cpu::sve2_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad953acb7596a0f5a88b868f149865d1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad953acb7596a0f5a88b868f149865d1c">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9453ef37dff125bbe1036a3c5983d22f">arm_compute::cpu::sve2_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4339d3a76719c6a6086f217cf727c2cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4339d3a76719c6a6086f217cf727c2cb">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a9453ef37dff125bbe1036a3c5983d22f">arm_compute::cpu::sve2_qasymm8_signed_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aeaf6b9bd4537ecb95726014e19a4daa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaf6b9bd4537ecb95726014e19a4daa9">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_qasymm8_signed_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="elementwise__binary_2generic_2sve2_2qasymm8__signed_8cpp_source.xhtml">qasymm8_signed.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> elementwise_arithmetic_quantized_op&lt;int8_t&gt;(in1, in2, out, op, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae68131e9a6b3a31bac12ca145b725659"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae68131e9a6b3a31bac12ca145b725659">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abc31d3b4c7b8f7fb0aa273bc7f4f457b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc31d3b4c7b8f7fb0aa273bc7f4f457b">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a789201888e4482dd041aa4237679b9f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a789201888e4482dd041aa4237679b9f4">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa90615c12bb77fd8ecedf4fe49abe5cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa90615c12bb77fd8ecedf4fe49abe5cb">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1eab8aea47093d8566cf371dceb8526e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1eab8aea47093d8566cf371dceb8526e">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1dab3765a8d7fb4a89804c3ded50862c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dab3765a8d7fb4a89804c3ded50862c">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a54a5215a043e7ba4a2a76d23eaf99d8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54a5215a043e7ba4a2a76d23eaf99d8d">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abd4fe0ceb7ed6ee4cb1f05302db86a3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd4fe0ceb7ed6ee4cb1f05302db86a3e">&#9670;&nbsp;</a></span>sve2_qasymm8_signed_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aeaf6b9bd4537ecb95726014e19a4daa9">arm_compute::cpu::sve2_qasymm8_signed_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab063d1141474a9c7a4de6dcd4de1f99a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab063d1141474a9c7a4de6dcd4de1f99a">&#9670;&nbsp;</a></span>sve2_qsymm16_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_qsymm16_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="activation_2generic_2sve2_2qsymm16_8cpp_source.xhtml">qsymm16.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_in    = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> UniformQuantizationInfo qi_out   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vconst_1 = svdup_n_f32(1.f);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    va_f32   = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                    vb_f32   = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int16_t *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span>int16_t *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            svint16_t tmp;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            svbool_t pg = svwhilelt_b16(x, window_end_x);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = svld1_s16(pg, input_ptr + x);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LOGISTIC)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    <span class="keyword">auto</span> vin_deq = svdequantize_qsymm16_z(pg, vin, qi_in.scale);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keyword">const</span> svfloat32x2_t tmp_dep = svcreate2_f32(</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget2_f32(vin_deq, 0))))),</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        svdiv_f32_z(</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                            pg, vconst_1,</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                            svadd_f32_z(pg, vconst_1, svexp_f32_z(pg, svneg_f32_z(pg, svget2_f32(vin_deq, 1))))));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    tmp = svquantize_qsymm16_z(pg, tmp_dep, qi_out.scale);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::TANH)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keyword">auto</span> vin_deq = svdequantize_qsymm16_z(pg, vin, qi_in.scale);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keyword">const</span> svfloat32x2_t tmp_dep = svcreate2_f32(</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget2_f32(vin_deq, 0), vb_f32))),</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        svmul_f32_z(pg, va_f32, svtanh_f32_z(pg, svmul_f32_z(pg, svget2_f32(vin_deq, 1), vb_f32))));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    tmp = svquantize_qsymm16_z(pg, tmp_dep, qi_out.scale);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (act == ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="comment">// De-quantize</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    <span class="keyword">auto</span> vin_deq = svdequantize_qsymm16_z(pg, vin, qi_in.scale);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="comment">// Perform activation</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="keyword">const</span> svfloat32x2_t tmp_dep =</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                        svcreate2_f32(svmin_f32_z(pg, va_f32, svmax_f32_z(pg, vb_f32, svget2_f32(vin_deq, 0))),</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                      svmin_f32_z(pg, va_f32, svmax_f32_z(pg, vb_f32, svget2_f32(vin_deq, 1))));</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="comment">// Re-quantize to new output space</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    tmp = svquantize_qsymm16_z(pg, tmp_dep, qi_out.scale);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                }</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                svst1_s16(pg, output_ptr + x, tmp);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                x += svcnth();</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                pg = svwhilelt_b16(x, window_end_x);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            } <span class="keywordflow">while</span> (svptest_any(svptrue_b16(), pg));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        },</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="aa5013e8be22e6e48f85184dcea771e4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5013e8be22e6e48f85184dcea771e4c">&#9670;&nbsp;</a></span>sve2_softmax_logits_1d_quantized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve2_softmax_logits_1d_quantized </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>TODO: (COMPMID-6505) Similar to Neon(TM), this implementation be converted to a single kernel that performs softmax operation. </p>
<p>Leaving the SVE2 code here for future references. Implementation for Neon(TM) is introduced in COMPMID-6500 </p>

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2sve2_2impl_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="softmax_2generic_2sve2_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_x     = in-&gt;info()-&gt;valid_region().anchor.x();</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_width = in-&gt;info()-&gt;valid_region().shape.x();</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span> scale_beta     = -beta * in-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>  scale_beta_vec = svdup_n_f32(scale_beta);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    Iterator   in_it(in, window);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Iterator   max_it(max, window);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Iterator   out_it(out, window);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = wrapper::svptrue&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">using</span> SVEType          = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::sve_vector&lt;ScalarType&gt;::type</a>;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> inc_1 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(svcntw());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> inc_2 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(2 * svcntw());</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> inc_3 = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(3 * svcntw());</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        window,</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in_it.ptr()) + start_x;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.ptr()) + start_x;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordtype">float</span> sum{};</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                <span class="comment">/* Get max value */</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> max_val = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(max_it.ptr());</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_max = wrapper::svdup_n(max_val);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keyword">auto</span> vec_sum_0 = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                <span class="keyword">auto</span> vec_sum_1 = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                <span class="keyword">auto</span> vec_sum_2 = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keyword">auto</span> vec_sum_3 = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                <span class="comment">/* Loop over row and compute exponentials and sum */</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordtype">int</span>      x    = 0;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                svbool_t pg   = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                svbool_t pg_0 = svunpklo(svunpklo(pg));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                svbool_t pg_1 = svunpkhi(svunpklo(pg));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                svbool_t pg_2 = svunpklo(svunpkhi(pg));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                svbool_t pg_3 = svunpkhi(svunpkhi(pg));</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vec_elements     = svld1(pg, in_ptr + x);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> vec_elements_sub = svreinterpret_u8(svsub_z(pg, vec_max, vec_elements));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keyword">auto</span> vec_elements_flt_0 = svcvt_f32_z(pg_0, svunpklo(svunpklo(vec_elements_sub)));</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keyword">auto</span> vec_elements_flt_1 = svcvt_f32_z(pg_1, svunpkhi(svunpklo(vec_elements_sub)));</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="keyword">auto</span> vec_elements_flt_2 = svcvt_f32_z(pg_2, svunpklo(svunpkhi(vec_elements_sub)));</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keyword">auto</span> vec_elements_flt_3 = svcvt_f32_z(pg_3, svunpkhi(svunpkhi(vec_elements_sub)));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                        vec_elements_flt_0 = svmul_f32_z(pg_0, vec_elements_flt_0, scale_beta_vec);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        vec_elements_flt_1 = svmul_f32_z(pg_1, vec_elements_flt_1, scale_beta_vec);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        vec_elements_flt_2 = svmul_f32_z(pg_2, vec_elements_flt_2, scale_beta_vec);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        vec_elements_flt_3 = svmul_f32_z(pg_3, vec_elements_flt_3, scale_beta_vec);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                        vec_sum_0          = svadd_f32_m(pg_0, vec_sum_0, svexp_f32_z(pg_0, vec_elements_flt_0));</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        vec_sum_1          = svadd_f32_m(pg_1, vec_sum_1, svexp_f32_z(pg_1, vec_elements_flt_1));</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        vec_sum_2          = svadd_f32_m(pg_2, vec_sum_2, svexp_f32_z(pg_2, vec_elements_flt_2));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        vec_sum_3          = svadd_f32_m(pg_3, vec_sum_3, svexp_f32_z(pg_3, vec_elements_flt_3));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        vec_elements_flt_0 = svexp_f32_z(pg_0, svmul_f32_z(pg_0, vec_elements_flt_0, scale_beta_vec));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        vec_elements_flt_1 = svexp_f32_z(pg_1, svmul_f32_z(pg_1, vec_elements_flt_1, scale_beta_vec));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        vec_elements_flt_2 = svexp_f32_z(pg_2, svmul_f32_z(pg_2, vec_elements_flt_2, scale_beta_vec));</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                        vec_elements_flt_3 = svexp_f32_z(pg_3, svmul_f32_z(pg_3, vec_elements_flt_3, scale_beta_vec));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        vec_sum_0          = svadd_f32_m(pg_0, vec_sum_0, vec_elements_flt_0);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                        vec_sum_1          = svadd_f32_m(pg_1, vec_sum_1, vec_elements_flt_1);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        vec_sum_2          = svadd_f32_m(pg_2, vec_sum_2, vec_elements_flt_2);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        vec_sum_3          = svadd_f32_m(pg_3, vec_sum_3, vec_elements_flt_3);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    }</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    svst1_f32(pg_0, tmp_ptr + x, vec_elements_flt_0);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    svst1_f32(pg_1, tmp_ptr + x + inc_1, vec_elements_flt_1);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    svst1_f32(pg_2, tmp_ptr + x + inc_2, vec_elements_flt_2);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    svst1_f32(pg_3, tmp_ptr + x + inc_3, vec_elements_flt_3);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    pg   = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    pg_0 = svunpklo(svunpklo(pg));</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    pg_1 = svunpkhi(svunpklo(pg));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    pg_2 = svunpklo(svunpkhi(pg));</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    pg_3 = svunpkhi(svunpkhi(pg));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="comment">/* Reduce sum */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_sum = svadd_f32_z(all_true_pg, svadd_f32_z(all_true_pg, vec_sum_0, vec_sum_1),</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                                 svadd_f32_z(all_true_pg, vec_sum_2, vec_sum_3));</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                sum                = svaddv_f32(all_true_pg, vec_sum);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="comment">/* Run remaining elements */</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                x = 0;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    sum = std::log(sum);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    sum = 256.f / sum;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                }</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                constexpr <span class="keywordtype">bool</span> is_qasymm8_signed = std::is_same&lt;ScalarType, qasymm8_signed_t&gt;::value;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="comment">/* Loop over row and compute softmax */</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordtype">int</span>      x    = 0;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                svbool_t pg   = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                svbool_t pg_0 = svunpklo(svunpklo(pg));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                svbool_t pg_1 = svunpkhi(svunpklo(pg));</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                svbool_t pg_2 = svunpklo(svunpkhi(pg));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                svbool_t pg_3 = svunpkhi(svunpkhi(pg));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    <span class="keyword">auto</span> vec_in_0 = svld1_f32(pg_0, tmp_ptr + x);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    <span class="keyword">auto</span> vec_in_1 = svld1_f32(pg_1, tmp_ptr + x + inc_1);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="keyword">auto</span> vec_in_2 = svld1_f32(pg_2, tmp_ptr + x + inc_2);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keyword">auto</span> vec_in_3 = svld1_f32(pg_3, tmp_ptr + x + inc_3);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    svfloat32_t res_0{};</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    svfloat32_t res_1{};</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    svfloat32_t res_2{};</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    svfloat32_t res_3{};</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        res_0 = svsub_f32_z(pg_0, vec_in_0, svdup_n_f32(sum));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                        res_1 = svsub_f32_z(pg_1, vec_in_1, svdup_n_f32(sum));</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                        res_2 = svsub_f32_z(pg_2, vec_in_2, svdup_n_f32(sum));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        res_3 = svsub_f32_z(pg_3, vec_in_3, svdup_n_f32(sum));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        res_0 = svmul_f32_z(pg_0, vec_in_0, svdup_n_f32(sum));</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                        res_1 = svmul_f32_z(pg_1, vec_in_1, svdup_n_f32(sum));</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        res_2 = svmul_f32_z(pg_2, vec_in_2, svdup_n_f32(sum));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                        res_3 = svmul_f32_z(pg_3, vec_in_3, svdup_n_f32(sum));</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        <span class="keywordflow">if</span> (is_qasymm8_signed)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                        {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> offset_vec = svdup_n_f32(128.f);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                            res_0                 = svsub_z(pg_0, res_0, offset_vec);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                            res_1                 = svsub_z(pg_1, res_1, offset_vec);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                            res_2                 = svsub_z(pg_2, res_2, offset_vec);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                            res_3                 = svsub_z(pg_3, res_3, offset_vec);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                        }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="comment">// Store value</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> out = convert_float_to_int&lt;SVEType&gt;(res_0, res_1, res_2, res_3);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    svst1(pg, out_ptr + x, out);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    pg   = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    pg_0 = svunpklo(svunpklo(pg));</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    pg_1 = svunpkhi(svunpklo(pg));</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    pg_2 = svunpklo(svunpkhi(pg));</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    pg_3 = svunpkhi(svunpkhi(pg));</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        },</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        in_it, max_it, out_it);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00062">UniformQuantizationInfo::scale</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00338">type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo::uniform()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>.</p>

</div>
</div>
<a id="a6474bcd414bfe7b2450dd6578099c4c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6474bcd414bfe7b2450dd6578099c4c9">&#9670;&nbsp;</a></span>sve_fp16_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sve_fp16_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a15366b69756528ef0aa3070728aeae7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15366b69756528ef0aa3070728aeae7f">&#9670;&nbsp;</a></span>sve_fp16_activation_lut()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sve_fp16_activation_lut </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7cd05ed6561d49b62c5201be588b2f21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cd05ed6561d49b62c5201be588b2f21">&#9670;&nbsp;</a></span>sve_fp16_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sve_fp16_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abf9bcd0a1f73fa33944c7bd4d12041cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf9bcd0a1f73fa33944c7bd4d12041cd">&#9670;&nbsp;</a></span>sve_fp16_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sve_fp16_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0b93b94881438f1871032adbdceb2958"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b93b94881438f1871032adbdceb2958">&#9670;&nbsp;</a></span>sve_fp16_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_compute::cpu::sve_fp16_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab01d09b8c1aea6b452dfebb7db046577"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab01d09b8c1aea6b452dfebb7db046577">&#9670;&nbsp;</a></span>sve_fp32_activation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_fp32_activation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="cpu_2kernels_2activation_2generic_2sve_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span>                                    window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">ActivationLayerInfo::ActivationFunction</a> act            = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.activation();</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Window win_collapsed = window.collapse_if_possible(window, Window::DimZ);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    win_collapsed.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_collapsed);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    Iterator output(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_collapsed);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_1          = svdup_n_f32(1.f);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_0          = svdup_n_f32(0.f);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_6          = svdup_n_f32(6.f);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_3          = svdup_n_f32(3.f);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> const_inv_6      = svdup_n_f32(0.166666667f);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> soft_relu_thresh = svdup_n_f32(16.63553047f);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> va = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.a());</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> vb = svdup_n_f32(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>.b());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        win_collapsed,</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> input_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> output_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            svfloat32_t tmp;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="comment">// Compute S elements per iteration</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            svbool_t pg = svwhilelt_b32(x, window_end_x);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vin = svld1_f32(pg, input_ptr + x);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">switch</span> (act)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ABS:</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                        tmp = svabs_f32_z(pg, vin);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LINEAR:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        tmp = svmla_f32_z(pg, vb, va, vin);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LOGISTIC:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                        tmp = svinv_f32_z(pg, svadd_f32_z(pg, const_1, svexp_f32_z(pg, svneg_f32_z(pg, vin))));</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::RELU:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        tmp = svmax_f32_z(pg, const_0, vin);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::BOUNDED_RELU:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        tmp = svmin_f32_z(pg, va, svmax_f32_z(pg, const_0, vin));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LU_BOUNDED_RELU:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                        tmp = svmin_f32_z(pg, va, svmax_f32_z(pg, vb, vin));</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::LEAKY_RELU:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        tmp = svadd_f32_z(pg, svmul_f32_z(pg, svmin_f32_z(pg, vin, const_0), va),</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                          svmax_f32_z(pg, vin, const_0));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SOFT_RELU:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                        tmp = svsel_f32(svcmpgt_f32(pg, vin, soft_relu_thresh), vin,</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                        svlog_f32_z(pg, svadd_f32_z(pg, const_1, svexp_f32_z(pg, vin))));</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::ELU:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        tmp = svsel_f32(svcmpgt_f32(pg, vin, const_0), vin,</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                        svmul_f32_z(pg, va, svsub_f32_z(pg, svexp_f32_z(pg, vin), const_1)));</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQRT:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        tmp = svsqrt_f32_z(pg, vin);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SQUARE:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                        tmp = svmul_f32_z(pg, vin, vin);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::TANH:</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                        tmp = svmul_f32_z(pg, va, svtanh_f32_z(pg, svmul_f32_z(pg, vb, vin)));</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::IDENTITY:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                        tmp = vin;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::HARD_SWISH:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        tmp = svmul_f32_z(</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                            pg, vin,</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                            svmul_f32_z(</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                pg, const_inv_6,</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                                svmin_f32_z(pg, const_6, svmax_f32_z(pg, const_0, svadd_f32_z(pg, vin, const_3)))));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">case</span> ActivationLayerInfo::ActivationFunction::SWISH:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        tmp = svmul_f32_z(</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                            pg, vin,</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                            svinv_f32_z(pg, svadd_f32_z(pg, const_1,</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                                                        svexp_f32_z(pg, svneg_f32_z(pg, svmul_f32_z(pg, va, vin))))));</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Unsupported activation function&quot;</span>);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                svst1_f32(pg, output_ptr + x, tmp);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                x += svcntw();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                pg = svwhilelt_b32(x, window_end_x);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            } <span class="keywordflow">while</span> (svptest_any(svptrue_b32(), pg));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        },</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00047">Window::DimZ</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="aa48efa48628548d9a7fc080a0a074ccd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa48efa48628548d9a7fc080a0a074ccd">&#9670;&nbsp;</a></span>sve_fp32_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_fp32_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2sve_2fp32_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2sve_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> elementwise_comparison_op&lt;float&gt;(in1, in2, out, op, window);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a6bfaceb243768eb0bc319d9d91b1695f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bfaceb243768eb0bc319d9d91b1695f">&#9670;&nbsp;</a></span>sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa48efa48628548d9a7fc080a0a074ccd">arm_compute::cpu::sve_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7cfa194d2b37e290bc4ce16b7e0f139c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cfa194d2b37e290bc4ce16b7e0f139c">&#9670;&nbsp;</a></span>sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa48efa48628548d9a7fc080a0a074ccd">arm_compute::cpu::sve_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2e21843bb90caa3548333f95fcd41db1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e21843bb90caa3548333f95fcd41db1">&#9670;&nbsp;</a></span>sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa48efa48628548d9a7fc080a0a074ccd">arm_compute::cpu::sve_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac654e16dcb588358533d0eb8330d2448"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac654e16dcb588358533d0eb8330d2448">&#9670;&nbsp;</a></span>sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa48efa48628548d9a7fc080a0a074ccd">arm_compute::cpu::sve_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa4719e44b87bc440a656c9df41ead408"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4719e44b87bc440a656c9df41ead408">&#9670;&nbsp;</a></span>sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa48efa48628548d9a7fc080a0a074ccd">arm_compute::cpu::sve_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a671a93238626dd044d4265e5c880ee9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a671a93238626dd044d4265e5c880ee9d">&#9670;&nbsp;</a></span>sve_fp32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aa48efa48628548d9a7fc080a0a074ccd">arm_compute::cpu::sve_fp32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e3db6438b14b698362aed08c3042549"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e3db6438b14b698362aed08c3042549">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_fp32_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2sve_2fp32_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="cpu_2kernels_2elementwise__binary_2generic_2sve_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3a984f3b544f65c7fa631b0e25c35644">elementwise_arithmetic_op&lt;float32_t&gt;</a>(in1, in2, out, op, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3a984f3b544f65c7fa631b0e25c35644">elementwise_arithmetic_op&lt; float32_t &gt;()</a>.</p>

</div>
</div>
<a id="a63d98e110573bfc3553312663fecde4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63d98e110573bfc3553312663fecde4e">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab2a79419570cf999bccba826a1b62e98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2a79419570cf999bccba826a1b62e98">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad1a4bcb89dc1eb9c566f8d5a83d1c91a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1a4bcb89dc1eb9c566f8d5a83d1c91a">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acfe00af03f8c7255fa6d0a1246d3591f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfe00af03f8c7255fa6d0a1246d3591f">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a08f0a6abde67075e8d1c99e631ec30ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08f0a6abde67075e8d1c99e631ec30ab">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aee60f20ae5553d638819a20e7b0afe28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee60f20ae5553d638819a20e7b0afe28">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a34b8733d2c94b6d1a49f6bdad330f3f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34b8733d2c94b6d1a49f6bdad330f3f9">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0a73274ae11d9fb623636994fbe32e92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a73274ae11d9fb623636994fbe32e92">&#9670;&nbsp;</a></span>sve_fp32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a1e3db6438b14b698362aed08c3042549">arm_compute::cpu::sve_fp32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a42dda581086a3bdea7efcbc01914dc64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42dda581086a3bdea7efcbc01914dc64">&#9670;&nbsp;</a></span>sve_fp32_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_fp32_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2elementwise__unary_2generic_2sve_2fp32_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="cpu_2kernels_2elementwise__unary_2generic_2sve_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(lut);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a77512808087f88d133abae9a79c0e180">elementwise_sve_op&lt;float32_t&gt;</a>(in, out, window, op);</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a77512808087f88d133abae9a79c0e180">elementwise_sve_op&lt; float32_t &gt;()</a>.</p>

</div>
</div>
<a id="a55285cff4817fd07fc12c9a63ac6da0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55285cff4817fd07fc12c9a63ac6da0c">&#9670;&nbsp;</a></span>sve_logits_1d_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_logits_1d_max </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>TODO: (COMPMID-6505) Similar to Neon(TM), this implementation be converted to a single kernel that performs softmax operation. </p>
<p>Leaving the SVE code here for future references. Implementation for Neon(TM) is introduced in COMPMID-6500 </p>

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg    = wrapper::svptrue&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_start_x = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().start());</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> window_end_x   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(window.x().end());</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    Window win{window};</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    win.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    Iterator <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>(in, win);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    Iterator output(out, win);</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        win,</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="comment">// Get pointers</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.ptr());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(output.ptr());</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="comment">// Init max value</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">auto</span> vec_max = wrapper::svdup_n(support::cpp11::lowest&lt;ScalarType&gt;());</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordtype">int</span>      x  = window_start_x;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">do</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> current_value = svld1(pg, in_ptr + x);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                vec_max                  = svmax_m(pg, vec_max, current_value);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, window_end_x);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keyword">auto</span> max_val = svmaxv(all_true_pg, vec_max);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            *out_ptr = max_val;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        },</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="a49b16389b2a82a84265a682a75c010d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49b16389b2a82a84265a682a75c010d1">&#9670;&nbsp;</a></span>sve_s16_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_s16_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00139">139</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a445e8f34f62074a5a635cd34b1c926d7">elementwise_comparison_op&lt;int16_t&gt;</a>(in1, in2, out, op, window);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a445e8f34f62074a5a635cd34b1c926d7">elementwise_comparison_op&lt; int16_t &gt;()</a>.</p>

</div>
</div>
<a id="a7cf7b66ba4d9fd274b32eaedfab958d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cf7b66ba4d9fd274b32eaedfab958d1">&#9670;&nbsp;</a></span>sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">arm_compute::cpu::sve_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a04b9502d6d1490ed94ea0b40103ee04a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04b9502d6d1490ed94ea0b40103ee04a">&#9670;&nbsp;</a></span>sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">arm_compute::cpu::sve_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3594cfaf53e53e953183c0df893cf006"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3594cfaf53e53e953183c0df893cf006">&#9670;&nbsp;</a></span>sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">arm_compute::cpu::sve_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac37db9604164425c8af90176d8ee03d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac37db9604164425c8af90176d8ee03d7">&#9670;&nbsp;</a></span>sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">arm_compute::cpu::sve_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad39a3517b07c7a672d80275e81d2f458"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad39a3517b07c7a672d80275e81d2f458">&#9670;&nbsp;</a></span>sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">arm_compute::cpu::sve_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af171684aa5092d42ee1c19b9394e47df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af171684aa5092d42ee1c19b9394e47df">&#9670;&nbsp;</a></span>sve_s16_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a49b16389b2a82a84265a682a75c010d1">arm_compute::cpu::sve_s16_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5e3c86bcb110d6ca97a63a429b499e55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e3c86bcb110d6ca97a63a429b499e55">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_s16_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00071">71</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a45b95eaeb59fa40d8fb73c6a0b70fa98">elementwise_arithmetic_op&lt;int16_t&gt;</a>(in1, in2, out, op, window);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a45b95eaeb59fa40d8fb73c6a0b70fa98">elementwise_arithmetic_op&lt; int16_t &gt;()</a>.</p>

</div>
</div>
<a id="a3bb80197ffeedd6c6320406551ed7199"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bb80197ffeedd6c6320406551ed7199">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a45090ead2f890c4ca3d80496cf49ca5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45090ead2f890c4ca3d80496cf49ca5e">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8faee508ea0f1c15da7db9c11285ea05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8faee508ea0f1c15da7db9c11285ea05">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa956575ffcc07bd978c6e5ebd32baecc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa956575ffcc07bd978c6e5ebd32baecc">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5cd151e43c3ee27e45f73b33ec1031d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cd151e43c3ee27e45f73b33ec1031d6">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad341fee8320dae165cb5f476e8ac886e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad341fee8320dae165cb5f476e8ac886e">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac6f88f73843af6e83339f45164625064"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6f88f73843af6e83339f45164625064">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6bb41a3a123953953908d673afc6d931"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb41a3a123953953908d673afc6d931">&#9670;&nbsp;</a></span>sve_s16_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a5e3c86bcb110d6ca97a63a429b499e55">arm_compute::cpu::sve_s16_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abd0e30e25070c711398b9dd70a0efcec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd0e30e25070c711398b9dd70a0efcec">&#9670;&nbsp;</a></span>sve_s32_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_s32_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00169">169</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a428217640659bfcde131837f375d6769">elementwise_comparison_op&lt;int32_t&gt;</a>(in1, in2, out, op, window);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a428217640659bfcde131837f375d6769">elementwise_comparison_op&lt; int32_t &gt;()</a>.</p>

</div>
</div>
<a id="acee8c4e7eaaa3128833e155c2cadef62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acee8c4e7eaaa3128833e155c2cadef62">&#9670;&nbsp;</a></span>sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">arm_compute::cpu::sve_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa7382dcd41afd0835a27912f35328c82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7382dcd41afd0835a27912f35328c82">&#9670;&nbsp;</a></span>sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">arm_compute::cpu::sve_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8f4cf6d08469389ce4a2ff0fa5422abc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f4cf6d08469389ce4a2ff0fa5422abc">&#9670;&nbsp;</a></span>sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">arm_compute::cpu::sve_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a650e38245db43187e0f29ed6dbc45679"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a650e38245db43187e0f29ed6dbc45679">&#9670;&nbsp;</a></span>sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">arm_compute::cpu::sve_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac94c8f6370b6d2330ad9fe9d86828deb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac94c8f6370b6d2330ad9fe9d86828deb">&#9670;&nbsp;</a></span>sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">arm_compute::cpu::sve_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4c4496a042e47d86d98db772eab20601"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c4496a042e47d86d98db772eab20601">&#9670;&nbsp;</a></span>sve_s32_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#abd0e30e25070c711398b9dd70a0efcec">arm_compute::cpu::sve_s32_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaaf811068ee1b93b346bed157516baaf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaf811068ee1b93b346bed157516baaf">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_s32_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ae1cab9e8929674344a45c9331a64085f">elementwise_arithmetic_op&lt;int32_t&gt;</a>(in1, in2, out, op, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#ae1cab9e8929674344a45c9331a64085f">elementwise_arithmetic_op&lt; int32_t &gt;()</a>.</p>

</div>
</div>
<a id="a5123f3ad297040d12571b93b7b175dc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5123f3ad297040d12571b93b7b175dc4">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::ADD &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea9eeb52badb613229884838847294b90d">ArithmeticOperation::ADD</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="add1739093ecca6210c06c628d5606112"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add1739093ecca6210c06c628d5606112">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::DIV &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea29bbf66f7f8529ec47e394fb5a36c646">ArithmeticOperation::DIV</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a82c00d67f2ff19378e13bb41acbc9193"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82c00d67f2ff19378e13bb41acbc9193">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::MAX &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea26a4b44a837bf97b972628509912b4a5">ArithmeticOperation::MAX</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afca779fe4d06c69e187a1b02b684c4b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afca779fe4d06c69e187a1b02b684c4b6">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::MIN &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeace31e2a082d17e038fcc6e3006166653">ArithmeticOperation::MIN</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6745544148d28e221195fecda70f837c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6745544148d28e221195fecda70f837c">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::POWER &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aeac9c9c146c630ca5ef9197c73c032f4a6">ArithmeticOperation::POWER</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2ca1be328b9aa1346a52fa1cbfb6939b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ca1be328b9aa1346a52fa1cbfb6939b">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::PRELU &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea25c5689f5cf73ac778d6aec298e02a7f">ArithmeticOperation::PRELU</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7d5148c90d1c207a0d7c29b92e80793f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d5148c90d1c207a0d7c29b92e80793f">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::SQUARED_DIFF &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea46ea186b87dc545033d86ba8d6e63916">ArithmeticOperation::SQUARED_DIFF</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab8a5bdf06d4d0540165863c7202a11ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8a5bdf06d4d0540165863c7202a11ea">&#9670;&nbsp;</a></span>sve_s32_elementwise_binary&lt; ArithmeticOperation::SUB &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#aaaf811068ee1b93b346bed157516baaf">arm_compute::cpu::sve_s32_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a23d9f0c01c9e120dfb828ee922b7a8aea241dd841abade20fcb27b8a9f494e1eb">ArithmeticOperation::SUB</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a88991a206d5322d7d289bc4c4a0af226"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88991a206d5322d7d289bc4c4a0af226">&#9670;&nbsp;</a></span>sve_s32_elementwise_unary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_s32_elementwise_unary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5dad01b7eab116403241313417e0936d">ElementWiseUnary</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>lut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__unary_2generic_2sve_2integer_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="elementwise__unary_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(lut);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3e280a9f427dfc6c0f690c7083cba34d">elementwise_sve_op&lt;int32_t&gt;</a>(in, out, window, op);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, and <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a3e280a9f427dfc6c0f690c7083cba34d">elementwise_sve_op&lt; int32_t &gt;()</a>.</p>

</div>
</div>
<a id="a36b9463036932300ebfc671d0efeee39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36b9463036932300ebfc671d0efeee39">&#9670;&nbsp;</a></span>sve_softmax_logits_1d_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_softmax_logits_1d_float </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>max</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *const&#160;</td>
          <td class="paramname"><em>tmp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float&#160;</td>
          <td class="paramname"><em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_log</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml#l00078">78</a> of file <a class="el" href="softmax_2generic_2sve_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> start_x     = in-&gt;info()-&gt;valid_region().anchor.x();</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> input_width = in-&gt;info()-&gt;valid_region().shape.x();</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    Iterator in_it(in, window);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    Iterator max_it(max, window);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    Iterator out_it(out, window);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> all_true_pg = wrapper::svptrue&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        window,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="comment">/* Get pointers */</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in_ptr  = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(in_it.ptr()) + start_x;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> out_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(out_it.ptr()) + start_x;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> tmp_ptr = <span class="keyword">reinterpret_cast&lt;</span>ScalarType *<span class="keyword">&gt;</span>(tmp);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            ScalarType sum{0};</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="comment">/* Compute exponentials and sum */</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="comment">/* Get max value */</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> max_val  = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ScalarType *<span class="keyword">&gt;</span>(max_it.ptr());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_max  = wrapper::svdup_n(max_val);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_beta = wrapper::svdup_n(<span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(beta));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="comment">/* Init sum to zero */</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keyword">auto</span> vec_sum = wrapper::svdup_n(<span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(0));</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="comment">/* Loop over row and compute exponentials and sum */</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordtype">int</span>      x  = 0;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="keyword">auto</span> vec_elements = svld1(pg, in_ptr + x);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    vec_elements      = svmul_z(pg, svsub_z(pg, vec_elements, vec_max), vec_beta);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">if</span> (!is_log)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        vec_elements = wrapper::svexp_z(pg, vec_elements);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                        vec_sum      = svadd_m(pg, vec_sum, vec_elements);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                    svst1(pg, tmp_ptr + x, vec_elements);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        vec_sum = svadd_m(pg, vec_sum, wrapper::svexp_z(pg, vec_elements));</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="comment">/* Reduce sum */</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                sum = svaddv(all_true_pg, vec_sum);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    sum = <span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(std::log(sum));</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    sum = ScalarType(1) / sum;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="comment">/* Normalize exponentials */</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="comment">/* Loop over row and compute softmax */</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordtype">int</span>      x  = 0;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                svbool_t pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">do</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    <span class="keyword">auto</span> vec_in           = svld1(pg, tmp_ptr + x);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="keyword">auto</span> normalized_value = wrapper::svdup_n(<span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(0));</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    <span class="keywordflow">if</span> (is_log)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        normalized_value = svsub_z(pg, vec_in, wrapper::svdup_n(<span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(sum)));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        normalized_value = svmul_z(pg, vec_in, wrapper::svdup_n(<span class="keyword">static_cast&lt;</span>ScalarType<span class="keyword">&gt;</span>(sum)));</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    svst1(pg, out_ptr + x, normalized_value);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    x += wrapper::svcnt&lt;ScalarType&gt;();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    pg = wrapper::svwhilelt&lt;ScalarType&gt;(x, input_width);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                } <span class="keywordflow">while</span> (svptest_any(all_true_pg, pg));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        },</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        in_it, max_it, out_it);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a74dfd07380a290c34fe7c8e065029b95">ITensorInfo::valid_region()</a>, and <a class="el" href="_dimensions_8h_source.xhtml#l00086">Dimensions&lt; T &gt;::x()</a>.</p>

</div>
</div>
<a id="a52656637b2039572e6a51a10d9384823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52656637b2039572e6a51a10d9384823">&#9670;&nbsp;</a></span>sve_u8_comparison_elementwise_binary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sve_u8_comparison_elementwise_binary </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml#l00109">109</a> of file <a class="el" href="elementwise__binary_2generic_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a84c6e004ed6f806afa00c74dd7ff1440">elementwise_comparison_op&lt;uint8_t&gt;</a>(in1, in2, out, op, window);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a84c6e004ed6f806afa00c74dd7ff1440">elementwise_comparison_op&lt; uint8_t &gt;()</a>.</p>

</div>
</div>
<a id="a4d141d930d36dc163914160758e1f831"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d141d930d36dc163914160758e1f831">&#9670;&nbsp;</a></span>sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Equal &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">arm_compute::cpu::sve_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58caf5f286e73bda105e538310b3190f75c5">ComparisonOperation::Equal</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5e19625bfb223cbdd32d0e16ceeda021"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e19625bfb223cbdd32d0e16ceeda021">&#9670;&nbsp;</a></span>sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Greater &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">arm_compute::cpu::sve_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca8768a6821cd735aea4f5b0df88c1fc6a">ComparisonOperation::Greater</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad82c8006a7d3836bf07a99ccb918db87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad82c8006a7d3836bf07a99ccb918db87">&#9670;&nbsp;</a></span>sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::GreaterEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">arm_compute::cpu::sve_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca758b05d899def79c9eb864ad4f96be1f">ComparisonOperation::GreaterEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a011aee7952393c8bdd5013964a526c5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a011aee7952393c8bdd5013964a526c5a">&#9670;&nbsp;</a></span>sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::Less &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">arm_compute::cpu::sve_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca1cfdf0e8d0c87a228c1f40d9bee7888b">ComparisonOperation::Less</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a466970007f65bc27a53326e90961dddd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a466970007f65bc27a53326e90961dddd">&#9670;&nbsp;</a></span>sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::LessEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">arm_compute::cpu::sve_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58cad3e6fdac55bb7b0edd7834c968ba1f38">ComparisonOperation::LessEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2261d1ae0d3f14bfee980cee8bb20367"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2261d1ae0d3f14bfee980cee8bb20367">&#9670;&nbsp;</a></span>sve_u8_comparison_elementwise_binary&lt; ComparisonOperation::NotEqual &gt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template void <a class="el" href="namespacearm__compute_1_1cpu.xhtml#a52656637b2039572e6a51a10d9384823">arm_compute::cpu::sve_u8_comparison_elementwise_binary</a>&lt; <a class="el" href="namespacearm__compute.xhtml#a2d299363c9fc33334c571fa29ca4f58ca19bb0af2c3c530538cb41aff7f235b96">ComparisonOperation::NotEqual</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>in2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae4bce17f1ab84502a7264aa6ee9fe8b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4bce17f1ab84502a7264aa6ee9fe8b7">&#9670;&nbsp;</a></span>u16_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u16_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> in_bounds_crop_window&lt;uint16_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, output_width_start,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                           output_width_limit, input_has_single_channel, is_width_flipped);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a5d863f1cf55ba6414143ca56c18f90b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d863f1cf55ba6414143ca56c18f90b2">&#9670;&nbsp;</a></span>u16_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u16_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00038">38</a> of file <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> neon_range_function&lt;uint16_t&gt;(output, start, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, window);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>.</p>

</div>
</div>
<a id="a8ac2234643490e0d1d52af361a81ccfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ac2234643490e0d1d52af361a81ccfe">&#9670;&nbsp;</a></span>u32_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u32_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">return</span> in_bounds_crop_window&lt;uint32_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, output_width_start,</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                           output_width_limit, input_has_single_channel, is_width_flipped);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="a7e91697bb00bef9bf1ccdb30c862c482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e91697bb00bef9bf1ccdb30c862c482">&#9670;&nbsp;</a></span>u32_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u32_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00043">43</a> of file <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span> neon_range_function&lt;uint32_t&gt;(output, start, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, window);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>.</p>

</div>
</div>
<a id="a86c41bd6f17806079552ebacf486f743"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86c41bd6f17806079552ebacf486f743">&#9670;&nbsp;</a></span>u8_in_bounds_crop_window()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u8_in_bounds_crop_window </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>output_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>&#160;</td>
          <td class="paramname"><em>input_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>window_step_x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>output_width_limit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>input_has_single_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_width_flipped</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="crop_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> in_bounds_crop_window&lt;uint8_t&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, output, output_ptr, input_offset, window_step_x, output_width_start,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                                          output_width_limit, input_has_single_channel, is_width_flipped);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="af758e0f1c2ee0fcbfaf4070ed39713a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af758e0f1c2ee0fcbfaf4070ed39713a8">&#9670;&nbsp;</a></span>u8_neon_range_function()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u8_neon_range_function </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>step</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> neon_range_function&lt;uint8_t&gt;(output, start, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step</a>, window);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">step</a>.</p>

</div>
</div>
<a id="a9f0a2858d9233ec0443a1d1f2b3ca07c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f0a2858d9233ec0443a1d1f2b3ca07c">&#9670;&nbsp;</a></span>u8_neon_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u8_neon_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml#l00737">737</a> of file <a class="el" href="scale_2neon_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;{</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::BILINEAR)</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    {</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        u8_neon_scale_bilinear(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, dx, dy, border_mode, constant_border_value, sampling_offset,</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                               align_corners, window);</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    }</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        u8_neon_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    }</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9aad6fddf718ad19b063e02fdd7e8e3e65">arm_compute::BILINEAR</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

<p class="reference">Referenced by <a class="el" href="scale_2neon_2qasymm8_8cpp_source.xhtml#l00375">qasymm8_neon_scale()</a>.</p>

</div>
</div>
<a id="a11bc1d142af115f27986158afcd94360"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a11bc1d142af115f27986158afcd94360">&#9670;&nbsp;</a></span>u8_sve_scale()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void u8_sve_scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>offsets</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a15a05537a472ee742404821851529327">BorderMode</a>&#160;</td>
          <td class="paramname"><em>border_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>constant_border_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>sampling_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>align_corners</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="scale_2sve_2integer_8cpp_source.xhtml#l00149">149</a> of file <a class="el" href="scale_2sve_2integer_8cpp_source.xhtml">integer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(dx, dy, border_mode, constant_border_value);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">if</span> (policy == InterpolationPolicy::NEAREST_NEIGHBOR)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        u8_sve_scale_nearest(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, offsets, sampling_offset, align_corners, window);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Not Implemented&quot;</span>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00354">ARM_COMPUTE_ERROR</a>, <a class="el" href="_error_8h_source.xhtml#l00151">ARM_COMPUTE_UNUSED</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9a7f5ccbc3d30c2cd3fd04d567946cbde2">arm_compute::NEAREST_NEIGHBOR</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">arm_compute::test::validation::src</a>.</p>

</div>
</div>
<a id="abae8774fe34bba0075fc5f9df030c019"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abae8774fe34bba0075fc5f9df030c019">&#9670;&nbsp;</a></span>vector_float_norm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">InputType vector_float_norm </td>
          <td>(</td>
          <td class="paramtype">const InputType &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const AccType &amp;&#160;</td>
          <td class="paramname"><em>vec_mean</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const AccType &amp;&#160;</td>
          <td class="paramname"><em>vec_multip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const AccType &amp;&#160;</td>
          <td class="paramname"><em>vec_beta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00043">43</a> of file <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(inputs, vec_mean), vec_multip), vec_beta);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>, and <a class="el" href="intrinsics_2sub_8h_source.xhtml#l00039">arm_compute::wrapper::vsub()</a>.</p>

<p class="reference">Referenced by <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">instance_normalization_nchw()</a>.</p>

</div>
</div>
<a id="a4a3377ac3e3280b91c86b775c696675a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a3377ac3e3280b91c86b775c696675a">&#9670;&nbsp;</a></span>vector_float_sum()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void vector_float_sum </td>
          <td>(</td>
          <td class="paramtype">AccType &amp;&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AccType &amp;&#160;</td>
          <td class="paramname"><em>result_square</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const InputType &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    result        = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(result, inputs);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    result_square = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(result_square, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(inputs, inputs));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="intrinsics_2add_8h_source.xhtml#l00039">arm_compute::wrapper::vadd()</a>, and <a class="el" href="mul_8h_source.xhtml#l00039">arm_compute::wrapper::vmul()</a>.</p>

<p class="reference">Referenced by <a class="el" href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00049">instance_normalization_nchw()</a>.</p>

</div>
</div>
<a id="aef362eaeea03ec75104e13cb530ef02d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef362eaeea03ec75104e13cb530ef02d">&#9670;&nbsp;</a></span>vector_matrix_multiply_f32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void vector_matrix_multiply_f32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml">impl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> width_matrix_b = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;dimension(0));</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> in_b_stride =</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(rhs-&gt;info()-&gt;strides_in_bytes()[1] / <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(rhs-&gt;info()-&gt;data_type()));</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> num_elems_vec_a = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(lhs-&gt;info()-&gt;dimension(0));</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// The implementation computes 16 elements per iteration</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_start_x = 16 * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.thread_id;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_step_x  = 16 * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_threads;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">// Make sure (window_end_x - window_start_x) is a multiple of window_step_x</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> window_end_x = <a class="code" href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">ceil_to_multiple</a>(width_matrix_b - window_start_x, window_step_x) + window_start_x;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    Window win_out(window);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    win_out.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    win_out.set(Window::DimY, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    Window win_a(window);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    win_a.set(Window::DimX, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    win_a.set(Window::DimY, Window::Dimension(0, 0, 0));</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Window win_b;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Don&#39;t slice matrix B along the z dimension if matrix B has just 2 dimensions and matrix A more than 2</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// This scenario can happen when the the matrix multiplication is used to perform a convolution operation</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span> (rhs-&gt;info()-&gt;num_dimensions() &gt;= 3)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        win_b = window;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    win_b.set(Window::DimX, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    win_b.set(Window::DimY, Window::Dimension(0, 1, 1));</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    Iterator ina(lhs, win_a);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    Iterator inb(rhs, win_b);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    Iterator out(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_out);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> multiply_alpha = !(<a class="code" href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#ab2dcf325d146568ecc8d4a4bd36c02ac">helpers::float_ops::is_one</a>(alpha));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">const</span> float32x4_t alpha_f32 = vdupq_n_f32(alpha);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        win_out,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordtype">int</span> x = window_start_x;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="comment">// Here we don&#39;t check for x lower equal than (window_end_x - window_step_x) because of</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="comment">// window_end_x is computed above which may cause out-of-bound writes to the dst.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">for</span> (; x &lt; (window_end_x - window_step_x); x += window_step_x)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">if</span> (x &gt; width_matrix_b)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                float32x4_t acc0 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                float32x4_t acc1 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                float32x4_t acc2 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                float32x4_t acc3 = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keyword">auto</span> vec_a    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ina.ptr());</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="keyword">auto</span> matrix_b = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(inb.ptr()) + x;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(vec_a)));</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b)));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + in_b_stride)));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">auto</span> vec_a_end_addr = vec_a + num_elems_vec_a;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt;= (vec_a_end_addr - 4);)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    float32x2_t a0l = vld1_f32(vec_a);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    float32x4_t b00 = vld1q_f32(matrix_b + 0 + 0 * in_b_stride);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    float32x4_t b01 = vld1q_f32(matrix_b + 4 + 0 * in_b_stride);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    float32x4_t b02 = vld1q_f32(matrix_b + 8 + 0 * in_b_stride);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    float32x4_t b03 = vld1q_f32(matrix_b + 12 + 0 * in_b_stride);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    float32x4_t b10 = vld1q_f32(matrix_b + 0 + 1 * in_b_stride);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    float32x4_t b11 = vld1q_f32(matrix_b + 4 + 1 * in_b_stride);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                    float32x4_t b12 = vld1q_f32(matrix_b + 8 + 1 * in_b_stride);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                    float32x4_t b13 = vld1q_f32(matrix_b + 12 + 1 * in_b_stride);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(vec_a)));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 1 * in_b_stride)));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 2 * in_b_stride)));</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 3 * in_b_stride)));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 4 * in_b_stride)));</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    acc0 = vmlaq_lane_f32(acc0, b00, a0l, 0);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    acc1 = vmlaq_lane_f32(acc1, b01, a0l, 0);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    acc2 = vmlaq_lane_f32(acc2, b02, a0l, 0);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    acc3 = vmlaq_lane_f32(acc3, b03, a0l, 0);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    acc0 = vmlaq_lane_f32(acc0, b10, a0l, 1);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    acc1 = vmlaq_lane_f32(acc1, b11, a0l, 1);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    acc2 = vmlaq_lane_f32(acc2, b12, a0l, 1);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    acc3 = vmlaq_lane_f32(acc3, b13, a0l, 1);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    vec_a += 2;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    matrix_b += 2 * in_b_stride;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                    a0l = vld1_f32(vec_a);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    b00 = vld1q_f32(matrix_b + 0 + 0 * in_b_stride);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    b01 = vld1q_f32(matrix_b + 4 + 0 * in_b_stride);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    b02 = vld1q_f32(matrix_b + 8 + 0 * in_b_stride);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                    b03 = vld1q_f32(matrix_b + 12 + 0 * in_b_stride);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    b10 = vld1q_f32(matrix_b + 0 + 1 * in_b_stride);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    b11 = vld1q_f32(matrix_b + 4 + 1 * in_b_stride);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    b12 = vld1q_f32(matrix_b + 8 + 1 * in_b_stride);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    b13 = vld1q_f32(matrix_b + 12 + 1 * in_b_stride);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    acc0 = vmlaq_lane_f32(acc0, b00, a0l, 0);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    acc1 = vmlaq_lane_f32(acc1, b01, a0l, 0);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    acc2 = vmlaq_lane_f32(acc2, b02, a0l, 0);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    acc3 = vmlaq_lane_f32(acc3, b03, a0l, 0);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    acc0 = vmlaq_lane_f32(acc0, b10, a0l, 1);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    acc1 = vmlaq_lane_f32(acc1, b11, a0l, 1);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    acc2 = vmlaq_lane_f32(acc2, b12, a0l, 1);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    acc3 = vmlaq_lane_f32(acc3, b13, a0l, 1);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    vec_a += 2;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    matrix_b += 2 * in_b_stride;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt; vec_a_end_addr; ++vec_a)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a0 = *vec_a;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    <span class="keyword">const</span> float32x4_t b00 = vld1q_f32(matrix_b + 0 + 0 * in_b_stride);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    <span class="keyword">const</span> float32x4_t b01 = vld1q_f32(matrix_b + 4 + 0 * in_b_stride);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    <span class="keyword">const</span> float32x4_t b02 = vld1q_f32(matrix_b + 8 + 0 * in_b_stride);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="keyword">const</span> float32x4_t b03 = vld1q_f32(matrix_b + 12 + 0 * in_b_stride);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    acc0 = vmlaq_n_f32(acc0, b00, a0);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    acc1 = vmlaq_n_f32(acc1, b01, a0);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    acc2 = vmlaq_n_f32(acc2, b02, a0);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    acc3 = vmlaq_n_f32(acc3, b03, a0);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    matrix_b += in_b_stride;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="comment">// Multiply by the weight of matrix product (alpha)</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">if</span> (multiply_alpha)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    acc0 = vmulq_f32(acc0, alpha_f32);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    acc1 = vmulq_f32(acc1, alpha_f32);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    acc2 = vmulq_f32(acc2, alpha_f32);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    acc3 = vmulq_f32(acc3, alpha_f32);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_out = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr()) + x;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                vst1q_f32(vec_out + 0, acc0);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                vst1q_f32(vec_out + 4, acc1);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                vst1q_f32(vec_out + 8, acc2);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                vst1q_f32(vec_out + 12, acc3);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="comment">// Left-over loop</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">for</span> (; x &lt; window_end_x; ++x)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keywordflow">if</span> (x &gt; width_matrix_b)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                }</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                float32x4_t vacc = vdupq_n_f32(0.f);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="keyword">auto</span> vec_a    = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(ina.ptr());</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keyword">auto</span> matrix_b = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(inb.ptr()) + x;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(vec_a)));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b)));</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + in_b_stride)));</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keyword">auto</span> vec_a_end_addr = vec_a + num_elems_vec_a;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt;= (vec_a_end_addr - 4); vec_a += 4)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    <span class="keyword">const</span> float32x4_t a0l = vld1q_f32(vec_a);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keyword">const</span> float32x4_t b_col = {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        *(matrix_b + 0 * in_b_stride),</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        *(matrix_b + 1 * in_b_stride),</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        *(matrix_b + 2 * in_b_stride),</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                        *(matrix_b + 3 * in_b_stride),</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    };</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#if __arm__</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="stringliteral">&quot;PLD [%0, #128*4]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(vec_a)));</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 1 * in_b_stride)));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 2 * in_b_stride)));</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 3 * in_b_stride)));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="keyword">asm</span> <span class="keyword">volatile</span>(</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        <span class="stringliteral">&quot;PLD [%0, #128*1]&quot;</span> ::<span class="stringliteral">&quot;r&quot;</span>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(matrix_b + 4 * in_b_stride)));</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __arm__ */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    vacc = vmlaq_f32(vacc, b_col, a0l);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    matrix_b += 4 * in_b_stride;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                <span class="keywordtype">float</span> acc = vgetq_lane_f32(vacc, 0) + vgetq_lane_f32(vacc, 1) + vgetq_lane_f32(vacc, 2) +</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                            vgetq_lane_f32(vacc, 3);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="keywordflow">for</span> (; vec_a &lt; vec_a_end_addr; ++vec_a)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> a0 = *vec_a;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">float</span> b00 = *matrix_b;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    acc += b00 * a0;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    matrix_b += in_b_stride;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                <span class="comment">// Multiply by the weight of matrix product (alpha)</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <span class="keywordflow">if</span> (multiply_alpha)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                    acc *= alpha;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> vec_out = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(out.ptr()) + x;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                *vec_out = acc;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        },</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        ina, inb, out);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">arm_compute::ceil_to_multiple()</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00038">arm_compute::data_size_from_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="_window_8h_source.xhtml#l00043">Window::DimX</a>, <a class="el" href="_window_8h_source.xhtml#l00045">Window::DimY</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">arm_compute::test::validation::dst</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="float__ops_8h_source.xhtml#l00100">arm_compute::helpers::float_ops::is_one()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1f4e725b8e1ea36b30e09dc08ae6961d">ITensorInfo::num_dimensions()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00147">Iterator::ptr()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, and <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a6b14f175bf5281f57b561e2d4e4b1f1f">ITensorInfo::strides_in_bytes()</a>.</p>

<p class="reference">Referenced by <a class="el" href="cpu_2kernels_2gemm__matrix__mul_2generic_2neon_2fp32_8cpp_source.xhtml#l00031">neon_fp32_gemm_matrix_mul()</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a2065fcea8e34c2f3ee039d5a0332348b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2065fcea8e34c2f3ee039d5a0332348b">&#9670;&nbsp;</a></span>channel_idx</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const size_t channel_idx = <a class="el" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">39</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_color_convert_helper_8h_source.xhtml#l00197">arm_compute::test::colorconvert_helper::detail::colorconvert_rgb_to_rgbx()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00249">arm_compute::test::colorconvert_helper::detail::colorconvert_rgbx_to_rgb()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00388">arm_compute::misc::shape_calculator::compute_col2im_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00552">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00441">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_color_convert_helper_8h_source.xhtml#l00126">arm_compute::test::colorconvert_helper::detail::compute_rgb_value()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00038">CpuConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>, <a class="el" href="_normalization_helpers_8h_source.xhtml#l00039">arm_compute::get_normalization_dimension_index()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00422">CpuWinogradConv2d::prepare()</a>, <a class="el" href="_n_e_space_to_depth_layer_kernel_8cpp_source.xhtml#l00103">NESpaceToDepthLayerKernel::run()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00559">run_depthwise_quanitized8bit()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cl_component_direct_conv2d_8cpp_source.xhtml#l00067">ClComponentDirectConv2d::validate()</a>, <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml#l00107">ClComponentDepthwiseConv2d::validate()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::validate_arguments()</a>, <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>, and <a class="el" href="_color_convert_helper_8h_source.xhtml#l00159">arm_compute::test::colorconvert_helper::detail::yuyv_to_rgb_calculation()</a>.</p>

</div>
</div>
<a id="a443d09c5e20d13e6f4063d0f60616fb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a443d09c5e20d13e6f4063d0f60616fb5">&#9670;&nbsp;</a></span>data_layout</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto data_layout = <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">36</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00218">arm_compute::calculate_same_pad()</a>, <a class="el" href="src_2core_2_helpers_8cpp_source.xhtml#l00028">arm_compute::calculate_valid_region_scale()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00292">arm_compute::cl_winograd_convolution_layer_supported()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00388">arm_compute::misc::shape_calculator::compute_col2im_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00552">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00479">arm_compute::misc::shape_calculator::compute_deconvolution_padding()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00512">arm_compute::misc::shape_calculator::compute_deconvolution_upsampled_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01243">arm_compute::misc::shape_calculator::compute_depth_to_space_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00441">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_depth_to_space_layer_node_8cpp_source.xhtml#l00046">DepthToSpaceLayerNode::compute_output_descriptor()</a>, <a class="el" href="_pooling_layer_node_8cpp_source.xhtml#l00046">PoolingLayerNode::compute_output_descriptor()</a>, <a class="el" href="_reorg_layer_node_8cpp_source.xhtml#l00045">ReorgLayerNode::compute_output_descriptor()</a>, <a class="el" href="_deconvolution_layer_node_8cpp_source.xhtml#l00047">DeconvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_fused_convolution_batch_normalization_node_8cpp_source.xhtml#l00097">FusedConvolutionBatchNormalizationNode::compute_output_descriptor()</a>, <a class="el" href="_depthwise_convolution_layer_node_8cpp_source.xhtml#l00084">DepthwiseConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_convolution_layer_node_8cpp_source.xhtml#l00096">ConvolutionLayerNode::compute_output_descriptor()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01662">arm_compute::misc::shape_calculator::compute_pool3d_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01352">arm_compute::misc::shape_calculator::compute_prior_box_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01302">arm_compute::misc::shape_calculator::compute_space_to_batch_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01329">arm_compute::misc::shape_calculator::compute_space_to_depth_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l01433">arm_compute::misc::shape_calculator::compute_upsample_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00095">arm_compute::misc::shape_calculator::compute_vector_to_tensor_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00748">arm_compute::misc::shape_calculator::compute_winograd_output_transform_shape()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_8cpp_source.xhtml#l00035">CpuConvertFullyConnectedWeights::configure()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_convert_fully_connected_weights_8cpp_source.xhtml#l00034">ClConvertFullyConnectedWeights::configure()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00038">CpuConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00301">CpuPool2dKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cpu_pool3d_kernel_8cpp_source.xhtml#l00116">CpuPool3dKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00120">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00147">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00108">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_n_e_convert_fully_connected_weights_8cpp_source.xhtml#l00043">NEConvertFullyConnectedWeights::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00103">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_convert_fully_connected_weights_8cpp_source.xhtml#l00048">CLConvertFullyConnectedWeights::configure()</a>, <a class="el" href="_n_e_scale_8cpp_source.xhtml#l00050">NEScale::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00126">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_n_e_instance_normalization_layer_8cpp_source.xhtml#l00048">NEInstanceNormalizationLayer::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00147">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00420">CpuGemmConv2d::configure()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00188">ClGemmConv2d::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00083">CLComputeMeanVariance::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00195">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00138">CLDirectDeconvolutionLayer::configure()</a>, <a class="el" href="arm__compute_2runtime_2_c_l_2functions_2_c_l_convert_fully_connected_weights_8h_source.xhtml#l00146">CLConvertFullyConnectedWeightsManaged::configure()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00063">ResizeLayerNode::configure_output()</a>, <a class="el" href="src_2dynamic__fusion_2utils_2_utils_8h_source.xhtml#l00066">arm_compute::experimental::dynamic_fusion::convert_pool_attr_to_pool_info()</a>, <a class="el" href="_function_helpers_8h_source.xhtml#l00377">arm_compute::graph::backends::detail::create_concatenate_layer()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00446">arm_compute::test::create_tensor()</a>, <a class="el" href="_image_loader_8h_source.xhtml#l00253">IImageLoader::fill_planar_tensor()</a>, <a class="el" href="_cl_conv2d_8cpp_source.xhtml#l00190">ClConv2d::get_convolution_method()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00201">arm_compute::get_data_layout_dimension_index()</a>, <a class="el" href="_c_l_deconvolution_layer_8cpp_source.xhtml#l00157">CLDeconvolutionLayer::get_deconvolution_method()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00150">arm_compute::graph::get_dimension_idx()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00212">arm_compute::get_index_data_layout_dimension()</a>, <a class="el" href="_graph_utils_8h_source.xhtml#l00616">arm_compute::graph_utils::get_npy_output_accessor()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00602">CpuGemmConv2d::has_opt_impl()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00226">arm_compute::cpu::kernels::internal_run_im2col_fp16_nchw_nopad()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00206">arm_compute::cpu::kernels::internal_run_im2col_fp16_nchw_pad()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00186">arm_compute::cpu::kernels::internal_run_im2col_fp16_nopad()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00161">arm_compute::cpu::kernels::internal_run_im2col_fp16_pad()</a>, <a class="el" href="_scale_utils_8cpp_source.xhtml#l00044">arm_compute::scale_utils::is_precomputation_required()</a>, <a class="el" href="_graph_utils_8cpp_source.xhtml#l00188">NumPyAccessor::NumPyAccessor()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00071">offset_no_padding()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00696">arm_compute::operator&lt;&lt;()</a>, <a class="el" href="_type_loader_8h_source.xhtml#l00048">arm_compute::operator&gt;&gt;()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00274">roi_align()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00037">roi_align_1x1()</a>, <a class="el" href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00115">roi_align_1x1_qasymm8()</a>, <a class="el" href="_c_p_p_upsample_kernel_8cpp_source.xhtml#l00063">CPPUpsampleKernel::run()</a>, <a class="el" href="_n_e_reorg_layer_kernel_8cpp_source.xhtml#l00105">NEReorgLayerKernel::run()</a>, <a class="el" href="_n_e_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00181">NEROIAlignLayerKernel::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00062">arm_compute::cpu::kernels::run_im2col_fp16_nchw_nopad()</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nchw_2fp16_8cpp_source.xhtml#l00042">arm_compute::cpu::kernels::run_im2col_fp16_nchw_pad()</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00054">arm_compute::cpu::kernels::run_im2col_fp16_nopad()</a>, <a class="el" href="cpu_2kernels_2directconv2d_2nhwc_2neon_2fp16_8cpp_source.xhtml#l00034">arm_compute::cpu::kernels::run_im2col_fp16_pad()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00069">arm_compute::cpu::kernels::run_im2col_fp32_nchw_nopad()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00054">arm_compute::cpu::kernels::run_im2col_fp32_nchw_pad()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00069">arm_compute::cpu::kernels::run_im2col_fp32_nopad()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00054">arm_compute::cpu::kernels::run_im2col_fp32_pad()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00116">arm_compute::cpu::kernels::run_im2col_int8_nopad_nhwc()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00099">arm_compute::cpu::kernels::run_im2col_qasymm8_nchw_nopad()</a>, <a class="el" href="directconv2d_2nchw_2all_8cpp_source.xhtml#l00084">arm_compute::cpu::kernels::run_im2col_qasymm8_nchw_pad()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2qasymm8_8cpp_source.xhtml#l00049">arm_compute::cpu::kernels::run_im2col_qasymm8_nopad()</a>, <a class="el" href="directconv2d_2nhwc_2neon_2qasymm8_8cpp_source.xhtml#l00034">arm_compute::cpu::kernels::run_im2col_qasymm8_pad()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00146">arm_compute::cpu::kernels::run_im2col_qasymm8_pad_nhwc()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00131">arm_compute::cpu::kernels::run_im2col_uint8_nopad_nhwc()</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00152">arm_compute::set_data_layout_if_unknown()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00090">TensorDescriptor::set_layout()</a>, <a class="el" href="_integration_8cpp_source.xhtml#l00067">arm_compute::test::validation::TEST_CASE()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00728">arm_compute::to_string()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_8cpp_source.xhtml#l00046">CpuConvertFullyConnectedWeights::validate()</a>, <a class="el" href="gpu_2cl_2operators_2_cl_convert_fully_connected_weights_8cpp_source.xhtml#l00046">ClConvertFullyConnectedWeights::validate()</a>, <a class="el" href="_cpu_scale_8cpp_source.xhtml#l00160">CpuScale::validate()</a>, <a class="el" href="_cpu_pool2d_kernel_8cpp_source.xhtml#l00351">CpuPool2dKernel::validate()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00069">CpuConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00093">ClConvertFullyConnectedWeightsKernel::validate()</a>, <a class="el" href="_c_l_deconvolution_layer_upsample_kernel_8cpp_source.xhtml#l00044">CLDeconvolutionLayerUpsampleKernel::validate()</a>, <a class="el" href="_n_e_convert_fully_connected_weights_8cpp_source.xhtml#l00056">NEConvertFullyConnectedWeights::validate()</a>, <a class="el" href="runtime_2_c_l_2functions_2_cl_convert_fully_connected_weights_8cpp_source.xhtml#l00070">CLConvertFullyConnectedWeights::validate()</a>, <a class="el" href="_cl_component_direct_conv2d_8cpp_source.xhtml#l00067">ClComponentDirectConv2d::validate()</a>, <a class="el" href="_cpu_gemm_conv2d_8cpp_source.xhtml#l00646">CpuGemmConv2d::validate()</a>, <a class="el" href="_cl_gemm_conv2d_8cpp_source.xhtml#l00379">ClGemmConv2d::validate()</a>, <a class="el" href="_cl_component_depthwise_conv2d_8cpp_source.xhtml#l00107">ClComponentDepthwiseConv2d::validate()</a>, <a class="el" href="_c_l_g_e_m_m_deconvolution_layer_8cpp_source.xhtml#l00130">CLGEMMDeconvolutionLayer::validate()</a>, <a class="el" href="_c_l_direct_deconvolution_layer_8cpp_source.xhtml#l00058">CLDirectDeconvolutionLayer::validate()</a>, and <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::validate_arguments()</a>.</p>

</div>
</div>
<a id="afdf11c92be0cb1099e5fdcf3d5c94055"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdf11c92be0cb1099e5fdcf3d5c94055">&#9670;&nbsp;</a></span>dim_manual_loop</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto dim_manual_loop = <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 0, 0)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00041">41</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00244">depthwise_loop_generic_fp()</a>, and <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">depthwise_loop_multiplier1_fp()</a>.</p>

</div>
</div>
<a id="ab11d49bc60990d21ee07967c219129ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab11d49bc60990d21ee07967c219129ae">&#9670;&nbsp;</a></span>dim_single_unit_step</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto dim_single_unit_step = <a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(0, 1, 1)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00042">42</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">depthwise_loop_multiplier1_fp()</a>.</p>

</div>
</div>
<a id="aa6d92f521dc4f05ac7f4c856dcfe263e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6d92f521dc4f05ac7f4c856dcfe263e">&#9670;&nbsp;</a></span>height_idx</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const size_t height_idx = <a class="el" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00038">38</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00218">arm_compute::calculate_same_pad()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00388">arm_compute::misc::shape_calculator::compute_col2im_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00552">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00441">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00038">CpuConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00082">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00126">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00195">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00063">ResizeLayerNode::configure_output()</a>, <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00422">CpuWinogradConv2d::prepare()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00038">CpuWinogradConv2dTransformInputKernel::run_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00072">CpuWinogradConv2dTransformOutputKernel::run_op()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::validate_arguments()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00059">GpuCkwPool2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>.</p>

</div>
</div>
<a id="a05c10bc9018179245c50d45b330a1c6a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05c10bc9018179245c50d45b330a1c6a">&#9670;&nbsp;</a></span>step</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr int step = 4</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml">fp32.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="_i_access_window_8h_source.xhtml#l00047">arm_compute::adjust_down()</a>, <a class="el" href="_i_access_window_8h_source.xhtml#l00063">arm_compute::adjust_up()</a>, <a class="el" href="_window_8inl_source.xhtml#l00072">Window::collapse_if_possible()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00077">CLRangeKernel::configure()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00126">NERangeKernel::configure()</a>, <a class="el" href="_c_l_range_8cpp_source.xhtml#l00036">CLRange::configure()</a>, <a class="el" href="_n_e_range_8cpp_source.xhtml#l00039">NERange::configure()</a>, <a class="el" href="_window_iterator_8h_source.xhtml#l00040">arm_compute::convert_window_coord_to_position()</a>, <a class="el" href="_i_c_l_kernel_8cpp_source.xhtml#l00033">arm_compute::enqueue()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00044">arm_compute::error_on_invalid_subwindow()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00026">arm_compute::error_on_mismatching_windows()</a>, <a class="el" href="_validate_8cpp_source.xhtml#l00090">arm_compute::error_on_window_dimensions_gte()</a>, <a class="el" href="_helpers_8inl_source.xhtml#l00074">arm_compute::execute_window_loop()</a>, <a class="el" href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00037">fp32_neon_floor()</a>, <a class="el" href="cpu_2kernels_2range_2generic_2neon_2fp32_8cpp_source.xhtml#l00034">fp32_neon_range_function()</a>, <a class="el" href="_ckw_helper_8cpp_source.xhtml#l00032">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws()</a>, <a class="el" href="_ckw_helper_8cpp_source.xhtml#l00040">arm_compute::experimental::dynamic_fusion::get_coordinate_from_gws_overlapping_min()</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00107">Dimensions&lt; size_t &gt;::increment()</a>, <a class="el" href="_range_dataset_8h_source.xhtml#l00152">arm_compute::test::framework::dataset::make()</a>, <a class="el" href="range_2generic_2neon_2impl_8h_source.xhtml#l00038">neon_range_function()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00295">arm_compute::num_of_elements_in_range()</a>, <a class="el" href="reference_2_range_8cpp_source.xhtml#l00050">arm_compute::test::validation::reference::range()</a>, <a class="el" href="_n_e_depth_to_space_layer_kernel_8cpp_source.xhtml#l00134">NEDepthToSpaceLayerKernel::run()</a>, <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00053">s16_neon_range_function()</a>, <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00058">s32_neon_range_function()</a>, <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00048">s8_neon_range_function()</a>, <a class="el" href="select_2generic_2neon_2impl_8h_source.xhtml#l00140">select_op_not_same_rank()</a>, <a class="el" href="_window_8inl_source.xhtml#l00181">Window::set_dimension_step()</a>, <a class="el" href="_window_iterator_8h_source.xhtml#l00195">WindowIterator&lt; L &gt;::set_step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00298">Window::shape()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00147">TensorShape::shift_right()</a>, <a class="el" href="_window_8inl_source.xhtml#l00203">Window::split_window()</a>, <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00038">u16_neon_range_function()</a>, <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00043">u32_neon_range_function()</a>, <a class="el" href="range_2generic_2neon_2integer_8cpp_source.xhtml#l00033">u8_neon_range_function()</a>, <a class="el" href="_n_e_range_kernel_8cpp_source.xhtml#l00147">NERangeKernel::validate()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00130">CLRangeKernel::validate()</a>, <a class="el" href="_c_l_range_8cpp_source.xhtml#l00054">CLRange::validate()</a>, <a class="el" href="_n_e_range_8cpp_source.xhtml#l00046">NERange::validate()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>.</p>

</div>
</div>
<a id="a33ac5aaccfb4b36763818ca148b44c6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33ac5aaccfb4b36763818ca148b44c6c">&#9670;&nbsp;</a></span>vector_size</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t vector_size = 8</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00043">43</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00082">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00044">CpuGemmTranspose1xWKernel::configure()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00421">arm_compute::create_lws_hint_parallel_implementations()</a>, <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00114">depthwise_loop_multiplier1_fp()</a>, <a class="el" href="_cpu_gemm_transpose1x_w_kernel_8cpp_source.xhtml#l00078">CpuGemmTranspose1xWKernel::run_op()</a>, and <a class="el" href="_n_e_o_n_2_depthwise_convolution_layer_native_8cpp_source.xhtml#l00107">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a2daf774ab1f2b95de283245a361d455f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2daf774ab1f2b95de283245a361d455f">&#9670;&nbsp;</a></span>width_idx</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const size_t width_idx = <a class="el" href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">get_data_layout_dimension_index</a>(<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">data_layout</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00037">37</a> of file <a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml">impl.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="src_2core_2_utils_8cpp_source.xhtml#l00218">arm_compute::calculate_same_pad()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00388">arm_compute::misc::shape_calculator::compute_col2im_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00552">arm_compute::misc::shape_calculator::compute_deconvolution_output_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00441">arm_compute::misc::shape_calculator::compute_depthwise_convolution_shape()</a>, <a class="el" href="_shape_calculator_8h_source.xhtml#l00585">arm_compute::misc::shape_calculator::compute_im2col_conv_shape()</a>, <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00106">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cpu_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00038">CpuConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00049">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00082">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00126">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00176">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00126">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00334">ClIm2ColKernel::configure()</a>, <a class="el" href="_cpu_im2_col_kernel_8cpp_source.xhtml#l00285">CpuIm2ColKernel::configure()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00195">NEDeconvolutionLayer::configure()</a>, <a class="el" href="_resize_layer_node_8cpp_source.xhtml#l00063">ResizeLayerNode::configure_output()</a>, <a class="el" href="reference_2_convert_fully_connected_weights_8cpp_source.xhtml#l00035">arm_compute::test::validation::reference::convert_fully_connected_weights()</a>, <a class="el" href="_normalization_helpers_8h_source.xhtml#l00039">arm_compute::get_normalization_dimension_index()</a>, <a class="el" href="reference_2_indirect_conv2d_address_precalculation_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::indirect_conv2d_addr_precalculation()</a>, <a class="el" href="_cpu_winograd_conv2d_8cpp_source.xhtml#l00422">CpuWinogradConv2d::prepare()</a>, <a class="el" href="_n_e_space_to_batch_layer_kernel_8cpp_source.xhtml#l00178">NESpaceToBatchLayerKernel::run()</a>, <a class="el" href="directconv2d_2impl_8h_source.xhtml#l00305">arm_compute::cpu::kernels::run_im2col()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00038">CpuWinogradConv2dTransformInputKernel::run_op()</a>, <a class="el" href="_cpu_winograd_conv2d_kernel_8cpp_source.xhtml#l00072">CpuWinogradConv2dTransformOutputKernel::run_op()</a>, <a class="el" href="_n_e_deconvolution_layer_8cpp_source.xhtml#l00086">NEDeconvolutionLayer::validate()</a>, <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00057">arm_compute::cpu::kernels::validate_arguments()</a>, <a class="el" href="_gpu_ckw_pool2d_8cpp_source.xhtml#l00059">GpuCkwPool2d::write_component_code()</a>, <a class="el" href="_gpu_ckw_depthwise_conv2d_8cpp_source.xhtml#l00064">GpuCkwDepthwiseConv2d::write_component_code()</a>, and <a class="el" href="_gpu_ckw_direct_conv2d_8cpp_source.xhtml#l00064">GpuCkwDirectConv2d::write_component_code()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a7e11bb008b174952651f4a9946adc1a4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a7e11bb008b174952651f4a9946adc1a4">arm_compute::cpu::run_depthwise_quanitized8bit&lt; uint8_t, uint8_t &gt;</a></div><div class="ttdeci">template void run_depthwise_quanitized8bit&lt; uint8_t, uint8_t &gt;(const ITensor *src, const ITensor *weights, const ITensor *biases, ITensor *dst, const Window &amp;window, bool has_biases, const ConvolutionInfo &amp;info)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a5e5f2a88728fcb05b92a1291fa7fd7ea"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5e5f2a88728fcb05b92a1291fa7fd7ea">arm_compute::wrapper::vqsub</a></div><div class="ttdeci">uint8x8_t vqsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00074">sub.h:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a485ae62f3ade6c8d33c5c2e85b29c3a7"><div class="ttname"><a href="namespacearm__compute.xhtml#a485ae62f3ade6c8d33c5c2e85b29c3a7">arm_compute::vdequantize</a></div><div class="ttdeci">float32x4x2_t vdequantize(const uint8x8_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Dequantize a neon vector holding 8 quantized values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00410">NEAsymm.h:410</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_a01b6a20d51e2db6f1704f2315ead62d3"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a01b6a20d51e2db6f1704f2315ead62d3">PRELU</a></div><div class="ttdeci">#define PRELU(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00031">elementwise_operation_quantized.cl:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ac09fd4bf645cc493520464b767c7d872"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac09fd4bf645cc493520464b767c7d872">arm_compute::cpu::store_quantized</a></div><div class="ttdeci">void store_quantized(int8_t *ptr, svbool_t pg, svfloat32x4_t data, const svint32_t &amp;offset, const svfloat32_t &amp;inv_scale)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00080">impl.h:80</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ae1cab9e8929674344a45c9331a64085f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae1cab9e8929674344a45c9331a64085f">arm_compute::cpu::elementwise_arithmetic_op&lt; int32_t &gt;</a></div><div class="ttdeci">template void elementwise_arithmetic_op&lt; int32_t &gt;(const ITensor *in1, const ITensor *in2, ITensor *out, const ArithmeticOperation op, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00338">gemm_interleaved.hpp:338</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac7e1832b8c58f07a98fc8d390b16ac27"><div class="ttname"><a href="namespacearm__compute.xhtml#ac7e1832b8c58f07a98fc8d390b16ac27">arm_compute::qasymm8x16_t</a></div><div class="ttdeci">uint8x16_t qasymm8x16_t</div><div class="ttdoc">8 bit quantized asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00038">NEAsymm.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_acb942e32cd7322ef1e315255f33cc176"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#acb942e32cd7322ef1e315255f33cc176">arm_compute::cpu::rounding_divide_by_exp2</a></div><div class="ttdeci">int32_t rounding_divide_by_exp2(const int32_t &amp;x, const int exponent)</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">impl.cpp:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a33ac5aaccfb4b36763818ca148b44c6c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">arm_compute::cpu::vector_size</a></div><div class="ttdeci">constexpr size_t vector_size</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00043">impl.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50bea02ff1fff1812f84c89547fcd6c176150">arm_compute::RoundingPolicy::TO_NEAREST_EVEN</a></div><div class="ttdeci">@ TO_NEAREST_EVEN</div><div class="ttdoc">Rounds to nearest value; half rounds to nearest even.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a428217640659bfcde131837f375d6769"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a428217640659bfcde131837f375d6769">arm_compute::cpu::elementwise_comparison_op&lt; int32_t &gt;</a></div><div class="ttdeci">template void elementwise_comparison_op&lt; int32_t &gt;(const ITensor *in1, const ITensor *in2, ITensor *out, const ComparisonOperation op, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_abb9f749a8ea92dda58cc0881b1450158"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#abb9f749a8ea92dda58cc0881b1450158">arm_compute::test::validation::idx_height</a></div><div class="ttdeci">const int idx_height</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00263">Scale.cpp:263</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:110</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa84c2eae36ca4b68fa36c226df6f94e7"><div class="ttname"><a href="namespacearm__compute.xhtml#aa84c2eae36ca4b68fa36c226df6f94e7">arm_compute::calculate_max_window</a></div><div class="ttdeci">Window calculate_max_window(const ValidRegion &amp;valid_region, const Steps &amp;steps, bool skip_border, BorderSize border_size)</div><div class="ttdef"><b>Definition:</b> <a href="_window_helpers_8cpp_source.xhtml#l00029">WindowHelpers.cpp:29</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ac9a0d70dfa153ee766d9c184deac4aec"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac9a0d70dfa153ee766d9c184deac4aec">arm_compute::cpu::elementwise_op_scalar_imp</a></div><div class="ttdeci">ScalarType elementwise_op_scalar_imp(ElementWiseUnary op, const ScalarType &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00038">impl.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_abd9a9e4bfba3b2e6a35099618122d38e"><div class="ttname"><a href="namespacearm__compute.xhtml#abd9a9e4bfba3b2e6a35099618122d38e">arm_compute::quantize_qsymm16</a></div><div class="ttdeci">int16_t quantize_qsymm16(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a 16-bit symmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00468">QuantizationInfo.h:468</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a22c00c0ee5bab5833057b869cfbbf3bd"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a22c00c0ee5bab5833057b869cfbbf3bd">arm_compute::cpu::run_depthwise_quanitized8bit&lt; uint8_t, int8_t &gt;</a></div><div class="ttdeci">template void run_depthwise_quanitized8bit&lt; uint8_t, int8_t &gt;(const ITensor *src, const ITensor *weights, const ITensor *biases, ITensor *dst, const Window &amp;window, bool has_biases, const ConvolutionInfo &amp;info)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ac07fe0eb0607dbbd9e369137a01bb860"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">arm_compute::cpu::is_valid_input_region</a></div><div class="ttdeci">bool is_valid_input_region(int32_t base_w, uint32_t base_h, uint32_t w, uint32_t h, const DepthwiseConvolutionRunInfo &amp;run_info, const Size2D &amp;dilation)</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00097">impl.h:97</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aa9985607399e329fcb371a92c84a6acd"><div class="ttname"><a href="namespacearm__compute.xhtml#aa9985607399e329fcb371a92c84a6acd">arm_compute::vdequantize_int16</a></div><div class="ttdeci">float32x4x2_t vdequantize_int16(const int16x8_t &amp;qv, float scale)</div><div class="ttdoc">Dequantize a neon vector holding 8 16-bit quantized values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_symm_8h_source.xhtml#l00135">NESymm.h:135</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a1ccc771afb5f199744c317c23279e378"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1ccc771afb5f199744c317c23279e378">arm_compute::cpu::mask_float_vector</a></div><div class="ttdeci">float32x4_t mask_float_vector(const float32x4_t &amp;in, const uint32x4_t &amp;mask)</div><div class="ttdef"><b>Definition:</b> <a href="activation_2generic_2neon_2impl_8h_source.xhtml#l00045">impl.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a569988c8e1a2619532b8f4d0394d5d79"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a569988c8e1a2619532b8f4d0394d5d79">arm_compute::wrapper::vinvsqrt</a></div><div class="ttdeci">float32x2_t vinvsqrt(const float32x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="invsqrt_8h_source.xhtml#l00048">invsqrt.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ab11d49bc60990d21ee07967c219129ae"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ab11d49bc60990d21ee07967c219129ae">arm_compute::cpu::dim_single_unit_step</a></div><div class="ttdeci">constexpr auto dim_single_unit_step</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00042">impl.h:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a4d141bd8c7a674e096eb68492c1e21dd"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4d141bd8c7a674e096eb68492c1e21dd">arm_compute::cpu::elementwise_op&lt; int8_t &gt;</a></div><div class="ttdeci">void elementwise_op&lt; int8_t &gt;(const ITensor *in, ITensor *out, const Window &amp;window, ElementWiseUnary op)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00119">impl.h:119</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a3d35fe714076b40450ba6ba870fae322"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a3d35fe714076b40450ba6ba870fae322">arm_compute::wrapper::vexpq</a></div><div class="ttdeci">float32x4_t vexpq(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="exp_8h_source.xhtml#l00048">exp.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af7a0f3e622aa4bc8c6077d2262a04e2e"><div class="ttname"><a href="namespacearm__compute.xhtml#af7a0f3e622aa4bc8c6077d2262a04e2e">arm_compute::vfloorq_f32</a></div><div class="ttdeci">float32x4_t vfloorq_f32(float32x4_t val)</div><div class="ttdoc">Calculate floor of a vector.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_afdf11c92be0cb1099e5fdcf3d5c94055"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">arm_compute::cpu::dim_manual_loop</a></div><div class="ttdeci">constexpr auto dim_manual_loop</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00041">impl.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a8d498841f133c2ce4c31076a6f700a4f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a8d498841f133c2ce4c31076a6f700a4f">arm_compute::cpu::elementwise_comp_quantized_signed</a></div><div class="ttdeci">void elementwise_comp_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01013">impl.h:1013</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ac1b90763fee2161591d1d66667bf2c1b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac1b90763fee2161591d1d66667bf2c1b">arm_compute::cpu::elementwise_op_sve_imp</a></div><div class="ttdeci">std::enable_if&lt; std::is_integral&lt; ScalarType &gt;::value, VectorType &gt;::type elementwise_op_sve_imp(svbool_t pg, ElementWiseUnary op, const VectorType &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__unary_2generic_2sve_2impl_8cpp_source.xhtml#l00061">impl.cpp:61</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a5ac8135a2c0a60f10448be0057543ed7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a5ac8135a2c0a60f10448be0057543ed7">arm_compute::wrapper::vinv</a></div><div class="ttdeci">float32x2_t vinv(const float32x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="inv_8h_source.xhtml#l00048">inv.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_acbccd6a89f4cdd679773ce30f7959db0"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acbccd6a89f4cdd679773ce30f7959db0">arm_compute::wrapper::vtanh</a></div><div class="ttdeci">float32x4_t vtanh(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="tanh_8h_source.xhtml#l00041">tanh.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a445e8f34f62074a5a635cd34b1c926d7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a445e8f34f62074a5a635cd34b1c926d7">arm_compute::cpu::elementwise_comparison_op&lt; int16_t &gt;</a></div><div class="ttdeci">template void elementwise_comparison_op&lt; int16_t &gt;(const ITensor *in1, const ITensor *in2, ITensor *out, const ComparisonOperation op, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5063b10e78012bdbfe34caca8ea26697"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">arm_compute::cpu::run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;</a></div><div class="ttdeci">template void run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;(const ITensor *src, const ITensor *weights, const ITensor *biases, ITensor *dst, const Window &amp;window, bool has_biases, const ConvolutionInfo &amp;info)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a23cc34c6476b7df556284c718c44e65c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a23cc34c6476b7df556284c718c44e65c">arm_compute::wrapper::vlog</a></div><div class="ttdeci">float32x4_t vlog(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2intrinsics_2_log_8h_source.xhtml#l00048">log.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_abfd6ff1ff8b79f594df25d64404e7590"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#abfd6ff1ff8b79f594df25d64404e7590">arm_compute::cpu::add_same_sve&lt; uint8_t &gt;</a></div><div class="ttdeci">template void add_same_sve&lt; uint8_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac354c23c8e4921ea8a8ad07e1a1d3fe5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac354c23c8e4921ea8a8ad07e1a1d3fe5">arm_compute::test::validation::idx_width</a></div><div class="ttdeci">const int idx_width</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00262">Scale.cpp:262</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ac4358b7409261f013124bd6068aeee79"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ac4358b7409261f013124bd6068aeee79">arm_compute::wrapper::add_sat</a></div><div class="ttdeci">uint8_t add_sat(const uint8_t &amp;a, const uint8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="scalar_2add_8h_source.xhtml#l00033">add.h:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a6584a40cba8021fe443986524b98319b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a6584a40cba8021fe443986524b98319b">arm_compute::cpu::add_sub_q8_neon_fixedpoint_possible</a></div><div class="ttdeci">bool add_sub_q8_neon_fixedpoint_possible(const ITensorInfo *src0, const ITensorInfo *src1, const ITensorInfo *dst, bool is_addition)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00045">impl.cpp:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_afa3ebf7e0ea95c0c9cadb30c62bad67aaa054ccb4ff684c73cbc2d272d45e32df"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67aaa054ccb4ff684c73cbc2d272d45e32df">arm_compute::cpu::KernelSelectionType::Preferred</a></div><div class="ttdeci">@ Preferred</div><div class="ttdoc">Retrieve the best implementation available for the given Cpu ISA, ignoring the build flags.</div></div>
<div class="ttc" id="anamespaceacl_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespaceacl.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">acl::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdef"><b>Definition:</b> <a href="_acl_8hpp_source.xhtml#l00482">Acl.hpp:482</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1rounding_xhtml_aeecc6e8935077dc93cc5079fe98d3adc"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1rounding.xhtml#aeecc6e8935077dc93cc5079fe98d3adc">arm_compute::utils::rounding::round_half_away_from_zero</a></div><div class="ttdeci">T round_half_away_from_zero(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero.</div><div class="ttdef"><b>Definition:</b> <a href="support_2_rounding_8h_source.xhtml#l00107">Rounding.h:107</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a566497df1ac44164eb8643f5d469afae"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a566497df1ac44164eb8643f5d469afae">arm_compute::wrapper::vpow</a></div><div class="ttdeci">float32x4_t vpow(const float32x4_t &amp;a, const float32x4_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="pow_8h_source.xhtml#l00041">pow.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a84c6e004ed6f806afa00c74dd7ff1440"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a84c6e004ed6f806afa00c74dd7ff1440">arm_compute::cpu::elementwise_comparison_op&lt; uint8_t &gt;</a></div><div class="ttdeci">template void elementwise_comparison_op&lt; uint8_t &gt;(const ITensor *in1, const ITensor *in2, ITensor *out, const ComparisonOperation op, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a443d09c5e20d13e6f4063d0f60616fb5"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a443d09c5e20d13e6f4063d0f60616fb5">arm_compute::cpu::data_layout</a></div><div class="ttdeci">constexpr auto data_layout</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00036">impl.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3e280a9f427dfc6c0f690c7083cba34d"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3e280a9f427dfc6c0f690c7083cba34d">arm_compute::cpu::elementwise_sve_op&lt; int32_t &gt;</a></div><div class="ttdeci">template void elementwise_sve_op&lt; int32_t &gt;(const ITensor *in, ITensor *out, const Window &amp;window, ElementWiseUnary op)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ac5986edc0dbcd0c071107cafb98cbc39"><div class="ttname"><a href="namespacearm__compute.xhtml#ac5986edc0dbcd0c071107cafb98cbc39">arm_compute::vquantize_int16</a></div><div class="ttdeci">int16x8_t vquantize_int16(const float32x4x2_t &amp;qv, float scale)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_symm_8h_source.xhtml#l00150">NESymm.h:150</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3dae474260c001eee4ea5a8f03699e92"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3dae474260c001eee4ea5a8f03699e92">arm_compute::cpu::add_same_sve&lt; int32_t &gt;</a></div><div class="ttdeci">template void add_same_sve&lt; int32_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a475ee3c8ef70a2e4f18effd1d527a63a"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a475ee3c8ef70a2e4f18effd1d527a63a">arm_compute::wrapper::vpadd</a></div><div class="ttdeci">uint8x8_t vpadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00187">add.h:187</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ac57024ac39a9f06f1e5bb37807c0e362"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ac57024ac39a9f06f1e5bb37807c0e362">arm_compute::wrapper::vsin</a></div><div class="ttdeci">float32x4_t vsin(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="sin_8h_source.xhtml#l00048">sin.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aea3a0fb40df47ae7c0b421618d4e35e6"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aea3a0fb40df47ae7c0b421618d4e35e6">arm_compute::cpu::bounding_box_transform_qsymm16</a></div><div class="ttdeci">void bounding_box_transform_qsymm16(const ITensor *boxes, ITensor *pred_boxes, const ITensor *deltas, BoundingBoxTransformInfo bbinfo, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="boundingboxtransform_2generic_2neon_2impl_8cpp_source.xhtml#l00032">impl.cpp:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="aarm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a73e2825fd61d349c5ca2f5313e3c8ea1"><div class="ttname"><a href="namespacearm__compute.xhtml#a73e2825fd61d349c5ca2f5313e3c8ea1">arm_compute::half</a></div><div class="ttdeci">half_float::half half</div><div class="ttdoc">16-bit floating point type</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00036">CoreTypes.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utils_1_1cast_xhtml_a81cf6107131a3583e2b0b762cb9c2862"><div class="ttname"><a href="namespacearm__compute_1_1utils_1_1cast.xhtml#a81cf6107131a3583e2b0b762cb9c2862">arm_compute::utils::cast::U</a></div><div class="ttdeci">U</div><div class="ttdef"><b>Definition:</b> <a href="_saturate_cast_8h_source.xhtml#l00065">SaturateCast.h:65</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4b3ec2db417aa33bc7d68ad6e1ff7952"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4b3ec2db417aa33bc7d68ad6e1ff7952">arm_compute::wrapper::vqadd</a></div><div class="ttdeci">uint8x8_t vqadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00073">add.h:73</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1utility_xhtml_a96efecf997f13a914609ddf1eb67f624"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a96efecf997f13a914609ddf1eb67f624">arm_compute::utility::clamp</a></div><div class="ttdeci">DataType clamp(const DataType &amp;n, const DataType &amp;lower=std::numeric_limits&lt; RangeType &gt;::lowest(), const DataType &amp;upper=std::numeric_limits&lt; RangeType &gt;::max())</div><div class="ttdoc">Performs clamping among a lower and upper value.</div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00102">Utility.h:102</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4611b605e45ab401f02cab15c5e38715"><div class="ttname"><a href="namespacearm__compute.xhtml#a4611b605e45ab401f02cab15c5e38715">arm_compute::float32_t</a></div><div class="ttdeci">float float32_t</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_types_8h_source.xhtml#l00033">CpuTypes.h:33</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_ab05bd244cb8823c69d6dce6a23a758fd"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#ab05bd244cb8823c69d6dce6a23a758fd">SQUARED_DIFF</a></div><div class="ttdeci">#define SQUARED_DIFF(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00030">elementwise_operation_quantized.cl:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_add6426cbf2e057a195846d4ba09a50be"><div class="ttname"><a href="namespacearm__compute.xhtml#add6426cbf2e057a195846d4ba09a50be">arm_compute::RoundingPolicy</a></div><div class="ttdeci">RoundingPolicy</div><div class="ttdoc">Rounding method.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_rounding_8h_source.xhtml#l00030">Rounding.h:30</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00038">DataTypeUtils.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3a984f3b544f65c7fa631b0e25c35644"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3a984f3b544f65c7fa631b0e25c35644">arm_compute::cpu::elementwise_arithmetic_op&lt; float32_t &gt;</a></div><div class="ttdeci">template void elementwise_arithmetic_op&lt; float32_t &gt;(const ITensor *in1, const ITensor *in2, ITensor *out, const ArithmeticOperation op, const Window &amp;window)</div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a63aa8eb6ac2ac3782ffad43a96345f0a"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a63aa8eb6ac2ac3782ffad43a96345f0a">quantize_qasymm8</a></div><div class="ttdeci">uchar quantize_qasymm8(float input, float offset, float scale)</div><div class="ttdoc">Quantize a floating-point scalar value to 8-bit asymmetric.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00047">helpers_asymm.h:47</a></div></div>
<div class="ttc" id="asrc_2common_2utils_2_validate_8h_xhtml_a4966345d10014481a252ea1f91d2d5ab"><div class="ttname"><a href="src_2common_2utils_2_validate_8h.xhtml#a4966345d10014481a252ea1f91d2d5ab">ARM_COMPUTE_ASSERT_NOT_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ASSERT_NOT_NULLPTR(ptr)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_validate_8h_source.xhtml#l00038">Validate.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_ae04d407202e3d50ce6a4c79ac00a5d59"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">arm_compute::support::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00215">ToolchainSupport.h:215</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a464ea9027ae01e64014040d69302800f"><div class="ttname"><a href="namespacearm__compute.xhtml#a464ea9027ae01e64014040d69302800f">arm_compute::quantize_qasymm8_signed</a></div><div class="ttdeci">int8_t quantize_qasymm8_signed(float value, const INFO_TYPE &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a signed 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00323">QuantizationInfo.h:323</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_afbec2094d42590b94e7eead93710411d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#afbec2094d42590b94e7eead93710411d">dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uchar input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from 8-bit asymmetric to floating-point.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00062">helpers_asymm.h:62</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_afffa511a4a4aedc45434f9bddd02ca24"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#afffa511a4a4aedc45434f9bddd02ca24">arm_compute::cpu::instance_normalization_nchw&lt; float &gt;</a></div><div class="ttdeci">template void instance_normalization_nchw&lt; float &gt;(ITensor *input, ITensor *output, float gamma, float beta, float epsilon, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2d36ee278add50c2b9f29cc6746206f1"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2d36ee278add50c2b9f29cc6746206f1">arm_compute::cpu::add_sub_q8_neon_fixedpoint&lt; uint8_t &gt;</a></div><div class="ttdeci">template void add_sub_q8_neon_fixedpoint&lt; uint8_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab801dca7a1e1cfb228bb169e846b74f9"><div class="ttname"><a href="namespacearm__compute.xhtml#ab801dca7a1e1cfb228bb169e846b74f9">arm_compute::is_data_type_quantized_asymmetric_signed</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric_signed(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized signed type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00365">DataTypeUtils.h:365</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_af7ae4e4823c3fe48546d9ef7d99ed259"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af7ae4e4823c3fe48546d9ef7d99ed259">arm_compute::cpu::elementwise_pow</a></div><div class="ttdeci">VectorType elementwise_pow(svbool_t &amp;pg, const VectorType &amp;a, const VectorType &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00039">impl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a56297e0f7b215eea46c818cb7528d9ea"><div class="ttname"><a href="namespacearm__compute.xhtml#a56297e0f7b215eea46c818cb7528d9ea">arm_compute::ActivationFunction</a></div><div class="ttdeci">ActivationFunction</div><div class="ttdoc">Available activation functions.</div><div class="ttdef"><b>Definition:</b> <a href="_activation_layer_info_8h_source.xhtml#l00041">ActivationLayerInfo.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aaae2b6b1c3f4404121346a4c27b22647"><div class="ttname"><a href="namespacearm__compute.xhtml#aaae2b6b1c3f4404121346a4c27b22647">arm_compute::round</a></div><div class="ttdeci">int round(float x, RoundingPolicy rounding_policy)</div><div class="ttdoc">Return a rounded value of x.</div><div class="ttdef"><b>Definition:</b> <a href="_rounding_8cpp_source.xhtml#l00036">Rounding.cpp:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a9f0a2858d9233ec0443a1d1f2b3ca07c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a9f0a2858d9233ec0443a1d1f2b3ca07c">arm_compute::cpu::u8_neon_scale</a></div><div class="ttdeci">void u8_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2integer_8cpp_source.xhtml#l00737">integer.cpp:737</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aed661d4bd9a14812355576773982eb7a"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aed661d4bd9a14812355576773982eb7a">arm_compute::wrapper::vnot</a></div><div class="ttdeci">uint8x8_t vnot(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="not_8h_source.xhtml#l00039">not.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_af21c7fddee28e9aa0a37c633300db0e0"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">arm_compute::QuantizationInfo::scale</a></div><div class="ttdeci">const std::vector&lt; float &gt; &amp; scale() const</div><div class="ttdoc">Scale vector accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00120">QuantizationInfo.h:120</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a1c36ad549e97f081b9424caaa9bc8272"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1c36ad549e97f081b9424caaa9bc8272">arm_compute::cpu::add_same_sve&lt; int16_t &gt;</a></div><div class="ttdeci">template void add_same_sve&lt; int16_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8a5bd58601c5ec1fb14709c6361dfe2f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8a5bd58601c5ec1fb14709c6361dfe2f">arm_compute::wrapper::verf</a></div><div class="ttdeci">float32x4_t verf(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="erf_8h_source.xhtml#l00042">erf.h:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaaab31fd732b950bf0d4b98f00e259c0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">arm_compute::test::validation::scale_y</a></div><div class="ttdeci">const float scale_y</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">Scale.cpp:260</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a45b95eaeb59fa40d8fb73c6a0b70fa98"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a45b95eaeb59fa40d8fb73c6a0b70fa98">arm_compute::cpu::elementwise_arithmetic_op&lt; int16_t &gt;</a></div><div class="ttdeci">template void elementwise_arithmetic_op&lt; int16_t &gt;(const ITensor *in1, const ITensor *in2, ITensor *out, const ArithmeticOperation op, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5bb53d2922eed568fcd9de9081faeeb7"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5bb53d2922eed568fcd9de9081faeeb7">arm_compute::cpu::load_quantized_signed</a></div><div class="ttdeci">float32x4x4_t load_quantized_signed(const int8_t *input1_ptr, const int32x4_t &amp;offset, const float32x4_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00570">impl.h:570</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a84437d80241f6a31e1a07c231ee8e3ac"><div class="ttname"><a href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">arm_compute::is_data_type_quantized_per_channel</a></div><div class="ttdeci">bool is_data_type_quantized_per_channel(DataType dt)</div><div class="ttdoc">Check if a given data type is of per channel type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00419">DataTypeUtils.h:419</a></div></div>
<div class="ttc" id="asrc_2common_2utils_2_validate_8h_xhtml_a6d40659f94b26d9ac5ae03538252dcd4"><div class="ttname"><a href="src_2common_2utils_2_validate_8h.xhtml#a6d40659f94b26d9ac5ae03538252dcd4">ARM_COMPUTE_ASSERT</a></div><div class="ttdeci">#define ARM_COMPUTE_ASSERT(cond)</div><div class="ttdef"><b>Definition:</b> <a href="src_2common_2utils_2_validate_8h_source.xhtml#l00037">Validate.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_ac26a2b6f5d8e0c60e67684eea7e71e7c"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">arm_compute::support::cpp11::nearbyint</a></div><div class="ttdeci">T nearbyint(T value)</div><div class="ttdoc">Rounds the floating-point argument arg to an integer value in floating-point format,...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00170">ToolchainSupport.h:170</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">helpers.h:1142</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a2666155960777a08cf2552d554f1da34">arm_compute::cpu::AsmConvMethod::Im2Col</a></div><div class="ttdeci">@ Im2Col</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_abae8774fe34bba0075fc5f9df030c019"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#abae8774fe34bba0075fc5f9df030c019">arm_compute::cpu::vector_float_norm</a></div><div class="ttdeci">InputType vector_float_norm(const InputType &amp;inputs, const AccType &amp;vec_mean, const AccType &amp;vec_multip, const AccType &amp;vec_beta)</div><div class="ttdef"><b>Definition:</b> <a href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00043">impl.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a85310967abb447a1cb1167ba8f73eab0"><div class="ttname"><a href="namespacearm__compute.xhtml#a85310967abb447a1cb1167ba8f73eab0">arm_compute::dequantize_qasymm16</a></div><div class="ttdeci">float dequantize_qasymm16(uint16_t value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 16-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00537">QuantizationInfo.h:537</a></div></div>
<div class="ttc" id="aworking__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00322">working_space.hpp:322</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_aae8583b382eaea109164f2f3e16380b1"><div class="ttname"><a href="namespacearm__compute.xhtml#aae8583b382eaea109164f2f3e16380b1">arm_compute::dequantize_qsymm16</a></div><div class="ttdeci">float dequantize_qsymm16(int16_t value, const UniformQuantizationInfo &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a 16-bit symmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00484">QuantizationInfo.h:484</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8e5924674eee0f441d54eb75d656700f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8e5924674eee0f441d54eb75d656700f">arm_compute::wrapper::vbsl</a></div><div class="ttdeci">uint8x8_t vbsl(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="bsl_8h_source.xhtml#l00039">bsl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a074a73c207b678e25b31f8076a4a7b45"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a074a73c207b678e25b31f8076a4a7b45">arm_compute::cpu::matrix_addition_f32</a></div><div class="ttdeci">void matrix_addition_f32(const ITensor *src, ITensor *dst, const Window &amp;window, float beta)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__matrix__add_2generic_2neon_2impl_8cpp_source.xhtml#l00033">impl.cpp:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a855955a410dcb97226318ba9c64fee78"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a855955a410dcb97226318ba9c64fee78">arm_compute::cpu::add_same_sve&lt; float &gt;</a></div><div class="ttdeci">template void add_same_sve&lt; float &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window)</div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00152">QuantizationInfo.h:152</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1737829276757f7640dd77e6b6c8d1f5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1737829276757f7640dd77e6b6c8d1f5">arm_compute::wrapper::sub_sat</a></div><div class="ttdeci">uint8_t sub_sat(const uint8_t &amp;a, const uint8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="scalar_2sub_8h_source.xhtml#l00033">sub.h:33</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ac071623f14587f7cc6c4aea757d4378b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ac071623f14587f7cc6c4aea757d4378b">arm_compute::wrapper::vand</a></div><div class="ttdeci">uint8x8_t vand(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="and_8h_source.xhtml#l00039">and.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a4555abacb6f1b8d4510a0c38b2675778"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4555abacb6f1b8d4510a0c38b2675778">arm_compute::cpu::add_sub_qasymm8_signed_neon</a></div><div class="ttdeci">void add_sub_qasymm8_signed_neon(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00501">impl.cpp:501</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_afa3ebf7e0ea95c0c9cadb30c62bad67aaeaa4dc5078017a5c5bebf383ab6f5124"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#afa3ebf7e0ea95c0c9cadb30c62bad67aaeaa4dc5078017a5c5bebf383ab6f5124">arm_compute::cpu::KernelSelectionType::Supported</a></div><div class="ttdeci">@ Supported</div><div class="ttdoc">Retrieve the best implementation available for the given Cpu ISA that is supported by the current bui...</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a62947a5a80433465f50372c441be3c8c"><div class="ttname"><a href="namespacearm__compute.xhtml#a62947a5a80433465f50372c441be3c8c">arm_compute::vreduce</a></div><div class="ttdeci">float vreduce(const float32x4_t &amp;v)</div><div class="ttdoc">Reduce a vector to be a scalar by accumulating all lanes in the vector.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_math_8inl_source.xhtml#l00537">NEMath.inl:537</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a0886942393a3ba0dfefaa7516b159784"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">arm_compute::test::validation::for</a></div><div class="ttdeci">for(size_t k=0;k&lt; _target.size();++k)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_unstack_8cpp_source.xhtml#l00091">Unstack.cpp:91</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a9a8774284dc5c784b77e14670087e590"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a9a8774284dc5c784b77e14670087e590">arm_compute::cpu::add_sub_q8_neon_fixedpoint&lt; int8_t &gt;</a></div><div class="ttdeci">template void add_sub_q8_neon_fixedpoint&lt; int8_t &gt;(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a98c8805795fb292b29f4967621cd8189"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a98c8805795fb292b29f4967621cd8189">arm_compute::wrapper::vround</a></div><div class="ttdeci">float32x4_t vround(const float32x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="round_8h_source.xhtml#l00048">round.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa24da6d1c1ce97217bab0291ce404fa7"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa24da6d1c1ce97217bab0291ce404fa7">arm_compute::wrapper::vneg</a></div><div class="ttdeci">int8x8_t vneg(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="neg_8h_source.xhtml#l00039">neg.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aef4214cfa8378eaebdbd1d3dc139f370"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aef4214cfa8378eaebdbd1d3dc139f370">arm_compute::cpu::compute_all_anchors_qasymm16</a></div><div class="ttdeci">void compute_all_anchors_qasymm16(const ITensor *anchors, ITensor *all_anchors, ComputeAnchorsInfo anchors_info, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="genproposals_2generic_2neon_2impl_8cpp_source.xhtml#l00031">impl.cpp:31</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a6ee3531f4293703c9b32e28421bfc061"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">arm_compute::wrapper::vsetlane</a></div><div class="ttdeci">uint8x8_t vsetlane(const uint8_t value, const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="setlane_8h_source.xhtml#l00091">setlane.h:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ae78a2afc8cb469d8629dc419237e5c68"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">arm_compute::test::validation::scale_x</a></div><div class="ttdeci">const float scale_x</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">Scale.cpp:259</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_aacc3ee1a7f283f8ef65cea31f4436a95"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#aacc3ee1a7f283f8ef65cea31f4436a95">MAX</a></div><div class="ttdeci">#define MAX(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00028">elementwise_operation_quantized.cl:28</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00222">Cast.cpp:222</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab237a0a375cf382d52b61653248d3d4a"><div class="ttname"><a href="namespacearm__compute.xhtml#ab237a0a375cf382d52b61653248d3d4a">arm_compute::ceil_to_multiple</a></div><div class="ttdeci">auto ceil_to_multiple(S value, T divisor) -&gt; decltype(((value+divisor - 1)/divisor) *divisor)</div><div class="ttdoc">Computes the smallest number larger or equal to value that is a multiple of divisor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2utils_2math_2_math_8h_source.xhtml#l00050">Math.h:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66d15db8e989b58b61603ce73d8696b5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">arm_compute::wrapper::vmlal</a></div><div class="ttdeci">uint16x8_t vmlal(const uint16x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00076">mla.h:76</a></div></div>
<div class="ttc" id="ahelpers__asymm_8h_xhtml_a3dc07539dda26f6cd2dcdc08a222292d"><div class="ttname"><a href="helpers__asymm_8h.xhtml#a3dc07539dda26f6cd2dcdc08a222292d">dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(char input, float offset, float scale)</div><div class="ttdoc">Dequantize a scalar value from signed 8-bit asymmetric to floating-point.</div><div class="ttdef"><b>Definition:</b> <a href="helpers__asymm_8h_source.xhtml#l00075">helpers_asymm.h:75</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">arm_compute::cpu::AsmConvMethod::Indirect</a></div><div class="ttdeci">@ Indirect</div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adfef6f05588c3d40195488620ab54b97"><div class="ttname"><a href="namespacearm__compute.xhtml#adfef6f05588c3d40195488620ab54b97">arm_compute::get_data_layout_dimension_index</a></div><div class="ttdeci">size_t get_data_layout_dimension_index(const DataLayout &amp;data_layout, const DataLayoutDimension &amp;data_layout_dimension)</div><div class="ttdoc">Get the index of the given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00201">Helpers.inl:201</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_af77016f5946f5a276e68576bb1b68877"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af77016f5946f5a276e68576bb1b68877">arm_compute::cpu::store_quantized_signed</a></div><div class="ttdeci">void store_quantized_signed(int8_t *output_ptr, const float32x4x4_t &amp;rf, const float32x4_t &amp;offset, const float32x4_t &amp;invscale)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00615">impl.h:615</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a></div><div class="ttdoc">128-bit vector tag</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00054">traits.h:54</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2eb02640072c41490fb1ff8c91ff0992"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2eb02640072c41490fb1ff8c91ff0992">arm_compute::cpu::load_quantized</a></div><div class="ttdeci">svfloat32x4_t load_quantized(const uint8_t *ptr, svbool_t pg, const svint32_t &amp;offset, const svfloat32_t &amp;scale)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2sve2_2impl_8h_source.xhtml#l00048">impl.h:48</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3fca2bb83034016f5060055c59707167"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3fca2bb83034016f5060055c59707167">arm_compute::cpu::elementwise_div</a></div><div class="ttdeci">VectorType elementwise_div(svbool_t &amp;pg, const VectorType &amp;a, const VectorType &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2sve_2impl_8h_source.xhtml#l00045">impl.h:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_a74e75242132eaabbc1c512488a135926"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a74e75242132eaabbc1c512488a135926">MIN</a></div><div class="ttdeci">#define MIN(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00029">elementwise_operation_quantized.cl:29</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_1_1traits_xhtml_acf6b3be295be8dbd7897536bcd7561a3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">arm_compute::wrapper::traits::neon_bitvector_tag_t</a></div><div class="ttdeci">typename neon_bitvector&lt; T, BW &gt;::tag_type neon_bitvector_tag_t</div><div class="ttdoc">Helper type template to get the tag type of a neon vector.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00141">traits.h:141</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ae34c923cebe0f52cde52dbef0eca2d5b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ae34c923cebe0f52cde52dbef0eca2d5b">arm_compute::cpu::compute_region_coordinate</a></div><div class="ttdeci">float compute_region_coordinate(int p, float bin_size, float roi_anchor, float max_value)</div><div class="ttdef"><b>Definition:</b> <a href="roialign_2generic_2neon_2impl_8h_source.xhtml#l00267">impl.h:267</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_af486d5eb4935eb5601d9c5fcc42be220"><div class="ttname"><a href="namespacearm__compute.xhtml#af486d5eb4935eb5601d9c5fcc42be220">arm_compute::qasymm8_signed_t</a></div><div class="ttdeci">int8_t qasymm8_signed_t</div><div class="ttdoc">8 bit signed quantized asymmetric scalar value</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00036">QuantizationInfo.h:36</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a33d1899b4ff31e4a36f93fa618978196"><div class="ttname"><a href="namespacearm__compute.xhtml#a33d1899b4ff31e4a36f93fa618978196">arm_compute::qsymm16_t</a></div><div class="ttdeci">int16_t qsymm16_t</div><div class="ttdoc">16 bit quantized symmetric scalar value</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00038">QuantizationInfo.h:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_af0d0c68bacf4e3bdbe6813e769cd46c2"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#af0d0c68bacf4e3bdbe6813e769cd46c2">arm_compute::cpu::poolingMxN_fp32_neon_nhwc_kernel_indices</a></div><div class="ttdeci">void poolingMxN_fp32_neon_nhwc_kernel_indices(const ITensor *src, ITensor *dst0, ITensor *dst1, const PoolingLayerInfo &amp;pool_info, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2pool2d_2neon_2fp32_8cpp_source.xhtml#l00163">fp32.cpp:163</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aef362eaeea03ec75104e13cb530ef02d"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aef362eaeea03ec75104e13cb530ef02d">arm_compute::cpu::vector_matrix_multiply_f32</a></div><div class="ttdeci">void vector_matrix_multiply_f32(const ITensor *lhs, const ITensor *rhs, ITensor *dst, const Window &amp;window, const ThreadInfo &amp;info, float alpha)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00035">impl.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a4f12b7902ae53e3898b2ab779f962340"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a4f12b7902ae53e3898b2ab779f962340">arm_compute::test::validation::scale</a></div><div class="ttdeci">NEScale scale</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00272">Scale.cpp:272</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a4ff1249e423ae9bfab075f5317c4d004"><div class="ttname"><a href="namespacearm__compute.xhtml#a4ff1249e423ae9bfab075f5317c4d004">arm_compute::vquantize</a></div><div class="ttdeci">uint8x8_t vquantize(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00591">NEAsymm.h:591</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a7eedba29396b0db728bffdf5f202d85c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a7eedba29396b0db728bffdf5f202d85c">arm_compute::wrapper::vcgt</a></div><div class="ttdeci">uint8x8_t vcgt(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cgt_8h_source.xhtml#l00039">cgt.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="aelementwise__operation__quantized_8cl_xhtml_a49f6fecffd852cda3b0ece53dcbb2b87"><div class="ttname"><a href="elementwise__operation__quantized_8cl.xhtml#a49f6fecffd852cda3b0ece53dcbb2b87">DIV</a></div><div class="ttdeci">#define DIV(x, y)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__operation__quantized_8cl_source.xhtml#l00032">elementwise_operation_quantized.cl:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa7ccd655f600847f9d471604ed47e810"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa7ccd655f600847f9d471604ed47e810">arm_compute::wrapper::vceq</a></div><div class="ttdeci">uint8x8_t vceq(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="ceq_8h_source.xhtml#l00039">ceq.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1scale__utils_xhtml_a8c25b29542a5312b947f72e5ea5c825b"><div class="ttname"><a href="namespacearm__compute_1_1scale__utils.xhtml#a8c25b29542a5312b947f72e5ea5c825b">arm_compute::scale_utils::calculate_resize_ratio</a></div><div class="ttdeci">float calculate_resize_ratio(size_t input_size, size_t output_size, bool align_corners=false)</div><div class="ttdoc">Returns resize ratio between input and output with consideration of aligned corners.</div><div class="ttdef"><b>Definition:</b> <a href="_scale_utils_8cpp_source.xhtml#l00032">ScaleUtils.cpp:32</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ab799fd9cd5fc5989593e69c55bc400f9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab799fd9cd5fc5989593e69c55bc400f9">arm_compute::wrapper::vpmax</a></div><div class="ttdeci">uint8x8_t vpmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="pmax_8h_source.xhtml#l00039">pmax.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1f777df8db31568a3436995df958714c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1f777df8db31568a3436995df958714c">arm_compute::wrapper::vcge</a></div><div class="ttdeci">uint8x8_t vcge(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="cge_8h_source.xhtml#l00039">cge.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00346">DataTypeUtils.h:346</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab8005b943e23486a2000a7966d664df2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8005b943e23486a2000a7966d664df2">arm_compute::dequantize</a></div><div class="ttdeci">float dequantize(uint8_t value, float scale, int32_t offset)</div><div class="ttdoc">Dequantize a value given an 8-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00393">QuantizationInfo.h:393</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3fcdebf0b2654721ecdfa39b6bbd542d"><div class="ttname"><a href="namespacearm__compute.xhtml#a3fcdebf0b2654721ecdfa39b6bbd542d">arm_compute::quantize_qasymm16</a></div><div class="ttdeci">uint16_t quantize_qasymm16(float value, const UniformQuantizationInfo &amp;qinfo, RoundingPolicy rounding_policy=RoundingPolicy::TO_NEAREST_UP)</div><div class="ttdoc">Quantize a value given a 16-bit asymmetric quantization scheme.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00521">QuantizationInfo.h:521</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae1a6f6dde14fc3b0470cd0b08041ea9f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">arm_compute::wrapper::vload</a></div><div class="ttdeci">uint8x8_t vload(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00039">load.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab8938bcb3ec0f5f8d93285eb3a28b701"><div class="ttname"><a href="namespacearm__compute.xhtml#ab8938bcb3ec0f5f8d93285eb3a28b701">arm_compute::qasymm8_t</a></div><div class="ttdeci">uint8_t qasymm8_t</div><div class="ttdoc">8 bit quantized asymmetric scalar value</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00037">QuantizationInfo.h:37</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00043">AsymmHelpers.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2065fcea8e34c2f3ee039d5a0332348b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">arm_compute::cpu::channel_idx</a></div><div class="ttdeci">const size_t channel_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">impl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">arm_compute::cpu::AsmConvMethod::Conv</a></div><div class="ttdeci">@ Conv</div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_adcae039ec81e3fb90684a1c3e1e2540b"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#adcae039ec81e3fb90684a1c3e1e2540b">arm_compute::mlgo::parser::condition</a></div><div class="ttdeci">Condition condition(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00690">MLGOParser.cpp:690</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ad3be09105863ab9faa320e7c0c253071"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ad3be09105863ab9faa320e7c0c253071">arm_compute::cpu::load_as_f32</a></div><div class="ttdeci">float32x4_t load_as_f32(T *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="crop__helper_8h_source.xhtml#l00034">crop_helper.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a3479355ca4b6fb389a3aae4da266bd0e"><div class="ttname"><a href="namespacearm__compute.xhtml#a3479355ca4b6fb389a3aae4da266bd0e">arm_compute::finalize_quantization</a></div><div class="ttdeci">uint8x16_t finalize_quantization(int32x4x4_t &amp;in_s32, int result_fixedpoint_multiplier, int32_t result_shift, int32x4_t result_offset_after_shift_s32, uint8x16_t min_u8, uint8x16_t max_u8, bool is_bounded_relu)</div><div class="ttdoc">Performs final quantization step on 16 elements.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00084">NEAsymm.h:84</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a05c10bc9018179245c50d45b330a1c6a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">arm_compute::cpu::step</a></div><div class="ttdeci">constexpr int step</div><div class="ttdef"><b>Definition:</b> <a href="cpu_2kernels_2floor_2neon_2fp32_8cpp_source.xhtml#l00035">fp32.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aae3f4470575b8ef973d136101ea80b68"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aae3f4470575b8ef973d136101ea80b68">arm_compute::cpu::elementwise_op_quantized</a></div><div class="ttdeci">void elementwise_op_quantized(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, uint8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const uint8_t *, float32x4x4_t, uint8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const uint8_t *, const uint8_t *, uint8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l00877">impl.h:877</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa1c6a4a70ded6258fff31b3de53dfb8f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa1c6a4a70ded6258fff31b3de53dfb8f">arm_compute::graph::bfs</a></div><div class="ttdeci">std::vector&lt; NodeID &gt; bfs(Graph &amp;g)</div><div class="ttdoc">Breadth first search traversal.</div><div class="ttdef"><b>Definition:</b> <a href="_topological_sort_8cpp_source.xhtml#l00072">TopologicalSort.cpp:72</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a533635332a3a17c16d8f21c77e15e907"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a533635332a3a17c16d8f21c77e15e907">arm_compute::wrapper::vdiv</a></div><div class="ttdeci">float32x2_t vdiv(const float32x2_t &amp;a, const float32x2_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="div_8h_source.xhtml#l00059">div.h:59</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_af399bedeaeb8dc177d3a301a12c3a5d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">arm_compute::support::cpp11::fma</a></div><div class="ttdeci">T fma(T x, T y, T z)</div><div class="ttdoc">Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00253">ToolchainSupport.h:253</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aeed4536d89bb131303af92922deb0a68"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aeed4536d89bb131303af92922deb0a68">arm_compute::cpu::mean_stddev_normalization&lt; float, 4 &gt;</a></div><div class="ttdeci">template void mean_stddev_normalization&lt; float, 4 &gt;(ITensor *input, ITensor *output, float epsilon, const Window &amp;window)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_afd5617a6674f304d90561fecf9411b76"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#afd5617a6674f304d90561fecf9411b76">arm_compute::cpu::elementwise_op&lt; uint8_t &gt;</a></div><div class="ttdeci">void elementwise_op&lt; uint8_t &gt;(const ITensor *in, ITensor *out, const Window &amp;window, ElementWiseUnary op)</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__unary_2generic_2neon_2impl_8h_source.xhtml#l00211">impl.h:211</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a76f394ac7b594f233f6fd13ad8bd99d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a76f394ac7b594f233f6fd13ad8bd99d5">arm_compute::vquantize_signed</a></div><div class="ttdeci">int8x8_t vquantize_signed(const float32x4x2_t &amp;qv, const UniformQuantizationInfo &amp;qi)</div><div class="ttdoc">Quantize a neon vector holding 8 floating point values.</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00616">NEAsymm.h:616</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a77512808087f88d133abae9a79c0e180"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a77512808087f88d133abae9a79c0e180">arm_compute::cpu::elementwise_sve_op&lt; float32_t &gt;</a></div><div class="ttdeci">template void elementwise_sve_op&lt; float32_t &gt;(const ITensor *in, ITensor *out, const Window &amp;window, ElementWiseUnary op)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a4a3377ac3e3280b91c86b775c696675a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a4a3377ac3e3280b91c86b775c696675a">arm_compute::cpu::vector_float_sum</a></div><div class="ttdeci">void vector_float_sum(AccType &amp;result, AccType &amp;result_square, const InputType &amp;inputs)</div><div class="ttdef"><b>Definition:</b> <a href="instancenorm_2generic_2neon_2impl_8cpp_source.xhtml#l00035">impl.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_adc8234d074c193f521029e81cda80bb2"><div class="ttname"><a href="namespacearm__compute.xhtml#adc8234d074c193f521029e81cda80bb2">arm_compute::qasymm8x16_signed_t</a></div><div class="ttdeci">int8x16_t qasymm8x16_signed_t</div><div class="ttdoc">8 bit quantized signed asymmetric vector with 16 elements</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_asymm_8h_source.xhtml#l00044">NEAsymm.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a548131b3d37da47a2e9d32111c88dfe1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a548131b3d37da47a2e9d32111c88dfe1">arm_compute::test::validation::reference::slice</a></div><div class="ttdeci">SimpleTensor&lt; T &gt; slice(const SimpleTensor&lt; T &gt; &amp;src, Coordinates starts, Coordinates ends)</div><div class="ttdef"><b>Definition:</b> <a href="_slice_operations_8cpp_source.xhtml#l00038">SliceOperations.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab55486f1153a4c5f507d4923b59fc6a0"><div class="ttname"><a href="namespacearm__compute.xhtml#ab55486f1153a4c5f507d4923b59fc6a0">arm_compute::vexpq_f32</a></div><div class="ttdeci">float32x4_t vexpq_f32(float32x4_t x)</div><div class="ttdoc">Calculate exponential.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ad85d7becf0c6e3cffbc255489808e219"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ad85d7becf0c6e3cffbc255489808e219">arm_compute::test::validation::qinfo</a></div><div class="ttdeci">const QuantizationInfo qinfo</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00155">Im2Col.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a503eae482390645cffa1439822fa864a"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a503eae482390645cffa1439822fa864a">arm_compute::cpu::s8_neon_scale</a></div><div class="ttdeci">void s8_neon_scale(const ITensor *src, ITensor *dst, const ITensor *offsets, const ITensor *dx, const ITensor *dy, InterpolationPolicy policy, BorderMode border_mode, PixelValue constant_border_value, float sampling_offset, bool align_corners, const Window &amp;window)</div><div class="ttdef"><b>Definition:</b> <a href="scale_2neon_2integer_8cpp_source.xhtml#l00714">integer.cpp:714</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa7a641703a9c98932d775d915bf7a3e5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa7a641703a9c98932d775d915bf7a3e5">arm_compute::wrapper::vrev64</a></div><div class="ttdeci">uint8x8_t vrev64(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="rev64_8h_source.xhtml#l00039">rev64.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a1806b9850ee209fa95836d94e33e176f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a1806b9850ee209fa95836d94e33e176f">arm_compute::cpu::elementwise_op_quantized_signed</a></div><div class="ttdeci">void elementwise_op_quantized_signed(const ITensor *in1, const ITensor *in2, ITensor *out, const Window &amp;window, int8_t(*scalar_func)(const float &amp;, const float &amp;, UniformQuantizationInfo), int(*broadcast_func)(int, int, int, const int8_t *, float32x4x4_t, int8_t *, int32x4_t, float32x4_t, float32x4_t, float32x4_t, const bool), int(*neon_func)(int, int, int, const int8_t *, const int8_t *, int8_t *, int32x4_t, int32x4_t, float32x4_t, float32x4_t, float32x4_t, float32x4_t))</div><div class="ttdef"><b>Definition:</b> <a href="elementwise__binary_2generic_2neon_2impl_8h_source.xhtml#l01148">impl.h:1148</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4c1fe3150ad2ca29262dc6403605e65c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4c1fe3150ad2ca29262dc6403605e65c">arm_compute::wrapper::vabs</a></div><div class="ttdeci">int8x8_t vabs(const int8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="abs_8h_source.xhtml#l00046">abs.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1helpers_1_1float__ops_xhtml_ab2dcf325d146568ecc8d4a4bd36c02ac"><div class="ttname"><a href="namespacearm__compute_1_1helpers_1_1float__ops.xhtml#ab2dcf325d146568ecc8d4a4bd36c02ac">arm_compute::helpers::float_ops::is_one</a></div><div class="ttdeci">bool is_one(float a, float epsilon=0.00001f)</div><div class="ttdoc">Checks if the input floating point number is 1.0f checking if the difference is within a range define...</div><div class="ttdef"><b>Definition:</b> <a href="float__ops_8h_source.xhtml#l00100">float_ops.h:100</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a990ee09727a5f2205afa13a59576e98d"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a990ee09727a5f2205afa13a59576e98d">arm_compute::cpu::add_sub_qasymm8_neon</a></div><div class="ttdeci">void add_sub_qasymm8_neon(const ITensor *src0, const ITensor *src1, ITensor *dst, const ConvertPolicy &amp;policy, const Window &amp;window, bool is_addition)</div><div class="ttdef"><b>Definition:</b> <a href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00311">impl.cpp:311</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a614928b75209ad4ec4e4cdfab5e19cc8"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a614928b75209ad4ec4e4cdfab5e19cc8">arm_compute::cpu::matrix_matrix_multiply_f32</a></div><div class="ttdeci">void matrix_matrix_multiply_f32(const ITensor *lhs, const ITensor *rhs, ITensor *dst, const Window &amp;window, const ThreadInfo &amp;info, float alpha)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__matrix__mul_2generic_2neon_2impl_8cpp_source.xhtml#l00279">impl.cpp:279</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00041">AsymmHelpers.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a452ce01d9794d6b04de3699ddbf4d2d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">arm_compute::support::cpp11::lround</a></div><div class="ttdeci">long lround(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero and cast to long.</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00200">ToolchainSupport.h:200</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1cpu.xhtml">cpu</a></li>
    <li class="footer">Generated on Mon Apr 29 2024 10:54:09 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
