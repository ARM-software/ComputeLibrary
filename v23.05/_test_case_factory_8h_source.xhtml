<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: tests/framework/TestCaseFactory.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_test_case_factory_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TestCaseFactory.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_test_case_factory_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2020 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_TEST_TEST_CASE_FACTORY</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_TEST_TEST_CASE_FACTORY</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_dataset_modes_8h.xhtml">DatasetModes.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_test_case_8h.xhtml">TestCase.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>test</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>framework</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">/** Abstract factory class to create test cases. */</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml">   40</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml">TestCaseFactory</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">    /** Test case status.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">     * ACTIVE == Test is run and result is validated. Failure on failed validation.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">     * EXPECTED_FAILURE == Test is run and result is validated. Failure on successful validation.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">     * DISABLED == Test is not run.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">   49</a></span>&#160;    <span class="keyword">enum class</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">ACTIVE</a>,</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">EXPECTED_FAILURE</a>,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">DISABLED</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    };</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">    /** Constructor.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">     * @param[in] suite_name  Name of the test suite to which the test case has been added.</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">     * @param[in] name        Name of the test case.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">     * @param[in] mode        Datset mode of the test case.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">     * @param[in] status      Status of the test case.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">     * @param[in] description Description of data arguments.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a2d128e015a7913a30691094670608cfd">TestCaseFactory</a>(std::string suite_name, std::string <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">mode</a>, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a>, std::string description = <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">    /** Default destructor. */</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#aca5077964dc68ade0c366fb10a09fce8">~TestCaseFactory</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">    /** Name of the test case.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">     * @return Name of the test case.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    std::string <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /** Get the mode for which test case will be enabled.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     * @return Dataset mode of the test case.</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">mode</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">    /** Get the status of the test case.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">     * @return Status of the test case.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a>() <span class="keyword">const</span>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">    /** Factory function to create the test case</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">     * @return Unique pointer to a newly created test case.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">virtual</span> std::unique_ptr&lt;TestCase&gt; <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a15cffdfdea029e4617b983044f27f25e">make</a>() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> std::string _suite_name;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> std::string _test_name;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> std::string _data_description;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> _mode{ <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">DatasetMode::ALL</a> };</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a>      _status{ <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">Status::ACTIVE</a> };</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;};</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">/** Implementation of a test case factory to create non-data test cases. */</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.xhtml">  103</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.xhtml">SimpleTestCaseFactory</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml">TestCaseFactory</a></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">    /** Default constructor. */</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">using</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a2d128e015a7913a30691094670608cfd">TestCaseFactory::TestCaseFactory</a>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    std::unique_ptr&lt;TestCase&gt; <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a15cffdfdea029e4617b983044f27f25e">make</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;};</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">/** Implementation of a test case factory to create data test cases. */</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml">  114</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml">DataTestCaseFactory</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml">TestCaseFactory</a></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">    /** Constructor.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">     * @param[in] suite_name  Name of the test suite to which the test case has been added.</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">     * @param[in] test_name   Name of the test case.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">     * @param[in] mode        Mode in which the test case is enabled.</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">     * @param[in] status      Status of the test case.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">     * @param[in] description Description of data arguments.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">     * @param[in] data        Input data for the test case.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml">DataTestCaseFactory</a>(std::string suite_name, std::string test_name, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">mode</a>, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a>, std::string description, <span class="keyword">const</span> D &amp;data);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    std::unique_ptr&lt;TestCase&gt; <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a15cffdfdea029e4617b983044f27f25e">make</a>() <span class="keyword">const override</span>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    D _data;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;};</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a2d128e015a7913a30691094670608cfd">  134</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a2d128e015a7913a30691094670608cfd">TestCaseFactory::TestCaseFactory</a>(std::string suite_name, std::string test_name, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">mode</a>, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a>, std::string description)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    : _suite_name{ std::move(suite_name) }, _test_name{ std::move(test_name) }, _data_description{ std::move(description) }, _mode{ <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">mode</a> }, _status{ <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a> }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a1d89c28bd42ba9a52da008bb69367171">  140</a></span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a1d89c28bd42ba9a52da008bb69367171">TestCaseFactory::name</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::string <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a> = _suite_name + <span class="stringliteral">&quot;/&quot;</span> + _test_name;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span>(!_data_description.empty())</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        name += <span class="stringliteral">&quot;@&quot;</span> + _data_description;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a1d89c28bd42ba9a52da008bb69367171">name</a>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">  152</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">TestCaseFactory::mode</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> _mode;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">  157</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">TestCaseFactory::status</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">return</span> _status;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1test_1_1framework.xhtml#a5d331575f41ec3bf8e31afce9a89cd2a">  162</a></span>&#160;inline ::std::ostream &amp;<a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a9a57b6c1d3a82001ad4f83676fbb9302">operator&lt;&lt;</a>(::std::ostream &amp;stream, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">TestCaseFactory::Status</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a>)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">switch</span>(status)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">TestCaseFactory::Status::ACTIVE</a>:</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            stream &lt;&lt; <span class="stringliteral">&quot;ACTIVE&quot;</span>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">TestCaseFactory::Status::EXPECTED_FAILURE</a>:</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            stream &lt;&lt; <span class="stringliteral">&quot;EXPECTED_FAILURE&quot;</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">TestCaseFactory::Status::DISABLED</a>:</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            stream &lt;&lt; <span class="stringliteral">&quot;DISABLED&quot;</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Unsupported test case factory status&quot;</span>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.xhtml#a48d02d3cc8555c4439748dfa76e5c8ea">  183</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;TestCase&gt; <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.xhtml#a48d02d3cc8555c4439748dfa76e5c8ea">SimpleTestCaseFactory&lt;T&gt;::make</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;T&gt;();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml#aacdf355fbfb7579c36e50c757809c148">  189</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml#aacdf355fbfb7579c36e50c757809c148">DataTestCaseFactory&lt;T, D&gt;::DataTestCaseFactory</a>(std::string suite_name, std::string test_name, <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">DatasetMode</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">mode</a>, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">Status</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a>, std::string description, <span class="keyword">const</span> D &amp;data)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    : <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml">TestCaseFactory</a>{ std::move(suite_name), std::move(test_name), <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">mode</a>, <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">status</a>, std::move(description) }, _data{ data }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml#a48d02d3cc8555c4439748dfa76e5c8ea">  195</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;TestCase&gt; <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml#a48d02d3cc8555c4439748dfa76e5c8ea">DataTestCaseFactory&lt;T, D&gt;::make</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">return</span> std::make_unique&lt;T&gt;(_data);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;}</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;} <span class="comment">// namespace framework</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;} <span class="comment">// namespace test</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_TEST_TEST_CASE_FACTORY */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a15cffdfdea029e4617b983044f27f25e"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a15cffdfdea029e4617b983044f27f25e">arm_compute::test::framework::TestCaseFactory::make</a></div><div class="ttdeci">virtual std::unique_ptr&lt; TestCase &gt; make() const =0</div><div class="ttdoc">Factory function to create the test case. </div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70b"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70b">arm_compute::test::framework::TestCaseFactory::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">Test case status. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00049">TestCaseFactory.h:49</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a7a45c67d3c31de477d1a54c8dea7caa4"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a7a45c67d3c31de477d1a54c8dea7caa4">arm_compute::test::framework::TestCaseFactory::mode</a></div><div class="ttdeci">DatasetMode mode() const</div><div class="ttdoc">Get the mode for which test case will be enabled. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00152">TestCaseFactory.h:152</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml">arm_compute::test::framework::DataTestCaseFactory</a></div><div class="ttdoc">Implementation of a test case factory to create data test cases. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00114">TestCaseFactory.h:114</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a2d128e015a7913a30691094670608cfd"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a2d128e015a7913a30691094670608cfd">arm_compute::test::framework::TestCaseFactory::TestCaseFactory</a></div><div class="ttdeci">TestCaseFactory(std::string suite_name, std::string name, DatasetMode mode, Status status, std::string description=&quot;&quot;)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00134">TestCaseFactory.h:134</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70babdb2c34681be3432a08e0450b707a014">arm_compute::test::framework::TestCaseFactory::Status::EXPECTED_FAILURE</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba055c1a591abb0e8cd86dc969727bcc0b">arm_compute::test::framework::TestCaseFactory::Status::DISABLED</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a67a0db04d321a74b7e7fcfd3f1a3f70ba18ff74f43da410c5529f7d6fca84f115">arm_compute::test::framework::TestCaseFactory::Status::ACTIVE</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml">arm_compute::test::framework::TestCaseFactory</a></div><div class="ttdoc">Abstract factory class to create test cases. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00040">TestCaseFactory.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a1d89c28bd42ba9a52da008bb69367171"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a1d89c28bd42ba9a52da008bb69367171">arm_compute::test::framework::TestCaseFactory::name</a></div><div class="ttdeci">std::string name() const</div><div class="ttdoc">Name of the test case. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00140">TestCaseFactory.h:140</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7edf31944a6144ffd493d2f9a7bfb5cf"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cf">arm_compute::test::framework::DatasetMode</a></div><div class="ttdeci">DatasetMode</div><div class="ttdoc">Possible dataset modes. </div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00040">DatasetModes.h:40</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory_xhtml"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.xhtml">arm_compute::test::framework::SimpleTestCaseFactory</a></div><div class="ttdoc">Implementation of a test case factory to create non-data test cases. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00103">TestCaseFactory.h:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory_xhtml_a48d02d3cc8555c4439748dfa76e5c8ea"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_simple_test_case_factory.xhtml#a48d02d3cc8555c4439748dfa76e5c8ea">arm_compute::test::framework::SimpleTestCaseFactory::make</a></div><div class="ttdeci">std::unique_ptr&lt; TestCase &gt; make() const override</div><div class="ttdoc">Factory function to create the test case. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00183">TestCaseFactory.h:183</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_a12bb27a4d1aa5d1e69b44b06b515be74"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#a12bb27a4d1aa5d1e69b44b06b515be74">arm_compute::test::framework::TestCaseFactory::status</a></div><div class="ttdeci">Status status() const</div><div class="ttdoc">Get the status of the test case. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00157">TestCaseFactory.h:157</a></div></div>
<div class="ttc" id="_test_case_8h_xhtml"><div class="ttname"><a href="_test_case_8h.xhtml">TestCase.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory_xhtml_a48d02d3cc8555c4439748dfa76e5c8ea"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml#a48d02d3cc8555c4439748dfa76e5c8ea">arm_compute::test::framework::DataTestCaseFactory::make</a></div><div class="ttdeci">std::unique_ptr&lt; TestCase &gt; make() const override</div><div class="ttdoc">Factory function to create the test case. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00195">TestCaseFactory.h:195</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a7edf31944a6144ffd493d2f9a7bfb5cfa5fb1f955b45e38e31789286a1790398d">arm_compute::test::framework::DatasetMode::ALL</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory_xhtml_aacdf355fbfb7579c36e50c757809c148"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_data_test_case_factory.xhtml#aacdf355fbfb7579c36e50c757809c148">arm_compute::test::framework::DataTestCaseFactory::DataTestCaseFactory</a></div><div class="ttdeci">DataTestCaseFactory(std::string suite_name, std::string test_name, DatasetMode mode, Status status, std::string description, const D &amp;data)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_test_case_factory_8h_source.xhtml#l00189">TestCaseFactory.h:189</a></div></div>
<div class="ttc" id="classarm__compute_1_1test_1_1framework_1_1_test_case_factory_xhtml_aca5077964dc68ade0c366fb10a09fce8"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_test_case_factory.xhtml#aca5077964dc68ade0c366fb10a09fce8">arm_compute::test::framework::TestCaseFactory::~TestCaseFactory</a></div><div class="ttdeci">virtual ~TestCaseFactory()=default</div><div class="ttdoc">Default destructor. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1framework_xhtml_a9a57b6c1d3a82001ad4f83676fbb9302"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a9a57b6c1d3a82001ad4f83676fbb9302">arm_compute::test::framework::operator&lt;&lt;</a></div><div class="ttdeci">inline ::std::ostream &amp; operator&lt;&lt;(::std::ostream &amp;stream, DatasetMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="_dataset_modes_8h_source.xhtml#l00077">DatasetModes.h:77</a></div></div>
<div class="ttc" id="_dataset_modes_8h_xhtml"><div class="ttname"><a href="_dataset_modes_8h.xhtml">DatasetModes.h</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_59425e443f801f1f2fd8bbe4959a3ccf.xhtml">tests</a></li><li class="navelem"><a class="el" href="dir_9e71e2da941d3cafc4d98a9f6ae3de4f.xhtml">framework</a></li><li class="navelem"><a class="el" href="_test_case_factory_8h.xhtml">TestCaseFactory.h</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:31 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
