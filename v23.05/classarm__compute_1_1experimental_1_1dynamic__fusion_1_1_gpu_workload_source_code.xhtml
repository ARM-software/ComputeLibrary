<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GpuWorkloadSourceCode Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GpuWorkloadSourceCode Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Hold the generated kernel source code and other information required to compile and run the workload.  
 <a href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7035dfe409c65a9488bde2354dfd5ce7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a7035dfe409c65a9488bde2354dfd5ce7">GpuWorkloadSourceCode</a> ()=default</td></tr>
<tr class="memdesc:a7035dfe409c65a9488bde2354dfd5ce7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a7035dfe409c65a9488bde2354dfd5ce7">More...</a><br /></td></tr>
<tr class="separator:a7035dfe409c65a9488bde2354dfd5ce7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27af264f70b8aa87ceba002fd8091129"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a27af264f70b8aa87ceba002fd8091129">add_unit_workload</a> (const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a> &amp;kernel_code, const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;stage, const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> &amp;mem_map)</td></tr>
<tr class="memdesc:a27af264f70b8aa87ceba002fd8091129"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a unit workload to the workload code.  <a href="#a27af264f70b8aa87ceba002fd8091129">More...</a><br /></td></tr>
<tr class="separator:a27af264f70b8aa87ceba002fd8091129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed8dfe12532ef59b7227fd4d98de0f5d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#aed8dfe12532ef59b7227fd4d98de0f5d">query_unit_workload</a> (<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> id) const</td></tr>
<tr class="memdesc:aed8dfe12532ef59b7227fd4d98de0f5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a unit workload from its id.  <a href="#aed8dfe12532ef59b7227fd4d98de0f5d">More...</a><br /></td></tr>
<tr class="separator:aed8dfe12532ef59b7227fd4d98de0f5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92bdead48551a0dd9f3130be51f232a4"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a92bdead48551a0dd9f3130be51f232a4">unit_workloads</a> () const</td></tr>
<tr class="memdesc:a92bdead48551a0dd9f3130be51f232a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all unit workloads sorted in topological order.  <a href="#a92bdead48551a0dd9f3130be51f232a4">More...</a><br /></td></tr>
<tr class="separator:a92bdead48551a0dd9f3130be51f232a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a436e490ebc74a1c95654c97ee8a7084e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a436e490ebc74a1c95654c97ee8a7084e">query_tensor</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> t_id) const</td></tr>
<tr class="memdesc:a436e490ebc74a1c95654c97ee8a7084e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a> from its associated tensor id.  <a href="#a436e490ebc74a1c95654c97ee8a7084e">More...</a><br /></td></tr>
<tr class="separator:a436e490ebc74a1c95654c97ee8a7084e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c98886be19b8a3140f462f67a123652"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#a1c98886be19b8a3140f462f67a123652">tensors</a> () const</td></tr>
<tr class="memdesc:a1c98886be19b8a3140f462f67a123652"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all tensors in the entire workload.  <a href="#a1c98886be19b8a3140f462f67a123652">More...</a><br /></td></tr>
<tr class="separator:a1c98886be19b8a3140f462f67a123652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1f6a79485c6bf44b9969e372bd96edd"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml#af1f6a79485c6bf44b9969e372bd96edd">get_unit_workloads_from_tensor</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a> t_id) const</td></tr>
<tr class="memdesc:af1f6a79485c6bf44b9969e372bd96edd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get all unit workloads connected to the tensor with <code>t_id</code>.  <a href="#af1f6a79485c6bf44b9969e372bd96edd">More...</a><br /></td></tr>
<tr class="separator:af1f6a79485c6bf44b9969e372bd96edd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Hold the generated kernel source code and other information required to compile and run the workload. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00172">172</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a7035dfe409c65a9488bde2354dfd5ce7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7035dfe409c65a9488bde2354dfd5ce7">&#9670;&nbsp;</a></span>GpuWorkloadSourceCode()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a27af264f70b8aa87ceba002fd8091129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27af264f70b8aa87ceba002fd8091129">&#9670;&nbsp;</a></span>add_unit_workload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a> add_unit_workload </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a> &amp;&#160;</td>
          <td class="paramname"><em>kernel_code</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_unit_workload_stage.xhtml">UnitWorkloadStage</a> &amp;&#160;</td>
          <td class="paramname"><em>stage</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#abe5718c3616edd5134e3058a1bb50b76">MemoryDescriptorMap</a> &amp;&#160;</td>
          <td class="paramname"><em>mem_map</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a unit workload to the workload code. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_code</td><td><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_kernel_source_code.xhtml">GpuKernelSourceCode</a> to be contained within the unit workload </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stage</td><td>Stage of the unit workload </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mem_map</td><td><a class="el" href="structarm__compute_1_1experimental_1_1dynamic__fusion_1_1_memory_descriptor.xhtml">MemoryDescriptor</a> map for all tensors within the unit workload</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>UnitWorkloadId Allocated unit workload id </dd></dl>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00185">185</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>

<p class="reference">References <a class="el" href="_gpu_kernel_source_code_8h_source.xhtml#l00079">GpuKernelSourceCode::arguments()</a>, and <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00069">GpuWorkloadArgument::tensor_info()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_gpu_kernel_component_stream_8cpp_source.xhtml#l00041">GpuKernelComponentStream::write_workload_code()</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">// Use the size of the kernel codes as Id</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> uwk_id    = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a><span class="keyword">&gt;</span>(_unit_workloads.size());</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> unit_work = GpuUnitWorkload(uwk_id, kernel_code, stage);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        _unit_workloads.push_back(unit_work);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="comment">// Assemble kernel argument with memory descriptor to form workload argument</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;id_arg : kernel_code.arguments())</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg_id           = id_arg.first;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> arg              = id_arg.second;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            _workload_arguments[arg_id] = GpuWorkloadArgument{ *arg.tensor_info(), mem_map.at(arg_id), *arg.kernel_argument_info() };</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">if</span>(_tensor_uwork_map.find(arg_id) == _tensor_uwork_map.end())</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                _tensor_uwork_map[arg_id] = std::set&lt;UnitWorkloadId&gt;();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            _tensor_uwork_map[arg_id].insert(uwk_id);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">return</span> uwk_id;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_1_1experimental_1_1dynamic__fusion_xhtml_a4d71b29724606979807dcfc1ad80ef6c"><div class="ttname"><a href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">arm_compute::experimental::dynamic_fusion::UnitWorkloadId</a></div><div class="ttdeci">int32_t UnitWorkloadId</div><div class="ttdoc">Uniquely identifies a GpuUnitWorkload within a GpuWorkloadSourceCode. </div><div class="ttdef"><b>Definition:</b> <a href="_gpu_workload_source_code_8h_source.xhtml#l00038">GpuWorkloadSourceCode.h:38</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af1f6a79485c6bf44b9969e372bd96edd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1f6a79485c6bf44b9969e372bd96edd">&#9670;&nbsp;</a></span>get_unit_workloads_from_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a>&gt; get_unit_workloads_from_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>&#160;</td>
          <td class="paramname"><em>t_id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get all unit workloads connected to the tensor with <code>t_id</code>. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00238">238</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> unit_work_set = _tensor_uwork_map.at(t_id);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;UnitWorkloadId&gt;(unit_work_set.begin(), unit_work_set.end());</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a436e490ebc74a1c95654c97ee8a7084e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a436e490ebc74a1c95654c97ee8a7084e">&#9670;&nbsp;</a></span>query_tensor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a>* query_tensor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>&#160;</td>
          <td class="paramname"><em>t_id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_argument.xhtml">GpuWorkloadArgument</a> from its associated tensor id. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00223">223</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">return</span> &amp;_workload_arguments.at(t_id);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="aed8dfe12532ef59b7227fd4d98de0f5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed8dfe12532ef59b7227fd4d98de0f5d">&#9670;&nbsp;</a></span>query_unit_workload()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_unit_workload.xhtml">GpuUnitWorkload</a>&amp; query_unit_workload </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a>&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a unit workload from its id. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00206">206</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>.</p>
<div class="fragment"><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<span class="keywordtype">id</span> &lt; 0);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">return</span> _unit_workloads.at(<span class="keywordtype">id</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c98886be19b8a3140f462f67a123652"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c98886be19b8a3140f462f67a123652">&#9670;&nbsp;</a></span>tensors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a1fafaeb6e3ab8c0bc772532cc3fcff1a">ITensorInfo::Id</a>&gt; tensors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get all tensors in the entire workload. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00228">228</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        std::vector&lt;ITensorInfo::Id&gt; ids{};</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;id_tensor : _workload_arguments)</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            ids.push_back(id_tensor.first);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">return</span> ids;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a92bdead48551a0dd9f3130be51f232a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92bdead48551a0dd9f3130be51f232a4">&#9670;&nbsp;</a></span>unit_workloads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml#a4d71b29724606979807dcfc1ad80ef6c">UnitWorkloadId</a>&gt; unit_workloads </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get all unit workloads sorted in topological order. </p>

<p class="definition">Definition at line <a class="el" href="_gpu_workload_source_code_8h_source.xhtml#l00212">212</a> of file <a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        std::vector&lt;UnitWorkloadId&gt; ids{};</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;uwk : _unit_workloads)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            ids.push_back(uwk.id());</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> ids;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>src/dynamic_fusion/sketch/gpu/<a class="el" href="_gpu_workload_source_code_8h_source.xhtml">GpuWorkloadSourceCode.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental.xhtml">experimental</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1experimental_1_1dynamic__fusion.xhtml">dynamic_fusion</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1experimental_1_1dynamic__fusion_1_1_gpu_workload_source_code.xhtml">GpuWorkloadSourceCode</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:41 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
