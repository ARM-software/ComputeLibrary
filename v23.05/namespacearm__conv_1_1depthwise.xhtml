<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_conv::depthwise Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__conv_1_1depthwise.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_conv::depthwise Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__conv_1_1depthwise_1_1depthfirst__multiplier"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1depthfirst__multiplier.xhtml">depthfirst_multiplier</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__conv_1_1depthwise_1_1depthwise__depthfirst"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1depthwise__depthfirst.xhtml">depthwise_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespacearm__conv_1_1depthwise_1_1interleaves"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml">interleaves</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_default_output_stage.xhtml">DefaultOutputStage</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_default_output_stage_3_01int8__t_01_4.xhtml">DefaultOutputStage&lt; int8_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_default_output_stage_3_01uint8__t_01_4.xhtml">DefaultOutputStage&lt; uint8_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_default_t_accum.xhtml">DefaultTAccum</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_default_t_accum_3_01int8__t_01_4.xhtml">DefaultTAccum&lt; int8_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_default_t_accum_3_01uint8__t_01_4.xhtml">DefaultTAccum&lt; uint8_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthfirst_driver.xhtml">DepthfirstDriver</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthfirst_multiplier_strategy.xhtml">DepthfirstMultiplierStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthfirst_multiplier_strategy_3_01_t_input_00_01_t_weight_00_01_t_output_00_01int32__t_01_4.xhtml">DepthfirstMultiplierStrategy&lt; TInput, TWeight, TOutput, int32_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthfirst_strategy.xhtml">DepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthfirst_strategy_untyped.xhtml">DepthfirstStrategyUntyped</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst.xhtml">DepthwiseDepthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_common.xhtml">DepthwiseDepthfirstCommon</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic.xhtml">DepthwiseDepthfirstGeneric</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_kernel_call.xhtml">DepthwiseDepthfirstGenericKernelCall</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_kernel_call_3_01arm__gemm_1_1_requantize32_01_4.xhtml">DepthwiseDepthfirstGenericKernelCall&lt; arm_gemm::Requantize32 &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_depthfirst_generic_kernel_call_3_01_nothing_01_4.xhtml">DepthwiseDepthfirstGenericKernelCall&lt; Nothing &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_multiplier.xhtml">DepthwiseDepthfirstMultiplier</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_strategy.xhtml">DepthwiseDepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_strategy_3_01_t_input_00_01_t_weight_00_01_t_output_00_01int32__t_01_4.xhtml">DepthwiseDepthfirstStrategy&lt; TInput, TWeight, TOutput, int32_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_depthfirst_strategy_common.xhtml">DepthwiseDepthfirstStrategyCommon</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_depthwise_planar.xhtml">DepthwisePlanar</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_generic_depthfirst_kernel_strategy.xhtml">GenericDepthfirstKernelStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_generic_depthfirst_kernel_strategy_function_type.xhtml">GenericDepthfirstKernelStrategyFunctionType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_generic_depthfirst_kernel_strategy_function_type_3_01_t_input_078319fdd1a8adfae8613a2c0dcd548f2.xhtml">GenericDepthfirstKernelStrategyFunctionType&lt; TInput, TOutput, int32_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_generic_depthfirst_multiplier_kernel_strategy.xhtml">GenericDepthfirstMultiplierKernelStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_generic_depthfirst_multiplier_kernel_strategy_3_01_t_input_00_01b88b0a2261e05b5aca67d48bf37d5ac6.xhtml">GenericDepthfirstMultiplierKernelStrategy&lt; TInput, TWeight, TOutput, int32_t &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_generic_depthfirst_multiplier_strategy.xhtml">GenericDepthfirstMultiplierStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_generic_depthfirst_strategy.xhtml">GenericDepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_generic_input_array_element.xhtml">GenericInputArrayElement</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_i_depthfirst_strategy.xhtml">IDepthfirstStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1interleave__a64__s8q__3x3__dot.xhtml">interleave_a64_s8q_3x3_dot</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1interleave__a64__u8q__3x3__dot.xhtml">interleave_a64_u8q_3x3_dot</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_i_planar_strategy.xhtml">IPlanarStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type.xhtml">PlanarKernelType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_074bba6d85fd01387143cc0ca9a1d92fe.xhtml">PlanarKernelType&lt; TInput, TWeight, TOutput, int32_t, arm_gemm::Requantize32 &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_planar_kernel_type_3_01_t_input_00_01_t_weight_00_01_t_output_00_01_t_accum_00_01_nothing_01_4.xhtml">PlanarKernelType&lt; TInput, TWeight, TOutput, TAccum, Nothing &gt;</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1_planar_strategy.xhtml">PlanarStrategy</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp16__nhwc__3x3__s1__output2x2__mla__depthfirst.xhtml">sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp16__nhwc__3x3__s1__output3x3__mla__depthfirst.xhtml">sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp16__nhwc__3x3__s1__output4x4__mla__depthfirst.xhtml">sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp16__nhwc__3x3__s2__output2x2__mla__depthfirst.xhtml">sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp16__nhwc__5x5__s1__output2x2__mla__depthfirst.xhtml">sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32__planar__3x3__s1__4rows__mla__za.xhtml">sme2_fp32_planar_3x3_s1_4rows_mla_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32__planar__3x3__s2__4rows__mla__za.xhtml">sme2_fp32_planar_3x3_s2_4rows_mla_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32__planar__5x5__s1__4rows__mla__za.xhtml">sme2_fp32_planar_5x5_s1_4rows_mla_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32__planar__5x5__s2__4rows__mla__za.xhtml">sme2_fp32_planar_5x5_s2_4rows_mla_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32bf16fp32__planar__3x3__s1__4rows__dot__za.xhtml">sme2_fp32bf16fp32_planar_3x3_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32bf16fp32__planar__3x3__s2__4rows__dot__za.xhtml">sme2_fp32bf16fp32_planar_3x3_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32bf16fp32__planar__5x5__s1__4rows__dot__za.xhtml">sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__fp32bf16fp32__planar__5x5__s2__4rows__dot__za.xhtml">sme2_fp32bf16fp32_planar_5x5_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__s8q__planar__3x3__s1__4rows__dot__za.xhtml">sme2_s8q_planar_3x3_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__s8q__planar__3x3__s2__4rows__dot__za.xhtml">sme2_s8q_planar_3x3_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__s8q__planar__5x5__s1__4rows__dot__za.xhtml">sme2_s8q_planar_5x5_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__s8q__planar__5x5__s2__4rows__dot__za.xhtml">sme2_s8q_planar_5x5_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8q__planar__3x3__s1__4rows__dot__za.xhtml">sme2_u8q_planar_3x3_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8q__planar__3x3__s2__4rows__dot__za.xhtml">sme2_u8q_planar_3x3_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8q__planar__5x5__s1__4rows__dot__za.xhtml">sme2_u8q_planar_5x5_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8q__planar__5x5__s2__4rows__dot__za.xhtml">sme2_u8q_planar_5x5_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8s8u8q__planar__3x3__s1__4rows__dot__za.xhtml">sme2_u8s8u8q_planar_3x3_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8s8u8q__planar__3x3__s2__4rows__dot__za.xhtml">sme2_u8s8u8q_planar_3x3_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8s8u8q__planar__5x5__s1__4rows__dot__za.xhtml">sme2_u8s8u8q_planar_5x5_s1_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__conv_1_1depthwise_1_1sme2__u8s8u8q__planar__5x5__s2__4rows__dot__za.xhtml">sme2_u8s8u8q_planar_5x5_s2_4rows_dot_za</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1_tensor_spec.xhtml">TensorSpec</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a85539ffa48f285abdd337a1d808c5019"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; size_t, size_t, size_t, size_t, size_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a85539ffa48f285abdd337a1d808c5019">get_reduced_view_for_dilation</a> (size_t out_size, size_t in_size, const size_t d, const size_t dilation_factor, const size_t kernel_size, const size_t stride, const size_t orig_pad_before)</td></tr>
<tr class="separator:a85539ffa48f285abdd337a1d808c5019"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afec3710e76721e485a73a6d577870a71"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:afec3710e76721e485a73a6d577870a71"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; float &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#afec3710e76721e485a73a6d577870a71">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:afec3710e76721e485a73a6d577870a71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a301c401a1e9a5ac74367c4719a185aa4"><td class="memItemLeft" align="right" valign="top">template UniqueDepthwiseCommon&lt; float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;)</td></tr>
<tr class="separator:a301c401a1e9a5ac74367c4719a185aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbbd27745fbd8941455920821ffebf38"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#acbbd27745fbd8941455920821ffebf38">get_compatible_kernels&lt; float &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;)</td></tr>
<tr class="separator:acbbd27745fbd8941455920821ffebf38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2ad9593e306c173eafbeccaf46a7cfb"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight  = TInput, typename TOutput  = TInput, class OutputStage  = Nothing&gt; </td></tr>
<tr class="memitem:ac2ad9593e306c173eafbeccaf46a7cfb"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; TInput, TWeight, TOutput, OutputStage &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ac2ad9593e306c173eafbeccaf46a7cfb">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:ac2ad9593e306c173eafbeccaf46a7cfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8efd8fe9a35ba4c82dac4a82cbbf66eb"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight  = TInput, typename TOutput  = TInput, class OutputStage  = Nothing&gt; </td></tr>
<tr class="memitem:a8efd8fe9a35ba4c82dac4a82cbbf66eb"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a8efd8fe9a35ba4c82dac4a82cbbf66eb">find_implementation</a> (const DepthwiseArgs &amp;args, const OutputStage &amp;os, const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; TInput, TWeight, TOutput, OutputStage &gt; *&amp;selected)</td></tr>
<tr class="separator:a8efd8fe9a35ba4c82dac4a82cbbf66eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab415473e09fe28fe1e02a97ead491ad1"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight , typename TOutput , class OutputStage &gt; </td></tr>
<tr class="memitem:ab415473e09fe28fe1e02a97ead491ad1"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; KernelDescription &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">get_compatible_kernels</a> (const DepthwiseArgs &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:ab415473e09fe28fe1e02a97ead491ad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a607746df44efd86b8559fe1b542968c6"><td class="memTemplParams" colspan="2">template&lt;typename TInput , typename TWeight , typename TOutput , class OutputStage &gt; </td></tr>
<tr class="memitem:a607746df44efd86b8559fe1b542968c6"><td class="memTemplItemLeft" align="right" valign="top">UniqueDepthwiseCommon&lt; TInput, TWeight, TOutput &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a607746df44efd86b8559fe1b542968c6">depthwise</a> (const DepthwiseArgs &amp;args, const OutputStage &amp;os)</td></tr>
<tr class="separator:a607746df44efd86b8559fe1b542968c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaca65b5325f10a6477f59f0c807487b4"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:aaca65b5325f10a6477f59f0c807487b4"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; int8_t, int8_t, int8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#aaca65b5325f10a6477f59f0c807487b4">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:aaca65b5325f10a6477f59f0c807487b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28eddf4c346bba772ef39d719a8e48b2"><td class="memItemLeft" align="right" valign="top">template UniqueDepthwiseCommon&lt; int8_t, int8_t, int8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a28eddf4c346bba772ef39d719a8e48b2">depthwise</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a28eddf4c346bba772ef39d719a8e48b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ef99a485751667e10e4f3e828b0f5a2"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a2ef99a485751667e10e4f3e828b0f5a2">get_compatible_kernels&lt; int8_t, int8_t, int8_t, Requantize32 &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a2ef99a485751667e10e4f3e828b0f5a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86061c4991854ca34cb28b4cd0f145a"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:ae86061c4991854ca34cb28b4cd0f145a"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; uint8_t, uint8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ae86061c4991854ca34cb28b4cd0f145a">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:ae86061c4991854ca34cb28b4cd0f145a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a851041be157f2916b873db6d7e1d0b8f"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a851041be157f2916b873db6d7e1d0b8f">get_compatible_kernels&lt; uint8_t, uint8_t, uint8_t, Requantize32 &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a851041be157f2916b873db6d7e1d0b8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd29428afa98755e71b9bc7f2f57799"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:a4bd29428afa98755e71b9bc7f2f57799"><td class="memTemplItemLeft" align="right" valign="top">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; uint8_t, int8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a4bd29428afa98755e71b9bc7f2f57799">depthwise_implementation_list</a> ()</td></tr>
<tr class="separator:a4bd29428afa98755e71b9bc7f2f57799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bc560cf8fec3596ac8d796a60ebf15b"><td class="memItemLeft" align="right" valign="top">template std::vector&lt; KernelDescription &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0bc560cf8fec3596ac8d796a60ebf15b">get_compatible_kernels&lt; uint8_t, int8_t, uint8_t, Requantize32 &gt;</a> (const DepthwiseArgs &amp;, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;)</td></tr>
<tr class="separator:a0bc560cf8fec3596ac8d796a60ebf15b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2a66b073475f729bde55a9dcc960a4c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ad2a66b073475f729bde55a9dcc960a4c">sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst_indirect_impl</a> (const __fp16 *const *const input_ptrs, __fp16 *const *const outptrs, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:ad2a66b073475f729bde55a9dcc960a4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a4a5881b5777a8fca7fa69e8533a8e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a4a4a5881b5777a8fca7fa69e8533a8e7">sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst_direct_impl</a> (const unsigned int n_tile_rows, const unsigned int n_tile_cols, const __fp16 *inptr, int64_t ld_input_row, int64_t ld_input_col, __fp16 *outptr, int64_t ld_output_row, int64_t ld_output_col, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a4a4a5881b5777a8fca7fa69e8533a8e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a7ff4b3be7e8a1c8f09f6d144c98cb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a8a7ff4b3be7e8a1c8f09f6d144c98cb3">sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst_indirect_impl</a> (const __fp16 *const *const input_ptrs, __fp16 *const *const outptrs, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a8a7ff4b3be7e8a1c8f09f6d144c98cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d15c0e48f99181ad749518e5ed0a297"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a5d15c0e48f99181ad749518e5ed0a297">sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst_direct_impl</a> (const unsigned int n_tile_rows, const unsigned int n_tile_cols, const __fp16 *inptr, int64_t ld_input_row, int64_t ld_input_col, __fp16 *outptr, int64_t ld_output_row, int64_t ld_output_col, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a5d15c0e48f99181ad749518e5ed0a297"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a352c4a33b2516cb27c9d9c0a1a0b9ba4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a352c4a33b2516cb27c9d9c0a1a0b9ba4">sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst_indirect_impl</a> (const __fp16 *const *const input_ptrs, __fp16 *const *const outptrs, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a352c4a33b2516cb27c9d9c0a1a0b9ba4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ab4cb6dab0766ba117846144fce7c2d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a6ab4cb6dab0766ba117846144fce7c2d">sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst_direct_impl</a> (const unsigned int n_tile_rows, const unsigned int n_tile_cols, const __fp16 *inptr, int64_t ld_input_row, int64_t ld_input_col, __fp16 *outptr, int64_t ld_output_row, int64_t ld_output_col, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a6ab4cb6dab0766ba117846144fce7c2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e64fb4d76f6839bbf117cbafd418d05"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a7e64fb4d76f6839bbf117cbafd418d05">sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst_indirect_impl</a> (const __fp16 *const *const input_ptrs, __fp16 *const *const outptrs, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a7e64fb4d76f6839bbf117cbafd418d05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04d2820b09c86af138036e5c19e074c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a04d2820b09c86af138036e5c19e074c8">sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst_direct_impl</a> (const unsigned int n_tile_rows, const unsigned int n_tile_cols, const __fp16 *inptr, int64_t ld_input_row, int64_t ld_input_col, __fp16 *outptr, int64_t ld_output_row, int64_t ld_output_col, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a04d2820b09c86af138036e5c19e074c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030b4456b5a333ad1cf3a737912d3f96"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a030b4456b5a333ad1cf3a737912d3f96">sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst_indirect_impl</a> (const __fp16 *const *const input_ptrs, __fp16 *const *const outptrs, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a030b4456b5a333ad1cf3a737912d3f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a115c0fbad7990fe4b082dc49d4016359"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a115c0fbad7990fe4b082dc49d4016359">sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst_direct_impl</a> (const unsigned int n_tile_rows, const unsigned int n_tile_cols, const __fp16 *inptr, int64_t ld_input_row, int64_t ld_input_col, __fp16 *outptr, int64_t ld_output_row, int64_t ld_output_col, const void *params, unsigned int n_channels, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a08360bdcd98b37c2a036a52f4fd25adf">activation_min</a>, const __fp16 <a class="el" href="working__space_8hpp.xhtml#a1a2a4f08423b36533dee1fd7e8eebdf8">activation_max</a>)</td></tr>
<tr class="separator:a115c0fbad7990fe4b082dc49d4016359"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a553e688396cfead907557c2c257cdcad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a553e688396cfead907557c2c257cdcad">sme2_fp32_planar_3x3_s1_4rows_mla_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:a553e688396cfead907557c2c257cdcad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a95417f9662cda0e442d1a7b7a2a100"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0a95417f9662cda0e442d1a7b7a2a100">sme2_fp32_planar_3x3_s2_4rows_mla_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:a0a95417f9662cda0e442d1a7b7a2a100"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bf91aaa485e0f407830c1a47a4a6916"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a3bf91aaa485e0f407830c1a47a4a6916">sme2_fp32_planar_5x5_s1_4rows_mla_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:a3bf91aaa485e0f407830c1a47a4a6916"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93ca39bd1956f2ee005145aa031f0d7a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a93ca39bd1956f2ee005145aa031f0d7a">sme2_fp32_planar_5x5_s2_4rows_mla_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:a93ca39bd1956f2ee005145aa031f0d7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2b90dbdf9535912d30b8376227d09ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ad2b90dbdf9535912d30b8376227d09ad">sme2_fp32bf16fp32_planar_3x3_s1_4rows_dot_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:ad2b90dbdf9535912d30b8376227d09ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc77b3a64ddbb9237c22ef0e3ef89d42"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#abc77b3a64ddbb9237c22ef0e3ef89d42">sme2_fp32bf16fp32_planar_3x3_s2_4rows_dot_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:abc77b3a64ddbb9237c22ef0e3ef89d42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a070151888b74f50e7a263e681fedca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a5a070151888b74f50e7a263e681fedca">sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:a5a070151888b74f50e7a263e681fedca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9336d709b6fe2ff16b9eb8bf63a7560d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a9336d709b6fe2ff16b9eb8bf63a7560d">sme2_fp32bf16fp32_planar_5x5_s2_4rows_dot_za_impl</a> (const float *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const float *weights, const float *<a class="el" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, float **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, float act_min, float act_max)</td></tr>
<tr class="separator:a9336d709b6fe2ff16b9eb8bf63a7560d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d3c850ff8ae6b1e3e8989840cdad56"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a62d3c850ff8ae6b1e3e8989840cdad56">sme2_s8q_planar_3x3_s1_4rows_dot_za_impl</a> (const int8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, int8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a62d3c850ff8ae6b1e3e8989840cdad56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12772734c42117e9a3d71e203fd9da61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a12772734c42117e9a3d71e203fd9da61">sme2_s8q_planar_3x3_s2_4rows_dot_za_impl</a> (const int8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, int8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a12772734c42117e9a3d71e203fd9da61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a656bbecb6c4189e8de5e3bf1487f6091"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a656bbecb6c4189e8de5e3bf1487f6091">sme2_s8q_planar_5x5_s1_4rows_dot_za_impl</a> (const int8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, int8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a656bbecb6c4189e8de5e3bf1487f6091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31285466ecc6b0f936abeaf2ff52608e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a31285466ecc6b0f936abeaf2ff52608e">sme2_s8q_planar_5x5_s2_4rows_dot_za_impl</a> (const int8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, int8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a31285466ecc6b0f936abeaf2ff52608e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a6a7200b03ab03ff8ba18e94ed5d439"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a4a6a7200b03ab03ff8ba18e94ed5d439">sme2_u8q_planar_3x3_s1_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const uint8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a4a6a7200b03ab03ff8ba18e94ed5d439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af17de36f27f9f801dd5ba63463f0e82f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#af17de36f27f9f801dd5ba63463f0e82f">sme2_u8q_planar_3x3_s2_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const uint8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:af17de36f27f9f801dd5ba63463f0e82f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9571e8cb67da28440ff3781dc2bda0e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a9571e8cb67da28440ff3781dc2bda0e9">sme2_u8q_planar_5x5_s1_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const uint8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a9571e8cb67da28440ff3781dc2bda0e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d05920da2f496a8810bffb81a32f157"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a3d05920da2f496a8810bffb81a32f157">sme2_u8q_planar_5x5_s2_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const uint8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a3d05920da2f496a8810bffb81a32f157"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4284195cfcd3d4ec18947212a763e4b4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a4284195cfcd3d4ec18947212a763e4b4">sme2_u8s8u8q_planar_3x3_s1_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a4284195cfcd3d4ec18947212a763e4b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0c09b7f2e1355c37610d7369d5c08b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab0c09b7f2e1355c37610d7369d5c08b6">sme2_u8s8u8q_planar_3x3_s2_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:ab0c09b7f2e1355c37610d7369d5c08b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf9a06698b27c97ca66553ad663cb986"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#aaf9a06698b27c97ca66553ad663cb986">sme2_u8s8u8q_planar_5x5_s1_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:aaf9a06698b27c97ca66553ad663cb986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13bad0422467a88b92abcaaabe16389d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a13bad0422467a88b92abcaaabe16389d">sme2_u8s8u8q_planar_5x5_s2_4rows_dot_za_impl</a> (const uint8_t *inptr, size_t ld_in_row, size_t ld_in_col, size_t ld_in_vl, unsigned int pad_top, unsigned int valid_input_rows, unsigned int pad_left, unsigned int valid_input_cols, const int8_t *weights, uint8_t **outptrs, const size_t *outlds, const size_t *outvllds, unsigned int output_cols, unsigned int start_channel, unsigned int valid_channels, const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;qp)</td></tr>
<tr class="separator:a13bad0422467a88b92abcaaabe16389d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a607746df44efd86b8559fe1b542968c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a607746df44efd86b8559fe1b542968c6">&#9670;&nbsp;</a></span>depthwise() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">UniqueDepthwiseCommon&lt;TInput, TWeight, TOutput&gt; arm_conv::depthwise::depthwise </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00137">137</a> of file <a class="el" href="depthwise__implementation_8hpp_source.xhtml">depthwise_implementation.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00056">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keyword">const</span> DepthwiseImplementation&lt;TInput, TWeight, TOutput, OutputStage&gt; *impl = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">bool</span> success = find_implementation&lt;TInput, TWeight, TOutput, OutputStage&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os, impl);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keywordflow">return</span> UniqueDepthwiseCommon&lt;TInput, TWeight, TOutput&gt;(success ? impl-&gt;get_instance(args, os) : <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a28eddf4c346bba772ef39d719a8e48b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28eddf4c346bba772ef39d719a8e48b2">&#9670;&nbsp;</a></span>depthwise() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template UniqueDepthwiseCommon&lt; uint8_t, int8_t, uint8_t &gt; depthwise </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a301c401a1e9a5ac74367c4719a185aa4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a301c401a1e9a5ac74367c4719a185aa4">&#9670;&nbsp;</a></span>depthwise() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template UniqueDepthwiseCommon&lt;float&gt; arm_conv::depthwise::depthwise </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00491">depthwise_implementation_list()</a>, and <a class="el" href="8b__mla_8cpp_source.xhtml#l00039">generic_pack()</a>.</p>

</div>
</div>
<a id="ac2ad9593e306c173eafbeccaf46a7cfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2ad9593e306c173eafbeccaf46a7cfb">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;TInput, TWeight, TOutput, OutputStage&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00491">491</a> of file <a class="el" href="depthwise__fp32_8cpp_source.xhtml">depthwise_fp32.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#acbbd27745fbd8941455920821ffebf38">get_compatible_kernels&lt; float &gt;()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a2ef99a485751667e10e4f3e828b0f5a2">get_compatible_kernels&lt; int8_t, int8_t, int8_t, Requantize32 &gt;()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0bc560cf8fec3596ac8d796a60ebf15b">get_compatible_kernels&lt; uint8_t, int8_t, uint8_t, Requantize32 &gt;()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a851041be157f2916b873db6d7e1d0b8f">get_compatible_kernels&lt; uint8_t, uint8_t, uint8_t, Requantize32 &gt;()</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00056">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  <span class="keywordflow">return</span> depthwise_fp32_methods;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a4bd29428afa98755e71b9bc7f2f57799"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bd29428afa98755e71b9bc7f2f57799">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;uint8_t, int8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a>&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__u8s8u8q_8cpp_source.xhtml#l00221">221</a> of file <a class="el" href="depthwise__u8s8u8q_8cpp_source.xhtml">depthwise_u8s8u8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#acbbd27745fbd8941455920821ffebf38">get_compatible_kernels&lt; float &gt;()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a0bc560cf8fec3596ac8d796a60ebf15b">get_compatible_kernels&lt; uint8_t, int8_t, uint8_t, Requantize32 &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;{</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordflow">return</span> depthwise_u8q_methods;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aaca65b5325f10a6477f59f0c807487b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaca65b5325f10a6477f59f0c807487b4">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;int8_t, int8_t, int8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a>&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__s8q_8cpp_source.xhtml#l00347">347</a> of file <a class="el" href="depthwise__s8q_8cpp_source.xhtml">depthwise_s8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a2ef99a485751667e10e4f3e828b0f5a2">get_compatible_kernels&lt; int8_t, int8_t, int8_t, Requantize32 &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;{</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <span class="keywordflow">return</span> depthwise_s8q_methods;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae86061c4991854ca34cb28b4cd0f145a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae86061c4991854ca34cb28b4cd0f145a">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;uint8_t, uint8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a>&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__u8q_8cpp_source.xhtml#l00354">354</a> of file <a class="el" href="depthwise__u8q_8cpp_source.xhtml">depthwise_u8q.cpp</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a301c401a1e9a5ac74367c4719a185aa4">depthwise()</a>, and <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#a851041be157f2916b873db6d7e1d0b8f">get_compatible_kernels&lt; uint8_t, uint8_t, uint8_t, Requantize32 &gt;()</a>.</p>
<div class="fragment"><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <span class="keywordflow">return</span> depthwise_u8q_methods;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afec3710e76721e485a73a6d577870a71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afec3710e76721e485a73a6d577870a71">&#9670;&nbsp;</a></span>depthwise_implementation_list() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt;float&gt;* arm_conv::depthwise::depthwise_implementation_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00491">491</a> of file <a class="el" href="depthwise__fp32_8cpp_source.xhtml">depthwise_fp32.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00056">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_instance()</a>.</p>
<div class="fragment"><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;{</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  <span class="keywordflow">return</span> depthwise_fp32_methods;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a8efd8fe9a35ba4c82dac4a82cbbf66eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8efd8fe9a35ba4c82dac4a82cbbf66eb">&#9670;&nbsp;</a></span>find_implementation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_conv::depthwise::find_implementation </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__conv_1_1depthwise_1_1_depthwise_implementation.xhtml">DepthwiseImplementation</a>&lt; TInput, TWeight, TOutput, OutputStage &gt; *&amp;&#160;</td>
          <td class="paramname"><em>selected</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00068">68</a> of file <a class="el" href="depthwise__implementation_8hpp_source.xhtml">depthwise_implementation.hpp</a>.</p>

<p class="reference">References <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00043">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::cycle_estimate</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  selected = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  uint64_t best_cycle_estimate = UINT64_MAX;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> *impl = depthwise_implementation_list&lt;TInput, TWeight, TOutput, OutputStage&gt;();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keywordflow">for</span> (; impl-&gt;method != DepthwiseMethod::DEFAULT; impl++)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> has_cfg = (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.config != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> &amp;cfg = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.config;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span> (</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      !impl-&gt;get_is_supported(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os) ||  <span class="comment">// Problem is unsupported</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      (has_cfg &amp;&amp; cfg-&gt;method != DepthwiseMethod::DEFAULT &amp;&amp; cfg-&gt;method != impl-&gt;method) ||</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      (has_cfg &amp;&amp; cfg-&gt;filter != <span class="stringliteral">&quot;&quot;</span> &amp;&amp; !std::strstr(impl-&gt;name, cfg-&gt;filter.c_str()))</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    )</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> cycle_estimate = impl-&gt;get_cycle_estimate(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (cycle_estimate == 0)</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      selected = impl;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      <span class="keywordflow">break</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">if</span> (selected == <span class="keyword">nullptr</span> || cycle_estimate &lt; best_cycle_estimate)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      selected = impl;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      best_cycle_estimate = cycle_estimate;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> (selected != <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab415473e09fe28fe1e02a97ead491ad1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab415473e09fe28fe1e02a97ead491ad1">&#9670;&nbsp;</a></span>get_compatible_kernels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;KernelDescription&gt; arm_conv::depthwise::get_compatible_kernels </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OutputStage &amp;&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00111">111</a> of file <a class="el" href="depthwise__implementation_8hpp_source.xhtml">depthwise_implementation.hpp</a>.</p>

<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, and <a class="el" href="depthwise__implementation_8hpp_source.xhtml#l00051">DepthwiseImplementation&lt; TInput, TWeight, TOutput, OutputStage &gt;::get_cycle_estimate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;{</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  std::vector&lt;KernelDescription&gt; kerns;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="comment">// Find the default implementation so we can flag it accordingly</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keyword">const</span> DepthwiseImplementation&lt;TInput, TWeight, TOutput, OutputStage&gt; *default_impl;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  find_implementation&lt;TInput, TWeight, TOutput, OutputStage&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os, default_impl);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> impl = depthwise_implementation_list&lt;TInput, TWeight, TOutput, OutputStage&gt;();</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;       impl-&gt;method != DepthwiseMethod::DEFAULT; impl++)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordflow">if</span> (!impl-&gt;get_is_supported(args, os))</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    kerns.emplace_back(</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      impl-&gt;method, impl-&gt;name, impl == default_impl,</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      impl-&gt;get_cycle_estimate(args, os)</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    );</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordflow">return</span> kerns;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acbbd27745fbd8941455920821ffebf38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbbd27745fbd8941455920821ffebf38">&#9670;&nbsp;</a></span>get_compatible_kernels< float >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; float &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_nothing.xhtml">Nothing</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__fp32_8cpp_source.xhtml#l00491">depthwise_implementation_list()</a>.</p>

</div>
</div>
<a id="a2ef99a485751667e10e4f3e828b0f5a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ef99a485751667e10e4f3e828b0f5a2">&#9670;&nbsp;</a></span>get_compatible_kernels< int8_t, int8_t, int8_t, Requantize32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; int8_t, int8_t, int8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__s8q_8cpp_source.xhtml#l00347">depthwise_implementation_list()</a>.</p>

</div>
</div>
<a id="a0bc560cf8fec3596ac8d796a60ebf15b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bc560cf8fec3596ac8d796a60ebf15b">&#9670;&nbsp;</a></span>get_compatible_kernels< uint8_t, int8_t, uint8_t, Requantize32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; uint8_t, int8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__u8s8u8q_8cpp_source.xhtml#l00221">depthwise_implementation_list()</a>.</p>

</div>
</div>
<a id="a851041be157f2916b873db6d7e1d0b8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a851041be157f2916b873db6d7e1d0b8f">&#9670;&nbsp;</a></span>get_compatible_kernels< uint8_t, uint8_t, uint8_t, Requantize32 >()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">template std::vector&lt;KernelDescription&gt; <a class="el" href="namespacearm__conv_1_1depthwise.xhtml#ab415473e09fe28fe1e02a97ead491ad1">arm_conv::depthwise::get_compatible_kernels</a>&lt; uint8_t, uint8_t, uint8_t, <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="depthwise__u8q_8cpp_source.xhtml#l00354">depthwise_implementation_list()</a>.</p>

</div>
</div>
<a id="a85539ffa48f285abdd337a1d808c5019"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85539ffa48f285abdd337a1d808c5019">&#9670;&nbsp;</a></span>get_reduced_view_for_dilation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt;size_t, size_t, size_t, size_t, size_t&gt; arm_conv::depthwise::get_reduced_view_for_dilation </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>out_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>in_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>dilation_factor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>kernel_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>stride</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>orig_pad_before</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="depthwise__common_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="depthwise__common_8cpp_source.xhtml">depthwise_common.cpp</a>.</p>

<p class="reference">References <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                                            {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="comment">// Get the valid output range</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    out_size = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(out_size - d, dilation_factor);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// Compute the start offset and the amount of padding which applies to this</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// portion of the work.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">size_t</span> start_pos = d * stride, pad_before = 0;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (start_pos &lt; orig_pad_before) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        pad_before = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(orig_pad_before - start_pos, dilation_factor);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    start_pos += pad_before * dilation_factor - orig_pad_before;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Hence compute the valid input range</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    in_size = start_pos &lt; in_size</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                  ? <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(in_size - start_pos, dilation_factor)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                  : 0;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Finally, compute the &quot;after&quot; padding</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> reqd_input = (out_size - 1) * stride + kernel_size;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">size_t</span> pad_after = 0;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> (reqd_input &gt; (pad_before + in_size)) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        pad_after = reqd_input - (pad_before + in_size);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(out_size, in_size, start_pos, pad_before, pad_after);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a4a4a5881b5777a8fca7fa69e8533a8e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a4a5881b5777a8fca7fa69e8533a8e7">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst_direct_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst_direct_impl </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad2a66b073475f729bde55a9dcc960a4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2a66b073475f729bde55a9dcc960a4c">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst_indirect_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s1_output2x2_mla_depthfirst_indirect_impl </td>
          <td>(</td>
          <td class="paramtype">const __fp16 *const *const&#160;</td>
          <td class="paramname"><em>input_ptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *const *const&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5d15c0e48f99181ad749518e5ed0a297"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d15c0e48f99181ad749518e5ed0a297">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst_direct_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst_direct_impl </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8a7ff4b3be7e8a1c8f09f6d144c98cb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a7ff4b3be7e8a1c8f09f6d144c98cb3">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst_indirect_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s1_output3x3_mla_depthfirst_indirect_impl </td>
          <td>(</td>
          <td class="paramtype">const __fp16 *const *const&#160;</td>
          <td class="paramname"><em>input_ptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *const *const&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6ab4cb6dab0766ba117846144fce7c2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ab4cb6dab0766ba117846144fce7c2d">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst_direct_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst_direct_impl </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a352c4a33b2516cb27c9d9c0a1a0b9ba4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a352c4a33b2516cb27c9d9c0a1a0b9ba4">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst_indirect_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s1_output4x4_mla_depthfirst_indirect_impl </td>
          <td>(</td>
          <td class="paramtype">const __fp16 *const *const&#160;</td>
          <td class="paramname"><em>input_ptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *const *const&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a04d2820b09c86af138036e5c19e074c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04d2820b09c86af138036e5c19e074c8">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst_direct_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst_direct_impl </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7e64fb4d76f6839bbf117cbafd418d05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e64fb4d76f6839bbf117cbafd418d05">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst_indirect_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_3x3_s2_output2x2_mla_depthfirst_indirect_impl </td>
          <td>(</td>
          <td class="paramtype">const __fp16 *const *const&#160;</td>
          <td class="paramname"><em>input_ptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *const *const&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a115c0fbad7990fe4b082dc49d4016359"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a115c0fbad7990fe4b082dc49d4016359">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst_direct_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst_direct_impl </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n_tile_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16 *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_input_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *&#160;</td>
          <td class="paramname"><em>outptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>ld_output_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a030b4456b5a333ad1cf3a737912d3f96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a030b4456b5a333ad1cf3a737912d3f96">&#9670;&nbsp;</a></span>sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst_indirect_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp16_nhwc_5x5_s1_output2x2_mla_depthfirst_indirect_impl </td>
          <td>(</td>
          <td class="paramtype">const __fp16 *const *const&#160;</td>
          <td class="paramname"><em>input_ptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">__fp16 *const *const&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>n_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const __fp16&#160;</td>
          <td class="paramname"><em>activation_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a553e688396cfead907557c2c257cdcad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a553e688396cfead907557c2c257cdcad">&#9670;&nbsp;</a></span>sme2_fp32_planar_3x3_s1_4rows_mla_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32_planar_3x3_s1_4rows_mla_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32__planar__3x3__s1__4rows__mla__za_8hpp_source.xhtml#l00065">sme2_fp32_planar_3x3_s1_4rows_mla_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a0a95417f9662cda0e442d1a7b7a2a100"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a95417f9662cda0e442d1a7b7a2a100">&#9670;&nbsp;</a></span>sme2_fp32_planar_3x3_s2_4rows_mla_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32_planar_3x3_s2_4rows_mla_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32__planar__3x3__s2__4rows__mla__za_8hpp_source.xhtml#l00065">sme2_fp32_planar_3x3_s2_4rows_mla_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a3bf91aaa485e0f407830c1a47a4a6916"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bf91aaa485e0f407830c1a47a4a6916">&#9670;&nbsp;</a></span>sme2_fp32_planar_5x5_s1_4rows_mla_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32_planar_5x5_s1_4rows_mla_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32__planar__5x5__s1__4rows__mla__za_8hpp_source.xhtml#l00065">sme2_fp32_planar_5x5_s1_4rows_mla_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a93ca39bd1956f2ee005145aa031f0d7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93ca39bd1956f2ee005145aa031f0d7a">&#9670;&nbsp;</a></span>sme2_fp32_planar_5x5_s2_4rows_mla_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32_planar_5x5_s2_4rows_mla_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32__planar__5x5__s2__4rows__mla__za_8hpp_source.xhtml#l00065">sme2_fp32_planar_5x5_s2_4rows_mla_za::get_kernel()</a>.</p>

</div>
</div>
<a id="ad2b90dbdf9535912d30b8376227d09ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2b90dbdf9535912d30b8376227d09ad">&#9670;&nbsp;</a></span>sme2_fp32bf16fp32_planar_3x3_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32bf16fp32_planar_3x3_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32bf16fp32__planar__3x3__s1__4rows__dot__za_8hpp_source.xhtml#l00065">sme2_fp32bf16fp32_planar_3x3_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="abc77b3a64ddbb9237c22ef0e3ef89d42"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc77b3a64ddbb9237c22ef0e3ef89d42">&#9670;&nbsp;</a></span>sme2_fp32bf16fp32_planar_3x3_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32bf16fp32_planar_3x3_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32bf16fp32__planar__3x3__s2__4rows__dot__za_8hpp_source.xhtml#l00065">sme2_fp32bf16fp32_planar_3x3_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a5a070151888b74f50e7a263e681fedca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a070151888b74f50e7a263e681fedca">&#9670;&nbsp;</a></span>sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32bf16fp32__planar__5x5__s1__4rows__dot__za_8hpp_source.xhtml#l00065">sme2_fp32bf16fp32_planar_5x5_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a9336d709b6fe2ff16b9eb8bf63a7560d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9336d709b6fe2ff16b9eb8bf63a7560d">&#9670;&nbsp;</a></span>sme2_fp32bf16fp32_planar_5x5_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_fp32bf16fp32_planar_5x5_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>bias</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_min</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>act_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__fp32bf16fp32__planar__5x5__s2__4rows__dot__za_8hpp_source.xhtml#l00065">sme2_fp32bf16fp32_planar_5x5_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a62d3c850ff8ae6b1e3e8989840cdad56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62d3c850ff8ae6b1e3e8989840cdad56">&#9670;&nbsp;</a></span>sme2_s8q_planar_3x3_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_s8q_planar_3x3_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__s8q__planar__3x3__s1__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_s8q_planar_3x3_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a12772734c42117e9a3d71e203fd9da61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12772734c42117e9a3d71e203fd9da61">&#9670;&nbsp;</a></span>sme2_s8q_planar_3x3_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_s8q_planar_3x3_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__s8q__planar__3x3__s2__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_s8q_planar_3x3_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a656bbecb6c4189e8de5e3bf1487f6091"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a656bbecb6c4189e8de5e3bf1487f6091">&#9670;&nbsp;</a></span>sme2_s8q_planar_5x5_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_s8q_planar_5x5_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__s8q__planar__5x5__s1__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_s8q_planar_5x5_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a31285466ecc6b0f936abeaf2ff52608e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31285466ecc6b0f936abeaf2ff52608e">&#9670;&nbsp;</a></span>sme2_s8q_planar_5x5_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_s8q_planar_5x5_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__s8q__planar__5x5__s2__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_s8q_planar_5x5_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a4a6a7200b03ab03ff8ba18e94ed5d439"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a6a7200b03ab03ff8ba18e94ed5d439">&#9670;&nbsp;</a></span>sme2_u8q_planar_3x3_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8q_planar_3x3_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8q__planar__3x3__s1__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8q_planar_3x3_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="af17de36f27f9f801dd5ba63463f0e82f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af17de36f27f9f801dd5ba63463f0e82f">&#9670;&nbsp;</a></span>sme2_u8q_planar_3x3_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8q_planar_3x3_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8q__planar__3x3__s2__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8q_planar_3x3_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a9571e8cb67da28440ff3781dc2bda0e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9571e8cb67da28440ff3781dc2bda0e9">&#9670;&nbsp;</a></span>sme2_u8q_planar_5x5_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8q_planar_5x5_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8q__planar__5x5__s1__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8q_planar_5x5_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a3d05920da2f496a8810bffb81a32f157"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d05920da2f496a8810bffb81a32f157">&#9670;&nbsp;</a></span>sme2_u8q_planar_5x5_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8q_planar_5x5_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8q__planar__5x5__s2__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8q_planar_5x5_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a4284195cfcd3d4ec18947212a763e4b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4284195cfcd3d4ec18947212a763e4b4">&#9670;&nbsp;</a></span>sme2_u8s8u8q_planar_3x3_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8s8u8q_planar_3x3_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8s8u8q__planar__3x3__s1__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8s8u8q_planar_3x3_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="ab0c09b7f2e1355c37610d7369d5c08b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0c09b7f2e1355c37610d7369d5c08b6">&#9670;&nbsp;</a></span>sme2_u8s8u8q_planar_3x3_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8s8u8q_planar_3x3_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8s8u8q__planar__3x3__s2__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8s8u8q_planar_3x3_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="aaf9a06698b27c97ca66553ad663cb986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf9a06698b27c97ca66553ad663cb986">&#9670;&nbsp;</a></span>sme2_u8s8u8q_planar_5x5_s1_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8s8u8q_planar_5x5_s1_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8s8u8q__planar__5x5__s1__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8s8u8q_planar_5x5_s1_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
<a id="a13bad0422467a88b92abcaaabe16389d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13bad0422467a88b92abcaaabe16389d">&#9670;&nbsp;</a></span>sme2_u8s8u8q_planar_5x5_s2_4rows_dot_za_impl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void arm_conv::depthwise::sme2_u8s8u8q_planar_5x5_s2_4rows_dot_za_impl </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>inptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_in_vl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_top</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>pad_left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_input_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int8_t *&#160;</td>
          <td class="paramname"><em>weights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t **&#160;</td>
          <td class="paramname"><em>outptrs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outlds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>outvllds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>output_cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start_channel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>valid_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> &amp;&#160;</td>
          <td class="paramname"><em>qp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="sme2__u8s8u8q__planar__5x5__s2__4rows__dot__za_8hpp_source.xhtml#l00063">sme2_u8s8u8q_planar_5x5_s2_4rows_dot_za::get_kernel()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml">depthwise</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:46 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
