<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: Implementation Topics</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('implementation_topic.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Implementation Topics </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h1><a class="anchor" id="implementation_topic_windows"></a>
Windows</h1>
<p>A <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> represents a workload to execute, it can handle up to <a class="el" href="classarm__compute_1_1_dimensions.xhtml#a1b67d5b720119d50faa286c774579ecc">Coordinates::num_max_dimensions</a> dimensions. Each dimension is defined by a start, end and step.</p>
<p>It can split into subwindows as long as <em>all</em> the following rules remain true for all the dimensions:</p>
<ul>
<li>max[n].start() &lt;= sub[n].start() &lt; max[n].<a class="el" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end()</a></li>
<li>sub[n].start() &lt; sub[n].<a class="el" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end()</a> &lt;= max[n].<a class="el" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end()</a></li>
<li>max[n].<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step()</a> == sub[n].<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step()</a></li>
<li>(sub[n].start() - max[n].start()) % max[n].<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step()</a> == 0</li>
<li>(sub[n].<a class="el" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end()</a> - sub[n].start()) % max[n].<a class="el" href="namespacearm__compute_1_1cpu.xhtml#a05c10bc9018179245c50d45b330a1c6a">step()</a> == 0</li>
</ul>
<h1><a class="anchor" id="implementation_topic_kernels"></a>
Kernels</h1>
<p>Each implementation of the <a class="el" href="classarm__compute_1_1_i_kernel.xhtml">IKernel</a> interface (base class of all the kernels in the core library) works in the same way:</p>
<p>OpenCL kernels:</p>
<div class="fragment"><div class="line"><span class="comment">// Initialize the CLScheduler with the default context and default command queue</span></div><div class="line"><span class="comment">// Implicitly initializes the CLKernelLibrary to use ./cl_kernels as location for OpenCL kernels files and sets a default device for which OpenCL programs are built.</span></div><div class="line"><a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a56d8f451f6b30093a49f1b4978681b07">default_init</a>();</div><div class="line"></div><div class="line">cl::CommandQueue q = <a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a9b58d0eb9a2af8e6d7908695e1557d6c">CLScheduler::get</a>().<a class="code" href="classarm__compute_1_1_c_l_scheduler.xhtml#a398a2582c746d28fc125487a44c9ed74">queue</a>();</div><div class="line"><span class="comment">//Create a kernel object:</span></div><div class="line">MyKernel kernel;</div><div class="line"><span class="comment">// Initialize the kernel with the input/output and options you want to use:</span></div><div class="line">kernel.configure( input, output, option0, option1);</div><div class="line"><span class="comment">// Retrieve the execution window of the kernel:</span></div><div class="line"><span class="keyword">const</span> Window&amp; max_window = kernel.window();</div><div class="line"><span class="comment">// Run the whole kernel in the current thread:</span></div><div class="line">kernel.run( q, max_window ); <span class="comment">// Enqueue the kernel to process the full window on the default queue</span></div><div class="line"></div><div class="line"><span class="comment">// Wait for the processing to complete:</span></div><div class="line">q.finish();</div></div><!-- fragment --><p>Neon / CPP kernels:</p>
<div class="fragment"><div class="line"><span class="comment">//Create a kernel object:</span></div><div class="line">MyKernel kernel;</div><div class="line"><span class="comment">// Initialize the kernel with the input/output and options you want to use:</span></div><div class="line">kernel.configure( input, output, option0, option1);</div><div class="line"><span class="comment">// Retrieve the execution window of the kernel:</span></div><div class="line"><span class="keyword">const</span> Window&amp; max_window = kernel.window();</div><div class="line"><span class="comment">// Run the whole kernel in the current thread:</span></div><div class="line">kernel.run( max_window ); <span class="comment">// Run the kernel on the full window</span></div></div><!-- fragment --><h1><a class="anchor" id="implementation_topic_multithreading"></a>
Multi-threading</h1>
<p>The previous section shows how to run a Arm® Neon™ / CPP kernel in the current thread, however if your system has several CPU cores, you will probably want the kernel to use several cores. Here is how this can be done:</p>
<div class="fragment"><div class="line">ThreadInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line">info.cpu_info = &amp;_cpu_info;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Window      &amp;max_window     = kernel-&gt;window();</div><div class="line"><span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_iterations = max_window.num_iterations(split_dimension);</div><div class="line">info.num_threads                  = std::min(num_iterations, _num_threads);</div><div class="line"></div><div class="line"><span class="keywordflow">if</span>(num_iterations == 0)</div><div class="line">{</div><div class="line">    <span class="keywordflow">return</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keywordflow">if</span>(!kernel-&gt;is_parallelisable() || info.num_threads == 1)</div><div class="line">{</div><div class="line">    kernel-&gt;run(max_window, info);</div><div class="line">}</div><div class="line"><span class="keywordflow">else</span></div><div class="line">{</div><div class="line">    <span class="keywordtype">int</span>  <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>         = 0;</div><div class="line">    <span class="keyword">auto</span> thread_it = _threads.begin();</div><div class="line"></div><div class="line">    <span class="keywordflow">for</span>(; t &lt; info.num_threads - 1; ++<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>, ++thread_it)</div><div class="line">    {</div><div class="line">        Window win     = max_window.split_window(split_dimension, t, info.num_threads);</div><div class="line">        info.thread_id = <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>;</div><div class="line">        thread_it-&gt;start(kernel, win, info);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// Run last part on main thread</span></div><div class="line">    Window win     = max_window.split_window(split_dimension, t, info.num_threads);</div><div class="line">    info.thread_id = <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>;</div><div class="line">    kernel-&gt;run(win, info);</div><div class="line"></div><div class="line">    <span class="keywordflow">try</span></div><div class="line">    {</div><div class="line">        <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;thread : _threads)</div><div class="line">        {</div><div class="line">            thread.wait();</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keywordflow">catch</span>(<span class="keyword">const</span> std::system_error &amp;e)</div><div class="line">    {</div><div class="line">        std::cerr &lt;&lt; <span class="stringliteral">&quot;Caught system_error with code &quot;</span> &lt;&lt; e.code() &lt;&lt; <span class="stringliteral">&quot; meaning &quot;</span> &lt;&lt; e.what() &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;</div><div class="line">    }</div><div class="line">}</div></div><!-- fragment --><p>This is a very basic implementation which was originally used in the Arm® Neon™ runtime library by all the Arm® Neon™ functions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml" title="C++11 implementation of a pool of threads to automatically split a kernel&#39;s execution among several t...">CPPScheduler</a></dd></dl>
<dl class="section note"><dt>Note</dt><dd>Some kernels need some local temporary buffer to perform their calculations. In order to avoid memory corruption between threads, the local buffer must be of size: <code>memory_needed_per_thread * num_threads</code> and a unique thread_id between 0 and num_threads must be assigned to the <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> object passed to the <code>run</code> function.</dd></dl>
<h1><a class="anchor" id="implementation_topic_cl_scheduler"></a>
OpenCL kernel library</h1>
<p>All OpenCL kernels used by the library are built and stored in <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml">CLKernelLibrary</a>. If the library is compiled with embed_kernels=0 the application can set the path to the OpenCL kernels by calling <a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a9f976367edcd9ab787375373e050b94b">CLKernelLibrary::init()</a>, by default the path is set to "./cl_kernels" </p>
</div></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu May 18 2023 14:52:35 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
