<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: examples/gemm_tuner/README.md Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_r_e_a_d_m_e_8md.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">examples/gemm_tuner/README.md</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_r_e_a_d_m_e_8md.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;# Gemm Tuner</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;## Introduction</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;This is a set of tools for tuning the performance of OpenCL GEMM kernels.  Specifically, we tune 3 GEMM kernels, each</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;has a different implementation **strategy** of the GEMM operation: **native**, **reshaped**, **reshaped only rhs**.</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;The details of these strategies can be found in the documentations of the corresponding kernels:</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;**CLGEMMMatrixMultiplyNativeKernel**, **CLGEMMMatrixMultiplyReshapedKernel** and</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;**CLGEMMMatrixMultiplyReshapedOnlyRHSKernel**.</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;The Tuner consists of 2 scripts and 3 binaries:</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;* cl_gemm_benchmark and GemmTuner.py under examples/gemm_tuner, and</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;* benchmark_cl_gemm_native, benchmark_cl_gemm_reshaped_rhs_only and benchmark_cl_gemm_reshaped under</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  build/tests/gemm_tuner (you&#39;ll need to build the library first)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;The inputs to the Tuner are a list of 4 valued tuples we call **GEMM shape** or **GEMMParam** (M, N, K, B, and possibly</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;data type). They define the &quot;shape&quot; and other parameters (eg. data type) of a GEMM operation:</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;```</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;LHS x RHS = DST</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;```</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;Where LHS is of shape MxK, RHS is of shape KxN and DST is of shape MxN, and B is the batch size.</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;The outputs of the tuning process are 4 json files:</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;1. gemm_type_selection.json: selects which kernel type is the best for each GEMMParam</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;2. gemm_config_native.json: selects a list of best **GEMMConfigs** of the native kernel for each GEMMParam</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;3. gemm_config_reshapedonlyrhs.json: selects a list of best GEMMConfigs of the reshaped_only_rhs kernel for each GEMMParam</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;4. gemm_config_reshaped.json: selects a list of best GEMMConfigs of the reshaped kernel for each GEMMParam</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;These 4 files are the current representations we use for what we call the **heuristics** of a GEMM op: given a GEMMParam,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;what kernel and subsequently what configurations for that kernels are the most performant.</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;## Step-by-step example</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;### Step1: Prepare the shape and configs files</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;1. We first need to identify the shapes that we are interested in and store them in a csv file, say *gemm_shapes.csv*.</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;2. Then we need to specify a set of good GEMMConfig candidates for each kernel in 3 separate csv files (this requires</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    some prior heuristics, but can be provided by the Compute Library developers upon requests, based on your target device).</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;   Say we have *gemm_configs_native.csv&quot;, &quot;gemm_configs_reshaped.csv&quot; and &quot;gemm_configs_reshaped_only_rhs.csv&quot;.</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;   Please refer to the Prerequisite section for more details</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;### Step2: Push relevant files to the target device</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;All the files that need to be present on the target device are:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;* benchmark script: &lt;ComputeLibrary&gt;/examples/gemm_tuner/cl_gemm_benchmark</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;* shapes and configs csv files: gemm_shapes.csv, gemm_configs_native.csv, gemm_configs_reshaped_only_rhs.csv, gemm_configs_reshaped.csv</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;* Example benchmark binaries: &lt;ComputeLibrary&gt;/build/tests/gemm_tuner/benchmark_cl_gemm*</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;### Step3: Collect benchmark data</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;With these files on device, we can collect benchmark data using the script. Assume all the example binaries are pushed</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;to a folder called *gemm_tuner*. While logged onto our device:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;```</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;# Native</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;./cl_gemm_benchmark -s native -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_native.csv -o results/native</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;# Reshaped Only RHS</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;./cl_gemm_benchmark -s reshaped_rhs_only -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped_only_rhs.csv -o results/reshaped_only_rhs</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;# Reshaped</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;```</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;You can repeat the 3 commands above to have a bit redundancy in your benchmark data (as you can imagine, measurement is noisy),</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;but you may need to change the output folder for each repeat</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;It is also possible to split the benchmark phase among different platforms using the **-i** and **-n** options to specificy the starting experiment and the number of benchmark to run.</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;# Reshaped benchmark on 3 different platforms</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;## Platform 1</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped -i 0 -n 8</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;## Platform 2</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped -i 8 -n 8</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;## Platform 3</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;./cl_gemm_benchmark -s reshaped -e ./gemm_tuner -g ./gemm_shapes.csv -c ./gemm_configs_reshaped.csv -o results/reshaped -i 16 -n 8</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;### Step4: Generate the heuristics</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;1. After benchmarking, we pull the benchmark data, the *results* folder, from the target device to our host machine</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;2. We use the GemmTuner.py script to give us the heuristics</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;   ```</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;   python3 &lt;ComputeLibrary&gt;/examples/gemm_tuner/GemmTuner.py -b ./results -o heuristics</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;   ```</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;   When it&#39;s finished, there should be 4 json files in the *heuristics* folder</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;One thing to notice is that the config heuristics might give more than 1 recommendations for each GEMMParam, because</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;we accept all good GEMMConfigs with a tolerance. If you want fewer recommendations, you can decrease the tolerance by</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;passing a lower value to *-t &lt;tolerance&gt;* to the GemmTuner.py script.</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;## Prerequisite</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;* A target device to be tuned, plus the following on the device:</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    * Android or Linux OS</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    * Bash shell</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    * Built Compute Library with benchmark examples binaries</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    * cl_gemm_benchmark script</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    * gemm shape file</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;       A csv file containing the **GEMMParam search list**. This is the list of GEMMParams/gemm shapes that we&#39;re</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;       interested in (For more details see Approach section). The default list is prepared by Compute Library developers in advance</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;       and can be provided on request.</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;       The format is described as:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;       A headerless csv file with fields separated by commas.</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;       A gemm shape is a list of 4 positive integers &lt;M, N, K, B&gt; describing the shapes of the two matrices (LHS and</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;       RHS) with:</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;       M - Number of lhs matrix rows  </div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;       N - Number of rhs matrix columns  </div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;       K - Number of lhs matrix columns/rhs matrix rows  </div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;       B - Batch size  </div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;       An example gemm shape file looks like:</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  ```</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  100,100,30,1</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  100,100,30,3</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  ...</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  ```</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    * gemm config file  </div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      A csv file containing the **GEMMConfig search list**. This is the list of candidate GEMMConfigs among which we</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      search for the optimal one. **Note that we have a different list for each strategy.**</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      The default lists are prepared by Compute Library developers in advance and can be provided on request.</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      The format of the file for each strategy is the same:  </div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      A headerless csv file with fields separated by commas.</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      However the fields of GEMMConfig differ for each strategy:</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      * Strategy **native**:</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        A gemm config is a list of 3 positive integers &lt;m0, n0, k0&gt;, with:</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        m0 - Number of rows processed by the matrix multiplication  </div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        n0 - Number of columns processed by the matrix multiplication  </div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        k0 - Number of partial accumulations performed by the matrix multiplication</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        Only the following configurations of M0, N0 and K0 are currently supported:</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        M0 = 1, 2, 3, 4, 5, 6, 7, 8  </div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        N0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        K0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        An example gemm config file looks like:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  ```</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  1,4,4</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  2,3,8</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  ...</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  ```</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      * Strategy **reshaped_rhs_only**:</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        A gemm config is a list of 4 positive integers &lt;m0, n0, k0, h0&gt; and 3 boolean values:</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        m0 - Number of rows processed by the matrix multiplication  </div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        n0 - Number of columns processed by the matrix multiplication  </div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        k0 - Number of partial accumulations performed by the matrix multiplication  </div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        h0 - Number of horizontal blocks of size (k0xn0) stored on the same output row  </div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        interleave_rhs - Interleave rhs matrix (1) / Do not interleave rhs matrix (0)  </div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        transpose_rhs - Transpose rhs matrix (1) / Do not transpose rhs matrix (0)  </div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        export_to_cl_image_rhs - Export rhs matrix to cl_image (1) / Do not export rhs matrix to cl_image (0). Can only be true</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                                with certain combinations of the GEMMParams and other configs. Please refer to CLGEMMReshapeRHSMatrixKernel</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                                for more details</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        Only the following configurations of M0, N0 and K0 are currently supported:</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        M0 = 1, 2, 3, 4, 5, 6, 7, 8  </div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        N0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        K0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        H0 &gt;= 1  </div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        An example gemm config file looks like:</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  ```</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  4,4,4,1,1,1,0</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  4,4,4,3,1,0,1</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  ...</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  ```</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      * Strategy **reshaped**:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        A gemm config is a list of 5 positive integers &lt;m0, n0, k0, v0, h0&gt; and 4 boolean values:</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        m0 - Number of rows processed by the matrix multiplication  </div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        n0 - Number of columns processed by the matrix multiplication  </div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        k0 - Number of partial accumulations performed by the matrix multiplication  </div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        v0 - Number of vertical blocks of size (m0xk0) stored on the same output row  </div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        h0 - Number of horizontal blocks of size (k0xn0) stored on the same output row  </div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        interleave_lhs - Interleave lhs matrix (1) / Do not interleave lhs matrix (0)  </div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        interleave_rhs - Interleave rhs matrix (1) / Do not interleave rhs matrix (0)  </div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        transpose_rhs - Transpose rhs matrix but not lhs matrix (1) / Do not transpose rhs matrix but do transpose lhs matrix (0)  </div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        export_to_cl_image_rhs - Export rhs matrix to cl_image (1) / Do not export rhs matrix to cl_image (0). Can only be true</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                with certain combinations of the GEMMParams and other configs. Please refer to CLGEMMReshapeRHSMatrixKernel</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                for more details</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        If rhs matrix is transposed only the following configurations are currently supported:</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        M0 = 2, 3, 4, 5, 6, 7, 8  </div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        N0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        K0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        V0 &gt;= 1  </div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        H0 &gt;= 1  </div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        If lhs matrix is transposed only the following configurations are currently supported:</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        M0 = 2, 3, 4, 8  </div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        N0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        K0 = 2, 3, 4, 8, 16  </div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        V0 &gt;= 1  </div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        H0 &gt;= 1  </div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        An example gemm config file looks like:</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  ```</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  4,4,4,1,3,1,1,1,0</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  4,4,4,3,3,1,1,0,1</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  ...</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  ```</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;* A host machine, plus these on the machine:</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    * python &gt;= 3.6</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    * GemmTuner.py script</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;## Usage</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;The usage of the 2 scripts:</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;1. cl_gemm_benchmark</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;   Run the shell script (**cl_gemm_benchmark**) on your **target device**. Note that all the built benchmark</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;   examples: build/tests/gemm_tuner/benchmark_cl_gemm*, have to be present on your target device prior to running.</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;   The benchmark results will be saved to json files in an output directory.</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;   ```</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;   Usage: cl_gemm_benchmark [-h] -s &lt;strategy&gt; -e &lt;example_binary_dir&gt; -g &lt;gemm_shape_file&gt;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;   -c &lt;gemm_config_file&gt; [-d &lt;data_type&gt;] [-o &lt;out_dir&gt;]</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;   Options:</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;           -h</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;           Print help messages. If a strategy is specified with -s &lt;strategy&gt;, then only display messages relevant to that</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;           strategy. Otherwise if no strategy is specified, display messages for all available strategies.</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;           -s &lt;strategy&gt;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;           Strategy option.</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;           Options: ${ALL_STRATEGY_OPTIONS[@]}.</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;           -e &lt;example_binary_dir&gt;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;           Path to directory that holds all example binaries</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;           -g &lt;gemm_shape_file&gt;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;           Path to gemm shape csv file</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;           -c &lt;gemm_config_file&gt;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;           Path to gemm config csv file</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;           -d &lt;data_type&gt;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;           Data type option with which to run benchmark examples</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;           Default: ${DEFAULT_DATA_TYPE}</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;           Supported options:</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;           Strategy            :    Data Types</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;           Native              :    F32</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;           Reshaped            :    F16, F32</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;           Reshaped RHS Only   :    F16, F32</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;           -o &lt;out_dir&gt;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;           Path to output directory that holds output json files</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;           Default: ${DEFAULT_OUT_DIR}</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;   ```</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;2. GemmTuner.py:</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  Run the python script (**GemmTuner.py**) on your **host machine**.</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  You&#39;ll need to transfer all the benchmark result json files generated from the previous step to your host machine</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  beforehand. The script will output the best kernel and gemm configurations for each gemm param in the 4 output json files</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;   ```</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;   Usage: GemmTuner.py [-h] -b PATH [-o PATH] [-t TOLERANCE] [-D]</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;   CL GEMM Tuner</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;   optional arguments:</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;     -h, --help            show this help message and exit</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;     -b PATH, --benchmark_results PATH</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                           Path to benchmark result directory, where benchmark</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                           result json files have a file extension of</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                           &#39;gemmtuner_benchmark&#39;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;     -o PATH, --output_dir PATH</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                           Path to directory that holds output json files.</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;     -t TOLERANCE, --tolerance TOLERANCE</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                           For testing if two GEMMConfigs are equivalent in terms</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                           of performance. The tolerance is OpenCL timer in</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                           milliseconds. Recommended value: &lt;= 0.1 ms</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;     -D, --debug           Enable script debugging output</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;   ```</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="_r_e_a_d_m_e_8md.xhtml">README.md</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:24 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
