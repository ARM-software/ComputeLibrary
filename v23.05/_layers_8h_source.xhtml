<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute/graph/frontend/Layers.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_layers_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Layers.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_layers_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2021 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_GRAPH_LAYERS_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_GRAPH_LAYERS_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_builder_8h.xhtml">arm_compute/graph/GraphBuilder.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_layer_8h.xhtml">arm_compute/graph/frontend/ILayer.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_stream_8h.xhtml">arm_compute/graph/frontend/IStream.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_sub_stream_8h.xhtml">arm_compute/graph/frontend/SubStream.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_utility_8h.xhtml">arm_compute/core/utils/misc/Utility.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">namespace </span>graph</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>frontend</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/** Input Layer */</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">InputLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">    /** Construct an input layer.</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">     * @param[in] desc     Description of input tensor.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">     * @param[in] accessor Accessor to get input tensor data from.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml#a8c543d7a0c50bd07dfba4bbc6ba1ee53">   53</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml#a8c543d7a0c50bd07dfba4bbc6ba1ee53">InputLayer</a>(<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> desc, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> accessor)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        : _desc(desc), _accessor(<a class="code" href="namespacestd.xhtml">std</a>::move(accessor))</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">   58</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a60f996c5c698c7b9cbd82ee414b41d2e">GraphBuilder::add_input_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, _desc, std::move(_accessor));</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>    _desc;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _accessor;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;};</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/** Constant Layer */</span></div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml">   70</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml">ConstantLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">    /** Construct a constant layer.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">     * @param[in] desc     Description of input tensor.</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">     * @param[in] accessor Accessor to get input tensor data from.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml#abcbde8e4071b7c8de7bb871a5409ab7a">   78</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml#abcbde8e4071b7c8de7bb871a5409ab7a">ConstantLayer</a>(<a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> desc, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> accessor)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        : _desc(desc), _accessor(<a class="code" href="namespacestd.xhtml">std</a>::move(accessor))</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">   83</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aa7b1756a674d54d96df4e02a31169082">GraphBuilder::add_const_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, _desc, std::move(_accessor));</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <a class="code" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a>    _desc;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _accessor;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;};</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">/** Output Layer */</span></div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml">   95</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml">OutputLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">    /** Construct an output layer.</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">     * @param[in] accessor       Accessor to give output tensor data to.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">     * @param[in] connection_idx (Optional) Input connection index</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml#ac58e97b2c1974176b7ebaf5fe9fcacd0">  103</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml#ac58e97b2c1974176b7ebaf5fe9fcacd0">OutputLayer</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> accessor, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> connection_idx = 0)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        : _accessor(<a class="code" href="namespacestd.xhtml">std</a>::move(accessor)), _connection_idx(connection_idx)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  108</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), _connection_idx };</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db6223a8a4c44a263fbc5e9ec039e18">GraphBuilder::add_output_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, std::move(_accessor));</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _accessor;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        _connection_idx;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;};</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">/** Activation Layer */</span></div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">  121</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">ActivationLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    /** Construct an activation layer.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">     * @param[in] act_info       Activation information</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">     * @param[in] out_quant_info (Optional) Output quantization info</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#a782c91273f38cdd9e5740282368c197a">  129</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#a782c91273f38cdd9e5740282368c197a">ActivationLayer</a>(ActivationLayerInfo    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>,</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> out_quant_info = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        : _act_info(act_info),</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;          _out_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(out_quant_info))</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  136</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a5cd4c7258f59e2c5d03ed8ae5849a650">GraphBuilder::add_activation_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _act_info, std::move(_out_quant_info));</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    ActivationLayerInfo    _act_info;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> _out_quant_info;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;};</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">/** ArgMinMax Layer */</span></div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml">  149</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml">ArgMinMaxLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">    /** Construct an activation layer.</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">     * @param[in] op             Reduction Operation: min or max</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">     * @param[in] axis           Axis to perform reduction along</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">     * @param[in] out_data_type  (Optional) Output tensor data type</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">     * @param[in] out_quant_info (Optional) Output quantization info</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml#a81903abd33b45d02e52594457ccf3a2b">  159</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml#a81903abd33b45d02e52594457ccf3a2b">ArgMinMaxLayer</a>(<a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a>     op,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           axis,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                   <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>               out_data_type  = <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a>,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                   <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> out_quant_info = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        : _op(op),</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;          _axis(axis),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;          _out_data_type(out_data_type),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          _out_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(out_quant_info))</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">    /** Create layer and add to the given stream.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     * @param[in] s Stream to add layer to.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     * @return ID of the created node.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  176</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac663bef61cee6df859e8a441a9fa9c0d">GraphBuilder::add_arg_min_max_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _op, _axis, _out_data_type, std::move(_out_quant_info));</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> _op;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       _axis;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>           _out_data_type;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>   _out_quant_info;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;};</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">/** Batchnormalization Layer */</span></div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml">  191</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml">BatchNormalizationLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">    /** Construct a batch normalization layer.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">     * @param[in] mean    Accessor to get mean tensor data from.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">     * @param[in] var     Accessor to get var tensor data from.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">     * @param[in] gamma   (Optional) Accessor to get gamma tensor data from. Default: nullptr.</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">     * @param[in] beta    (Optional) Accessor to get beta tensor data from. Default: nullptr.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">     * @param[in] epsilon (Optional) Epsilon value. Default: 0.001.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml#a5a6d29d97205186313cf48823a2dce8a">  202</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml#a5a6d29d97205186313cf48823a2dce8a">BatchNormalizationLayer</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> mean,</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> var,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> gamma   = <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> beta    = <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                            <span class="keywordtype">float</span>               <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a> = 0.001f)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        : _mean(<a class="code" href="namespacestd.xhtml">std</a>::move(mean)), _var(<a class="code" href="namespacestd.xhtml">std</a>::move(var)), _gamma(<a class="code" href="namespacestd.xhtml">std</a>::move(gamma)), _beta(<a class="code" href="namespacestd.xhtml">std</a>::move(beta)), _epsilon(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  211</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_mean == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_var == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a09979aca2a60b08c6cdbe6aebb942e53">GraphBuilder::add_batch_normalization_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _epsilon,</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                                          std::move(_mean), std::move(_var), std::move(_beta), std::move(_gamma));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _mean;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _var;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _gamma;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _beta;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">float</span>               _epsilon;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;};</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">/** Bounding Box Transform Layer */</span></div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml">  231</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml">BoundingBoxTransformLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">    /** Construct a bounding box transform layer.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     * @param[in] sub_stream_input  Graph sub-stream for the input</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">     * @param[in] sub_stream_deltas Graph sub-stream for the deltas</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">     * @param[in] info              Contains BoundingBox operation information described in @ref BoundingBoxTransformInfo.</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml#a6dcc7d1a6d7a3e0b48b5e4ad5ce37220">  240</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml#a6dcc7d1a6d7a3e0b48b5e4ad5ce37220">BoundingBoxTransformLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream_input, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream_deltas, <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        : _ss_input(sub_stream_input), _ss_deltas(sub_stream_deltas), _bbox_info(info)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">    /** Create layer and add to the given stream.</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">     * @param[in] s Stream to add layer to.</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">     * @return ID of the created node.</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  251</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { _ss_input.tail_node(), 0 };</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> deltas        = { _ss_deltas.tail_node(), 0 };</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9e02d090f0b711a7adf97367606e6857">GraphBuilder::add_bounding_box_transform_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, deltas, _bbox_info);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>                _ss_input;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>                _ss_deltas;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> _bbox_info;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;};</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">/** Channel Shuffle Layer */</span></div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml">  266</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml">ChannelShuffleLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">    /** Construct a Channel Shuffle layer.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">     * @param[in] num_groups Number of groups</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml#aff5aec1faefad58676969dcb1f5b7b5b">  273</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml#aff5aec1faefad58676969dcb1f5b7b5b">ChannelShuffleLayer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        : _num_groups(num_groups)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  278</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a19b8128b8e78988834c00c4e9cd97c3e">GraphBuilder::add_channel_shuffle_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _num_groups);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _num_groups;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;};</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">/** Concat Layer */</span></div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml">  290</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml">ConcatLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">    /** Construct a concatenation layer</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">     * @param[in] sub_stream1      First graph branch</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">     * @param[in] sub_stream2      Second graph branch</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">     * @param[in] rest_sub_streams Rest sub-graph branches</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#ab92fa4522a5f22a09ebcc4056c20feff">  300</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#ab92fa4522a5f22a09ebcc4056c20feff">ConcatLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        : _sub_streams(), _concat_descriptor(<a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>::<a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>)</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    {</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream1)));</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream2)));</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp; sub_stream)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        },</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        std::move(rest_sub_streams)...);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">    /** Construct a concatenation layer</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">     * @param[in] concat_descriptor Concat layer descriptor</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">     * @param[in] sub_stream1       First graph branch</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">     * @param[in] sub_stream2       Second graph branch</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">     * @param[in] rest_sub_streams  Rest sub-graph branches</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a4e2c31270f39a2f4cca9e42850dafc3d">  320</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a4e2c31270f39a2f4cca9e42850dafc3d">ConcatLayer</a>(<a class="code" href="structarm__compute_1_1graph_1_1descriptors_1_1_concat_layer_descriptor.xhtml">descriptors::ConcatLayerDescriptor</a> concat_descriptor, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        : _sub_streams(), _concat_descriptor(concat_descriptor)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream1)));</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream2)));</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp; sub_stream)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        },</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        std::move(rest_sub_streams)...);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">    /** Construct a concat layer</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">     * @param[in] sub_stream Sub-stream</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a3a157200f2d59f07ad6acb50423d6d28">  337</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a3a157200f2d59f07ad6acb50423d6d28">ConcatLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream)</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        : _sub_streams(), _concat_descriptor(<a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">DataLayoutDimension</a>::<a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">CHANNEL</a>)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    }</div><div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  342</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>     nid           = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">if</span>(_sub_streams.size() == 1 &amp;&amp; _sub_streams.at(0) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            nid = _sub_streams[0]-&gt;tail_node();</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        {</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="comment">// Collect tail nodes and concatenate</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            std::vector&lt;NodeIdxPair&gt; nodes;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> : _sub_streams)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node() != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>))</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> tail_node = s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node());</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    <span class="keywordflow">if</span>(tail_node != <span class="keyword">nullptr</span> &amp;&amp; tail_node-&gt;type() != <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">NodeType::Output</a>)</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                        nodes.push_back({ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node(), 0 });</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                    }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                }</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            }</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            nid = <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a667742f5b5d3574fb50c8180609efac4">GraphBuilder::add_concatenate_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, nodes, _concat_descriptor);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">return</span> nid;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    std::vector&lt;std::unique_ptr&lt;SubStream&gt;&gt; _sub_streams;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <a class="code" href="structarm__compute_1_1graph_1_1descriptors_1_1_concat_layer_descriptor.xhtml">descriptors::ConcatLayerDescriptor</a>      _concat_descriptor;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;};</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">/** Convolution Layer */</span></div><div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">  376</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">ConvolutionLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">    /** Construct a convolution layer.</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">     * @param[in] conv_width         Convolution width.</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">     * @param[in] conv_height        Convolution height.</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="comment">     * @param[in] ofm                Output feature map.</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="comment">     * @param[in] weights            Accessor to get kernel weights from.</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">     * @param[in] bias               Accessor to get kernel bias from.</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">     * @param[in] conv_info          Padding and stride information.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">     * @param[in] num_groups         (Optional) Number of groups. Default: 1.</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">     * @param[in] weights_quant_info (Optional) Weights quantization information</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">     * @param[in] out_quant_info     (Optional) Output quantization info</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml#af896fc13b0eaaafe855f0fbcd65a07de">  391</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml#af896fc13b0eaaafe855f0fbcd65a07de">ConvolutionLayer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           conv_width,</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           conv_height,</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           ofm,</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                     <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    weights,</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                     <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                     PadStrideInfo          <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>         = 1,</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> weights_quant_info = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(),</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                     <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> out_quant_info     = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        : _conv_width(conv_width),</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;          _conv_height(conv_height),</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;          _ofm(ofm),</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;          _conv_info(<a class="code" href="namespacestd.xhtml">std</a>::move(conv_info)),</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;          _num_groups(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>),</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;          _weights(<a class="code" href="namespacestd.xhtml">std</a>::move(weights)),</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;          _bias(<a class="code" href="namespacestd.xhtml">std</a>::move(bias)),</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;          _weights_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(weights_quant_info)),</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;          _out_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(out_quant_info))</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  412</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#afbb302ca2e2f509f976568ba0928c2ce">GraphBuilder::add_convolution_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                                  Size2D(_conv_width, _conv_height), _ofm, _conv_info, _num_groups,</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                                                  s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#af18f64d6fa79da2fd4fd585bf818b3d2">convolution_method_hint</a>, s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#abdcfd0552ddabcb92a04396961fb6377">fast_math_hint</a>,</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                                                  std::move(_weights), std::move(_bias), std::move(_weights_quant_info), std::move(_out_quant_info));</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    }</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _conv_width;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _conv_height;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _ofm;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keyword">const</span> PadStrideInfo    _conv_info;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _num_groups;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    _weights;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    _bias;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> _weights_quant_info;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> _out_quant_info;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;};</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">/** Deconvolution Layer */</span></div><div class="line"><a name="l00435"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml">  435</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml">DeconvolutionLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment">    /** Construct a convolution layer.</span></div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">     * @param[in] conv_width  Convolution width.</span></div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="comment">     * @param[in] conv_height Convolution height.</span></div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="comment">     * @param[in] ofm         Output feature map.</span></div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="comment">     * @param[in] weights     Accessor to get kernel weights from.</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">     * @param[in] bias        Accessor to get kernel bias from.</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment">     * @param[in] deconv_info Padding and stride information.</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00447"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml#a98c30ba91fe106a656f931077135fa1e">  447</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml#a98c30ba91fe106a656f931077135fa1e">DeconvolutionLayer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        conv_width,</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        conv_height,</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        ofm,</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                       <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> weights,</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                       <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> bias,</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                       PadStrideInfo       deconv_info)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        : _conv_width(conv_width),</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;          _conv_height(conv_height),</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;          _ofm(ofm),</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;          _deconv_info(<a class="code" href="namespacestd.xhtml">std</a>::move(deconv_info)),</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;          _weights(<a class="code" href="namespacestd.xhtml">std</a>::move(weights)),</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;          _bias(<a class="code" href="namespacestd.xhtml">std</a>::move(bias))</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    }</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  462</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a1735fd3d9b774a2c92ca1619886d2ede">GraphBuilder::add_deconvolution_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                                                    Size2D(_conv_width, _conv_height), _ofm, _deconv_info,</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                                                    std::move(_weights), std::move(_bias));</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    }</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        _conv_width;</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        _conv_height;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        _ofm;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="keyword">const</span> PadStrideInfo _deconv_info;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _weights;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _bias;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;};</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">/** Depthwise Convolution Layer */</span></div><div class="line"><a name="l00481"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml">  481</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml">DepthwiseConvolutionLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;{</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment">    /** Construct a depthwise convolution layer.</span></div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">     * @param[in] conv_width         Convolution width.</span></div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">     * @param[in] conv_height        Convolution height.</span></div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">     * @param[in] weights            Accessor to get kernel weights from.</span></div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment">     * @param[in] bias               Accessor to get kernel bias from.</span></div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment">     * @param[in] conv_info          Padding and stride information.</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment">     * @param[in] depth_multiplier   (Optional) Depth multiplier parameter.</span></div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment">     * @param[in] weights_quant_info (Optional) Quantization info used for weights</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="comment">     * @param[in] out_quant_info     (Optional) Output quantization info</span></div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00495"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml#acd0aeefa8e7b1978d4c5ac5e238da9c7">  495</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml#acd0aeefa8e7b1978d4c5ac5e238da9c7">DepthwiseConvolutionLayer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           conv_width,</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                              <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           conv_height,</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                              <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    weights,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                              <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    bias,</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                              PadStrideInfo          conv_info,</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                              <span class="keywordtype">int</span>                    depth_multiplier   = 1,</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> weights_quant_info = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(),</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> out_quant_info     = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        : _conv_width(conv_width),</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;          _conv_height(conv_height),</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;          _conv_info(<a class="code" href="namespacestd.xhtml">std</a>::move(conv_info)),</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;          _weights(<a class="code" href="namespacestd.xhtml">std</a>::move(weights)),</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;          _bias(<a class="code" href="namespacestd.xhtml">std</a>::move(bias)),</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;          _depth_multiplier(depth_multiplier),</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;          _weights_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(weights_quant_info)),</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;          _out_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(out_quant_info))</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  514</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9c59d071c7e6c2574e1d5587ba50949c">GraphBuilder::add_depthwise_convolution_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params,</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                                                            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, Size2D(_conv_width, _conv_height), _conv_info, _depth_multiplier,</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                                                            s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a67ede056be3dfba6dfbb934a1b96661e">depthwise_convolution_method_hint</a>,</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                                                            std::move(_weights), std::move(_bias), std::move(_weights_quant_info), std::move(_out_quant_info));</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _conv_width;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _conv_height;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">const</span> PadStrideInfo    _conv_info;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    _weights;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>    _bias;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordtype">int</span>                    _depth_multiplier;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> _weights_quant_info;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> _out_quant_info;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;};</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">/** DepthToSpace Layer */</span></div><div class="line"><a name="l00536"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml">  536</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml">DepthToSpaceLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;{</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">    /** Construct an DepthToSpace layer.</span></div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">     * @param[in] block_shape Block size to rearranged</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00543"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml#a7bb7a05b224ccc08e9a749d2a91aa22c">  543</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml#a7bb7a05b224ccc08e9a749d2a91aa22c">DepthToSpaceLayer</a>(int32_t block_shape)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        : _block_shape(block_shape)</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    {</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    }</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div><div class="line"><a name="l00548"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  548</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae80e3bef3b70c6b443b7e42e68397a5c">GraphBuilder::add_depth_to_space_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _block_shape);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    int32_t _block_shape;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;};</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="comment">/** Dequantization Layer */</span></div><div class="line"><a name="l00560"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml">  560</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml">DequantizationLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;{</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">    /** Construct a dequantization layer.</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00566"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml#a85ae01d4be6283bbfcbdc574d75ec528">  566</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml#a85ae01d4be6283bbfcbdc574d75ec528">DequantizationLayer</a>()</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    {</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  570</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a50410fc54c8540887d600849043327d5">GraphBuilder::add_dequantization_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    }</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;};</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment">/** DetectionOutput Layer */</span></div><div class="line"><a name="l00579"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml">  579</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml">DetectionOutputLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment">    /** Construct a detection output layer.</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;<span class="comment">     * @param[in] sub_stream_conf  Confidence graph sub-stream.</span></div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="comment">     * @param[in] sub_stream_prior PriorBox graph sub-stream.</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="comment">     * @param[in] detect_info      DetectionOutput parameters.</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00588"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml#add9af3fe9c394a1994f926a6268260ed">  588</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml#add9af3fe9c394a1994f926a6268260ed">DetectionOutputLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream_conf, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream_prior, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;detect_info)</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        : _ss_conf(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream_conf)), _ss_prior(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream_prior)), _detect_info(detect_info)</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    {</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    }</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  593</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params  = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_loc      = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_conf     = { _ss_conf.tail_node(), 0 };</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_priorbox = { _ss_prior.tail_node(), 0 };</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aff2fa3e8e802bcefd6fdd5780aa096e1">GraphBuilder::add_detection_output_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, input_loc, input_conf, input_priorbox, _detect_info);</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    }</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>                _ss_conf;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>                _ss_prior;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <a class="code" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> _detect_info;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;};<span class="comment"></span></div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;<span class="comment">/** DetectionOutputPostProcess Layer */</span></div><div class="line"><a name="l00608"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml">  608</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml">DetectionPostProcessLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;{</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="comment">    /** Construct a detection output layer.</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment">     * @param[in] sub_stream_class_prediction Class prediction graph sub-stream.</span></div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment">     * @param[in] detect_info                 DetectionOutput parameters.</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">     * @param[in] anchors                     Accessor to get anchors tensor data from.</span></div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment">     * @param[in] out_quant_info              (Optional) Output quantization info</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml#a4c9b5e28705dc4e1b1b9418fc62bdedc">  618</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml#a4c9b5e28705dc4e1b1b9418fc62bdedc">DetectionPostProcessLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream_class_prediction, <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> detect_info, <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> anchors,</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                              <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> out_quant_info = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        : _sub_stream_class_prediction(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream_class_prediction)), _detect_info(detect_info), _anchors(<a class="code" href="namespacestd.xhtml">std</a>::move(anchors)), _out_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(out_quant_info))</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    {</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  624</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_anchors == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params          = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_box_encoding     = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_class_prediction = { _sub_stream_class_prediction.tail_node(), 0 };</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a17fe8b7f4dbd6cf0747ab9d328a56f88">GraphBuilder::add_detection_post_process_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, input_box_encoding, input_class_prediction, _detect_info, std::move(_anchors), std::move(_out_quant_info));</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    }</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>                     _sub_stream_class_prediction;</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> _detect_info;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>           _anchors;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>        _out_quant_info;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;};<span class="comment"></span></div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment">/** Dummy Layer */</span></div><div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml">  641</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml">DummyLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;{</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment">    /** Construct a dummy layer.</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment">     * @param[in] shape Output shape</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00648"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml#a3ec4fedf20ceaf0c7bc62be065150f40">  648</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml#a3ec4fedf20ceaf0c7bc62be065150f40">DummyLayer</a>(TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        : _shape(shape)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    {</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    }</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  653</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3484452057c88a68b9242816b50a0687">GraphBuilder::add_dummy_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _shape);</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    TensorShape _shape;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;};</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div><div class="line"><a name="l00664"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">  664</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">EltwiseLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;{</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;<span class="comment">    /** Construct an element-wise operation layer</span></div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="comment">     * @param[in] sub_stream0 First graph sub-stream</span></div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="comment">     * @param[in] sub_stream1 First graph sub-stream</span></div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="comment">     * @param[in] op          Element-wise operation to perform</span></div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00673"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml#a9749ff9a2d545bc30f9d432cd20be48d">  673</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml#a9749ff9a2d545bc30f9d432cd20be48d">EltwiseLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream0, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a> op)</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        : _ss0(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream0)), _ss1(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream1)), _op(op)</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    {</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    }</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  678</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input0        = { _ss0.tail_node(), 0 };</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input1        = { _ss1.tail_node(), 0 };</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a193c384a821bc30573b13975eccbe58a">GraphBuilder::add_elementwise_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, input0, input1, _op);</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>        _ss0;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>        _ss1;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a> _op;</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;};<span class="comment"></span></div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment">/** Flatten Layer */</span></div><div class="line"><a name="l00693"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml">  693</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml">FlattenLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;{</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">    /** Construct a flatten layer. */</span></div><div class="line"><a name="l00697"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml#a9122dc9cbefd8f81b092eadeae658202">  697</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml#a9122dc9cbefd8f81b092eadeae658202">FlattenLayer</a>()</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    {</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    }</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div><div class="line"><a name="l00701"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  701</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a639fab29a682a532ca20615210b366ad">GraphBuilder::add_flatten_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    }</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;};</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="comment">/** Fully Connected Layer */</span></div><div class="line"><a name="l00710"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">  710</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">FullyConnectedLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;{</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment">    /** Construct a fully connected layer.</span></div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment">     * @param[in] num_outputs        Number of outputs.</span></div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment">     * @param[in] weights            Accessor to get weights from.</span></div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="comment">     * @param[in] bias               Accessor to get bias from.</span></div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment">     * @param[in] fc_info            (Optional) Fully connected layer metadata</span></div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment">     * @param[in] weights_quant_info (Optional) Weights quantization information</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment">     * @param[in] out_quant_info     (Optional) Output quantization info</span></div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00722"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#aed1efef2ff5d9d98937162e3220b9412">  722</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#aed1efef2ff5d9d98937162e3220b9412">FullyConnectedLayer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  num_outputs,</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>           weights,</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>           bias,</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                        <span class="keyword">const</span> FullyConnectedLayerInfo fc_info            = FullyConnectedLayerInfo(),</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>        weights_quant_info = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(),</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>        out_quant_info     = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        : _num_outputs(num_outputs),</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;          _weights(<a class="code" href="namespacestd.xhtml">std</a>::move(weights)),</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;          _bias(<a class="code" href="namespacestd.xhtml">std</a>::move(bias)),</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;          _weights_ss(nullptr),</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;          _bias_ss(nullptr),</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;          _fc_info(fc_info),</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;          _weights_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(weights_quant_info)),</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;          _out_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(out_quant_info))</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    {</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="comment">    /** Construct a fully connected layer.</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment">     * @param[in] num_outputs        Number of outputs.</span></div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment">     * @param[in] sub_stream_weights Graph sub-stream for the weights.</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment">     * @param[in] sub_stream_bias    Graph sub-stream for the bias.</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="comment">     * @param[in] fc_info            (Optional) Fully connected layer metadata</span></div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="comment">     * @param[in] weights_quant_info (Optional) Weights quantization information</span></div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="comment">     * @param[in] out_quant_info     (Optional) Output quantization info</span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00748"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#a967453c6b06e1604672f4c719f5d1d77">  748</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#a967453c6b06e1604672f4c719f5d1d77">FullyConnectedLayer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  num_outputs,</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>                     sub_stream_weights,</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                        <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>                     sub_stream_bias,</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                        <span class="keyword">const</span> FullyConnectedLayerInfo fc_info            = FullyConnectedLayerInfo(),</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>        weights_quant_info = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(),</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>        out_quant_info     = <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        : _num_outputs(num_outputs),</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;          _weights(nullptr),</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;          _bias(nullptr),</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;          _weights_ss(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>&gt;(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream_weights))),</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;          _bias_ss(<a class="code" href="namespacestd.xhtml">std</a>::make_unique&lt;<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>&gt;(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream_bias))),</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;          _fc_info(fc_info),</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;          _weights_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(weights_quant_info)),</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;          _out_quant_info(<a class="code" href="namespacestd.xhtml">std</a>::move(out_quant_info))</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    {</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    }</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="comment">    /** Create layer and add to the given stream.</span></div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="comment">     * @param[in] s Stream to add layer to.</span></div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="comment">     * @return ID of the created node.</span></div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00771"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  771</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        <span class="keywordflow">if</span>(_weights != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        {</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af65d66a907a0cd5a01a2dc4bd93de984">GraphBuilder::add_fully_connected_layer</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _num_outputs,</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                                           std::move(_weights), std::move(_bias), _fc_info,</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                                           std::move(_weights_quant_info), std::move(_out_quant_info), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#abdcfd0552ddabcb92a04396961fb6377">fast_math_hint</a>);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        }</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        {</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_weights_ss == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> bias_nid = (_bias_ss == <span class="keyword">nullptr</span>) ? <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a> : _bias_ss-&gt;tail_node();</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af65d66a907a0cd5a01a2dc4bd93de984">GraphBuilder::add_fully_connected_layer</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _num_outputs,</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                                                           _weights_ss-&gt;tail_node(), bias_nid, _fc_info,</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                                                           std::move(_out_quant_info), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#abdcfd0552ddabcb92a04396961fb6377">fast_math_hint</a>);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        }</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    }</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _num_outputs;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>           _weights;</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>           _bias;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    std::unique_ptr&lt;SubStream&gt;    _weights_ss;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    std::unique_ptr&lt;SubStream&gt;    _bias_ss;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keyword">const</span> FullyConnectedLayerInfo _fc_info;</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>        _weights_quant_info;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>        _out_quant_info;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;};</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="comment">/** Generate Proposals Layer */</span></div><div class="line"><a name="l00804"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml">  804</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml">GenerateProposalsLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;{</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment">    /** Construct a generate proposals layer.</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="comment">     * @param[in] ss_scores  Graph sub-stream for the scores.</span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="comment">     * @param[in] ss_deltas  Graph sub-stream for the deltas.</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="comment">     * @param[in] ss_anchors Graph sub-stream for the anchors.</span></div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="comment">     * @param[in] info       Generate Proposals operation information.</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00814"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml#a19e3ec9ef1eff753af974d946e85a860">  814</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml#a19e3ec9ef1eff753af974d946e85a860">GenerateProposalsLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;ss_scores, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;ss_deltas, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;ss_anchors, <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        : _ss_scores(<a class="code" href="namespacestd.xhtml">std</a>::move(ss_scores)), _ss_deltas(<a class="code" href="namespacestd.xhtml">std</a>::move(ss_deltas)), _ss_anchors(<a class="code" href="namespacestd.xhtml">std</a>::move(ss_anchors)), _info(info)</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    {</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    }</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;<span class="comment">    /** Create layer and add to the given stream.</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="comment">     * @param[in] s Stream to add layer to.</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment">     * @return ID of the created node.</span></div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00825"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  825</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> scores        = { _ss_scores.tail_node(), 0 };</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> deltas        = { _ss_deltas.tail_node(), 0 };</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> anchors       = { _ss_anchors.tail_node(), 0 };</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a8965f4ef424a3b9142706cfe50b7e6cf">GraphBuilder::add_generate_proposals_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, scores, deltas, anchors, _info);</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    }</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>             _ss_scores;</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>             _ss_deltas;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>             _ss_anchors;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <a class="code" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> _info;</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;};</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="comment">/** L2 Normalize Layer */</span></div><div class="line"><a name="l00842"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml">  842</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml">L2NormalizeLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;{</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">    /** Construct a L2 Normalize layer.</span></div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment">     * @param[in] axis    Axis to perform normalization on</span></div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="comment">     * @param[in] epsilon Lower bound value for the normalization</span></div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00850"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml#a62706b7905e2c292aaee4e1c01a6f807">  850</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml#a62706b7905e2c292aaee4e1c01a6f807">L2NormalizeLayer</a>(<span class="keywordtype">int</span> axis, <span class="keywordtype">float</span> <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>)</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;        : _axis(axis), _epsilon(epsilon)</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    {</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    }</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div><div class="line"><a name="l00855"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  855</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6bf51d4ae4adaffc5511b756d27ae069">GraphBuilder::add_l2_normalize_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _axis, _epsilon);</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    }</div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    <span class="keywordtype">int</span>   _axis;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    <span class="keywordtype">float</span> _epsilon;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;};</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment">/** Normalization Layer */</span></div><div class="line"><a name="l00868"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml">  868</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml">NormalizationLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;{</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment">    /** Construct a normalization layer.</span></div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment">     * @param[in] norm_info Normalization information.</span></div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00875"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml#ada275ffd82f624b62bdbc2f01349fe33">  875</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml#ada275ffd82f624b62bdbc2f01349fe33">NormalizationLayer</a>(NormalizationLayerInfo norm_info)</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;        : _norm_info(norm_info)</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    {</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    }</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  880</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a542464b49825a7f82b42909409405010">GraphBuilder::add_normalization_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _norm_info);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    }</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    NormalizationLayerInfo _norm_info;</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;};</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="comment">/** Normalize planar YUV Layer */</span></div><div class="line"><a name="l00892"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml">  892</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml">NormalizePlanarYUVLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;{</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment">    /** Construct a normalize planar YUV layer.</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="comment">     * @param[in] mean Accessor to get mean tensor data from.</span></div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="comment">     * @param[in] std  Accessor to get std tensor data from.</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00900"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml#a6c61e8c3eb59a3587817a7250b0bb6ac">  900</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml#a6c61e8c3eb59a3587817a7250b0bb6ac">NormalizePlanarYUVLayer</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> mean,</div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;                            <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> <a class="code" href="namespacestd.xhtml">std</a>)</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        : _mean(std::move(mean)), _std(std::move(std))</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    {</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    }</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div><div class="line"><a name="l00906"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  906</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_mean == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_std == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a2bf294b4d12b6430e4e6b6ba8db8273b">GraphBuilder::add_normalize_planar_yuv_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>,</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                                                           std::move(_mean), std::move(_std));</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    }</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _mean;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _std;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;};</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="comment">/** Pad Layer */</span></div><div class="line"><a name="l00923"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml">  923</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml">PadLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;{</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment">    /** Construct a pad layer.</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment">     * @param[in] padding   The padding for each spatial dimension of the input tensor. The pair padding[i]</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">     *                      specifies the front and the end padding in the i-th dimension.</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment">     * @param[in] pad_value Padding value to use. Defaults to 0.</span></div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00932"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml#a47a2355ed3b1fb475ed6a424558f7c01">  932</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml#a47a2355ed3b1fb475ed6a424558f7c01">PadLayer</a>(<a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> padding, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> pad_value = <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>())</div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        : _padding(padding), _pad_value(pad_value)</div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    {</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    }</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div><div class="line"><a name="l00937"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  937</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac6ee8c6a5e3b98c697aacf55a251c986">GraphBuilder::add_pad_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _padding, _pad_value);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    }</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> _padding;</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>  _pad_value;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;};</div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="comment">/** Permute Layer */</span></div><div class="line"><a name="l00950"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml">  950</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml">PermuteLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;{</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment">    /** Construct a permute layer.</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">     * @param[in] perm   Permutation vector.</span></div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">     * @param[in] layout (Optional) Data layout to assign to permuted tensor.</span></div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">     *                   If UNKNOWN then the input&#39;s layout will be used.</span></div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00959"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml#a3100240dbc6c19e85608522a8d4c1e98">  959</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml#a3100240dbc6c19e85608522a8d4c1e98">PermuteLayer</a>(<a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> perm, <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> layout = <a class="code" href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>)</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;        : _perm(perm), _layout(layout)</div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    {</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    }</div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div><div class="line"><a name="l00964"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  964</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ad0a6a6580be03b445d9dcc64ced5e2ef">GraphBuilder::add_permute_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _perm, _layout);</div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    }</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;</div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> _perm;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>        _layout;</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;};</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="comment">/** Pooling Layer */</span></div><div class="line"><a name="l00977"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml">  977</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml">PoolingLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;{</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="comment">    /** Construct a pooling layer.</span></div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="comment">     * @param[in] pool_info Pooling information.</span></div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00984"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml#a9ad7e9ede84392dee892357377aa1806">  984</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml#a9ad7e9ede84392dee892357377aa1806">PoolingLayer</a>(PoolingLayerInfo pool_info)</div><div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;        : _pool_info(pool_info)</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    {</div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    }</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">  989</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab52fa970654d32e0c0621cf718a6861f">GraphBuilder::add_pooling_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _pool_info);</div><div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;    }</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    PoolingLayerInfo _pool_info;</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;};</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="comment">/** PRelu Layer */</span></div><div class="line"><a name="l01001"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml"> 1001</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml">PReluLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;{</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment">    /** Construct an PRelu operation layer</span></div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="comment">     * @param[in] sub_stream0 First graph sub-stream</span></div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment">     * @param[in] sub_stream1 First graph sub-stream</span></div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01009"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml#af98721678a4fbe4177ae5ae5aa51b548"> 1009</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml#af98721678a4fbe4177ae5ae5aa51b548">PReluLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream0, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1)</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        : _ss0(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream0)), _ss1(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream1))</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    {</div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;    }</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;</div><div class="line"><a name="l01014"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1014</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { _ss0.tail_node(), 0 };</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> alpha         = { _ss1.tail_node(), 0 };</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a613c0d9db4a80d400c8dc220648d337e">GraphBuilder::add_prelu_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, alpha);</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    }</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> _ss0;</div><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> _ss1;</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;};</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="comment">/** Print Layer */</span></div><div class="line"><a name="l01029"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml"> 1029</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml">PrintLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;{</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment">    /** Construct a print layer.</span></div><div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="comment">     * Example usage to locally dequantize and print a tensor:</span></div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;<span class="comment">     * Tensor *output = new Tensor();</span></div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment">     * const auto transform = [output](ITensor *input)</span></div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="comment">     * {</span></div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;<span class="comment">     *     output-&gt;allocator()-&gt;init(*input-&gt;info());</span></div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;<span class="comment">     *     output-&gt;info()-&gt;set_data_type(DataType::F32);</span></div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;<span class="comment">     *     output-&gt;allocator()-&gt;allocate();</span></div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="comment">     *     Window win;</span></div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="comment">     *     win.use_tensor_dimensions(input-&gt;info()-&gt;tensor_shape());</span></div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;<span class="comment">     *     Iterator in(input, win);</span></div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;<span class="comment">     *     Iterator out(output, win);</span></div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;<span class="comment">     *     execute_window_loop(win, [&amp;](const Coordinates &amp;)</span></div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;<span class="comment">     *     {</span></div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;<span class="comment">     *         *(reinterpret_cast&lt;float *&gt;(out.ptr())) = dequantize_qasymm8(*in.ptr(), input-&gt;info()-&gt;quantization_info().uniform());</span></div><div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="comment">     *     }, in, out);</span></div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="comment">     *     return output;</span></div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="comment">     * };</span></div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="comment">     * graph &lt;&lt; InputLayer(input_descriptor.set_quantization_info(in_quant_info), get_input_accessor(common_params, nullptr, false))</span></div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="comment">     *       &lt;&lt; ...</span></div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="comment">     *       &lt;&lt; \\ CNN Layers</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment">     *       &lt;&lt; ...</span></div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="comment">     *       &lt;&lt; PrintLayer(std::cout, IOFormatInfo(), transform)</span></div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="comment">     *       &lt;&lt; ...</span></div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="comment">     *       &lt;&lt; OutputLayer(get_output_accessor(common_params, 5));</span></div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;<span class="comment">     * @param[in] stream      Output stream.</span></div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;<span class="comment">     * @param[in] format_info (Optional) Format info.</span></div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="comment">     * @param[in] transform   (Optional) Input transform function.</span></div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01067"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml#ab7f3a2ee3028c0cc794bdd4c8d55a6be"> 1067</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml#ab7f3a2ee3028c0cc794bdd4c8d55a6be">PrintLayer</a>(std::ostream &amp;stream, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> &amp;format_info = <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>(), <span class="keyword">const</span> std::function&lt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *)&gt; transform = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;        : _stream(stream), _format_info(format_info), _transform(transform)</div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    {</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    }</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;</div><div class="line"><a name="l01072"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1072</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a69a669c24a8f0db98f3f980e161ab890">GraphBuilder::add_print_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _stream, _format_info, _transform);</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    }</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    std::ostream                             &amp;_stream;</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>                       &amp;_format_info;</div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <span class="keyword">const</span> std::function&lt;ITensor *(ITensor *)&gt; _transform;</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;};</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="comment">/** PriorBox Layer */</span></div><div class="line"><a name="l01086"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml"> 1086</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml">PriorBoxLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;{</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="comment">    /** Construct a priorbox layer.</span></div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment">     * @param[in] sub_stream First graph sub-stream</span></div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment">     * @param[in] prior_info PriorBox parameters.</span></div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01094"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml#a6c69d519202fb0b1ee7f521e7fb6e7a1"> 1094</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml#a6c69d519202fb0b1ee7f521e7fb6e7a1">PriorBoxLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;prior_info)</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        : _ss(<a class="code" href="namespacestd.xhtml">std</a>::move(sub_stream)), _prior_info(prior_info)</div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    {</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    }</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;</div><div class="line"><a name="l01099"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1099</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input0        = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input1        = { _ss.tail_node(), 0 };</div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6dc61dbaf7ce5612ac8d1566c1c222e3">GraphBuilder::add_priorbox_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, input0, input1, _prior_info);</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    }</div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>         _ss;</div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <a class="code" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> _prior_info;</div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;};</div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment">/** Quantization Layer */</span></div><div class="line"><a name="l01113"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml"> 1113</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml">QuantizationLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;{</div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="comment">    /** Construct a quantization layer.</span></div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="comment">     * @param[in] out_quant_info Output tensor quantization info</span></div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01120"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml#a2a7f0e0b904a95289b8f0af3911abda0"> 1120</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml#a2a7f0e0b904a95289b8f0af3911abda0">QuantizationLayer</a>(<a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> out_quant_info)</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        : _out_quant_info(out_quant_info)</div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    {</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    }</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div><div class="line"><a name="l01125"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1125</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a44fe1be81ac7e5aadbc73f05bb95aae1">GraphBuilder::add_quantization_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _out_quant_info);</div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;    }</div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    <a class="code" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> _out_quant_info;</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;};</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="comment">/** Reduction Layer */</span></div><div class="line"><a name="l01137"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml"> 1137</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml">ReductionLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;{</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="comment">    /** Construct a reduction layer.</span></div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment">     * @param[in] op        Reduction operation</span></div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="comment">     * @param[in] axis      Reduction axis</span></div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment">     * @param[in] keep_dims (Optional) Whether to keep the reduced dimension after the operation. Defaults to true.</span></div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01146"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml#acd6b9eda0fe89026e79b4fb228f09f2a"> 1146</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml#acd6b9eda0fe89026e79b4fb228f09f2a">ReductionLayer</a>(<a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> op, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> axis, <span class="keywordtype">bool</span> keep_dims)</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        : _op(op), _axis(axis), _keep_dims(keep_dims)</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    {</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;    }</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;</div><div class="line"><a name="l01151"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1151</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3494a111bde4adf09b7bcb3648981e9f">GraphBuilder::add_reduction_operation_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _op, _axis, _keep_dims);</div><div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    }</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> _op;</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       _axis;</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    <span class="keywordtype">bool</span>               _keep_dims;</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;};</div><div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment">/** Reorg Layer */</span></div><div class="line"><a name="l01165"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml"> 1165</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml">ReorgLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;{</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="comment">    /** Construct a reorg layer.</span></div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="comment">     * @param[in] stride Stride value to use for reorganizing the values in the output tensor.</span></div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="comment">     *                   It defines the spatial distance between 2 consecutive pixels in the x and y direction</span></div><div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01173"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml#a4c1d6ae3354f4dfa1c4e703e8c545dff"> 1173</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml#a4c1d6ae3354f4dfa1c4e703e8c545dff">ReorgLayer</a>(<span class="keywordtype">int</span> stride)</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;        : _stride(stride)</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    {</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    }</div><div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div><div class="line"><a name="l01178"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1178</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9d0c83a96ca66565407885ff41214665">GraphBuilder::add_reorg_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _stride);</div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    }</div><div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="keywordtype">int</span> _stride;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;};</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="comment">/** Reshape Layer */</span></div><div class="line"><a name="l01190"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml"> 1190</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml">ReshapeLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;{</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="comment">    /** Construct a reshape layer.</span></div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="comment">     * @param[in] shape Target shape.</span></div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01197"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml#aa3c4c9fd2bc62c95238f22172e8c10f1"> 1197</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml#aa3c4c9fd2bc62c95238f22172e8c10f1">ReshapeLayer</a>(TensorShape <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>)</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;        : _shape(shape)</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;    {</div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    }</div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;</div><div class="line"><a name="l01202"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1202</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a96b9a9be8e6bc94f1a245d9625c5b596">GraphBuilder::add_reshape_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _shape);</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    }</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    TensorShape _shape;</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;};</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;<span class="comment">/** Resize Layer */</span></div><div class="line"><a name="l01214"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml"> 1214</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml">ResizeLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;{</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l01217"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml#a6de958db405f92c48214eedd8c5a2a7b"> 1217</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml#a6de958db405f92c48214eedd8c5a2a7b">ResizeLayer</a>(<a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, <span class="keywordtype">float</span> width_scale, <span class="keywordtype">float</span> height_scale)</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        : _policy(policy), _width_scale(width_scale), _height_scale(height_scale)</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    {</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    }</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;</div><div class="line"><a name="l01222"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1222</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a4e6a956431d508ac913a77cf1f9eaa69">GraphBuilder::add_resize_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _policy, _width_scale, _height_scale);</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;    }</div><div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> _policy;</div><div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <span class="keywordtype">float</span>               _width_scale;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <span class="keywordtype">float</span>               _height_scale;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;};</div><div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;<span class="comment">/** ROIAlign Layer */</span></div><div class="line"><a name="l01236"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml"> 1236</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml">ROIAlignLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;{</div><div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;<span class="comment">    /** Construct a RoiAlign layer.</span></div><div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;<span class="comment">     * @param[in] sub_stream_input Graph sub-stream for the input</span></div><div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;<span class="comment">     * @param[in] sub_stream_rois  Graph sub-stream for the rois</span></div><div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;<span class="comment">     * @param[in] pool_info        Pooling information.</span></div><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01245"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml#aee31512297b466bfd6fadd4e79384887"> 1245</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml#aee31512297b466bfd6fadd4e79384887">ROIAlignLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream_input, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream_rois, <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info)</div><div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        : _ss_input(sub_stream_input), _ss_rois(sub_stream_rois), _pool_info(pool_info)</div><div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    {</div><div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    }</div><div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;<span class="comment">    /** Prevent instances of this class from being copy constructed */</span></div><div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml">ROIAlignLayer</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml">ROIAlignLayer</a> &amp;) = <span class="keyword">delete</span>;<span class="comment"></span></div><div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;<span class="comment">    /** Prevent instances of this class from being copied */</span></div><div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml">ROIAlignLayer</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml">ROIAlignLayer</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;</div><div class="line"><a name="l01255"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1255</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { _ss_input.tail_node(), 0 };</div><div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> rois          = { _ss_rois.tail_node(), 0 };</div><div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aeeebbfe02ab3fe0320a82d6c3413eeeb">GraphBuilder::add_roi_align_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, rois, _pool_info);</div><div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;    }</div><div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;</div><div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>           _ss_input;</div><div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a>           _ss_rois;</div><div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <a class="code" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> _pool_info;</div><div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;};</div><div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;<span class="comment">/** Scale Layer */</span></div><div class="line"><a name="l01270"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml"> 1270</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml">ScaleLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;{</div><div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;<span class="comment">    /** Construct a scale layer.</span></div><div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;<span class="comment">     * @param[in] mul_w Accessor to get mul weight from.</span></div><div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="comment">     * @param[in] add_w Accessor to get add weight from.</span></div><div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01278"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml#abd50a915acafa4ed21f755d911f9b155"> 1278</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml#abd50a915acafa4ed21f755d911f9b155">ScaleLayer</a>(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> mul_w,</div><div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;               <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> add_w)</div><div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;        : _mul_w(<a class="code" href="namespacestd.xhtml">std</a>::move(mul_w)), _add_w(<a class="code" href="namespacestd.xhtml">std</a>::move(add_w))</div><div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    {</div><div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    }</div><div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div><div class="line"><a name="l01284"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1284</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a7396e101536756a6aaf05f043a6f0b13">GraphBuilder::add_scale_layer</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, std::move(_mul_w), std::move(_add_w));</div><div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    }</div><div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;</div><div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _mul_w;</div><div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> _add_w;</div><div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;};</div><div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;<span class="comment">/** Slice Layer */</span></div><div class="line"><a name="l01297"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml"> 1297</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml">SliceLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;{</div><div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;<span class="comment">    /** Construct a slice layer.</span></div><div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;<span class="comment">     * @param[in] starts The starts of the dimensions of the input tensor to be sliced. The length must be of rank(input).</span></div><div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;<span class="comment">     * @param[in] ends   The ends of the dimensions of the input tensor to be sliced. The length must be of rank(input).</span></div><div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01305"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml#af595d920ba4be189b2291e957503d9fd"> 1305</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml#af595d920ba4be189b2291e957503d9fd">SliceLayer</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends)</div><div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;        : _starts(starts), _ends(ends)</div><div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;    {</div><div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    }</div><div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;</div><div class="line"><a name="l01310"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1310</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a819d4ebfd6c79e430f7dc0a5e5241203">GraphBuilder::add_slice_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _starts, _ends);</div><div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    }</div><div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;</div><div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> _starts;</div><div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> _ends;</div><div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;};</div><div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="comment">/** Softmax Layer */</span></div><div class="line"><a name="l01323"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml"> 1323</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml">SoftmaxLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;{</div><div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;<span class="comment">    /** Construct a softmax layer.</span></div><div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;<span class="comment">     * @param[in] beta (Optional) Beta value. Default 1.0.</span></div><div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01330"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml#ae12d901b385c3facc7b19ac809ad6b20"> 1330</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml#ae12d901b385c3facc7b19ac809ad6b20">SoftmaxLayer</a>(<span class="keywordtype">float</span> beta = 1.0f)</div><div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        : _beta(beta)</div><div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    {</div><div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    }</div><div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;</div><div class="line"><a name="l01335"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1335</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af06fa4df1027c97658c0c26570b2bdb5">GraphBuilder::add_softmax_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _beta);</div><div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    }</div><div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;</div><div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;    <span class="keywordtype">float</span> _beta;</div><div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;};</div><div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;<span class="comment">/** Stack Layer */</span></div><div class="line"><a name="l01347"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml"> 1347</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">StackLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;{</div><div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;<span class="comment">    /** Construct a concatenation layer</span></div><div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;<span class="comment">     * @param[in] sub_stream1      First graph branch</span></div><div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;<span class="comment">     * @param[in] sub_stream2      Second graph branch</span></div><div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;<span class="comment">     * @param[in] rest_sub_streams Rest sub-graph branches</span></div><div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l01357"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a4e534985818ce7c5560abc0c6a99e021"> 1357</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a4e534985818ce7c5560abc0c6a99e021">StackLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;        : _sub_streams(), _axis(0)</div><div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    {</div><div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream1)));</div><div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream2)));</div><div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;</div><div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp; sub_stream)</div><div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;        {</div><div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;            _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;        },</div><div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;        std::move(rest_sub_streams)...);</div><div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;<span class="comment">    /** Construct a concatenation layer</span></div><div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;<span class="comment">     * @param[in] axis             Stack layer axis along which to stack the inputs</span></div><div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;<span class="comment">     * @param[in] sub_stream1      First graph branch</span></div><div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;<span class="comment">     * @param[in] sub_stream2      Second graph branch</span></div><div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;<span class="comment">     * @param[in] rest_sub_streams Rest sub-graph branches</span></div><div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l01377"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#aeea441309ced0e245856a5e70e82b63e"> 1377</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#aeea441309ced0e245856a5e70e82b63e">StackLayer</a>(<span class="keywordtype">int</span> axis, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream1, <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        : _sub_streams(), _axis(axis)</div><div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    {</div><div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream1)));</div><div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream2)));</div><div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;</div><div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        <a class="code" href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">utility::for_each</a>([&amp;](<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp; sub_stream)</div><div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;        {</div><div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;            _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;        },</div><div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;        std::move(rest_sub_streams)...);</div><div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    }<span class="comment"></span></div><div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;<span class="comment">    /** Construct a concat layer</span></div><div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;<span class="comment">     * @param[in] sub_stream Sub-stream</span></div><div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</div><div class="line"><a name="l01394"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a198fc3f27d247211a87832d4e74d4a70"> 1394</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a198fc3f27d247211a87832d4e74d4a70">StackLayer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">SubStream</a> &amp;&amp;sub_stream)</div><div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;        : _sub_streams(), _axis(0)</div><div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;    {</div><div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;        _sub_streams.push_back(std::make_unique&lt;SubStream&gt;(std::move(sub_stream)));</div><div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    }</div><div class="line"><a name="l01399"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1399</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>     nid           = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div><div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        <span class="keywordflow">if</span>(_sub_streams.size() == 1 &amp;&amp; _sub_streams.at(0) != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;        {</div><div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;            nid = _sub_streams[0]-&gt;tail_node();</div><div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        }</div><div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;        {</div><div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;            <span class="comment">// Collect tail nodes and stack</span></div><div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;            std::vector&lt;NodeIdxPair&gt; nodes;</div><div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;            <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> : _sub_streams)</div><div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;            {</div><div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;                <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a> &amp;&amp; (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node() != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>))</div><div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;                {</div><div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> tail_node = s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>().<a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">node</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node());</div><div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;                    <span class="keywordflow">if</span>(tail_node != <span class="keyword">nullptr</span> &amp;&amp; tail_node-&gt;type() != <a class="code" href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">NodeType::Output</a>)</div><div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;                    {</div><div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;                        nodes.push_back({ <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>-&gt;tail_node(), 0 });</div><div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;                    }</div><div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;                }</div><div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;            }</div><div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;            nid = <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae0a382c6800d4ebe51ba9ced8841e2b5">GraphBuilder::add_stack_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, nodes, _axis);</div><div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;        }</div><div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;        <span class="keywordflow">return</span> nid;</div><div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    }</div><div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;</div><div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    std::vector&lt;std::unique_ptr&lt;SubStream&gt;&gt; _sub_streams;</div><div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    <span class="keywordtype">int</span>                                     _axis;</div><div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;};</div><div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;<span class="comment">/** StridedSlice Layer */</span></div><div class="line"><a name="l01433"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml"> 1433</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml">StridedSliceLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;{</div><div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;<span class="comment">    /** Construct a strided slice layer.</span></div><div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;<span class="comment">     * @param[in] starts             The starts of the dimensions of the input tensor to be sliced. The length must be of rank(input).</span></div><div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="comment">     * @param[in] ends               The ends of the dimensions of the input tensor to be sliced. The length must be of rank(input).</span></div><div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;<span class="comment">     * @param[in] strides            The strides of the dimensions of the input tensor to be sliced. The length must be of rank(input).</span></div><div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment">     * @param[in] strided_slice_info Contains masks for the starts, ends and strides</span></div><div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01443"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml#ae10faa4e6be72c6ef51fde8235f0d83f"> 1443</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml#ae10faa4e6be72c6ef51fde8235f0d83f">StridedSliceLayer</a>(<a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends, <a class="code" href="classarm__compute_1_1_coordinates.xhtml">BiStrides</a> &amp;strides, <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a> strided_slice_info)</div><div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;        : _starts(starts), _ends(ends), _strides(strides), _info(strided_slice_info)</div><div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;    {</div><div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    }</div><div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;</div><div class="line"><a name="l01448"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1448</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab37711b90876e57bfcade525e3233c4d">GraphBuilder::add_strided_slice_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _starts, _ends, _strides, _info);</div><div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    }</div><div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;</div><div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>           _starts;</div><div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>           _ends;</div><div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">BiStrides</a>             _strides;</div><div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <a class="code" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a> _info;</div><div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;};</div><div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;<span class="comment"></span></div><div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;<span class="comment">/** YOLO Layer */</span></div><div class="line"><a name="l01463"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml"> 1463</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml">YOLOLayer</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">ILayer</a></div><div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;{</div><div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;<span class="comment">    /** Construct a YOLO layer.</span></div><div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;<span class="comment">     * @param[in] act_info Activation info</span></div><div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l01470"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml#a49ab86a10f2ac201ada5d76a596a8df7"> 1470</a></span>&#160;    <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml#a49ab86a10f2ac201ada5d76a596a8df7">YOLOLayer</a>(ActivationLayerInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>)</div><div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;        : _act_info(act_info)</div><div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    {</div><div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    }</div><div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;</div><div class="line"><a name="l01475"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d"> 1475</a></span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">create_layer</a>(<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">IStream</a> &amp;s)<span class="keyword"> override</span></div><div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>  common_params = { <a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">name</a>(), s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">hints</a>().<a class="code" href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">target_hint</a> };</div><div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        <a class="code" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>         = { s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">tail_node</a>(), 0 };</div><div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db084ff8c5adc5876cffecd617b9118">GraphBuilder::add_yolo_node</a>(s.<a class="code" href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">graph</a>(), common_params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, _act_info);</div><div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    }</div><div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;</div><div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    ActivationLayerInfo _act_info;</div><div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;};</div><div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;} <span class="comment">// namespace frontend</span></div><div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;} <span class="comment">// namespace graph</span></div><div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_GRAPH_LAYERS_H */</span><span class="preprocessor"></span></div><div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a3494a111bde4adf09b7bcb3648981e9f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3494a111bde4adf09b7bcb3648981e9f">arm_compute::graph::GraphBuilder::add_reduction_operation_node</a></div><div class="ttdeci">static NodeID add_reduction_operation_node(Graph &amp;g, NodeParams params, NodeIdxPair input, ReductionOperation op, int axis, bool keep_dims=true)</div><div class="ttdoc">Adds a reduction sum layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00645">GraphBuilder.cpp:645</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_node_params_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_node_params.xhtml">arm_compute::graph::NodeParams</a></div><div class="ttdoc">Common node parameters. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00270">Types.h:270</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml">arm_compute::graph::frontend::PoolingLayer</a></div><div class="ttdoc">Pooling Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00977">Layers.h:977</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::GenerateProposalsLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00825">Layers.h:825</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format. </div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00034">PixelValue.h:34</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a966a9c417ce5e94dca08d9b5e745c0c9"><div class="ttname"><a href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">arm_compute::InterpolationPolicy</a></div><div class="ttdeci">InterpolationPolicy</div><div class="ttdoc">Interpolation method. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00413">Types.h:413</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">DFT.cpp:115</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::SliceLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01310">Layers.h:1310</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_sub_stream.xhtml">arm_compute::graph::frontend::SubStream</a></div><div class="ttdoc">Sub stream class. </div><div class="ttdef"><b>Definition:</b> <a href="_sub_stream_8h_source.xhtml#l00047">SubStream.h:47</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::DepthToSpaceLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00548">Layers.h:548</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a44fe1be81ac7e5aadbc73f05bb95aae1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a44fe1be81ac7e5aadbc73f05bb95aae1">arm_compute::graph::GraphBuilder::add_quantization_node</a></div><div class="ttdeci">static NodeID add_quantization_node(Graph &amp;g, NodeParams params, NodeIdxPair input, const QuantizationInfo &amp;out_quant_info)</div><div class="ttdoc">Adds a quantization layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00640">GraphBuilder.cpp:640</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints_xhtml_a67ede056be3dfba6dfbb934a1b96661e"><div class="ttname"><a href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a67ede056be3dfba6dfbb934a1b96661e">arm_compute::graph::frontend::StreamHints::depthwise_convolution_method_hint</a></div><div class="ttdeci">DepthwiseConvolutionMethod depthwise_convolution_method_hint</div><div class="ttdoc">Depthwise Convolution method hint. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2frontend_2_types_8h_source.xhtml#l00065">Types.h:65</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a09979aca2a60b08c6cdbe6aebb942e53"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a09979aca2a60b08c6cdbe6aebb942e53">arm_compute::graph::GraphBuilder::add_batch_normalization_node</a></div><div class="ttdeci">static NodeID add_batch_normalization_node(Graph &amp;g, NodeParams params, NodeIdxPair input, float epsilon, ITensorAccessorUPtr mean_accessor=nullptr, ITensorAccessorUPtr var_accessor=nullptr, ITensorAccessorUPtr beta_accessor=nullptr, ITensorAccessorUPtr gamma_accessor=nullptr)</div><div class="ttdoc">Adds a batch normalization layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00148">GraphBuilder.cpp:148</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer_xhtml_a9122dc9cbefd8f81b092eadeae658202"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml#a9122dc9cbefd8f81b092eadeae658202">arm_compute::graph::frontend::FlattenLayer::FlattenLayer</a></div><div class="ttdeci">FlattenLayer()</div><div class="ttdoc">Construct a flatten layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00697">Layers.h:697</a></div></div>
<div class="ttc" id="classarm__compute_1_1_generate_proposals_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_generate_proposals_info.xhtml">arm_compute::GenerateProposalsInfo</a></div><div class="ttdoc">Generate Proposals Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01461">Types.h:1461</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer_xhtml_aee31512297b466bfd6fadd4e79384887"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml#aee31512297b466bfd6fadd4e79384887">arm_compute::graph::frontend::ROIAlignLayer::ROIAlignLayer</a></div><div class="ttdeci">ROIAlignLayer(SubStream &amp;&amp;sub_stream_input, SubStream &amp;&amp;sub_stream_rois, ROIPoolingLayerInfo pool_info)</div><div class="ttdoc">Construct a RoiAlign layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01245">Layers.h:1245</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml">arm_compute::graph::frontend::NormalizationLayer</a></div><div class="ttdoc">Normalization Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00868">Layers.h:868</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">arm_compute::graph::EltwiseOperation</a></div><div class="ttdeci">EltwiseOperation</div><div class="ttdoc">Supported Element-wise operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00109">Types.h:109</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer_xhtml_a6dcc7d1a6d7a3e0b48b5e4ad5ce37220"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml#a6dcc7d1a6d7a3e0b48b5e4ad5ce37220">arm_compute::graph::frontend::BoundingBoxTransformLayer::BoundingBoxTransformLayer</a></div><div class="ttdeci">BoundingBoxTransformLayer(SubStream &amp;&amp;sub_stream_input, SubStream &amp;&amp;sub_stream_deltas, BoundingBoxTransformInfo info)</div><div class="ttdoc">Construct a bounding box transform layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00240">Layers.h:240</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints_xhtml_a81d9ddb43e3c89a5bf3334d475f9d74b"><div class="ttname"><a href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#a81d9ddb43e3c89a5bf3334d475f9d74b">arm_compute::graph::frontend::StreamHints::target_hint</a></div><div class="ttdeci">Target target_hint</div><div class="ttdoc">Target execution hint. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2frontend_2_types_8h_source.xhtml#l00063">Types.h:63</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer_xhtml_a4c1d6ae3354f4dfa1c4e703e8c545dff"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml#a4c1d6ae3354f4dfa1c4e703e8c545dff">arm_compute::graph::frontend::ReorgLayer::ReorgLayer</a></div><div class="ttdeci">ReorgLayer(int stride)</div><div class="ttdoc">Construct a reorg layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01173">Layers.h:1173</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a60f996c5c698c7b9cbd82ee414b41d2e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a60f996c5c698c7b9cbd82ee414b41d2e">arm_compute::graph::GraphBuilder::add_input_node</a></div><div class="ttdeci">static NodeID add_input_node(Graph &amp;g, NodeParams params, const TensorDescriptor &amp;desc, ITensorAccessorUPtr accessor=nullptr)</div><div class="ttdoc">Adds an input layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00116">GraphBuilder.cpp:116</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::FullyConnectedLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00771">Layers.h:771</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::StackLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01399">Layers.h:1399</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml">arm_compute::graph::frontend::ReshapeLayer</a></div><div class="ttdoc">Reshape Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01190">Layers.h:1190</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_tensor_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">arm_compute::graph::TensorDescriptor</a></div><div class="ttdoc">Tensor metadata class. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_descriptor_8h_source.xhtml#l00038">TensorDescriptor.h:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml">arm_compute::graph::frontend::DequantizationLayer</a></div><div class="ttdoc">Dequantization Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00560">Layers.h:560</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml">arm_compute::graph::frontend::ArgMinMaxLayer</a></div><div class="ttdoc">ArgMinMax Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00149">Layers.h:149</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ConvolutionLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00412">Layers.h:412</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml">arm_compute::graph::frontend::PadLayer</a></div><div class="ttdoc">Pad Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00923">Layers.h:923</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml">arm_compute::graph::frontend::ReductionLayer</a></div><div class="ttdoc">Reduction Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01137">Layers.h:1137</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ConcatLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00342">Layers.h:342</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1a1b012674e0f1de071a611391828ad"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">arm_compute::PaddingList</a></div><div class="ttdeci">std::vector&lt; PaddingInfo &gt; PaddingList</div><div class="ttdoc">List of padding information. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00455">Types.h:455</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml">arm_compute::graph::frontend::SliceLayer</a></div><div class="ttdoc">Slice Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01297">Layers.h:1297</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a5827eb9cb394e74af87f74bd354fb45b"><div class="ttname"><a href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">arm_compute::ReductionOperation</a></div><div class="ttdeci">ReductionOperation</div><div class="ttdoc">Available reduction operations. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00478">Types.h:478</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml">arm_compute::graph::frontend::GenerateProposalsLayer</a></div><div class="ttdoc">Generate Proposals Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00804">Layers.h:804</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_input_layer_xhtml_a8c543d7a0c50bd07dfba4bbc6ba1ee53"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml#a8c543d7a0c50bd07dfba4bbc6ba1ee53">arm_compute::graph::frontend::InputLayer::InputLayer</a></div><div class="ttdeci">InputLayer(TensorDescriptor desc, ITensorAccessorUPtr accessor)</div><div class="ttdoc">Construct an input layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00053">Layers.h:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer_xhtml_a9749ff9a2d545bc30f9d432cd20be48d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml#a9749ff9a2d545bc30f9d432cd20be48d">arm_compute::graph::frontend::EltwiseLayer::EltwiseLayer</a></div><div class="ttdeci">EltwiseLayer(SubStream &amp;&amp;sub_stream0, SubStream &amp;&amp;sub_stream1, EltwiseOperation op)</div><div class="ttdoc">Construct an element-wise operation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00673">Layers.h:673</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml">arm_compute::graph::frontend::DepthwiseConvolutionLayer</a></div><div class="ttdoc">Depthwise Convolution Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00481">Layers.h:481</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer_xhtml_acd0aeefa8e7b1978d4c5ac5e238da9c7"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml#acd0aeefa8e7b1978d4c5ac5e238da9c7">arm_compute::graph::frontend::DepthwiseConvolutionLayer::DepthwiseConvolutionLayer</a></div><div class="ttdeci">DepthwiseConvolutionLayer(unsigned int conv_width, unsigned int conv_height, ITensorAccessorUPtr weights, ITensorAccessorUPtr bias, PadStrideInfo conv_info, int depth_multiplier=1, const QuantizationInfo weights_quant_info=QuantizationInfo(), const QuantizationInfo out_quant_info=QuantizationInfo())</div><div class="ttdoc">Construct a depthwise convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00495">Layers.h:495</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02">arm_compute::DataLayoutDimension</a></div><div class="ttdeci">DataLayoutDimension</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00124">Types.h:124</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a613c0d9db4a80d400c8dc220648d337e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a613c0d9db4a80d400c8dc220648d337e">arm_compute::graph::GraphBuilder::add_prelu_node</a></div><div class="ttdeci">static NodeID add_prelu_node(Graph &amp;g, NodeParams params, NodeIdxPair input, NodeIdxPair alpha)</div><div class="ttdoc">Adds a prelu layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00601">GraphBuilder.cpp:601</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ConstantLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00083">Layers.h:83</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer_xhtml_abcbde8e4071b7c8de7bb871a5409ab7a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml#abcbde8e4071b7c8de7bb871a5409ab7a">arm_compute::graph::frontend::ConstantLayer::ConstantLayer</a></div><div class="ttdeci">ConstantLayer(TensorDescriptor desc, ITensorAccessorUPtr accessor)</div><div class="ttdoc">Construct a constant layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00078">Layers.h:78</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer_xhtml_a62706b7905e2c292aaee4e1c01a6f807"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml#a62706b7905e2c292aaee4e1c01a6f807">arm_compute::graph::frontend::L2NormalizeLayer::L2NormalizeLayer</a></div><div class="ttdeci">L2NormalizeLayer(int axis, float epsilon)</div><div class="ttdoc">Construct a L2 Normalize layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00850">Layers.h:850</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">const auto conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_convolution_layer_8cpp_source.xhtml#l00407">ConvolutionLayer.cpp:407</a></div></div>
<div class="ttc" id="arm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer_xhtml_aa3c4c9fd2bc62c95238f22172e8c10f1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml#aa3c4c9fd2bc62c95238f22172e8c10f1">arm_compute::graph::frontend::ReshapeLayer::ReshapeLayer</a></div><div class="ttdeci">ReshapeLayer(TensorShape shape)</div><div class="ttdoc">Construct a reshape layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01197">Layers.h:1197</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer_xhtml_aed1efef2ff5d9d98937162e3220b9412"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#aed1efef2ff5d9d98937162e3220b9412">arm_compute::graph::frontend::FullyConnectedLayer::FullyConnectedLayer</a></div><div class="ttdeci">FullyConnectedLayer(unsigned int num_outputs, ITensorAccessorUPtr weights, ITensorAccessorUPtr bias, const FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo(), const QuantizationInfo weights_quant_info=QuantizationInfo(), const QuantizationInfo out_quant_info=QuantizationInfo())</div><div class="ttdoc">Construct a fully connected layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00722">Layers.h:722</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a4e6a956431d508ac913a77cf1f9eaa69"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a4e6a956431d508ac913a77cf1f9eaa69">arm_compute::graph::GraphBuilder::add_resize_node</a></div><div class="ttdeci">static NodeID add_resize_node(Graph &amp;g, NodeParams params, NodeIdxPair input, InterpolationPolicy policy, float width_scale, float height_scale)</div><div class="ttdoc">Adds a resize layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00660">GraphBuilder.cpp:660</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer_xhtml_af595d920ba4be189b2291e957503d9fd"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_slice_layer.xhtml#af595d920ba4be189b2291e957503d9fd">arm_compute::graph::frontend::SliceLayer::SliceLayer</a></div><div class="ttdeci">SliceLayer(Coordinates &amp;starts, Coordinates &amp;ends)</div><div class="ttdoc">Construct a slice layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01305">Layers.h:1305</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml">arm_compute::graph::frontend::ILayer</a></div><div class="ttdoc">ILayer interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_8h_source.xhtml#l00037">ILayer.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a5cd4c7258f59e2c5d03ed8ae5849a650"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a5cd4c7258f59e2c5d03ed8ae5849a650">arm_compute::graph::GraphBuilder::add_activation_node</a></div><div class="ttdeci">static NodeID add_activation_node(Graph &amp;g, NodeParams params, NodeIdxPair input, ActivationLayerInfo act_info, const QuantizationInfo &amp;out_quant_info=QuantizationInfo())</div><div class="ttdoc">Adds an activation layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00136">GraphBuilder.cpp:136</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a542464b49825a7f82b42909409405010"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a542464b49825a7f82b42909409405010">arm_compute::graph::GraphBuilder::add_normalization_node</a></div><div class="ttdeci">static NodeID add_normalization_node(Graph &amp;g, NodeParams params, NodeIdxPair input, NormalizationLayerInfo norm_info)</div><div class="ttdoc">Adds a normalization layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00560">GraphBuilder.cpp:560</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ad0a6a6580be03b445d9dcc64ced5e2ef"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ad0a6a6580be03b445d9dcc64ced5e2ef">arm_compute::graph::GraphBuilder::add_permute_node</a></div><div class="ttdeci">static NodeID add_permute_node(Graph &amp;g, NodeParams params, NodeIdxPair input, PermutationVector perm, DataLayout layout=DataLayout::UNKNOWN)</div><div class="ttdoc">Adds a permute layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00596">GraphBuilder.cpp:596</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a33e65be485104e2e9e69fca551d6f492"><div class="ttname"><a href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">arm_compute::PermutationVector</a></div><div class="ttdeci">Strides PermutationVector</div><div class="ttdoc">Permutation vector. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00051">Types.h:51</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer_xhtml_ab92fa4522a5f22a09ebcc4056c20feff"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#ab92fa4522a5f22a09ebcc4056c20feff">arm_compute::graph::frontend::ConcatLayer::ConcatLayer</a></div><div class="ttdeci">ConcatLayer(SubStream &amp;&amp;sub_stream1, SubStream &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="ttdoc">Construct a concatenation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00300">Layers.h:300</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer_xhtml_a2a7f0e0b904a95289b8f0af3911abda0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml#a2a7f0e0b904a95289b8f0af3911abda0">arm_compute::graph::frontend::QuantizationLayer::QuantizationLayer</a></div><div class="ttdeci">QuantizationLayer(QuantizationInfo out_quant_info)</div><div class="ttdoc">Construct a quantization layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01120">Layers.h:1120</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer_xhtml_a49ab86a10f2ac201ada5d76a596a8df7"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml#a49ab86a10f2ac201ada5d76a596a8df7">arm_compute::graph::frontend::YOLOLayer::YOLOLayer</a></div><div class="ttdeci">YOLOLayer(ActivationLayerInfo act_info)</div><div class="ttdoc">Construct a YOLO layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01470">Layers.h:1470</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::BoundingBoxTransformLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00251">Layers.h:251</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a0db084ff8c5adc5876cffecd617b9118"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db084ff8c5adc5876cffecd617b9118">arm_compute::graph::GraphBuilder::add_yolo_node</a></div><div class="ttdeci">static NodeID add_yolo_node(Graph &amp;g, NodeParams params, NodeIdxPair input, ActivationLayerInfo act_info)</div><div class="ttdoc">Adds a yolo layer to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00735">GraphBuilder.cpp:735</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::NormalizePlanarYUVLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00906">Layers.h:906</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a41c3f59161734b8492782359f583b676"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">arm_compute::graph::ITensorAccessorUPtr</a></div><div class="ttdeci">std::unique_ptr&lt; ITensorAccessor &gt; ITensorAccessorUPtr</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_accessor_8h_source.xhtml#l00058">ITensorAccessor.h:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer_xhtml_af98721678a4fbe4177ae5ae5aa51b548"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml#af98721678a4fbe4177ae5ae5aa51b548">arm_compute::graph::frontend::PReluLayer::PReluLayer</a></div><div class="ttdeci">PReluLayer(SubStream &amp;&amp;sub_stream0, SubStream &amp;&amp;sub_stream1)</div><div class="ttdoc">Construct an PRelu operation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01009">Layers.h:1009</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_af65d66a907a0cd5a01a2dc4bd93de984"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af65d66a907a0cd5a01a2dc4bd93de984">arm_compute::graph::GraphBuilder::add_fully_connected_layer</a></div><div class="ttdeci">static NodeID add_fully_connected_layer(Graph &amp;g, NodeParams params, NodeIdxPair input, unsigned int num_outputs, NodeID weights_nid, NodeID bias_nid=EmptyNodeID, const FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo(), const QuantizationInfo &amp;out_quant_info=QuantizationInfo(), FastMathHint fast_math_hint=FastMathHint::Disabled)</div><div class="ttdoc">Adds a fully connected layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00468">GraphBuilder.cpp:468</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer_xhtml_ae12d901b385c3facc7b19ac809ad6b20"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml#ae12d901b385c3facc7b19ac809ad6b20">arm_compute::graph::frontend::SoftmaxLayer::SoftmaxLayer</a></div><div class="ttdeci">SoftmaxLayer(float beta=1.0f)</div><div class="ttdoc">Construct a softmax layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01330">Layers.h:1330</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::BatchNormalizationLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00211">Layers.h:211</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a9e02d090f0b711a7adf97367606e6857"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9e02d090f0b711a7adf97367606e6857">arm_compute::graph::GraphBuilder::add_bounding_box_transform_node</a></div><div class="ttdeci">static NodeID add_bounding_box_transform_node(Graph &amp;g, NodeParams params, NodeIdxPair input, NodeIdxPair deltas, BoundingBoxTransformInfo info)</div><div class="ttdoc">Adds a bounding box transform layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00200">GraphBuilder.cpp:200</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_stream_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml">arm_compute::graph::frontend::IStream</a></div><div class="ttdoc">Stream interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_stream_8h_source.xhtml#l00042">IStream.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a96b9a9be8e6bc94f1a245d9625c5b596"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a96b9a9be8e6bc94f1a245d9625c5b596">arm_compute::graph::GraphBuilder::add_reshape_node</a></div><div class="ttdeci">static NodeID add_reshape_node(Graph &amp;g, NodeParams params, NodeIdxPair input, TensorShape shape)</div><div class="ttdoc">Adds a reshape layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00655">GraphBuilder.cpp:655</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a6dc61dbaf7ce5612ac8d1566c1c222e3"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6dc61dbaf7ce5612ac8d1566c1c222e3">arm_compute::graph::GraphBuilder::add_priorbox_node</a></div><div class="ttdeci">static NodeID add_priorbox_node(Graph &amp;g, NodeParams params, NodeIdxPair input0, NodeIdxPair input1, const PriorBoxLayerInfo &amp;prior_info)</div><div class="ttdoc">Adds a priorbox layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00625">GraphBuilder.cpp:625</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ScaleLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01284">Layers.h:1284</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a667742f5b5d3574fb50c8180609efac4"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a667742f5b5d3574fb50c8180609efac4">arm_compute::graph::GraphBuilder::add_concatenate_node</a></div><div class="ttdeci">static NodeID add_concatenate_node(Graph &amp;g, NodeParams params, const std::vector&lt; NodeIdxPair &gt; &amp;inputs, const descriptors::ConcatLayerDescriptor &amp;concat_descriptor)</div><div class="ttdoc">Adds a depth concatenate node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00327">GraphBuilder.cpp:327</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a8965f4ef424a3b9142706cfe50b7e6cf"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a8965f4ef424a3b9142706cfe50b7e6cf">arm_compute::graph::GraphBuilder::add_generate_proposals_node</a></div><div class="ttdeci">static NodeID add_generate_proposals_node(Graph &amp;g, NodeParams params, NodeIdxPair scores, NodeIdxPair deltas, NodeIdxPair anchors, GenerateProposalsInfo info)</div><div class="ttdoc">Adds a generate proposals layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00539">GraphBuilder.cpp:539</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a819d4ebfd6c79e430f7dc0a5e5241203"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a819d4ebfd6c79e430f7dc0a5e5241203">arm_compute::graph::GraphBuilder::add_slice_node</a></div><div class="ttdeci">static NodeID add_slice_node(Graph &amp;g, NodeParams params, NodeIdxPair input, Coordinates &amp;starts, Coordinates &amp;ends)</div><div class="ttdoc">Adds a slice node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00715">GraphBuilder.cpp:715</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a1735fd3d9b774a2c92ca1619886d2ede"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a1735fd3d9b774a2c92ca1619886d2ede">arm_compute::graph::GraphBuilder::add_deconvolution_node</a></div><div class="ttdeci">static NodeID add_deconvolution_node(Graph &amp;g, NodeParams params, NodeIdxPair input, Size2D kernel_spatial_extend, unsigned int depth, PadStrideInfo deconv_info, ITensorAccessorUPtr weights_accessor=nullptr, ITensorAccessorUPtr bias_accessor=nullptr)</div><div class="ttdoc">Adds a deconvolution layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00276">GraphBuilder.cpp:276</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml">arm_compute::graph::frontend::QuantizationLayer</a></div><div class="ttdoc">Quantization Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01113">Layers.h:1113</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::DequantizationLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00570">Layers.h:570</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::PoolingLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00989">Layers.h:989</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_afbb302ca2e2f509f976568ba0928c2ce"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#afbb302ca2e2f509f976568ba0928c2ce">arm_compute::graph::GraphBuilder::add_convolution_node</a></div><div class="ttdeci">static NodeID add_convolution_node(Graph &amp;g, NodeParams params, NodeIdxPair input, Size2D kernel_spatial_extend, unsigned int depth, PadStrideInfo conv_info, unsigned int num_groups=1, ConvolutionMethod method=ConvolutionMethod::Default, FastMathHint fast_math_hint=FastMathHint::Disabled, ITensorAccessorUPtr weights_accessor=nullptr, ITensorAccessorUPtr bias_accessor=nullptr, const QuantizationInfo &amp;weights_quant_info=QuantizationInfo(), const QuantizationInfo &amp;out_quant_info=QuantizationInfo())</div><div class="ttdoc">Adds a convolution layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00219">GraphBuilder.cpp:219</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ae80e3bef3b70c6b443b7e42e68397a5c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae80e3bef3b70c6b443b7e42e68397a5c">arm_compute::graph::GraphBuilder::add_depth_to_space_node</a></div><div class="ttdeci">static NodeID add_depth_to_space_node(Graph &amp;g, NodeParams params, NodeIdxPair input, int32_t block_shape)</div><div class="ttdoc">Adds an depth to space layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00386">GraphBuilder.cpp:386</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer_xhtml_a967453c6b06e1604672f4c719f5d1d77"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml#a967453c6b06e1604672f4c719f5d1d77">arm_compute::graph::frontend::FullyConnectedLayer::FullyConnectedLayer</a></div><div class="ttdeci">FullyConnectedLayer(unsigned int num_outputs, SubStream sub_stream_weights, SubStream sub_stream_bias, const FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo(), const QuantizationInfo weights_quant_info=QuantizationInfo(), const QuantizationInfo out_quant_info=QuantizationInfo())</div><div class="ttdoc">Construct a fully connected layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00748">Layers.h:748</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::SoftmaxLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01335">Layers.h:1335</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer_xhtml_a7bb7a05b224ccc08e9a749d2a91aa22c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml#a7bb7a05b224ccc08e9a749d2a91aa22c">arm_compute::graph::frontend::DepthToSpaceLayer::DepthToSpaceLayer</a></div><div class="ttdeci">DepthToSpaceLayer(int32_t block_shape)</div><div class="ttdoc">Construct an DepthToSpace layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00543">Layers.h:543</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer_xhtml_a198fc3f27d247211a87832d4e74d4a70"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a198fc3f27d247211a87832d4e74d4a70">arm_compute::graph::frontend::StackLayer::StackLayer</a></div><div class="ttdeci">StackLayer(SubStream &amp;&amp;sub_stream)</div><div class="ttdoc">Construct a concat layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01394">Layers.h:1394</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_aff2fa3e8e802bcefd6fdd5780aa096e1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aff2fa3e8e802bcefd6fdd5780aa096e1">arm_compute::graph::GraphBuilder::add_detection_output_node</a></div><div class="ttdeci">static NodeID add_detection_output_node(Graph &amp;g, NodeParams params, NodeIdxPair input_loc, NodeIdxPair input_conf, NodeIdxPair input_priorbox, const DetectionOutputLayerInfo &amp;detect_info)</div><div class="ttdoc">Adds a detection output layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00396">GraphBuilder.cpp:396</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ac6ee8c6a5e3b98c697aacf55a251c986"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac6ee8c6a5e3b98c697aacf55a251c986">arm_compute::graph::GraphBuilder::add_pad_node</a></div><div class="ttdeci">static NodeID add_pad_node(Graph &amp;g, NodeParams params, NodeIdxPair input, const PaddingList &amp;paddings, PixelValue pad_value=PixelValue())</div><div class="ttdoc">Adds a pad layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00591">GraphBuilder.cpp:591</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::FlattenLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00701">Layers.h:701</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_quantization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::QuantizationLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01125">Layers.h:1125</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer_xhtml_a85ae01d4be6283bbfcbdc574d75ec528"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_dequantization_layer.xhtml#a85ae01d4be6283bbfcbdc574d75ec528">arm_compute::graph::frontend::DequantizationLayer::DequantizationLayer</a></div><div class="ttdeci">DequantizationLayer()</div><div class="ttdoc">Construct a dequantization layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00566">Layers.h:566</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::NormalizationLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00880">Layers.h:880</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_input_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml">arm_compute::graph::frontend::InputLayer</a></div><div class="ttdoc">Input Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00045">Layers.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml">arm_compute::graph::frontend::YOLOLayer</a></div><div class="ttdoc">YOLO Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01463">Layers.h:1463</a></div></div>
<div class="ttc" id="classarm__compute_1_1_quantization_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml">arm_compute::QuantizationInfo</a></div><div class="ttdoc">Quantization information. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00071">QuantizationInfo.h:71</a></div></div>
<div class="ttc" id="_sub_stream_8h_xhtml"><div class="ttname"><a href="_sub_stream_8h.xhtml">SubStream.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_print_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml">arm_compute::graph::frontend::PrintLayer</a></div><div class="ttdoc">Print Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01029">Layers.h:1029</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a69a669c24a8f0db98f3f980e161ab890"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a69a669c24a8f0db98f3f980e161ab890">arm_compute::graph::GraphBuilder::add_print_node</a></div><div class="ttdeci">static NodeID add_print_node(Graph &amp;g, NodeParams params, NodeIdxPair input, std::ostream &amp;stream, const IOFormatInfo &amp;format_info=IOFormatInfo(), const std::function&lt; ITensor *(ITensor *)&gt; transform=nullptr)</div><div class="ttdoc">Adds a print layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00620">GraphBuilder.cpp:620</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer_xhtml_a4c9b5e28705dc4e1b1b9418fc62bdedc"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml#a4c9b5e28705dc4e1b1b9418fc62bdedc">arm_compute::graph::frontend::DetectionPostProcessLayer::DetectionPostProcessLayer</a></div><div class="ttdeci">DetectionPostProcessLayer(SubStream &amp;&amp;sub_stream_class_prediction, DetectionPostProcessLayerInfo detect_info, ITensorAccessorUPtr anchors, const QuantizationInfo out_quant_info=QuantizationInfo())</div><div class="ttdoc">Construct a detection output layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00618">Layers.h:618</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml">arm_compute::graph::frontend::ChannelShuffleLayer</a></div><div class="ttdoc">Channel Shuffle Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00266">Layers.h:266</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ae0a382c6800d4ebe51ba9ced8841e2b5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae0a382c6800d4ebe51ba9ced8841e2b5">arm_compute::graph::GraphBuilder::add_stack_node</a></div><div class="ttdeci">static NodeID add_stack_node(Graph &amp;g, NodeParams params, const std::vector&lt; NodeIdxPair &gt; &amp;inputs, int axis)</div><div class="ttdoc">Adds a stack layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00730">GraphBuilder.cpp:730</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer_xhtml_a6c69d519202fb0b1ee7f521e7fb6e7a1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml#a6c69d519202fb0b1ee7f521e7fb6e7a1">arm_compute::graph::frontend::PriorBoxLayer::PriorBoxLayer</a></div><div class="ttdeci">PriorBoxLayer(SubStream &amp;&amp;sub_stream, const PriorBoxLayerInfo &amp;prior_info)</div><div class="ttdoc">Construct a priorbox layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01094">Layers.h:1094</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer_xhtml_a4e534985818ce7c5560abc0c6a99e021"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#a4e534985818ce7c5560abc0c6a99e021">arm_compute::graph::frontend::StackLayer::StackLayer</a></div><div class="ttdeci">StackLayer(SubStream &amp;&amp;sub_stream1, SubStream &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="ttdoc">Construct a concatenation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01357">Layers.h:1357</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_output_layer_xhtml_ac58e97b2c1974176b7ebaf5fe9fcacd0"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml#ac58e97b2c1974176b7ebaf5fe9fcacd0">arm_compute::graph::frontend::OutputLayer::OutputLayer</a></div><div class="ttdeci">OutputLayer(ITensorAccessorUPtr accessor, unsigned int connection_idx=0)</div><div class="ttdoc">Construct an output layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00103">Layers.h:103</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer_xhtml_acd6b9eda0fe89026e79b4fb228f09f2a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml#acd6b9eda0fe89026e79b4fb228f09f2a">arm_compute::graph::frontend::ReductionLayer::ReductionLayer</a></div><div class="ttdeci">ReductionLayer(ReductionOperation op, unsigned int axis, bool keep_dims)</div><div class="ttdoc">Construct a reduction layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01146">Layers.h:1146</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_print_layer_xhtml_ab7f3a2ee3028c0cc794bdd4c8d55a6be"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml#ab7f3a2ee3028c0cc794bdd4c8d55a6be">arm_compute::graph::frontend::PrintLayer::PrintLayer</a></div><div class="ttdeci">PrintLayer(std::ostream &amp;stream, const IOFormatInfo &amp;format_info=IOFormatInfo(), const std::function&lt; ITensor *(ITensor *)&gt; transform=nullptr)</div><div class="ttdoc">Construct a print layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01067">Layers.h:1067</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a193c384a821bc30573b13975eccbe58a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a193c384a821bc30573b13975eccbe58a">arm_compute::graph::GraphBuilder::add_elementwise_node</a></div><div class="ttdeci">static NodeID add_elementwise_node(Graph &amp;g, NodeParams params, NodeIdxPair input0, NodeIdxPair input1, EltwiseOperation operation)</div><div class="ttdoc">Adds an element-wise layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00448">GraphBuilder.cpp:448</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::DeconvolutionLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00462">Layers.h:462</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml">arm_compute::graph::frontend::DetectionPostProcessLayer</a></div><div class="ttdoc">DetectionOutputPostProcess Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00608">Layers.h:608</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ROIAlignLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01255">Layers.h:1255</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer_xhtml_a6c61e8c3eb59a3587817a7250b0bb6ac"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml#a6c61e8c3eb59a3587817a7250b0bb6ac">arm_compute::graph::frontend::NormalizePlanarYUVLayer::NormalizePlanarYUVLayer</a></div><div class="ttdeci">NormalizePlanarYUVLayer(ITensorAccessorUPtr mean, ITensorAccessorUPtr std)</div><div class="ttdoc">Construct a normalize planar YUV layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00900">Layers.h:900</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer_xhtml_a782c91273f38cdd9e5740282368c197a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#a782c91273f38cdd9e5740282368c197a">arm_compute::graph::frontend::ActivationLayer::ActivationLayer</a></div><div class="ttdeci">ActivationLayer(ActivationLayerInfo act_info, const QuantizationInfo out_quant_info=QuantizationInfo())</div><div class="ttdoc">Construct an activation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00129">Layers.h:129</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::PadLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00937">Layers.h:937</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_stream_xhtml_a110fbabe5b6b600f0f5b1fec06ab1484"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a110fbabe5b6b600f0f5b1fec06ab1484">arm_compute::graph::frontend::IStream::tail_node</a></div><div class="ttdeci">NodeID tail_node()</div><div class="ttdoc">Returns the tail node of the Stream. </div><div class="ttdef"><b>Definition:</b> <a href="_i_stream_8h_source.xhtml#l00065">IStream.h:65</a></div></div>
<div class="ttc" id="structarm__compute_1_1_i_o_format_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_i_o_format_info.xhtml">arm_compute::IOFormatInfo</a></div><div class="ttdoc">IO formatting information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02660">Types.h:2660</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer_xhtml_abd50a915acafa4ed21f755d911f9b155"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml#abd50a915acafa4ed21f755d911f9b155">arm_compute::graph::frontend::ScaleLayer::ScaleLayer</a></div><div class="ttdeci">ScaleLayer(ITensorAccessorUPtr mul_w, ITensorAccessorUPtr add_w)</div><div class="ttdoc">Construct a scale layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01278">Layers.h:1278</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a9d0c83a96ca66565407885ff41214665"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9d0c83a96ca66565407885ff41214665">arm_compute::graph::GraphBuilder::add_reorg_node</a></div><div class="ttdeci">static NodeID add_reorg_node(Graph &amp;g, NodeParams params, NodeIdxPair input, int stride)</div><div class="ttdoc">Adds a reorg layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00650">GraphBuilder.cpp:650</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml">arm_compute::graph::frontend::PReluLayer</a></div><div class="ttdoc">PRelu Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01001">Layers.h:1001</a></div></div>
<div class="ttc" id="_i_stream_8h_xhtml"><div class="ttname"><a href="_i_stream_8h.xhtml">IStream.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml">arm_compute::graph::frontend::ResizeLayer</a></div><div class="ttdoc">Resize Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01214">Layers.h:1214</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ArgMinMaxLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00176">Layers.h:176</a></div></div>
<div class="ttc" id="classarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item. </div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml">arm_compute::graph::frontend::DummyLayer</a></div><div class="ttdoc">Dummy Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00641">Layers.h:641</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ChannelShuffleLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00278">Layers.h:278</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ResizeLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01222">Layers.h:1222</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer_xhtml_a98c30ba91fe106a656f931077135fa1e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml#a98c30ba91fe106a656f931077135fa1e">arm_compute::graph::frontend::DeconvolutionLayer::DeconvolutionLayer</a></div><div class="ttdeci">DeconvolutionLayer(unsigned int conv_width, unsigned int conv_height, unsigned int ofm, ITensorAccessorUPtr weights, ITensorAccessorUPtr bias, PadStrideInfo deconv_info)</div><div class="ttdoc">Construct a convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00447">Layers.h:447</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_scale_layer.xhtml">arm_compute::graph::frontend::ScaleLayer</a></div><div class="ttdoc">Scale Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01270">Layers.h:1270</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_aeeebbfe02ab3fe0320a82d6c3413eeeb"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aeeebbfe02ab3fe0320a82d6c3413eeeb">arm_compute::graph::GraphBuilder::add_roi_align_node</a></div><div class="ttdeci">static NodeID add_roi_align_node(Graph &amp;g, NodeParams params, NodeIdxPair input, NodeIdxPair rois, ROIPoolingLayerInfo pool_info)</div><div class="ttdoc">Adds a ROI align layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00666">GraphBuilder.cpp:666</a></div></div>
<div class="ttc" id="classarm__compute_1_1_prior_box_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_prior_box_layer_info.xhtml">arm_compute::PriorBoxLayerInfo</a></div><div class="ttdoc">PriorBox layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00827">Types.h:827</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a6bf51d4ae4adaffc5511b756d27ae069"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6bf51d4ae4adaffc5511b756d27ae069">arm_compute::graph::GraphBuilder::add_l2_normalize_node</a></div><div class="ttdeci">static NodeID add_l2_normalize_node(Graph &amp;g, NodeParams params, NodeIdxPair input, int axis, float epsilon)</div><div class="ttdoc">Adds a L2 Normalize layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00555">GraphBuilder.cpp:555</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_input_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_input_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::InputLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00058">Layers.h:58</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer_xhtml_a3a157200f2d59f07ad6acb50423d6d28"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a3a157200f2d59f07ad6acb50423d6d28">arm_compute::graph::frontend::ConcatLayer::ConcatLayer</a></div><div class="ttdeci">ConcatLayer(SubStream &amp;&amp;sub_stream)</div><div class="ttdoc">Construct a concat layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00337">Layers.h:337</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer_xhtml_a4e2c31270f39a2f4cca9e42850dafc3d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml#a4e2c31270f39a2f4cca9e42850dafc3d">arm_compute::graph::frontend::ConcatLayer::ConcatLayer</a></div><div class="ttdeci">ConcatLayer(descriptors::ConcatLayerDescriptor concat_descriptor, SubStream &amp;&amp;sub_stream1, SubStream &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="ttdoc">Construct a concatenation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00320">Layers.h:320</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdoc">channel </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml">arm_compute::graph::frontend::ActivationLayer</a></div><div class="ttdoc">Activation Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00121">Layers.h:121</a></div></div>
<div class="ttc" id="classarm__compute_1_1_bounding_box_transform_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_bounding_box_transform_info.xhtml">arm_compute::BoundingBoxTransformInfo</a></div><div class="ttdoc">Bounding Box Transform information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01592">Types.h:1592</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer_xhtml_a5a6d29d97205186313cf48823a2dce8a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml#a5a6d29d97205186313cf48823a2dce8a">arm_compute::graph::frontend::BatchNormalizationLayer::BatchNormalizationLayer</a></div><div class="ttdeci">BatchNormalizationLayer(ITensorAccessorUPtr mean, ITensorAccessorUPtr var, ITensorAccessorUPtr gamma=nullptr, ITensorAccessorUPtr beta=nullptr, float epsilon=0.001f)</div><div class="ttdoc">Construct a batch normalization layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00202">Layers.h:202</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_bounding_box_transform_layer.xhtml">arm_compute::graph::frontend::BoundingBoxTransformLayer</a></div><div class="ttdoc">Bounding Box Transform Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00231">Layers.h:231</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_print_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_print_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::PrintLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01072">Layers.h:1072</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a3484452057c88a68b9242816b50a0687"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3484452057c88a68b9242816b50a0687">arm_compute::graph::GraphBuilder::add_dummy_node</a></div><div class="ttdeci">static NodeID add_dummy_node(Graph &amp;g, NodeParams params, NodeIdxPair input, TensorShape shape)</div><div class="ttdoc">Adds a Dummy node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00443">GraphBuilder.cpp:443</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a50410fc54c8540887d600849043327d5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a50410fc54c8540887d600849043327d5">arm_compute::graph::GraphBuilder::add_dequantization_node</a></div><div class="ttdeci">static NodeID add_dequantization_node(Graph &amp;g, NodeParams params, NodeIdxPair input)</div><div class="ttdoc">Adds a dequantization node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00391">GraphBuilder.cpp:391</a></div></div>
<div class="ttc" id="classarm__compute_1_1_strided_slice_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strided_slice_layer_info.xhtml">arm_compute::StridedSliceLayerInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01946">Types.h:1946</a></div></div>
<div class="ttc" id="_graph_builder_8h_xhtml"><div class="ttname"><a href="_graph_builder_8h.xhtml">GraphBuilder.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml">arm_compute::graph::frontend::ConvolutionLayer</a></div><div class="ttdoc">Convolution Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00376">Layers.h:376</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1utility_xhtml_a067ebd28103d827b6ec17032e2344064"><div class="ttname"><a href="namespacearm__compute_1_1utility.xhtml#a067ebd28103d827b6ec17032e2344064">arm_compute::utility::for_each</a></div><div class="ttdeci">void for_each(F &amp;&amp;)</div><div class="ttdoc">Base case of for_each. </div><div class="ttdef"><b>Definition:</b> <a href="_utility_8h_source.xhtml#l00111">Utility.h:111</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a2bf294b4d12b6430e4e6b6ba8db8273b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a2bf294b4d12b6430e4e6b6ba8db8273b">arm_compute::graph::GraphBuilder::add_normalize_planar_yuv_node</a></div><div class="ttdeci">static NodeID add_normalize_planar_yuv_node(Graph &amp;g, NodeParams params, NodeIdxPair input, ITensorAccessorUPtr mean_accessor=nullptr, ITensorAccessorUPtr std_accessor=nullptr)</div><div class="ttdoc">Adds a normalize planar YUV layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00565">GraphBuilder.cpp:565</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1_node_idx_pair_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">arm_compute::graph::NodeIdxPair</a></div><div class="ttdoc">NodeID-index struct. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00263">Types.h:263</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer_xhtml_ae10faa4e6be72c6ef51fde8235f0d83f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml#ae10faa4e6be72c6ef51fde8235f0d83f">arm_compute::graph::frontend::StridedSliceLayer::StridedSliceLayer</a></div><div class="ttdeci">StridedSliceLayer(Coordinates &amp;starts, Coordinates &amp;ends, BiStrides &amp;strides, StridedSliceLayerInfo strided_slice_info)</div><div class="ttdoc">Construct a strided slice layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01443">Layers.h:1443</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::DetectionOutputLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00593">Layers.h:593</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a19b8128b8e78988834c00c4e9cd97c3e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a19b8128b8e78988834c00c4e9cd97c3e">arm_compute::graph::GraphBuilder::add_channel_shuffle_node</a></div><div class="ttdeci">static NodeID add_channel_shuffle_node(Graph &amp;g, NodeParams params, NodeIdxPair input, unsigned int num_groups)</div><div class="ttdoc">Adds an channel shuffle layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00214">GraphBuilder.cpp:214</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints_xhtml_abdcfd0552ddabcb92a04396961fb6377"><div class="ttname"><a href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#abdcfd0552ddabcb92a04396961fb6377">arm_compute::graph::frontend::StreamHints::fast_math_hint</a></div><div class="ttdeci">FastMathHint fast_math_hint</div><div class="ttdoc">Fast math hint. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2frontend_2_types_8h_source.xhtml#l00066">Types.h:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml">arm_compute::graph::frontend::StridedSliceLayer</a></div><div class="ttdoc">StridedSlice Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01433">Layers.h:1433</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml">arm_compute::graph::frontend::PriorBoxLayer</a></div><div class="ttdoc">PriorBox Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01086">Layers.h:1086</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_deconvolution_layer.xhtml">arm_compute::graph::frontend::DeconvolutionLayer</a></div><div class="ttdoc">Deconvolution Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00435">Layers.h:435</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="namespacearm__compute.xhtml#a735ac6c2a02e320969625308810444f3a696b031073e74bf2cb98e5ef201d4aa3">arm_compute::GPUTarget::UNKNOWN</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::PermuteLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00964">Layers.h:964</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_output_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_output_layer_info.xhtml">arm_compute::DetectionOutputLayerInfo</a></div><div class="ttdoc">Detection Output layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00964">Types.h:964</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a17fe8b7f4dbd6cf0747ab9d328a56f88"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a17fe8b7f4dbd6cf0747ab9d328a56f88">arm_compute::graph::GraphBuilder::add_detection_post_process_node</a></div><div class="ttdeci">static NodeID add_detection_post_process_node(Graph &amp;g, NodeParams params, NodeIdxPair input_box_encoding, NodeIdxPair input_class_prediction, const DetectionPostProcessLayerInfo &amp;detect_info, ITensorAccessorUPtr anchors_accessor=nullptr, const QuantizationInfo &amp;anchor_quant_info=QuantizationInfo())</div><div class="ttdoc">Adds a detection post process layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00413">GraphBuilder.cpp:413</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00069">Types.h:69</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_af06fa4df1027c97658c0c26570b2bdb5"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af06fa4df1027c97658c0c26570b2bdb5">arm_compute::graph::GraphBuilder::add_softmax_node</a></div><div class="ttdeci">static NodeID add_softmax_node(Graph &amp;g, NodeParams params, NodeIdxPair input, float beta=1.f)</div><div class="ttdoc">Adds a softmax node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00710">GraphBuilder.cpp:710</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer_xhtml_aeea441309ced0e245856a5e70e82b63e"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml#aeea441309ced0e245856a5e70e82b63e">arm_compute::graph::frontend::StackLayer::StackLayer</a></div><div class="ttdeci">StackLayer(int axis, SubStream &amp;&amp;sub_stream1, SubStream &amp;&amp;sub_stream2, Ts &amp;&amp;... rest_sub_streams)</div><div class="ttdoc">Construct a concatenation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01377">Layers.h:1377</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_r_o_i_align_layer.xhtml">arm_compute::graph::frontend::ROIAlignLayer</a></div><div class="ttdoc">ROIAlign Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01236">Layers.h:1236</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer_xhtml_a6de958db405f92c48214eedd8c5a2a7b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_resize_layer.xhtml#a6de958db405f92c48214eedd8c5a2a7b">arm_compute::graph::frontend::ResizeLayer::ResizeLayer</a></div><div class="ttdeci">ResizeLayer(InterpolationPolicy policy, float width_scale, float height_scale)</div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01217">Layers.h:1217</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_stream_xhtml_a2f9edb3a23ff98069aaa52590d53bf5f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a2f9edb3a23ff98069aaa52590d53bf5f">arm_compute::graph::frontend::IStream::graph</a></div><div class="ttdeci">virtual Graph &amp; graph()=0</div><div class="ttdoc">Returns the underlying graph. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_detection_post_process_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::DetectionPostProcessLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00624">Layers.h:624</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_softmax_layer.xhtml">arm_compute::graph::frontend::SoftmaxLayer</a></div><div class="ttdoc">Softmax Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01323">Layers.h:1323</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_stream_xhtml_a75ce23fbe59cc58db22e1b6d072b10c6"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_stream.xhtml#a75ce23fbe59cc58db22e1b6d072b10c6">arm_compute::graph::frontend::IStream::hints</a></div><div class="ttdeci">StreamHints &amp; hints()</div><div class="ttdoc">Returns the stream hints that are currently used. </div><div class="ttdef"><b>Definition:</b> <a href="_i_stream_8h_source.xhtml#l00073">IStream.h:73</a></div></div>
<div class="ttc" id="classarm__compute_1_1_r_o_i_pooling_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">arm_compute::ROIPoolingLayerInfo</a></div><div class="ttdoc">ROI Pooling Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01418">Types.h:1418</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_strided_slice_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::StridedSliceLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01448">Layers.h:1448</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_af8baf1f3da6d42a94d0569395ece882a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#af8baf1f3da6d42a94d0569395ece882a">arm_compute::graph::Graph::node</a></div><div class="ttdeci">const INode * node(NodeID id) const</div><div class="ttdoc">Get node object given its id. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_8cpp_source.xhtml#l00204">Graph.cpp:204</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a7396e101536756a6aaf05f043a6f0b13"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a7396e101536756a6aaf05f043a6f0b13">arm_compute::graph::GraphBuilder::add_scale_layer</a></div><div class="ttdeci">static NodeID add_scale_layer(Graph &amp;g, const NodeParams &amp;params, NodeIdxPair input, ITensorAccessorUPtr mul_accessor=nullptr, ITensorAccessorUPtr add_accessor=nullptr)</div><div class="ttdoc">Adds a scale layer node to the graph This layer computes a product of the input with a scale (read fr...</div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00680">GraphBuilder.cpp:680</a></div></div>
<div class="ttc" id="_i_layer_8h_xhtml"><div class="ttname"><a href="_i_layer_8h.xhtml">ILayer.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer_xhtml_add9af3fe9c394a1994f926a6268260ed"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml#add9af3fe9c394a1994f926a6268260ed">arm_compute::graph::frontend::DetectionOutputLayer::DetectionOutputLayer</a></div><div class="ttdeci">DetectionOutputLayer(SubStream &amp;&amp;sub_stream_conf, SubStream &amp;&amp;sub_stream_prior, const DetectionOutputLayerInfo &amp;detect_info)</div><div class="ttdoc">Construct a detection output layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00588">Layers.h:588</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_output_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml">arm_compute::graph::frontend::OutputLayer</a></div><div class="ttdoc">Output Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00095">Layers.h:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_activation_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ActivationLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00136">Layers.h:136</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_fully_connected_layer.xhtml">arm_compute::graph::frontend::FullyConnectedLayer</a></div><div class="ttdoc">Fully Connected Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00710">Layers.h:710</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_detection_output_layer.xhtml">arm_compute::graph::frontend::DetectionOutputLayer</a></div><div class="ttdoc">DetectionOutput Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00579">Layers.h:579</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_depthwise_convolution_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::DepthwiseConvolutionLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00514">Layers.h:514</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">arm_compute::DetectionPostProcessLayerInfo</a></div><div class="ttdoc">Detection Output layer info. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01083">Types.h:1083</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_stack_layer.xhtml">arm_compute::graph::frontend::StackLayer</a></div><div class="ttdoc">Stack Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01347">Layers.h:1347</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1descriptors_1_1_concat_layer_descriptor_xhtml"><div class="ttname"><a href="structarm__compute_1_1graph_1_1descriptors_1_1_concat_layer_descriptor.xhtml">arm_compute::graph::descriptors::ConcatLayerDescriptor</a></div><div class="ttdoc">Concatenate layer descriptor. </div><div class="ttdef"><b>Definition:</b> <a href="_layer_descriptors_8h_source.xhtml#l00037">LayerDescriptors.h:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::DummyLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00653">Layers.h:653</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer_xhtml_a47a2355ed3b1fb475ed6a424558f7c01"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_pad_layer.xhtml#a47a2355ed3b1fb475ed6a424558f7c01">arm_compute::graph::frontend::PadLayer::PadLayer</a></div><div class="ttdeci">PadLayer(PaddingList padding, PixelValue pad_value=PixelValue())</div><div class="ttdoc">Construct a pad layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00932">Layers.h:932</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_constant_layer.xhtml">arm_compute::graph::frontend::ConstantLayer</a></div><div class="ttdoc">Constant Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00070">Layers.h:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_i_layer_xhtml_ad8227ba86a01f26e4f173cd5e219d5d1"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_i_layer.xhtml#ad8227ba86a01f26e4f173cd5e219d5d1">arm_compute::graph::frontend::ILayer::name</a></div><div class="ttdeci">const std::string &amp; name() const</div><div class="ttdoc">Layer name accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_layer_8h_source.xhtml#l00064">ILayer.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_y_o_l_o_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::YOLOLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01475">Layers.h:1475</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_prior_box_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::PriorBoxLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01099">Layers.h:1099</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::EltwiseLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00678">Layers.h:678</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_batch_normalization_layer.xhtml">arm_compute::graph::frontend::BatchNormalizationLayer</a></div><div class="ttdoc">Batchnormalization Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00191">Layers.h:191</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::L2NormalizeLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00855">Layers.h:855</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_eltwise_layer.xhtml">arm_compute::graph::frontend::EltwiseLayer</a></div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00664">Layers.h:664</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_aa7b1756a674d54d96df4e02a31169082"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aa7b1756a674d54d96df4e02a31169082">arm_compute::graph::GraphBuilder::add_const_node</a></div><div class="ttdeci">static NodeID add_const_node(Graph &amp;g, NodeParams params, const TensorDescriptor &amp;desc, ITensorAccessorUPtr accessor=nullptr)</div><div class="ttdoc">Adds a Const node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00108">GraphBuilder.cpp:108</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a639fab29a682a532ca20615210b366ad"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a639fab29a682a532ca20615210b366ad">arm_compute::graph::GraphBuilder::add_flatten_node</a></div><div class="ttdeci">static NodeID add_flatten_node(Graph &amp;g, NodeParams params, NodeIdxPair input)</div><div class="ttdoc">Adds a flatten layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00463">GraphBuilder.cpp:463</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer_xhtml_a9ad7e9ede84392dee892357377aa1806"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_pooling_layer.xhtml#a9ad7e9ede84392dee892357377aa1806">arm_compute::graph::frontend::PoolingLayer::PoolingLayer</a></div><div class="ttdeci">PoolingLayer(PoolingLayerInfo pool_info)</div><div class="ttdoc">Construct a pooling layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00984">Layers.h:984</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_depth_to_space_layer.xhtml">arm_compute::graph::frontend::DepthToSpaceLayer</a></div><div class="ttdoc">DepthToSpace Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00536">Layers.h:536</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ReorgLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01178">Layers.h:1178</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer_xhtml_a81903abd33b45d02e52594457ccf3a2b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_arg_min_max_layer.xhtml#a81903abd33b45d02e52594457ccf3a2b">arm_compute::graph::frontend::ArgMinMaxLayer::ArgMinMaxLayer</a></div><div class="ttdeci">ArgMinMaxLayer(ReductionOperation op, unsigned int axis, DataType out_data_type=DataType::UNKNOWN, const QuantizationInfo out_quant_info=QuantizationInfo())</div><div class="ttdoc">Construct an activation layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00159">Layers.h:159</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_p_relu_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::PReluLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01014">Layers.h:1014</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ab52fa970654d32e0c0621cf718a6861f"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab52fa970654d32e0c0621cf718a6861f">arm_compute::graph::GraphBuilder::add_pooling_node</a></div><div class="ttdeci">static NodeID add_pooling_node(Graph &amp;g, NodeParams params, NodeIdxPair input, PoolingLayerInfo pool_info)</div><div class="ttdoc">Adds a pooling layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00615">GraphBuilder.cpp:615</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reshape_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ReshapeLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01202">Layers.h:1202</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer_xhtml_a3100240dbc6c19e85608522a8d4c1e98"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml#a3100240dbc6c19e85608522a8d4c1e98">arm_compute::graph::frontend::PermuteLayer::PermuteLayer</a></div><div class="ttdeci">PermuteLayer(PermutationVector perm, DataLayout layout=DataLayout::UNKNOWN)</div><div class="ttdoc">Construct a permute layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00959">Layers.h:959</a></div></div>
<div class="ttc" id="_utility_8h_xhtml"><div class="ttname"><a href="_utility_8h.xhtml">Utility.h</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reduction_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::ReductionLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01151">Layers.h:1151</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_reorg_layer.xhtml">arm_compute::graph::frontend::ReorgLayer</a></div><div class="ttdoc">Reorg Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l01165">Layers.h:1165</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ab37711b90876e57bfcade525e3233c4d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab37711b90876e57bfcade525e3233c4d">arm_compute::graph::GraphBuilder::add_strided_slice_node</a></div><div class="ttdeci">static NodeID add_strided_slice_node(Graph &amp;g, NodeParams params, NodeIdxPair input, Coordinates &amp;starts, Coordinates &amp;ends, BiStrides &amp;strides, StridedSliceLayerInfo info)</div><div class="ttdoc">Adds a strided slice node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00725">GraphBuilder.cpp:725</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_normalize_planar_y_u_v_layer.xhtml">arm_compute::graph::frontend::NormalizePlanarYUVLayer</a></div><div class="ttdoc">Normalize planar YUV Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00892">Layers.h:892</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition] </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00113">Types.h:113</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer_xhtml_a19e3ec9ef1eff753af974d946e85a860"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_generate_proposals_layer.xhtml#a19e3ec9ef1eff753af974d946e85a860">arm_compute::graph::frontend::GenerateProposalsLayer::GenerateProposalsLayer</a></div><div class="ttdeci">GenerateProposalsLayer(SubStream &amp;&amp;ss_scores, SubStream &amp;&amp;ss_deltas, SubStream &amp;&amp;ss_anchors, GenerateProposalsInfo info)</div><div class="ttdoc">Construct a generate proposals layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00814">Layers.h:814</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_flatten_layer.xhtml">arm_compute::graph::frontend::FlattenLayer</a></div><div class="ttdoc">Flatten Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00693">Layers.h:693</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer_xhtml_af896fc13b0eaaafe855f0fbcd65a07de"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_convolution_layer.xhtml#af896fc13b0eaaafe855f0fbcd65a07de">arm_compute::graph::frontend::ConvolutionLayer::ConvolutionLayer</a></div><div class="ttdeci">ConvolutionLayer(unsigned int conv_width, unsigned int conv_height, unsigned int ofm, ITensorAccessorUPtr weights, ITensorAccessorUPtr bias, PadStrideInfo conv_info, unsigned int num_groups=1, const QuantizationInfo weights_quant_info=QuantizationInfo(), const QuantizationInfo out_quant_info=QuantizationInfo())</div><div class="ttdoc">Construct a convolution layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00391">Layers.h:391</a></div></div>
<div class="ttc" id="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints_xhtml_af18f64d6fa79da2fd4fd585bf818b3d2"><div class="ttname"><a href="structarm__compute_1_1graph_1_1frontend_1_1_stream_hints.xhtml#af18f64d6fa79da2fd4fd585bf818b3d2">arm_compute::graph::frontend::StreamHints::convolution_method_hint</a></div><div class="ttdeci">ConvolutionMethod convolution_method_hint</div><div class="ttdoc">Convolution method hint. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2frontend_2_types_8h_source.xhtml#l00064">Types.h:64</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer_xhtml_aff5aec1faefad58676969dcb1f5b7b5b"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_channel_shuffle_layer.xhtml#aff5aec1faefad58676969dcb1f5b7b5b">arm_compute::graph::frontend::ChannelShuffleLayer::ChannelShuffleLayer</a></div><div class="ttdeci">ChannelShuffleLayer(unsigned int num_groups)</div><div class="ttdoc">Construct a Channel Shuffle layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00273">Layers.h:273</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer_xhtml_a3ec4fedf20ceaf0c7bc62be065150f40"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_dummy_layer.xhtml#a3ec4fedf20ceaf0c7bc62be065150f40">arm_compute::graph::frontend::DummyLayer::DummyLayer</a></div><div class="ttdeci">DummyLayer(TensorShape shape)</div><div class="ttdoc">Construct a dummy layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00648">Layers.h:648</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_ac663bef61cee6df859e8a441a9fa9c0d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac663bef61cee6df859e8a441a9fa9c0d">arm_compute::graph::GraphBuilder::add_arg_min_max_node</a></div><div class="ttdeci">static NodeID add_arg_min_max_node(Graph &amp;g, NodeParams params, NodeIdxPair input, ReductionOperation op, unsigned int axis, DataType out_data_type=DataType::UNKNOWN, const QuantizationInfo &amp;out_quant_info=QuantizationInfo())</div><div class="ttdoc">Adds an activation layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00142">GraphBuilder.cpp:142</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a0db6223a8a4c44a263fbc5e9ec039e18"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db6223a8a4c44a263fbc5e9ec039e18">arm_compute::graph::GraphBuilder::add_output_node</a></div><div class="ttdeci">static NodeID add_output_node(Graph &amp;g, NodeParams params, NodeIdxPair input, ITensorAccessorUPtr accessor=nullptr)</div><div class="ttdoc">Adds an output layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00124">GraphBuilder.cpp:124</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_concat_layer.xhtml">arm_compute::graph::frontend::ConcatLayer</a></div><div class="ttdoc">Concat Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00290">Layers.h:290</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_builder_xhtml_a9c59d071c7e6c2574e1d5587ba50949c"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9c59d071c7e6c2574e1d5587ba50949c">arm_compute::graph::GraphBuilder::add_depthwise_convolution_node</a></div><div class="ttdeci">static NodeID add_depthwise_convolution_node(Graph &amp;g, NodeParams params, NodeIdxPair input, Size2D kernel_spatial_extend, PadStrideInfo conv_info, int depth_multiplier=1, DepthwiseConvolutionMethod method=DepthwiseConvolutionMethod::Default, ITensorAccessorUPtr weights_accessor=nullptr, ITensorAccessorUPtr bias_accessor=nullptr, const QuantizationInfo &amp;quant_info=QuantizationInfo(), const QuantizationInfo &amp;out_quant_info=QuantizationInfo())</div><div class="ttdoc">Adds a depth-wise convolution layer node to the graph. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00332">GraphBuilder.cpp:332</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_l2_normalize_layer.xhtml">arm_compute::graph::frontend::L2NormalizeLayer</a></div><div class="ttdoc">L2 Normalize Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00842">Layers.h:842</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00038">AsymmHelpers.cpp:38</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_output_layer_xhtml_a225fb162b43cbef27d5a1dbd7a51c60d"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_output_layer.xhtml#a225fb162b43cbef27d5a1dbd7a51c60d">arm_compute::graph::frontend::OutputLayer::create_layer</a></div><div class="ttdeci">NodeID create_layer(IStream &amp;s) override</div><div class="ttdoc">Create layer and add to the given stream. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00108">Layers.h:108</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer_xhtml_ada275ffd82f624b62bdbc2f01349fe33"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_normalization_layer.xhtml#ada275ffd82f624b62bdbc2f01349fe33">arm_compute::graph::frontend::NormalizationLayer::NormalizationLayer</a></div><div class="ttdeci">NormalizationLayer(NormalizationLayerInfo norm_info)</div><div class="ttdoc">Construct a normalization layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00875">Layers.h:875</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#acac9cbaeea226ed297804c012dc12b16a29c2c02a361c9d7028472e5d92cd4a54">arm_compute::graph::NodeType::Output</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1frontend_1_1_permute_layer.xhtml">arm_compute::graph::frontend::PermuteLayer</a></div><div class="ttdoc">Permute Layer. </div><div class="ttdef"><b>Definition:</b> <a href="_layers_8h_source.xhtml#l00950">Layers.h:950</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_214608ef36d61442cb2b0c1c4e9a7def.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="dir_99ae3712d1eecd2a93fc4d38b59a99ba.xhtml">graph</a></li><li class="navelem"><a class="el" href="dir_7526be4d1cfecb7bc660fdbdb8633223.xhtml">frontend</a></li><li class="navelem"><a class="el" href="_layers_8h.xhtml">Layers.h</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:23 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
