<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_compute::support::cpp11 Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('namespacearm__compute_1_1support_1_1cpp11.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_compute::support::cpp11 Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:aebc1ea57c14482b68dac0c0dab766126"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a> { <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>, 
<a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a>
 }</td></tr>
<tr class="separator:aebc1ea57c14482b68dac0c0dab766126"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abdba606a789b8d664774f17d18f45cfe"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#abdba606a789b8d664774f17d18f45cfe">stoi</a> (const std::string &amp;str, std::size_t *pos=0, <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a> base=<a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a>)</td></tr>
<tr class="memdesc:abdba606a789b8d664774f17d18f45cfe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to integer.  <a href="#abdba606a789b8d664774f17d18f45cfe">More...</a><br /></td></tr>
<tr class="separator:abdba606a789b8d664774f17d18f45cfe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae7b85c41ac94d98f07b1cef18b33d2d1">stoul</a> (const std::string &amp;str, std::size_t *pos=0, <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a> base=<a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a>)</td></tr>
<tr class="memdesc:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to unsigned long.  <a href="#ae7b85c41ac94d98f07b1cef18b33d2d1">More...</a><br /></td></tr>
<tr class="separator:ae7b85c41ac94d98f07b1cef18b33d2d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#acc5dddee1cbe93a4eaf0a9f74ee96bb7">to_string</a> (T &amp;&amp;value)</td></tr>
<tr class="memdesc:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert integer and float values to string.  <a href="#acc5dddee1cbe93a4eaf0a9f74ee96bb7">More...</a><br /></td></tr>
<tr class="separator:acc5dddee1cbe93a4eaf0a9f74ee96bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77af73f4abd7eeca01501fa3828f725a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a77af73f4abd7eeca01501fa3828f725a">to_string</a> (const std::string &amp;value)</td></tr>
<tr class="separator:a77af73f4abd7eeca01501fa3828f725a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">stof</a> (Ts &amp;&amp;... args)</td></tr>
<tr class="memdesc:a1df10cffb9f2dea9f3b007ce411e105f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert string values to float.  <a href="#a1df10cffb9f2dea9f3b007ce411e105f">More...</a><br /></td></tr>
<tr class="separator:a1df10cffb9f2dea9f3b007ce411e105f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae1437f4a38c4ada64e7a2586aa35bf8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">to_string</a> (bool value)</td></tr>
<tr class="separator:aae1437f4a38c4ada64e7a2586aa35bf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">nearbyint</a> (T value)</td></tr>
<tr class="memdesc:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds the floating-point argument arg to an integer value in floating-point format, using the current rounding mode.  <a href="#ac26a2b6f5d8e0c60e67684eea7e71e7c">More...</a><br /></td></tr>
<tr class="separator:ac26a2b6f5d8e0c60e67684eea7e71e7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab71c35ca207b916a9f8b0336ab88484e"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ab71c35ca207b916a9f8b0336ab88484e"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ab71c35ca207b916a9f8b0336ab88484e">round</a> (T value)</td></tr>
<tr class="memdesc:ab71c35ca207b916a9f8b0336ab88484e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding away from zero.  <a href="#ab71c35ca207b916a9f8b0336ab88484e">More...</a><br /></td></tr>
<tr class="separator:ab71c35ca207b916a9f8b0336ab88484e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a452ce01d9794d6b04de3699ddbf4d2d0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a452ce01d9794d6b04de3699ddbf4d2d0"><td class="memTemplItemLeft" align="right" valign="top">long&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">lround</a> (T value)</td></tr>
<tr class="memdesc:a452ce01d9794d6b04de3699ddbf4d2d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Round floating-point value with half value rounding away from zero and cast to long.  <a href="#a452ce01d9794d6b04de3699ddbf4d2d0">More...</a><br /></td></tr>
<tr class="separator:a452ce01d9794d6b04de3699ddbf4d2d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">trunc</a> (T value)</td></tr>
<tr class="memdesc:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncate floating-point value.  <a href="#ae04d407202e3d50ce6a4c79ac00a5d59">More...</a><br /></td></tr>
<tr class="separator:ae04d407202e3d50ce6a4c79ac00a5d59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28096f8372c0ad762864c790917375e2"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a28096f8372c0ad762864c790917375e2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">copysign</a> (T x, T y)</td></tr>
<tr class="memdesc:a28096f8372c0ad762864c790917375e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>.  <a href="#a28096f8372c0ad762864c790917375e2">More...</a><br /></td></tr>
<tr class="separator:a28096f8372c0ad762864c790917375e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if &lt; std::is_floating_point&lt;T&gt;::value                                                             &gt;::type&gt; </td></tr>
<tr class="memitem:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">fma</a> (T x, T y, T z)</td></tr>
<tr class="memdesc:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type.  <a href="#af399bedeaeb8dc177d3a301a12c3a5d0">More...</a><br /></td></tr>
<tr class="separator:af399bedeaeb8dc177d3a301a12c3a5d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9429515817425d10f4b662eaa069cc5c"><td class="memTemplParams" colspan="2">template&lt;typename... Ts&gt; </td></tr>
<tr class="memitem:a9429515817425d10f4b662eaa069cc5c"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">snprintf</a> (char *s, std::size_t n, const char *fmt, Ts &amp;&amp;... args)</td></tr>
<tr class="memdesc:a9429515817425d10f4b662eaa069cc5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads the data from the given location, converts them to character string equivalents and writes the result to a character string buffer.  <a href="#a9429515817425d10f4b662eaa069cc5c">More...</a><br /></td></tr>
<tr class="separator:a9429515817425d10f4b662eaa069cc5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73e352c61baaf9c1178da2d30105b04e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a73e352c61baaf9c1178da2d30105b04e"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">lowest</a> ()</td></tr>
<tr class="separator:a73e352c61baaf9c1178da2d30105b04e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8815268f0752170d4eaf12a01b8a0c1"><td class="memTemplParams" colspan="2">template&lt;&gt; </td></tr>
<tr class="memitem:af8815268f0752170d4eaf12a01b8a0c1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af8815268f0752170d4eaf12a01b8a0c1">lowest&lt; bfloat16 &gt;</a> ()</td></tr>
<tr class="separator:af8815268f0752170d4eaf12a01b8a0c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a079a0ecb5fc05e0a107785f2573bc854"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:a079a0ecb5fc05e0a107785f2573bc854"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a079a0ecb5fc05e0a107785f2573bc854">isfinite</a> (T value)</td></tr>
<tr class="separator:a079a0ecb5fc05e0a107785f2573bc854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">isfinite</a> (half_float::half value)</td></tr>
<tr class="separator:a81dc1c64fed4ed4e9e4f4bf32cb8ba46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa083cf6d242fe8364e718052a00dd074"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa083cf6d242fe8364e718052a00dd074">isfinite</a> (<a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a> value)</td></tr>
<tr class="separator:aa083cf6d242fe8364e718052a00dd074"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae77474c2a053d0a9a019efd154a49893"><td class="memTemplParams" colspan="2">template&lt;typename T , typename  = typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type&gt; </td></tr>
<tr class="memitem:ae77474c2a053d0a9a019efd154a49893"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae77474c2a053d0a9a019efd154a49893">signbit</a> (T value)</td></tr>
<tr class="separator:ae77474c2a053d0a9a019efd154a49893"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6e04db7aaa0e4ef3af43f087198acb4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae6e04db7aaa0e4ef3af43f087198acb4">signbit</a> (half_float::half value)</td></tr>
<tr class="separator:ae6e04db7aaa0e4ef3af43f087198acb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1741c0583417fa946a59dac059a8e3d9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1741c0583417fa946a59dac059a8e3d9">signbit</a> (<a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a> value)</td></tr>
<tr class="separator:a1741c0583417fa946a59dac059a8e3d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="aebc1ea57c14482b68dac0c0dab766126"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebc1ea57c14482b68dac0c0dab766126">&#9670;&nbsp;</a></span>NumericBase</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa"></a>BASE_10&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af"></a>BASE_16&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="_string_support_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_string_support_8h_source.xhtml">StringSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;};</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">arm_compute::support::cpp11::NumericBase::BASE_16</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">arm_compute::support::cpp11::NumericBase::BASE_10</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a28096f8372c0ad762864c790917375e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28096f8372c0ad762864c790917375e2">&#9670;&nbsp;</a></span>copysign()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::copysign </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Composes a floating point value with the magnitude of <code>x</code> and the sign of <code>y</code>. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::copysign except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>value that contains the magnitude to be used in constructing the result. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>value that contains the sign to be used in construct in the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value with magnitude of <code>x</code> and sign of <code>y</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00231">231</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="tests_2_utils_8h_source.xhtml#l00082">arm_compute::test::round_half_even()</a>, and <a class="el" href="support_2_rounding_8h_source.xhtml#l00150">arm_compute::utils::rounding::round_half_even()</a>.</p>
<div class="fragment"><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">std::copysign</a>(x, y);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a28096f8372c0ad762864c790917375e2"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a28096f8372c0ad762864c790917375e2">arm_compute::support::cpp11::copysign</a></div><div class="ttdeci">T copysign(T x, T y)</div><div class="ttdoc">Composes a floating point value with the magnitude of x and the sign of y. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00231">ToolchainSupport.h:231</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af399bedeaeb8dc177d3a301a12c3a5d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af399bedeaeb8dc177d3a301a12c3a5d0">&#9670;&nbsp;</a></span>fma()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::fma </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::fma except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>floating-point value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>floating-point value </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">z</td><td>floating-point value</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Result floating point value equal to (x*y) + z. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00252">252</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;{</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">std::fma</a>(x, y, z);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_af399bedeaeb8dc177d3a301a12c3a5d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#af399bedeaeb8dc177d3a301a12c3a5d0">arm_compute::support::cpp11::fma</a></div><div class="ttdeci">T fma(T x, T y, T z)</div><div class="ttdoc">Computes (x*y) + z as if to infinite precision and rounded only once to fit the result type...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00252">ToolchainSupport.h:252</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a079a0ecb5fc05e0a107785f2573bc854"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a079a0ecb5fc05e0a107785f2573bc854">&#9670;&nbsp;</a></span>isfinite() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::isfinite </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00298">298</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00308">isfinite()</a>.</p>
<div class="fragment"><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;{</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa083cf6d242fe8364e718052a00dd074">std::isfinite</a>(static_cast&lt;double&gt;(value));</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aa083cf6d242fe8364e718052a00dd074"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa083cf6d242fe8364e718052a00dd074">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(bfloat16 value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00308">ToolchainSupport.h:308</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a81dc1c64fed4ed4e9e4f4bf32cb8ba46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81dc1c64fed4ed4e9e4f4bf32cb8ba46">&#9670;&nbsp;</a></span>isfinite() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::isfinite </td>
          <td>(</td>
          <td class="paramtype">half_float::half&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00303">303</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00308">isfinite()</a>.</p>
<div class="fragment"><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa083cf6d242fe8364e718052a00dd074">half_float::isfinite</a>(value);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aa083cf6d242fe8364e718052a00dd074"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa083cf6d242fe8364e718052a00dd074">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(bfloat16 value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00308">ToolchainSupport.h:308</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa083cf6d242fe8364e718052a00dd074"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa083cf6d242fe8364e718052a00dd074">&#9670;&nbsp;</a></span>isfinite() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::isfinite </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a>&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00308">308</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="_toolchain_support_8h_source.xhtml#l00298">isfinite()</a>.</p>
<div class="fragment"><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;{</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa083cf6d242fe8364e718052a00dd074">std::isfinite</a>(<span class="keywordtype">float</span>(value));</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aa083cf6d242fe8364e718052a00dd074"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aa083cf6d242fe8364e718052a00dd074">arm_compute::support::cpp11::isfinite</a></div><div class="ttdeci">bool isfinite(bfloat16 value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00308">ToolchainSupport.h:308</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a73e352c61baaf9c1178da2d30105b04e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73e352c61baaf9c1178da2d30105b04e">&#9670;&nbsp;</a></span>lowest()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::lowest </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00277">277</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="tensor__transform_8cpp_source.xhtml#l00072">arm_compute::helpers::tensor_transform::calculate_end_on_index()</a>, <a class="el" href="tensor__transform_8cpp_source.xhtml#l00039">arm_compute::helpers::tensor_transform::calculate_start_on_index()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01161">arm_compute::check_value_range()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00099">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00096">ClPool3dKernel::configure()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00214">NEQLSTMLayer::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00172">CLQLSTMLayer::configure()</a>, <a class="el" href="_convolution3d_8h_source.xhtml#l00049">arm_compute::test::convolution_3d::detail::convolution3d()</a>, <a class="el" href="pooling__depthfirst__cache__oblivious_8hpp_source.xhtml#l00121">PoolingDepthfirstCacheOblivious&lt; strategy &gt;::execute()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00721">AssetsLibrary::fill_tensor_uniform()</a>, <a class="el" href="_assets_library_8h_source.xhtml#l00818">AssetsLibrary::fill_tensor_uniform_ranged()</a>, <a class="el" href="cpu_2kernels_2pool2d_2neon_2list_8h_source.xhtml#l00062">arm_compute::cpu::get_initial_min()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00564">arm_compute::get_min_max()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00379">ClTemplatePool2d::get_tag_lut()</a>, <a class="el" href="reference_2_pooling_layer_8cpp_source.xhtml#l00041">arm_compute::test::validation::reference::pooling_layer_internal()</a>, <a class="el" href="_saturate_cast_8h_source.xhtml#l00072">arm_compute::utils::cast::saturate_cast()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00313">arm_compute::test::saturate_cast()</a>, <a class="el" href="_n_e_q_l_s_t_m_layer_8cpp_source.xhtml#l00675">NEQLSTMLayer::validate()</a>, and <a class="el" href="_c_l_q_l_s_t_m_layer_8cpp_source.xhtml#l00603">CLQLSTMLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;{</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>();</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af8815268f0752170d4eaf12a01b8a0c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8815268f0752170d4eaf12a01b8a0c1">&#9670;&nbsp;</a></span>lowest< bfloat16 >()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a> <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a>&lt; <a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a> &gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00291">291</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_bfloat16_8h_source.xhtml#l00120">bfloat16::lowest()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>
<div class="fragment"><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;{</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">bfloat16::lowest</a>();</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00277">ToolchainSupport.h:277</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a452ce01d9794d6b04de3699ddbf4d2d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a452ce01d9794d6b04de3699ddbf4d2d0">&#9670;&nbsp;</a></span>lround()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">long arm_compute::support::cpp11::lround </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding away from zero and cast to long. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::lround except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code> casted to long </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00200">200</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00178">arm_compute::cpu::add_sub_q8_neon_fixedpoint()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00382">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00565">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00162">ClLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8_8cpp_source.xhtml#l00040">arm_compute::cpu::neon_qasymm8_activation()</a>, <a class="el" href="activation_2generic_2neon_2qasymm8__signed_8cpp_source.xhtml#l00038">arm_compute::cpu::neon_qasymm8_signed_activation()</a>, and <a class="el" href="_quantization_info_8h_source.xhtml#l00225">Qasymm8QuantizationHelper&lt; QUANTIZED_TYPE &gt;::quantize()</a>.</p>
<div class="fragment"><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">std::lround</a>(value);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a452ce01d9794d6b04de3699ddbf4d2d0"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a452ce01d9794d6b04de3699ddbf4d2d0">arm_compute::support::cpp11::lround</a></div><div class="ttdeci">long lround(T value)</div><div class="ttdoc">Round floating-point value with half value rounding away from zero and cast to long. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00200">ToolchainSupport.h:200</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac26a2b6f5d8e0c60e67684eea7e71e7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac26a2b6f5d8e0c60e67684eea7e71e7c">&#9670;&nbsp;</a></span>nearbyint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::nearbyint </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rounds the floating-point argument arg to an integer value in floating-point format, using the current rounding mode. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::nearbyint. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The rounded value. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00169">169</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="elementwise__unary_2generic_2neon_2impl_8cpp_source.xhtml#l00033">arm_compute::cpu::elementwise_op_scalar_imp()</a>, and <a class="el" href="_elementwise_unary_8cpp_source.xhtml#l00036">arm_compute::test::validation::reference::elementwise_unary()</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">std::nearbyint</a>(value));</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ac26a2b6f5d8e0c60e67684eea7e71e7c"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ac26a2b6f5d8e0c60e67684eea7e71e7c">arm_compute::support::cpp11::nearbyint</a></div><div class="ttdeci">T nearbyint(T value)</div><div class="ttdoc">Rounds the floating-point argument arg to an integer value in floating-point format, using the current rounding mode. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00169">ToolchainSupport.h:169</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ab71c35ca207b916a9f8b0336ab88484e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab71c35ca207b916a9f8b0336ab88484e">&#9670;&nbsp;</a></span>round()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::round </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Round floating-point value with half value rounding away from zero. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::round except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be rounded.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of rounded <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00184">184</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00090">arm_compute::quantization::calculate_quantized_multiplier_greater_than_one()</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00054">arm_compute::quantization::calculate_quantized_multiplier_less_than_one()</a>, <a class="el" href="neon__gemm__qasymm8_8cpp_source.xhtml#l00051">choose_quantization_params()</a>, <a class="el" href="pool2d_2neon_2quantized_8h_source.xhtml#l00041">arm_compute::cpu::poolingMxN_q8_neon_nhwc()</a>, <a class="el" href="reference_2_r_o_i_pooling_layer_8cpp_source.xhtml#l00040">arm_compute::test::validation::reference::roi_pool_layer()</a>, <a class="el" href="_rounding_8cpp_source.xhtml#l00035">arm_compute::round()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00082">arm_compute::test::round_half_even()</a>, <a class="el" href="support_2_rounding_8h_source.xhtml#l00150">arm_compute::utils::rounding::round_half_even()</a>, and <a class="el" href="_n_e_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00150">NEROIPoolingLayerKernel::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;{</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">//Workaround Valgrind&#39;s mismatches: when running from Valgrind the call to std::round(-4.500000) == -4.000000 instead of 5.00000</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> (value &lt; 0.f) ? <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(value - 0.5f) : static_cast&lt;int&gt;(value + 0.5f);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ae77474c2a053d0a9a019efd154a49893"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae77474c2a053d0a9a019efd154a49893">&#9670;&nbsp;</a></span>signbit() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::signbit </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00315">315</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00325">signbit()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00240">arm_compute::quantization::saturating_rounding_doubling_highmul()</a>.</p>
<div class="fragment"><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;{</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1741c0583417fa946a59dac059a8e3d9">std::signbit</a>(static_cast&lt;double&gt;(value));</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a1741c0583417fa946a59dac059a8e3d9"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1741c0583417fa946a59dac059a8e3d9">arm_compute::support::cpp11::signbit</a></div><div class="ttdeci">bool signbit(bfloat16 value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00325">ToolchainSupport.h:325</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae6e04db7aaa0e4ef3af43f087198acb4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6e04db7aaa0e4ef3af43f087198acb4">&#9670;&nbsp;</a></span>signbit() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::signbit </td>
          <td>(</td>
          <td class="paramtype">half_float::half&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00320">320</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_toolchain_support_8h_source.xhtml#l00325">signbit()</a>.</p>
<div class="fragment"><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1741c0583417fa946a59dac059a8e3d9">half_float::signbit</a>(value);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a1741c0583417fa946a59dac059a8e3d9"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1741c0583417fa946a59dac059a8e3d9">arm_compute::support::cpp11::signbit</a></div><div class="ttdeci">bool signbit(bfloat16 value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00325">ToolchainSupport.h:325</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1741c0583417fa946a59dac059a8e3d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1741c0583417fa946a59dac059a8e3d9">&#9670;&nbsp;</a></span>signbit() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool arm_compute::support::cpp11::signbit </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1bfloat16.xhtml">bfloat16</a>&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00325">325</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="_toolchain_support_8h_source.xhtml#l00315">signbit()</a>.</p>
<div class="fragment"><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;{</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1741c0583417fa946a59dac059a8e3d9">std::signbit</a>(<span class="keywordtype">float</span>(value));</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a1741c0583417fa946a59dac059a8e3d9"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1741c0583417fa946a59dac059a8e3d9">arm_compute::support::cpp11::signbit</a></div><div class="ttdeci">bool signbit(bfloat16 value)</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00325">ToolchainSupport.h:325</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a9429515817425d10f4b662eaa069cc5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9429515817425d10f4b662eaa069cc5c">&#9670;&nbsp;</a></span>snprintf()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::support::cpp11::snprintf </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads the data from the given location, converts them to character string equivalents and writes the result to a character string buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>Pointer to a character string to write to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>Up to buf_size - 1 characters may be written, plus the null ending character </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fmt</td><td>Pointer to a null-ended multibyte string specifying how to interpret the data. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments forwarded to std::snprintf.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Number of characters that would have been written for a sufficiently large buffer if successful (not including the ending null character), or a negative value if an error occurred. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00269">269</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>.</p>

<p class="reference">Referenced by <a class="el" href="_error_8cpp_source.xhtml#l00039">arm_compute::create_error_msg()</a>, and <a class="el" href="arm__compute_2core_2utils_2logging_2_helpers_8h_source.xhtml#l00048">arm_compute::logging::string_with_format()</a>.</p>
<div class="fragment"><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">std::snprintf</a>(s, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">n</a>, fmt, std::forward&lt;Ts&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a9429515817425d10f4b662eaa069cc5c"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a9429515817425d10f4b662eaa069cc5c">arm_compute::support::cpp11::snprintf</a></div><div class="ttdeci">int snprintf(char *s, std::size_t n, const char *fmt, Ts &amp;&amp;... args)</div><div class="ttdoc">Loads the data from the given location, converts them to character string equivalents and writes the ...</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00269">ToolchainSupport.h:269</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a47196b5f5be413bedc213df1640c19cb"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a47196b5f5be413bedc213df1640c19cb">arm_compute::test::validation::n</a></div><div class="ttdeci">const unsigned int n</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00360">GEMMMatrixMultiplyNative.cpp:360</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1df10cffb9f2dea9f3b007ce411e105f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1df10cffb9f2dea9f3b007ce411e105f">&#9670;&nbsp;</a></span>stof()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::support::cpp11::stof </td>
          <td>(</td>
          <td class="paramtype">Ts &amp;&amp;...&#160;</td>
          <td class="paramname"><em>args</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert string values to float. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::stof. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">args</td><td>Arguments forwarded to std::stof.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Float representation of input string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_support_8h_source.xhtml#l00189">189</a> of file <a class="el" href="_string_support_8h_source.xhtml">StringSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>.</p>

<p class="reference">Referenced by <a class="el" href="_string_support_8h_source.xhtml#l00091">stoul()</a>.</p>
<div class="fragment"><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">return ::std::stof</a>(std::forward&lt;Ts&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>)...);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div><div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_a1df10cffb9f2dea9f3b007ce411e105f"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a1df10cffb9f2dea9f3b007ce411e105f">arm_compute::support::cpp11::stof</a></div><div class="ttdeci">int stof(Ts &amp;&amp;... args)</div><div class="ttdoc">Convert string values to float. </div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00189">StringSupport.h:189</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abdba606a789b8d664774f17d18f45cfe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdba606a789b8d664774f17d18f45cfe">&#9670;&nbsp;</a></span>stoi()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int arm_compute::support::cpp11::stoi </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t *&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a>&#160;</td>
          <td class="paramname"><em>base</em> = <code><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string values to integer. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::stoi. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to be converted to int. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>If idx is not a null pointer, the function sets the value of pos to the position of the first character in str after the number. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Numeric base used to interpret the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Integer representation of <code>str</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_support_8h_source.xhtml#l00055">55</a> of file <a class="el" href="_string_support_8h_source.xhtml">StringSupport.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>, <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss()</a>, and <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00095">CLTuningParams::from_string()</a>, <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00389">CLCompileContext::get_ddk_version()</a>, and <a class="el" href="_test_filter_8cpp_source.xhtml#l00043">TestFilter::is_selected()</a>.</p>
<div class="fragment"><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    assert(base == NumericBase::BASE_10 || base == NumericBase::BASE_16);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      x;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::stringstream <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">ss</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">if</span>(base == NumericBase::BASE_16)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        ss &lt;&lt; std::hex;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    ss &lt;&lt; <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    ss &gt;&gt; x;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span>(pos)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        std::string       s;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        std::stringstream ss_p;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        ss_p &lt;&lt; x;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        ss_p &gt;&gt; s;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        *pos = s.length();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">return</span> x;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="ttc" id="namespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a02110ece50ffc08b8ae07c7a63eb10df"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a02110ece50ffc08b8ae07c7a63eb10df">arm_compute::test::validation::ss</a></div><div class="ttdeci">std::stringstream ss(mlgo_str)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae7b85c41ac94d98f07b1cef18b33d2d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7b85c41ac94d98f07b1cef18b33d2d1">&#9670;&nbsp;</a></span>stoul()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long arm_compute::support::cpp11::stoul </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t *&#160;</td>
          <td class="paramname"><em>pos</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126">NumericBase</a>&#160;</td>
          <td class="paramname"><em>base</em> = <code><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">NumericBase::BASE_10</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert string values to unsigned long. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::stoul. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">str</td><td>String to be converted to unsigned long. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td>If idx is not a null pointer, the function sets the value of pos to the position of the first character in str after the number. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">base</td><td>Numeric base used to interpret the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Unsigned long representation of <code>str</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_support_8h_source.xhtml#l00091">91</a> of file <a class="el" href="_string_support_8h_source.xhtml">StringSupport.h</a>.</p>

<p class="reference">References <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a329acff975f3cc434528bec43bd5b6aa">BASE_10</a>, <a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aebc1ea57c14482b68dac0c0dab766126a027219c7702304969c898aeffed504af">BASE_16</a>, <a class="el" href="_string_support_8h_source.xhtml#l00189">stof()</a>, <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>, <a class="el" href="_string_support_8h_source.xhtml#l00168">to_string()</a>, and <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    assert(base == NumericBase::BASE_10 || base == NumericBase::BASE_16);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::stringstream stream;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>     value = 0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span>(base == NumericBase::BASE_16)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        stream &lt;&lt; std::hex;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    stream &lt;&lt; <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    stream &gt;&gt; value;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span>(pos)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        std::string       s;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        std::stringstream ss_p;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        ss_p &lt;&lt; value;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        ss_p &gt;&gt; s;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        *pos = s.length();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div><div class="ttc" id="namespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="acc5dddee1cbe93a4eaf0a9f74ee96bb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc5dddee1cbe93a4eaf0a9f74ee96bb7">&#9670;&nbsp;</a></span>to_string() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::support::cpp11::to_string </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert integer and float values to string. </p>
<dl class="section note"><dt>Note</dt><dd>This function acts as a convenience wrapper around std::to_string. The latter is missing in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>Value to be converted to string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>String representation of <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_string_support_8h_source.xhtml#l00168">168</a> of file <a class="el" href="_string_support_8h_source.xhtml">StringSupport.h</a>.</p>

<p class="reference">References <a class="el" href="_string_support_8h_source.xhtml#l00196">to_string()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_cl_transposed_convolution_kernel_8cpp_source.xhtml#l00097">ClTransposedConvolutionKernel::configure()</a>, <a class="el" href="_cl_floor_kernel_8cpp_source.xhtml#l00069">ClFloorKernel::configure()</a>, <a class="el" href="_cl_dequantize_kernel_8cpp_source.xhtml#l00069">ClDequantizeKernel::configure()</a>, <a class="el" href="_cl_transpose_kernel_8cpp_source.xhtml#l00051">ClTransposeKernel::configure()</a>, <a class="el" href="_cl_copy_kernel_8cpp_source.xhtml#l00076">ClCopyKernel::configure()</a>, <a class="el" href="_cl_elementwise_unary_kernel_8cpp_source.xhtml#l00080">ClElementWiseUnaryKernel::configure()</a>, <a class="el" href="_cl_fill_kernel_8cpp_source.xhtml#l00050">ClFillKernel::configure()</a>, <a class="el" href="_cl_scale_kernel_8cpp_source.xhtml#l00092">ClScaleKernel::configure()</a>, <a class="el" href="_cl_width_concatenate2_tensors_kernel_8cpp_source.xhtml#l00076">ClWidthConcatenate2TensorsKernel::configure()</a>, <a class="el" href="_cl_activation_kernel_8cpp_source.xhtml#l00094">ClActivationKernel::configure()</a>, <a class="el" href="_cl_mat_mul_native_kernel_8cpp_source.xhtml#l00141">ClMatMulNativeKernel::configure()</a>, <a class="el" href="_cl_pool2d_kernel_8cpp_source.xhtml#l00099">ClPool2dKernel::configure()</a>, <a class="el" href="_cl_pool3d_kernel_8cpp_source.xhtml#l00096">ClPool3dKernel::configure()</a>, <a class="el" href="_cl_height_concatenate_kernel_8cpp_source.xhtml#l00076">ClHeightConcatenateKernel::configure()</a>, <a class="el" href="_cl_width_concatenate_kernel_8cpp_source.xhtml#l00075">ClWidthConcatenateKernel::configure()</a>, <a class="el" href="_cl_mat_mul_lowp_native_kernel_8cpp_source.xhtml#l00118">ClMatMulLowpNativeKernel::configure()</a>, <a class="el" href="_cl_quantize_kernel_8cpp_source.xhtml#l00069">ClQuantizeKernel::configure()</a>, <a class="el" href="_cl_permute_kernel_8cpp_source.xhtml#l00085">ClPermuteKernel::configure()</a>, <a class="el" href="_cl_width_concatenate4_tensors_kernel_8cpp_source.xhtml#l00078">ClWidthConcatenate4TensorsKernel::configure()</a>, <a class="el" href="_c_l_strided_slice_kernel_8cpp_source.xhtml#l00078">CLStridedSliceKernel::configure()</a>, <a class="el" href="_cl_batch_concatenate_kernel_8cpp_source.xhtml#l00067">ClBatchConcatenateKernel::configure()</a>, <a class="el" href="_cl_crop_kernel_8cpp_source.xhtml#l00049">ClCropKernel::configure()</a>, <a class="el" href="_cl_depth_concatenate_kernel_8cpp_source.xhtml#l00067">ClDepthConcatenateKernel::configure()</a>, <a class="el" href="_cl_convert_fully_connected_weights_kernel_8cpp_source.xhtml#l00048">ClConvertFullyConnectedWeightsKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_native_kernel_8cpp_source.xhtml#l00166">ClGemmLowpMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_lhs_matrix_kernel_8cpp_source.xhtml#l00109">ClGemmReshapeLhsMatrixKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_native_kernel_8cpp_source.xhtml#l00225">ClGemmMatrixMultiplyNativeKernel::configure()</a>, <a class="el" href="_c_l_bitwise_kernel_8cpp_source.xhtml#l00043">CLBitwiseKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00159">CLInstanceNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_m_m_u_l_kernel_8cpp_source.xhtml#l00206">ClGemmMatrixMultiplyReshapedOnlyRhsMMULKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_kernel_8cpp_source.xhtml#l00117">ClIndirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_max_unpooling_layer_kernel_8cpp_source.xhtml#l00080">CLMaxUnpoolingLayerKernel::configure()</a>, <a class="el" href="_cl_winograd_filter_transform_kernel_8cpp_source.xhtml#l00099">ClWinogradFilterTransformKernel::configure()</a>, <a class="el" href="_cl_winograd_input_transform_kernel_8cpp_source.xhtml#l00135">ClWinogradInputTransformKernel::configure()</a>, <a class="el" href="_c_l_reverse_kernel_8cpp_source.xhtml#l00072">CLReverseKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_fixed_point_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleByFixedPointKernel::configure()</a>, <a class="el" href="_c_l_select_kernel_8cpp_source.xhtml#l00071">CLSelectKernel::configure()</a>, <a class="el" href="_c_l_channel_shuffle_layer_kernel_8cpp_source.xhtml#l00108">CLChannelShuffleLayerKernel::configure()</a>, <a class="el" href="_cl_indirect_conv2d_address_precalculation_kernel_8cpp_source.xhtml#l00077">ClIndirectConv2dAddressPrecalculationKernel::configure()</a>, <a class="el" href="_c_l_depth_to_space_layer_kernel_8cpp_source.xhtml#l00076">CLDepthToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_space_to_depth_layer_kernel_8cpp_source.xhtml#l00077">CLSpaceToDepthLayerKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00162">ClLogits1DMaxShiftExpSumKernel::configure()</a>, <a class="el" href="_cl_winograd_output_transform_kernel_8cpp_source.xhtml#l00146">ClWinogradOutputTransformKernel::configure()</a>, <a class="el" href="_cl_cast_kernel_8cpp_source.xhtml#l00080">ClCastKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_by_float_kernel_8cpp_source.xhtml#l00088">ClGemmLowpQuantizeDownInt32ScaleByFloatKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_quantize_down_int32_scale_kernel_8cpp_source.xhtml#l00085">ClGemmLowpQuantizeDownInt32ScaleKernel::configure()</a>, <a class="el" href="_c_l_generate_proposals_layer_kernel_8cpp_source.xhtml#l00079">CLComputeAllAnchorsKernel::configure()</a>, <a class="el" href="_c_l_q_l_s_t_m_layer_normalization_kernel_8cpp_source.xhtml#l00088">CLQLSTMLayerNormalizationKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_scale_kernel_8cpp_source.xhtml#l00066">CLFFTScaleKernel::configure()</a>, <a class="el" href="_c_l_space_to_batch_layer_kernel_8cpp_source.xhtml#l00095">CLSpaceToBatchLayerKernel::configure()</a>, <a class="el" href="_c_l_gather_kernel_8cpp_source.xhtml#l00086">CLGatherKernel::configure()</a>, <a class="el" href="_c_l_normalization_layer_kernel_8cpp_source.xhtml#l00140">CLNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00143">ClGemmLowpMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_c_l_tile_kernel_8cpp_source.xhtml#l00068">CLTileKernel::configure()</a>, <a class="el" href="_c_l_comparison_kernel_8cpp_source.xhtml#l00112">CLComparisonKernel::configure()</a>, <a class="el" href="_c_l_batch_to_space_layer_kernel_8cpp_source.xhtml#l00092">CLBatchToSpaceLayerKernel::configure()</a>, <a class="el" href="_c_l_reorg_layer_kernel_8cpp_source.xhtml#l00079">CLReorgLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_digit_reverse_kernel_8cpp_source.xhtml#l00081">CLFFTDigitReverseKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_kernel_8cpp_source.xhtml#l00108">ClGemmLowpOffsetContributionKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_offset_contribution_output_stage_kernel_8cpp_source.xhtml#l00132">ClGemmLowpOffsetContributionOutputStageKernel::configure()</a>, <a class="el" href="_cl_gemm_reshape_rhs_matrix_kernel_8cpp_source.xhtml#l00115">ClGemmReshapeRhsMatrixKernel::configure()</a>, <a class="el" href="_c_l_mean_std_dev_normalization_kernel_8cpp_source.xhtml#l00070">CLMeanStdDevNormalizationKernel::configure()</a>, <a class="el" href="_c_l_range_kernel_8cpp_source.xhtml#l00079">CLRangeKernel::configure()</a>, <a class="el" href="_c_l_reduction_operation_kernel_8cpp_source.xhtml#l00086">CLReductionOperationKernel::configure()</a>, <a class="el" href="_cl_direct_conv2d_kernel_8cpp_source.xhtml#l00152">ClDirectConv2dKernel::configure()</a>, <a class="el" href="_c_l_normalize_planar_y_u_v_layer_kernel_8cpp_source.xhtml#l00094">CLNormalizePlanarYUVLayerKernel::configure()</a>, <a class="el" href="_c_l_pad_layer_kernel_8cpp_source.xhtml#l00078">CLPadLayerKernel::configure()</a>, <a class="el" href="_cl_col2_im_kernel_8cpp_source.xhtml#l00093">ClCol2ImKernel::configure()</a>, <a class="el" href="_c_l_prior_box_layer_kernel_8cpp_source.xhtml#l00110">CLPriorBoxLayerKernel::configure()</a>, <a class="el" href="_c_l_f_f_t_radix_stage_kernel_8cpp_source.xhtml#l00089">CLFFTRadixStageKernel::configure()</a>, <a class="el" href="_cl_direct_conv3d_kernel_8cpp_source.xhtml#l00092">ClDirectConv3dKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00288">ClGemmLowpMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_c_l_l2_normalize_layer_kernel_8cpp_source.xhtml#l00085">CLL2NormalizeLayerKernel::configure()</a>, <a class="el" href="_c_l_bounding_box_transform_kernel_8cpp_source.xhtml#l00096">CLBoundingBoxTransformKernel::configure()</a>, <a class="el" href="_cl_mul_kernel_8cpp_source.xhtml#l00113">ClMulKernel::configure()</a>, <a class="el" href="_c_l_depthwise_convolution_layer_native_kernel_8cpp_source.xhtml#l00179">CLDepthwiseConvolutionLayerNativeKernel::configure()</a>, <a class="el" href="_c_l_fill_border_kernel_8cpp_source.xhtml#l00069">CLFillBorderKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_pooling_layer_kernel_8cpp_source.xhtml#l00079">CLROIPoolingLayerKernel::configure()</a>, <a class="el" href="_c_l_stack_layer_kernel_8cpp_source.xhtml#l00087">CLStackLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00076">ClGemmLowpMatrixAReductionKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_only_rhs_kernel_8cpp_source.xhtml#l00187">ClGemmMatrixMultiplyReshapedOnlyRhsKernel::configure()</a>, <a class="el" href="_cl_weights_reshape_kernel_8cpp_source.xhtml#l00078">ClWeightsReshapeKernel::configure()</a>, <a class="el" href="_c_l_arg_min_max_layer_kernel_8cpp_source.xhtml#l00080">CLArgMinMaxLayerKernel::configure()</a>, <a class="el" href="_c_l_r_o_i_align_layer_kernel_8cpp_source.xhtml#l00090">CLROIAlignLayerKernel::configure()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00304">ClIm2ColKernel::configure()</a>, <a class="el" href="_c_l_deconvolution_reshape_output_kernel_8cpp_source.xhtml#l00125">CLDeconvolutionReshapeOutputKernel::configure()</a>, <a class="el" href="_c_l_fuse_batch_normalization_kernel_8cpp_source.xhtml#l00117">CLFuseBatchNormalizationKernel::configure()</a>, <a class="el" href="_c_l_batch_normalization_layer_kernel_8cpp_source.xhtml#l00121">CLBatchNormalizationLayerKernel::configure()</a>, <a class="el" href="_cl_gemm_matrix_multiply_reshaped_kernel_8cpp_source.xhtml#l00188">ClGemmMatrixMultiplyReshapedKernel::configure()</a>, <a class="el" href="_cl_softmax_kernel_8cpp_source.xhtml#l00268">ClLogits1DNormKernel::configure()</a>, <a class="el" href="_cl_gemm_lowp_reduction_kernel_8cpp_source.xhtml#l00155">ClGemmLowpMatrixBReductionKernel::configure()</a>, <a class="el" href="_c_l_instance_normalization_layer_kernel_8cpp_source.xhtml#l00078">CLComputeMeanVariance::configure()</a>, <a class="el" href="_range_dataset_8h_source.xhtml#l00087">RangeDataset&lt; T &gt;::iterator::description()</a>, <a class="el" href="_singleton_dataset_8h_source.xhtml#l00094">SingletonDataset&lt; T &gt;::iterator::description()</a>, <a class="el" href="_container_dataset_8h_source.xhtml#l00100">ContainerDataset&lt; T &gt;::iterator::description()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00165">ClTemplateCast::get_build_options()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00237">ClTemplateLogits1DMaxShiftExpSum::get_build_options()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00143">ClTemplateLogits1DNorm::get_build_options()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00125">ClTemplateReshape::get_build_options()</a>, <a class="el" href="_cl_template_depthwise_conv2d_8cpp_source.xhtml#l00307">ClTemplateDepthwiseConv2d::get_build_options()</a>, <a class="el" href="_cl_template_elementwise_binary_8cpp_source.xhtml#l00236">ClTemplateElementwiseBinary::get_build_options()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00321">ClTemplateDirectConv2d::get_build_options()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00420">ClTemplatePool2d::get_build_options()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00221">ClTemplateResize::get_build_options()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00144">ClTemplateActivation::get_build_options()</a>, <a class="el" href="_cl_template_cast_8cpp_source.xhtml#l00182">ClTemplateCast::get_config_id()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00251">ClTemplateLogits1DMaxShiftExpSum::get_config_id()</a>, <a class="el" href="_cl_template_logits1_d_norm_8cpp_source.xhtml#l00156">ClTemplateLogits1DNorm::get_config_id()</a>, <a class="el" href="_cl_template_reshape_8cpp_source.xhtml#l00139">ClTemplateReshape::get_config_id()</a>, <a class="el" href="_cl_template_depthwise_conv2d_8cpp_source.xhtml#l00341">ClTemplateDepthwiseConv2d::get_config_id()</a>, <a class="el" href="_cl_template_direct_conv2d_8cpp_source.xhtml#l00351">ClTemplateDirectConv2d::get_config_id()</a>, <a class="el" href="_cl_template_elementwise_binary_8cpp_source.xhtml#l00253">ClTemplateElementwiseBinary::get_config_id()</a>, <a class="el" href="_cl_template_activation_8cpp_source.xhtml#l00160">ClTemplateActivation::get_config_id()</a>, <a class="el" href="_cl_template_resize_8cpp_source.xhtml#l00237">ClTemplateResize::get_config_id()</a>, <a class="el" href="_cl_template_pool2d_8cpp_source.xhtml#l00433">ClTemplatePool2d::get_config_id()</a>, <a class="el" href="_cl_template_logits1_d_max_shift_exp_sum_8cpp_source.xhtml#l00213">ClTemplateLogits1DMaxShiftExpSum::get_tag_lut()</a>, <a class="el" href="utils_2_utils_8h_source.xhtml#l00154">arm_compute::utils::get_typestring()</a>, <a class="el" href="tests_2_utils_8h_source.xhtml#l00510">arm_compute::test::get_typestring()</a>, <a class="el" href="tests_2framework_2_utils_8h_source.xhtml#l00136">arm_compute::test::join()</a>, <a class="el" href="main_8cpp_source.xhtml#l00096">main()</a>, <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00193">OpenCLClock&lt; output_timestamps &gt;::measurements()</a>, <a class="el" href="_mali_counter_8cpp_source.xhtml#l00423">MaliCounter::measurements()</a>, <a class="el" href="_scheduler_timer_8cpp_source.xhtml#l00251">SchedulerClock&lt; output_timestamps &gt;::measurements()</a>, <a class="el" href="_dot_graph_printer_8cpp_source.xhtml#l00141">DotGraphPrinter::print()</a>, <a class="el" href="benchmark__examples_2_run_example_8cpp_source.xhtml#l00094">arm_compute::utils::run_example()</a>, <a class="el" href="_c_l_compile_context_8cpp_source.xhtml#l00218">CLCompileContext::set_context()</a>, <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00132">PostOpCLKernelUtils::set_post_ops_cl_build_options()</a>, <a class="el" href="_string_support_8h_source.xhtml#l00091">stoul()</a>, <a class="el" href="_gpu_kernel_variable_table_8h_source.xhtml#l00108">TagVal::TagVal()</a>, <a class="el" href="_size3_d_8cpp_source.xhtml#l00029">Size3D::to_string()</a>, <a class="el" href="_size2_d_8cpp_source.xhtml#l00029">Size2D::to_string()</a>, <a class="el" href="_c_l_tuning_params_8h_source.xhtml#l00084">CLTuningParams::to_string()</a>, <a class="el" href="utils_2_type_printer_8h_source.xhtml#l00088">arm_compute::to_string()</a>, and <a class="el" href="_c_l_tuner_8cpp_source.xhtml#l00094">CLTuner::tune_kernel_dynamic()</a>.</p>
<div class="fragment"><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">return ::std::to_string</a>(std::forward&lt;T&gt;(value));</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_aae1437f4a38c4ada64e7a2586aa35bf8"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#aae1437f4a38c4ada64e7a2586aa35bf8">arm_compute::support::cpp11::to_string</a></div><div class="ttdeci">std::string to_string(bool value)</div><div class="ttdef"><b>Definition:</b> <a href="_string_support_8h_source.xhtml#l00196">StringSupport.h:196</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a77af73f4abd7eeca01501fa3828f725a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77af73f4abd7eeca01501fa3828f725a">&#9670;&nbsp;</a></span>to_string() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::support::cpp11::to_string </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_string_support_8h_source.xhtml#l00174">174</a> of file <a class="el" href="_string_support_8h_source.xhtml">StringSupport.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> value;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aae1437f4a38c4ada64e7a2586aa35bf8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae1437f4a38c4ada64e7a2586aa35bf8">&#9670;&nbsp;</a></span>to_string() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string arm_compute::support::cpp11::to_string </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_string_support_8h_source.xhtml#l00196">196</a> of file <a class="el" href="_string_support_8h_source.xhtml">StringSupport.h</a>.</p>

<p class="reference">References <a class="el" href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor::str</a>.</p>

<p class="reference">Referenced by <a class="el" href="_string_support_8h_source.xhtml#l00168">to_string()</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::stringstream <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    str &lt;&lt; std::boolalpha &lt;&lt; value;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> str.str();</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div><div class="ttc" id="namespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae04d407202e3d50ce6a4c79ac00a5d59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae04d407202e3d50ce6a4c79ac00a5d59">&#9670;&nbsp;</a></span>trunc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T arm_compute::support::cpp11::trunc </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncate floating-point value. </p>
<dl class="section note"><dt>Note</dt><dd>This function implements the same behaviour as std::truncate except that it doesn't support Integral type. The latter is not in the namespace std in some Android toolchains.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>floating-point value to be truncated.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Floating-point value of truncated <code>value</code>. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_toolchain_support_8h_source.xhtml#l00215">215</a> of file <a class="el" href="_toolchain_support_8h_source.xhtml">ToolchainSupport.h</a>.</p>

<p class="reference">References <a class="el" href="gemm__interleaved_8hpp_source.xhtml#l00261">type</a>.</p>

<p class="reference">Referenced by <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00382">arm_compute::cpu::add_sub_qasymm8_neon()</a>, <a class="el" href="add_2generic_2neon_2impl_8cpp_source.xhtml#l00565">arm_compute::cpu::add_sub_qasymm8_signed_neon()</a>, <a class="el" href="tests_2validation_2reference_2_utils_8h_source.xhtml#l00102">arm_compute::test::validation::apply_2d_spatial_filter()</a>, <a class="el" href="_file_printer_8cpp_source.xhtml#l00028">FilePrinter::FilePrinter()</a>, and <a class="el" href="gpu_2unit_2_context_8cpp_source.xhtml#l00053">arm_compute::test::validation::TEST_CASE()</a>.</p>
<div class="fragment"><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">std::trunc</a>(value);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;}</div><div class="ttc" id="namespacearm__compute_1_1support_1_1cpp11_xhtml_ae04d407202e3d50ce6a4c79ac00a5d59"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#ae04d407202e3d50ce6a4c79ac00a5d59">arm_compute::support::cpp11::trunc</a></div><div class="ttdeci">T trunc(T value)</div><div class="ttdoc">Truncate floating-point value. </div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00215">ToolchainSupport.h:215</a></div></div>
</div><!-- fragment -->
</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1support.xhtml">support</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1support_1_1cpp11.xhtml">cpp11</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:43 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
