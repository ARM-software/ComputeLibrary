<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/arm_gemm/gemm_interleaved.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('gemm__interleaved_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gemm_interleaved.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="gemm__interleaved_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2023 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="bfloat_8hpp.xhtml">bfloat.hpp</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="convolver_8hpp.xhtml">convolver.hpp</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="kernel__weight__format_8hpp.xhtml">kernel_weight_format.hpp</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="kernel__traits_8hpp.xhtml">kernel_traits.hpp</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="kernel__weight__format_8hpp.xhtml">kernel_weight_format.hpp</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mergeresults_8hpp.xhtml">mergeresults.hpp</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="performance__parameters_8hpp.xhtml">performance_parameters.hpp</a>&quot;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="quantized_8hpp.xhtml">quantized.hpp</a>&quot;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="transform_8hpp.xhtml">transform.hpp</a>&quot;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &quot;profiler.hpp&quot;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">// Some macros used to decide how much working space to allocate.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">// Round allocations up to the next cache line.</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="gemm__interleaved_8hpp.xhtml#abd1ded15e3688096ead983e87f83fbd1">   47</a></span>&#160;<span class="preprocessor">#define ALLOC_ROUND 64</span></div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">   48</a></span>&#160;<span class="preprocessor">#define ROUND_UP(x) ((((x) + ALLOC_ROUND-1) / ALLOC_ROUND) * ALLOC_ROUND)</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">// Implementation of the GemmCommon abstract class.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">// This implementation interleaves the source matrices in blocks - good for</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">// larger matrices.</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a> {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">// Some kernels output to a linear buffer and require a separate merge step.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">// Others output directly to the matrix result.  This helper class calls the</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">// appropriate functions, using templating to avoid calling non-existent</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">// functions.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> MergeStep, <span class="keywordtype">bool</span> FixedFormat, <span class="keyword">typename</span> OutputStage&gt;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">class </span>kernel_and_merge {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> Tri, <span class="keyword">typename</span> Tab&gt;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run</a> (</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;#endif</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keyword">const</span> To *a_ptr, <span class="keyword">const</span> To *b_panel, <span class="keywordtype">size_t</span> b_stride, Tri *c_panel,</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        Tr *c_ptr, <span class="keywordtype">int</span> ldc, <span class="keywordtype">int</span> kern_k, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0,</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_max, <span class="keyword">const</span> Tr *biasptr,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keyword">const</span> Activation &amp;act, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>, <span class="keyword">const</span> OutputStage &amp;os, <span class="keyword">const</span> int32_t *col_bias,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        Tab *acc_buff);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;};</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">// Run a kernel and call the separate merge step</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> Tri, <span class="keyword">typename</span> Tab&gt;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;true, false, Nothing&gt;::run</a>(</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;#endif</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keyword">const</span> To *a_ptr, <span class="keyword">const</span> To *b_panel, <span class="keywordtype">size_t</span>, Tri *c_panel,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        Tr *c_ptr, <span class="keywordtype">int</span> ldc, <span class="keywordtype">int</span> kern_k, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_max, <span class="keyword">const</span> Tr *biasptr,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keyword">const</span> Activation &amp;act, <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>, <span class="keyword">const</span> Nothing &amp;, <span class="keyword">const</span> int32_t *, Tab *)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bblocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(n_max - n_0, strategy::out_width());</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_KERNEL, (strategy::out_height() * bblocks * strategy::out_width() * kern_k));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        strat.kernel(a_ptr, b_panel, c_panel, 1, bblocks, kern_k);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_MERGE, (strategy::out_height() * bblocks * strategy::out_width() * <span class="keyword">sizeof</span>(Tr)));</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        strat.transforms.Merge(c_ptr, c_panel, ldc, m_0, m_max, n_0, n_max, biasptr, act, accumulate);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">// Run a fixed-format kernel and call the separate merge step</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> Tri, <span class="keyword">typename</span> Tab&gt;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;true, true, Nothing&gt;::run</a>(</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;#endif</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keyword">const</span> To *a_ptr, <span class="keyword">const</span> To *b_panel, <span class="keywordtype">size_t</span> b_stride, Tri *c_panel,</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        Tr *c_ptr, <span class="keywordtype">int</span> ldc, <span class="keywordtype">int</span> kern_k, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_max, <span class="keyword">const</span> Tr *biasptr,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keyword">const</span> Activation &amp;act, <span class="keywordtype">bool</span> accumulate, <span class="keyword">const</span> Nothing &amp;, <span class="keyword">const</span> int32_t *, Tab *)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> bblocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(n_max - n_0, strategy::out_width());</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_KERNEL, (strategy::out_height() * bblocks * strategy::out_width() * kern_k));</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        strat.kernel(a_ptr, b_panel, b_stride, c_panel, 1, (n_max - n_0), kern_k);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> bblocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(n_max - n_0, strategy::out_width());</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_MERGE, (strategy::out_height() * bblocks * strategy::out_width() * <span class="keyword">sizeof</span>(Tr)));</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        strat.transforms.Merge(c_ptr, c_panel, ldc, m_0, m_max, n_0, n_max, biasptr, act, accumulate);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">// Run a kernel with integrated merge</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> Tri, <span class="keyword">typename</span> Tab&gt;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;false, false, Nothing&gt;::run</a>(</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;#endif</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keyword">const</span> To *a_ptr, <span class="keyword">const</span> To *b_panel, <span class="keywordtype">size_t</span>, Tri *,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        Tr *c_ptr, <span class="keywordtype">int</span> ldc, <span class="keywordtype">int</span> kern_k, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_max, <span class="keyword">const</span> Tr *biasptr,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keyword">const</span> Activation &amp;act, <span class="keywordtype">bool</span> accumulate, <span class="keyword">const</span> Nothing &amp;, <span class="keyword">const</span> int32_t *,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        Tab *acc_buff)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_KERNEL, (m_max - m_0) * (n_max - n_0) * kern_k);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// We need to offset the C pointer, but as it might be NULL (requesting output to accumulation buffer) we need</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// to be careful not to offset a null pointer.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    Tri *offset_c_ptr;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">if</span> (c_ptr == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        offset_c_ptr = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        offset_c_ptr = c_ptr + m_0 * ldc + n_0;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    strat.kernel(<span class="comment">// A and B pointers are just the packed panels.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                 a_ptr, b_panel,</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                 <span class="comment">// Provide relevant part of output array and row stride.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                 offset_c_ptr, ldc,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                 <span class="comment">// M, N, K sizes</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                 m_max-m_0, n_max - n_0, kern_k,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                 <span class="comment">// Bias, activation, accumulation.  Need to offset the bias as needed.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                 biasptr ? biasptr + n_0 : <span class="keyword">nullptr</span>, act, accumulate,</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                 <span class="comment">// Accumulation buffer.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                 acc_buff );</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">// Run a kernel with integrated merge, quantizing</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> Tri, <span class="keyword">typename</span> Tab&gt;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;false, false, Requantize32&gt;::run</a>(</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;#endif</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keyword">const</span> To *a_ptr, <span class="keyword">const</span> To *b_panel, <span class="keywordtype">size_t</span>, Tri *,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        Tr *c_ptr, <span class="keywordtype">int</span> ldc, <span class="keywordtype">int</span> kern_k, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_max, <span class="keyword">const</span> Tr *,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keyword">const</span> Activation &amp;, <span class="keywordtype">bool</span> accumulate, <span class="keyword">const</span> Requantize32 &amp;qp, <span class="keyword">const</span> int32_t *col_bias,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        Tab *acc_buff)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_KERNEL, (m_max - m_0) * (n_max - n_0) * kern_k);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    strat.kernel(<span class="comment">// A and B pointers are just the packed panels.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                 a_ptr, b_panel,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                 <span class="comment">// Provide relevant part of output array and row stride.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                 c_ptr + m_0 * ldc + n_0, ldc,</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                 <span class="comment">// M, N, K sizes</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                 m_max-m_0, n_max - n_0, kern_k,</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                 <span class="comment">// Bias, activation, accumulation.  Need to offset the bias as needed.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                 col_bias + n_0, qp, n_0, accumulate, acc_buff);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">// Run a kernel and call the separate quantize step</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword">template</span>&lt;&gt;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> Tri, <span class="keyword">typename</span> Tab&gt;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;true, false, Requantize32&gt;::run</a>(</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;#ifdef CYCLE_PROFILING</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        profiler &amp;prof,</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;#endif</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> &amp;strat, <span class="keyword">const</span> To *a_ptr, <span class="keyword">const</span> To *b_panel, <span class="keywordtype">size_t</span>, Tri *c_panel,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        Tr *c_ptr, <span class="keywordtype">int</span> ldc, <span class="keywordtype">int</span> kern_k, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0,</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_0, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_max, <span class="keyword">const</span> Tr *,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keyword">const</span> Activation &amp;, <span class="keywordtype">bool</span>, <span class="keyword">const</span> Requantize32 &amp;qp, <span class="keyword">const</span> int32_t *col_bias,</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        Tab *)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> bblocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(n_max - n_0, strategy::out_width());</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_KERNEL, (strategy::out_height() * bblocks * strategy::out_width() * kern_k));</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        strat.kernel(a_ptr, b_panel, c_panel, 1, bblocks, kern_k);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_QUANTIZE, ((m_max-m_0) * bblocks * strategy::out_width() * <span class="keyword">sizeof</span>(Tr)));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="comment">// The interleaved kernel outputs in blocks - each block is a</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="comment">// row-major matrix of size out_width * out_height.  The merge</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="comment">// kernels are designed to deal with this but the requantizer is</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="comment">// not, so we need to requantize one block at a time.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0; i&lt;bblocks; i++) {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_start = n_0 + (strategy::out_width() * i);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_end = std::min(n_start + strategy::out_width(), n_max);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="comment">// The row bias is interleaved with the transposed A data, get a pointer to it here.</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keyword">const</span> int32_t *row_bias = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>int32_t *<span class="keyword">&gt;</span>(a_ptr + strategy::out_height() * kern_k);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <a class="code" href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">requantize_block_32</a>(qp, (n_end - n_start), (m_max-m_0),</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                c_panel + (i * strategy::out_width() * strategy::out_height()), strategy::out_width(),</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                c_ptr + m_0 * ldc + n_start, ldc,</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                row_bias, col_bias + n_start, n_start);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">// Integer GEMMs can be used in two contexts - &quot;normal&quot; where the full 32-bit output is required, or in</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">// &quot;requantizing&quot; context where the output will be requantized.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">// These require different input transforms, as if we are requantizing we want to sum the rows of the A input, and</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">// if we are not we don&#39;t.</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">//</span></div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">// This helper class allows the appropriate transforms to be found, without requiring kernels that don&#39;t support</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">// quantization to define useless &quot;quantized&quot; transforms.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keywordtype">bool</span> quantized&gt;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">class </span>transform_type {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">  261</a></span>&#160;    <span class="keyword">typedef</span> decltype(strategy::transforms) <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;};</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy&gt;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">class </span>transform_type&lt;<a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>, true&gt; {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">typedef</span> decltype(strategy::transforms_quantized) <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;};</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">// We need a similar trick here to figure out what type the accumulator buffer should be.</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> OutputStage, <span class="keywordtype">bool</span> ForceFloat&gt;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">class </span>accumulate_buffer_type {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::result_type <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;};</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy&gt;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keyword">class </span>accumulate_buffer_type&lt;strategy, Requantize32, false&gt; {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keyword">typedef</span> int32_t <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;};</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> OutputStage&gt;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">class </span>accumulate_buffer_type&lt;strategy, OutputStage, true&gt; {</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">float</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;};</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">// Stripe width is a concept only needed for FixedFormat kernels.  Use an accessor to avoid issues in other scenarios.</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keywordtype">bool</span> FixedFormat&gt;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keyword">struct </span>get_stripe_width {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">get</span>() {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    }</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;};</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy&gt;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">struct </span>get_stripe_width&lt;strategy, true&gt; {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keyword">get</span>() {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> strategy::stripe_width();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;};</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">// KernelWeightFormat is a similar story.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keywordtype">bool</span> FixedFormat, <span class="keyword">typename</span> To&gt;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="keyword">struct </span>get_kernel_weight_format {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">KernelWeightFormat</a> <span class="keyword">get</span>() {</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76aa2730bd24646daa3279918eeff467d8c">KernelWeightFormat::NON_FIXED</a>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;};</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To&gt;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keyword">struct </span>get_kernel_weight_format&lt;strategy, true, To&gt; {</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keyword">static</span> <a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">KernelWeightFormat</a> <span class="keyword">get</span>() {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">KernelWeightFormat</a> kwf = strategy::kernel_weight_format();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="comment">// If we are using a BF16 kernel to do an FP32 problem (fast mode) then we need to set the BF16 flag on the</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="comment">// weight format.</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;To, float&gt;::value &amp;&amp; std::is_same&lt;typename strategy::operand_type, bfloat16&gt;::value) {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            uint32_t kwf_i = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(kwf);</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            kwf_i |= 0x10;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            kwf = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">KernelWeightFormat</a><span class="keyword">&gt;</span>(kwf_i);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">return</span> kwf;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;};</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> OutputStage=Nothing, <span class="keywordtype">bool</span> MergeStep=true, <span class="keywordtype">bool</span> FixedFormat=false, <span class="keywordtype">bool</span> ForceThreadColumns=false, <span class="keywordtype">bool</span> ForceFloatAccumulate=false&gt;</div><div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml">  332</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> : <span class="keyword">public</span> <a class="code" href="classarm__gemm_1_1_gemm_common.xhtml">GemmCommon</a>&lt;To, Tr&gt; {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::operand_type Toi;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> strategy::result_type Tri;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keyword">typedef</span> <span class="keyword">typename</span> accumulate_buffer_type&lt;strategy, OutputStage, ForceFloatAccumulate&gt;::type Tab;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="comment">/* const properties set by constructor */</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> * <span class="keyword">const</span> _ci;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Msize;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Nsize;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Ksize;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Ksections;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Ktotal;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _rounded_Ksize;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _nbatches;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _nmulti;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> _thread_columns;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_activation.xhtml">Activation</a> _act;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> _maxthreads;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordtype">int</span> _nthreads;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">/* Blocking info */</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _k_block=0;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _x_block=0;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _Mround=0;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="comment">/* Working space, pretransposed buffer, buffer manager */</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">const</span> Toi *_B_transposed=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keywordtype">void</span> *_working_space=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    Tab *_accumulation_buffer=<span class="keyword">nullptr</span>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="comment">/* Output stage */</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    OutputStage  _os;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="comment">/* Quantized support (in addition to &#39;output stage&#39; above */</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    int32_t *col_bias = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">/* Indirect parameters.  _indirect_buf doubles as a flag to indicate that &quot;indirect&quot; transform should be used. */</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">const</span> To * <span class="keyword">const</span> * <span class="keyword">const</span> * _indirect_buf = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">/* Convolver - only set up for convolution problems, so also doubles as a flag. */</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    std::unique_ptr&lt;convolver&lt;To&gt;&gt;  _convolver = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_col_sum_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keywordflow">return</span> _Nsize * _nmulti * <span class="keyword">sizeof</span>(int32_t);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">/* We will need to walk through the blocks of B in a few contexts, so</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">     * factor that out.  */</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">class </span>blockwalker {</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="comment">/* Size loops, etc. based on our parent&#39;s configuration */</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate&gt;</a> &amp;_parent;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="comment">/* K, X and multi parameters for current iteration. */</span></div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _k0=0, _x0=0, _multi=0;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="comment">/* Range of X to iterate over - used in &quot;ForceThreadColumns&quot; cases */</span></div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _x_start=0;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _x_end=_parent._Nsize;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _index=0;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordtype">bool</span> _done=<span class="keyword">false</span>;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordtype">bool</span> _newkblock=<span class="keyword">true</span>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordtype">bool</span> _newmulti=<span class="keyword">true</span>;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        blockwalker(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate&gt;</a> &amp;parent) : _parent(parent) { }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        blockwalker(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr, OutputStage, MergeStep, FixedFormat, ForceThreadColumns, ForceFloatAccumulate&gt;</a> &amp;parent,</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a33ee2954a8e8fb991cd139c9345841c3">x_start</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a076dad6d7efce7170dcd2efecc69d1e6">x_end</a>) : _parent(parent), _x0 (_x_start), _x_start(x_start), _x_end(x_end) { }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax() {</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keywordflow">return</span> std::min(_x0 + _parent._x_block, _x_end);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax() {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">return</span> std::min(_k0 + _parent._k_block, _parent._Ktotal);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="comment">/* Advance to the next block, return false at the end. */</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a2f7ed43a30966415307da837a24ee3ab">advance</a>(<span class="keywordtype">void</span>) {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="keywordflow">if</span> (_done) {</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            }</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            _newkblock=<span class="keyword">false</span>;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            _x0 += _parent._x_block;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="keywordflow">if</span> (_x0 &gt;= _x_end) {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                _x0=_x_start;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                _k0 += _parent._k_block;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                <span class="keywordflow">if</span> (_k0 &gt;= _parent._Ktotal) {</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                    _k0=0;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                    _multi++;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                    <span class="keywordflow">if</span> (_multi &gt;= _parent._nmulti) {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                        _done=<span class="keyword">true</span>;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                    }</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                    _newmulti=<span class="keyword">true</span>;</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                }</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                _newkblock=<span class="keyword">true</span>;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            }</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            _index++;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        }</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _k0; }</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _x0; }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _multi; }</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _index; }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <span class="keywordtype">bool</span> done(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _done; }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordtype">bool</span> newkblock(<span class="keywordtype">void</span>) { <span class="keywordflow">return</span> _newkblock; }</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    };</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// &quot;k block&quot; has two distinct uses: figuring out which iterations of K</span></div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="comment">// to actually process, but also various size/pointer computations.  The</span></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="comment">// latter needs to take account of the extra space needed for the row</span></div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="comment">// sums, if appropriate.</span></div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_total_k_depth()<span class="keyword"> const </span>{</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_depth = _k_block;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            k_depth += <span class="keyword">sizeof</span>(int32_t) / <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <span class="keywordflow">return</span> k_depth;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="comment">// A working size.</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordtype">size_t</span> get_a_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordflow">if</span> (_thread_columns) {</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="comment">// For 2D threading: allocate a buffer of one block of rows per thread</span></div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Toi) * get_total_k_depth() * strategy::out_height() * _maxthreads);</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="comment">// For 1D threaded: one of these needed, regardless of thread count.  Divided according to window.</span></div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Toi) * get_total_k_depth() * _Mround * _nbatches);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        }</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <span class="comment">// C working size: One needed per thread.  Not needed if there is no merge step.</span></div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordtype">size_t</span> get_c_working_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">if</span> (MergeStep) {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a>(<span class="keyword">sizeof</span>(Tri) * _x_block * strategy::out_height());</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="comment">// Accumulation buffer size</span></div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordtype">size_t</span> get_accumulation_buffer_size()<span class="keyword"> const </span>{</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="comment">// We only support an accumulation buffer for non-merge cases.</span></div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="keywordflow">if</span> (MergeStep) {</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        }</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        <span class="comment">// Check if we are actually blocking</span></div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordflow">if</span> (_k_block == _Ktotal) {</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="comment">// We are no-merge, non-quantized with active blocking: accumulation buffer needed.</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="keywordtype">size_t</span> size_per_buffer = <span class="keyword">sizeof</span>(Tab) * strategy::out_height() * strategy::out_width();</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordtype">size_t</span> num_buffers = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Msize, strategy::out_height()) * <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, strategy::out_width()) * _nbatches * _nmulti;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="keywordflow">return</span> num_buffers * size_per_buffer;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="comment">// Get pointer into accumulation buffer</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    Tab *get_accumulation_buffer(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi)<span class="keyword"> const </span>{</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="comment">// Don&#39;t do anything if there&#39;s no buffer.</span></div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordflow">if</span> (_accumulation_buffer == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        }</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="comment">// Here we are indexing an appropriately sized pointer, so no sizeof() needed to convert to bytes.</span></div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordtype">size_t</span> size_per_buffer = strategy::out_height() * strategy::out_width();</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keywordtype">size_t</span> buffer_rows = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Msize, strategy::out_height());</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordtype">size_t</span> buffer_cols = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, strategy::out_width());</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keywordtype">size_t</span> buffers_per_batch = (buffer_rows * buffer_cols);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="keywordtype">size_t</span> buffers_per_multi = buffers_per_batch * _nbatches;</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="comment">// M/N must reference the top-left corner of a block.</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordtype">size_t</span> row = M / strategy::out_height();</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        assert(M % strategy::out_height() == 0);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="keywordtype">size_t</span> col = N / strategy::out_width();</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        assert(N % strategy::out_width() == 0);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordtype">size_t</span> buffer_index = multi * buffers_per_multi + batch * buffers_per_batch + row * buffer_cols + col;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">return</span> _accumulation_buffer + (buffer_index * size_per_buffer);</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    int32_t row_sum_multiplier()<span class="keyword"> const </span>{</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *qp = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *<span class="keyword">&gt;</span>(&amp;_os);</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            <span class="keywordflow">return</span> -qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#a126a5e90d1af15ccd17a6efe3a47f54b">b_offset</a>;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        }</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    }</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="comment">// Heuristics to decide whether to use the &#39;thread columns&#39; regime</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> is_thread_columns(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>) {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <span class="comment">// For now, there is a templace parameter to force it.</span></div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <span class="keywordflow">if</span> (ForceThreadColumns) {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        }</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="comment">// Never do this for single threaded cases.</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a> == 1) {</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        }</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="comment">// How many blocks of work are available for threading on M?</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keywordtype">int</span> m_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>, strategy::out_height()) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="comment">// If we just can&#39;t share the work across threads with the row threading regime.</span></div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a> &gt; m_blocks) {</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        }</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <span class="comment">// If the row threading regime is too wasteful (20% threshold)</span></div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keywordflow">if</span> (((<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(m_blocks, args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a>) * 100) / m_blocks) &gt; 120) {</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        }</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    }</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_ktotal(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args) {</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        <span class="keywordflow">return</span> args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">_Ksections</a> * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, strategy::k_unroll());</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    }</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_k_block_size(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args) {</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a>) {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a>, strategy::k_unroll());</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        }</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="comment">// K blocking not supported if we are requantizing.</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <span class="keywordflow">return</span> get_ktotal(args);</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        }</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="comment">// Special blocking for SME</span></div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="structarm__gemm_1_1is__sme.xhtml">is_sme&lt;strategy&gt;::value</a>) {</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <span class="comment">// Don&#39;t bother to block below this size threshold, experimentally determined to be 320 for FP32</span></div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> scaling_threshold = 1280 / <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keywordflow">if</span> (get_ktotal(args) &lt;= scaling_threshold) {</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <span class="keywordflow">return</span> get_ktotal(args);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            }</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="comment">// Once we are blocking, this (lower) threshold determines when we should use more blocks</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            <span class="comment">// NOTE: Could be that some factor-based solution would work better here.</span></div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_block_size = 1024 / <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_k_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(get_ktotal(args), max_block_size);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_block = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(get_ktotal(args), num_k_blocks), strategy::k_unroll());</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="keywordflow">return</span> k_block;</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L1_size = args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>-&gt;<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a61970c81ba14081e613c12d0e85af761">get_L1_cache_size</a>();</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_block;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="comment">// k_block: Find out how much of the larger array can be loaded into half the cache.</span></div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        <span class="comment">// This should account for associative caches.</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        k_block = (L1_size / 2) / (<span class="keyword">sizeof</span>(Toi) * (std::max(strategy::out_width(), strategy::out_height())));</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="comment">// Needs to be (at least a single) multiple of the K unroll level.</span></div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        k_block /= strategy::k_unroll();</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        k_block = std::max(k_block, 1U) * strategy::k_unroll();</div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="comment">// Now tune to presented problem size; this is how many blocks we need.</span></div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_k_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(get_ktotal(args), k_block);</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="comment">// So divide the space equally into that many blocks.</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        k_block = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(get_ktotal(args), num_k_blocks);</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <span class="comment">// And round UP to the K unroll level required.</span></div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        k_block = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_block, strategy::k_unroll());</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        assert(k_block &gt; 0);</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <span class="keywordflow">return</span> k_block;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    }</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> get_x_block_size(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args) {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="keywordflow">if</span> (is_thread_columns(args)) {</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="comment">// In 2D mode, override X block, because we will process width first.</span></div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width());</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        }</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">if</span> (args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a> &amp;&amp; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a>) {</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">_cfg</a>-&gt;<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a>, strategy::out_width());</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        }</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_block;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> L2_size = args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>-&gt;<a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml#a3152ff6ceec3d31c02feb4e91812f040">get_L2_cache_size</a>();</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_block = get_k_block_size(args);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="comment">// x_block: Work out how many rows (of length k_block) will fit in the L2</span></div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="comment">// Don&#39;t allocate more than 90% of the L2 to allow for overheads, and subtract off the L1 contents.</span></div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> scaled_l2_size = (L2_size * 9) / 10;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_block_area = k_block * <span class="keyword">sizeof</span>(Toi) * (strategy::out_width() + strategy::out_height());</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="comment">// .. if the L1 contents is bigger than the L2, just return a minimal size block.</span></div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="keywordflow">if</span> (k_block_area &gt; scaled_l2_size) {</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="keywordflow">return</span> strategy::out_width();</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        }</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        x_block = (scaled_l2_size - k_block_area) / (<span class="keyword">sizeof</span>(Toi) * k_block);</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;        <span class="comment">// Needs to be (at least a single) multiple of the kernel output width.</span></div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        x_block /= strategy::out_width();</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        x_block = std::max(x_block, 1u) * strategy::out_width();</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        <span class="comment">// And tune to the presented problem size.</span></div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_x_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, x_block);</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        x_block = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, num_x_blocks);</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        x_block = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(x_block, strategy::out_width());</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        assert(x_block &gt; 0);</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <span class="keywordflow">return</span> x_block;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    }</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a>(<a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp; operator= (<a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="comment">/* Constructor */</span></div><div class="line"><a name="l00678"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa0a931bb25f217a3913e39ed269855c9">  678</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa0a931bb25f217a3913e39ed269855c9">GemmInterleaved</a>(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args, <span class="keyword">const</span> OutputStage &amp;os)</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                    : _ci(args._ci), _Msize(args._Msize), _Nsize(args._Nsize), _Ksize(args._Ksize),</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                      _Ksections(args._Ksections), _Ktotal(get_ktotal(args)),</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                      _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::k_unroll())),</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                      _nbatches(args._nbatches), _nmulti(args._nmulti), _thread_columns(is_thread_columns(args)),</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                      _act(args._act), _maxthreads(args._maxthreads), _nthreads(args._maxthreads),</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                      _k_block(get_k_block_size(args)), _x_block(get_x_block_size(args)), _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height())),</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                      _os(os) { }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="comment">/* Constructor without OutputStage */</span></div><div class="line"><a name="l00688"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a62d3274bfacd0e46e112520266f8d68f">  688</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a62d3274bfacd0e46e112520266f8d68f">GemmInterleaved</a>(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args)</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                    : _ci(args._ci), _Msize(args._Msize), _Nsize(args._Nsize), _Ksize(args._Ksize),</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                      _Ksections(args._Ksections), _Ktotal(get_ktotal(args)),</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                      _rounded_Ksize(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::k_unroll())),</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                      _nbatches(args._nbatches), _nmulti(args._nmulti), _thread_columns(is_thread_columns(args)),</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                      _act(args._act), _maxthreads(args._maxthreads), _nthreads(args._maxthreads),</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                      _k_block(get_k_block_size(args)), _x_block(get_x_block_size(args)), _Mround(<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args._Msize, <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a>::out_height())),</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                      _os() { }</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="comment">// Interface implementation - Compulsory functions</span></div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="comment">// Window size: Only the last thread should do a ragged block, so dole</span></div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="comment">// out work in units of out_height.  Factor batches into the window, but</span></div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="comment">// not multi for now (as this would cause problems with the buffer</span></div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="comment">// manager).</span></div><div class="line"><a name="l00703"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">  703</a></span>&#160;    <a class="code" href="classarm__gemm_1_1_n_d_range.xhtml">ndrange_t</a> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">get_window_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row_blocks = (_Mround / strategy::out_height()) * _nbatches;</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        <span class="keywordflow">if</span> (_thread_columns) {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            <span class="keywordflow">return</span> { row_blocks, <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, strategy::out_width()) };</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            <span class="comment">// _Mround is a multiple of out_height by definition.</span></div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            <span class="keywordflow">return</span> { row_blocks };</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        }</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="comment">// set_nthreads: pass on to buffer manager to avoid it waiting for non-existant threads.</span></div><div class="line"><a name="l00715"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">  715</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">set_nthreads</a>(<span class="keywordtype">int</span> nthreads)<span class="keyword"> override </span>{</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        _nthreads = std::min(nthreads, _maxthreads);</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    }</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="comment">// Execute</span></div><div class="line"><a name="l00720"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ada8f6414f6f5c604c7d30fd478c016c9">  720</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ada8f6414f6f5c604c7d30fd478c016c9">execute</a>(<span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;work_range, <span class="keyword">const</span> <a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml">ndcoord_t</a> &amp;, <span class="keywordtype">int</span> threadid)<span class="keyword"> override </span>{</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        profiler prof;</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="comment">/* Make sure we&#39;ve been set up correctly. */</span></div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        assert(FixedFormat || _B_transposed);</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        assert(_working_space);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        int8_t *working_space_bytes = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(_working_space);</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        <span class="comment">/* Align if needed */</span></div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        intptr_t working_space_v = <span class="keyword">reinterpret_cast&lt;</span>intptr_t<span class="keyword">&gt;</span>(_working_space);</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordflow">if</span> (working_space_v &amp; 0x3f) {</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            intptr_t alignment_offset = 0x40 - (working_space_v &amp; 0x3f);</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            working_space_bytes += alignment_offset;</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        }</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_ci);</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> start = work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a9bbea489f6defd913b01a39e05e708e4">get_position</a>(0);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   = work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a582a56796981d98bba73d4de244bd21e">get_position_end</a>(0);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <span class="comment">/* Translate &#39;start&#39; and &#39;end&#39; into a position within the batches and rows. */</span></div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_per_batch = _Mround / strategy::out_height();</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_0   = start / window_per_batch;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_end = <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   / window_per_batch;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        <span class="comment">// In ThreadColumns mode, process work one horizontal strip at a time.</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <span class="comment">// Transpose the block of needed rows at the start, then do all the work on that block.</span></div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        <span class="keywordflow">if</span> (_thread_columns) {</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> start_x = work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a9bbea489f6defd913b01a39e05e708e4">get_position</a>(1) * strategy::out_width();</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> end_x = std::min(work_range.<a class="code" href="classarm__gemm_1_1_n_d_coordinate.xhtml#a582a56796981d98bba73d4de244bd21e">get_position_end</a>(1) * strategy::out_width(), _Nsize);</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            Tri * <span class="keyword">const</span> c_panel = <span class="keyword">reinterpret_cast&lt;</span>Tri *<span class="keyword">&gt;</span>(working_space_bytes + (threadid * get_c_working_size()));</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            Toi * <span class="keyword">const</span> a_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + (_maxthreads * get_c_working_size()) +</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                       (threadid * <span class="keyword">sizeof</span>(Toi) * get_total_k_depth() * strategy::out_height()));</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> multi=0; multi&lt;_nmulti; multi++) {</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k0=0; k0&lt;_Ktotal; k0+=_k_block) {</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kmax=std::min(k0+_k_block, _Ktotal);</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_width = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Nsize, strategy::out_width());</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (k0==0);</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass  = (kmax==_Ktotal);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                    <span class="comment">// Figure out how many &quot;K&quot; the kernel will actually process.</span></div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(kmax - k0, strategy::k_unroll());</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                    <span class="keyword">const</span> Toi *b_ptr = FixedFormat ?</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                        <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Toi *<span class="keyword">&gt;</span>(this-&gt;_Bptr) + (multi * this-&gt;_B_multi_stride) +</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                                                     ((start_x / get_stripe_width&lt;strategy, FixedFormat&gt;::get()) * this-&gt;_ldb) +</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                                                     (k0 * get_stripe_width&lt;strategy, FixedFormat&gt;::get()) :</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                        _B_transposed + (rounded_width * _Ktotal * multi) + (k0 * rounded_width) + (start_x * kern_k);</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch     = batch_0;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start_row = (start - (batch_0 * window_per_batch)) * strategy::out_height();</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> p=start; p&lt;<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>; p++) {</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> end_row = std::min(start_row + strategy::out_height(), _Msize);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                        <span class="comment">// Set up transposed &#39;A&#39; block</span></div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                        {</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                            <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_PREPA, strategy::out_height() * (kmax-k0) * <span class="keyword">sizeof</span>(Toi));</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                            <span class="comment">// See comment above on transform_type&lt;&gt; class: this extracts either &#39;transforms&#39; or</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;                            <span class="comment">// &#39;transforms_quantized&#39; as appropriate.</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;                            <span class="keyword">typename</span> transform_type&lt;strategy, MergeStep &amp;&amp; std::is_same&lt;OutputStage, Requantize32&gt;::value&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a> transforms;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;                            <span class="keywordflow">if</span> (_indirect_buf != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                                transforms.PrepareA_indirect(a_panel,</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                                                             _indirect_buf + (multi * _nbatches * _Ksections) + (batch * _Ksections), _Ksize,</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                                                             _rounded_Ksize, start_row, end_row, k0, kmax, row_sum_multiplier());</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_convolver) {</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                                transforms.PrepareA_convolution(a_panel,</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                                                                this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (multi * this-&gt;_A_multi_stride),</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                                                                this-&gt;_lda, *_convolver, _rounded_Ksize, start_row, end_row, k0, kmax, row_sum_multiplier());</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;                                transforms.PrepareA(a_panel,</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                                                    this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (multi * this-&gt;_A_multi_stride),</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;                                                    this-&gt;_lda, start_row, end_row, k0, std::min(kmax, _Ksize), row_sum_multiplier());</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                            }</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                        }</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                        <span class="comment">// Perform the kernel and merge step, either separately or together as required.</span></div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;MergeStep, FixedFormat, OutputStage&gt;::run</a>(</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;                        #ifdef CYCLE_PROFILING</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                            prof,</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                        #endif</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                            <span class="comment">// Strategy and panel pointers</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                            strat, a_panel, b_ptr, this-&gt;_ldb, c_panel,</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                            <span class="comment">// Result buffer pointers</span></div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                            this-&gt;_Cptr + (batch * this-&gt;_C_batch_stride) + (multi * this-&gt;_C_multi_stride), this-&gt;_ldc,</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                            <span class="comment">// K size, and M/N ranges</span></div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                            kern_k, start_row, end_row, start_x, end_x,</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                            <span class="comment">// Only do bias on the first pass</span></div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                            ((first_pass &amp;&amp; this-&gt;_bias) ? this-&gt;_bias + (multi * this-&gt;_bias_multi_stride) : <span class="keyword">nullptr</span>),</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                            <span class="comment">// Only do activation on the last pass, and accumulation on any non-first pass.</span></div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                            (last_pass ? _act : <a class="code" href="structarm__gemm_1_1_activation.xhtml">Activation</a>()), !first_pass,</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;                            <span class="comment">// Pass in quantization parameters for requantizing kernels (others will ignore)</span></div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                            _os, col_bias + (multi * _Nsize),</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                            <span class="comment">// Accumulation buffer</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                            get_accumulation_buffer(start_row, start_x, batch, multi));</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;                        <span class="comment">/* Increment to the next block */</span></div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                        start_row += strategy::out_height();</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                        <span class="keywordflow">if</span> (start_row &gt;= _Msize) {</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                            start_row = 0;</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                            batch++;</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;                        }</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;                    }</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                }</div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            }</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="comment">/* Compute the M values to operate on */</span></div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_0   = (start - (batch_0 * window_per_batch)) * strategy::out_height();</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_max = (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - (batch_end * window_per_batch)) * strategy::out_height();</div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <span class="comment">// Private buffers.  Treat working_space as an array of C buffers</span></div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            <span class="comment">// (one per thread) first, followed by the (window-divided) A</span></div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <span class="comment">// buffer.</span></div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            <span class="comment">// Set a_panel to the base of the A buffers - compute offsets into it based on M/batches later.</span></div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;            Toi * <span class="keyword">const</span> a_panel = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(working_space_bytes + (_maxthreads * get_c_working_size()));</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            Tri * <span class="keyword">const</span> c_panel = <span class="keyword">reinterpret_cast&lt;</span>Tri *<span class="keyword">&gt;</span>(working_space_bytes + (threadid * get_c_working_size()));</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            <span class="keyword">const</span> Toi *b_panel;</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            b_panel = _B_transposed;</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="comment">// newkblock() is always true on the first iteration, so these will be set properly on the first loop.</span></div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            <span class="comment">// kern_k tracks the accumulation depth for the CURRENT K block a_panel_stride similarly tracks the total</span></div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            <span class="comment">// stride of the A panel (i.e.  with 4 added for cases with embedded row sums)</span></div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            <span class="comment">// These are distinct from k_block and get_total_k_depth() which are based on the target K block size, and</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            <span class="comment">// used for addressing inside a_panel.</span></div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            <span class="comment">// In cases where K blocking is in use and the blocks are not all the same size, the (smaller) final block</span></div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            <span class="comment">// won&#39;t use all the memory allocated.</span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kern_k = 0;</div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> a_panel_stride = 0;</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            <span class="keywordflow">for</span> (;!current.done();current.advance()) {</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;                <span class="keywordflow">if</span> (current.newkblock()) {</div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="preprocessor">#ifdef CYCLE_PROFILING</span></div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                    <span class="keyword">auto</span> p=prof.ScopedProfiler(PROFILE_PREPA, (<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> - start) * strategy::out_height() * (current.kmax()-current.k0()) * <span class="keyword">sizeof</span>(Toi));</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;                    <span class="comment">// See comment above on transform_type&lt;&gt; class: this extracts either &#39;transforms&#39; or</span></div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;                    <span class="comment">// &#39;transforms_quantized&#39; as appropriate.</span></div><div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;                    <span class="keyword">typename</span> transform_type&lt;strategy, MergeStep &amp;&amp; std::is_same&lt;OutputStage, Requantize32&gt;::value&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a> transforms;</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = batch_0; batch &lt;= batch_end; batch++) {</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_m = (batch == batch_0)   ? m_0   : 0;</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> last_m  = (batch == batch_end) ? m_max : _Msize;</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div><div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                        <span class="keywordflow">if</span> (first_m &gt;= last_m)</div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                        <span class="keywordflow">if</span> (_indirect_buf != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                            transforms.PrepareA_indirect(a_panel + ((batch * _Mround + first_m) * get_total_k_depth()),</div><div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                                                      _indirect_buf + (current.multi() * _nbatches * _Ksections) + (batch * _Ksections), _Ksize,</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;                                                      _rounded_Ksize, first_m, last_m, current.k0(), current.kmax(), row_sum_multiplier());</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (_convolver) {</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                            transforms.PrepareA_convolution(a_panel + ((batch * _Mround + first_m) * get_total_k_depth()),</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                                                      this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (current.multi() * this-&gt;_A_multi_stride),</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                                                      this-&gt;_lda, *_convolver, _rounded_Ksize, first_m, last_m, current.k0(), current.kmax(), row_sum_multiplier());</div><div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                            transforms.PrepareA(a_panel + ((batch * _Mround + first_m) * get_total_k_depth()),</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                                                      this-&gt;_Aptr + (batch * this-&gt;_A_batch_stride) + (current.multi() * this-&gt;_A_multi_stride),</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                                                      this-&gt;_lda, first_m, last_m, current.k0(), std::min(_Ksize, current.kmax()), row_sum_multiplier());</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                        }</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                    }</div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div><div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                    <span class="comment">// Figure out how many &quot;K&quot; the kernel will actually process.</span></div><div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                    kern_k = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.kmax() - current.k0(), strategy::k_unroll());</div><div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div><div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                    <span class="comment">// Requantizing GEMMs have the row sums built in to the</span></div><div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;                    <span class="comment">// transposed data, so the stride between rows is 4 bytes</span></div><div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;                    <span class="comment">// larger than the (rounded) K value.</span></div><div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div><div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                    <span class="keywordflow">if</span>(std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                        a_panel_stride = kern_k + (<span class="keyword">sizeof</span>(int32_t) / <span class="keyword">sizeof</span>(Toi));</div><div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                        a_panel_stride = kern_k;</div><div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                    }</div><div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                }</div><div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;</div><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;                <span class="comment">// For FixedFormat cases, figure out the B pointer.  The loop below moves through batches and vertically through the output so this will be the same throughout.</span></div><div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;                <span class="keywordflow">if</span> (FixedFormat) {</div><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;                    b_panel = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Toi *<span class="keyword">&gt;</span>(this-&gt;_Bptr) + (current.multi() * this-&gt;_B_multi_stride) +</div><div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;                                                                           ((current.x0() / get_stripe_width&lt;strategy, FixedFormat&gt;::get()) * this-&gt;_ldb) +</div><div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;                                                                           (current.k0() * get_stripe_width&lt;strategy, FixedFormat&gt;::get());</div><div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;                }</div><div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div><div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;                <span class="comment">/* Do the actual work. */</span></div><div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch = batch_0; batch &lt;= batch_end; batch++) {</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first_m = (batch == batch_0)   ? m_0   : 0;</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> last_m  = (batch == batch_end) ? m_max : _Msize;</div><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div><div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;                    <span class="keyword">const</span> Toi *a_ptr = a_panel + (batch * _Mround + first_m) * get_total_k_depth();</div><div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div><div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;                    <span class="keywordflow">if</span> (first_m &gt;= last_m)</div><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;                        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div><div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;                    <span class="comment">// For the merge case we need to do this out_height() rows</span></div><div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;                    <span class="comment">// at a time, as that is the size of our intermediate</span></div><div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;                    <span class="comment">// buffer.  If we are not doing that, we can do all the</span></div><div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;                    <span class="comment">// relevant rows in one go.</span></div><div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_step = MergeStep ? strategy::out_height() : (last_m - first_m);</div><div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;</div><div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;                    <span class="comment">// But in the case where we have an accumulation buffer, we can&#39;t do that after all, unless</span></div><div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;                    <span class="comment">// there is no N blocking.</span></div><div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;                    <span class="keywordflow">if</span> (_accumulation_buffer &amp;&amp; ((current.x0() != 0) || (current.xmax() &lt; _Nsize))) {</div><div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;                        m_step = strategy::out_height();</div><div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;                    }</div><div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y=first_m; y&lt;last_m; y+=m_step) {</div><div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ymax = std::min(_Msize, y + m_step);</div><div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div><div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> first_pass = (current.k0() == 0);</div><div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> last_pass  = (current.kmax() == _Ktotal);</div><div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div><div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;                        <span class="comment">// Pointer to appropriate part of result array.</span></div><div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                        Tr *result_ptr = this-&gt;_Cptr + (batch * this-&gt;_C_batch_stride) + (current.multi() * this-&gt;_C_multi_stride);</div><div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;</div><div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                        <span class="comment">// If we are using an accumulation buffer, we don&#39;t pass the result buffer to ask the kernel</span></div><div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                        <span class="comment">// to write things into the accumulation buffer instead, except on the last pass.</span></div><div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;                        <span class="keywordflow">if</span> (_accumulation_buffer &amp;&amp; !last_pass) {</div><div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;                            result_ptr = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;                        }</div><div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div><div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;                        <span class="comment">// Perform the kernel and merge step, either separately or together as required.</span></div><div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">kernel_and_merge&lt;MergeStep, FixedFormat, OutputStage&gt;::run</a>(</div><div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;                        #ifdef CYCLE_PROFILING</div><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;                            prof,</div><div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;                        #endif</div><div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                            <span class="comment">// Strategy and panel pointers</span></div><div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                            strat, a_ptr, b_panel, this-&gt;_ldb, c_panel,</div><div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                            <span class="comment">// Result buffer pointers</span></div><div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                            result_ptr, this-&gt;_ldc,</div><div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                            <span class="comment">// K size, and M/N ranges</span></div><div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                            kern_k, y, ymax, current.x0(), current.xmax(),</div><div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                            <span class="comment">// Only do bias on the first pass</span></div><div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                            ((first_pass &amp;&amp; this-&gt;_bias) ? this-&gt;_bias + (current.multi() * this-&gt;_bias_multi_stride) : <span class="keyword">nullptr</span>),</div><div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                            <span class="comment">// Only do activation on the last pass, and accumulation on any non-first pass.</span></div><div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                            (last_pass ? _act : <a class="code" href="structarm__gemm_1_1_activation.xhtml">Activation</a>()), !first_pass,</div><div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                            <span class="comment">// Pass in quantization parameters for requantizing kernels (others will ignore)</span></div><div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                            _os, col_bias + (current.multi() * _Nsize),</div><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                            <span class="comment">// Accumulation buffer</span></div><div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                            get_accumulation_buffer(y, current.x0(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">batch</a>, current.multi()) );</div><div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div><div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                        a_ptr += (strategy::out_height() * a_panel_stride);</div><div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                    }</div><div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                }</div><div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;</div><div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                <span class="keywordflow">if</span> (FixedFormat == <span class="keyword">false</span>) {</div><div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                    b_panel += (<a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.xmax() - current.x0(), strategy::out_width()) * kern_k);</div><div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                }</div><div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            }</div><div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        }</div><div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    }</div><div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div><div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    <span class="comment">// Interface implementation - working space</span></div><div class="line"><a name="l00985"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">  985</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">get_working_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;        <span class="comment">// In all cases, we need one A buffer plus a C buffer per thread, plus an accumulation buffer.</span></div><div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        <span class="keywordtype">size_t</span> size = get_a_working_size() + (get_c_working_size() * _maxthreads) + get_accumulation_buffer_size();</div><div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;        size += 128; <span class="comment">// Add on two cache lines extra for alignment.</span></div><div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;</div><div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        <span class="keywordflow">return</span> size;</div><div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    }</div><div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;</div><div class="line"><a name="l00994"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aee006b8384820aa25720e84b91b32a27">  994</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aee006b8384820aa25720e84b91b32a27">set_working_space</a>(<span class="keywordtype">void</span> *working_space)<span class="keyword"> override </span>{</div><div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        <span class="comment">// Make sure everything ends up cache line aligned</span></div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        int8_t *working_space_bytes = <span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        intptr_t working_space_int = <span class="keyword">reinterpret_cast&lt;</span>intptr_t<span class="keyword">&gt;</span>(working_space);</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;</div><div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        <span class="keywordtype">size_t</span> diff=0;</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;</div><div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <span class="keywordflow">if</span> (working_space_int &amp; 0x3F) {</div><div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;            diff = 0x40 - (working_space_int &amp; 0x3F);</div><div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        }</div><div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;</div><div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        working_space_bytes += diff;</div><div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        working_space_int += diff;</div><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;</div><div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <span class="comment">// Pretransposed case: just set internal pointer to parameter value.</span></div><div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        _working_space = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">void</span> *<span class="keyword">&gt;</span>(working_space_bytes);</div><div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;</div><div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;        <span class="comment">// Set up accumulation buffer</span></div><div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        <span class="keywordflow">if</span> (get_accumulation_buffer_size() &gt; 0) {</div><div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            intptr_t acc_buff_int = working_space_int + get_a_working_size() + (get_c_working_size() * _maxthreads);</div><div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            <span class="comment">// Make sure the accumulation buffer is aligned (needed if the other blocks are not a multiple of cache line length)</span></div><div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;            <span class="keywordflow">if</span> (acc_buff_int &amp; 0x3F) {</div><div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                acc_buff_int += (0x40 - (acc_buff_int &amp; 0x3F));</div><div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;            }</div><div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;            _accumulation_buffer = <span class="keyword">reinterpret_cast&lt;</span>Tab *<span class="keyword">&gt;</span>(acc_buff_int);</div><div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;            _accumulation_buffer = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        }</div><div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    }</div><div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;</div><div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="comment">// Interface implementation - pretransposed</span></div><div class="line"><a name="l01025"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ac5dec5063a75604fdc60555f15577b94"> 1025</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ac5dec5063a75604fdc60555f15577b94">B_is_pretransposed</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>);</div><div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    }</div><div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div><div class="line"><a name="l01029"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c"> 1029</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">B_pretranspose_required</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        <span class="keywordflow">return</span> (FixedFormat == <span class="keyword">false</span>) &amp;&amp; (_B_transposed==<span class="keyword">nullptr</span>);</div><div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    }</div><div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;</div><div class="line"><a name="l01033"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae9fc7380e533c43a1d91e48a7578e412"> 1033</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae9fc7380e533c43a1d91e48a7578e412">get_B_pretransposed_array_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        <span class="keywordflow">if</span> (FixedFormat) {</div><div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;        }</div><div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div><div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Nsize, strategy::out_width());</div><div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;</div><div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;        <span class="keywordflow">return</span> (x_size * _Ktotal * _nmulti * <span class="keyword">sizeof</span>(Toi)) + get_col_sum_size();</div><div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    }</div><div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div><div class="line"><a name="l01043"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa64943c3fd124c455d3c30599d0f663e"> 1043</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa64943c3fd124c455d3c30599d0f663e">get_B_pretranspose_window_size</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;        <span class="keywordtype">size_t</span> n_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Nsize, _x_block);</div><div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="keywordtype">size_t</span> k_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(_Ktotal, _k_block);</div><div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;</div><div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        <span class="keywordflow">return</span> n_blocks * k_blocks * _nmulti;</div><div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    }</div><div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div><div class="line"><a name="l01050"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ae716040d875abeeba60aa4a6b73363"> 1050</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ae716040d875abeeba60aa4a6b73363">requantize_bias</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;            col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;</div><div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;            <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *qp_ptr = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *<span class="keyword">&gt;</span>(&amp;_os);</div><div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;</div><div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;_nmulti; i++) {</div><div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                <span class="comment">// The input is assumed not to have any padding between sections, so straightforward Ksize * Ksections computation gets the total size.</span></div><div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                <a class="code" href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">compute_col_sums</a>(*qp_ptr, _Nsize, _Ksize * _Ksections, B + (i * B_multi_stride), ldb, col_bias + (i * _Nsize), _Ksize * _Ksections, i, 0);</div><div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;            }</div><div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        }</div><div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    }</div><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;</div><div class="line"><a name="l01063"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae385dce1a98e03f0a3ca311f031e5110"> 1063</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae385dce1a98e03f0a3ca311f031e5110">pretranspose_B_array</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        pretranspose_B_array_part(in_buffer, B, ldb, B_multi_stride, 0, get_B_pretranspose_window_size());</div><div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    }</div><div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;</div><div class="line"><a name="l01067"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#acc55eb5049f295e8ea170a9e4bf8d2f2"> 1067</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#acc55eb5049f295e8ea170a9e4bf8d2f2">pretranspose_B_array_part</a>(<span class="keywordtype">void</span> *in_buffer, <span class="keyword">const</span> To *B, <span class="keyword">const</span> <span class="keywordtype">int</span> ldb, <span class="keyword">const</span> <span class="keywordtype">int</span> B_multi_stride, <span class="keywordtype">size_t</span> start, <span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>)<span class="keyword"> override </span>{</div><div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;        <span class="comment">// Perform column sums etc as part of the last block.</span></div><div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;        <span class="keywordflow">if</span> (end &gt;= get_B_pretranspose_window_size()) {</div><div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;            requantize_bias(in_buffer, B, ldb, B_multi_stride);</div><div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;        }</div><div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;</div><div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-quantized cases get_col_sum_size() == 0</span></div><div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;        Toi *buffer = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        _B_transposed = buffer;</div><div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div><div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;        blockwalker current(*<span class="keyword">this</span>);</div><div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        <a class="code" href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a> strat(_ci);</div><div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;</div><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        <span class="comment">// Skip over blocks we aren&#39;t doing</span></div><div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; start; i++) {</div><div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;            buffer += <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.xmax() - current.x0(), strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.kmax() - current.k0(), strategy::k_unroll());</div><div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            current.advance();</div><div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;        }</div><div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;</div><div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        <span class="keywordtype">size_t</span> blocks_left = (end - start);</div><div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;</div><div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;        <span class="comment">// Double check that we haven&#39;t run out of work</span></div><div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;        <span class="keywordflow">if</span> (current.done()) {</div><div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;            blocks_left = 0;</div><div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;        }</div><div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div><div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;        <span class="keywordflow">for</span> (<span class="comment">/* blocks_left initialized above */</span>; blocks_left &gt; 0; blocks_left--) {</div><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;            <span class="comment">/* Figure out the size of each block. */</span></div><div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_size = (current.kmax() - current.k0());</div><div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;</div><div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;            <span class="keywordflow">if</span> (_Ksections &gt; 1) {</div><div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                <span class="comment">// We need to insert padding at the end of each K section.</span></div><div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                <span class="comment">// The computation needed is a little delicate - the coordinates from the block walker are expressed in</span></div><div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                <span class="comment">// terms of the full, padded, _Ktotal.</span></div><div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                <span class="comment">// But we need to transform each section with reference to the original, unpadded, input, letting the</span></div><div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                <span class="comment">// transform pad each section as needed.</span></div><div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;</div><div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                <span class="comment">// This is needed for computations below.</span></div><div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rounded_section_size = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(_Ksize, strategy::k_unroll());</div><div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;</div><div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                <span class="comment">// The expected output format is also an entire &lt;out_width&gt; columns interleaved, then the next set of</span></div><div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                <span class="comment">// columns, and so on.  This means, as we are breaking it up vertically, we have to do it one column at</span></div><div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                <span class="comment">// a time.</span></div><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x0=current.x0(); x0 &lt; current.xmax(); x0 += strategy::out_width() ) {</div><div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> xmax = std::min(x0 + strategy::out_width(), current.xmax());</div><div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div><div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;                    <span class="comment">// Track where we are and how much work is left.</span></div><div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kpos  = current.k0();</div><div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;                    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kleft = k_size;</div><div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;</div><div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;                    <span class="keywordflow">while</span> (kleft) {</div><div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                        <span class="comment">// Which section are we in?  Based on the rounded-up section size.</span></div><div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_section_base = kpos / rounded_section_size;</div><div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                        <span class="comment">// How far into the section are we?</span></div><div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_offset = kpos - (k_section_base * rounded_section_size);</div><div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;</div><div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                        <span class="comment">// We will either copy the rest of this section, or to the end of the requested length.</span></div><div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_length = std::min(_Ksize - k_offset, kleft);</div><div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;</div><div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                        strat.transforms.PrepareB(buffer, B + (current.multi() * B_multi_stride), ldb,</div><div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                                                  x0, xmax,</div><div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                                                  (k_section_base * _Ksize) + k_offset,               <span class="comment">// K starting point - compute row to read based on our section and the true section length.</span></div><div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                                                  (k_section_base * _Ksize) + k_offset + k_length);   <span class="comment">// K end point - starting point plus length computed above.</span></div><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;</div><div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                        <span class="comment">// We need to modify our position based on the ROUNDED version of what we just did.</span></div><div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padded_length = <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(k_length, strategy::k_unroll());</div><div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;</div><div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                        buffer += strategy::out_width() * padded_length;</div><div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;</div><div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                        kpos  += padded_length;</div><div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;                        kleft -= padded_length;</div><div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                    }</div><div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                }</div><div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;                <span class="comment">// In the single K section case, can process the whole lot in one go.</span></div><div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;                <span class="comment">// Caution: &#39;blockwalker::kmax()&#39; rounds up, so clamp to valid _Ksize.</span></div><div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                strat.transforms.PrepareB(buffer, B + (current.multi() * B_multi_stride), ldb,</div><div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                                          current.x0(), current.xmax(), current.k0(), std::min(current.kmax(), _Ksize));</div><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;                buffer += <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.xmax() - current.x0(), strategy::out_width()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(current.kmax() - current.k0(), strategy::k_unroll());</div><div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;            }</div><div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div><div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;            <span class="comment">// Advance to the next block, break if we run off the end.</span></div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;            <span class="keywordflow">if</span> (!current.advance()) {</div><div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;            }</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;        }</div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    }</div><div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div><div class="line"><a name="l01156"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac"> 1156</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">set_pretransposed_B_data</a>(<span class="keywordtype">void</span> *in_buffer)<span class="keyword"> override </span>{</div><div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        <span class="comment">// Put the transposed data after the column sums - in non-quantized cases get_col_sum_size() == 0</span></div><div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        uintptr_t buffer_int = <span class="keyword">reinterpret_cast&lt;</span>uintptr_t<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;        _B_transposed = <span class="keyword">reinterpret_cast&lt;</span>Toi *<span class="keyword">&gt;</span>(buffer_int + get_col_sum_size());</div><div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;        col_bias = <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(in_buffer);</div><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    }</div><div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;</div><div class="line"><a name="l01163"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a4f282c5814fcd207308c4737a1fc567b"> 1163</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a4f282c5814fcd207308c4737a1fc567b">set_quantized_bias</a>(<span class="keyword">const</span> int32_t *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>, <span class="keywordtype">size_t</span> bias_multi_stride)<span class="keyword"> override </span>{</div><div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        <span class="keywordflow">if</span> (std::is_same&lt;OutputStage, Requantize32&gt;::value) {</div><div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;            <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *qp = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="structarm__gemm_1_1_requantize32.xhtml">Requantize32</a> *<span class="keyword">&gt;</span>(&amp;_os);</div><div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div><div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;            qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a> = <a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a>;</div><div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;            qp-&gt;<a class="code" href="structarm__gemm_1_1_requantize32.xhtml#afac6d7d779e04e999149dcf095734294">bias_multi_stride</a> = bias_multi_stride;</div><div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;        }</div><div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    }</div><div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;</div><div class="line"><a name="l01172"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a82b688818137467809617daf73ffdc11"> 1172</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a82b688818137467809617daf73ffdc11">set_indirect_parameters</a>(<span class="keywordtype">size_t</span> string_len, <span class="keyword">const</span> To * <span class="keyword">const</span> * <span class="keyword">const</span> *ptr)<span class="keyword"> override </span>{</div><div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        assert(string_len == _Ksize);</div><div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;        _indirect_buf = ptr;</div><div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;    }</div><div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;</div><div class="line"><a name="l01177"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c"> 1177</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">set_convolution_parameters</a>(<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml">ConvolutionParameters</a> parms)<span class="keyword"> override </span>{</div><div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;        assert(parms.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a49bc030c7b2dbe01762c4db96706f32c">input_channels</a> == _Ksize);</div><div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;        _convolver = std::unique_ptr&lt;convolver&lt;To&gt;&gt;(<span class="keyword">new</span> <a class="code" href="classarm__gemm_1_1convolver.xhtml">convolver&lt;To&gt;</a>(parms));</div><div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    }</div><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;</div><div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <span class="comment">// Estimate cycles for given problem given provided parameters</span></div><div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> perf_type&gt;</div><div class="line"><a name="l01184"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#addccce609e49d240af2703319f2feae7"> 1184</a></span>&#160;    <span class="keyword">static</span> uint64_t <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#addccce609e49d240af2703319f2feae7">estimate_cycles</a>(<span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">GemmArgs</a> &amp;args) {</div><div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k_blocks = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">_Ksize</a>, get_k_block_size(args));</div><div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div><div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        <span class="keyword">const</span> <a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml">PerformanceParameters</a> &amp;params = strategy::template get_performance_parameters&lt;perf_type&gt;(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">_ci</a>);</div><div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;</div><div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;        uint64_t total_macs    = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>, strategy::out_height()) * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * get_ktotal(args);</div><div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        uint64_t prepare_bytes = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>, strategy::out_height()) * get_ktotal(args) * <span class="keyword">sizeof</span>(Toi);</div><div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;        uint64_t merge_bytes   = <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">_nmulti</a> * k_blocks * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a> * <a class="code" href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">roundup</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">_Nsize</a>, strategy::out_width()) * <span class="keyword">sizeof</span>(Tr);</div><div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;</div><div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        <span class="keywordtype">float</span> mac_cycles     = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(total_macs) / params.<a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml#aae5e7478143157dcb85385f506f4f5d3">kernel_macs_cycle</a>;</div><div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        <span class="keywordtype">float</span> prepare_cycles = static_cast&lt;float&gt;(prepare_bytes) / params.<a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml#a47af75329f77f9b1fae756b7b81f1aa7">prepare_bytes_cycle</a>;</div><div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;        <span class="keywordtype">float</span> merge_cycles   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(merge_bytes) / params.<a class="code" href="structarm__gemm_1_1_performance_parameters.xhtml#a3707a174d8c3b387326b6b397083c384">merge_bytes_cycle</a>;</div><div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;</div><div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        <span class="keywordtype">float</span> total_cycles = mac_cycles + prepare_cycles + merge_cycles;</div><div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;</div><div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        <span class="comment">// We can&#39;t thread over multis or width, which makes this a poor</span></div><div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        <span class="comment">// choice in many threaded cases.  Penalize that here.</span></div><div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;        <span class="keywordtype">float</span> parallelism_available = static_cast&lt;float&gt;(<a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">iceildiv</a>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">_Msize</a>, strategy::out_height()) * args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">_nbatches</a>) * 0.9f;</div><div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;</div><div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        <span class="keywordflow">if</span> (parallelism_available &lt; args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a>) {</div><div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;            total_cycles *= (<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(args.<a class="code" href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">_maxthreads</a>) / parallelism_available);</div><div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        }</div><div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;</div><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(total_cycles);</div><div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    }</div><div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;</div><div class="line"><a name="l01210"></a><span class="lineno"><a class="line" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a7cde60064c88a363415fc0639d09cc3e"> 1210</a></span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml#a7cde60064c88a363415fc0639d09cc3e">get_config</a>()<span class="keyword"> override </span>{</div><div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">GemmConfig</a> c;</div><div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;</div><div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a1ade5ed8fc2bd356dfe390ad634ca9e6">method</a> = <a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01">GemmMethod::GEMM_INTERLEAVED</a>;</div><div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">inner_block_size</a> = _k_block;</div><div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">outer_block_size</a> = _x_block;</div><div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a61e0e449fd7e8647d521cafd4f1d55a3">filter</a> = get_type_name&lt;strategy&gt;();</div><div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        c.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">weight_format</a> = <a class="code" href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">get_weight_format</a>(get_kernel_weight_format&lt;strategy, FixedFormat, To&gt;::get(), <span class="keyword">sizeof</span>(To));</div><div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;</div><div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;        <span class="keywordflow">return</span> c;</div><div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;    }</div><div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;};</div><div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div><div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="comment">// Aliases for the variations</span></div><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> OutputStage=Nothing&gt;</div><div class="line"><a name="l01225"></a><span class="lineno"><a class="line" href="namespacearm__gemm.xhtml#a583dce2887201c4fd80390ffe0e5b27d"> 1225</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleavedNoMerge</a> = <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr, OutputStage, false&gt;</a>;</div><div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;</div><div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr, <span class="keyword">typename</span> OutputStage=Nothing&gt;</div><div class="line"><a name="l01228"></a><span class="lineno"><a class="line" href="namespacearm__gemm.xhtml#a73b9c612e3496e550680ec87c0cf5e74"> 1228</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleavedFixedFormat</a> = <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr, OutputStage, true, true&gt;</a>;</div><div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;</div><div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l01231"></a><span class="lineno"><a class="line" href="namespacearm__gemm.xhtml#a22ecc26938c66dbb5b4a4c7c5cd4d430"> 1231</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleavedPretransposedNoMergeQuantizedInline</a> = <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr, Requantize32, false&gt;</a>;</div><div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div><div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> strategy, <span class="keyword">typename</span> To, <span class="keyword">typename</span> Tr&gt;</div><div class="line"><a name="l01234"></a><span class="lineno"><a class="line" href="namespacearm__gemm.xhtml#a991f78a5d5b5c01d42f7ae6e35e0e7ea"> 1234</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleavedQuantized</a> = <a class="code" href="classarm__gemm_1_1_gemm_interleaved.xhtml">GemmInterleaved&lt;strategy, To, Tr, Requantize32&gt;</a>;</div><div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div><div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;} <span class="comment">// namespace arm_gemm</span></div><div class="ttc" id="namespacearm__gemm_xhtml_a2cfd518808ae94de30b3d1a3ba7c7890"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2cfd518808ae94de30b3d1a3ba7c7890">arm_gemm::roundup</a></div><div class="ttdeci">T roundup(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00070">utils.hpp:70</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a8f983ca114ef72d25515a8651ea1d0e7"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a8f983ca114ef72d25515a8651ea1d0e7">arm_gemm::GemmInterleaved::get_window_size</a></div><div class="ttdeci">ndrange_t get_window_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00703">gemm_interleaved.hpp:703</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_addccce609e49d240af2703319f2feae7"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#addccce609e49d240af2703319f2feae7">arm_gemm::GemmInterleaved::estimate_cycles</a></div><div class="ttdeci">static uint64_t estimate_cycles(const GemmArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01184">gemm_interleaved.hpp:1184</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">arm_gemm::Requantize32::bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00172">arm_gemm.hpp:172</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a49bc030c7b2dbe01762c4db96706f32c"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a49bc030c7b2dbe01762c4db96706f32c">arm_gemm::ConvolutionParameters::input_channels</a></div><div class="ttdeci">int64_t input_channels</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00052">convolution_parameters.hpp:52</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_abb02a9fd23c6187807ad015022708985"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#abb02a9fd23c6187807ad015022708985">arm_gemm::GemmArgs::_ci</a></div><div class="ttdeci">const CPUInfo * _ci</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00145">arm_gemm.hpp:145</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_aa64943c3fd124c455d3c30599d0f663e"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa64943c3fd124c455d3c30599d0f663e">arm_gemm::GemmInterleaved::get_B_pretranspose_window_size</a></div><div class="ttdeci">size_t get_B_pretranspose_window_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01043">gemm_interleaved.hpp:1043</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a967adad6c21766e82315265eccfd0ca5"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a967adad6c21766e82315265eccfd0ca5">arm_gemm::GemmArgs::_nmulti</a></div><div class="ttdeci">unsigned int _nmulti</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00151">arm_gemm.hpp:151</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a19076cd620581b8e671ad674359c1b76"><div class="ttname"><a href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76">arm_gemm::KernelWeightFormat</a></div><div class="ttdeci">KernelWeightFormat</div><div class="ttdef"><b>Definition:</b> <a href="kernel__weight__format_8hpp_source.xhtml#l00042">kernel_weight_format.hpp:42</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml">arm_gemm::GemmInterleaved</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00332">gemm_interleaved.hpp:332</a></div></div>
<div class="ttc" id="bfloat_8hpp_xhtml"><div class="ttname"><a href="bfloat_8hpp.xhtml">bfloat.hpp</a></div></div>
<div class="ttc" id="kernel__traits_8hpp_xhtml"><div class="ttname"><a href="kernel__traits_8hpp.xhtml">kernel_traits.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_ac5c8d64b5f5a1c32846af7e260c56f04"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#ac5c8d64b5f5a1c32846af7e260c56f04">arm_gemm::GemmArgs::_Nsize</a></div><div class="ttdeci">unsigned int _Nsize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00147">arm_gemm.hpp:147</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_aa0a931bb25f217a3913e39ed269855c9"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa0a931bb25f217a3913e39ed269855c9">arm_gemm::GemmInterleaved::GemmInterleaved</a></div><div class="ttdeci">GemmInterleaved(const GemmArgs &amp;args, const OutputStage &amp;os)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00678">gemm_interleaved.hpp:678</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_a126a5e90d1af15ccd17a6efe3a47f54b"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#a126a5e90d1af15ccd17a6efe3a47f54b">arm_gemm::Requantize32::b_offset</a></div><div class="ttdeci">int32_t b_offset</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00175">arm_gemm.hpp:175</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01">arm_gemm::GemmMethod::GEMM_INTERLEAVED</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_acc55eb5049f295e8ea170a9e4bf8d2f2"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#acc55eb5049f295e8ea170a9e4bf8d2f2">arm_gemm::GemmInterleaved::pretranspose_B_array_part</a></div><div class="ttdeci">void pretranspose_B_array_part(void *in_buffer, const To *B, const int ldb, const int B_multi_stride, size_t start, size_t end) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01067">gemm_interleaved.hpp:1067</a></div></div>
<div class="ttc" id="kernel__weight__format_8hpp_xhtml"><div class="ttname"><a href="kernel__weight__format_8hpp.xhtml">kernel_weight_format.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a7636397d7134827d6c8368ac5580c7da"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a7636397d7134827d6c8368ac5580c7da">arm_gemm::GemmArgs::_maxthreads</a></div><div class="ttdeci">int _maxthreads</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00154">arm_gemm.hpp:154</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a2ca80c12b0bbb50666d5a1a122359616"><div class="ttname"><a href="namespacearm__gemm.xhtml#a2ca80c12b0bbb50666d5a1a122359616">arm_gemm::get_weight_format</a></div><div class="ttdeci">WeightFormat get_weight_format(const KernelWeightFormat, size_t)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8cpp_source.xhtml#l00040">misc.cpp:40</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
<div class="ttc" id="mergeresults_8hpp_xhtml"><div class="ttname"><a href="mergeresults_8hpp.xhtml">mergeresults.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml_aae5e7478143157dcb85385f506f4f5d3"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml#aae5e7478143157dcb85385f506f4f5d3">arm_gemm::PerformanceParameters::kernel_macs_cycle</a></div><div class="ttdeci">float kernel_macs_cycle</div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00029">performance_parameters.hpp:29</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a4f282c5814fcd207308c4737a1fc567b"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a4f282c5814fcd207308c4737a1fc567b">arm_gemm::GemmInterleaved::set_quantized_bias</a></div><div class="ttdeci">void set_quantized_bias(const int32_t *bias, size_t bias_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01163">gemm_interleaved.hpp:1163</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00095">CpuGemmAssemblyDispatch.cpp:95</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a0ae716040d875abeeba60aa4a6b73363"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a0ae716040d875abeeba60aa4a6b73363">arm_gemm::GemmInterleaved::requantize_bias</a></div><div class="ttdeci">void requantize_bias(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01050">gemm_interleaved.hpp:1050</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a82b688818137467809617daf73ffdc11"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a82b688818137467809617daf73ffdc11">arm_gemm::GemmInterleaved::set_indirect_parameters</a></div><div class="ttdeci">void set_indirect_parameters(size_t string_len, const To *const *const *ptr) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01172">gemm_interleaved.hpp:1172</a></div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_acf6183a5e4721a137bfce29c8b2febdb"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#acf6183a5e4721a137bfce29c8b2febdb">arm_gemm::GemmArgs::_cfg</a></div><div class="ttdeci">const GemmConfig * _cfg</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00157">arm_gemm.hpp:157</a></div></div>
<div class="ttc" id="arm__gemm_8hpp_xhtml"><div class="ttname"><a href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_acc7f8048c4c8eb94458999a3e13fc519"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#acc7f8048c4c8eb94458999a3e13fc519">arm_gemm::GemmConfig::inner_block_size</a></div><div class="ttdeci">unsigned int inner_block_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00110">arm_gemm.hpp:110</a></div></div>
<div class="ttc" id="structarm__gemm_1_1is__sme_xhtml"><div class="ttname"><a href="structarm__gemm_1_1is__sme.xhtml">arm_gemm::is_sme</a></div><div class="ttdef"><b>Definition:</b> <a href="kernel__traits_8hpp_source.xhtml#l00047">kernel_traits.hpp:47</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a3266f7e33a1db61de7fad71bf193d101"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a3266f7e33a1db61de7fad71bf193d101">arm_gemm::GemmConfig::outer_block_size</a></div><div class="ttdeci">unsigned int outer_block_size</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00111">arm_gemm.hpp:111</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml_a3707a174d8c3b387326b6b397083c384"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml#a3707a174d8c3b387326b6b397083c384">arm_gemm::PerformanceParameters::merge_bytes_cycle</a></div><div class="ttdeci">float merge_bytes_cycle</div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00031">performance_parameters.hpp:31</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00106">arm_gemm.hpp:106</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00142">arm_gemm.hpp:142</a></div></div>
<div class="ttc" id="convolver_8hpp_xhtml"><div class="ttname"><a href="convolver_8hpp.xhtml">convolver.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ae9fc7380e533c43a1d91e48a7578e412"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae9fc7380e533c43a1d91e48a7578e412">arm_gemm::GemmInterleaved::get_B_pretransposed_array_size</a></div><div class="ttdeci">size_t get_B_pretransposed_array_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01033">gemm_interleaved.hpp:1033</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml_a9bbea489f6defd913b01a39e05e708e4"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml#a9bbea489f6defd913b01a39e05e708e4">arm_gemm::NDCoordinate::get_position</a></div><div class="ttdeci">int_t get_position(int_t d) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00176">ndrange.hpp:176</a></div></div>
<div class="ttc" id="transform_8hpp_xhtml"><div class="ttname"><a href="transform_8hpp.xhtml">transform.hpp</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a2f7ed43a30966415307da837a24ee3ab"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a2f7ed43a30966415307da837a24ee3ab">arm_compute::mlgo::parser::advance</a></div><div class="ttdeci">void advance(CharPosition &amp;pos, char ch)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00147">MLGOParser.cpp:147</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a62d3274bfacd0e46e112520266f8d68f"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a62d3274bfacd0e46e112520266f8d68f">arm_gemm::GemmInterleaved::GemmInterleaved</a></div><div class="ttdeci">GemmInterleaved(const GemmArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00688">gemm_interleaved.hpp:688</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a1ade5ed8fc2bd356dfe390ad634ca9e6"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a1ade5ed8fc2bd356dfe390ad634ca9e6">arm_gemm::GemmConfig::method</a></div><div class="ttdeci">GemmMethod method</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00108">arm_gemm.hpp:108</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_abf5a58f6feffeae31f48b750cba9303d"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#abf5a58f6feffeae31f48b750cba9303d">arm_gemm::GemmInterleaved::get_working_size</a></div><div class="ttdeci">size_t get_working_size() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00985">gemm_interleaved.hpp:985</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ae385dce1a98e03f0a3ca311f031e5110"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae385dce1a98e03f0a3ca311f031e5110">arm_gemm::GemmInterleaved::pretranspose_B_array</a></div><div class="ttdeci">void pretranspose_B_array(void *in_buffer, const To *B, const int ldb, const int B_multi_stride) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01063">gemm_interleaved.hpp:1063</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00096">CpuGemmAssemblyDispatch.cpp:96</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a263ff38ffa728f5579e77ffd9c85e6dd"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">arm_gemm::GemmConfig::weight_format</a></div><div class="ttdeci">WeightFormat weight_format</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00112">arm_gemm.hpp:112</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a19076cd620581b8e671ad674359c1b76aa2730bd24646daa3279918eeff467d8c"><div class="ttname"><a href="namespacearm__gemm.xhtml#a19076cd620581b8e671ad674359c1b76aa2730bd24646daa3279918eeff467d8c">arm_gemm::KernelWeightFormat::NON_FIXED</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a6e76d099f51fc0ef7f48dbd7d00214ac"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a6e76d099f51fc0ef7f48dbd7d00214ac">arm_gemm::GemmInterleaved::set_pretransposed_B_data</a></div><div class="ttdeci">void set_pretransposed_B_data(void *in_buffer) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01156">gemm_interleaved.hpp:1156</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ae7e6d203d0e3e46ebd521951b72c6f7c"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ae7e6d203d0e3e46ebd521951b72c6f7c">arm_gemm::GemmInterleaved::set_convolution_parameters</a></div><div class="ttdeci">void set_convolution_parameters(ConvolutionParameters parms) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01177">gemm_interleaved.hpp:1177</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_af96bef5f590df4bd6149576c22be99bb"><div class="ttname"><a href="working__space_8hpp.xhtml#af96bef5f590df4bd6149576c22be99bb">strategy</a></div><div class="ttdeci">const StratType * strategy</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00105">working_space.hpp:105</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml">arm_gemm::GemmCommon</a></div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00169">gemm_common.hpp:169</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a85b38740fa6151d6e5fcfc48e8008d47"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a85b38740fa6151d6e5fcfc48e8008d47">arm_gemm::GemmArgs::_Msize</a></div><div class="ttdeci">unsigned int _Msize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00146">arm_gemm.hpp:146</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml">arm_compute::CPUInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00066">CPPTypes.h:66</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a61970c81ba14081e613c12d0e85af761"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a61970c81ba14081e613c12d0e85af761">arm_compute::CPUInfo::get_L1_cache_size</a></div><div class="ttdeci">unsigned int get_L1_cache_size() const</div><div class="ttdoc">Gets the L1 cache size. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00129">CPPTypes.cpp:129</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml_a3152ff6ceec3d31c02feb4e91812f040"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml#a3152ff6ceec3d31c02feb4e91812f040">arm_compute::CPUInfo::get_L2_cache_size</a></div><div class="ttdeci">unsigned int get_L2_cache_size() const</div><div class="ttdoc">Gets the L2 cache size. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8cpp_source.xhtml#l00134">CPPTypes.cpp:134</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a06403ad5596b5405787cfca12e5b815e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run</a></div><div class="ttdeci">lstmq run()</div></div>
<div class="ttc" id="gemm__interleaved_8hpp_xhtml_a5560b3c73e2e50a0b1bda1fa70ec58af"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a5560b3c73e2e50a0b1bda1fa70ec58af">ROUND_UP</a></div><div class="ttdeci">#define ROUND_UP(x)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00048">gemm_interleaved.hpp:48</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml">arm_gemm::ConvolutionParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00048">convolution_parameters.hpp:48</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml">arm_gemm::PerformanceParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00028">performance_parameters.hpp:28</a></div></div>
<div class="ttc" id="classarm__gemm_1_1convolver_xhtml"><div class="ttname"><a href="classarm__gemm_1_1convolver.xhtml">arm_gemm::convolver</a></div><div class="ttdef"><b>Definition:</b> <a href="convolver_8hpp_source.xhtml#l00051">convolver.hpp:51</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a5ef9b17d8d1641178b4327a376312282"><div class="ttname"><a href="namespacearm__gemm.xhtml#a5ef9b17d8d1641178b4327a376312282">arm_gemm::requantize_block_32</a></div><div class="ttdeci">void requantize_block_32(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const Tin *input, unsigned int in_stride, Tout *output, unsigned int out_stride, const int32_t *row_bias, const int32_t *col_bias, unsigned int start_col)</div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a076dad6d7efce7170dcd2efecc69d1e6"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a076dad6d7efce7170dcd2efecc69d1e6">x_end</a></div><div class="ttdeci">const uint32_t x_end</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00047">impl.cpp:47</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_aa7cfff39cbb2be65cd40042a75e5ae1c"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#aa7cfff39cbb2be65cd40042a75e5ae1c">arm_gemm::GemmInterleaved::B_pretranspose_required</a></div><div class="ttdeci">bool B_pretranspose_required() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01029">gemm_interleaved.hpp:1029</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a468e9c50d4decc2ba86f9bd393ba27d6"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a468e9c50d4decc2ba86f9bd393ba27d6">arm_gemm::GemmInterleaved::set_nthreads</a></div><div class="ttdeci">void set_nthreads(int nthreads) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00715">gemm_interleaved.hpp:715</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_aee006b8384820aa25720e84b91b32a27"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#aee006b8384820aa25720e84b91b32a27">arm_gemm::GemmInterleaved::set_working_space</a></div><div class="ttdeci">void set_working_space(void *working_space) override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00994">gemm_interleaved.hpp:994</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a59c0fe7170dec3dfc80b80a33fc48955"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a59c0fe7170dec3dfc80b80a33fc48955">arm_compute::test::validation::batch</a></div><div class="ttdeci">const unsigned int batch</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00362">GEMMMatrixMultiplyNative.cpp:362</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml">arm_gemm::NDCoordinate</a></div><div class="ttdoc">NDCoordinate builds upon a range, but specifies a starting position in addition to a size which it in...</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00151">ndrange.hpp:151</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00169">arm_gemm.hpp:169</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a0f7c3bb1a6bbcb34dc0988ef61510c38"><div class="ttname"><a href="namespacearm__gemm.xhtml#a0f7c3bb1a6bbcb34dc0988ef61510c38">arm_gemm::compute_col_sums</a></div><div class="ttdeci">void compute_col_sums(const Requantize32 &amp;qp, unsigned int width, unsigned int height, const T *input, unsigned int in_stride, int32_t *col_bias, unsigned int depth, unsigned int multi, unsigned int first_col)</div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_a2ab0ad50d3c2b2be030026132b00add6"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#a2ab0ad50d3c2b2be030026132b00add6">arm_gemm::GemmArgs::_Ksections</a></div><div class="ttdeci">unsigned int _Ksections</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00149">arm_gemm.hpp:149</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml_afac6d7d779e04e999149dcf095734294"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml#afac6d7d779e04e999149dcf095734294">arm_gemm::Requantize32::bias_multi_stride</a></div><div class="ttdeci">size_t bias_multi_stride</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00173">arm_gemm.hpp:173</a></div></div>
<div class="ttc" id="quantized_8hpp_xhtml"><div class="ttname"><a href="quantized_8hpp.xhtml">quantized.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a61e0e449fd7e8647d521cafd4f1d55a3"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a61e0e449fd7e8647d521cafd4f1d55a3">arm_gemm::GemmConfig::filter</a></div><div class="ttdeci">std::string filter</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00109">arm_gemm.hpp:109</a></div></div>
<div class="ttc" id="performance__parameters_8hpp_xhtml"><div class="ttname"><a href="performance__parameters_8hpp.xhtml">performance_parameters.hpp</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_range_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_n_d_range.xhtml">arm_gemm::NDRange</a></div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00034">ndrange.hpp:34</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_adb59e12af95e4ab605ffc3e12b41de58"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#adb59e12af95e4ab605ffc3e12b41de58">arm_gemm::GemmArgs::_Ksize</a></div><div class="ttdeci">unsigned int _Ksize</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00148">arm_gemm.hpp:148</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a33ee2954a8e8fb991cd139c9345841c3"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a33ee2954a8e8fb991cd139c9345841c3">x_start</a></div><div class="ttdeci">const uint32_t x_start</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00046">impl.cpp:46</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ac5dec5063a75604fdc60555f15577b94"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ac5dec5063a75604fdc60555f15577b94">arm_gemm::GemmInterleaved::B_is_pretransposed</a></div><div class="ttdeci">bool B_is_pretransposed() const override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01025">gemm_interleaved.hpp:1025</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml_aca00029952f2150554138015af1ac1ce"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml#aca00029952f2150554138015af1ac1ce">arm_gemm::GemmArgs::_nbatches</a></div><div class="ttdeci">unsigned int _nbatches</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00150">arm_gemm.hpp:150</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_n_d_coordinate_xhtml_a582a56796981d98bba73d4de244bd21e"><div class="ttname"><a href="classarm__gemm_1_1_n_d_coordinate.xhtml#a582a56796981d98bba73d4de244bd21e">arm_gemm::NDCoordinate::get_position_end</a></div><div class="ttdeci">int_t get_position_end(int_t d) const</div><div class="ttdef"><b>Definition:</b> <a href="ndrange_8hpp_source.xhtml#l00190">ndrange.hpp:190</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_ada8f6414f6f5c604c7d30fd478c016c9"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#ada8f6414f6f5c604c7d30fd478c016c9">arm_gemm::GemmInterleaved::execute</a></div><div class="ttdeci">void execute(const ndcoord_t &amp;work_range, const ndcoord_t &amp;, int threadid) override</div><div class="ttdoc">Main execute member fucntion. </div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00720">gemm_interleaved.hpp:720</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00123">arm_gemm.hpp:123</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_interleaved_xhtml_a7cde60064c88a363415fc0639d09cc3e"><div class="ttname"><a href="classarm__gemm_1_1_gemm_interleaved.xhtml#a7cde60064c88a363415fc0639d09cc3e">arm_gemm::GemmInterleaved::get_config</a></div><div class="ttdeci">GemmConfig get_config() override</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l01210">gemm_interleaved.hpp:1210</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_performance_parameters_xhtml_a47af75329f77f9b1fae756b7b81f1aa7"><div class="ttname"><a href="structarm__gemm_1_1_performance_parameters.xhtml#a47af75329f77f9b1fae756b7b81f1aa7">arm_gemm::PerformanceParameters::prepare_bytes_cycle</a></div><div class="ttdeci">float prepare_bytes_cycle</div><div class="ttdef"><b>Definition:</b> <a href="performance__parameters_8hpp_source.xhtml#l00030">performance_parameters.hpp:30</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_9847dd9cb7a28e46201717fa7336cf62.xhtml">arm_gemm</a></li><li class="navelem"><a class="el" href="gemm__interleaved_8hpp.xhtml">gemm_interleaved.hpp</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:26 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
