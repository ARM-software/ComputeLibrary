<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/operators/internal/CpuGemmAssemblyDispatch.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_cpu_gemm_assembly_dispatch_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">CpuGemmAssemblyDispatch.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2018-2023 Arm Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_gemm_assembly_dispatch_8h.xhtml">src/cpu/operators/internal/CpuGemmAssemblyDispatch.h</a>&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_scheduler_8h.xhtml">arm_compute/runtime/NEON/NEScheduler.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml">src/core/CPP/Validate.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">src/core/NEON/kernels/arm_gemm/utils.hpp</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_memory_helpers_8h.xhtml">src/core/helpers/MemoryHelpers.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_assembly_utils_8h.xhtml">src/core/utils/AssemblyUtils.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_gemm_assembly_wrapper_kernel_8h.xhtml">src/cpu/kernels/assembly/CpuGemmAssemblyWrapperKernel.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__gemm_8hpp.xhtml">src/cpu/kernels/assembly/arm_gemm.hpp</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_cpu_aux_tensor_handler_8h.xhtml">src/cpu/utils/CpuAuxTensorHandler.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>cpu</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{<span class="comment"></span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/** Run pretranspose_B_array in parallel (1D static scheduling)</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> * @tparam TypeInput</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * @tparam TypeOutput</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> * @param[in] gemm_asm         GemmCommon kernel to run</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * @param[in] dst              Pretransposed B array</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @param[in] src              B array to be pretransposed</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * @param[in] src_ld           Stride in y</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> * @param[in] src_multi_stride Stride in z (&quot;multi&quot;)</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> * @param[in] num_threads      Number of threads to run this method. Must be &gt;= 1</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput&gt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keywordtype">void</span> run_parallel_pretranspose_B_array(<a class="code" href="classarm__gemm_1_1_gemm_common.xhtml">arm_gemm::GemmCommon&lt;TypeInput, TypeOutput&gt;</a> *gemm_asm, ITensor *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <span class="keyword">const</span> TypeInput *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, <span class="keywordtype">int</span> src_ld, <span class="keywordtype">int</span> src_multi_stride, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(gemm_asm == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_threads == 0);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// The window size is also the total workload size</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> wsize = gemm_asm-&gt;<a class="code" href="classarm__gemm_1_1_i_gemm_common.xhtml#a37e8736d7db6afdeab374b248599a573">get_B_pretranspose_window_size</a>();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    std::vector&lt;IScheduler::Workload&gt; workloads(num_threads);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> = 0; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> &lt; num_threads; ++<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        workloads[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>] = [ = ](<span class="keyword">const</span> ThreadInfo &amp; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> start = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.thread_id * wsize) / num_threads;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>   = ((<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.thread_id + 1) * wsize) / num_threads;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">if</span>(start &lt; end)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                gemm_asm-&gt;<a class="code" href="classarm__gemm_1_1_gemm_common.xhtml#a5addbdb1697735d2024f01186c222841">pretranspose_B_array_part</a>(dst-&gt;buffer(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, src_ld, src_multi_stride, start, <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        };</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">run_tagged_workloads</a>(workloads, <span class="stringliteral">&quot;CpuGemmAssemblyDispatch/pretranspose_B_array&quot;</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;} <span class="comment">// namespace</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacearm__compute_1_1experimental.xhtml">arm_compute::experimental</a>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">namespace</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">struct </span>free_delete</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keywordtype">void</span> *x)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        free(x);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;};</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">struct </span>Params</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;{</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">   95</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a>;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">   96</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a>;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">   97</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a>;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">   98</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a637a6ee96e5440d25e6e67513a06a639">   99</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a637a6ee96e5440d25e6e67513a06a639">multis</a>;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">  100</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a>;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a9a5250a0c844eba2b009bc5e35978614">  101</a></span>&#160;    <span class="keywordtype">bool</span>         <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a9a5250a0c844eba2b009bc5e35978614">indirect</a>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;};</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;Params extract_parameters(<span class="keyword">const</span> ITensorInfo *a, <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <span class="keyword">const</span> ITensorInfo *d, <span class="keyword">const</span> AsmGemmInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(a, b, d);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    Params p;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    p.M        = d-&gt;tensor_shape().y();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    p.K        = a-&gt;tensor_shape().x();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    p.N        = d-&gt;tensor_shape().x();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    p.batches  = 1;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    p.multis   = 1;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    p.sections = 1;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    p.indirect = <span class="keyword">false</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span>(info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">AsmConvMethod::Conv</a> || info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">AsmConvMethod::Indirect</a>)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        p.indirect = <span class="keyword">true</span>;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        p.sections = b-&gt;tensor_shape()[2] * b-&gt;tensor_shape()[3];</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        p.multis  = b-&gt;tensor_shape().z();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        p.batches = d-&gt;tensor_shape().total_size_upper(2) / p.multis;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Update M in case of GEMM3D for output</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span>(info.depth_output_gemm3d != 0)</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        p.M       = d-&gt;tensor_shape().y() * d-&gt;tensor_shape().z();</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        p.batches = d-&gt;tensor_shape().total_size_upper(3) / p.multis;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">return</span> p;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;IScheduler::Hints scheduling_hint_heuristic(<a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5">arm_gemm::GemmMethod</a> method, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">data_type</a>)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Schedule assembly kernel</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>         granule_threshold = 200;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    IScheduler::Hints scheduling_hint   = IScheduler::Hints(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span>(method == <a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01">arm_gemm::GemmMethod::GEMM_INTERLEAVED</a> &amp;&amp; data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        scheduling_hint = IScheduler::Hints(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">IScheduler::StrategyHint::DYNAMIC</a>, granule_threshold);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(method == <a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a0f170db61ecb7e386a972fdf2c4e4bdb">arm_gemm::GemmMethod::GEMM_INTERLEAVED_2D</a> &amp;&amp; (data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a> || data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a> || data_type == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> || data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>))</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">//GEMM_INTERLEAVED supports 2D parallelism, IScheduler::split_dimensions_all signals to parallelise over all window dimensions</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        scheduling_hint = IScheduler::Hints(<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">IScheduler::split_dimensions_all</a>, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">IScheduler::StrategyHint::STATIC</a>, granule_threshold);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(method == <a class="code" href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a781048ddfd21fd0402717d7e83b9fc5e">arm_gemm::GemmMethod::QUANTIZE_WRAPPER_2D</a> &amp;&amp; (data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> || data_type == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>))</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">//special case for QASYMM8 to support 2D parallelism, scheduler here may be tweaked differently compared to FP32 case</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        scheduling_hint = IScheduler::Hints(<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">IScheduler::split_dimensions_all</a>, <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">IScheduler::StrategyHint::STATIC</a>, granule_threshold);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">return</span> scheduling_hint;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">/** Fallback in case ACL doesn&#39;t have a function */</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage = arm_gemm::Nothing&gt;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">class </span>Fallback : <span class="keyword">public</span> CpuGemmAssemblyDispatch::IFallback</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">    /** Destructor */</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    ~Fallback() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">    /** Initialise the functions&#39;s input and output.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">     * @param[in]  a         Input tensor containing the Matrix A.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">     * @param[in]  b         Input tensor containing the Matrix B.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">     * @param[in]  c         Input tensor containing the Matrix C.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">     * @param[out] d         Output tensor to store the result of matrix multiplication.</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">     * @param[in]  args      Matrix multiplication information.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     * @param[in]  gemm_info GEMM meta-data</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     * @param[in]  os        Output stage meta-data.</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">configure</a>(<span class="keyword">const</span> ITensorInfo *a, <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <span class="keyword">const</span> ITensorInfo *c, ITensorInfo *d,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                   <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keyword">const</span> AsmGemmInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa08a9b7cf30c1c3e56ca1d2060313408">gemm_info</a>,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                   <span class="keyword">const</span> OutputStage &amp;os = {});</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">    /** Set requantization shifts to be used</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">     * @param[in] shifts Requantization shifts</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">     * @return Pointer to the shift data</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">     */</span><span class="comment"></span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    /** Set requantization data to be used</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">      *</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">      *</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">      * @param shifts       Requantization shifts</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">      * @param multipliers  Requantization multipliers</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">      *</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">      * @return A tuple with the pointers to the shift and multiplier data respectively</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">      */</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::tuple&lt;bool, const int32_t *, const int32_t *, const int32_t *&gt; set_requantize_data(<span class="keyword">const</span> std::vector&lt;int32_t&gt; &amp;shifts,</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                                                                            <span class="keyword">const</span> std::vector&lt;int32_t&gt; &amp;multipliers);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Inherited methods overridden:</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">run</a>(ITensorPack &amp;tensors) <span class="keyword">override</span>;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordtype">void</span> prepare(ITensorPack &amp;tensors) <span class="keyword">override</span>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordtype">bool</span>                             is_configured() <span class="keyword">const override</span>;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> workspace() <span class="keyword">const override</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">bool</span>                             isVarWeightsKernel()<span class="keyword"> const override</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">if</span>(!_gemm_kernel_asm)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> wf = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#adde66c1efbb7e8a58b031fdb6d936abc">assembly_utils::map_to_arm_compute_weight_format</a>(_gemm_kernel_asm-&gt;get_config().weight_format);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">return</span> wf != <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a> &amp;&amp; wf != <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">arm_compute::WeightFormat::ANY</a>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">enum</span> AuxTensorIdx</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        AsmGemmWorkspace = 0,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        Pretranspose,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        Count</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    };</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">    /** Configure the indirect buffer</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">     * @param[in]  a    Input tensor containing the Matrix A.</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">     * @param[in]  b    Input tensor containing the Matrix B.</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">     * @param[out] d    Output tensor to store the result of matrix multiplication.</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">     * @param[in]  info GEMM meta-data</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">void</span> configure_indirect(<span class="keyword">const</span> ITensorInfo *a, <span class="keyword">const</span> ITensorInfo *b, <span class="keyword">const</span> ITensorInfo *d, <span class="keyword">const</span> AsmGemmInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);<span class="comment"></span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">    /** Prepare the indirect buffer */</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordtype">void</span> prepare_indirect_buffer(ITensorPack &amp;tensors);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">    /** Assembly Gemm kernel */</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::shared_ptr&lt;arm_gemm::GemmCommon&lt;TypeInput, TypeOutput&gt;&gt; _gemm_kernel_asm{ <span class="keyword">nullptr</span> };<span class="comment"></span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">    /** Optimised Arm® Neon™ kernel */</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    std::unique_ptr&lt;INEKernel&gt; _optimised_kernel{ <span class="keyword">nullptr</span> };<span class="comment"></span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">    /** Assembly GEMM workspace tensor info */</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    TensorInfo _workspace_info{};<span class="comment"></span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">    /** Pre-transpose tensor info */</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    TensorInfo _pretranspose_info{};<span class="comment"></span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">    /** Prepared flag */</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordtype">bool</span> _is_prepared{ <span class="keyword">false</span> };<span class="comment"></span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">    /** GEMM meta-data */</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    AsmGemmInfo _gemm_info{};<span class="comment"></span></div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">    /** GEMM kernel description */</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <a class="code" href="structarm__gemm_1_1_kernel_description.xhtml">arm_gemm::KernelDescription</a> _kernel_info{};<span class="comment"></span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">    /** Per channel quantization shifts */</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    std::vector&lt;int32_t&gt; _shifts{};</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    std::vector&lt;int32_t&gt; right_shifts{};</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    std::vector&lt;int32_t&gt; left_shifts{};<span class="comment"></span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">    /** Per channel quantization multipliers */</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    std::vector&lt;int32_t&gt; _multipliers{};<span class="comment"></span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">    /** Indirect buffer */</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    std::unique_ptr&lt;const TypeInput *const *, free_delete&gt; _indirect_arg{};</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    std::unique_ptr&lt;const TypeInput *, free_delete&gt;        _indirect_buf{};</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    std::vector&lt;TypeInput&gt;           _indirect_pad{};</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml">arm_gemm::ConvolutionParameters</a>  _cp{};</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> _aux_mem{ Count };</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordtype">bool</span>                             _B_pretranspose_required{ <span class="keyword">false</span> };</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordtype">bool</span>                             _is_b_constant{ <span class="keyword">true</span> };</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordtype">bool</span>                             _is_c_constant{ <span class="keyword">true</span> };</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;};</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;std::tuple&lt;bool, const int32_t *, const int32_t *, const int32_t *&gt;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::set_requantize_data(<span class="keyword">const</span> std::vector&lt;int32_t&gt; &amp;shifts, <span class="keyword">const</span> std::vector&lt;int32_t&gt; &amp;multipliers)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    _multipliers   = multipliers;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    _shifts        = shifts;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordtype">bool</span> need_left = <span class="keyword">false</span>;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> s : _shifts)</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        left_shifts.push_back(std::max(-s, int32_t(0)));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        right_shifts.push_back(std::min(-s, int32_t(0)));</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">if</span>(s &lt; 0 &amp;&amp; !need_left)</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            need_left = <span class="keyword">true</span>;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> std::make_tuple(need_left, left_shifts.data(), right_shifts.data(), _multipliers.data());</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="keywordtype">void</span> Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::prepare_indirect_buffer(ITensorPack &amp;tensors)</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;{</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keyword">auto</span>             a              = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">const</span> TypeInput *A_ptr          = <span class="keyword">reinterpret_cast&lt;</span>TypeInput *<span class="keyword">&gt;</span>(a-&gt;buffer());</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a637a6ee96e5440d25e6e67513a06a639">multis</a>         = 1;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>        <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>        = a-&gt;info()-&gt;tensor_shape().total_size_upper(3);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     stride_A       = a-&gt;info()-&gt;strides_in_bytes().y() / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     batch_stride_A = a-&gt;info()-&gt;strides_in_bytes()[3] / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     multi_stride_A = a-&gt;info()-&gt;strides_in_bytes()[4] / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> output_hw    = _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a609de0503f28d274ed0efee9d77d85fb">output_height</a> * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#ad05cf0e53a315e9f3070ff16c7f0a334">output_width</a>;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    batch_size   = _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a6d3feaa4bf76f68289ae537b8c682b19">kernel_height</a> * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">kernel_width</a> * output_hw * <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> batch_stride = batch_size / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>    multi_size   = batch_size * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> multi_stride = multi_size / <span class="keyword">sizeof</span>(TypeInput);</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">for</span>(int64_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a637a6ee96e5440d25e6e67513a06a639">multis</a>; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>++)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">for</span>(int64_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>++)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">for</span>(int64_t output_y = 0; output_y &lt; _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a609de0503f28d274ed0efee9d77d85fb">output_height</a>; output_y++)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <span class="keywordflow">for</span>(int64_t output_x = 0; output_x &lt; _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#ad05cf0e53a315e9f3070ff16c7f0a334">output_width</a>; output_x++)</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    int64_t output_xy = (output_y * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#ad05cf0e53a315e9f3070ff16c7f0a334">output_width</a>) + output_x;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    <span class="keywordflow">for</span>(int64_t kernel_y = 0; kernel_y &lt; _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a6d3feaa4bf76f68289ae537b8c682b19">kernel_height</a>; kernel_y++)</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                        <span class="keywordflow">for</span>(int64_t kernel_x = 0; kernel_x &lt; _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">kernel_width</a>; kernel_x++)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                        {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                            int64_t input_x   = (output_x * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#ad6b5f3c7d7ed9e644c80b119317bc2e6">output_stride_w</a>) + kernel_x - _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a8437e73cc2c21cfd03b1738950c1d8e1">padding_left</a>;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                            int64_t input_y   = (output_y * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#aaf20144858a9194d3bb0bfaa9ed0ddc2">output_stride_h</a>) + kernel_y - _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a0b43a7c0dfa50b241f1bb3215f05dce7">padding_top</a>;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                            int64_t kernel_xy = (kernel_y * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">kernel_width</a>) + kernel_x;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                            int64_t input_xy  = (input_y * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a92d838c7fa4a409bbf8bb39db15005ee">input_width</a>) + input_x;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                            <span class="keywordflow">if</span>(input_x &lt; 0 || input_x &gt;= _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a92d838c7fa4a409bbf8bb39db15005ee">input_width</a> || input_y &lt; 0 || input_y &gt;= _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#ac775e8bdef77e9f38c7e41a2d589ced0">input_height</a>)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                            {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                _indirect_buf.get()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * multi_stride + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * batch_stride + kernel_xy * output_hw + output_xy] = _indirect_pad.data();</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                            }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                            <span class="keywordflow">else</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                            {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                                _indirect_buf.get()[<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * multi_stride + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * batch_stride + kernel_xy * output_hw + output_xy] =</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                    A_ptr + (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * multi_stride_A + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * batch_stride_A + input_xy * stride_A);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                            }</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                        }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                }</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            }</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="keywordtype">void</span> Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::configure_indirect(<span class="keyword">const</span> ITensorInfo *a, <span class="keyword">const</span> ITensorInfo *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <span class="keyword">const</span> ITensorInfo *d, <span class="keyword">const</span> AsmGemmInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(!(info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">AsmConvMethod::Conv</a> || info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">AsmConvMethod::Indirect</a>));</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordtype">float</span> zeropad = 0.f;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(a-&gt;data_type()))</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        zeropad = a-&gt;quantization_info().uniform().offset;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">const</span> int64_t <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>    = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(a-&gt;tensor_shape()[1]);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keyword">const</span> int64_t <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>   = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(a-&gt;tensor_shape()[2]);</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keyword">const</span> int64_t input_channels = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(a-&gt;tensor_shape()[0]);</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">const</span> int64_t kernel_width   = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(b-&gt;tensor_shape()[2]);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keyword">const</span> int64_t kernel_height  = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(b-&gt;tensor_shape()[3]);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keyword">const</span> int64_t output_width   = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(d-&gt;tensor_shape()[1]);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keyword">const</span> int64_t output_height  = <span class="keyword">static_cast&lt;</span>int64_t<span class="keyword">&gt;</span>(d-&gt;tensor_shape()[2]);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    _cp = { <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a>, <a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a>, input_channels, kernel_width, kernel_height, output_width, output_height,</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            info.ps_info.stride().first, info.ps_info.stride().second, info.padding_top, info.padding_left, zeropad</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;          };</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">if</span>(info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">AsmConvMethod::Conv</a>)</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        _gemm_kernel_asm-&gt;set_convolution_parameters(_cp);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">if</span>(info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">AsmConvMethod::Indirect</a>)</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a637a6ee96e5440d25e6e67513a06a639">multis</a>    = 1;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>   = a-&gt;tensor_shape().total_size_upper(3);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kernel_hw = _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">kernel_width</a> * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a6d3feaa4bf76f68289ae537b8c682b19">kernel_height</a>;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> output_hw = _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#ad05cf0e53a315e9f3070ff16c7f0a334">output_width</a> * _cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a609de0503f28d274ed0efee9d77d85fb">output_height</a>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keyword">using</span> TypeInputPtr        = TypeInput *;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>    batch_size   = kernel_hw * output_hw * <span class="keyword">sizeof</span>(TypeInputPtr);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> batch_stride = batch_size / <span class="keyword">sizeof</span>(TypeInputPtr);</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>    multi_size   = batch_size * <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span> multi_stride = multi_size / <span class="keyword">sizeof</span>(TypeInputPtr);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        _indirect_buf = std::unique_ptr&lt;const TypeInput *, free_delete&gt;(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput **<span class="keyword">&gt;</span>(malloc(multi_size * multis)));</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        _indirect_arg = std::unique_ptr&lt;const TypeInput *const *, free_delete&gt;(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput *<span class="keyword">const </span>**<span class="keyword">&gt;</span>(malloc(<span class="keyword">sizeof</span>(TypeInput **) * kernel_hw * multis * batches)));</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        _indirect_pad = std::vector&lt;TypeInput&gt;(_cp.<a class="code" href="structarm__gemm_1_1_convolution_parameters.xhtml#a49bc030c7b2dbe01762c4db96706f32c">input_channels</a>, TypeInput(zeropad));</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="comment">// Set indirect argument</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        int64_t pos = 0;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">for</span>(int64_t <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a637a6ee96e5440d25e6e67513a06a639">multis</a>; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a>++)</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="keywordflow">for</span>(int64_t b = 0; b &lt; <a class="code" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a>; b++)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                <span class="keywordflow">for</span>(int64_t kernel_xy = 0; kernel_xy &lt; kernel_hw; kernel_xy++)</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                {</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    (_indirect_arg.get())[pos++] = _indirect_buf.get() + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">m</a> * multi_stride + b * batch_stride + kernel_xy * output_hw;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                }</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        _gemm_kernel_asm-&gt;set_indirect_parameters(a-&gt;tensor_shape()[0], _indirect_arg.get());</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    }</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;}</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::configure</a>(<span class="keyword">const</span> ITensorInfo *a, <span class="keyword">const</span> ITensorInfo *b, <span class="keyword">const</span> ITensorInfo *c, ITensorInfo *d,</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                                             <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, <span class="keyword">const</span> AsmGemmInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa08a9b7cf30c1c3e56ca1d2060313408">gemm_info</a>,</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                                             <span class="keyword">const</span> OutputStage &amp;os)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;{</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(c);</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    _is_b_constant = b-&gt;are_values_constant();</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    _is_c_constant = c ? c-&gt;are_values_constant() : <span class="keyword">true</span>;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    _gemm_kernel_asm = arm_gemm::gemm&lt;TypeInput, TypeOutput, OutputStage&gt;(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>, os);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">if</span>(_gemm_kernel_asm == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="comment">//configuration not supported: Leave function unconfigured:</span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a> gemm_cfg = _gemm_kernel_asm-&gt;get_config();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// arm_compute wrapper for the Gemm object (see above)</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">auto</span> acl_gemm_wrapper = std::make_unique&lt;kernel::CpuGemmAssemblyWrapperKernel&lt;TypeInput, TypeOutput&gt;&gt;();</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(acl_gemm_wrapper == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    acl_gemm_wrapper-&gt;configure(_gemm_kernel_asm.get(), gemm_cfg.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a61e0e449fd7e8647d521cafd4f1d55a3">filter</a>);</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       workspace_size = _gemm_kernel_asm-&gt;get_working_size();</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> alignment      = 4096;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    _workspace_info                   = TensorInfo(TensorShape(workspace_size), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    _aux_mem[AsmGemmWorkspace]        = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(AsmGemmWorkspace), MemoryLifetime::Temporary, workspace_size, alignment);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">//if we disable this code below in brackets then ConvLayer deadlocks when threads &gt; 1 and</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">//the shapes are In=1x1x1024 Weights=1x1x1024x1001 Biases=1001 Out=1x1x1001</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    {</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_size = _gemm_kernel_asm-&gt;get_window_size().total_size();</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="keywordflow">if</span>(window_size &lt; static_cast&lt;unsigned int&gt;(args._maxthreads))</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            _gemm_kernel_asm-&gt;set_nthreads(window_size);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    _optimised_kernel = std::move(acl_gemm_wrapper);</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    _gemm_info        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa08a9b7cf30c1c3e56ca1d2060313408">gemm_info</a>;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="comment">// Check for pre-transposed support</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">if</span>(_gemm_kernel_asm-&gt;B_pretranspose_required())</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    {</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="comment">// Forcing 128-byte alignment (required by 32-bit kernels)</span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> alignment           = 128;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">size_t</span>       B_pretranspose_size = _gemm_kernel_asm-&gt;get_B_pretransposed_array_size();</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        _pretranspose_info                     = TensorInfo(TensorShape(B_pretranspose_size), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        _aux_mem[Pretranspose]                 = <a class="code" href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">MemoryInfo</a>(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(Pretranspose), MemoryLifetime::Persistent, B_pretranspose_size, alignment);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        _B_pretranspose_required               = <span class="keyword">true</span>;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    }</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="comment">// Handle indirect GEMM convolution</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">if</span>(gemm_info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">AsmConvMethod::Conv</a> || gemm_info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">AsmConvMethod::Indirect</a>)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    {</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        configure_indirect(a, b, d, gemm_info);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    }</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;}</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="keywordtype">void</span> Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::prepare(ITensorPack &amp;tensors)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;{</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">if</span>(!_is_prepared)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keyword">auto</span> b = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keyword">auto</span> c = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">TensorType::ACL_SRC_2</a>);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="comment">// Setup up matrix bias in the assembly kernel, it&#39;s just a pointer to matrix C.</span></div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <span class="keywordflow">if</span>(c &amp;&amp; c-&gt;info()-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        {</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            _gemm_kernel_asm-&gt;set_quantized_bias(reinterpret_cast&lt;const int32_t *&gt;(c-&gt;buffer() + c-&gt;info()-&gt;offset_first_element_in_bytes()), 0);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        }</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="comment">// Pretranspose B if required</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keywordflow">if</span>(_gemm_kernel_asm-&gt;B_pretranspose_required())</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <span class="comment">// Fixed format kernels need no pretranspose.</span></div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute.xhtml#a10608f5b5910df56c8dd68f687bc5c54">arm_compute::is_fixed_format</a>(<a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#adde66c1efbb7e8a58b031fdb6d936abc">assembly_utils::map_to_arm_compute_weight_format</a>(_gemm_kernel_asm-&gt;get_config().weight_format)));</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>  ldb            = b-&gt;info()-&gt;strides_in_bytes().y() / b-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> in1_ptr        = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput *<span class="keyword">&gt;</span>(b-&gt;buffer() + b-&gt;info()-&gt;offset_first_element_in_bytes());</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>  multi_stride_b = b-&gt;info()-&gt;strides_in_bytes().z() / b-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            CpuAuxTensorHandler pretranspose(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(Pretranspose), _pretranspose_info, tensors, <span class="keyword">false</span>);</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pretranspose.get()-&gt;buffer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            run_parallel_pretranspose_B_array&lt;TypeInput, TypeOutput&gt;(_gemm_kernel_asm.get(), pretranspose.get(), in1_ptr, ldb, multi_stride_b, <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>());</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            b-&gt;mark_as_unused();</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        }</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">if</span>(_gemm_info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">AsmConvMethod::Indirect</a>)</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        {</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            prepare_indirect_buffer(tensors);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        _is_prepared = <span class="keyword">true</span>;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    }</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;}</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="keywordtype">bool</span> Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::is_configured()<span class="keyword"> const</span></div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keywordflow">return</span> _optimised_kernel != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<a class="code" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::workspace()<span class="keyword"> const</span></div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keywordflow">return</span> _aux_mem;</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;}</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput, <span class="keyword">class</span> OutputStage&gt;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">Fallback&lt;TypeInput, TypeOutput, OutputStage&gt;::run</a>(ITensorPack &amp;tensors)</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;{</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keyword">auto</span> a = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">TensorType::ACL_SRC_0</a>);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keyword">auto</span> b = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">TensorType::ACL_SRC_1</a>);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">auto</span> c = tensors.get_const_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">TensorType::ACL_SRC_2</a>);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keyword">auto</span> d = tensors.get_tensor(<a class="code" href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">TensorType::ACL_DST</a>);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordtype">int</span>       lda = a-&gt;info()-&gt;strides_in_bytes().y() / a-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordtype">int</span>       ldb = 0;</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> ldd = d-&gt;info()-&gt;strides_in_bytes().y() / d-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> a_batch_idx = _gemm_info.reinterpret_input_as_3d != 0 ? 3 : 2;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> a_multi_idx = a_batch_idx + 1;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> d_batch_idx = _gemm_info.depth_output_gemm3d != 0 ? 3 : 2;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> d_multi_idx = d_batch_idx + 1;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordtype">int</span>       batch_stride_a = a-&gt;info()-&gt;strides_in_bytes()[a_batch_idx] / a-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> batch_stride_d = d-&gt;info()-&gt;strides_in_bytes()[d_batch_idx] / d-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordtype">int</span>       multi_stride_a = a-&gt;info()-&gt;strides_in_bytes()[a_multi_idx] / a-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordtype">int</span>       multi_stride_b = 0;</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> multi_stride_d = d-&gt;info()-&gt;strides_in_bytes()[d_multi_idx] / d-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keyword">auto</span>             in0_ptr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput *<span class="keyword">&gt;</span>(a-&gt;buffer() + a-&gt;info()-&gt;offset_first_element_in_bytes());</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">const</span> TypeInput *in1_ptr = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keyword">auto</span>             out_ptr = <span class="keyword">reinterpret_cast&lt;</span>TypeOutput *<span class="keyword">&gt;</span>(d-&gt;buffer() + d-&gt;info()-&gt;offset_first_element_in_bytes());</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="comment">// Check if B is pre-tranposed and de-reference if not</span></div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keywordflow">if</span>(!_gemm_kernel_asm-&gt;B_is_pretransposed())</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    {</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        ldb            = b-&gt;info()-&gt;strides_in_bytes().y() / b-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        multi_stride_b = b-&gt;info()-&gt;strides_in_bytes().z() / b-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        in1_ptr        = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput *<span class="keyword">&gt;</span>(b-&gt;buffer() + b-&gt;info()-&gt;offset_first_element_in_bytes());</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    }</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="comment">// If necessary, run pretranspose every time if either weights or biases are non-constant</span></div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">if</span>((b &amp;&amp; !_is_b_constant) || (c &amp;&amp; !_is_c_constant &amp;&amp; c-&gt;info()-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>))</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    {</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="keywordflow">if</span>(c &amp;&amp; c-&gt;info()-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        {</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            _gemm_kernel_asm-&gt;set_quantized_bias(reinterpret_cast&lt;const int32_t *&gt;(c-&gt;buffer() + c-&gt;info()-&gt;offset_first_element_in_bytes()), 0);</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        }</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="comment">// Pretranspose B if required</span></div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        <span class="keywordflow">if</span>(_B_pretranspose_required)</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        {</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>  ldb            = b-&gt;info()-&gt;strides_in_bytes().y() / b-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> b_ptr          = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>TypeInput *<span class="keyword">&gt;</span>(b-&gt;buffer() + b-&gt;info()-&gt;offset_first_element_in_bytes());</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span>  multi_stride_b = b-&gt;info()-&gt;strides_in_bytes().z() / b-&gt;info()-&gt;element_size();</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            CpuAuxTensorHandler pretranspose(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(Pretranspose), _pretranspose_info, tensors, <span class="keyword">true</span>);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(pretranspose.get()-&gt;buffer() == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            <span class="keywordflow">if</span>(_is_b_constant)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            {</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                _gemm_kernel_asm-&gt;requantize_bias(pretranspose.get()-&gt;buffer(), b_ptr, ldb, multi_stride_b);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            }</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            {</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                run_parallel_pretranspose_B_array&lt;TypeInput, TypeOutput&gt;(_gemm_kernel_asm.get(), pretranspose.get(), b_ptr, ldb, multi_stride_b, <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>());</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            }</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        }</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> scheduling_hint = scheduling_hint_heuristic(_kernel_info.<a class="code" href="structarm__gemm_1_1_kernel_description.xhtml#a1ade5ed8fc2bd356dfe390ad634ca9e6">method</a>, d-&gt;info()-&gt;data_type());</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="comment">// Set workspace if needed and reset number of threads as buffer manager gets re-created with max_threads</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    CpuAuxTensorHandler workspace(<a class="code" href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">offset_int_vec</a>(AsmGemmWorkspace), _workspace_info, tensors, <span class="keyword">false</span>);</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">if</span>(workspace.get()-&gt;buffer() != <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    {</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        _gemm_kernel_asm-&gt;set_working_space(reinterpret_cast&lt;void *&gt;(workspace.get()-&gt;buffer()));</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> split_dim   = scheduling_hint.split_dimension();</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> window_size = _gemm_kernel_asm-&gt;get_window_size().total_size();</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       num_threads = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>();</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keywordflow">if</span>(window_size &lt; num_threads)</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        {</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            num_threads = window_size;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        }</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="keywordflow">if</span>(split_dim != <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">IScheduler::split_dimensions_all</a>)</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        {</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="comment">// Make sure the kernel does not expect more threads than we can actually spawn</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_iterations = _optimised_kernel.get()-&gt;window().num_iterations(split_dim);</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            num_threads                       = std::min(num_iterations, num_threads);</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        }</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        _gemm_kernel_asm-&gt;set_nthreads(num_threads);</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    }</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">// Prepare assembly kernel</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    prepare(tensors);</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="comment">// Setup up matrix bias in the assembly kernel, it&#39;s just a pointer to matrix C.</span></div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    TypeOutput *<a class="code" href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keywordflow">if</span>(c &amp;&amp; c-&gt;info()-&gt;data_type() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    {</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        bias = <span class="keyword">reinterpret_cast&lt;</span>TypeOutput *<span class="keyword">&gt;</span>(c-&gt;buffer() + c-&gt;info()-&gt;offset_first_element_in_bytes());</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    }</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordflow">if</span>(_gemm_info.method == <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">AsmConvMethod::Indirect</a>)</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    {</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        in0_ptr        = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        lda            = 0;</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        batch_stride_a = 0;</div><div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        multi_stride_a = 0;</div><div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div><div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="comment">// Set gemm parameters</span></div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    _gemm_kernel_asm-&gt;set_arrays(in0_ptr, lda, batch_stride_a, multi_stride_a,</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                                 in1_ptr, ldb, multi_stride_b,</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                 out_ptr, ldd, batch_stride_d, multi_stride_d,</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                 bias, 0);</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="comment">// Schedule</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">schedule</a>(_optimised_kernel.get(), scheduling_hint);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput&gt;</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="keywordtype">void</span> create_arm_gemm(std::unique_ptr&lt;CpuGemmAssemblyDispatch::IFallback&gt; &amp;<a class="code" href="namespacearm__gemm.xhtml">arm_gemm</a>,</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                     <span class="keyword">const</span> ITensorInfo *a, <span class="keyword">const</span> ITensorInfo *b, <span class="keyword">const</span> ITensorInfo *c, ITensorInfo *d,</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                     <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a> activation, <span class="keyword">const</span> AsmGemmInfo &amp;info)</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;{</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    Params         p           = extract_parameters(a, b, d, info);</div><div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aebd17baa1051d175e76c2910848a9d14">ci</a>          = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>();</div><div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   num_threads = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>();</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a> cfg;</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    cfg.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">weight_format</a> = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#ad49f7ee1e6dc6bba0526a75213113605">assembly_utils::map_to_arm_gemm_weight_format</a>(info.weight_format);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>(&amp;ci, p.M, p.N, p.K, p.sections, p.batches, p.multis, p.indirect, activation, num_threads, info.fixed_format, info.fast_mode, &amp;cfg);</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    <span class="comment">// Create arm_gemm fallback</span></div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">auto</span> fallback = std::make_unique&lt;Fallback&lt;TypeInput, TypeOutput&gt;&gt;();</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    fallback-&gt;configure(a, b, c, d, args, info);</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    arm_gemm = std::move(fallback);</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;}</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TypeInput, <span class="keyword">typename</span> TypeOutput&gt;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keywordtype">void</span> create_arm_gemm_quant(std::unique_ptr&lt;CpuGemmAssemblyDispatch::IFallback&gt; &amp;arm_gemm,</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                           <span class="keyword">const</span> ITensorInfo *a, <span class="keyword">const</span> ITensorInfo *b, <span class="keyword">const</span> ITensorInfo *c, ITensorInfo *d,</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                           <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a> activation, <span class="keyword">const</span> AsmGemmInfo &amp;info)</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;{</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(activation);</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    Params             p           = extract_parameters(a, b, d, info);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a>     &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aebd17baa1051d175e76c2910848a9d14">ci</a>          = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>();</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_threads = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>();</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a> cfg;</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    cfg.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">weight_format</a> = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#ad49f7ee1e6dc6bba0526a75213113605">assembly_utils::map_to_arm_gemm_weight_format</a>(info.weight_format);</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>(&amp;ci, p.M, p.N, p.K, p.sections, p.batches, p.multis, p.indirect, activation, num_threads, info.fixed_format, info.fast_mode, &amp;cfg);</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="comment">// Create arm_gemm fallback</span></div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keyword">auto</span> fallback = std::make_unique&lt;Fallback&lt;TypeInput, TypeOutput, arm_gemm::Requantize32&gt;&gt;();</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="comment">// Configure requantization info</span></div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keyword">const</span> int32_t                 negation = info.negated_offsets ? 1 : -1;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    <span class="keyword">const</span> int32_t                 a_offset = -a-&gt;quantization_info().uniform().offset * negation;</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keyword">const</span> int32_t                 b_offset = -b-&gt;quantization_info().uniform().offset * negation;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keyword">const</span> GEMMLowpOutputStageInfo os_info  = info.output_stage;</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a> gemm_requant_info{};</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordflow">if</span>(os_info.gemmlowp_shifts.size() &gt; 1)</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    {</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> requantize_data = fallback-&gt;set_requantize_data(os_info.gemmlowp_shifts, os_info.gemmlowp_multipliers);</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        gemm_requant_info          = <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a>(<span class="keyword">nullptr</span>, 0,</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                                                            a_offset, b_offset, os_info.gemmlowp_offset,</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                                                            (std::get&lt;0&gt;(requantize_data)) ? std::get&lt;1&gt;(requantize_data) : <span class="keyword">nullptr</span>,</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                                                            std::get&lt;2&gt;(requantize_data),</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                                                            std::get&lt;3&gt;(requantize_data),</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                                                            os_info.gemmlowp_min_bound, os_info.gemmlowp_max_bound);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    {</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        gemm_requant_info = <a class="code" href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a>(<span class="keyword">nullptr</span>, 0,</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                                                   a_offset, b_offset, os_info.gemmlowp_offset,</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                                                   -os_info.gemmlowp_shift, os_info.gemmlowp_multiplier,</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                                                   os_info.gemmlowp_min_bound, os_info.gemmlowp_max_bound);</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    }</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="comment">// Configure fallback</span></div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    fallback-&gt;configure(a, b, c, d, args, info, gemm_requant_info);</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    arm_gemm = std::move(fallback);</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;}</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;} <span class="comment">//namespace</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00687"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a527ebcdee3c94fd6f80842ede72ef99a">  687</a></span>&#160;<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a527ebcdee3c94fd6f80842ede72ef99a">CpuGemmAssemblyDispatch::CpuGemmAssemblyDispatch</a>()</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    : _arm_gemm(nullptr)</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;{</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;}</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a5148a10005b9dd2e63269b4028b36191">  692</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a5148a10005b9dd2e63269b4028b36191">CpuGemmAssemblyDispatch::has_opt_impl</a>(<a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> &amp;expected_weight_format, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *c, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *d,</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                             <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml">AsmGemmInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;{</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(a, b, d);</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(c);</div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a> act         = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#ad8ec24d82bff0c90b32860cc48e26345">assembly_utils::map_to_arm_gemm_activation</a>(info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#ad5f55d98fbe268b4eb6225aca14a2403">activation_info</a>);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    Params               p           = extract_parameters(a, b, d, info);</div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a>       &amp;<a class="code" href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aebd17baa1051d175e76c2910848a9d14">ci</a>          = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>();</div><div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         num_threads = <a class="code" href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">NEScheduler::get</a>().<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>();</div><div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a> cfg;</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    cfg.<a class="code" href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">weight_format</a>                           = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#ad49f7ee1e6dc6bba0526a75213113605">assembly_utils::map_to_arm_gemm_weight_format</a>(info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#a440c3faa85c2766ec4681807a906bf53">weight_format</a>);</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <a class="code" href="namespacearm__gemm.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_gemm::WeightFormat</a> arm_gemm_expected_wf = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#ad49f7ee1e6dc6bba0526a75213113605">assembly_utils::map_to_arm_gemm_weight_format</a>(expected_weight_format);</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <a class="code" href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a>     <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>(&amp;ci, p.M, p.N, p.K, p.sections, p.batches, p.multis, p.indirect, act, num_threads, info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#af09a906dc166b5cc0eff7fa11fd92ca9">fixed_format</a>, info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#ab562a17bf232cdbe7aaaed2ca4ab7d0a">fast_mode</a>, &amp;cfg);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="keywordflow">switch</span>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    {</div><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(arm_gemm::has_opt_gemm&lt;float, float, arm_gemm::Nothing&gt;(arm_gemm_expected_wf, args, {})),</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                                            <span class="stringliteral">&quot;We could not find an optimized kernel for F32 input&quot;</span>);</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            <span class="keywordflow">if</span>(d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div><div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            {</div><div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(arm_gemm::has_opt_gemm&lt;uint8_t, uint32_t, arm_gemm::Nothing&gt;(arm_gemm_expected_wf, args, {})),</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                                                <span class="stringliteral">&quot;We could not find an optimized kernel for U8/QASYMM8 input and U32 output&quot;</span>);</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            }</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            {</div><div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(arm_gemm::has_opt_gemm&lt;uint8_t, uint8_t, arm_gemm::Requantize32&gt;(arm_gemm_expected_wf, args, {})),</div><div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                                                <span class="stringliteral">&quot;We could not find an optimized kernel for U8 input and U8 output&quot;</span>);</div><div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            }</div><div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            <span class="keywordflow">if</span>(d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            {</div><div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(arm_gemm::has_opt_gemm&lt;int8_t, int32_t, arm_gemm::Nothing&gt;(arm_gemm_expected_wf, args, {})),</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                                                <span class="stringliteral">&quot;We could not find an optimized kernel for S8/QASYMM8_SIGNED input and S32 output&quot;</span>);</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            }</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            {</div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(arm_gemm::has_opt_gemm&lt;int8_t, int8_t, arm_gemm::Requantize32&gt;(arm_gemm_expected_wf, args, {})),</div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                                                <span class="stringliteral">&quot;We could not find an optimized kernel for S8 input and S8 output&quot;</span>);</div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            }</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_ENABLE_BF16)</span></div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>:</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        {</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(arm_gemm::has_opt_gemm&lt;bfloat16, float, arm_gemm::Nothing&gt;(arm_gemm_expected_wf, args, {})),</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                            <span class="stringliteral">&quot;We could not find an optimized kernel for BFLOAT16 input and F32 output&quot;</span>);</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        }</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_ENABLE_BF16) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(arm_gemm::has_opt_gemm&lt;float16_t, float16_t, arm_gemm::Nothing&gt;(arm_gemm_expected_wf, args, {})),</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                            <span class="stringliteral">&quot;We could not find an optimized kernel for F16 input and F16 output&quot;</span>);</div><div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(<span class="keyword">true</span>, <span class="stringliteral">&quot;Usupported type. Could not find a kernel&quot;</span>);</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    }</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    expected_weight_format = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#adde66c1efbb7e8a58b031fdb6d936abc">assembly_utils::map_to_arm_compute_weight_format</a>(arm_gemm_expected_wf);</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>{};</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;}</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00762"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#ad1ae76c1f4f99aca4e9678c1322497e5">  762</a></span>&#160;<a class="code" href="classarm__compute_1_1_status.xhtml">Status</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#ad1ae76c1f4f99aca4e9678c1322497e5">CpuGemmAssemblyDispatch::validate</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *c, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *d, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml">AsmGemmInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;{</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(c, info);</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a>(a, b, d);</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a>(a);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <a class="code" href="src_2core_2_c_p_p_2_validate_8h.xhtml#ac7b5bc4d3468863e77d119593e15880d">ARM_COMPUTE_RETURN_ERROR_ON_CPU_BF16_UNSUPPORTED</a>(a);</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(!(info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#a4e5b42582f93c7e7d4be4e027f863319">reshape_b_only_on_first_run</a>), <span class="stringliteral">&quot;Assembly kernel will not be executed when reshape_b_only_on_first_run is false&quot;</span>);</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="preprocessor">#ifndef __aarch64__</span></div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">element_size</a>() == 1, <span class="stringliteral">&quot;8bit integer types only supported for aarch64&quot;</span>);</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(a, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>,</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(b, 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">DataType::QSYMM8_PER_CHANNEL</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>,</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                                                         <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(b-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()))</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    {</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a>(a, 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>);</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    }</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0">is_fixed_format_fast_math</a>(info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#a440c3faa85c2766ec4681807a906bf53">weight_format</a>))</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    {</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>(a, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a>(b, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>);</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    }</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    {</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a>(a, b);</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    }</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a> &amp;&amp; d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, <span class="stringliteral">&quot;Only F32 output supported for F32 input&quot;</span>);</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a> &amp;&amp; d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>, <span class="stringliteral">&quot;Only F16 output supported for F16 input&quot;</span>);</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a> &amp;&amp; d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>, <span class="stringliteral">&quot;Only F32 output supported for BFLOAT16 input&quot;</span>);</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a> &amp;&amp; d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">DataType::U32</a>, <span class="stringliteral">&quot;Only U32 output supported for U8 input&quot;</span>);</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a> &amp;&amp; d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>, <span class="stringliteral">&quot;Only S32 output supported for S8 input&quot;</span>);</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> &amp;&amp; (d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a> &amp;&amp; d-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() != <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>),</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                                    <span class="stringliteral">&quot;Only QASYMM8/S32 output supported for QASYMM8 input&quot;</span>);</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a> expected_weight_format;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_status.xhtml">Status</a>              ret = <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a5148a10005b9dd2e63269b4028b36191">CpuGemmAssemblyDispatch::has_opt_impl</a>(expected_weight_format, a, b, c, d, info);</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="keywordflow">if</span>((<span class="keywordtype">bool</span>)ret &amp;&amp; expected_weight_format != <a class="code" href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">arm_compute::WeightFormat::ANY</a>)</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    {</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="comment">// Correctness check: if the format expected by the kernel is</span></div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <span class="comment">// not &quot;any&quot;, make sure that the one found matches the format</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        <span class="comment">// intended by the caller.</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <a class="code" href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a>((expected_weight_format != info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#a440c3faa85c2766ec4681807a906bf53">weight_format</a>),</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                                        <span class="stringliteral">&quot;The format expected by the kernel does not correspond with the one requested by the user.&quot;</span>);</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;}</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a15eae37f4cc172cf75bf9bc64b840ce5">  810</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a15eae37f4cc172cf75bf9bc64b840ce5">CpuGemmAssemblyDispatch::is_activation_supported</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> &amp;activation)</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;{</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a> act = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#ad8ec24d82bff0c90b32860cc48e26345">assembly_utils::map_to_arm_gemm_activation</a>(activation);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">return</span> act.<a class="code" href="structarm__gemm_1_1_activation.xhtml#ab6f4e6d3fde00ce906e46494f60dfe7a">type</a> != <a class="code" href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a6adf97f83acf6453d4a6a4b1070f3754">arm_gemm::Activation::Type::None</a>;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;}</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div><div class="line"><a name="l00816"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a1c90377b949c122fd2bd4e932668de78">  816</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a1c90377b949c122fd2bd4e932668de78">CpuGemmAssemblyDispatch::configure</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *a, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *c, <a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *d, <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml">AsmGemmInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;{</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(a, b, d);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <a class="code" href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a> act = <a class="code" href="namespacearm__compute_1_1assembly__utils.xhtml#ad8ec24d82bff0c90b32860cc48e26345">assembly_utils::map_to_arm_gemm_activation</a>(info.<a class="code" href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#ad5f55d98fbe268b4eb6225aca14a2403">activation_info</a>);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="comment">//If we don&#39;t support a combination of data types, silently return: it is the caller&#39;s responsibility to check if configure() was successful via is_configured()</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keywordflow">if</span>(!<a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#ad1ae76c1f4f99aca4e9678c1322497e5">CpuGemmAssemblyDispatch::validate</a>(a, b, c, d, info))</div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    {</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    }</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keywordflow">switch</span>(a-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>())</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    {</div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>:</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            create_arm_gemm&lt;float, float&gt;(_arm_gemm, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, d, act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;<span class="preprocessor">#ifdef __aarch64__</span></div><div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">DataType::U8</a>:</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>:</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            <span class="keywordflow">if</span>(d-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            {</div><div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;                create_arm_gemm&lt;uint8_t, uint32_t&gt;(_arm_gemm, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, d, act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;            }</div><div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            {</div><div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                create_arm_gemm_quant&lt;uint8_t, uint8_t&gt;(_arm_gemm, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, d, act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            }</div><div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">DataType::S8</a>:</div><div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>:</div><div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            <span class="keywordflow">if</span>(d-&gt;data_type() == <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>)</div><div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            {</div><div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;                create_arm_gemm&lt;int8_t, int32_t&gt;(_arm_gemm, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, d, act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            }</div><div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            {</div><div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                create_arm_gemm_quant&lt;int8_t, int8_t&gt;(_arm_gemm, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, d, act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            }</div><div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __aarch64__ */</span><span class="preprocessor"></span></div><div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="preprocessor">#if defined(ARM_COMPUTE_ENABLE_BF16)</span></div><div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">DataType::BFLOAT16</a>:</div><div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            create_arm_gemm&lt;bfloat16, float&gt;(_arm_gemm, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, d, act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* defined(ARM_COMPUTE_ENABLE_BF16) */</span><span class="preprocessor"></span></div><div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span></div><div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">DataType::F16</a>:</div><div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            create_arm_gemm&lt;float16_t, float16_t&gt;(_arm_gemm, a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>, c, d, act, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div><div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    }</div><div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;}</div><div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div><div class="line"><a name="l00871"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#af4d2c35e9fbc329b2e1b2acb864265aa">  871</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#af4d2c35e9fbc329b2e1b2acb864265aa">CpuGemmAssemblyDispatch::prepare</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div><div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;{</div><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_arm_gemm == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    _arm_gemm-&gt;prepare(tensors);</div><div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;}</div><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div><div class="line"><a name="l00877"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#ab7c16a89cb470f3fa85818ee85e1e1dd">  877</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#ab7c16a89cb470f3fa85818ee85e1e1dd">CpuGemmAssemblyDispatch::is_configured</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordflow">return</span> _arm_gemm &amp;&amp; _arm_gemm-&gt;is_configured();</div><div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;}</div><div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;</div><div class="line"><a name="l00882"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a684a54d1fb1634a348a585c6b5e76df0">  882</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a684a54d1fb1634a348a585c6b5e76df0">CpuGemmAssemblyDispatch::run</a>(<a class="code" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors)</div><div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;{</div><div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_arm_gemm == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    _arm_gemm-&gt;run(tensors);</div><div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;}</div><div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div><div class="line"><a name="l00888"></a><span class="lineno"><a class="line" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a74ae0d6e96f38fecd38471431786b870">  888</a></span>&#160;<a class="code" href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">experimental::MemoryRequirements</a> <a class="code" href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a74ae0d6e96f38fecd38471431786b870">CpuGemmAssemblyDispatch::workspace</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(_arm_gemm == <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    <span class="keywordflow">return</span> _arm_gemm-&gt;workspace();</div><div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;}</div><div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;} <span class="comment">// namespace cpu</span></div><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="ttc" id="namespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">Utils.h:1030</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_a1d1cfd8ffb84e947f82999c682b666a7a6adf97f83acf6453d4a6a4b1070f3754"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#a1d1cfd8ffb84e947f82999c682b666a7a6adf97f83acf6453d4a6a4b1070f3754">arm_gemm::Activation::Type::None</a></div></div>
<div class="ttc" id="_cpu_aux_tensor_handler_8h_xhtml"><div class="ttname"><a href="_cpu_aux_tensor_handler_8h.xhtml">CpuAuxTensorHandler.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1cpu_1_1_asm_gemm_info_xhtml_ab562a17bf232cdbe7aaaed2ca4ab7d0a"><div class="ttname"><a href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#ab562a17bf232cdbe7aaaed2ca4ab7d0a">arm_compute::cpu::AsmGemmInfo::fast_mode</a></div><div class="ttdeci">bool fast_mode</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00054">CpuGemmAssemblyDispatch.h:54</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a49bc030c7b2dbe01762c4db96706f32c"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a49bc030c7b2dbe01762c4db96706f32c">arm_gemm::ConvolutionParameters::input_channels</a></div><div class="ttdeci">int64_t input_channels</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00052">convolution_parameters.hpp:52</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a01cea947a24713975f86d0769bf8fad5">arm_compute::ACL_SRC_2</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00047">Types.h:47</a></div></div>
<div class="ttc" id="structarm__compute_1_1cpu_1_1_asm_gemm_info_xhtml_ad5f55d98fbe268b4eb6225aca14a2403"><div class="ttname"><a href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#ad5f55d98fbe268b4eb6225aca14a2403">arm_compute::cpu::AsmGemmInfo::activation_info</a></div><div class="ttdeci">ActivationLayerInfo activation_info</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00046">CpuGemmAssemblyDispatch.h:46</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710a0b5ca9d0c6dbcbb3e299361cd4e4a79c">arm_compute::cpu::AsmConvMethod::Indirect</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a6f62ab7395c218e03e9d2942309c13a2">arm_compute::ACL_DST</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00055">Types.h:55</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a92d838c7fa4a409bbf8bb39db15005ee"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a92d838c7fa4a409bbf8bb39db15005ee">arm_gemm::ConvolutionParameters::input_width</a></div><div class="ttdeci">int64_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00050">convolution_parameters.hpp:50</a></div></div>
<div class="ttc" id="structarm__compute_1_1experimental_1_1_memory_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1experimental_1_1_memory_info.xhtml">arm_compute::experimental::MemoryInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00096">Types.h:96</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml_ad2633f3560322e1f8d926949dec1b730"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml#ad2633f3560322e1f8d926949dec1b730">ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_F16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00115">Validate.h:115</a></div></div>
<div class="ttc" id="_memory_helpers_8h_xhtml"><div class="ttname"><a href="_memory_helpers_8h.xhtml">MemoryHelpers.h</a></div></div>
<div class="ttc" id="structarm__compute_1_1cpu_1_1_asm_gemm_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml">arm_compute::cpu::AsmGemmInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00042">CpuGemmAssemblyDispatch.h:42</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml_ac7b5bc4d3468863e77d119593e15880d"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml#ac7b5bc4d3468863e77d119593e15880d">ARM_COMPUTE_RETURN_ERROR_ON_CPU_BF16_UNSUPPORTED</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_CPU_BF16_UNSUPPORTED(tensor)</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_p_p_2_validate_8h_source.xhtml#l00121">Validate.h:121</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a4a554761cc948f6b9437c42fd62a1d01">arm_gemm::GemmMethod::GEMM_INTERLEAVED</a></div></div>
<div class="ttc" id="namespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a6669348b484e3008dca2bfa8e85e40b5">arm_compute::Format::U8</a></div><div class="ttdoc">1 channel, 1 U8 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_a15eae37f4cc172cf75bf9bc64b840ce5"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a15eae37f4cc172cf75bf9bc64b840ce5">arm_compute::cpu::CpuGemmAssemblyDispatch::is_activation_supported</a></div><div class="ttdeci">static bool is_activation_supported(const ActivationLayerInfo &amp;activation)</div><div class="ttdoc">Checks if activation is supported by the gemm assembly dispatcher. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00810">CpuGemmAssemblyDispatch.cpp:810</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="structarm__compute_1_1cpu_1_1_asm_gemm_info_xhtml_a4e5b42582f93c7e7d4be4e027f863319"><div class="ttname"><a href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#a4e5b42582f93c7e7d4be4e027f863319">arm_compute::cpu::AsmGemmInfo::reshape_b_only_on_first_run</a></div><div class="ttdeci">bool reshape_b_only_on_first_run</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00057">CpuGemmAssemblyDispatch.h:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">arm_compute::IScheduler::StrategyHint::STATIC</a></div><div class="ttdoc">Split the workload evenly among the threads. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_af5e26fa35c7355cf0d41e1e18c709a6e"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">arm_compute::IScheduler::split_dimensions_all</a></div><div class="ttdeci">static constexpr unsigned int split_dimensions_all</div><div class="ttdoc">When arm_compute::ISchedular::Hints::_split_dimension is initialized with this value then the schedul...</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8h_source.xhtml#l00062">IScheduler.h:62</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_ab6fe700b6dad064ab5478be3dadcf88b"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#ab6fe700b6dad064ab5478be3dadcf88b">input_height</a></div><div class="ttdeci">const size_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00061">impl.cpp:61</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml">arm_compute::ITensorInfo</a></div><div class="ttdoc">Store the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_info_8h_source.xhtml#l00043">ITensorInfo.h:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_compute::WeightFormat</a></div><div class="ttdeci">WeightFormat</div><div class="ttdoc">Memory layouts for the weights tensor. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02035">Types.h:2035</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a68dc0bf731afd0463b8e8cc4ed81c0f8"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a68dc0bf731afd0463b8e8cc4ed81c0f8">M</a></div><div class="ttdeci">unsigned int M</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00095">CpuGemmAssemblyDispatch.cpp:95</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ab0fd9e7b4f6240c55b4fe6a54d4418b5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">arm_compute::IScheduler::cpu_info</a></div><div class="ttdeci">CPUInfo &amp; cpu_info()</div><div class="ttdoc">Get CPU info. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00041">IScheduler.cpp:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_xhtml_a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a3c378cf8ee66b2333bdf4868eeba2710acc31a669f6d086f816852dda3290a3ef">arm_compute::cpu::AsmConvMethod::Conv</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a3becf955da8cad5036399bcb90f1408d"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">arm_compute::IScheduler::run_tagged_workloads</a></div><div class="ttdeci">virtual void run_tagged_workloads(std::vector&lt; Workload &gt; &amp;workloads, const char *tag)</div><div class="ttdoc">Execute all the passed workloads. </div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00172">IScheduler.cpp:172</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml"><div class="ttname"><a href="namespacearm__gemm.xhtml">arm_gemm</a></div><div class="ttdef"><b>Definition:</b> <a href="barrier_8hpp_source.xhtml#l00030">barrier.hpp:30</a></div></div>
<div class="ttc" id="classarm__compute_1_1_status_xhtml"><div class="ttname"><a href="classarm__compute_1_1_status.xhtml">arm_compute::Status</a></div><div class="ttdoc">Status class. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00052">Error.h:52</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a6d3feaa4bf76f68289ae537b8c682b19"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a6d3feaa4bf76f68289ae537b8c682b19">arm_gemm::ConvolutionParameters::kernel_height</a></div><div class="ttdeci">int64_t kernel_height</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00054">convolution_parameters.hpp:54</a></div></div>
<div class="ttc" id="classarm__compute_1_1_activation_layer_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_activation_layer_info.xhtml">arm_compute::ActivationLayerInfo</a></div><div class="ttdoc">Activation Layer Information class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01659">Types.h:1659</a></div></div>
<div class="ttc" id="depthwiseconv2d_2generic_2neon_2impl_8cpp_xhtml_a12b51e0ffb6e0b213a91b2067180e647"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml#a12b51e0ffb6e0b213a91b2067180e647">input_width</a></div><div class="ttdeci">const size_t input_width</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00062">impl.cpp:62</a></div></div>
<div class="ttc" id="arm__gemm_8hpp_xhtml"><div class="ttname"><a href="arm__gemm_8hpp.xhtml">arm_gemm.hpp</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2023 Arm Limited. </div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:24</a></div></div>
<div class="ttc" id="_n_e_batch_normalization_layer_kernel_8cpp_xhtml_aebd17baa1051d175e76c2910848a9d14"><div class="ttname"><a href="_n_e_batch_normalization_layer_kernel_8cpp.xhtml#aebd17baa1051d175e76c2910848a9d14">ci</a></div><div class="ttdeci">const CPUInfo &amp; ci</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_batch_normalization_layer_kernel_8cpp_source.xhtml#l00052">NEBatchNormalizationLayerKernel.cpp:52</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml_aa93a4d93eb22ef5445cd567ef22ca67c"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml#aa93a4d93eb22ef5445cd567ef22ca67c">arm_compute::experimental::MemoryRequirements</a></div><div class="ttdeci">std::vector&lt; MemoryInfo &gt; MemoryRequirements</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00134">Types.h:134</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a56d8353718e6fdc78b8d69078a2cdb94">arm_compute::Format::F16</a></div><div class="ttdoc">1 channel, 1 F16 per channel </div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml">arm_gemm::GemmConfig</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00106">arm_gemm.hpp:106</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_args_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_gemm_args.xhtml">arm_gemm::GemmArgs</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00142">arm_gemm.hpp:142</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8h_xhtml"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8h.xhtml">CpuGemmAssemblyDispatch.h</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a637a6ee96e5440d25e6e67513a06a639"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a637a6ee96e5440d25e6e67513a06a639">multis</a></div><div class="ttdeci">unsigned int multis</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00099">CpuGemmAssemblyDispatch.cpp:99</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">arm_compute::IScheduler::StrategyHint::DYNAMIC</a></div><div class="ttdoc">Split the workload dynamically using a bucket system. </div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aff911654521523937ff24372a870b89f"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aff911654521523937ff24372a870b89f">ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00159">Validate.h:159</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa4b19a06b5361a32b32759aa26ffdbab">arm_compute::Format::BFLOAT16</a></div><div class="ttdoc">16-bit brain floating-point number </div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_a684a54d1fb1634a348a585c6b5e76df0"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a684a54d1fb1634a348a585c6b5e76df0">arm_compute::cpu::CpuGemmAssemblyDispatch::run</a></div><div class="ttdeci">void run(ITensorPack &amp;tensors) override</div><div class="ttdoc">Run the kernels contained in the function. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00882">CpuGemmAssemblyDispatch.cpp:882</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_kernel_description_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_kernel_description.xhtml">arm_gemm::KernelDescription</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00090">arm_gemm.hpp:90</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_kernel_description_xhtml_a1ade5ed8fc2bd356dfe390ad634ca9e6"><div class="ttname"><a href="structarm__gemm_1_1_kernel_description.xhtml#a1ade5ed8fc2bd356dfe390ad634ca9e6">arm_gemm::KernelDescription::method</a></div><div class="ttdeci">GemmMethod method</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00092">arm_gemm.hpp:92</a></div></div>
<div class="ttc" id="classarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension. </div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_ad1ae76c1f4f99aca4e9678c1322497e5"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#ad1ae76c1f4f99aca4e9678c1322497e5">arm_compute::cpu::CpuGemmAssemblyDispatch::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *d, const AsmGemmInfo &amp;info)</div><div class="ttdoc">Indicates whether or not this function can be used to process the given parameters. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00762">CpuGemmAssemblyDispatch.cpp:762</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00152">Error.h:152</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a23ab0e5c6b5d13e084628686c4f282d5"><div class="ttname"><a href="namespacearm__gemm.xhtml#a23ab0e5c6b5d13e084628686c4f282d5">arm_gemm::WeightFormat</a></div><div class="ttdeci">WeightFormat</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00050">arm_gemm.hpp:50</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58ac8bd5bedff8ef192d39a962afc0e19ee">arm_compute::Format::U32</a></div><div class="ttdoc">1 channel, 1 U32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a84437d80241f6a31e1a07c231ee8e3ac"><div class="ttname"><a href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">arm_compute::is_data_type_quantized_per_channel</a></div><div class="ttdeci">bool is_data_type_quantized_per_channel(DataType dt)</div><div class="ttdoc">Check if a given data type is of per channel type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01107">Utils.h:1107</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_a1c90377b949c122fd2bd4e932668de78"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a1c90377b949c122fd2bd4e932668de78">arm_compute::cpu::CpuGemmAssemblyDispatch::configure</a></div><div class="ttdeci">void configure(const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, ITensorInfo *d, const AsmGemmInfo &amp;info)</div><div class="ttdoc">If supported create a Compute Library function else fallback to the arm_gemm function. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00816">CpuGemmAssemblyDispatch.cpp:816</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5a781048ddfd21fd0402717d7e83b9fc5e"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a781048ddfd21fd0402717d7e83b9fc5e">arm_gemm::GemmMethod::QUANTIZE_WRAPPER_2D</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a10608f5b5910df56c8dd68f687bc5c54"><div class="ttname"><a href="namespacearm__compute.xhtml#a10608f5b5910df56c8dd68f687bc5c54">arm_compute::is_fixed_format</a></div><div class="ttdeci">bool is_fixed_format(const WeightFormat &amp;wf)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02083">Types.h:2083</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_ae8b170dcb376fe60270f4675f84e4477"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ae8b170dcb376fe60270f4675f84e4477">N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00096">CpuGemmAssemblyDispatch.cpp:96</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5a0f170db61ecb7e386a972fdf2c4e4bdb"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5a0f170db61ecb7e386a972fdf2c4e4bdb">arm_gemm::GemmMethod::GEMM_INTERLEAVED_2D</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a263ff38ffa728f5579e77ffd9c85e6dd"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a263ff38ffa728f5579e77ffd9c85e6dd">arm_gemm::GemmConfig::weight_format</a></div><div class="ttdeci">WeightFormat weight_format</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00112">arm_gemm.hpp:112</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_aa459796b5489eca8a9160cb5dcf1a103"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#aa459796b5489eca8a9160cb5dcf1a103">arm_compute::ITensorInfo::element_size</a></div><div class="ttdeci">virtual size_t element_size() const =0</div><div class="ttdoc">Element size in bytes calculated as data_size() * num_channels() </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00290">MLGOParser.cpp:290</a></div></div>
<div class="ttc" id="_n_e_scheduler_8h_xhtml"><div class="ttname"><a href="_n_e_scheduler_8h.xhtml">NEScheduler.h</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_wrapper_kernel_8h_xhtml"><div class="ttname"><a href="_cpu_gemm_assembly_wrapper_kernel_8h.xhtml">CpuGemmAssemblyWrapperKernel.h</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a9a5250a0c844eba2b009bc5e35978614"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a9a5250a0c844eba2b009bc5e35978614">indirect</a></div><div class="ttdeci">bool indirect</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00101">CpuGemmAssemblyDispatch.cpp:101</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_ab7c16a89cb470f3fa85818ee85e1e1dd"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#ab7c16a89cb470f3fa85818ee85e1e1dd">arm_compute::cpu::CpuGemmAssemblyDispatch::is_configured</a></div><div class="ttdeci">bool is_configured() const</div><div class="ttdoc">Was the function successfully configured ? </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00877">CpuGemmAssemblyDispatch.cpp:877</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml">arm_gemm::GemmCommon&lt; TypeInput, TypeOutput &gt;</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a135adba4335f0b231907ea8f61f9aff5">arm_compute::ACL_SRC_0</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00045">Types.h:45</a></div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_u_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_c_p_u_info.xhtml">arm_compute::CPUInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_types_8h_source.xhtml#l00066">CPPTypes.h:66</a></div></div>
<div class="ttc" id="namespacearm__gemm_xhtml_a24fb31c876e67f529bd128983460f6f5"><div class="ttname"><a href="namespacearm__gemm.xhtml#a24fb31c876e67f529bd128983460f6f5">arm_gemm::GemmMethod</a></div><div class="ttdeci">GemmMethod</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00035">arm_gemm.hpp:35</a></div></div>
<div class="ttc" id="structarm__compute_1_1cpu_1_1_asm_gemm_info_xhtml_a440c3faa85c2766ec4681807a906bf53"><div class="ttname"><a href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#a440c3faa85c2766ec4681807a906bf53">arm_compute::cpu::AsmGemmInfo::weight_format</a></div><div class="ttdeci">arm_compute::WeightFormat weight_format</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00056">CpuGemmAssemblyDispatch.h:56</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa08a9b7cf30c1c3e56ca1d2060313408"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa08a9b7cf30c1c3e56ca1d2060313408">arm_compute::test::validation::gemm_info</a></div><div class="ttdeci">gemm_info</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_reshaped_8cpp_source.xhtml#l00862">GEMMMatrixMultiplyReshaped.cpp:862</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a06403ad5596b5405787cfca12e5b815e"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a06403ad5596b5405787cfca12e5b815e">arm_compute::test::validation::run</a></div><div class="ttdeci">lstmq run()</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0"><div class="ttname"><a href="namespacearm__compute.xhtml#a08e287b5f0197ce8c7c84dde6db24828a33d31c31e7afde56ed0070133d4568a0">arm_compute::ACL_SRC_1</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2experimental_2_types_8h_source.xhtml#l00046">Types.h:46</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_af4d2c35e9fbc329b2e1b2acb864265aa"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#af4d2c35e9fbc329b2e1b2acb864265aa">arm_compute::cpu::CpuGemmAssemblyDispatch::prepare</a></div><div class="ttdeci">void prepare(ITensorPack &amp;tensors) override</div><div class="ttdoc">Prepare the function for executing. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00871">CpuGemmAssemblyDispatch.cpp:871</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a34f500e941c4df30b870126ec868ebd5">arm_compute::DataType::QSYMM8_PER_CHANNEL</a></div><div class="ttdoc">quantized, symmetric per channel fixed-point 8-bit number </div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_aaf20144858a9194d3bb0bfaa9ed0ddc2"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#aaf20144858a9194d3bb0bfaa9ed0ddc2">arm_gemm::ConvolutionParameters::output_stride_h</a></div><div class="ttdeci">int64_t output_stride_h</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00058">convolution_parameters.hpp:58</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_ac775e8bdef77e9f38c7e41a2d589ced0"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#ac775e8bdef77e9f38c7e41a2d589ced0">arm_gemm::ConvolutionParameters::input_height</a></div><div class="ttdeci">int64_t input_height</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00051">convolution_parameters.hpp:51</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml">arm_gemm::ConvolutionParameters</a></div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00048">convolution_parameters.hpp:48</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_ad92c19f85e6eee3a06810736da11329d"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#ad92c19f85e6eee3a06810736da11329d">sections</a></div><div class="ttdeci">unsigned int sections</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00100">CpuGemmAssemblyDispatch.cpp:100</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a8e1bde3c3d303163521522cf1d62f21f">arm_compute::WeightFormat::ANY</a></div></div>
<div class="ttc" id="_assembly_utils_8h_xhtml"><div class="ttname"><a href="_assembly_utils_8h.xhtml">AssemblyUtils.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_a4e58f95544bd5ac6559a421671bd9842"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">arm_compute::IScheduler::schedule</a></div><div class="ttdeci">virtual void schedule(ICPPKernel *kernel, const Hints &amp;hints)=0</div><div class="ttdoc">Runs the kernel in the same thread as the caller synchronously. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a36b5c2550292b008aa1f018a7623c6f0"><div class="ttname"><a href="namespacearm__compute.xhtml#a36b5c2550292b008aa1f018a7623c6f0">arm_compute::is_fixed_format_fast_math</a></div><div class="ttdeci">bool is_fixed_format_fast_math(const WeightFormat &amp;wf)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l02087">Types.h:2087</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a8f3ff7da485ff7e75dab07baadf5b4bd"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a8f3ff7da485ff7e75dab07baadf5b4bd">ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MISMATCHING_DATA_TYPES(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00541">Validate.h:541</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a0b43a7c0dfa50b241f1bb3215f05dce7"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a0b43a7c0dfa50b241f1bb3215f05dce7">arm_gemm::ConvolutionParameters::padding_top</a></div><div class="ttdeci">int64_t padding_top</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00060">convolution_parameters.hpp:60</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_ae7eed178dac535c6e727061b1f5bc6eb"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#ae7eed178dac535c6e727061b1f5bc6eb">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_CHANNEL_NOT_IN(t, c,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00788">Validate.h:788</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52"><div class="ttname"><a href="namespacearm__compute.xhtml#a23ab0e5c6b5d13e084628686c4f282d5a1c04cc3823d476c3017238679a0fdf52">arm_compute::WeightFormat::UNSPECIFIED</a></div></div>
<div class="ttc" id="src_2core_2_c_p_p_2_validate_8h_xhtml"><div class="ttname"><a href="src_2core_2_c_p_p_2_validate_8h.xhtml">Validate.h</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_requantize32_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_requantize32.xhtml">arm_gemm::Requantize32</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00169">arm_gemm.hpp:169</a></div></div>
<div class="ttc" id="_error_8h_xhtml_a1c69762a42ab8add645d0a949b6f4b1f"><div class="ttname"><a href="_error_8h.xhtml#a1c69762a42ab8add645d0a949b6f4b1f">ARM_COMPUTE_RETURN_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_MSG(cond, msg)</div><div class="ttdoc">If the condition is true, an error is returned. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00244">Error.h:244</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1assembly__utils_xhtml_ad49f7ee1e6dc6bba0526a75213113605"><div class="ttname"><a href="namespacearm__compute_1_1assembly__utils.xhtml#ad49f7ee1e6dc6bba0526a75213113605">arm_compute::assembly_utils::map_to_arm_gemm_weight_format</a></div><div class="ttdeci">arm_gemm::WeightFormat map_to_arm_gemm_weight_format(const arm_compute::WeightFormat &amp;weight_format)</div><div class="ttdoc">Performs a mapping from Compute Library WeightFormat to the assembly WeightFormat enum...</div><div class="ttdef"><b>Definition:</b> <a href="_assembly_utils_8cpp_source.xhtml#l00070">AssemblyUtils.cpp:70</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_pack_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_pack.xhtml">arm_compute::ITensorPack</a></div><div class="ttdoc">Tensor packing service. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_pack_8h_source.xhtml#l00039">ITensorPack.h:39</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_ad05cf0e53a315e9f3070ff16c7f0a334"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#ad05cf0e53a315e9f3070ff16c7f0a334">arm_gemm::ConvolutionParameters::output_width</a></div><div class="ttdeci">int64_t output_width</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00055">convolution_parameters.hpp:55</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a324d709e8fb5568ada56ba4999dfb2f1"><div class="ttname"><a href="namespacearm__compute.xhtml#a324d709e8fb5568ada56ba4999dfb2f1">arm_compute::offset_int_vec</a></div><div class="ttdeci">int offset_int_vec(int offset)</div><div class="ttdef"><b>Definition:</b> <a href="_memory_helpers_8h_source.xhtml#l00038">MemoryHelpers.h:38</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_gemm_common_xhtml_a5addbdb1697735d2024f01186c222841"><div class="ttname"><a href="classarm__gemm_1_1_gemm_common.xhtml#a5addbdb1697735d2024f01186c222841">arm_gemm::GemmCommon::pretranspose_B_array_part</a></div><div class="ttdeci">virtual void pretranspose_B_array_part(void *out, const To *in, const int row_stride, const int multi_stride, size_t, size_t)</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00240">gemm_common.hpp:240</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_gemm_config_xhtml_a61e0e449fd7e8647d521cafd4f1d55a3"><div class="ttname"><a href="structarm__gemm_1_1_gemm_config.xhtml#a61e0e449fd7e8647d521cafd4f1d55a3">arm_gemm::GemmConfig::filter</a></div><div class="ttdeci">std::string filter</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00109">arm_gemm.hpp:109</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_adfc4722fbfd74f4e995ddd6929ba02a5"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#adfc4722fbfd74f4e995ddd6929ba02a5">batches</a></div><div class="ttdeci">unsigned int batches</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00098">CpuGemmAssemblyDispatch.cpp:98</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1assembly__utils_xhtml_ad8ec24d82bff0c90b32860cc48e26345"><div class="ttname"><a href="namespacearm__compute_1_1assembly__utils.xhtml#ad8ec24d82bff0c90b32860cc48e26345">arm_compute::assembly_utils::map_to_arm_gemm_activation</a></div><div class="ttdeci">arm_gemm::Activation map_to_arm_gemm_activation(const ActivationLayerInfo &amp;act)</div><div class="ttdoc">Performs a mapping between Compute Library ActivationLayerInfo and the assembly Activation structure...</div><div class="ttdef"><b>Definition:</b> <a href="_assembly_utils_8cpp_source.xhtml#l00030">AssemblyUtils.cpp:30</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_scheduler_xhtml_ac24584a63e484123e3756d1b2a1c9e2f"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">arm_compute::IScheduler::num_threads</a></div><div class="ttdeci">virtual unsigned int num_threads() const =0</div><div class="ttdoc">Returns the number of threads that the SingleThreadScheduler has in its pool. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5f5b6c4337eac9e2e0046ca2304d80dc"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5f5b6c4337eac9e2e0046ca2304d80dc">arm_compute::test::validation::data_type</a></div><div class="ttdeci">data_type</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_cast_8cpp_source.xhtml#l00203">Cast.cpp:203</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a5357bacf3b395353bef0acf15487b92b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a5357bacf3b395353bef0acf15487b92b">arm_compute::test::validation::configure</a></div><div class="ttdeci">im2col_func configure(src_target.info(), dst_target.info(), spatial_kernel, conv_info, has_bias)</div></div>
<div class="ttc" id="structarm__compute_1_1cpu_1_1_asm_gemm_info_xhtml_af09a906dc166b5cc0eff7fa11fd92ca9"><div class="ttname"><a href="structarm__compute_1_1cpu_1_1_asm_gemm_info.xhtml#af09a906dc166b5cc0eff7fa11fd92ca9">arm_compute::cpu::AsmGemmInfo::fixed_format</a></div><div class="ttdeci">bool fixed_format</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8h_source.xhtml#l00055">CpuGemmAssemblyDispatch.h:55</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a4d535aa242e052aebffea95dee41c0e9"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a4d535aa242e052aebffea95dee41c0e9">arm_gemm::ConvolutionParameters::kernel_width</a></div><div class="ttdeci">int64_t kernel_width</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00053">convolution_parameters.hpp:53</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_a527ebcdee3c94fd6f80842ede72ef99a"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a527ebcdee3c94fd6f80842ede72ef99a">arm_compute::cpu::CpuGemmAssemblyDispatch::CpuGemmAssemblyDispatch</a></div><div class="ttdeci">CpuGemmAssemblyDispatch()</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00687">CpuGemmAssemblyDispatch.cpp:687</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_aef783de4ec01874dbec6054a5868aea2"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#aef783de4ec01874dbec6054a5868aea2">ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ERROR_ON_DATA_TYPE_NOT_IN(t,...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00690">Validate.h:690</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a609de0503f28d274ed0efee9d77d85fb"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a609de0503f28d274ed0efee9d77d85fb">arm_gemm::ConvolutionParameters::output_height</a></div><div class="ttdeci">int64_t output_height</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00056">convolution_parameters.hpp:56</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aafb0fced528eaac5fe170b763cda5975">arm_compute::DataType::S8</a></div><div class="ttdoc">signed 8-bit number </div></div>
<div class="ttc" id="namespacearm__compute_1_1experimental_xhtml"><div class="ttname"><a href="namespacearm__compute_1_1experimental.xhtml">arm_compute::experimental</a></div><div class="ttdef"><b>Definition:</b> <a href="_i_post_op_8h_source.xhtml#l00033">IPostOp.h:33</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_a545be126d77ec11a9824249de111def9"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a545be126d77ec11a9824249de111def9">arm_compute::test::validation::m</a></div><div class="ttdeci">const unsigned int m</div><div class="ttdef"><b>Definition:</b> <a href="_g_e_m_m_matrix_multiply_native_8cpp_source.xhtml#l00359">GEMMMatrixMultiplyNative.cpp:359</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1assembly__utils_xhtml_adde66c1efbb7e8a58b031fdb6d936abc"><div class="ttname"><a href="namespacearm__compute_1_1assembly__utils.xhtml#adde66c1efbb7e8a58b031fdb6d936abc">arm_compute::assembly_utils::map_to_arm_compute_weight_format</a></div><div class="ttdeci">arm_compute::WeightFormat map_to_arm_compute_weight_format(const arm_gemm::WeightFormat &amp;weight_format)</div><div class="ttdoc">Performs a mapping from Assembly WeightFormat to the Compute Library WeightFormat enum...</div><div class="ttdef"><b>Definition:</b> <a href="_assembly_utils_8cpp_source.xhtml#l00190">AssemblyUtils.cpp:190</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_a74ae0d6e96f38fecd38471431786b870"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a74ae0d6e96f38fecd38471431786b870">arm_compute::cpu::CpuGemmAssemblyDispatch::workspace</a></div><div class="ttdeci">experimental::MemoryRequirements workspace() const override</div><div class="ttdoc">Return the memory requirements required by the workspace. </div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00888">CpuGemmAssemblyDispatch.cpp:888</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_a8437e73cc2c21cfd03b1738950c1d8e1"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#a8437e73cc2c21cfd03b1738950c1d8e1">arm_gemm::ConvolutionParameters::padding_left</a></div><div class="ttdeci">int64_t padding_left</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00061">convolution_parameters.hpp:61</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml_ab6f4e6d3fde00ce906e46494f60dfe7a"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml#ab6f4e6d3fde00ce906e46494f60dfe7a">arm_gemm::Activation::type</a></div><div class="ttdeci">Type type</div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00132">arm_gemm.hpp:132</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_convolution_parameters_xhtml_ad6b5f3c7d7ed9e644c80b119317bc2e6"><div class="ttname"><a href="structarm__gemm_1_1_convolution_parameters.xhtml#ad6b5f3c7d7ed9e644c80b119317bc2e6">arm_gemm::ConvolutionParameters::output_stride_w</a></div><div class="ttdeci">int64_t output_stride_w</div><div class="ttdef"><b>Definition:</b> <a href="convolution__parameters_8hpp_source.xhtml#l00057">convolution_parameters.hpp:57</a></div></div>
<div class="ttc" id="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch_xhtml_a5148a10005b9dd2e63269b4028b36191"><div class="ttname"><a href="classarm__compute_1_1cpu_1_1_cpu_gemm_assembly_dispatch.xhtml#a5148a10005b9dd2e63269b4028b36191">arm_compute::cpu::CpuGemmAssemblyDispatch::has_opt_impl</a></div><div class="ttdeci">static Status has_opt_impl(arm_compute::WeightFormat &amp;weight_format, const ITensorInfo *a, const ITensorInfo *b, const ITensorInfo *c, const ITensorInfo *d, const AsmGemmInfo &amp;info)</div><div class="ttdoc">Indicates whether or not there is an optimal assembly implementation that can be used to process the ...</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00692">CpuGemmAssemblyDispatch.cpp:692</a></div></div>
<div class="ttc" id="structarm__gemm_1_1_activation_xhtml"><div class="ttname"><a href="structarm__gemm_1_1_activation.xhtml">arm_gemm::Activation</a></div><div class="ttdef"><b>Definition:</b> <a href="arm__gemm_8hpp_source.xhtml#l00123">arm_gemm.hpp:123</a></div></div>
<div class="ttc" id="classarm__compute_1_1_scheduler_xhtml_a0d63ca713bab377aabcfb63c192b8429"><div class="ttname"><a href="classarm__compute_1_1_scheduler.xhtml#a0d63ca713bab377aabcfb63c192b8429">arm_compute::Scheduler::get</a></div><div class="ttdeci">static IScheduler &amp; get()</div><div class="ttdoc">Access the scheduler singleton. </div><div class="ttdef"><b>Definition:</b> <a href="_scheduler_8cpp_source.xhtml#l00094">Scheduler.cpp:94</a></div></div>
<div class="ttc" id="classarm__gemm_1_1_i_gemm_common_xhtml_a37e8736d7db6afdeab374b248599a573"><div class="ttname"><a href="classarm__gemm_1_1_i_gemm_common.xhtml#a37e8736d7db6afdeab374b248599a573">arm_gemm::IGemmCommon::get_B_pretranspose_window_size</a></div><div class="ttdeci">virtual size_t get_B_pretranspose_window_size() const</div><div class="ttdef"><b>Definition:</b> <a href="gemm__common_8hpp_source.xhtml#l00117">gemm_common.hpp:117</a></div></div>
<div class="ttc" id="namespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
<div class="ttc" id="working__space_8hpp_xhtml_a1fb7b822a92dd3ab6e7ab15c67b0ff9e"><div class="ttname"><a href="working__space_8hpp.xhtml#a1fb7b822a92dd3ab6e7ab15c67b0ff9e">bias</a></div><div class="ttdeci">const int32_t * bias</div><div class="ttdef"><b>Definition:</b> <a href="working__space_8hpp_source.xhtml#l00292">working_space.hpp:292</a></div></div>
<div class="ttc" id="_cpu_gemm_assembly_dispatch_8cpp_xhtml_a42247993f81d6a8f73d2e0cb805c663b"><div class="ttname"><a href="_cpu_gemm_assembly_dispatch_8cpp.xhtml#a42247993f81d6a8f73d2e0cb805c663b">K</a></div><div class="ttdeci">unsigned int K</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_gemm_assembly_dispatch_8cpp_source.xhtml#l00097">CpuGemmAssemblyDispatch.cpp:97</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_e639157fd988cab7c102f16994a5c7d6.xhtml">operators</a></li><li class="navelem"><a class="el" href="dir_7516d7e27ad2852cb8e3a5961ec5f65b.xhtml">internal</a></li><li class="navelem"><a class="el" href="_cpu_gemm_assembly_dispatch_8cpp.xhtml">CpuGemmAssemblyDispatch.cpp</a></li>
    <li class="footer">Generated on Thu May 18 2023 14:52:29 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
