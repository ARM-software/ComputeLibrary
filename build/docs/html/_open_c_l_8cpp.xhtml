<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/CL/OpenCL.cpp File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_open_c_l_8cpp.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">OpenCL.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &quot;<a class="el" href="_open_c_l_8h_source.xhtml">arm_compute/core/CL/OpenCL.h</a>&quot;</code><br />
<code>#include &quot;<a class="el" href="_error_8h_source.xhtml">arm_compute/core/Error.h</a>&quot;</code><br />
<code>#include &lt;algorithm&gt;</code><br />
<code>#include &lt;dlfcn.h&gt;</code><br />
<code>#include &lt;iostream&gt;</code><br />
<code>#include &lt;sstream&gt;</code><br />
</div>
<p><a href="_open_c_l_8cpp_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__compute"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></td></tr>
<tr class="memdesc:namespacearm__compute"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copyright (c) 2017-2024 Arm Limited. <br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ad34d144f5c59d263587bd0adb4680353"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ad34d144f5c59d263587bd0adb4680353">LOAD_FUNCTION_PTR</a>(func_name,  handle)&#160;&#160;&#160;    func_name##_ptr = reinterpret_cast&lt;decltype(func_name) *&gt;(dlsym(handle, #func_name));</td></tr>
<tr class="separator:ad34d144f5c59d263587bd0adb4680353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a594e176cb0da9a4b01f6df6a783c41a6"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a594e176cb0da9a4b01f6df6a783c41a6">LOAD_EXTENSION_FUNCTION_PTR</a>(func_name,  platform_id)</td></tr>
<tr class="separator:a594e176cb0da9a4b01f6df6a783c41a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a5f49decb4b0a74d5361686ab45db8961"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">opencl_is_available</a> ()</td></tr>
<tr class="memdesc:a5f49decb4b0a74d5361686ab45db8961"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if OpenCL is available.  <a href="namespacearm__compute.xhtml#a5f49decb4b0a74d5361686ab45db8961">More...</a><br /></td></tr>
<tr class="separator:a5f49decb4b0a74d5361686ab45db8961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43d9a36e38a16e503e0bbdc7b2f81f12"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a43d9a36e38a16e503e0bbdc7b2f81f12">clEnqueueMarker</a> (cl_command_queue command_queue, cl_event *event)</td></tr>
<tr class="separator:a43d9a36e38a16e503e0bbdc7b2f81f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab01da83b3a9fcd7a69dda12cc721c8f8"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ab01da83b3a9fcd7a69dda12cc721c8f8">clWaitForEvents</a> (cl_uint num_events, const cl_event *event_list)</td></tr>
<tr class="separator:ab01da83b3a9fcd7a69dda12cc721c8f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66cc3ae002a3eb6b7c70291ba3eac1b5"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a66cc3ae002a3eb6b7c70291ba3eac1b5">clEnqueueSVMMap</a> (cl_command_queue command_queue, cl_bool blocking_map, cl_map_flags flags, void *svm_ptr, size_t size, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)</td></tr>
<tr class="separator:a66cc3ae002a3eb6b7c70291ba3eac1b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15c1cf404e8af8057e176c967080fd4"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#af15c1cf404e8af8057e176c967080fd4">clEnqueueSVMUnmap</a> (cl_command_queue command_queue, void *svm_ptr, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)</td></tr>
<tr class="separator:af15c1cf404e8af8057e176c967080fd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f3b491b813e283ae79a756cb7ae84bd"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a3f3b491b813e283ae79a756cb7ae84bd">clSVMAlloc</a> (cl_context context, cl_svm_mem_flags_arm flags, size_t size, cl_uint alignment)</td></tr>
<tr class="separator:a3f3b491b813e283ae79a756cb7ae84bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1412ab782ad4055d71dc9c5a7c4c11e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a1412ab782ad4055d71dc9c5a7c4c11e4">clSVMFree</a> (cl_context context, void *svm_pointer)</td></tr>
<tr class="separator:a1412ab782ad4055d71dc9c5a7c4c11e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bd1918b00ed6da1c8ed84bf4251f963"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a4bd1918b00ed6da1c8ed84bf4251f963">clGetContextInfo</a> (cl_context context, cl_context_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:a4bd1918b00ed6da1c8ed84bf4251f963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9707377cc9420fd03b16d76e831513a"><td class="memItemLeft" align="right" valign="top">cl_command_queue&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ac9707377cc9420fd03b16d76e831513a">clCreateCommandQueue</a> (cl_context context, cl_device_id device, cl_command_queue_properties properties, cl_int *errcode_ret)</td></tr>
<tr class="separator:ac9707377cc9420fd03b16d76e831513a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b2912c16aeb279ce55dc9c30968b906"><td class="memItemLeft" align="right" valign="top">cl_command_queue&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a2b2912c16aeb279ce55dc9c30968b906">clCreateCommandQueueWithProperties</a> (cl_context context, cl_device_id device, const cl_queue_properties *properties, cl_int *errcode_ret)</td></tr>
<tr class="separator:a2b2912c16aeb279ce55dc9c30968b906"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdcf0f1bbd28eb23c756f32e005e3846"><td class="memItemLeft" align="right" valign="top">cl_context&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#abdcf0f1bbd28eb23c756f32e005e3846">clCreateContext</a> (const cl_context_properties *properties, cl_uint num_devices, const cl_device_id *devices, void(*pfn_notify)(const char *, const void *, size_t, void *), void *user_data, cl_int *errcode_ret)</td></tr>
<tr class="separator:abdcf0f1bbd28eb23c756f32e005e3846"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a298a4a3082936de672185fe3cc9b992b"><td class="memItemLeft" align="right" valign="top">cl_context&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a298a4a3082936de672185fe3cc9b992b">clCreateContextFromType</a> (const cl_context_properties *properties, cl_device_type device_type, void(*pfn_notify)(const char *, const void *, size_t, void *), void *user_data, cl_int *errcode_ret)</td></tr>
<tr class="separator:a298a4a3082936de672185fe3cc9b992b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab17c2125daccf219d5ead2be2491e36e"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ab17c2125daccf219d5ead2be2491e36e">clBuildProgram</a> (cl_program program, cl_uint num_devices, const cl_device_id *device_list, const char *options, void(CL_CALLBACK *pfn_notify)(cl_program program, void *user_data), void *user_data)</td></tr>
<tr class="separator:ab17c2125daccf219d5ead2be2491e36e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0152f4b089c26f22f032162d0b7a0d21"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a0152f4b089c26f22f032162d0b7a0d21">clEnqueueNDRangeKernel</a> (cl_command_queue command_queue, cl_kernel kernel, cl_uint work_dim, const size_t *global_work_offset, const size_t *global_work_size, const size_t *local_work_size, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)</td></tr>
<tr class="separator:a0152f4b089c26f22f032162d0b7a0d21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3945f28bb1b23afb00a87801136271e9"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a3945f28bb1b23afb00a87801136271e9">clSetKernelArg</a> (cl_kernel kernel, cl_uint arg_index, size_t arg_size, const void *arg_value)</td></tr>
<tr class="separator:a3945f28bb1b23afb00a87801136271e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c88e252bef66c05807260b013a725de"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a2c88e252bef66c05807260b013a725de">clRetainMemObject</a> (cl_mem memobj)</td></tr>
<tr class="separator:a2c88e252bef66c05807260b013a725de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa80bcf581a6eb2848468677b3f3cbd1"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#aaa80bcf581a6eb2848468677b3f3cbd1">clReleaseMemObject</a> (cl_mem memobj)</td></tr>
<tr class="separator:aaa80bcf581a6eb2848468677b3f3cbd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1ca0be4c120041eda74a4f1fc36c4a0"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#af1ca0be4c120041eda74a4f1fc36c4a0">clEnqueueUnmapMemObject</a> (cl_command_queue command_queue, cl_mem memobj, void *mapped_ptr, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)</td></tr>
<tr class="separator:af1ca0be4c120041eda74a4f1fc36c4a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae342be07c62cae5d870ff5796a599e75"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ae342be07c62cae5d870ff5796a599e75">clRetainCommandQueue</a> (cl_command_queue command_queue)</td></tr>
<tr class="separator:ae342be07c62cae5d870ff5796a599e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a424af1d00f0ad1421da1bc0c2ccc9abe"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a424af1d00f0ad1421da1bc0c2ccc9abe">clReleaseContext</a> (cl_context context)</td></tr>
<tr class="separator:a424af1d00f0ad1421da1bc0c2ccc9abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41eb8d025116f85cf2175e51c98d9fb6"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a41eb8d025116f85cf2175e51c98d9fb6">clReleaseEvent</a> (cl_event event)</td></tr>
<tr class="separator:a41eb8d025116f85cf2175e51c98d9fb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8301eaffd71b5aeae60dc9e3afdf8c9b"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a8301eaffd71b5aeae60dc9e3afdf8c9b">clEnqueueWriteBuffer</a> (cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_write, size_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, size_t size, const void *ptr, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)</td></tr>
<tr class="separator:a8301eaffd71b5aeae60dc9e3afdf8c9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c6565be16b3326d2ccdab5339e0f7bf"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a0c6565be16b3326d2ccdab5339e0f7bf">clEnqueueReadBuffer</a> (cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_read, size_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, size_t size, void *ptr, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)</td></tr>
<tr class="separator:a0c6565be16b3326d2ccdab5339e0f7bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42eb427f73ef3e670fb570734341fd49"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a42eb427f73ef3e670fb570734341fd49">clGetProgramBuildInfo</a> (cl_program program, cl_device_id device, cl_program_build_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:a42eb427f73ef3e670fb570734341fd49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0cc01b2f6b15bbab28eb38d6f29f184"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#aa0cc01b2f6b15bbab28eb38d6f29f184">clRetainProgram</a> (cl_program program)</td></tr>
<tr class="separator:aa0cc01b2f6b15bbab28eb38d6f29f184"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9039d2fa3d129a08baa1c49abf2f07fb"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a9039d2fa3d129a08baa1c49abf2f07fb">clEnqueueMapBuffer</a> (cl_command_queue command_queue, cl_mem buffer, cl_bool blocking_map, cl_map_flags map_flags, size_t <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, size_t size, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event, cl_int *errcode_ret)</td></tr>
<tr class="separator:a9039d2fa3d129a08baa1c49abf2f07fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd209590ef4b1c99e256180ad77faecf"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#abd209590ef4b1c99e256180ad77faecf">clReleaseCommandQueue</a> (cl_command_queue command_queue)</td></tr>
<tr class="separator:abd209590ef4b1c99e256180ad77faecf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1425fcfd615cc990cdf8c311d520ad10"><td class="memItemLeft" align="right" valign="top">cl_program&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a1425fcfd615cc990cdf8c311d520ad10">clCreateProgramWithBinary</a> (cl_context context, cl_uint num_devices, const cl_device_id *device_list, const size_t *lengths, const unsigned char **binaries, cl_int *binary_status, cl_int *errcode_ret)</td></tr>
<tr class="separator:a1425fcfd615cc990cdf8c311d520ad10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abea285cf4c4715cd284f275725cd1508"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#abea285cf4c4715cd284f275725cd1508">clRetainContext</a> (cl_context context)</td></tr>
<tr class="separator:abea285cf4c4715cd284f275725cd1508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae32b736b7255a0549acfe221f83a3197"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ae32b736b7255a0549acfe221f83a3197">clReleaseProgram</a> (cl_program program)</td></tr>
<tr class="separator:ae32b736b7255a0549acfe221f83a3197"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb9d0f5ac60336c8dac9a37e51f3cf47"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#acb9d0f5ac60336c8dac9a37e51f3cf47">clFlush</a> (cl_command_queue command_queue)</td></tr>
<tr class="separator:acb9d0f5ac60336c8dac9a37e51f3cf47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac78e93d371eecbe98f00bdf965c98ed6"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ac78e93d371eecbe98f00bdf965c98ed6">clFinish</a> (cl_command_queue command_queue)</td></tr>
<tr class="separator:ac78e93d371eecbe98f00bdf965c98ed6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f71d4d10e82daea5e3dd62089dab424"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a9f71d4d10e82daea5e3dd62089dab424">clGetProgramInfo</a> (cl_program program, cl_program_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:a9f71d4d10e82daea5e3dd62089dab424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a372df0ff626cb294bc21a8d75aef7240"><td class="memItemLeft" align="right" valign="top">cl_kernel&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a372df0ff626cb294bc21a8d75aef7240">clCreateKernel</a> (cl_program program, const char *<a class="el" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, cl_int *errcode_ret)</td></tr>
<tr class="separator:a372df0ff626cb294bc21a8d75aef7240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a617b60a00661fe3a03749b6b9913d006"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a617b60a00661fe3a03749b6b9913d006">clRetainKernel</a> (cl_kernel kernel)</td></tr>
<tr class="separator:a617b60a00661fe3a03749b6b9913d006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9a973de9b75e338812149043568dc20"><td class="memItemLeft" align="right" valign="top">cl_mem&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#af9a973de9b75e338812149043568dc20">clCreateBuffer</a> (cl_context context, cl_mem_flags flags, size_t size, void *host_ptr, cl_int *errcode_ret)</td></tr>
<tr class="separator:af9a973de9b75e338812149043568dc20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2ab434699c41d87099b48a774db0b9d"><td class="memItemLeft" align="right" valign="top">cl_program&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ae2ab434699c41d87099b48a774db0b9d">clCreateProgramWithSource</a> (cl_context context, cl_uint count, const char **strings, const size_t *lengths, cl_int *errcode_ret)</td></tr>
<tr class="separator:ae2ab434699c41d87099b48a774db0b9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9533331a57797c4c4c4187900ff9ae51"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a9533331a57797c4c4c4187900ff9ae51">clReleaseKernel</a> (cl_kernel kernel)</td></tr>
<tr class="separator:a9533331a57797c4c4c4187900ff9ae51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad61ef286586c4d20b47cc51a32839de1"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ad61ef286586c4d20b47cc51a32839de1">clGetDeviceIDs</a> (cl_platform_id platform, cl_device_type device_type, cl_uint num_entries, cl_device_id *devices, cl_uint *num_devices)</td></tr>
<tr class="separator:ad61ef286586c4d20b47cc51a32839de1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a677990334379f5f91619bfc43af63c4a"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a677990334379f5f91619bfc43af63c4a">clGetDeviceInfo</a> (cl_device_id device, cl_device_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:a677990334379f5f91619bfc43af63c4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56cdb4214e0b6d66392cd0670f89e27d"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a56cdb4214e0b6d66392cd0670f89e27d">clGetMemObjectInfo</a> (cl_mem memobj, cl_mem_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:a56cdb4214e0b6d66392cd0670f89e27d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a434f9e0998ebb096bf09a0a6abdd5938"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a434f9e0998ebb096bf09a0a6abdd5938">clRetainEvent</a> (cl_event event)</td></tr>
<tr class="separator:a434f9e0998ebb096bf09a0a6abdd5938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4dc7264b57c52f10781d5e7d7bbed66"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#af4dc7264b57c52f10781d5e7d7bbed66">clGetPlatformInfo</a> (cl_platform_id platform, cl_platform_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:af4dc7264b57c52f10781d5e7d7bbed66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16acb36fde338eaff889484b213c953d"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a16acb36fde338eaff889484b213c953d">clGetPlatformIDs</a> (cl_uint num_entries, cl_platform_id *platforms, cl_uint *num_platforms)</td></tr>
<tr class="separator:a16acb36fde338eaff889484b213c953d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb69a828a88a01250d4765d9ac36637f"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#acb69a828a88a01250d4765d9ac36637f">clGetKernelWorkGroupInfo</a> (cl_kernel kernel, cl_device_id device, cl_kernel_work_group_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:acb69a828a88a01250d4765d9ac36637f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3379de4b5bac534f2e0197d0e53393b"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ad3379de4b5bac534f2e0197d0e53393b">clGetCommandQueueInfo</a> (cl_command_queue command_queue, cl_command_queue_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:ad3379de4b5bac534f2e0197d0e53393b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af547e92d5365c4a7cc5609814618289e"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#af547e92d5365c4a7cc5609814618289e">clGetKernelInfo</a> (cl_kernel kernel, cl_kernel_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:af547e92d5365c4a7cc5609814618289e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1203915fa89fa2ad0914bc8b83e1af81"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a1203915fa89fa2ad0914bc8b83e1af81">clGetEventProfilingInfo</a> (cl_event event, cl_profiling_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</td></tr>
<tr class="separator:a1203915fa89fa2ad0914bc8b83e1af81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa31e96a1fb21520f2e391b4f7f46f5a9"><td class="memItemLeft" align="right" valign="top">cl_mem&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#aa31e96a1fb21520f2e391b4f7f46f5a9">clCreateImage</a> (cl_context context, cl_mem_flags flags, const cl_image_format *image_format, const cl_image_desc *image_desc, void *host_ptr, cl_int *errcode_ret)</td></tr>
<tr class="separator:aa31e96a1fb21520f2e391b4f7f46f5a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf342694786e1e468c55431205f36ced"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#aaf342694786e1e468c55431205f36ced">clSetKernelExecInfo</a> (cl_kernel kernel, cl_kernel_exec_info param_name, size_t param_value_size, const void *param_value)</td></tr>
<tr class="separator:aaf342694786e1e468c55431205f36ced"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad33ef1ed0329715a73c83c42f5fd8dcf"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ad33ef1ed0329715a73c83c42f5fd8dcf">clGetExtensionFunctionAddressForPlatform</a> (cl_platform_id platform, const char *funcname)</td></tr>
<tr class="separator:ad33ef1ed0329715a73c83c42f5fd8dcf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4091b6ac9dd4388f5b95f320a0c85a8"><td class="memItemLeft" align="right" valign="top">cl_command_buffer_khr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ae4091b6ac9dd4388f5b95f320a0c85a8">clCreateCommandBufferKHR</a> (cl_uint num_queues, const cl_command_queue *queues, const cl_command_buffer_properties_khr *properties, cl_int *errcode_ret)</td></tr>
<tr class="separator:ae4091b6ac9dd4388f5b95f320a0c85a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eda66fd1833633bdc55e29686b7d454"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a2eda66fd1833633bdc55e29686b7d454">clFinalizeCommandBufferKHR</a> (cl_command_buffer_khr command_buffer)</td></tr>
<tr class="separator:a2eda66fd1833633bdc55e29686b7d454"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a945aa317a51cafa77b806560d1e0663e"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a945aa317a51cafa77b806560d1e0663e">clRetainCommandBufferKHR</a> (cl_command_buffer_khr command_buffer)</td></tr>
<tr class="separator:a945aa317a51cafa77b806560d1e0663e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad92270fbfad08428c9ed518170a8a74a"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#ad92270fbfad08428c9ed518170a8a74a">clReleaseCommandBufferKHR</a> (cl_command_buffer_khr command_buffer)</td></tr>
<tr class="separator:ad92270fbfad08428c9ed518170a8a74a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabca83598a7d2f2db7aaa2d4b1cbd1a7"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#aabca83598a7d2f2db7aaa2d4b1cbd1a7">clEnqueueCommandBufferKHR</a> (cl_uint num_queues, cl_command_queue *queues, cl_command_buffer_khr command_buffer, cl_uint num_events_in_wait_list, const cl_event *event_wait_list, cl_event *event)</td></tr>
<tr class="separator:aabca83598a7d2f2db7aaa2d4b1cbd1a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdc4200f6df3ab658adb5b2b4c22f6ac"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#acdc4200f6df3ab658adb5b2b4c22f6ac">clCommandNDRangeKernelKHR</a> (cl_command_buffer_khr command_buffer, cl_command_queue command_queue, const cl_ndrange_kernel_command_properties_khr *properties, cl_kernel kernel, cl_uint work_dim, const size_t *global_work_offset, const size_t *global_work_size, const size_t *local_work_size, cl_uint num_sync_points_in_wait_list, const cl_sync_point_khr *sync_point_wait_list, cl_sync_point_khr *sync_point, cl_mutable_command_khr *mutable_handle)</td></tr>
<tr class="separator:acdc4200f6df3ab658adb5b2b4c22f6ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1384e99dd308097bc7a2edb202eb91a2"><td class="memItemLeft" align="right" valign="top">cl_int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a1384e99dd308097bc7a2edb202eb91a2">clUpdateMutableCommandsKHR</a> (cl_command_buffer_khr command_buffer, const cl_mutable_base_config_khr *mutable_config)</td></tr>
<tr class="separator:a1384e99dd308097bc7a2edb202eb91a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ece3384ff9496363d68aeb376041aaf"><td class="memItemLeft" align="right" valign="top">cl_mem&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="_open_c_l_8cpp.xhtml#a6ece3384ff9496363d68aeb376041aaf">clImportMemoryARM</a> (cl_context context, cl_mem_flags flags, const cl_import_properties_arm *properties, void *memory, size_t size, cl_int *errcode_ret)</td></tr>
<tr class="separator:a6ece3384ff9496363d68aeb376041aaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a594e176cb0da9a4b01f6df6a783c41a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a594e176cb0da9a4b01f6df6a783c41a6">&#9670;&nbsp;</a></span>LOAD_EXTENSION_FUNCTION_PTR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define LOAD_EXTENSION_FUNCTION_PTR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">func_name, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">platform_id&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">    func_name##_ptr =                                       \</div>
<div class="line">        reinterpret_cast&lt;decltype(func_name) *&gt;(<a class="code" href="_open_c_l_8cpp.xhtml#ad33ef1ed0329715a73c83c42f5fd8dcf">clGetExtensionFunctionAddressForPlatform</a>(platform_id, #func_name));</div>
<div class="ttc" id="a_open_c_l_8cpp_xhtml_ad33ef1ed0329715a73c83c42f5fd8dcf"><div class="ttname"><a href="_open_c_l_8cpp.xhtml#ad33ef1ed0329715a73c83c42f5fd8dcf">clGetExtensionFunctionAddressForPlatform</a></div><div class="ttdeci">void * clGetExtensionFunctionAddressForPlatform(cl_platform_id platform, const char *funcname)</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l01094">OpenCL.cpp:1094</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ad34d144f5c59d263587bd0adb4680353"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad34d144f5c59d263587bd0adb4680353">&#9670;&nbsp;</a></span>LOAD_FUNCTION_PTR</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define LOAD_FUNCTION_PTR</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">func_name, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">handle&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td>&#160;&#160;&#160;    func_name##_ptr = reinterpret_cast&lt;decltype(func_name) *&gt;(dlsym(handle, #func_name));</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab17c2125daccf219d5ead2be2491e36e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab17c2125daccf219d5ead2be2491e36e">&#9670;&nbsp;</a></span>clBuildProgram()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clBuildProgram </td>
          <td>(</td>
          <td class="paramtype">cl_program&#160;</td>
          <td class="paramname"><em>program</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_devices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_device_id *&#160;</td>
          <td class="paramname"><em>device_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(CL_CALLBACK *pfn_notify)(cl_program program, void *user_data)&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00440">440</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;{</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ad35af0d314615874e570540e9853668c">clBuildProgram_ptr</a>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <span class="keywordflow">return</span> func(program, num_devices, device_list, options, pfn_notify, user_data);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    {</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a7d9b5b93ad5e6018700fa36de6e1e279"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">arm_compute::CLSymbols::load_default</a></div><div class="ttdeci">bool load_default()</div><div class="ttdoc">Load symbols from any of the default OpenCL library names.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00049">OpenCL.cpp:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ac3d2ed16df8334b183d76d8a82dbf70f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a></div><div class="ttdeci">static CLSymbols &amp; get()</div><div class="ttdoc">Get the static instance of CLSymbols.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00043">OpenCL.cpp:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ad35af0d314615874e570540e9853668c"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ad35af0d314615874e570540e9853668c">arm_compute::CLSymbols::clBuildProgram_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clBuildProgram)&gt; clBuildProgram_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00098">OpenCL.h:98</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00098">CLSymbols::clBuildProgram_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="acdc4200f6df3ab658adb5b2b4c22f6ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdc4200f6df3ab658adb5b2b4c22f6ac">&#9670;&nbsp;</a></span>clCommandNDRangeKernelKHR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clCommandNDRangeKernelKHR </td>
          <td>(</td>
          <td class="paramtype">cl_command_buffer_khr&#160;</td>
          <td class="paramname"><em>command_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_ndrange_kernel_command_properties_khr *&#160;</td>
          <td class="paramname"><em>properties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>work_dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>global_work_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>global_work_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>local_work_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_sync_points_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_sync_point_khr *&#160;</td>
          <td class="paramname"><em>sync_point_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_sync_point_khr *&#160;</td>
          <td class="paramname"><em>sync_point</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mutable_command_khr *&#160;</td>
          <td class="paramname"><em>mutable_handle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01195">1195</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;{</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a8c3bde47b40a28f4c4a5224eb1eb28e4">clCommandNDRangeKernelKHR_ptr</a>;</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160; </div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    {</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        <span class="keywordflow">return</span> func(command_buffer, command_queue, properties, kernel, work_dim, global_work_offset, global_work_size,</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                    local_work_size, num_sync_points_in_wait_list, sync_point_wait_list, sync_point, mutable_handle);</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;    }</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    {</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        <span class="keywordflow">return</span> CL_INVALID_OPERATION;</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    }</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a8c3bde47b40a28f4c4a5224eb1eb28e4"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a8c3bde47b40a28f4c4a5224eb1eb28e4">arm_compute::CLSymbols::clCommandNDRangeKernelKHR_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCommandNDRangeKernelKHR)&gt; clCommandNDRangeKernelKHR_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00150">OpenCL.h:150</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00150">CLSymbols::clCommandNDRangeKernelKHR_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00059">CLMutableCommandBuffer::add_kernel()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="af9a973de9b75e338812149043568dc20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9a973de9b75e338812149043568dc20">&#9670;&nbsp;</a></span>clCreateBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_mem clCreateBuffer </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem_flags&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>host_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00835">835</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;{</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">clCreateBuffer_ptr</a>;</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    {</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, size, host_ptr, errcode_ret);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    }</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    {</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        {</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            *errcode_ret = CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;        }</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    }</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a301b84af701238b357de87434d0327a9"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">arm_compute::CLSymbols::clCreateBuffer_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateBuffer)&gt; clCreateBuffer_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00103">OpenCL.h:103</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adf0dd2db07cdbb966d6e385d3cd2605c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">arm_compute::test::validation::context</a></div><div class="ttdeci">auto context</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00167">DirectConv2d.cpp:167</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00103">CLSymbols::clCreateBuffer_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_buffer_allocator_8cpp_source.xhtml#l00035">CLBufferAllocator::allocate()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ae4091b6ac9dd4388f5b95f320a0c85a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4091b6ac9dd4388f5b95f320a0c85a8">&#9670;&nbsp;</a></span>clCreateCommandBufferKHR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_command_buffer_khr clCreateCommandBufferKHR </td>
          <td>(</td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_queues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_command_queue *&#160;</td>
          <td class="paramname"><em>queues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_command_buffer_properties_khr *&#160;</td>
          <td class="paramname"><em>properties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01107">1107</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;{</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a67abaab41731ded5b40fa9904f8b8933">clCreateCommandBufferKHR_ptr</a>;</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160; </div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;    {</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        <span class="keywordflow">return</span> func(num_queues, queues, properties, errcode_ret);</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;    }</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    {</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        {</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;            *errcode_ret = CL_INVALID_OPERATION;</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        }</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160; </div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;        <span class="keywordflow">return</span> {};</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    }</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a67abaab41731ded5b40fa9904f8b8933"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a67abaab41731ded5b40fa9904f8b8933">arm_compute::CLSymbols::clCreateCommandBufferKHR_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateCommandBufferKHR)&gt; clCreateCommandBufferKHR_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00145">OpenCL.h:145</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00145">CLSymbols::clCreateCommandBufferKHR_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00035">CLMutableCommandBuffer::CLMutableCommandBuffer()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ac9707377cc9420fd03b16d76e831513a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9707377cc9420fd03b16d76e831513a">&#9670;&nbsp;</a></span>clCreateCommandQueue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_command_queue clCreateCommandQueue </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue_properties&#160;</td>
          <td class="paramname"><em>properties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00369">369</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;{</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a9edd71637c165f39e1913b22bdafcd67">clCreateCommandQueue_ptr</a>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, device, properties, errcode_ret);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a9edd71637c165f39e1913b22bdafcd67"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a9edd71637c165f39e1913b22bdafcd67">arm_compute::CLSymbols::clCreateCommandQueue_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateCommandQueue)&gt; clCreateCommandQueue_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00095">OpenCL.h:95</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00095">CLSymbols::clCreateCommandQueue_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a2b2912c16aeb279ce55dc9c30968b906"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b2912c16aeb279ce55dc9c30968b906">&#9670;&nbsp;</a></span>clCreateCommandQueueWithProperties()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_command_queue clCreateCommandQueueWithProperties </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_queue_properties *&#160;</td>
          <td class="paramname"><em>properties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00386">386</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a75d6cb60b6d853a80a32aec236470883">clCreateCommandQueueWithProperties_ptr</a>;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, device, properties, errcode_ret);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a75d6cb60b6d853a80a32aec236470883"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a75d6cb60b6d853a80a32aec236470883">arm_compute::CLSymbols::clCreateCommandQueueWithProperties_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateCommandQueueWithProperties)&gt; clCreateCommandQueueWithProperties_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00096">OpenCL.h:96</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00096">CLSymbols::clCreateCommandQueueWithProperties_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="gpu_2unit_2_queue_8cpp_source.xhtml#l00044">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="abdcf0f1bbd28eb23c756f32e005e3846"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdcf0f1bbd28eb23c756f32e005e3846">&#9670;&nbsp;</a></span>clCreateContext()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_context clCreateContext </td>
          <td>(</td>
          <td class="paramtype">const cl_context_properties *&#160;</td>
          <td class="paramname"><em>properties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_devices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_device_id *&#160;</td>
          <td class="paramname"><em>devices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(const char *, const void *, size_t, void *)&#160;</td>
          <td class="paramname"><em>pfn_notify</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00403">403</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;{</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a14a1465f79e3703561c9ee0723276603">clCreateContext_ptr</a>;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">return</span> func(properties, num_devices, devices, pfn_notify, user_data, errcode_ret);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    {</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a14a1465f79e3703561c9ee0723276603"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a14a1465f79e3703561c9ee0723276603">arm_compute::CLSymbols::clCreateContext_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateContext)&gt; clCreateContext_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00093">OpenCL.h:93</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00093">CLSymbols::clCreateContext_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a298a4a3082936de672185fe3cc9b992b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a298a4a3082936de672185fe3cc9b992b">&#9670;&nbsp;</a></span>clCreateContextFromType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_context clCreateContextFromType </td>
          <td>(</td>
          <td class="paramtype">const cl_context_properties *&#160;</td>
          <td class="paramname"><em>properties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_type&#160;</td>
          <td class="paramname"><em>device_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(const char *, const void *, size_t, void *)&#160;</td>
          <td class="paramname"><em>pfn_notify</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>user_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00422">422</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;{</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#af60dbcf4d37ee4dd2c34cfbf08e64671">clCreateContextFromType_ptr</a>;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keywordflow">return</span> func(properties, device_type, pfn_notify, user_data, errcode_ret);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    }</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_af60dbcf4d37ee4dd2c34cfbf08e64671"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#af60dbcf4d37ee4dd2c34cfbf08e64671">arm_compute::CLSymbols::clCreateContextFromType_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateContextFromType)&gt; clCreateContextFromType_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00094">OpenCL.h:94</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00094">CLSymbols::clCreateContextFromType_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="aa31e96a1fb21520f2e391b4f7f46f5a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa31e96a1fb21520f2e391b4f7f46f5a9">&#9670;&nbsp;</a></span>clCreateImage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_mem clCreateImage </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem_flags&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_image_format *&#160;</td>
          <td class="paramname"><em>image_format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_image_desc *&#160;</td>
          <td class="paramname"><em>image_desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>host_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01056">1056</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;{</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a38dcfd5a3b3a0f7ab8e1f20e8d2fd01c">clCreateImage_ptr</a>;</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    {</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, image_format, image_desc, host_ptr, errcode_ret);</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    }</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    {</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;        {</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;            *errcode_ret = CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;        }</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    }</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a38dcfd5a3b3a0f7ab8e1f20e8d2fd01c"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a38dcfd5a3b3a0f7ab8e1f20e8d2fd01c">arm_compute::CLSymbols::clCreateImage_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateImage)&gt; clCreateImage_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00140">OpenCL.h:140</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00140">CLSymbols::clCreateImage_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_utils_8cpp_source.xhtml#l00062">arm_compute::create_image2d_from_buffer()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a372df0ff626cb294bc21a8d75aef7240"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a372df0ff626cb294bc21a8d75aef7240">&#9670;&nbsp;</a></span>clCreateKernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_kernel clCreateKernel </td>
          <td>(</td>
          <td class="paramtype">cl_program&#160;</td>
          <td class="paramname"><em>program</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>kernel_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00803">803</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;{</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a02aff28f848c48e02fababe120a0df36">clCreateKernel_ptr</a>;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        <span class="keywordflow">return</span> func(program, <a class="code" href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a>, errcode_ret);</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    }</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    {</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        {</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            *errcode_ret = CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        }</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    }</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;}</div>
<div class="ttc" id="a_cl_im2_col_kernel_8cpp_xhtml_a624a24e6d361fe7b8b8b2f6b375683a4"><div class="ttname"><a href="_cl_im2_col_kernel_8cpp.xhtml#a624a24e6d361fe7b8b8b2f6b375683a4">kernel_name</a></div><div class="ttdeci">std::string kernel_name</div><div class="ttdef"><b>Definition:</b> <a href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">ClIm2ColKernel.cpp:58</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a02aff28f848c48e02fababe120a0df36"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a02aff28f848c48e02fababe120a0df36">arm_compute::CLSymbols::clCreateKernel_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateKernel)&gt; clCreateKernel_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00105">OpenCL.h:105</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00105">CLSymbols::clCreateKernel_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, <a class="el" href="_cl_im2_col_kernel_8cpp_source.xhtml#l00058">kernel_name</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a1425fcfd615cc990cdf8c311d520ad10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1425fcfd615cc990cdf8c311d520ad10">&#9670;&nbsp;</a></span>clCreateProgramWithBinary()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_program clCreateProgramWithBinary </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_devices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_device_id *&#160;</td>
          <td class="paramname"><em>device_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>lengths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char **&#160;</td>
          <td class="paramname"><em>binaries</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>binary_status</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00705">705</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;{</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a2263b6ca759bdfed0a0727d2b68db916">clCreateProgramWithBinary_ptr</a>;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    {</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, num_devices, device_list, lengths, binaries, binary_status, errcode_ret);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    }</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        {</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            *errcode_ret = CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        }</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    }</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a2263b6ca759bdfed0a0727d2b68db916"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a2263b6ca759bdfed0a0727d2b68db916">arm_compute::CLSymbols::clCreateProgramWithBinary_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateProgramWithBinary)&gt; clCreateProgramWithBinary_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00111">OpenCL.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00111">CLSymbols::clCreateProgramWithBinary_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ae2ab434699c41d87099b48a774db0b9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2ab434699c41d87099b48a774db0b9d">&#9670;&nbsp;</a></span>clCreateProgramWithSource()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_program clCreateProgramWithSource </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>strings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>lengths</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00853">853</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;{</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a62fb6450bf1c30cca66d6547348eee3c">clCreateProgramWithSource_ptr</a>;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    {</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, count, strings, lengths, errcode_ret);</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    }</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    {</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        {</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            *errcode_ret = CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        }</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    }</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a62fb6450bf1c30cca66d6547348eee3c"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a62fb6450bf1c30cca66d6547348eee3c">arm_compute::CLSymbols::clCreateProgramWithSource_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateProgramWithSource)&gt; clCreateProgramWithSource_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00102">OpenCL.h:102</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00102">CLSymbols::clCreateProgramWithSource_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="aabca83598a7d2f2db7aaa2d4b1cbd1a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabca83598a7d2f2db7aaa2d4b1cbd1a7">&#9670;&nbsp;</a></span>clEnqueueCommandBufferKHR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueCommandBufferKHR </td>
          <td>(</td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_queues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue *&#160;</td>
          <td class="paramname"><em>queues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_buffer_khr&#160;</td>
          <td class="paramname"><em>command_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01175">1175</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;{</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a5ebd8ce67e380ed10aac0d1bf885b70b">clEnqueueCommandBufferKHR_ptr</a>;</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160; </div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    {</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;        <span class="keywordflow">return</span> func(num_queues, queues, command_buffer, num_events_in_wait_list, event_wait_list, event);</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    }</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    {</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;        <span class="keywordflow">return</span> CL_INVALID_OPERATION;</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    }</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a5ebd8ce67e380ed10aac0d1bf885b70b"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a5ebd8ce67e380ed10aac0d1bf885b70b">arm_compute::CLSymbols::clEnqueueCommandBufferKHR_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueCommandBufferKHR)&gt; clEnqueueCommandBufferKHR_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00149">OpenCL.h:149</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00149">CLSymbols::clEnqueueCommandBufferKHR_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00137">CLMutableCommandBuffer::enqueue()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a9039d2fa3d129a08baa1c49abf2f07fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9039d2fa3d129a08baa1c49abf2f07fb">&#9670;&nbsp;</a></span>clEnqueueMapBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* clEnqueueMapBuffer </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_bool&#160;</td>
          <td class="paramname"><em>blocking_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_map_flags&#160;</td>
          <td class="paramname"><em>map_flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00663">663</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;{</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#abd0ba6c593ff83cb0c3d0e1b746f068a">clEnqueueMapBuffer_ptr</a>;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    {</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keywordflow">return</span> func(command_queue, buffer, blocking_map, map_flags, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, size, num_events_in_wait_list,</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                    event_wait_list, event, errcode_ret);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    }</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    {</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        {</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            *errcode_ret = CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        }</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_abd0ba6c593ff83cb0c3d0e1b746f068a"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#abd0ba6c593ff83cb0c3d0e1b746f068a">arm_compute::CLSymbols::clEnqueueMapBuffer_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueMapBuffer)&gt; clEnqueueMapBuffer_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00113">OpenCL.h:113</a></div></div>
<div class="ttc" id="asrc_2core_2_c_l_2cl__kernels_2_helpers_8h_xhtml_a009469e4d9b8fce3b6d5e97d2077827d"><div class="ttname"><a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a></div><div class="ttdeci">__global uchar * offset(const Image *img, int x, int y)</div><div class="ttdoc">Get the pointer position of a Image.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">helpers.h:1142</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00113">CLSymbols::clEnqueueMapBuffer_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>, and <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a43d9a36e38a16e503e0bbdc7b2f81f12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43d9a36e38a16e503e0bbdc7b2f81f12">&#9670;&nbsp;</a></span>clEnqueueMarker()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueMarker </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00260">260</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a527fd99779c605a2203158219f18e95f">clEnqueueMarker_ptr</a>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span> func(command_queue, event);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a527fd99779c605a2203158219f18e95f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a527fd99779c605a2203158219f18e95f">arm_compute::CLSymbols::clEnqueueMarker_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueMarker)&gt; clEnqueueMarker_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00138">OpenCL.h:138</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00138">CLSymbols::clEnqueueMarker_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a0152f4b089c26f22f032162d0b7a0d21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0152f4b089c26f22f032162d0b7a0d21">&#9670;&nbsp;</a></span>clEnqueueNDRangeKernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueNDRangeKernel </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>work_dim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>global_work_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>global_work_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t *&#160;</td>
          <td class="paramname"><em>local_work_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00459">459</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;{</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">clEnqueueNDRangeKernel_ptr</a>;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordflow">return</span> func(command_queue, kernel, work_dim, global_work_offset, global_work_size, local_work_size,</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                    num_events_in_wait_list, event_wait_list, event);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ab5c1d962dbe252b8d6a9a3414557d194"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab5c1d962dbe252b8d6a9a3414557d194">arm_compute::CLSymbols::clEnqueueNDRangeKernel_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueNDRangeKernel)&gt; clEnqueueNDRangeKernel_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00099">OpenCL.h:99</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00099">CLSymbols::clEnqueueNDRangeKernel_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compat_command_buffer_8cpp_source.xhtml#l00081">CLCompatCommandBuffer::enqueue()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a0c6565be16b3326d2ccdab5339e0f7bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c6565be16b3326d2ccdab5339e0f7bf">&#9670;&nbsp;</a></span>clEnqueueReadBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueReadBuffer </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_bool&#160;</td>
          <td class="paramname"><em>blocking_read</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00607">607</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;{</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a114ecc5c7e99f380a84d33f32038dc27">clEnqueueReadBuffer_ptr</a>;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">return</span> func(command_queue, buffer, blocking_read, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, size, ptr, num_events_in_wait_list, event_wait_list,</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                    event);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    }</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    {</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    }</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a114ecc5c7e99f380a84d33f32038dc27"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a114ecc5c7e99f380a84d33f32038dc27">arm_compute::CLSymbols::clEnqueueReadBuffer_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueReadBuffer)&gt; clEnqueueReadBuffer_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00116">OpenCL.h:116</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00116">CLSymbols::clEnqueueReadBuffer_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>, and <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a66cc3ae002a3eb6b7c70291ba3eac1b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66cc3ae002a3eb6b7c70291ba3eac1b5">&#9670;&nbsp;</a></span>clEnqueueSVMMap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueSVMMap </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_bool&#160;</td>
          <td class="paramname"><em>blocking_map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_map_flags&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>svm_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00288">288</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ae4a0c63c4f06c8d80788da461812bf4c">clEnqueueSVMMap_ptr</a>;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">return</span> func(command_queue, blocking_map, flags, svm_ptr, size, num_events_in_wait_list, event_wait_list, event);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ae4a0c63c4f06c8d80788da461812bf4c"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ae4a0c63c4f06c8d80788da461812bf4c">arm_compute::CLSymbols::clEnqueueSVMMap_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueSVMMap)&gt; clEnqueueSVMMap_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00136">OpenCL.h:136</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00136">CLSymbols::clEnqueueSVMMap_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="_c_l_memory_region_8cpp_source.xhtml#l00148">CLCoarseSVMMemoryRegion::map()</a>.</p>

</div>
</div>
<a id="af15c1cf404e8af8057e176c967080fd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af15c1cf404e8af8057e176c967080fd4">&#9670;&nbsp;</a></span>clEnqueueSVMUnmap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueSVMUnmap </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>svm_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00309">309</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab30bda3641f8d1a73126884a9fd66a89">clEnqueueSVMUnmap_ptr</a>;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    {</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">return</span> func(command_queue, svm_ptr, num_events_in_wait_list, event_wait_list, event);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ab30bda3641f8d1a73126884a9fd66a89"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab30bda3641f8d1a73126884a9fd66a89">arm_compute::CLSymbols::clEnqueueSVMUnmap_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueSVMUnmap)&gt; clEnqueueSVMUnmap_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00137">OpenCL.h:137</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00137">CLSymbols::clEnqueueSVMUnmap_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="_c_l_memory_region_8cpp_source.xhtml#l00157">CLCoarseSVMMemoryRegion::unmap()</a>.</p>

</div>
</div>
<a id="af1ca0be4c120041eda74a4f1fc36c4a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1ca0be4c120041eda74a4f1fc36c4a0">&#9670;&nbsp;</a></span>clEnqueueUnmapMemObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueUnmapMemObject </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>memobj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>mapped_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00524">524</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;{</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aab857577e126a171222277703b724639">clEnqueueUnmapMemObject_ptr</a>;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keywordflow">return</span> func(command_queue, memobj, mapped_ptr, num_events_in_wait_list, event_wait_list, event);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    }</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    {</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    }</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aab857577e126a171222277703b724639"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aab857577e126a171222277703b724639">arm_compute::CLSymbols::clEnqueueUnmapMemObject_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueUnmapMemObject)&gt; clEnqueueUnmapMemObject_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00121">OpenCL.h:121</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00121">CLSymbols::clEnqueueUnmapMemObject_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a8301eaffd71b5aeae60dc9e3afdf8c9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8301eaffd71b5aeae60dc9e3afdf8c9b">&#9670;&nbsp;</a></span>clEnqueueWriteBuffer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clEnqueueWriteBuffer </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_bool&#160;</td>
          <td class="paramname"><em>blocking_write</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events_in_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_wait_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_event *&#160;</td>
          <td class="paramname"><em>event</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00584">584</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;{</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a3085f45d872eda6b1adf8557fd4915b9">clEnqueueWriteBuffer_ptr</a>;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    {</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <span class="keywordflow">return</span> func(command_queue, buffer, blocking_write, <a class="code" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h.xhtml#a009469e4d9b8fce3b6d5e97d2077827d">offset</a>, size, ptr, num_events_in_wait_list, event_wait_list,</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    event);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a3085f45d872eda6b1adf8557fd4915b9"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a3085f45d872eda6b1adf8557fd4915b9">arm_compute::CLSymbols::clEnqueueWriteBuffer_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clEnqueueWriteBuffer)&gt; clEnqueueWriteBuffer_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00117">OpenCL.h:117</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00117">CLSymbols::clEnqueueWriteBuffer_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>, and <a class="el" href="src_2core_2_c_l_2cl__kernels_2_helpers_8h_source.xhtml#l01142">offset()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a2eda66fd1833633bdc55e29686b7d454"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eda66fd1833633bdc55e29686b7d454">&#9670;&nbsp;</a></span>clFinalizeCommandBufferKHR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clFinalizeCommandBufferKHR </td>
          <td>(</td>
          <td class="paramtype">cl_command_buffer_khr&#160;</td>
          <td class="paramname"><em>command_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01130">1130</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;{</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a02f03aac7764b7a3c00575742ff08ca5">clFinalizeCommandBufferKHR_ptr</a>;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160; </div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    {</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="keywordflow">return</span> func(command_buffer);</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;    }</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;    {</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        <span class="keywordflow">return</span> CL_INVALID_OPERATION;</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    }</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a02f03aac7764b7a3c00575742ff08ca5"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a02f03aac7764b7a3c00575742ff08ca5">arm_compute::CLSymbols::clFinalizeCommandBufferKHR_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clFinalizeCommandBufferKHR)&gt; clFinalizeCommandBufferKHR_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00148">OpenCL.h:148</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00148">CLSymbols::clFinalizeCommandBufferKHR_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00100">CLMutableCommandBuffer::finalize()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ac78e93d371eecbe98f00bdf965c98ed6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac78e93d371eecbe98f00bdf965c98ed6">&#9670;&nbsp;</a></span>clFinish()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clFinish </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00771">771</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;{</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a31fd3504c695582b52ee2426dc71c1d7">clFinish_ptr</a>;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    {</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="keywordflow">return</span> func(command_queue);</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    }</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    {</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    }</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a31fd3504c695582b52ee2426dc71c1d7"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a31fd3504c695582b52ee2426dc71c1d7">arm_compute::CLSymbols::clFinish_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clFinish)&gt; clFinish_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00108">OpenCL.h:108</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00108">CLSymbols::clFinish_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="_c_l_memory_region_8cpp_source.xhtml#l00169">CLFineSVMMemoryRegion::map()</a>.</p>

</div>
</div>
<a id="acb9d0f5ac60336c8dac9a37e51f3cf47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb9d0f5ac60336c8dac9a37e51f3cf47">&#9670;&nbsp;</a></span>clFlush()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clFlush </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00757">757</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;{</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac88fa83ac520504fa6792d8c1e5296b6">clFlush_ptr</a>;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        <span class="keywordflow">return</span> func(command_queue);</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    }</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ac88fa83ac520504fa6792d8c1e5296b6"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac88fa83ac520504fa6792d8c1e5296b6">arm_compute::CLSymbols::clFlush_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clFlush)&gt; clFlush_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00107">OpenCL.h:107</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00107">CLSymbols::clFlush_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ad3379de4b5bac534f2e0197d0e53393b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3379de4b5bac534f2e0197d0e53393b">&#9670;&nbsp;</a></span>clGetCommandQueueInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetCommandQueueInfo </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_command_queue_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01002">1002</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;{</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a8709746b1a7fc8ac57ce61349332e866">clGetCommandQueueInfo_ptr</a>;</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    {</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        <span class="keywordflow">return</span> func(command_queue, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    }</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    {</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    }</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a8709746b1a7fc8ac57ce61349332e866"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a8709746b1a7fc8ac57ce61349332e866">arm_compute::CLSymbols::clGetCommandQueueInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetCommandQueueInfo)&gt; clGetCommandQueueInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00131">OpenCL.h:131</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00131">CLSymbols::clGetCommandQueueInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a4bd1918b00ed6da1c8ed84bf4251f963"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bd1918b00ed6da1c8ed84bf4251f963">&#9670;&nbsp;</a></span>clGetContextInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetContextInfo </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_context_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00351">351</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;{</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3b351139d8ac903bfa75463903ef002">clGetContextInfo_ptr</a>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    {</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ac3b351139d8ac903bfa75463903ef002"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac3b351139d8ac903bfa75463903ef002">arm_compute::CLSymbols::clGetContextInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetContextInfo)&gt; clGetContextInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00097">OpenCL.h:97</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00097">CLSymbols::clGetContextInfo_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ad61ef286586c4d20b47cc51a32839de1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad61ef286586c4d20b47cc51a32839de1">&#9670;&nbsp;</a></span>clGetDeviceIDs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetDeviceIDs </td>
          <td>(</td>
          <td class="paramtype">cl_platform_id&#160;</td>
          <td class="paramname"><em>platform</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_type&#160;</td>
          <td class="paramname"><em>device_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_entries</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_id *&#160;</td>
          <td class="paramname"><em>devices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint *&#160;</td>
          <td class="paramname"><em>num_devices</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00886">886</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;{</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a73ac5a70dfe6076f17a0b16d3a021daa">clGetDeviceIDs_ptr</a>;</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    {</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        <span class="keywordflow">return</span> func(platform, device_type, num_entries, devices, num_devices);</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    }</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    {</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    }</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a73ac5a70dfe6076f17a0b16d3a021daa"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a73ac5a70dfe6076f17a0b16d3a021daa">arm_compute::CLSymbols::clGetDeviceIDs_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetDeviceIDs)&gt; clGetDeviceIDs_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00125">OpenCL.h:125</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00125">CLSymbols::clGetDeviceIDs_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a677990334379f5f91619bfc43af63c4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a677990334379f5f91619bfc43af63c4a">&#9670;&nbsp;</a></span>clGetDeviceInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetDeviceInfo </td>
          <td>(</td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00904">904</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;{</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab6c28e45955ab8420512342ed6fa6934">clGetDeviceInfo_ptr</a>;</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    {</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <span class="keywordflow">return</span> func(device, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    }</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    {</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    }</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ab6c28e45955ab8420512342ed6fa6934"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab6c28e45955ab8420512342ed6fa6934">arm_compute::CLSymbols::clGetDeviceInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetDeviceInfo)&gt; clGetDeviceInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00124">OpenCL.h:124</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00124">CLSymbols::clGetDeviceInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00382">arm_compute::get_cl_image_pitch_alignment()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00398">arm_compute::get_cl_non_uniform_work_group_supported()</a>, <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00429">arm_compute::get_wbsm_support_info()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a1203915fa89fa2ad0914bc8b83e1af81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1203915fa89fa2ad0914bc8b83e1af81">&#9670;&nbsp;</a></span>clGetEventProfilingInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetEventProfilingInfo </td>
          <td>(</td>
          <td class="paramtype">cl_event&#160;</td>
          <td class="paramname"><em>event</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_profiling_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01038">1038</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;{</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aad5f68729eb6cc674fce0fd950c5b765">clGetEventProfilingInfo_ptr</a>;</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    {</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;        <span class="keywordflow">return</span> func(event, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    }</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    {</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;    }</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aad5f68729eb6cc674fce0fd950c5b765"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aad5f68729eb6cc674fce0fd950c5b765">arm_compute::CLSymbols::clGetEventProfilingInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetEventProfilingInfo)&gt; clGetEventProfilingInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00133">OpenCL.h:133</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00133">CLSymbols::clGetEventProfilingInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ad33ef1ed0329715a73c83c42f5fd8dcf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad33ef1ed0329715a73c83c42f5fd8dcf">&#9670;&nbsp;</a></span>clGetExtensionFunctionAddressForPlatform()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* clGetExtensionFunctionAddressForPlatform </td>
          <td>(</td>
          <td class="paramtype">cl_platform_id&#160;</td>
          <td class="paramname"><em>platform</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>funcname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01094">1094</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;{</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aec13c31839836cb6a0536bebc759f00f">clGetExtensionFunctionAddressForPlatform_ptr</a>;</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160; </div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;    {</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <span class="keywordflow">return</span> func(platform, funcname);</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    }</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160; </div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aec13c31839836cb6a0536bebc759f00f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aec13c31839836cb6a0536bebc759f00f">arm_compute::CLSymbols::clGetExtensionFunctionAddressForPlatform_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetExtensionFunctionAddressForPlatform)&gt; clGetExtensionFunctionAddressForPlatform_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00142">OpenCL.h:142</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00142">CLSymbols::clGetExtensionFunctionAddressForPlatform_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="af547e92d5365c4a7cc5609814618289e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af547e92d5365c4a7cc5609814618289e">&#9670;&nbsp;</a></span>clGetKernelInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetKernelInfo </td>
          <td>(</td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_kernel_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01020">1020</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;{</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7b9fe21a9872e746fa811b916e4dd9bf">clGetKernelInfo_ptr</a>;</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    {</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        <span class="keywordflow">return</span> func(kernel, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    }</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    {</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    }</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a7b9fe21a9872e746fa811b916e4dd9bf"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a7b9fe21a9872e746fa811b916e4dd9bf">arm_compute::CLSymbols::clGetKernelInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetKernelInfo)&gt; clGetKernelInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00132">OpenCL.h:132</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00132">CLSymbols::clGetKernelInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="acb69a828a88a01250d4765d9ac36637f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb69a828a88a01250d4765d9ac36637f">&#9670;&nbsp;</a></span>clGetKernelWorkGroupInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetKernelWorkGroupInfo </td>
          <td>(</td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_kernel_work_group_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00983">983</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;{</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aa5bc2c92a538b212960c02f9cb480afe">clGetKernelWorkGroupInfo_ptr</a>;</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    {</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        <span class="keywordflow">return</span> func(kernel, device, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    }</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;    {</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;    }</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aa5bc2c92a538b212960c02f9cb480afe"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aa5bc2c92a538b212960c02f9cb480afe">arm_compute::CLSymbols::clGetKernelWorkGroupInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetKernelWorkGroupInfo)&gt; clGetKernelWorkGroupInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00130">OpenCL.h:130</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00130">CLSymbols::clGetKernelWorkGroupInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a56cdb4214e0b6d66392cd0670f89e27d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56cdb4214e0b6d66392cd0670f89e27d">&#9670;&nbsp;</a></span>clGetMemObjectInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetMemObjectInfo </td>
          <td>(</td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>memobj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00922">922</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;{</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a1e85643ad6d7c35515d0e97b9b88e945">clGetMemObjectInfo_ptr</a>;</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    {</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        <span class="keywordflow">return</span> func(memobj, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    }</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    {</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;    }</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a1e85643ad6d7c35515d0e97b9b88e945"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a1e85643ad6d7c35515d0e97b9b88e945">arm_compute::CLSymbols::clGetMemObjectInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetMemObjectInfo)&gt; clGetMemObjectInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00126">OpenCL.h:126</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00126">CLSymbols::clGetMemObjectInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a16acb36fde338eaff889484b213c953d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16acb36fde338eaff889484b213c953d">&#9670;&nbsp;</a></span>clGetPlatformIDs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetPlatformIDs </td>
          <td>(</td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_entries</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_platform_id *&#160;</td>
          <td class="paramname"><em>platforms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint *&#160;</td>
          <td class="paramname"><em>num_platforms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00969">969</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;{</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aa794227c46c954c6e6684d21af618b00">clGetPlatformIDs_ptr</a>;</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    {</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        <span class="keywordflow">return</span> func(num_entries, platforms, num_platforms);</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    }</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    {</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    }</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aa794227c46c954c6e6684d21af618b00"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aa794227c46c954c6e6684d21af618b00">arm_compute::CLSymbols::clGetPlatformIDs_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetPlatformIDs)&gt; clGetPlatformIDs_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00129">OpenCL.h:129</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00129">CLSymbols::clGetPlatformIDs_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00236">arm_compute::opencl_is_available()</a>.</p>

</div>
</div>
<a id="af4dc7264b57c52f10781d5e7d7bbed66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4dc7264b57c52f10781d5e7d7bbed66">&#9670;&nbsp;</a></span>clGetPlatformInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetPlatformInfo </td>
          <td>(</td>
          <td class="paramtype">cl_platform_id&#160;</td>
          <td class="paramname"><em>platform</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_platform_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00951">951</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;{</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a1f02bfc0684bc35eaa24e1357c9a1400">clGetPlatformInfo_ptr</a>;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    {</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        <span class="keywordflow">return</span> func(platform, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    }</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    {</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    }</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a1f02bfc0684bc35eaa24e1357c9a1400"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a1f02bfc0684bc35eaa24e1357c9a1400">arm_compute::CLSymbols::clGetPlatformInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetPlatformInfo)&gt; clGetPlatformInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00128">OpenCL.h:128</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00128">CLSymbols::clGetPlatformInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a42eb427f73ef3e670fb570734341fd49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42eb427f73ef3e670fb570734341fd49">&#9670;&nbsp;</a></span>clGetProgramBuildInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetProgramBuildInfo </td>
          <td>(</td>
          <td class="paramtype">cl_program&#160;</td>
          <td class="paramname"><em>program</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_device_id&#160;</td>
          <td class="paramname"><em>device</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_program_build_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00630">630</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;{</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a34391377f3991f0a88631cf1b05e3c8b">clGetProgramBuildInfo_ptr</a>;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        <span class="keywordflow">return</span> func(program, device, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    }</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a34391377f3991f0a88631cf1b05e3c8b"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a34391377f3991f0a88631cf1b05e3c8b">arm_compute::CLSymbols::clGetProgramBuildInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetProgramBuildInfo)&gt; clGetProgramBuildInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00115">OpenCL.h:115</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00115">CLSymbols::clGetProgramBuildInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a9f71d4d10e82daea5e3dd62089dab424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f71d4d10e82daea5e3dd62089dab424">&#9670;&nbsp;</a></span>clGetProgramInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clGetProgramInfo </td>
          <td>(</td>
          <td class="paramtype">cl_program&#160;</td>
          <td class="paramname"><em>program</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_program_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>param_value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>param_value_size_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00785">785</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;{</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a38787d16b9a4ccb79f11c9e807b31f39">clGetProgramInfo_ptr</a>;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    {</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="keywordflow">return</span> func(program, param_name, param_value_size, param_value, param_value_size_ret);</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    }</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    {</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    }</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a38787d16b9a4ccb79f11c9e807b31f39"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a38787d16b9a4ccb79f11c9e807b31f39">arm_compute::CLSymbols::clGetProgramInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clGetProgramInfo)&gt; clGetProgramInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00106">OpenCL.h:106</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00106">CLSymbols::clGetProgramInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a6ece3384ff9496363d68aeb376041aaf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ece3384ff9496363d68aeb376041aaf">&#9670;&nbsp;</a></span>clImportMemoryARM()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_mem clImportMemoryARM </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_mem_flags&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_import_properties_arm *&#160;</td>
          <td class="paramname"><em>properties</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>memory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_int *&#160;</td>
          <td class="paramname"><em>errcode_ret</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01238">1238</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;{</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac85382870c183f26f792e183ee80e38c">clImportMemoryARM_ptr</a>;</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    {</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, properties, memory, size, errcode_ret);</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    }</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    {</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;        <span class="keywordflow">if</span> (errcode_ret != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        {</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;            *errcode_ret = CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        }</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;    }</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ac85382870c183f26f792e183ee80e38c"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac85382870c183f26f792e183ee80e38c">arm_compute::CLSymbols::clImportMemoryARM_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clImportMemoryARM)&gt; clImportMemoryARM_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00155">OpenCL.h:155</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00155">CLSymbols::clImportMemoryARM_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ad92270fbfad08428c9ed518170a8a74a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad92270fbfad08428c9ed518170a8a74a">&#9670;&nbsp;</a></span>clReleaseCommandBufferKHR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clReleaseCommandBufferKHR </td>
          <td>(</td>
          <td class="paramtype">cl_command_buffer_khr&#160;</td>
          <td class="paramname"><em>command_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01160">1160</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;{</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#adb27fb628c843d3ccbcfbfeabd37149f">clReleaseCommandBufferKHR_ptr</a>;</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160; </div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    {</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        <span class="keywordflow">return</span> func(command_buffer);</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    }</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    {</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;        <span class="keywordflow">return</span> CL_INVALID_OPERATION;</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    }</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_adb27fb628c843d3ccbcfbfeabd37149f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#adb27fb628c843d3ccbcfbfeabd37149f">arm_compute::CLSymbols::clReleaseCommandBufferKHR_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseCommandBufferKHR)&gt; clReleaseCommandBufferKHR_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00147">OpenCL.h:147</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00147">CLSymbols::clReleaseCommandBufferKHR_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00049">CLMutableCommandBuffer::~CLMutableCommandBuffer()</a>.</p>

</div>
</div>
<a id="abd209590ef4b1c99e256180ad77faecf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd209590ef4b1c99e256180ad77faecf">&#9670;&nbsp;</a></span>clReleaseCommandQueue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clReleaseCommandQueue </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00691">691</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;{</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a2cc4ea7d2743d398a26055f062052762">clReleaseCommandQueue_ptr</a>;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    {</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keywordflow">return</span> func(command_queue);</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    }</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    {</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    }</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a2cc4ea7d2743d398a26055f062052762"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a2cc4ea7d2743d398a26055f062052762">arm_compute::CLSymbols::clReleaseCommandQueue_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseCommandQueue)&gt; clReleaseCommandQueue_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00112">OpenCL.h:112</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00112">CLSymbols::clReleaseCommandQueue_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="gpu_2unit_2_queue_8cpp_source.xhtml#l00044">arm_compute::test::validation::TEST_CASE()</a>.</p>

</div>
</div>
<a id="a424af1d00f0ad1421da1bc0c2ccc9abe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a424af1d00f0ad1421da1bc0c2ccc9abe">&#9670;&nbsp;</a></span>clReleaseContext()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clReleaseContext </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00557">557</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aff1103110d2ad3e5fc2a8e0a746059b3">clReleaseContext_ptr</a>;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    {</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    }</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    {</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aff1103110d2ad3e5fc2a8e0a746059b3"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aff1103110d2ad3e5fc2a8e0a746059b3">arm_compute::CLSymbols::clReleaseContext_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseContext)&gt; clReleaseContext_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00119">OpenCL.h:119</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00119">CLSymbols::clReleaseContext_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a41eb8d025116f85cf2175e51c98d9fb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41eb8d025116f85cf2175e51c98d9fb6">&#9670;&nbsp;</a></span>clReleaseEvent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clReleaseEvent </td>
          <td>(</td>
          <td class="paramtype">cl_event&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00570">570</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;{</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a8f72204edecff30764f23d06c4e4ae20">clReleaseEvent_ptr</a>;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    {</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keywordflow">return</span> func(event);</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    {</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    }</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a8f72204edecff30764f23d06c4e4ae20"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a8f72204edecff30764f23d06c4e4ae20">arm_compute::CLSymbols::clReleaseEvent_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseEvent)&gt; clReleaseEvent_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00118">OpenCL.h:118</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00118">CLSymbols::clReleaseEvent_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a9533331a57797c4c4c4187900ff9ae51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9533331a57797c4c4c4187900ff9ae51">&#9670;&nbsp;</a></span>clReleaseKernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clReleaseKernel </td>
          <td>(</td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00872">872</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;{</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a49d82b362ebf160e65d162d6c9de31b1">clReleaseKernel_ptr</a>;</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    {</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        <span class="keywordflow">return</span> func(kernel);</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    }</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    {</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    }</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a49d82b362ebf160e65d162d6c9de31b1"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a49d82b362ebf160e65d162d6c9de31b1">arm_compute::CLSymbols::clReleaseKernel_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseKernel)&gt; clReleaseKernel_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00101">OpenCL.h:101</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00101">CLSymbols::clReleaseKernel_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="aaa80bcf581a6eb2848468677b3f3cbd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa80bcf581a6eb2848468677b3f3cbd1">&#9670;&nbsp;</a></span>clReleaseMemObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clReleaseMemObject </td>
          <td>(</td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>memobj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00510">510</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;{</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">clReleaseMemObject_ptr</a>;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    {</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keywordflow">return</span> func(memobj);</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    }</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    {</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    }</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a9385d6637f840d613d72f35a389d1c64"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">arm_compute::CLSymbols::clReleaseMemObject_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseMemObject)&gt; clReleaseMemObject_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00123">OpenCL.h:123</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00123">CLSymbols::clReleaseMemObject_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_buffer_allocator_8cpp_source.xhtml#l00043">CLBufferAllocator::free()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ae32b736b7255a0549acfe221f83a3197"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae32b736b7255a0549acfe221f83a3197">&#9670;&nbsp;</a></span>clReleaseProgram()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clReleaseProgram </td>
          <td>(</td>
          <td class="paramtype">cl_program&#160;</td>
          <td class="paramname"><em>program</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00743">743</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;{</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a0462afdc2906b59dd0a860c84c8f3d8a">clReleaseProgram_ptr</a>;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    {</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        <span class="keywordflow">return</span> func(program);</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    }</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    {</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    }</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a0462afdc2906b59dd0a860c84c8f3d8a"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a0462afdc2906b59dd0a860c84c8f3d8a">arm_compute::CLSymbols::clReleaseProgram_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseProgram)&gt; clReleaseProgram_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00109">OpenCL.h:109</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00109">CLSymbols::clReleaseProgram_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a945aa317a51cafa77b806560d1e0663e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a945aa317a51cafa77b806560d1e0663e">&#9670;&nbsp;</a></span>clRetainCommandBufferKHR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clRetainCommandBufferKHR </td>
          <td>(</td>
          <td class="paramtype">cl_command_buffer_khr&#160;</td>
          <td class="paramname"><em>command_buffer</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01145">1145</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;{</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ace23e12e64ef551a85b0d0553e2c1999">clRetainCommandBufferKHR_ptr</a>;</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160; </div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    {</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;        <span class="keywordflow">return</span> func(command_buffer);</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    }</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    {</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;        <span class="keywordflow">return</span> CL_INVALID_OPERATION;</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;    }</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ace23e12e64ef551a85b0d0553e2c1999"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ace23e12e64ef551a85b0d0553e2c1999">arm_compute::CLSymbols::clRetainCommandBufferKHR_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainCommandBufferKHR)&gt; clRetainCommandBufferKHR_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00146">OpenCL.h:146</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00146">CLSymbols::clRetainCommandBufferKHR_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="ae342be07c62cae5d870ff5796a599e75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae342be07c62cae5d870ff5796a599e75">&#9670;&nbsp;</a></span>clRetainCommandQueue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clRetainCommandQueue </td>
          <td>(</td>
          <td class="paramtype">cl_command_queue&#160;</td>
          <td class="paramname"><em>command_queue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00543">543</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;{</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a3777a685e4430d6dcdddd73531cc3cc3">clRetainCommandQueue_ptr</a>;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    {</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        <span class="keywordflow">return</span> func(command_queue);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    }</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    {</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    }</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a3777a685e4430d6dcdddd73531cc3cc3"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a3777a685e4430d6dcdddd73531cc3cc3">arm_compute::CLSymbols::clRetainCommandQueue_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainCommandQueue)&gt; clRetainCommandQueue_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00120">OpenCL.h:120</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00120">CLSymbols::clRetainCommandQueue_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="abea285cf4c4715cd284f275725cd1508"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abea285cf4c4715cd284f275725cd1508">&#9670;&nbsp;</a></span>clRetainContext()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clRetainContext </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00729">729</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;{</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d3ddaa28e01b8d4aeef8a5a3ae05f16">clRetainContext_ptr</a>;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    }</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    {</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    }</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a7d3ddaa28e01b8d4aeef8a5a3ae05f16"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a7d3ddaa28e01b8d4aeef8a5a3ae05f16">arm_compute::CLSymbols::clRetainContext_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainContext)&gt; clRetainContext_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00110">OpenCL.h:110</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00110">CLSymbols::clRetainContext_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a434f9e0998ebb096bf09a0a6abdd5938"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a434f9e0998ebb096bf09a0a6abdd5938">&#9670;&nbsp;</a></span>clRetainEvent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clRetainEvent </td>
          <td>(</td>
          <td class="paramtype">cl_event&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00937">937</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;{</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a96cfa134e391cec1fa131849b9dc6648">clRetainEvent_ptr</a>;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    {</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        <span class="keywordflow">return</span> func(event);</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    }</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    {</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    }</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a96cfa134e391cec1fa131849b9dc6648"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a96cfa134e391cec1fa131849b9dc6648">arm_compute::CLSymbols::clRetainEvent_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainEvent)&gt; clRetainEvent_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00127">OpenCL.h:127</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00127">CLSymbols::clRetainEvent_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="_open_c_l_timer_8cpp_source.xhtml#l00096">OpenCLClock&lt; output_timestamps &gt;::test_start()</a>.</p>

</div>
</div>
<a id="a617b60a00661fe3a03749b6b9913d006"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a617b60a00661fe3a03749b6b9913d006">&#9670;&nbsp;</a></span>clRetainKernel()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clRetainKernel </td>
          <td>(</td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00821">821</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;{</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a70f0c6b172261cc89e5d90239a8b70d0">clRetainKernel_ptr</a>;</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;    {</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        <span class="keywordflow">return</span> func(kernel);</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    }</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    {</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    }</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a70f0c6b172261cc89e5d90239a8b70d0"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a70f0c6b172261cc89e5d90239a8b70d0">arm_compute::CLSymbols::clRetainKernel_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainKernel)&gt; clRetainKernel_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00104">OpenCL.h:104</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00104">CLSymbols::clRetainKernel_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a2c88e252bef66c05807260b013a725de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c88e252bef66c05807260b013a725de">&#9670;&nbsp;</a></span>clRetainMemObject()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clRetainMemObject </td>
          <td>(</td>
          <td class="paramtype">cl_mem&#160;</td>
          <td class="paramname"><em>memobj</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00496">496</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">clRetainMemObject_ptr</a>;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    {</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">return</span> func(memobj);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    }</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    }</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ab7b31e7922544d4a6325320f08ad2474"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">arm_compute::CLSymbols::clRetainMemObject_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainMemObject)&gt; clRetainMemObject_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00122">OpenCL.h:122</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00122">CLSymbols::clRetainMemObject_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="aa0cc01b2f6b15bbab28eb38d6f29f184"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0cc01b2f6b15bbab28eb38d6f29f184">&#9670;&nbsp;</a></span>clRetainProgram()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clRetainProgram </td>
          <td>(</td>
          <td class="paramtype">cl_program&#160;</td>
          <td class="paramname"><em>program</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00649">649</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;{</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aa9752599bfd3a28d9c34cfb59c8feaf3">clRetainProgram_ptr</a>;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <span class="keywordflow">return</span> func(program);</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    }</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    {</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    }</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aa9752599bfd3a28d9c34cfb59c8feaf3"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aa9752599bfd3a28d9c34cfb59c8feaf3">arm_compute::CLSymbols::clRetainProgram_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainProgram)&gt; clRetainProgram_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00114">OpenCL.h:114</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00114">CLSymbols::clRetainProgram_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a3945f28bb1b23afb00a87801136271e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3945f28bb1b23afb00a87801136271e9">&#9670;&nbsp;</a></span>clSetKernelArg()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clSetKernelArg </td>
          <td>(</td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>arg_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>arg_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>arg_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00482">482</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;{</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a021f5850b98ba79d84067e762b84aa52">clSetKernelArg_ptr</a>;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        <span class="keywordflow">return</span> func(kernel, arg_index, arg_size, arg_value);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a021f5850b98ba79d84067e762b84aa52"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a021f5850b98ba79d84067e762b84aa52">arm_compute::CLSymbols::clSetKernelArg_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSetKernelArg)&gt; clSetKernelArg_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00100">OpenCL.h:100</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00100">CLSymbols::clSetKernelArg_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_l_compat_command_buffer_8cpp_source.xhtml#l00081">CLCompatCommandBuffer::enqueue()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="aaf342694786e1e468c55431205f36ced"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf342694786e1e468c55431205f36ced">&#9670;&nbsp;</a></span>clSetKernelExecInfo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clSetKernelExecInfo </td>
          <td>(</td>
          <td class="paramtype">cl_kernel&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_kernel_exec_info&#160;</td>
          <td class="paramname"><em>param_name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>param_value_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>param_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01080">1080</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;{</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#aad5fe0dac5f86adfdda65fcbc2fa7e92">clSetKernelExecInfo_ptr</a>;</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    {</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;        <span class="keywordflow">return</span> func(kernel, param_name, param_value_size, param_value);</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    }</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    {</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    }</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_aad5fe0dac5f86adfdda65fcbc2fa7e92"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#aad5fe0dac5f86adfdda65fcbc2fa7e92">arm_compute::CLSymbols::clSetKernelExecInfo_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSetKernelExecInfo)&gt; clSetKernelExecInfo_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00141">OpenCL.h:141</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00141">CLSymbols::clSetKernelExecInfo_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="core_2_c_l_2_c_l_helpers_8cpp_source.xhtml#l00441">arm_compute::set_wbsm()</a>.</p>

</div>
</div>
<a id="a3f3b491b813e283ae79a756cb7ae84bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f3b491b813e283ae79a756cb7ae84bd">&#9670;&nbsp;</a></span>clSVMAlloc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* clSVMAlloc </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_svm_mem_flags_arm&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>alignment</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00327">327</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">clSVMAlloc_ptr</a>;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">return</span> func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, size, alignment);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_abf58c6d99585520b40a396a890caa9ee"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">arm_compute::CLSymbols::clSVMAlloc_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSVMAlloc)&gt; clSVMAlloc_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00134">OpenCL.h:134</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00134">CLSymbols::clSVMAlloc_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a1412ab782ad4055d71dc9c5a7c4c11e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1412ab782ad4055d71dc9c5a7c4c11e4">&#9670;&nbsp;</a></span>clSVMFree()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void clSVMFree </td>
          <td>(</td>
          <td class="paramtype">cl_context&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>svm_pointer</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00341">341</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">clSVMFree_ptr</a>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        func(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, svm_pointer);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_adbd557acca5bc0f92a1a7f8ebc26e9ed"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">arm_compute::CLSymbols::clSVMFree_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSVMFree)&gt; clSVMFree_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00135">OpenCL.h:135</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00135">CLSymbols::clSVMFree_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
<a id="a1384e99dd308097bc7a2edb202eb91a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1384e99dd308097bc7a2edb202eb91a2">&#9670;&nbsp;</a></span>clUpdateMutableCommandsKHR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clUpdateMutableCommandsKHR </td>
          <td>(</td>
          <td class="paramtype">cl_command_buffer_khr&#160;</td>
          <td class="paramname"><em>command_buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_mutable_base_config_khr *&#160;</td>
          <td class="paramname"><em>mutable_config</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l01222">1222</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;{</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a01ce159b1c9b568493a1bd4f98cd51eb">clUpdateMutableCommandsKHR_ptr</a>;</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160; </div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    {</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        <span class="keywordflow">return</span> func(command_buffer, mutable_config);</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    }</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    {</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        <span class="keywordflow">return</span> CL_INVALID_OPERATION;</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;    }</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a01ce159b1c9b568493a1bd4f98cd51eb"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a01ce159b1c9b568493a1bd4f98cd51eb">arm_compute::CLSymbols::clUpdateMutableCommandsKHR_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clUpdateMutableCommandsKHR)&gt; clUpdateMutableCommandsKHR_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00152">OpenCL.h:152</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00152">CLSymbols::clUpdateMutableCommandsKHR_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>, and <a class="el" href="_c_l_mutable_command_buffer_8cpp_source.xhtml#l00128">CLMutableCommandBuffer::update()</a>.</p>

</div>
</div>
<a id="ab01da83b3a9fcd7a69dda12cc721c8f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab01da83b3a9fcd7a69dda12cc721c8f8">&#9670;&nbsp;</a></span>clWaitForEvents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cl_int clWaitForEvents </td>
          <td>(</td>
          <td class="paramtype">cl_uint&#160;</td>
          <td class="paramname"><em>num_events</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const cl_event *&#160;</td>
          <td class="paramname"><em>event_list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_open_c_l_8cpp_source.xhtml#l00274">274</a> of file <a class="el" href="_open_c_l_8cpp_source.xhtml">OpenCL.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a7d9b5b93ad5e6018700fa36de6e1e279">load_default</a>();</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">auto</span> func = <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a8fd1b20db02f6fb96562ddff20134a53">clWaitForEvents_ptr</a>;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">if</span> (func != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">return</span> func(num_events, event_list);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">return</span> CL_OUT_OF_RESOURCES;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a8fd1b20db02f6fb96562ddff20134a53"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a8fd1b20db02f6fb96562ddff20134a53">arm_compute::CLSymbols::clWaitForEvents_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clWaitForEvents)&gt; clWaitForEvents_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00139">OpenCL.h:139</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00139">CLSymbols::clWaitForEvents_ptr</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00049">CLSymbols::load_default()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_open_c_l_8cpp_source.xhtml#l00092">CLSymbols::load()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_8c278f79c760e5c5fbd911f9870614c1.xhtml">CL</a></li><li class="navelem"><a class="el" href="_open_c_l_8cpp.xhtml">OpenCL.cpp</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:49 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
