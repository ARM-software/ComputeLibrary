<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: OpenCLMemoryUsage Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">OpenCLMemoryUsage Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance.">Instrument</a> collecting memory usage information for OpenCL.  
 <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_open_c_l_memory_usage_8h_source.xhtml">OpenCLMemoryUsage.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for OpenCLMemoryUsage:</div>
<div class="dyncontent">
<div class="center"><!-- SVG 0 -->
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2645ccd83bc30f0c6cc7aedd2fa51806"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a2645ccd83bc30f0c6cc7aedd2fa51806">OpenCLMemoryUsage</a> (<a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">ScaleFactor</a> scale_factor)</td></tr>
<tr class="memdesc:a2645ccd83bc30f0c6cc7aedd2fa51806"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an OpenCL timer.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a2645ccd83bc30f0c6cc7aedd2fa51806">More...</a><br /></td></tr>
<tr class="separator:a2645ccd83bc30f0c6cc7aedd2fa51806"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501ef37fef441a0a6a8ea8b8e30a7181"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">id</a> () const override</td></tr>
<tr class="memdesc:a501ef37fef441a0a6a8ea8b8e30a7181"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identifier for the instrument.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a501ef37fef441a0a6a8ea8b8e30a7181">More...</a><br /></td></tr>
<tr class="separator:a501ef37fef441a0a6a8ea8b8e30a7181"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad94b6b2e29abc159c9624278938badb3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ad94b6b2e29abc159c9624278938badb3">test_start</a> () override</td></tr>
<tr class="memdesc:ad94b6b2e29abc159c9624278938badb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start of the test.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ad94b6b2e29abc159c9624278938badb3">More...</a><br /></td></tr>
<tr class="separator:ad94b6b2e29abc159c9624278938badb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">start</a> () override</td></tr>
<tr class="memdesc:a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start measuring.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">More...</a><br /></td></tr>
<tr class="separator:a5d5d9ebd12cd3a7d268bc98a3fc7bf97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3536e22848ce87b16a9b96d6d824d45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ab3536e22848ce87b16a9b96d6d824d45">stop</a> () override</td></tr>
<tr class="memdesc:ab3536e22848ce87b16a9b96d6d824d45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop measuring.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#ab3536e22848ce87b16a9b96d6d824d45">More...</a><br /></td></tr>
<tr class="separator:ab3536e22848ce87b16a9b96d6d824d45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84eed1102b2ad191e3659dd7c49705bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a84eed1102b2ad191e3659dd7c49705bc">test_stop</a> () override</td></tr>
<tr class="memdesc:a84eed1102b2ad191e3659dd7c49705bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">End of the test.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a84eed1102b2ad191e3659dd7c49705bc">More...</a><br /></td></tr>
<tr class="separator:a84eed1102b2ad191e3659dd7c49705bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60f8fdb7ead1583e0dfae6e97372bf40"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a60f8fdb7ead1583e0dfae6e97372bf40">test_measurements</a> () const override</td></tr>
<tr class="memdesc:a60f8fdb7ead1583e0dfae6e97372bf40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the latest test measurements.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a60f8fdb7ead1583e0dfae6e97372bf40">More...</a><br /></td></tr>
<tr class="separator:a60f8fdb7ead1583e0dfae6e97372bf40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73cabccc9d4406bf48f1db033dc35005"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a> () const override</td></tr>
<tr class="memdesc:a73cabccc9d4406bf48f1db033dc35005"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the latest measurements.  <a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">More...</a><br /></td></tr>
<tr class="separator:a73cabccc9d4406bf48f1db033dc35005"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a></td></tr>
<tr class="memitem:a44dfdf6c9c53e1b5c5eddfc58c31dc54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a44dfdf6c9c53e1b5c5eddfc58c31dc54">Instrument</a> ()=default</td></tr>
<tr class="memdesc:a44dfdf6c9c53e1b5c5eddfc58c31dc54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a44dfdf6c9c53e1b5c5eddfc58c31dc54">More...</a><br /></td></tr>
<tr class="separator:a44dfdf6c9c53e1b5c5eddfc58c31dc54 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92db65cbe174915234b0d99b3ad4be7 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ac92db65cbe174915234b0d99b3ad4be7">Instrument</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;)=default</td></tr>
<tr class="memdesc:ac92db65cbe174915234b0d99b3ad4be7 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ac92db65cbe174915234b0d99b3ad4be7">More...</a><br /></td></tr>
<tr class="separator:ac92db65cbe174915234b0d99b3ad4be7 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adda867124fd5c093788f96cb2eaf67cd inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#adda867124fd5c093788f96cb2eaf67cd">Instrument</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:adda867124fd5c093788f96cb2eaf67cd inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#adda867124fd5c093788f96cb2eaf67cd">More...</a><br /></td></tr>
<tr class="separator:adda867124fd5c093788f96cb2eaf67cd inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4a6c66ea355204cca47490247b91f5f inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ae4a6c66ea355204cca47490247b91f5f">operator=</a> (const <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;)=default</td></tr>
<tr class="memdesc:ae4a6c66ea355204cca47490247b91f5f inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ae4a6c66ea355204cca47490247b91f5f">More...</a><br /></td></tr>
<tr class="separator:ae4a6c66ea355204cca47490247b91f5f inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a550047da2682a06765be837ae570e542 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a550047da2682a06765be837ae570e542">operator=</a> (<a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a550047da2682a06765be837ae570e542 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a550047da2682a06765be837ae570e542">More...</a><br /></td></tr>
<tr class="separator:a550047da2682a06765be837ae570e542 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bd8541cf37e6c439d4a6bf7296437a2 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a7bd8541cf37e6c439d4a6bf7296437a2">~Instrument</a> ()=default</td></tr>
<tr class="memdesc:a7bd8541cf37e6c439d4a6bf7296437a2 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a7bd8541cf37e6c439d4a6bf7296437a2">More...</a><br /></td></tr>
<tr class="separator:a7bd8541cf37e6c439d4a6bf7296437a2 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d3582d354eb3e9028f627624ad7e126 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a4d3582d354eb3e9028f627624ad7e126">instrument_header</a> () const</td></tr>
<tr class="memdesc:a4d3582d354eb3e9028f627624ad7e126 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return JSON formatted instrument header string.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a4d3582d354eb3e9028f627624ad7e126">More...</a><br /></td></tr>
<tr class="separator:a4d3582d354eb3e9028f627624ad7e126 inherit pub_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a></td></tr>
<tr class="memitem:afc7df496e6026b91c3f48da6821c86a9 inherit pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> = std::map&lt; std::string, <a class="el" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml">Measurement</a> &gt;</td></tr>
<tr class="memdesc:afc7df496e6026b91c3f48da6821c86a9 inherit pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Map of measurements.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">More...</a><br /></td></tr>
<tr class="separator:afc7df496e6026b91c3f48da6821c86a9 inherit pub_types_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a></td></tr>
<tr class="memitem:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memTemplParams" colspan="2">template&lt;typename T , ScaleFactor scale&gt; </td></tr>
<tr class="memitem:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memTemplItemLeft" align="right" valign="top">static std::unique_ptr&lt; <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml">Instrument</a> &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ab6ac86ac15a8211221f1721d6a4ee889">make_instrument</a> ()</td></tr>
<tr class="memdesc:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function to create an instrument of the given type.  <a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ab6ac86ac15a8211221f1721d6a4ee889">More...</a><br /></td></tr>
<tr class="separator:ab6ac86ac15a8211221f1721d6a4ee889 inherit pub_static_methods_classarm__compute_1_1test_1_1framework_1_1_instrument"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml" title="Interface for classes that can be used to measure performance.">Instrument</a> collecting memory usage information for OpenCL. </p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_open_c_l_memory_usage_8h_source.xhtml">OpenCLMemoryUsage.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2645ccd83bc30f0c6cc7aedd2fa51806"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2645ccd83bc30f0c6cc7aedd2fa51806">&#9670;&nbsp;</a></span>OpenCLMemoryUsage()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml">OpenCLMemoryUsage</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100">ScaleFactor</a>&#160;</td>
          <td class="paramname"><em>scale_factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct an OpenCL timer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_factor</td><td><a class="el" href="structarm__compute_1_1test_1_1framework_1_1_measurement.xhtml" title="Generic measurement that stores values as either double or long long int.">Measurement</a> scale factor. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    : real_clCreateBuffer(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clCreateBuffer_ptr), real_clRetainMemObject(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clRetainMemObject_ptr), real_clReleaseMemObject(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clReleaseMemObject_ptr),</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      real_clSVMAlloc(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clSVMAlloc_ptr), real_clSVMFree(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clSVMFree_ptr), _allocations(), _svm_allocations(), _start(), _end(), _now()</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">switch</span>(scale_factor)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ab50339a10e1de285ac99d4c3990b8693">ScaleFactor::NONE</a>:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            _scale_factor = 1;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            _unit         = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100a31b560df072eca60895ba6d4541c41a2">ScaleFactor::SCALE_1K</a>:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            _scale_factor = 1000;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            _unit         = <span class="stringliteral">&quot;K &quot;</span>;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ade0343867b7ffbd33367905039d496f5">ScaleFactor::SCALE_1M</a>:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            _scale_factor = 1000000;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            _unit         = <span class="stringliteral">&quot;M &quot;</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;Invalid scale&quot;</span>);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ac3d2ed16df8334b183d76d8a82dbf70f"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">arm_compute::CLSymbols::get</a></div><div class="ttdeci">static CLSymbols &amp; get()</div><div class="ttdoc">Get the static instance of CLSymbols.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8cpp_source.xhtml#l00043">OpenCL.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100a31b560df072eca60895ba6d4541c41a2"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100a31b560df072eca60895ba6d4541c41a2">arm_compute::test::framework::ScaleFactor::SCALE_1K</a></div><div class="ttdeci">@ SCALE_1K</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100ab50339a10e1de285ac99d4c3990b8693"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ab50339a10e1de285ac99d4c3990b8693">arm_compute::test::framework::ScaleFactor::NONE</a></div><div class="ttdeci">@ NONE</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_xhtml_a3a01a70ad3a22d8b80c413e8a5977100ade0343867b7ffbd33367905039d496f5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework.xhtml#a3a01a70ad3a22d8b80c413e8a5977100ade0343867b7ffbd33367905039d496f5">arm_compute::test::framework::ScaleFactor::SCALE_1M</a></div><div class="ttdeci">@ SCALE_1M</div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a501ef37fef441a0a6a8ea8b8e30a7181"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a501ef37fef441a0a6a8ea8b8e30a7181">&#9670;&nbsp;</a></span>id()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Identifier for the instrument. </p>

<p>Implements <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a93697d33dc9325ba180a9a2a8ade6937">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;OpenCLMemoryUsage&quot;</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a73cabccc9d4406bf48f1db033dc35005"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73cabccc9d4406bf48f1db033dc35005">&#9670;&nbsp;</a></span>measurements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">Instrument::MeasurementsMap</a> measurements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the latest measurements. </p>
<dl class="section return"><dt>Returns</dt><dd>the latest measurements. </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#af7d7a6fbea69e98b802398957a245488">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Num buffers allocated per run&quot;</span>, Measurement(_end.num_allocations - _start.num_allocations, <span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Total memory allocated per run&quot;</span>, Measurement((_end.total_allocated - _start.total_allocated) / _scale_factor, _unit));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Memory in use at start of run&quot;</span>, Measurement(_start.in_use / _scale_factor, _unit));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_instrument_xhtml_afc7df496e6026b91c3f48da6821c86a9"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">arm_compute::test::framework::Instrument::MeasurementsMap</a></div><div class="ttdeci">std::map&lt; std::string, Measurement &gt; MeasurementsMap</div><div class="ttdoc">Map of measurements.</div><div class="ttdef"><b>Definition:</b> <a href="_instrument_8h_source.xhtml#l00109">Instrument.h:109</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage_xhtml_a73cabccc9d4406bf48f1db033dc35005"><div class="ttname"><a href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">arm_compute::test::framework::OpenCLMemoryUsage::measurements</a></div><div class="ttdeci">MeasurementsMap measurements() const override</div><div class="ttdoc">Return the latest measurements.</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_memory_usage_8cpp_source.xhtml#l00176">OpenCLMemoryUsage.cpp:176</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00185">OpenCLMemoryUsage::test_measurements()</a>.</p>

</div>
</div>
<a id="a5d5d9ebd12cd3a7d268bc98a3fc7bf97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d5d9ebd12cd3a7d268bc98a3fc7bf97">&#9670;&nbsp;</a></span>start()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start measuring. </p>
<p>Called just before the run of the test starts </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a62b63bddf378b0e13a4affa3e8e1bedf">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00157">157</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    _start = _now;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ab3536e22848ce87b16a9b96d6d824d45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3536e22848ce87b16a9b96d6d824d45">&#9670;&nbsp;</a></span>stop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void stop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stop measuring. </p>
<p>Called just after the run of the test ends </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#ae92ae13a136435391be883fd6f0f5c8c">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    _end = _now;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<a id="a60f8fdb7ead1583e0dfae6e97372bf40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60f8fdb7ead1583e0dfae6e97372bf40">&#9670;&nbsp;</a></span>test_measurements()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">Instrument::MeasurementsMap</a> test_measurements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the latest test measurements. </p>
<dl class="section return"><dt>Returns</dt><dd>the latest test measurements. </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#aab0f12a9ccff85982411599026baad54">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00185">185</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#afc7df496e6026b91c3f48da6821c86a9">MeasurementsMap</a> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Num buffers&quot;</span>, Measurement(_now.num_allocations, <span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Total memory allocated&quot;</span>, Measurement(_now.total_allocated / _scale_factor, _unit));</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Max memory allocated&quot;</span>, Measurement(_now.max_in_use / _scale_factor, _unit));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Memory leaked&quot;</span>, Measurement(_now.in_use / _scale_factor, _unit));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">size_t</span> num_programs = <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().<a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#a54bb195c770b747d87af7506c2032aa4">get_built_programs</a>().size();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">size_t</span> total_size   = 0;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span> &amp;it : <a class="code" href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">CLKernelLibrary::get</a>().get_built_programs())</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        std::vector&lt;size_t&gt; binary_sizes = it.second.getInfo&lt;CL_PROGRAM_BINARY_SIZES&gt;();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        total_size                       = <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">std::accumulate</a>(binary_sizes.begin(), binary_sizes.end(), total_size);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Num programs in cache&quot;</span>, Measurement(num_programs, <span class="stringliteral">&quot;&quot;</span>));</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>.emplace(<span class="stringliteral">&quot;Total programs memory in cache&quot;</span>, Measurement(total_size / _scale_factor, _unit));</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml#a73cabccc9d4406bf48f1db033dc35005">measurements</a>;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_a54bb195c770b747d87af7506c2032aa4"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#a54bb195c770b747d87af7506c2032aa4">arm_compute::CLKernelLibrary::get_built_programs</a></div><div class="ttdeci">const std::map&lt; std::string, cl::Program &gt; &amp; get_built_programs() const</div><div class="ttdoc">Access the cache of built OpenCL programs.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00093">CLKernelLibrary.cpp:93</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_kernel_library_xhtml_acba005f5ce2c62cbf3f94d074d9007aa"><div class="ttname"><a href="classarm__compute_1_1_c_l_kernel_library.xhtml#acba005f5ce2c62cbf3f94d074d9007aa">arm_compute::CLKernelLibrary::get</a></div><div class="ttdeci">static CLKernelLibrary &amp; get()</div><div class="ttdoc">Access the KernelLibrary singleton.</div><div class="ttdef"><b>Definition:</b> <a href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_accumulate_8cpp_source.xhtml#l00038">arm_compute::test::validation::reference::accumulate()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00041">CLKernelLibrary::get()</a>, <a class="el" href="core_2_c_l_2_c_l_kernel_library_8cpp_source.xhtml#l00093">CLKernelLibrary::get_built_programs()</a>, and <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00176">OpenCLMemoryUsage::measurements()</a>.</p>

</div>
</div>
<a id="ad94b6b2e29abc159c9624278938badb3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad94b6b2e29abc159c9624278938badb3">&#9670;&nbsp;</a></span>test_start()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void test_start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Start of the test. </p>
<p>Called before the test set up starts </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a66c51340d5301212438dd42cddd9b015">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    _now = Stats();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clCreateBuffer_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">clCreateBuffer_ptr</a> = [<span class="keyword">this</span>](</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                              cl_context   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                              cl_mem_flags flags,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                              <span class="keywordtype">size_t</span>       size,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                              <span class="keywordtype">void</span>        *host_ptr,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                              cl_int *     errcode_ret)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        cl_mem <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clCreateBuffer(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, size, host_ptr, errcode_ret);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">if</span>(host_ptr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment">// If it&#39;s an SVM / external allocation;</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            size = 0;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            _now.num_allocations++;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            _now.in_use += size;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            _now.total_allocated += size;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">if</span>(_now.in_use &gt; _now.max_in_use)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                _now.max_in_use = _now.in_use;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        this-&gt;_allocations[<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>] = Allocation(size);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    };</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clRetainMemObject_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">clRetainMemObject_ptr</a> = [<span class="keyword">this</span>](cl_mem memobj)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        cl_int <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clRetainMemObject(memobj);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        this-&gt;_allocations[memobj].refcount++;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    };</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clReleaseMemObject_ptr == <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">clReleaseMemObject_ptr</a> = [<span class="keyword">this</span>](cl_mem memobj)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        cl_int      <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clRetainMemObject(memobj);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        Allocation &amp;alloc  = this-&gt;_allocations[memobj];</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span>(--alloc.refcount == 0)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            _now.in_use -= alloc.size;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    };</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">//Only intercept the function if it exists:</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clSVMAlloc_ptr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">clSVMAlloc_ptr</a> = [<span class="keyword">this</span>](cl_context <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, cl_svm_mem_flags flags, <span class="keywordtype">size_t</span> size, cl_uint alignment)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordtype">void</span> *<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> = this-&gt;real_clSVMAlloc(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, flags, size, alignment);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a> != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                _svm_allocations[<a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>] = size;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                _now.num_allocations++;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                _now.in_use += size;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                _now.total_allocated += size;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keywordflow">if</span>(_now.in_use &gt; _now.max_in_use)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    _now.max_in_use = _now.in_use;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">retval</a>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        };</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">//Only intercept the function if it exists:</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().clSVMFree_ptr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">clSVMFree_ptr</a> = [<span class="keyword">this</span>](cl_context <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, <span class="keywordtype">void</span> *svm_pointer)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            this-&gt;real_clSVMFree(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">context</a>, svm_pointer);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">auto</span> iterator = _svm_allocations.find(svm_pointer);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span>(iterator != _svm_allocations.end())</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordtype">size_t</span> size = iterator-&gt;second;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                _svm_allocations.erase(iterator);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                _now.in_use -= size;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        };</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a301b84af701238b357de87434d0327a9"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">arm_compute::CLSymbols::clCreateBuffer_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clCreateBuffer)&gt; clCreateBuffer_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00103">OpenCL.h:103</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_a9385d6637f840d613d72f35a389d1c64"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">arm_compute::CLSymbols::clReleaseMemObject_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clReleaseMemObject)&gt; clReleaseMemObject_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00123">OpenCL.h:123</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_ab7b31e7922544d4a6325320f08ad2474"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">arm_compute::CLSymbols::clRetainMemObject_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clRetainMemObject)&gt; clRetainMemObject_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00122">OpenCL.h:122</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_abf58c6d99585520b40a396a890caa9ee"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">arm_compute::CLSymbols::clSVMAlloc_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSVMAlloc)&gt; clSVMAlloc_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00134">OpenCL.h:134</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_c_l_symbols_xhtml_adbd557acca5bc0f92a1a7f8ebc26e9ed"><div class="ttname"><a href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">arm_compute::CLSymbols::clSVMFree_ptr</a></div><div class="ttdeci">std::function&lt; decltype(clSVMFree)&gt; clSVMFree_ptr</div><div class="ttdef"><b>Definition:</b> <a href="_open_c_l_8h_source.xhtml#l00135">OpenCL.h:135</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adf0dd2db07cdbb966d6e385d3cd2605c"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adf0dd2db07cdbb966d6e385d3cd2605c">arm_compute::test::validation::context</a></div><div class="ttdeci">auto context</div><div class="ttdef"><b>Definition:</b> <a href="_direct_conv2d_8cpp_source.xhtml#l00167">DirectConv2d.cpp:167</a></div></div>
<div class="ttc" id="anamespacecheck__header__guards_xhtml_a7f345697df7eb20c9aba1ab6980cae8f"><div class="ttname"><a href="namespacecheck__header__guards.xhtml#a7f345697df7eb20c9aba1ab6980cae8f">check_header_guards.retval</a></div><div class="ttdeci">int retval</div><div class="ttdef"><b>Definition:</b> <a href="check__header__guards_8py_source.xhtml#l00188">check_header_guards.py:188</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00103">CLSymbols::clCreateBuffer_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00123">CLSymbols::clReleaseMemObject_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00122">CLSymbols::clRetainMemObject_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00134">CLSymbols::clSVMAlloc_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00135">CLSymbols::clSVMFree_ptr</a>, <a class="el" href="_direct_conv2d_8cpp_source.xhtml#l00167">arm_compute::test::validation::context</a>, <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>, and <a class="el" href="check__header__guards_8py_source.xhtml#l00188">check_header_guards::retval</a>.</p>

</div>
</div>
<a id="a84eed1102b2ad191e3659dd7c49705bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84eed1102b2ad191e3659dd7c49705bc">&#9670;&nbsp;</a></span>test_stop()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void test_stop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>End of the test. </p>
<p>Called after the test teardown ended </p>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1test_1_1framework_1_1_instrument.xhtml#a24b0f69632f7d082aad3e0fceaf4f5b1">Instrument</a>.</p>

<p class="definition">Definition at line <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml#l00166">166</a> of file <a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Restore real function</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a301b84af701238b357de87434d0327a9">clCreateBuffer_ptr</a>     = real_clCreateBuffer;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ab7b31e7922544d4a6325320f08ad2474">clRetainMemObject_ptr</a>  = real_clRetainMemObject;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#a9385d6637f840d613d72f35a389d1c64">clReleaseMemObject_ptr</a> = real_clReleaseMemObject;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#abf58c6d99585520b40a396a890caa9ee">clSVMAlloc_ptr</a>         = real_clSVMAlloc;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#ac3d2ed16df8334b183d76d8a82dbf70f">CLSymbols::get</a>().<a class="code" href="classarm__compute_1_1_c_l_symbols.xhtml#adbd557acca5bc0f92a1a7f8ebc26e9ed">clSVMFree_ptr</a>          = real_clSVMFree;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_open_c_l_8h_source.xhtml#l00103">CLSymbols::clCreateBuffer_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00123">CLSymbols::clReleaseMemObject_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00122">CLSymbols::clRetainMemObject_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00134">CLSymbols::clSVMAlloc_ptr</a>, <a class="el" href="_open_c_l_8h_source.xhtml#l00135">CLSymbols::clSVMFree_ptr</a>, and <a class="el" href="_open_c_l_8cpp_source.xhtml#l00043">CLSymbols::get()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>tests/framework/instruments/<a class="el" href="_open_c_l_memory_usage_8h_source.xhtml">OpenCLMemoryUsage.h</a></li>
<li>tests/framework/instruments/<a class="el" href="_open_c_l_memory_usage_8cpp_source.xhtml">OpenCLMemoryUsage.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test.xhtml">test</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1test_1_1framework.xhtml">framework</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1test_1_1framework_1_1_open_c_l_memory_usage.xhtml">OpenCLMemoryUsage</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:56 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
