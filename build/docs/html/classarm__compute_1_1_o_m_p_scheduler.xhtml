<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: OMPScheduler Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_o_m_p_scheduler.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">OMPScheduler Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Pool of threads to automatically split a kernel's execution among several threads.  
 <a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_o_m_p_scheduler_8h_source.xhtml">OMPScheduler.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for OMPScheduler:</div>
<div class="dyncontent">
<div class="center"><!-- SVG 0 -->
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a30209774dcf1f39afcc19818660a7c16"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a30209774dcf1f39afcc19818660a7c16">OMPScheduler</a> ()</td></tr>
<tr class="memdesc:a30209774dcf1f39afcc19818660a7c16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a30209774dcf1f39afcc19818660a7c16">More...</a><br /></td></tr>
<tr class="separator:a30209774dcf1f39afcc19818660a7c16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae64eebaa07f4d2da6cc2ba538c3cb095"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">set_num_threads</a> (unsigned int <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>) override</td></tr>
<tr class="memdesc:ae64eebaa07f4d2da6cc2ba538c3cb095"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of threads the scheduler will use to run the kernels.  <a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">More...</a><br /></td></tr>
<tr class="separator:ae64eebaa07f4d2da6cc2ba538c3cb095"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0da94220ee1e0f4928aa31ed0d4b30f7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> () const override</td></tr>
<tr class="memdesc:a0da94220ee1e0f4928aa31ed0d4b30f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of threads that the <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml" title="Pool of threads to automatically split a kernel&#39;s execution among several threads.">OMPScheduler</a> has in its pool.  <a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">More...</a><br /></td></tr>
<tr class="separator:a0da94220ee1e0f4928aa31ed0d4b30f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d6828523921b7f9313f64c48550617f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">schedule</a> (<a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints) override</td></tr>
<tr class="memdesc:a8d6828523921b7f9313f64c48550617f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multithread the execution of the passed kernel if possible.  <a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a8d6828523921b7f9313f64c48550617f">More...</a><br /></td></tr>
<tr class="separator:a8d6828523921b7f9313f64c48550617f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ef01a626365639d821cf090e6608109"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">schedule_op</a> (<a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *kernel, const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;hints, const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;tensors) override</td></tr>
<tr class="memdesc:a7ef01a626365639d821cf090e6608109"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multithread the execution of the passed kernel if possible.  <a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a7ef01a626365639d821cf090e6608109">More...</a><br /></td></tr>
<tr class="separator:a7ef01a626365639d821cf090e6608109"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_scheduler"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_scheduler')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a></td></tr>
<tr class="memitem:a34956db09db14c551e9966c9b66036f9 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">IScheduler</a> ()</td></tr>
<tr class="memdesc:a34956db09db14c551e9966c9b66036f9 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a34956db09db14c551e9966c9b66036f9">More...</a><br /></td></tr>
<tr class="separator:a34956db09db14c551e9966c9b66036f9 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d209385481644d97e7ca96072b73eb8 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a6d209385481644d97e7ca96072b73eb8">~IScheduler</a> ()=default</td></tr>
<tr class="memdesc:a6d209385481644d97e7ca96072b73eb8 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a6d209385481644d97e7ca96072b73eb8">More...</a><br /></td></tr>
<tr class="separator:a6d209385481644d97e7ca96072b73eb8 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64cafb079598059f1ee04f3076f1035e inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">set_num_threads_with_affinity</a> (unsigned int <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">num_threads</a>, <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> func)</td></tr>
<tr class="memdesc:a64cafb079598059f1ee04f3076f1035e inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of threads the scheduler will use to run the kernels but also using a binding function to pin the threads to given logical cores.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a64cafb079598059f1ee04f3076f1035e">More...</a><br /></td></tr>
<tr class="separator:a64cafb079598059f1ee04f3076f1035e inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3becf955da8cad5036399bcb90f1408d inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">run_tagged_workloads</a> (std::vector&lt; <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">Workload</a> &gt; &amp;workloads, const char *tag)</td></tr>
<tr class="memdesc:a3becf955da8cad5036399bcb90f1408d inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute all the passed workloads.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a3becf955da8cad5036399bcb90f1408d">More...</a><br /></td></tr>
<tr class="separator:a3becf955da8cad5036399bcb90f1408d inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0fd9e7b4f6240c55b4fe6a54d4418b5 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_p_u_info.xhtml">CPUInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a> ()</td></tr>
<tr class="memdesc:ab0fd9e7b4f6240c55b4fe6a54d4418b5 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get CPU info.  <a href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">More...</a><br /></td></tr>
<tr class="separator:ab0fd9e7b4f6240c55b4fe6a54d4418b5 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6de5358eb9a099cda48662b2fc523ec5 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">num_threads_hint</a> () const</td></tr>
<tr class="memdesc:a6de5358eb9a099cda48662b2fc523ec5 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a hint for the best possible number of execution threads.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a6de5358eb9a099cda48662b2fc523ec5">More...</a><br /></td></tr>
<tr class="separator:a6de5358eb9a099cda48662b2fc523ec5 inherit pub_methods_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classarm__compute_1_1_i_scheduler"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classarm__compute_1_1_i_scheduler')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a></td></tr>
<tr class="memitem:ad3ab921e075d1edd827faf95870aa808 inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">StrategyHint</a> { <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808afe6f99ef1ec99efbdc19a9786cf1facc">STATIC</a>
, <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">DYNAMIC</a>
 }</td></tr>
<tr class="memdesc:ad3ab921e075d1edd827faf95870aa808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Strategies available to split a workload.  <a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808">More...</a><br /></td></tr>
<tr class="separator:ad3ab921e075d1edd827faf95870aa808 inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47266bbd911ce9049fc1194e9fac9051 inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">BindFunc</a> = std::function&lt; int(int, int)&gt;</td></tr>
<tr class="memdesc:a47266bbd911ce9049fc1194e9fac9051 inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function to be used and map a given thread id to a logical core id.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a47266bbd911ce9049fc1194e9fac9051">More...</a><br /></td></tr>
<tr class="separator:a47266bbd911ce9049fc1194e9fac9051 inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cdc00a99619ba76bf79a466cb85d4da inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">Workload</a> = std::function&lt; void(const <a class="el" href="structarm__compute_1_1_thread_info.xhtml">ThreadInfo</a> &amp;)&gt;</td></tr>
<tr class="memdesc:a4cdc00a99619ba76bf79a466cb85d4da inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">Signature for the workloads to execute.  <a href="classarm__compute_1_1_i_scheduler.xhtml#a4cdc00a99619ba76bf79a466cb85d4da">More...</a><br /></td></tr>
<tr class="separator:a4cdc00a99619ba76bf79a466cb85d4da inherit pub_types_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_attribs_classarm__compute_1_1_i_scheduler"><td colspan="2" onclick="javascript:toggleInherit('pub_static_attribs_classarm__compute_1_1_i_scheduler')"><img src="closed.png" alt="-"/>&#160;Static Public Attributes inherited from <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml">IScheduler</a></td></tr>
<tr class="memitem:af5e26fa35c7355cf0d41e1e18c709a6e inherit pub_static_attribs_classarm__compute_1_1_i_scheduler"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">split_dimensions_all</a> = std::numeric_limits&lt;unsigned&gt;::max()</td></tr>
<tr class="memdesc:af5e26fa35c7355cf0d41e1e18c709a6e inherit pub_static_attribs_classarm__compute_1_1_i_scheduler"><td class="mdescLeft">&#160;</td><td class="mdescRight">When arm_compute::ISchedular::Hints::_split_dimension is initialized with this value then the schedular is free to break down the problem space over as many dimensions as it wishes.  <a href="classarm__compute_1_1_i_scheduler.xhtml#af5e26fa35c7355cf0d41e1e18c709a6e">More...</a><br /></td></tr>
<tr class="separator:af5e26fa35c7355cf0d41e1e18c709a6e inherit pub_static_attribs_classarm__compute_1_1_i_scheduler"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Pool of threads to automatically split a kernel's execution among several threads. </p>

<p class="definition">Definition at line <a class="el" href="_o_m_p_scheduler_8h_source.xhtml#l00032">32</a> of file <a class="el" href="_o_m_p_scheduler_8h_source.xhtml">OMPScheduler.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a30209774dcf1f39afcc19818660a7c16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30209774dcf1f39afcc19818660a7c16">&#9670;&nbsp;</a></span>OMPScheduler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml">OMPScheduler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml">OMPScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    : _num_threads(omp_get_max_threads())</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0da94220ee1e0f4928aa31ed0d4b30f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0da94220ee1e0f4928aa31ed0d4b30f7">&#9670;&nbsp;</a></span>num_threads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int num_threads </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of threads that the <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml" title="Pool of threads to automatically split a kernel&#39;s execution among several threads.">OMPScheduler</a> has in its pool. </p>
<dl class="section return"><dt>Returns</dt><dd>Number of threads available in <a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml" title="Pool of threads to automatically split a kernel&#39;s execution among several threads.">OMPScheduler</a>. </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ac24584a63e484123e3756d1b2a1c9e2f">IScheduler</a>.</p>

<p class="definition">Definition at line <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml">OMPScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> _num_threads;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00057">OMPScheduler::schedule_op()</a>, and <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00045">OMPScheduler::set_num_threads()</a>.</p>

</div>
</div>
<a id="a8d6828523921b7f9313f64c48550617f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d6828523921b7f9313f64c48550617f">&#9670;&nbsp;</a></span>schedule()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void schedule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;&#160;</td>
          <td class="paramname"><em>hints</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multithread the execution of the passed kernel if possible. </p>
<p>The kernel will run on a single thread if any of these conditions is true:</p><ul>
<li><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b" title="Indicates whether or not the kernel is parallelisable.">ICPPKernel::is_parallelisable()</a> returns false</li>
<li>The scheduler has been initialized with only one thread.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hints</td><td>Hints for the scheduler. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a4e58f95544bd5ac6559a421671bd9842">IScheduler</a>.</p>

<p class="definition">Definition at line <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml">OMPScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    ITensorPack tensors;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    schedule_common(kernel, hints, kernel-&gt;window(), tensors);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_kernel_8cpp_source.xhtml#l00028">IKernel::window()</a>.</p>

</div>
</div>
<a id="a7ef01a626365639d821cf090e6608109"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ef01a626365639d821cf090e6608109">&#9670;&nbsp;</a></span>schedule_op()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void schedule_op </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml">ICPPKernel</a> *&#160;</td>
          <td class="paramname"><em>kernel</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_scheduler_1_1_hints.xhtml">Hints</a> &amp;&#160;</td>
          <td class="paramname"><em>hints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_pack.xhtml">ITensorPack</a> &amp;&#160;</td>
          <td class="paramname"><em>tensors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multithread the execution of the passed kernel if possible. </p>
<p>The kernel will run on a single thread if any of these conditions is true:</p><ul>
<li><a class="el" href="classarm__compute_1_1_i_kernel.xhtml#a0466ee6ce6552c87595f0e88e73eeb1b" title="Indicates whether or not the kernel is parallelisable.">ICPPKernel::is_parallelisable()</a> returns false</li>
<li>The scheduler has been initialized with only one thread.</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel</td><td><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class.">Kernel</a> to execute. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">hints</td><td>Hints for the scheduler. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> to use for kernel execution. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">tensors</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information.">Vector</a> containing the tensors to operate on. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a15103352886ec83d9c250a7f5d5c630f">IScheduler</a>.</p>

<p class="definition">Definition at line <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml">OMPScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(!kernel, <span class="stringliteral">&quot;The child class didn&#39;t set the kernel&quot;</span>);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a>(hints.strategy() == <a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">StrategyHint::DYNAMIC</a>,</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                             <span class="stringliteral">&quot;Dynamic scheduling is not supported in OMPScheduler&quot;</span>);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> Window      &amp;max_window     = window;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_iterations = max_window.num_iterations(hints.split_dimension());</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>    = std::min(num_iterations, _num_threads);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span> (!kernel-&gt;is_parallelisable() || <a class="code" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> == 1)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        ThreadInfo <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.cpu_info = &amp;<a class="code" href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">cpu_info</a>();</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        kernel-&gt;run_op(tensors, max_window, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                num_windows = <a class="code" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        std::vector&lt;IScheduler::Workload&gt; workloads(num_windows);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> = 0; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a> &lt; num_windows; <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>++)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="comment">//Capture &#39;t&#39; by copy, all the other variables by reference:</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            workloads[<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>] = [<a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>, &amp;hints, &amp;max_window, &amp;num_windows, &amp;kernel, &amp;tensors](<span class="keyword">const</span> ThreadInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                Window win = max_window.split_window(hints.split_dimension(), <a class="code" href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">t</a>, num_windows);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                win.validate();</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                kernel-&gt;run_op(tensors, win, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            };</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        run_workloads(workloads);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div>
<div class="ttc" id="a_error_8h_xhtml_a0b0eb3235749a2909dc5a101afe59a1b"><div class="ttname"><a href="_error_8h.xhtml#a0b0eb3235749a2909dc5a101afe59a1b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond, msg)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00456">Error.h:456</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ab0fd9e7b4f6240c55b4fe6a54d4418b5"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ab0fd9e7b4f6240c55b4fe6a54d4418b5">arm_compute::IScheduler::cpu_info</a></div><div class="ttdeci">CPUInfo &amp; cpu_info()</div><div class="ttdoc">Get CPU info.</div><div class="ttdef"><b>Definition:</b> <a href="_i_scheduler_8cpp_source.xhtml#l00042">IScheduler.cpp:42</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_scheduler_xhtml_ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9"><div class="ttname"><a href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">arm_compute::IScheduler::StrategyHint::DYNAMIC</a></div><div class="ttdeci">@ DYNAMIC</div><div class="ttdoc">Split the workload dynamically using a bucket system.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_o_m_p_scheduler_xhtml_a0da94220ee1e0f4928aa31ed0d4b30f7"><div class="ttname"><a href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">arm_compute::OMPScheduler::num_threads</a></div><div class="ttdeci">unsigned int num_threads() const override</div><div class="ttdoc">Returns the number of threads that the OMPScheduler has in its pool.</div><div class="ttdef"><b>Definition:</b> <a href="_o_m_p_scheduler_8cpp_source.xhtml#l00040">OMPScheduler.cpp:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacetf__frozen__model__extractor_xhtml_aaccc9105df5383111407fd5b41255e23"><div class="ttname"><a href="namespacetf__frozen__model__extractor.xhtml#aaccc9105df5383111407fd5b41255e23">tf_frozen_model_extractor.t</a></div><div class="ttdeci">t</div><div class="ttdef"><b>Definition:</b> <a href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor.py:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00456">ARM_COMPUTE_ERROR_ON_MSG</a>, <a class="el" href="_i_scheduler_8cpp_source.xhtml#l00042">IScheduler::cpu_info()</a>, <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#ad3ab921e075d1edd827faf95870aa808a0fcc90da4811c877ba9f9c12f7d60bc9">IScheduler::DYNAMIC</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_i_kernel_8cpp_source.xhtml#l00040">IKernel::is_parallelisable()</a>, <a class="el" href="_window_8inl_source.xhtml#l00196">Window::num_iterations()</a>, <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00040">OMPScheduler::num_threads()</a>, <a class="el" href="_i_c_p_p_kernel_8h_source.xhtml#l00088">ICPPKernel::run_op()</a>, <a class="el" href="_i_scheduler_8h_source.xhtml#l00096">IScheduler::Hints::split_dimension()</a>, <a class="el" href="_window_8inl_source.xhtml#l00203">Window::split_window()</a>, <a class="el" href="_i_scheduler_8h_source.xhtml#l00116">IScheduler::Hints::strategy()</a>, <a class="el" href="tf__frozen__model__extractor_8py_source.xhtml#l00049">tf_frozen_model_extractor::t</a>, and <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>.</p>

</div>
</div>
<a id="ae64eebaa07f4d2da6cc2ba538c3cb095"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae64eebaa07f4d2da6cc2ba538c3cb095">&#9670;&nbsp;</a></span>set_num_threads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_num_threads </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_threads</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the number of threads the scheduler will use to run the kernels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">num_threads</td><td>If set to 0, then the number returned by omp_get_max_threads() will be used, otherwise the number of threads specified. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_scheduler.xhtml#a645ac2d9d4144fd0174296de7eb1e1b5">IScheduler</a>.</p>

<p class="definition">Definition at line <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml">OMPScheduler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_cores = omp_get_max_threads();</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    _num_threads                 = (<a class="code" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a> == 0) ? num_cores : <a class="code" href="classarm__compute_1_1_o_m_p_scheduler.xhtml#a0da94220ee1e0f4928aa31ed0d4b30f7">num_threads</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml#l00040">OMPScheduler::num_threads()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/OMP/<a class="el" href="_o_m_p_scheduler_8h_source.xhtml">OMPScheduler.h</a></li>
<li>src/runtime/OMP/<a class="el" href="_o_m_p_scheduler_8cpp_source.xhtml">OMPScheduler.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_o_m_p_scheduler.xhtml">OMPScheduler</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:53 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
