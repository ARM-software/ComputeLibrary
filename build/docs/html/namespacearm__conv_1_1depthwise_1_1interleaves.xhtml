<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: arm_conv::depthwise::interleaves Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespacearm__conv_1_1depthwise_1_1interleaves.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">arm_conv::depthwise::interleaves Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespacearm__conv_1_1depthwise_1_1interleaves_1_1quantized"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1interleaves_1_1quantized.xhtml">quantized</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">PackingArguments</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:af85eedd0781815c14baa970aeecb8c88"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#af85eedd0781815c14baa970aeecb8c88">get_storage_size_generic</a> (const <a class="el" href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">PackingArguments</a> &amp;packing_args, const DepthwiseArgs &amp;args)</td></tr>
<tr class="separator:af85eedd0781815c14baa970aeecb8c88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b433ad9e7b77bf0702700e2006e4210"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#a3b433ad9e7b77bf0702700e2006e4210">pack_parameters_generic</a> (const <a class="el" href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">PackingArguments</a> &amp;packing_args, const DepthwiseArgs &amp;args, void *buffer_raw, const void *biases_raw, const void *weights_raw, size_t ld_weight_col, size_t ld_weight_row)</td></tr>
<tr class="separator:a3b433ad9e7b77bf0702700e2006e4210"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="af85eedd0781815c14baa970aeecb8c88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af85eedd0781815c14baa970aeecb8c88">&#9670;&nbsp;</a></span>get_storage_size_generic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t get_storage_size_generic </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">PackingArguments</a> &amp;&#160;</td>
          <td class="paramname"><em>packing_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml">generic.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="comment">// If the channel multiplier is greater than one, then we treat this as a</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="comment">// repeated packing of `channel_multiplier`-sized problems.</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier &gt; 1 &amp;&amp; !packing_args.premultiply)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    DepthwiseArgs args_per_input_channel(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    args_per_input_channel.input_channels = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    args_per_input_channel.channel_multiplier = 1;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_channels * <a class="code" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#af85eedd0781815c14baa970aeecb8c88">get_storage_size_generic</a>(packing_args, args_per_input_channel);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vl =</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    packing_args.accumulator_depth_vl *</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    arm_gemm::utils::get_vector_length&lt;uint8_t&gt;(packing_args.vl_type) / packing_args.accumulator_element_size;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_packs = <a class="code" href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a>(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_channels * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier, vl);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keyword">const</span> <span class="keyword">auto</span> pack_size = (packing_args.include_bias ? packing_args.bias_element_size : 0) +</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                         packing_args.kernel_points() * packing_args.weight_element_size;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordflow">return</span> n_packs * pack_size * vl;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
<div class="ttc" id="anamespace_gemm_tuner_xhtml_a8187411843a6284ffb964ef3fb9fcab3"><div class="ttname"><a href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">GemmTuner.args</a></div><div class="ttdeci">args</div><div class="ttdef"><b>Definition:</b> <a href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner.py:679</a></div></div>
<div class="ttc" id="anamespacearm__conv_1_1depthwise_1_1interleaves_xhtml_af85eedd0781815c14baa970aeecb8c88"><div class="ttname"><a href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#af85eedd0781815c14baa970aeecb8c88">arm_conv::depthwise::interleaves::get_storage_size_generic</a></div><div class="ttdeci">size_t get_storage_size_generic(const PackingArguments &amp;packing_args, const DepthwiseArgs &amp;args)</div><div class="ttdef"><b>Definition:</b> <a href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00045">generic.cpp:45</a></div></div>
<div class="ttc" id="anamespacearm__gemm_xhtml_aed0e2852860309af99fad49a8c3ef315"><div class="ttname"><a href="namespacearm__gemm.xhtml#aed0e2852860309af99fad49a8c3ef315">arm_gemm::iceildiv</a></div><div class="ttdeci">T iceildiv(const T a, const T b)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00065">utils.hpp:65</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="generic_8hpp_source.xhtml#l00046">PackingArguments::accumulator_depth_vl</a>, <a class="el" href="generic_8hpp_source.xhtml#l00045">PackingArguments::accumulator_element_size</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, <a class="el" href="generic_8hpp_source.xhtml#l00042">PackingArguments::bias_element_size</a>, <a class="el" href="utils_8hpp_source.xhtml#l00065">arm_gemm::iceildiv()</a>, <a class="el" href="generic_8hpp_source.xhtml#l00041">PackingArguments::include_bias</a>, <a class="el" href="generic_8hpp_source.xhtml#l00049">PackingArguments::kernel_points()</a>, <a class="el" href="generic_8hpp_source.xhtml#l00043">PackingArguments::premultiply</a>, <a class="el" href="generic_8hpp_source.xhtml#l00044">PackingArguments::vl_type</a>, and <a class="el" href="generic_8hpp_source.xhtml#l00040">PackingArguments::weight_element_size</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__strategies__common_8hpp_source.xhtml#l00066">DepthfirstStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::get_storage_size()</a>, <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00139">DepthwiseDepthfirstStrategy&lt; TInput, TWeight, TOutput, int32_t &gt;::get_storage_size()</a>, <a class="el" href="depthwise__depthfirst__generic_8hpp_source.xhtml#l00098">GenericDepthfirstStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::get_storage_size()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00068">DepthfirstMultiplierStrategy&lt; TInput, TWeight, TOutput, TAccum &gt;::get_storage_size()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00233">GenericDepthfirstMultiplierStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::get_storage_size()</a>, <a class="el" href="depthwise__planar_8hpp_source.xhtml#l00178">PlanarStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::get_storage_size()</a>, and <a class="el" href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00067">pack_parameters_generic()</a>.</p>

</div>
</div>
<a id="a3b433ad9e7b77bf0702700e2006e4210"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b433ad9e7b77bf0702700e2006e4210">&#9670;&nbsp;</a></span>pack_parameters_generic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void pack_parameters_generic </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structarm__conv_1_1depthwise_1_1interleaves_1_1_packing_arguments.xhtml">PackingArguments</a> &amp;&#160;</td>
          <td class="paramname"><em>packing_args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const DepthwiseArgs &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>buffer_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>biases_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>weights_raw</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_weight_col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>ld_weight_row</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00067">67</a> of file <a class="el" href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml">generic.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="comment">// Cast the pointers to byte sizes</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keyword">auto</span> *buffer = <span class="keyword">static_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(buffer_raw);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">auto</span> *biases = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(biases_raw);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">auto</span> *weights = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>uint8_t *<span class="keyword">&gt;</span>(weights_raw);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="comment">// If the channel multiplier is greater than one, then we treat this as a</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="comment">// repeated packing of `channel_multiplier`-sized problems.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier &gt; 1 &amp;&amp; !packing_args.premultiply)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// Get a modified copy of the depthwise arguments</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    DepthwiseArgs args_per_input_channel(<a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    args_per_input_channel.input_channels = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    args_per_input_channel.channel_multiplier = 1;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// Resolve the strides here</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    ld_weight_col = ld_weight_col ? ld_weight_col : <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_channels * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    ld_weight_row = ld_weight_row ? ld_weight_row : ld_weight_col * packing_args.kernel_cols;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">auto</span> per_input_channel_size = <a class="code" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#af85eedd0781815c14baa970aeecb8c88">get_storage_size_generic</a>(packing_args, args_per_input_channel);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_channels; c++)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      <a class="code" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#a3b433ad9e7b77bf0702700e2006e4210">pack_parameters_generic</a>(</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        packing_args, args_per_input_channel, buffer, biases, weights, ld_weight_col, ld_weight_row);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="comment">// Update the pointers</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;      buffer += per_input_channel_size;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      biases += (biases == <span class="keyword">nullptr</span>) ? 0 : packing_args.bias_element_size * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      weights += packing_args.weight_element_size * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keyword">auto</span> input_channels = <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.input_channels * <a class="code" href="namespace_gemm_tuner.xhtml#a8187411843a6284ffb964ef3fb9fcab3">args</a>.channel_multiplier;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="comment">// Finalise the weight strides</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  ld_weight_col = (ld_weight_col == 0) ? input_channels : ld_weight_col;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  ld_weight_row = (ld_weight_row == 0) ? packing_args.kernel_cols * ld_weight_col : ld_weight_row;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vl =</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    packing_args.accumulator_depth_vl *</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    arm_gemm::utils::get_vector_length&lt;uint8_t&gt;(packing_args.vl_type) / packing_args.accumulator_element_size;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; input_channels; n += vl)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> todo = std::min(vl, input_channels - n);</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">if</span> (packing_args.include_bias)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      <span class="keywordflow">if</span> (biases != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        memcpy(buffer, biases, todo * packing_args.bias_element_size);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        biases += todo * packing_args.bias_element_size;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      }</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        memset(buffer, 0, vl * packing_args.bias_element_size);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      buffer += vl * packing_args.bias_element_size;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// Copy each of the weights in turn</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kx, ky;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> kindex = 0; packing_args.get_weight_pos(kindex, kx, ky); kindex++)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="keyword">const</span> <span class="keyword">auto</span> src_ptr = weights + (kx*ld_weight_row + ky*ld_weight_col + n) * packing_args.weight_element_size;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      memcpy(buffer, src_ptr, todo * packing_args.weight_element_size);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      buffer += vl * packing_args.weight_element_size;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="ttc" id="anamespacearm__conv_1_1depthwise_1_1interleaves_xhtml_a3b433ad9e7b77bf0702700e2006e4210"><div class="ttname"><a href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml#a3b433ad9e7b77bf0702700e2006e4210">arm_conv::depthwise::interleaves::pack_parameters_generic</a></div><div class="ttdeci">void pack_parameters_generic(const PackingArguments &amp;packing_args, const DepthwiseArgs &amp;args, void *buffer_raw, const void *biases_raw, const void *weights_raw, size_t ld_weight_col, size_t ld_weight_row)</div><div class="ttdef"><b>Definition:</b> <a href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00067">generic.cpp:67</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="generic_8hpp_source.xhtml#l00046">PackingArguments::accumulator_depth_vl</a>, <a class="el" href="generic_8hpp_source.xhtml#l00045">PackingArguments::accumulator_element_size</a>, <a class="el" href="_gemm_tuner_8py_source.xhtml#l00679">GemmTuner::args</a>, <a class="el" href="generic_8hpp_source.xhtml#l00042">PackingArguments::bias_element_size</a>, <a class="el" href="arm__conv_2depthwise_2interleaves_2generic_8cpp_source.xhtml#l00045">get_storage_size_generic()</a>, <a class="el" href="generic_8hpp_source.xhtml#l00047">PackingArguments::get_weight_pos</a>, <a class="el" href="generic_8hpp_source.xhtml#l00041">PackingArguments::include_bias</a>, <a class="el" href="generic_8hpp_source.xhtml#l00039">PackingArguments::kernel_cols</a>, <a class="el" href="generic_8hpp_source.xhtml#l00043">PackingArguments::premultiply</a>, <a class="el" href="generic_8hpp_source.xhtml#l00044">PackingArguments::vl_type</a>, and <a class="el" href="generic_8hpp_source.xhtml#l00040">PackingArguments::weight_element_size</a>.</p>

<p class="reference">Referenced by <a class="el" href="depthwise__depthfirst_8hpp_source.xhtml#l00144">DepthwiseDepthfirstStrategy&lt; TInput, TWeight, TOutput, int32_t &gt;::pack_parameters()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00073">DepthfirstMultiplierStrategy&lt; TInput, TWeight, TOutput, TAccum &gt;::pack_parameters()</a>, <a class="el" href="depthwise__strategies__common_8hpp_source.xhtml#l00078">DepthfirstStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::pack_parameters()</a>, <a class="el" href="depthwise__depthfirst__generic_8hpp_source.xhtml#l00110">GenericDepthfirstStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::pack_parameters()</a>, <a class="el" href="depthwise__depthfirst__multiplier_8hpp_source.xhtml#l00238">GenericDepthfirstMultiplierStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::pack_parameters()</a>, and <a class="el" href="depthwise__planar_8hpp_source.xhtml#l00183">PlanarStrategy&lt; TInput, TWeight, TOutput, TAccum, OutputStage &gt;::pack_parameters()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__conv.xhtml">arm_conv</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1depthwise.xhtml">depthwise</a></li><li class="navelem"><a class="el" href="namespacearm__conv_1_1depthwise_1_1interleaves.xhtml">interleaves</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:58 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
