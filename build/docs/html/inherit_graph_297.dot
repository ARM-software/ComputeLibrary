digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="IFunction",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_i_function.xhtml",tooltip="Base class for all functions."];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="CPPSplit\< NESlice \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_split.xhtml",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="NESplit",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_split.xhtml",tooltip="Basic function to split a tensor along a given axis."];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="CPPSplit\< CLSlice,\l ICLTensor \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_split.xhtml",tooltip=" "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="CLSplit",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_split.xhtml",tooltip="Basic function to split a tensor along a given axis."];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="CLAbsLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_abs_layer.xhtml",tooltip="Basic function to get the absolute value of an input tensor."];
  Node0 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="CLActivationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_activation_layer.xhtml",tooltip="Basic function to run opencl::kernels::ClActivationKernel."];
  Node0 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="CLArgMinMaxLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_arg_min_max_layer.xhtml",tooltip="Function to calculate the index of the minimum or maximum values in a tensor based on an axis."];
  Node0 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="CLArithmeticAddition",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_arithmetic_addition.xhtml",tooltip="Basic function to run opencl::kernels::ClSaturatedArithmeticKernel for addition."];
  Node0 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="CLArithmeticDivision",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_arithmetic_division.xhtml",tooltip="Basic function to run opencl::kernels::ClSaturatedArithmeticKernel for division."];
  Node0 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="CLArithmeticSubtraction",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml",tooltip="Basic function to run opencl::kernels::ClSaturatedArithmeticKernel for subtraction."];
  Node0 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="CLBatchNormalizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_batch_normalization_layer.xhtml",tooltip="Basic function to run CLNormalizationLayerKernel and simulate a batch normalization layer."];
  Node0 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="CLBatchToSpaceLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_batch_to_space_layer.xhtml",tooltip="Basic function to run CLBatchToSpaceLayerKernel."];
  Node0 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="CLCast",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_cast.xhtml",tooltip="Basic function to run opencl::kernels::ClCastKernel."];
  Node0 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="CLComplexPixelWiseMultiplication",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_complex_pixel_wise_multiplication.xhtml",tooltip="Basic function to run opencl::ClComplexMul."];
  Node0 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="CLConcatenateLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_concatenate_layer.xhtml",tooltip="Basic function to execute concatenate tensors along a given axis."];
  Node0 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="CLConv3D",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_conv3_d.xhtml",tooltip="Basic function to compute the convolution3d layer."];
  Node0 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="CLConvertFullyConnectedWeights",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_convert_fully_connected_weights.xhtml",tooltip="Basic function to run an opencl::kernels::ClConvertFullyConnectedWeightsKernel."];
  Node0 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="CLConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_convolution_layer.xhtml",tooltip="Basic function to compute the convolution layer."];
  Node0 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="CLCopy",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_copy.xhtml",tooltip="Basic function to run opencl::kernels::ClCopyKernel."];
  Node0 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="CLCrop",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_crop.xhtml",tooltip="Basic function to run opencl::kernels::ClCropKernel."];
  Node0 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="CLCropResize",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_crop_resize.xhtml",tooltip="Function to perform cropping and resizing."];
  Node0 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="CLDeconvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_deconvolution_layer.xhtml",tooltip="Basic function to compute the deconvolution layer."];
  Node0 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="CLDeconvolutionLayerUpsample",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_deconvolution_layer_upsample.xhtml",tooltip="Basic function to execute deconvolution upsample on OpenCL."];
  Node0 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="CLDepthConvertLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_depth_convert_layer.xhtml",tooltip="Basic function to run opencl::kernels::ClCastKernel."];
  Node0 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="CLDepthwiseConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_depthwise_convolution_layer.xhtml",tooltip="Function to execute a depthwise convolution."];
  Node0 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="CLDequantizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_dequantization_layer.xhtml",tooltip="Basic function to run opencl::ClDequantize that dequantizes an input tensor."];
  Node0 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="CLDirectConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_direct_convolution_layer.xhtml",tooltip="Basic function to execute direct convolution function:"];
  Node0 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="CLDirectDeconvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_direct_deconvolution_layer.xhtml",tooltip="Function to run the deconvolution layer."];
  Node0 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="CLElementwiseMax",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_elementwise_max.xhtml",tooltip="Basic function to run opencl::kernels::ClArithmeticKernel for max."];
  Node0 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="CLElementwiseMin",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_elementwise_min.xhtml",tooltip="Basic function to run opencl::kernels::ClArithmeticKernel for min."];
  Node0 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="CLElementwisePower",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_elementwise_power.xhtml",tooltip="Basic function to run opencl::kernels::ClArithmeticKernel for power."];
  Node0 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="CLElementwiseSquaredDiff",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_elementwise_squared_diff.xhtml",tooltip="Basic function to run opencl::kernels::ClArithmeticKernel for squared difference."];
  Node0 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="CLExpLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_exp_layer.xhtml",tooltip="Basic function to perform exponential on an input tensor."];
  Node0 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="CLFFT1D",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_f_f_t1_d.xhtml",tooltip="Basic function to execute one dimensional FFT."];
  Node0 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="CLFFT2D",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_f_f_t2_d.xhtml",tooltip="Basic function to execute two dimensional FFT."];
  Node0 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="CLFFTConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_f_f_t_convolution_layer.xhtml",tooltip="Basic function to execute FFT-based convolution on OpenCL."];
  Node0 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="CLFill",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_fill.xhtml",tooltip="Basic function to run opencl::kernels::ClFillKernel."];
  Node0 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="CLFlattenLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_flatten_layer.xhtml",tooltip="Basic function to execute flatten."];
  Node0 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="CLFloor",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_floor.xhtml",tooltip="Basic function to run opencl::kernels::ClFloorKernel."];
  Node0 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="CLFullyConnectedLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_fully_connected_layer.xhtml",tooltip="Basic function to compute a Fully Connected layer on OpenCL."];
  Node0 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="CLFuseBatchNormalization",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_fuse_batch_normalization.xhtml",tooltip="Basic function to fuse the batch normalization node to a preceding convolution node."];
  Node0 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="CLGEMM",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_g_e_m_m.xhtml",tooltip="Basic function to execute GEMM on OpenCL."];
  Node0 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="CLGEMMConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_g_e_m_m_convolution_layer.xhtml",tooltip="Basic function to compute the convolution layer."];
  Node0 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="CLGEMMDeconvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_g_e_m_m_deconvolution_layer.xhtml",tooltip="Function to run the deconvolution layer through a call to GEMM."];
  Node0 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="CLGEMMLowpMatrixMultiplyCore",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_core.xhtml",tooltip="Basic function to execute GEMMLowpMatrixMultiplyCore on OpenCL."];
  Node0 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="CLGEMMLowpOutputStage",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_g_e_m_m_lowp_output_stage.xhtml",tooltip="Basic function to execute GEMMLowpQuantizeDown kernels on CL."];
  Node0 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="CLGenerateProposalsLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_generate_proposals_layer.xhtml",tooltip="Basic function to generate proposals for a RPN (Region Proposal Network)"];
  Node0 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="CLIndirectConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_indirect_convolution_layer.xhtml",tooltip="Basic function to run the indirect convolution function."];
  Node0 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="CLInstanceNormalizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_instance_normalization_layer.xhtml",tooltip="Basic function to perform a Instance normalization."];
  Node0 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="CLL2NormalizeLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_l2_normalize_layer.xhtml",tooltip="Basic function to perform a L2 normalization on a given axis."];
  Node0 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="CLLSTMLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_l_s_t_m_layer.xhtml",tooltip="This function performs a single time step in a Long Short-Term Memory (LSTM) layer."];
  Node0 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="CLLSTMLayerQuantized",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_l_s_t_m_layer_quantized.xhtml",tooltip="Basic function to run CLLSTMLayerQuantized."];
  Node0 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="CLLogLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_log_layer.xhtml",tooltip="Basic function to perform elementwise log on an input tensor."];
  Node0 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="CLLogicalAnd",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_logical_and.xhtml",tooltip="Basic function to run arm_compute::opencl::kernels::ClLogicalBinaryKernel."];
  Node0 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="CLLogicalNot",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_logical_not.xhtml",tooltip="Basic function to do logical NOT operation."];
  Node0 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="CLLogicalOr",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_logical_or.xhtml",tooltip="Basic function to run arm_compute::opencl::kernels::ClLogicalBinaryKernel."];
  Node0 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="CLMatMul",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_mat_mul.xhtml",tooltip="Basic function to execute MatMul (Matrix Multiplication) on OpenCL."];
  Node0 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="CLMaxUnpoolingLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_max_unpooling_layer.xhtml",tooltip="Function to perform MaxUnpooling."];
  Node0 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node59 [label="CLNegLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_neg_layer.xhtml",tooltip="Basic function to negate an input tensor."];
  Node0 -> Node60 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node60 [label="CLNormalizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_normalization_layer.xhtml",tooltip="Basic function to compute a normalization layer."];
  Node0 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node61 [label="CLPReluLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_p_relu_layer.xhtml",tooltip="Basic function to run opencl::kernels::ClArithmeticKernel for PRELU."];
  Node0 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node62 [label="CLPadLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_pad_layer.xhtml",tooltip="Basic function to pad a tensor."];
  Node0 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="CLPermute",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_permute.xhtml",tooltip="Basic function to execute an opencl::kernels::ClPermuteKernel."];
  Node0 -> Node64 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node64 [label="CLPixelWiseMultiplication",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml",tooltip="Basic function to run opencl::ClMul."];
  Node0 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node65 [label="CLPooling3dLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_pooling3d_layer.xhtml",tooltip="Basic function to run opencl::ClPool3d."];
  Node0 -> Node66 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node66 [label="CLPoolingLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_pooling_layer.xhtml",tooltip="Basic function to run opencl::ClPool2d."];
  Node0 -> Node67 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node67 [label="CLQLSTMLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_q_l_s_t_m_layer.xhtml",tooltip="Basic function to run CLQLSTMLayer."];
  Node0 -> Node68 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node68 [label="CLQuantizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_quantization_layer.xhtml",tooltip="Basic function to simulate a quantization layer."];
  Node0 -> Node69 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node69 [label="CLRNNLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_r_n_n_layer.xhtml",tooltip="Basic function to run CLRNNLayer."];
  Node0 -> Node70 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node70 [label="CLReduceMean",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_reduce_mean.xhtml",tooltip="Basic function to perform reduce operation."];
  Node0 -> Node71 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node71 [label="CLReductionOperation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_reduction_operation.xhtml",tooltip="Perform reduction operation."];
  Node0 -> Node72 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node72 [label="CLReshapeLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_reshape_layer.xhtml",tooltip="Basic function to run opencl::kernels::ClReshapeKernel."];
  Node0 -> Node73 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node73 [label="CLRoundLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_round_layer.xhtml",tooltip="Basic function to get the round (to the nearest even) value of an input tensor."];
  Node0 -> Node74 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node74 [label="CLRsqrtLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_rsqrt_layer.xhtml",tooltip="Basic function to perform inverse square root on an input tensor."];
  Node0 -> Node75 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node75 [label="CLScale",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_scale.xhtml",tooltip="Basic function to run opencl::ClScale."];
  Node0 -> Node76 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node76 [label="CLSinLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_sin_layer.xhtml",tooltip="Basic function to calculate sine of an input tensor."];
  Node0 -> Node77 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node77 [label="CLSlice",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_slice.xhtml",tooltip="Basic function to perform tensor slicing."];
  Node0 -> Node78 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node78 [label="CLSoftmaxLayerGeneric\l\< IS_LOG \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_softmax_layer_generic.xhtml",tooltip="Basic function to compute a SoftmaxLayer."];
  Node0 -> Node79 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node79 [label="CLSpaceToBatchLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_space_to_batch_layer.xhtml",tooltip="Basic function to spatial divide a tensor."];
  Node0 -> Node80 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node80 [label="CLSpaceToDepthLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_space_to_depth_layer.xhtml",tooltip="Basic function to run CLSpaceToDepthLayerKernel."];
  Node0 -> Node81 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node81 [label="CLStackLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_stack_layer.xhtml",tooltip="Basic function to stack tensors along an axis."];
  Node0 -> Node82 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node82 [label="CLStridedSlice",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_strided_slice.xhtml",tooltip="Basic function to run CLStridedSliceKernel."];
  Node0 -> Node83 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node83 [label="CLTranspose",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_transpose.xhtml",tooltip="Basic function to execute an opencl::kernels::ClTransposeKernel."];
  Node0 -> Node84 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node84 [label="CLUnstack",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_unstack.xhtml",tooltip="Basic function to unpack a rank-R tensor into rank-(R-1) tensors."];
  Node0 -> Node85 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node85 [label="CLWinogradConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_winograd_convolution_layer.xhtml",tooltip="Basic function to execute Winograd-based convolution on OpenCL."];
  Node0 -> Node86 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node86 [label="CPPBoxWithNonMaximaSuppression\lLimit",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_box_with_non_maxima_suppression_limit.xhtml",tooltip="Basic function to run CPPBoxWithNonMaximaSuppressionLimitKernel."];
  Node0 -> Node87 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node87 [label="CPPDetectionOutputLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_detection_output_layer.xhtml",tooltip="CPP Function to generate the detection output based on location and confidence predictions by doing n..."];
  Node0 -> Node88 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node88 [label="CPPDetectionPostProcessLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml",tooltip="CPP Function to generate the detection output based on center size encoded boxes, class prediction an..."];
  Node0 -> Node89 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node89 [label="CPPSplit\< SliceType,\l TensorInterfaceType \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_split.xhtml",tooltip="Basic function to split a tensor along a given axis."];
  Node0 -> Node90 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node90 [label="ICLSimpleFunction",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_i_c_l_simple_function.xhtml",tooltip="Basic interface for functions which have a single OpenCL kernel."];
  Node90 -> Node91 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node91 [label="CLBitwiseAnd",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_bitwise_and.xhtml",tooltip="Basic function to perform bitwise AND by running CLBitwiseKernel."];
  Node90 -> Node92 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node92 [label="CLBitwiseNot",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_bitwise_not.xhtml",tooltip="Basic function to perform bitwise NOT by running CLBitwiseKernel."];
  Node90 -> Node93 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node93 [label="CLBitwiseOr",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_bitwise_or.xhtml",tooltip="Basic function to perform bitwise OR by running CLBitwiseKernel."];
  Node90 -> Node94 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node94 [label="CLBitwiseXor",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_bitwise_xor.xhtml",tooltip="Basic function to perform bitwise XOR by running CLBitwiseKernel."];
  Node90 -> Node95 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node95 [label="CLBoundingBoxTransform",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_bounding_box_transform.xhtml",tooltip="Basic function to run CLBoundingBoxTransformKernel."];
  Node90 -> Node96 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node96 [label="CLChannelShuffleLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_channel_shuffle_layer.xhtml",tooltip="Basic function to run CLChannelShuffleLayerKernel."];
  Node90 -> Node97 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node97 [label="CLComparison",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_comparison.xhtml",tooltip="Basic function to run CLComparisonKernel."];
  Node90 -> Node98 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node98 [label="CLComparisonStatic\l\< COP \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_comparison_static.xhtml",tooltip="Basic function to run CLComparisonKernel."];
  Node90 -> Node99 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node99 [label="CLDepthToSpaceLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_depth_to_space_layer.xhtml",tooltip="Basic function to run CLDepthToSpaceLayerKernel."];
  Node90 -> Node100 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node100 [label="CLGather",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_gather.xhtml",tooltip="Basic function to run CLGatherKernel."];
  Node90 -> Node101 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node101 [label="CLMeanStdDevNormalization\lLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_mean_std_dev_normalization_layer.xhtml",tooltip="Basic function to execute mean and standard deviation normalization by calling CLMeanStdDevNormalizat..."];
  Node90 -> Node102 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node102 [label="CLNormalizePlanarYUVLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_normalize_planar_y_u_v_layer.xhtml",tooltip="Basic function to run CLNormalizePlanarYUVLayerKernel."];
  Node90 -> Node103 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node103 [label="CLPriorBoxLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_prior_box_layer.xhtml",tooltip="Basic function to run CLPriorBoxLayerKernel."];
  Node90 -> Node104 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node104 [label="CLROIAlignLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_r_o_i_align_layer.xhtml",tooltip="Basic function to run CLROIAlignLayerKernel."];
  Node90 -> Node105 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node105 [label="CLROIPoolingLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_r_o_i_pooling_layer.xhtml",tooltip="Basic function to run CLROIPoolingLayerKernel."];
  Node90 -> Node106 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node106 [label="CLRange",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_range.xhtml",tooltip="Basic function to run CLRangeKernel."];
  Node90 -> Node107 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node107 [label="CLReorgLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_reorg_layer.xhtml",tooltip=" "];
  Node90 -> Node108 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node108 [label="CLReverse",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_reverse.xhtml",tooltip="Basic function to run CLReverseKernel."];
  Node90 -> Node109 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node109 [label="CLSelect",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_select.xhtml",tooltip="Basic function to run CLSelect."];
  Node90 -> Node110 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node110 [label="CLTile",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_l_tile.xhtml",tooltip="Basic function to run CLTileKernel."];
  Node90 -> Node111 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node111 [label="CLSynthetizeFunction\< K \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1test_1_1_c_l_synthetize_function.xhtml",tooltip="This template synthetizes an ICLSimpleFunction which runs the given kernel K."];
  Node90 -> Node112 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node112 [label="CLSynthetizeFunctionWith\lZeroConstantBorder\< K,\l bordersize \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1test_1_1_c_l_synthetize_function_with_zero_constant_border.xhtml",tooltip="As above but this also setups a Zero border on the input tensor of the specified bordersize."];
  Node0 -> Node113 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node113 [label="ICPPSimpleFunction",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_i_c_p_p_simple_function.xhtml",tooltip="Basic interface for functions which have a single CPP kernel."];
  Node113 -> Node114 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node114 [label="CPPNonMaximumSuppression",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml",tooltip="CPP Function to perform non maximum suppression on the bounding boxes and scores."];
  Node113 -> Node115 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node115 [label="CPPPermute",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_permute.xhtml",tooltip="Basic function to run CPPPermuteKernel."];
  Node113 -> Node116 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node116 [label="CPPTopKV",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_top_k_v.xhtml",tooltip="Basic function to run CPPTopKVKernel."];
  Node113 -> Node117 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node117 [label="CPPUpsample",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_c_p_p_upsample.xhtml",tooltip="Basic function to run CPPUpsample."];
  Node0 -> Node118 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node118 [label="INESimpleFunction",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_i_n_e_simple_function.xhtml",tooltip="Basic interface for functions which have a single CPU kernel."];
  Node118 -> Node119 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node119 [label="NESynthetizeFunctionWith\lZeroConstantBorder\< K,\l bordersize \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1test_1_1_n_e_synthetize_function_with_zero_constant_border.xhtml",tooltip="As above but this also setups a Zero border on the input tensor of the specified bordersize."];
  Node0 -> Node120 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node120 [label="INESimpleFunctionNoBorder",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_i_n_e_simple_function_no_border.xhtml",tooltip="Basic interface for functions which have a single CPU kernel and no border."];
  Node120 -> Node121 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node121 [label="NEBatchToSpaceLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_batch_to_space_layer.xhtml",tooltip="Basic function to run NEBatchToSpaceLayerKernel."];
  Node120 -> Node122 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node122 [label="NEBitwiseAnd",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_bitwise_and.xhtml",tooltip="Basic function to run NEBitwiseAndKernel."];
  Node120 -> Node123 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node123 [label="NEBitwiseNot",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_bitwise_not.xhtml",tooltip="Basic function to run NEBitwiseNotKernel."];
  Node120 -> Node124 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node124 [label="NEBitwiseOr",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_bitwise_or.xhtml",tooltip="Basic function to run NEBitwiseOrKernel."];
  Node120 -> Node125 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node125 [label="NEBitwiseXor",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_bitwise_xor.xhtml",tooltip="Basic function to run NEBitwiseXorKernel."];
  Node120 -> Node126 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node126 [label="NEBoundingBoxTransform",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_bounding_box_transform.xhtml",tooltip="Basic function to run NEBoundingBoxTransformKernel."];
  Node120 -> Node127 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node127 [label="NEChannelShuffleLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_channel_shuffle_layer.xhtml",tooltip="Basic function to run NEChannelShuffleLayerKernel."];
  Node120 -> Node128 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node128 [label="NEGather",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_gather.xhtml",tooltip="Basic function to run NEGatherKernel."];
  Node120 -> Node129 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node129 [label="NEMeanStdDevNormalization\lLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_mean_std_dev_normalization_layer.xhtml",tooltip="Basic function to execute mean and standard deviation normalization by calling NEMeanStdDevNormalizat..."];
  Node120 -> Node130 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node130 [label="NEPriorBoxLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_prior_box_layer.xhtml",tooltip="Basic function to run NEPriorBoxLayerKernel."];
  Node120 -> Node131 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node131 [label="NEROIAlignLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_r_o_i_align_layer.xhtml",tooltip="Basic function to run NEROIAlignLayerKernel."];
  Node120 -> Node132 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node132 [label="NEReorgLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_reorg_layer.xhtml",tooltip="Basic function to run NEReorgLayerKernel."];
  Node120 -> Node133 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node133 [label="NEReverse",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_reverse.xhtml",tooltip="Basic function to run NEReverseKernel."];
  Node120 -> Node134 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node134 [label="NESelect",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_select.xhtml",tooltip="Basic function to run NESelect."];
  Node120 -> Node135 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node135 [label="NETile",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_tile.xhtml",tooltip="Basic function to run NETileKernel."];
  Node120 -> Node136 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node136 [label="NESynthetizeFunction\< K \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1test_1_1_n_e_synthetize_function.xhtml",tooltip="This template synthetizes an INESimpleFunction which runs the given kernel K."];
  Node0 -> Node137 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node137 [label="NEActivationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_activation_layer.xhtml",tooltip="Basic function to run cpu::kernels::CpuActivationKernel."];
  Node0 -> Node138 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node138 [label="NEAddMulAdd",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_add_mul_add.xhtml",tooltip="Function to compute Add+Mul+Add fused operation."];
  Node0 -> Node139 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node139 [label="NEArgMinMaxLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_arg_min_max_layer.xhtml",tooltip="Function to calculate the index of the minimum or maximum values in a tensor based on an axis."];
  Node0 -> Node140 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node140 [label="NEArithmeticAddition",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_arithmetic_addition.xhtml",tooltip="Basic function to run cpu::kernels::CpuAddKernel."];
  Node0 -> Node141 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node141 [label="NEArithmeticSubtraction",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_arithmetic_subtraction.xhtml",tooltip="Basic function to run cpu::kernels::CpuSubKernel."];
  Node0 -> Node142 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node142 [label="NEBatchNormalizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_batch_normalization_layer.xhtml",tooltip="Basic function to run NENormalizationLayerKernel and simulate a batch normalization layer."];
  Node0 -> Node143 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node143 [label="NECast",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_cast.xhtml",tooltip="Basic function to run cpu::kernels::CpuCastKernel."];
  Node0 -> Node144 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node144 [label="NEComplexPixelWiseMultiplication",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_complex_pixel_wise_multiplication.xhtml",tooltip="Basic function to run cpu::CpuComplexMul."];
  Node0 -> Node145 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node145 [label="NEConcatenateLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_concatenate_layer.xhtml",tooltip="Basic function to execute concatenate tensors along a given axis."];
  Node0 -> Node146 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node146 [label="NEConv3D",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_conv3_d.xhtml",tooltip="Basic function to simulate a 3d convolution."];
  Node0 -> Node147 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node147 [label="NEConvertFullyConnectedWeights",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_convert_fully_connected_weights.xhtml",tooltip="Basic function to run cpu::kernels::CpuConvertFullyConnectedWeightsKernel."];
  Node0 -> Node148 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node148 [label="NEConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_convolution_layer.xhtml",tooltip="Basic function to simulate a convolution layer."];
  Node0 -> Node149 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node149 [label="NECopy",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_copy.xhtml",tooltip="Basic function to run cpu::kernels::CpuCopyKernel."];
  Node0 -> Node150 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node150 [label="NECropResize",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_crop_resize.xhtml",tooltip="Function to perform cropping and resizing."];
  Node0 -> Node151 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node151 [label="NEDeconvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_deconvolution_layer.xhtml",tooltip="Function to run the deconvolution layer."];
  Node0 -> Node152 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node152 [label="NEDepthConvertLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_depth_convert_layer.xhtml",tooltip="Basic function to run cpu::kernels::CpuCastKernel."];
  Node0 -> Node153 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node153 [label="NEDepthToSpaceLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_depth_to_space_layer.xhtml",tooltip="Basic function to run NEDepthToSpaceLayerKernel."];
  Node0 -> Node154 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node154 [label="NEDepthwiseConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_depthwise_convolution_layer.xhtml",tooltip="Function to execute a depthwise convolution."];
  Node0 -> Node155 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node155 [label="NEDequantizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_dequantization_layer.xhtml",tooltip="Basic function to run cpu::CpuDequantize that dequantizes an input tensor."];
  Node0 -> Node156 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node156 [label="NEDetectionPostProcessLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_detection_post_process_layer.xhtml",tooltip="NE Function to generate the detection output based on center size encoded boxes, class prediction and..."];
  Node0 -> Node157 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node157 [label="NEDirectConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_direct_convolution_layer.xhtml",tooltip="Function to run the direct convolution."];
  Node0 -> Node158 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node158 [label="NEElementwiseComparison",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_comparison.xhtml",tooltip="Basic function to run cpu::kernels::CpuComparisonKernel."];
  Node0 -> Node159 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node159 [label="NEElementwiseComparisonStatic\l\< op \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_comparison_static.xhtml",tooltip="Basic function to run cpu::kernels::CpuComparisonKernel."];
  Node0 -> Node160 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node160 [label="NEElementwiseDivision",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_division.xhtml",tooltip="Basic function to run cpu::kernels::CpuArithmeticKernel for division."];
  Node0 -> Node161 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node161 [label="NEElementwiseMax",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_max.xhtml",tooltip="Basic function to run cpu::kernels::CpuArithmeticKernel for max."];
  Node0 -> Node162 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node162 [label="NEElementwiseMin",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_min.xhtml",tooltip="Basic function to run cpu::kernels::CpuArithmeticKernel for min."];
  Node0 -> Node163 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node163 [label="NEElementwisePower",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_power.xhtml",tooltip="Basic function to run cpu::kernels::CpuArithmeticKernel for power."];
  Node0 -> Node164 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node164 [label="NEElementwiseSquaredDiff",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_squared_diff.xhtml",tooltip="Basic function to run cpu::kernels::CpuArithmeticKernel for squared difference."];
  Node0 -> Node165 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node165 [label="NEElementwiseUnaryLayer\l\< op \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_elementwise_unary_layer.xhtml",tooltip="Basic function to perform unary elementwise operations."];
  Node0 -> Node166 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node166 [label="NEFFT1D",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_f_f_t1_d.xhtml",tooltip="Basic function to execute one dimensional FFT."];
  Node0 -> Node167 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node167 [label="NEFFT2D",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_f_f_t2_d.xhtml",tooltip="Basic function to execute two dimensional FFT."];
  Node0 -> Node168 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node168 [label="NEFFTConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_f_f_t_convolution_layer.xhtml",tooltip="Basic function to execute FFT-based convolution on CPU."];
  Node0 -> Node169 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node169 [label="NEFill",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_fill.xhtml",tooltip="Basic function to run cpu::kernels::CpuFillKernel."];
  Node0 -> Node170 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node170 [label="NEFillBorder",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_fill_border.xhtml",tooltip="Basic function to run NEFillBorderKernel."];
  Node0 -> Node171 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node171 [label="NEFlattenLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_flatten_layer.xhtml",tooltip="Basic function to execute flatten layer kernel."];
  Node0 -> Node172 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node172 [label="NEFloor",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_floor.xhtml",tooltip="Basic function to run cpu::kernels::CpuFloorKernel."];
  Node0 -> Node173 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node173 [label="NEFullyConnectedLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_fully_connected_layer.xhtml",tooltip="Basic function to compute a Fully Connected layer."];
  Node0 -> Node174 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node174 [label="NEFuseBatchNormalization",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_fuse_batch_normalization.xhtml",tooltip="Basic function to fuse the batch normalization node to a preceding convolution node."];
  Node0 -> Node175 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node175 [label="NEGEMM",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_g_e_m_m.xhtml",tooltip="Basic function to execute GEMM."];
  Node0 -> Node176 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node176 [label="NEGEMMConv2d",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_g_e_m_m_conv2d.xhtml",tooltip="Basic function to compute the convolution layer."];
  Node0 -> Node177 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node177 [label="NEGEMMConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_g_e_m_m_convolution_layer.xhtml",tooltip="Basic function to compute the convolution layer."];
  Node0 -> Node178 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node178 [label="NEGEMMLowpMatrixMultiplyCore",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_core.xhtml",tooltip="Function to run Gemm on quantized types."];
  Node0 -> Node179 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node179 [label="NEGEMMLowpOutputStage",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_g_e_m_m_lowp_output_stage.xhtml",tooltip="Basic function to execute GEMMLowpQuantizeDown kernels."];
  Node0 -> Node180 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node180 [label="NEGenerateProposalsLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_generate_proposals_layer.xhtml",tooltip="Basic function to generate proposals for a RPN (Region Proposal Network)"];
  Node0 -> Node181 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node181 [label="NEInstanceNormalizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_instance_normalization_layer.xhtml",tooltip="Basic function to perform a Instance normalization."];
  Node0 -> Node182 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node182 [label="NEL2NormalizeLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_l2_normalize_layer.xhtml",tooltip="Basic function to perform a L2 normalization on a given axis."];
  Node0 -> Node183 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node183 [label="NELSTMLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_l_s_t_m_layer.xhtml",tooltip="Basic function to run NELSTMLayer."];
  Node0 -> Node184 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node184 [label="NELSTMLayerQuantized",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_l_s_t_m_layer_quantized.xhtml",tooltip="Basic function to run NELSTMLayerQuantized."];
  Node0 -> Node185 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node185 [label="NELogicalAnd",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_logical_and.xhtml",tooltip="Basic function to perform logical AND."];
  Node0 -> Node186 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node186 [label="NELogicalNot",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_logical_not.xhtml",tooltip="Basic function to perform logical NOT."];
  Node0 -> Node187 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node187 [label="NELogicalOr",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_logical_or.xhtml",tooltip="Basic function to perform logical OR."];
  Node0 -> Node188 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node188 [label="NEMatMul",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_mat_mul.xhtml",tooltip="Basic function to run the following operators:"];
  Node0 -> Node189 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node189 [label="NEMaxUnpoolingLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_max_unpooling_layer.xhtml",tooltip="Function to perform MaxUnpooling."];
  Node0 -> Node190 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node190 [label="NENormalizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_normalization_layer.xhtml",tooltip="Basic function to compute a normalization layer."];
  Node0 -> Node191 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node191 [label="NEPReluLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_p_relu_layer.xhtml",tooltip="Basic function to run cpu::kernels::CpuArithmeticKernel for PRELU."];
  Node0 -> Node192 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node192 [label="NEPadLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_pad_layer.xhtml",tooltip="Basic function to pad a tensor."];
  Node0 -> Node193 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node193 [label="NEPermute",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_permute.xhtml",tooltip="Basic function to run cpu::kernels::CpuPermuteKernel."];
  Node0 -> Node194 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node194 [label="NEPixelWiseMultiplication",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml",tooltip="Basic function to run cpu::CpuMul."];
  Node0 -> Node195 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node195 [label="NEPooling3dLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_pooling3d_layer.xhtml",tooltip="Basic function to simulate a pooling 3d layer with the specified pooling operation."];
  Node0 -> Node196 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node196 [label="NEPoolingLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_pooling_layer.xhtml",tooltip="Basic function to simulate a pooling layer with the specified pooling operation."];
  Node0 -> Node197 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node197 [label="NEQLSTMLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_q_l_s_t_m_layer.xhtml",tooltip="Basic function to run NEQLSTMLayer."];
  Node0 -> Node198 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node198 [label="NEQuantizationLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_quantization_layer.xhtml",tooltip="Basic function to run a quantization layer using cpu::CpuQuantize."];
  Node0 -> Node199 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node199 [label="NERNNLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_r_n_n_layer.xhtml",tooltip="Basic function to run NERNNLayer."];
  Node0 -> Node200 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node200 [label="NEROIPoolingLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_r_o_i_pooling_layer.xhtml",tooltip="Basic function to run NEROIPoolingLayerKernel."];
  Node0 -> Node201 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node201 [label="NERange",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_range.xhtml",tooltip="Basic function to run NERangeKernel."];
  Node0 -> Node202 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node202 [label="NEReduceMean",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_reduce_mean.xhtml",tooltip="Basic function to perform reduce operation."];
  Node0 -> Node203 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node203 [label="NEReductionOperation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_reduction_operation.xhtml",tooltip="Basic function to simulate a reduction operation."];
  Node0 -> Node204 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node204 [label="NEReshapeLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_reshape_layer.xhtml",tooltip="Basic function to run cpu::kernels::CpuReshapeKernel."];
  Node0 -> Node205 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node205 [label="NEScale",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_scale.xhtml",tooltip="Basic function to compute Scale."];
  Node0 -> Node206 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node206 [label="NESlice",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_slice.xhtml",tooltip="Basic function to perform tensor slicing."];
  Node0 -> Node207 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node207 [label="NESoftmaxLayerGeneric\l\< IS_LOG \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_softmax_layer_generic.xhtml",tooltip="Basic function to compute a SoftmaxLayer and a Log SoftmaxLayer."];
  Node0 -> Node208 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node208 [label="NESpaceToBatchLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_space_to_batch_layer.xhtml",tooltip="Basic function to spatial divide a tensor."];
  Node0 -> Node209 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node209 [label="NESpaceToDepthLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_space_to_depth_layer.xhtml",tooltip="Basic function to run NESpaceToDepthLayerKernel."];
  Node0 -> Node210 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node210 [label="NEStackLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_stack_layer.xhtml",tooltip="Basic function to stack tensors along an axis."];
  Node0 -> Node211 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node211 [label="NEStridedSlice",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_strided_slice.xhtml",tooltip="Basic function to run NEStridedSliceKernel."];
  Node0 -> Node212 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node212 [label="NETranspose",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_transpose.xhtml",tooltip="Basic function to run cpu::kernels::CpuTransposeKernel."];
  Node0 -> Node213 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node213 [label="NEUnstack",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_unstack.xhtml",tooltip="Basic function to unpack a rank-R tensor into rank-(R-1) tensors."];
  Node0 -> Node214 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node214 [label="NEWinogradConvolutionLayer",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1_n_e_winograd_convolution_layer.xhtml",tooltip="Basic function to simulate a convolution layer."];
  Node0 -> Node215 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node215 [label="FusedConvolutionBatchNormalization\lFunction\< TargetInfo, FusedLayerTypes \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1graph_1_1backends_1_1_fused_convolution_batch_normalization_function.xhtml",tooltip="Wrapper function to first apply {NE, CL}BatchNormalizationLayer on the weights and then run {NE,..."];
  Node0 -> Node216 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node216 [label="FusedDepthwiseConvolution\lBatchNormalizationFunction\l\< TargetInfo, FusedLayerTypes \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1graph_1_1backends_1_1_fused_depthwise_convolution_batch_normalization_function.xhtml",tooltip="Wrapper function to first apply {NE, CL}BatchNormalizationLayer on the weights and then run {NE,..."];
  Node0 -> Node217 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node217 [label="CLSynthetizeFunctionInit\lOutputWithZeroAndWithZeroConstant\lBorder\< K, bordersize \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classarm__compute_1_1test_1_1_c_l_synthetize_function_init_output_with_zero_and_with_zero_constant_border.xhtml",tooltip="As above but this also initializes to zero the input tensor."];
}
