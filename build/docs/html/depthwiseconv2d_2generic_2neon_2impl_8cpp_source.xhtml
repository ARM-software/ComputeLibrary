<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/cpu/kernels/depthwiseconv2d/generic/neon/impl.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">impl.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2019-2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="depthwiseconv2d_2generic_2neon_2impl_8h.xhtml">src/cpu/kernels/depthwiseconv2d/generic/neon/impl.h</a>&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2core_2utils_2quantization_2_asymm_helpers_8h.xhtml">arm_compute/core/utils/quantization/AsymmHelpers.h</a>&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_convolution_info_8h.xhtml">arm_compute/function_info/ConvolutionInfo.h</a>&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>cpu</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">   35</a></span>&#160;<span class="keyword">inline</span> int32x4_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(<span class="keyword">const</span> int32x4_t &amp;a, <span class="keyword">const</span> int32_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> vqrdmulhq_n_s32(a, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ac48f4a6361751e9231f1df22dc15eb6a">   40</a></span>&#160;<span class="keyword">inline</span> int32_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(<span class="keyword">const</span> int32_t &amp;a, <span class="keyword">const</span> int32_t &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> vget_lane_s32(vqrdmulh_n_s32(vdup_n_s32(a), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>), 0);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">   45</a></span>&#160;<span class="keyword">inline</span> int32x4_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<span class="keyword">const</span> int32x4_t &amp;x, <span class="keyword">const</span> <span class="keywordtype">int</span> exponent)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">const</span> int32x4_t shift = vdupq_n_s32(-exponent);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> int32x4_t fixup = vshrq_n_s32(vandq_s32(x, shift), 31);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> int32x4_t fixed = vqaddq_s32(x, fixup);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">return</span> vrshlq_s32(fixed, shift);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#ad0b9efe43da5d21e76247e4bf586280a">   53</a></span>&#160;<span class="keyword">inline</span> int32x2_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<span class="keyword">const</span> int32x2_t &amp;x, <span class="keyword">const</span> <span class="keywordtype">int</span> exponent)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> int32x2_t shift = vdup_n_s32(-exponent);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">const</span> int32x2_t fixup = vshr_n_s32(vand_s32(x, shift), 31);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> int32x2_t fixed = vqadd_s32(x, fixup);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> vrshl_s32(fixed, shift);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#acb942e32cd7322ef1e315255f33cc176">   61</a></span>&#160;<span class="keyword">inline</span> int32_t <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<span class="keyword">const</span> int32_t &amp;x, <span class="keyword">const</span> <span class="keywordtype">int</span> exponent)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> int32x2_t xs = vdup_n_s32(x);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> vget_lane_s32(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(xs, exponent), 0);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keywordtype">void</span> depthwise_loop_multiplier1_quantized(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *weights,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>       *biases,</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                          <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>        &amp;dilation,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                          std::vector&lt;int&gt;     output_multiplier,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                                          std::vector&lt;int&gt;     output_shift,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                          <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>        &amp;window,</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                          <span class="keywordtype">bool</span>                 has_biases) <span class="comment">// NOLINT</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(output_multiplier, output_shift);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    constexpr <span class="keyword">auto</span> element_per_vector = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a> / <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">using</span> VectorType                  = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::type</a>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">using</span> TagType                     = <span class="keyword">typename</span> <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">wrapper::traits::neon_vector&lt;T, element_per_vector&gt;::tag_type</a>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">using</span> AccType                     = int32_t;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">using</span> AccArrayType                = std::array&lt;AccType, element_per_vector&gt;;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_of_bound_value =</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>(<span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(0), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;data_type(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info()).<a class="code" href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">get</a>&lt;T&gt;();</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_of_bound_vector = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(out_of_bound_value), TagType{});</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info = DepthwiseConvolutionRunInfo(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info(), *weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">const</span> int32_t input_qoffset   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">const</span> int32_t weights_qoffset = weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">uniform</a>().<a class="code" href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">offset</a>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">const</span> int32_t output_qoffset  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">const</span> int32_t k_offset        = run_info.weights_width * run_info.weights_height * input_qoffset * weights_qoffset;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    Window execution_window = window;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    execution_window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ab11d49bc60990d21ee07967c219129ae">dim_single_unit_step</a>);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    Window win_input = window;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    win_input.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    Window win_weights = win_input;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    Window win_output = window;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    win_output.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    Iterator input_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_input);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    Iterator weights_it(weights, win_weights);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    Iterator output_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_output);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    Iterator biases_it{};</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        biases_it = Iterator(biases, win_weights);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        execution_window,</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keyword">const</span> int32_t input_y           = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keyword">const</span> int32_t input_z           = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keyword">const</span> int64_t base_input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keyword">auto</span> <span class="keyword">const</span>    base_weights_ptr  = weights_it.ptr();</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordtype">size_t</span>        x                 = run_info.x_start;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">for</a> (; x &lt; run_info.x_leftover_start; x += run_info.x_step)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                AccArrayType acc{};</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                AccArrayType in_sum{};</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                AccArrayType we_sum{};</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keyword">auto</span> weights_ptr  = base_weights_ptr;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keyword">auto</span> input_offset = base_input_offset;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                    int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">is_valid_input_region</a>(input_y, input_z, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h, run_info, dilation);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> input_vals =</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            is_valid_region</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                ? <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                                      input_it.ptr() + std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(offs), run_info.input_max_offset)))</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                                : out_of_bound_vector;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_vals =</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span>TW *<span class="keyword">&gt;</span>(weights_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * run_info.weights_stride_y) + x);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; element_per_vector; ++i)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                            acc.at(i) += input_vals[i] * weights_vals[i];</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                            in_sum.at(i) += input_vals[i];</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            we_sum.at(i) += weights_vals[i];</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                        }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                        offs += dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>() * run_info.input_stride_y;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                    }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    weights_ptr += run_info.weights_stride_z;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                    input_offset += dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>() * run_info.input_stride_z;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                VectorType out_vals = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(0), TagType{});</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; element_per_vector; ++i)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                    acc.at(i) -= in_sum.at(i) * weights_qoffset;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    acc.at(i) -= we_sum.at(i) * input_qoffset;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    acc.at(i) += k_offset;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        acc.at(i) += *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr() + i * <span class="keyword">sizeof</span>(int32_t)) + x);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    <span class="keyword">const</span> int32_t out_mul   = output_multiplier.at(x + i);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keyword">const</span> int32_t out_shift = output_shift.at(x + i);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    <span class="keywordflow">if</span> (out_shift &lt; 0)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        acc.at(i) =</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc.at(i) * (1 &lt;&lt; (-out_shift)), out_mul) + output_qoffset;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        acc.at(i) =</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                            <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc.at(i), out_mul), out_shift) +</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                            output_qoffset;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    out_vals[i] = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(utility::clamp&lt;AccType, T&gt;(acc.at(i)));</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr()) + x, out_vals);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            <span class="comment">// left-over</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">for</span> (; x &lt; run_info.x_end; ++x)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                AccType acc    = 0;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                AccType in_sum = 0;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                AccType we_sum = 0;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keyword">auto</span> weights_ptr  = base_weights_ptr;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keyword">auto</span> input_offset = base_input_offset;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                {</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    int64_t offs = input_offset + x * <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">is_valid_input_region</a>(input_y, input_z, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h, run_info, dilation);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> input_val =</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            is_valid_region</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                ? *<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() +</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                                                         std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(offs), run_info.input_max_offset))</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                : out_of_bound_value;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_val =</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span>TW *<span class="keyword">&gt;</span>(weights_ptr + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * run_info.weights_stride_y) + x);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                        acc += input_val * weights_val;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        in_sum += input_val;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                        we_sum += weights_val;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        offs += dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">x</a>() * run_info.input_stride_y;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    weights_ptr += run_info.weights_stride_z;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    input_offset += dilation.<a class="code" href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">y</a>() * run_info.input_stride_z;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                T out_vals{0};</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                acc -= in_sum * weights_qoffset;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                acc -= we_sum * input_qoffset;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                acc += k_offset;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    acc += *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr()) + x);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keyword">const</span> int32_t out_mul   = output_multiplier.at(x);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <span class="keyword">const</span> int32_t out_shift = output_shift.at(x);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <span class="keywordflow">if</span> (out_shift &lt; 0)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    acc = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc * (1 &lt;&lt; (-out_shift)), out_mul) + output_qoffset;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                    acc =</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc, out_mul), out_shift) + output_qoffset;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                out_vals                                      = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(utility::clamp&lt;AccType, T&gt;(acc));</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr()) + x) = out_vals;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        },</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        input_it, weights_it, biases_it, output_it);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW&gt;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keywordtype">void</span> depthwise_loop_generic_quantized(<span class="keyword">const</span> ITensor       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                      <span class="keyword">const</span> ITensor       *weights,</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                      <span class="keyword">const</span> ITensor       *biases,</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                      ITensor             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                      <span class="keyword">const</span> PadStrideInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                      <span class="keyword">const</span> Size2D        &amp;dilation,</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         depth_multiplier,</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                      std::vector&lt;int&gt;     output_multiplier,</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                      std::vector&lt;int&gt;     output_shift,</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                      <span class="keyword">const</span> Window        &amp;window,</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                                      <span class="keywordtype">bool</span>                 has_biases) <span class="comment">// NOLINT</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keyword">using</span> AccType = int32_t;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info =</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        DepthwiseConvolutionRunInfo(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window, depth_multiplier);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_of_bound_value =</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        PixelValue(<span class="keyword">static_cast&lt;</span>uint64_t<span class="keyword">&gt;</span>(0), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;data_type(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info()).get&lt;T&gt;();</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keyword">const</span> int32_t input_qoffset   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keyword">const</span> int32_t weights_qoffset = weights-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> int32_t output_qoffset  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform().offset;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> int32_t k_offset        = run_info.weights_width * run_info.weights_height * input_qoffset * weights_qoffset;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    Window execution_window = window;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    execution_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, run_info.input_depth, 1));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    Window win_input = execution_window;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    Window win_weights = window;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    win_weights.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    Window win_output = window;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    win_output.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    Iterator input_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_input);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    Iterator weights_it(weights, win_weights);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    Iterator output_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_output);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    Iterator biases_it{};</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        biases_it = Iterator(biases, win_weights);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        execution_window,</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            std::vector&lt;AccType&gt; acc(depth_multiplier, 0);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            std::vector&lt;AccType&gt; we_sum(depth_multiplier, 0);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            AccType              in_sum = 0;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keyword">const</span> int32_t input_y      = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keyword">const</span> int32_t input_z      = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            int64_t       input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keyword">auto</span> weights_ptr = weights_it.ptr();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordtype">int</span> offs = input_offset;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                    <span class="keyword">const</span> <span class="keywordtype">bool</span> is_valid_region = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">is_valid_input_region</a>(input_y, input_z, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>, h, run_info, dilation);</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> input_val =</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        is_valid_region ? *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(input_it.ptr() + std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(offs),</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                                                                                            run_info.input_max_offset)))</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                                        : out_of_bound_value;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> m = 0; m &lt; depth_multiplier; ++m)</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                    {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                        <span class="keyword">const</span> <span class="keyword">auto</span> weights_val =</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                            *(<span class="keyword">reinterpret_cast&lt;</span>TW *<span class="keyword">&gt;</span>(weights_ptr + m * <span class="keyword">sizeof</span>(T) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * run_info.weights_stride_y));</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                        acc.at(m) += input_val * weights_val;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                        we_sum.at(m) += weights_val;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                    }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                    offs += dilation.x() * run_info.input_stride_y;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    in_sum += input_val;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                weights_ptr += run_info.weights_stride_z;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                input_offset += dilation.y() * run_info.input_stride_z;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> m = 0; m &lt; depth_multiplier; ++m)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                acc.at(m) -= in_sum * weights_qoffset;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                acc.at(m) -= we_sum.at(m) * input_qoffset;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                acc.at(m) += k_offset;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                    acc.at(m) += *(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr() + m * <span class="keyword">sizeof</span>(int32_t)));</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="keyword">const</span> int32_t out_mul   = output_multiplier.at(<span class="keywordtype">id</span>.x() * depth_multiplier + m);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="keyword">const</span> int32_t out_shift = output_shift.at(<span class="keywordtype">id</span>.x() * depth_multiplier + m);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <span class="keywordflow">if</span> (out_shift &lt; 0)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    acc.at(m) = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc.at(m) * (1 &lt;&lt; (-out_shift)), out_mul) + output_qoffset;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                    acc.at(m) = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc.at(m), out_mul), out_shift) +</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                output_qoffset;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(output_it.ptr() + m * <span class="keyword">sizeof</span>(T))) =</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(utility::clamp&lt;AccType, T&gt;(acc.at(m)));</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        },</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        input_it, weights_it, biases_it, output_it);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;}</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW&gt;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="keywordtype">void</span> depthwise_loop_pow2_quantized_per_tensor(<span class="keyword">const</span> ITensor       *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                                              <span class="keyword">const</span> ITensor       *weights,</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                                              <span class="keyword">const</span> ITensor       *biases,</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                                              ITensor             *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                                              <span class="keyword">const</span> PadStrideInfo &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>,</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                                              <span class="keyword">const</span> Size2D        &amp;dilation,</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                                              <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         depth_multiplier,</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                                              std::vector&lt;int&gt;     output_multiplier,</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                                              std::vector&lt;int&gt;     output_shift,</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                                              <span class="keyword">const</span> Window        &amp;window,</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                                              <span class="keywordtype">bool</span>                 has_biases) <span class="comment">// NOLINT</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    constexpr <span class="keywordtype">int</span> half_vec = <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a> / 2;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">using</span> AccType          = int32_t;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="keyword">using</span> AccVectorType    = <span class="keyword">typename</span> <a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">wrapper::traits::neon_vector&lt;AccType, half_vec&gt;::type</a>;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">using</span> AccVectorTagType = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;AccType, half_vec&gt;::tag_type;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keyword">using</span> TagType          = <span class="keyword">typename</span> wrapper::traits::neon_vector&lt;T, vector_size&gt;::tag_type;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> run_info =</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        DepthwiseConvolutionRunInfo(*<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info(), *weights-&gt;info(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, window, depth_multiplier);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_qoffset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().offset), TagType{})));</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> weights_qoffset_vec = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>TW<span class="keyword">&gt;</span>(weights-&gt;info()-&gt;quantization_info().uniform().offset), TagType{})));</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_qoffset_vec  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform().offset,</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                                                     <a class="code" href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a>{});</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> lower = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">std::numeric_limits&lt;T&gt;::lowest</a>()), AccVectorTagType{});</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> upper = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(std::numeric_limits&lt;T&gt;::max()), AccVectorTagType{});</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> zero  = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>AccType<span class="keyword">&gt;</span>(0), AccVectorTagType{});</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_mul   = output_multiplier.at(0);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> out_shift = output_shift.at(0);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    Window execution_window = window;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    execution_window.set(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, Window::Dimension(0, run_info.input_depth, 1));</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    Window win_input = execution_window;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    win_input.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    Window win_weights = window;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    win_weights.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">Window::DimY</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">Window::DimZ</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    win_weights.set(<a class="code" href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">Window::DimW</a>, <a class="code" href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">dim_manual_loop</a>);</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    Window win_output = window;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    win_output.set_dimension_step(<a class="code" href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">Window::DimX</a>, run_info.x_step);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    Iterator input_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, win_input);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    Iterator weights_it(weights, win_weights);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    Iterator output_it(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, win_output);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    Iterator biases_it{};</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160; </div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        biases_it = Iterator(biases, win_weights);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    std::vector&lt;AccVectorType&gt; acc0(depth_multiplier / <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    std::vector&lt;AccVectorType&gt; acc1(depth_multiplier / <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a>);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">execute_window_loop</a>(</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        execution_window,</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        [&amp;](<span class="keyword">const</span> Coordinates &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(begin(acc0), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(acc0), zero);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">std::fill</a>(begin(acc1), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(acc1), zero);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="keyword">const</span> int32_t input_y      = <span class="keywordtype">id</span>.y() * run_info.conv_stride_x - run_info.conv_pad_left;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            <span class="keyword">const</span> int32_t input_z      = <span class="keywordtype">id</span>.z() * run_info.conv_stride_y - run_info.conv_pad_top;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            int64_t       input_offset = input_y * run_info.input_stride_y + input_z * run_info.input_stride_z;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <span class="keyword">auto</span> weights_ptr = weights_it.ptr();</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> h = 0; h &lt; run_info.weights_height; ++h)</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            {</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                <span class="keyword">const</span> int32_t current_h = input_z + h * dilation.y();</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                <span class="keywordflow">if</span> (current_h &gt;= 0 &amp;&amp; current_h &lt; <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(run_info.input_height))</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    <span class="keywordtype">int</span> offs = input_offset;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> &lt; run_info.weights_width; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a>)</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                    {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        <span class="keyword">const</span> int32_t current_w = input_y + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * dilation.x();</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                        <span class="keywordflow">if</span> (current_w &gt;= 0 &amp;&amp; current_w &lt; <span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(run_info.input_width))</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                        {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> input_8x8 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                *(<span class="keyword">reinterpret_cast&lt;</span>T *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                    input_it.ptr() + std::min(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(offs), run_info.input_max_offset))),</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                                TagType{});</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> input_s16x8   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(input_8x8));</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                            <span class="keyword">const</span> <span class="keyword">auto</span> input_no_offs = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(input_s16x8, input_qoffset_vec);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; </div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> m = 0, i = 0; m &lt; depth_multiplier; m += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a>, ++i)</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                            {</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> weights_8x8     = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(<span class="keyword">reinterpret_cast&lt;</span>TW *<span class="keyword">&gt;</span>(</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                                    weights_ptr + m * <span class="keyword">sizeof</span>(T) + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">w</a> * run_info.weights_stride_y));</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> weights_s16x8   = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(weights_8x8));</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                                <span class="keyword">const</span> <span class="keyword">auto</span> weights_no_offs = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">wrapper::vsub</a>(weights_s16x8, weights_qoffset_vec);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                                acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(acc0.at(i), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(input_no_offs),</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                                                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(weights_no_offs));</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                                acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">wrapper::vmlal</a>(acc1.at(i), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(input_no_offs),</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                                            <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(weights_no_offs));</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                            }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                        }</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                        offs += dilation.x() * run_info.input_stride_y;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                    }</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160; </div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                weights_ptr += run_info.weights_stride_z;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                input_offset += dilation.y() * run_info.input_stride_z;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            }</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160; </div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> m = 0, i = 0; m &lt; depth_multiplier; m += <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">vector_size</a>, ++i)</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            {</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                <span class="keywordflow">if</span> (has_biases)</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bias_val0 =</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(<span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr() + m * <span class="keyword">sizeof</span>(int32_t)));</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                    <span class="keyword">const</span> <span class="keyword">auto</span> bias_val1 = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">wrapper::vloadq</a>(</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                        <span class="keyword">reinterpret_cast&lt;</span>int32_t *<span class="keyword">&gt;</span>(biases_it.ptr() + (m + half_vec) * <span class="keyword">sizeof</span>(int32_t)));</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                    acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(acc0.at(i), bias_val0);</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                    acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(acc1.at(i), bias_val1);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160; </div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                <span class="keywordflow">if</span> (out_shift &lt; 0)</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                    acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc0.at(i) * (1 &lt;&lt; (-out_shift)), out_mul),</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                                               output_qoffset_vec);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc1.at(i) * (1 &lt;&lt; (-out_shift)), out_mul),</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                                               output_qoffset_vec);</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                    acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc0.at(i), out_mul), out_shift),</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                        output_qoffset_vec);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                    acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">wrapper::vadd</a>(</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                        <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">rounding_divide_by_exp2</a>(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">saturating_doubling_high_mul</a>(acc1.at(i), out_mul), out_shift),</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                        output_qoffset_vec);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                }</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160; </div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                acc0.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(acc0.at(i), lower), upper);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                acc1.at(i) = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">wrapper::vmin</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">wrapper::vmax</a>(acc1.at(i), lower), upper);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160; </div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> out_val = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">wrapper::vcombine</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(acc0.at(i)), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">wrapper::vmovn</a>(acc1.at(i)));</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160; </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                <span class="keywordflow">if</span> (std::is_same&lt;T, uint8_t&gt;::value)</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                {</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>uint8_t *<span class="keyword">&gt;</span>(output_it.ptr() + m * <span class="keyword">sizeof</span>(uint8_t)),</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(vreinterpretq_u16_s16(out_val)));</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                }</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                {</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">wrapper::vstore</a>(<span class="keyword">reinterpret_cast&lt;</span>int8_t *<span class="keyword">&gt;</span>(output_it.ptr() + m * <span class="keyword">sizeof</span>(int8_t)),</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                                    <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">wrapper::vqmovn</a>(out_val));</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;                }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            }</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        },</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        input_it, weights_it, biases_it, output_it);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160; </div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> TW&gt;</div>
<div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a5a2b594dc6c251f07190189c716685ec">  559</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5a2b594dc6c251f07190189c716685ec">run_depthwise_quanitized8bit</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *weights,</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *biases,</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                                  <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>               *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>          &amp;window,</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                                  <span class="keywordtype">bool</span>                   has_biases,</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                                  <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>)</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;{</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <a class="code" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.pad_stride_info;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     depth_multiplier = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.depth_multiplier;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>           dilation         = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dilation;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    std::vector&lt;int&gt; output_multiplier;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    std::vector&lt;int&gt; output_shift;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160; </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> input_scale   = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keyword">const</span> <span class="keyword">auto</span> output_scale  = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>-&gt;info()-&gt;quantization_info().uniform().scale;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keyword">auto</span>       weights_scale = weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>().<a class="code" href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">scale</a>();</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160; </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()))</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    {</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt; weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;dimension(<a class="code" href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">channel_idx</a>); ++i)</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            weights_scale.push_back(weights_scale.front());</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        }</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    }</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; </div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;s : weights_scale)</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        int32_t     out_mult   = 0;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        int32_t     out_shift  = 0;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">float</span> multiplier = input_scale * s / output_scale;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <a class="code" href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a>(multiplier, &amp;out_mult, &amp;out_shift);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160; </div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        output_multiplier.push_back(out_mult);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        output_shift.push_back(out_shift);</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160; </div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">if</span> (depth_multiplier == 1)</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    {</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        depthwise_loop_multiplier1_quantized&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation, output_multiplier,</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                                    output_shift, window, has_biases);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_pow2                 = ((depth_multiplier &amp; (depth_multiplier - 1)) == 0);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">bool</span> is_quantized_per_tensor = !(<a class="code" href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">is_data_type_quantized_per_channel</a>(weights-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>()));</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keywordflow">if</span> (is_pow2 &amp;&amp; is_quantized_per_tensor &amp;&amp; depth_multiplier &gt;= 8)</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            depthwise_loop_pow2_quantized_per_tensor&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation,</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                                                            depth_multiplier, output_multiplier, output_shift, window,</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                                                            has_biases);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        {</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            depthwise_loop_generic_quantized&lt;T, TW&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>, weights, biases, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, dilation, depth_multiplier,</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                                    output_multiplier, output_shift, window, has_biases);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        }</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div>
<div class="line"><a name="l00619"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a7e11bb008b174952651f4a9946adc1a4">  619</a></span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a7e11bb008b174952651f4a9946adc1a4">run_depthwise_quanitized8bit&lt;uint8_t, uint8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *weights,</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *biases,</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                                                             <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>               *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>          &amp;window,</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                                                             <span class="keywordtype">bool</span>                   has_biases,</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                                                             <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00626"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">  626</a></span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">run_depthwise_quanitized8bit&lt;int8_t, int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *weights,</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *biases,</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                                                           <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>               *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>          &amp;window,</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                                                           <span class="keywordtype">bool</span>                   has_biases,</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                                           <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00633"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1cpu.xhtml#a22c00c0ee5bab5833057b869cfbbf3bd">  633</a></span>&#160;<span class="keyword">template</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1cpu.xhtml#a22c00c0ee5bab5833057b869cfbbf3bd">run_depthwise_quanitized8bit&lt;uint8_t, int8_t&gt;</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">src</a>,</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *weights,</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>         *biases,</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                                                            <a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a>               *<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">dst</a>,</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_window.xhtml">Window</a>          &amp;window,</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                                            <span class="keywordtype">bool</span>                   has_biases,</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                                            <span class="keyword">const</span> <a class="code" href="structarm__compute_1_1_convolution_info.xhtml">ConvolutionInfo</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;} <span class="comment">// namespace cpu</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="ttc" id="a_convolution_info_8h_xhtml"><div class="ttname"><a href="_convolution_info_8h.xhtml">ConvolutionInfo.h</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="aarm__compute_2core_2utils_2quantization_2_asymm_helpers_8h_xhtml"><div class="ttname"><a href="arm__compute_2core_2utils_2quantization_2_asymm_helpers_8h.xhtml">AsymmHelpers.h</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for CPU tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:37</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor's metadata.</div></div>
<div class="ttc" id="aclassarm__compute_1_1_pad_stride_info_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pad_stride_info.xhtml">arm_compute::PadStrideInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00139">CoreTypes.h:140</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00035">PixelValue.h:36</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_pixel_value_xhtml_a66c4c1f8b1962d71162d7ac0b3ef65bc"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml#a66c4c1f8b1962d71162d7ac0b3ef65bc">arm_compute::PixelValue::get</a></div><div class="ttdeci">void get(uint8_t &amp;v) const</div><div class="ttdoc">Interpret the pixel value as a U8.</div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00228">PixelValue.h:228</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_a706fc156bcd4c45441bcaad05884b57d"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#a706fc156bcd4c45441bcaad05884b57d">arm_compute::QuantizationInfo::uniform</a></div><div class="ttdeci">UniformQuantizationInfo uniform() const</div><div class="ttdoc">Return per layer quantization info.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00140">QuantizationInfo.h:140</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_quantization_info_xhtml_af21c7fddee28e9aa0a37c633300db0e0"><div class="ttname"><a href="classarm__compute_1_1_quantization_info.xhtml#af21c7fddee28e9aa0a37c633300db0e0">arm_compute::QuantizationInfo::scale</a></div><div class="ttdeci">const std::vector&lt; float &gt; &amp; scale() const</div><div class="ttdoc">Scale vector accessor.</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00116">QuantizationInfo.h:116</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml">arm_compute::Size2D</a></div><div class="ttdoc">Class for specifying the size of an image or rectangle.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00034">Size2D.h:35</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml_a94b8468af876f5ab54020d5e9787a4f0"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#a94b8468af876f5ab54020d5e9787a4f0">arm_compute::Size2D::x</a></div><div class="ttdeci">size_t x() const</div><div class="ttdoc">Semantic accessor for width as x.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00073">Size2D.h:73</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_size2_d_xhtml_aaaeb4853150b7d0e8b685fd08052924f"><div class="ttname"><a href="classarm__compute_1_1_size2_d.xhtml#aaaeb4853150b7d0e8b685fd08052924f">arm_compute::Size2D::y</a></div><div class="ttdeci">size_t y() const</div><div class="ttdoc">Semantic accessor for height as y.</div><div class="ttdef"><b>Definition:</b> <a href="_size2_d_8h_source.xhtml#l00082">Size2D.h:82</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml">arm_compute::Window</a></div><div class="ttdoc">Describe a multidimensional execution window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00039">Window.h:40</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a60f2e7a76af978d4eb6be4ac6e8044d1"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a60f2e7a76af978d4eb6be4ac6e8044d1">arm_compute::Window::DimW</a></div><div class="ttdeci">static constexpr size_t DimW</div><div class="ttdoc">Alias for dimension 3 also known as W dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00049">Window.h:49</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a893d17b56b9abc4423ce26e9a24ac5dc"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a893d17b56b9abc4423ce26e9a24ac5dc">arm_compute::Window::DimZ</a></div><div class="ttdeci">static constexpr size_t DimZ</div><div class="ttdoc">Alias for dimension 2 also known as Z dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00047">Window.h:47</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_aa96e81276ee4f87ab386cd05a5539a7d"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#aa96e81276ee4f87ab386cd05a5539a7d">arm_compute::Window::DimX</a></div><div class="ttdeci">static constexpr size_t DimX</div><div class="ttdoc">Alias for dimension 0 also known as X dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00043">Window.h:43</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ad2d402364fa822b0b7775081291eeca9"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ad2d402364fa822b0b7775081291eeca9">arm_compute::Window::DimY</a></div><div class="ttdeci">static constexpr size_t DimY</div><div class="ttdoc">Alias for dimension 1 also known as Y dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00045">Window.h:45</a></div></div>
<div class="ttc" id="adepthwiseconv2d_2generic_2neon_2impl_8h_xhtml"><div class="ttname"><a href="depthwiseconv2d_2generic_2neon_2impl_8h.xhtml">impl.h</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a0c4b348b45b7517f391ef9f95961d19f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a0c4b348b45b7517f391ef9f95961d19f">arm_compute::cpu::rounding_divide_by_exp2</a></div><div class="ttdeci">int32x4_t rounding_divide_by_exp2(const int32x4_t &amp;x, const int exponent)</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00045">impl.cpp:45</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a2065fcea8e34c2f3ee039d5a0332348b"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a2065fcea8e34c2f3ee039d5a0332348b">arm_compute::cpu::channel_idx</a></div><div class="ttdeci">const size_t channel_idx</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00039">impl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a22c00c0ee5bab5833057b869cfbbf3bd"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a22c00c0ee5bab5833057b869cfbbf3bd">arm_compute::cpu::run_depthwise_quanitized8bit&lt; uint8_t, int8_t &gt;</a></div><div class="ttdeci">template void run_depthwise_quanitized8bit&lt; uint8_t, int8_t &gt;(const ITensor *src, const ITensor *weights, const ITensor *biases, ITensor *dst, const Window &amp;window, bool has_biases, const ConvolutionInfo &amp;info)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a33ac5aaccfb4b36763818ca148b44c6c"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a33ac5aaccfb4b36763818ca148b44c6c">arm_compute::cpu::vector_size</a></div><div class="ttdeci">constexpr size_t vector_size</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00043">impl.h:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5063b10e78012bdbfe34caca8ea26697"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5063b10e78012bdbfe34caca8ea26697">arm_compute::cpu::run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;</a></div><div class="ttdeci">template void run_depthwise_quanitized8bit&lt; int8_t, int8_t &gt;(const ITensor *src, const ITensor *weights, const ITensor *biases, ITensor *dst, const Window &amp;window, bool has_biases, const ConvolutionInfo &amp;info)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a5a2b594dc6c251f07190189c716685ec"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a5a2b594dc6c251f07190189c716685ec">arm_compute::cpu::run_depthwise_quanitized8bit</a></div><div class="ttdeci">void run_depthwise_quanitized8bit(const ITensor *src, const ITensor *weights, const ITensor *biases, ITensor *dst, const Window &amp;window, bool has_biases, const ConvolutionInfo &amp;info)</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00559">impl.cpp:559</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_a7e11bb008b174952651f4a9946adc1a4"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#a7e11bb008b174952651f4a9946adc1a4">arm_compute::cpu::run_depthwise_quanitized8bit&lt; uint8_t, uint8_t &gt;</a></div><div class="ttdeci">template void run_depthwise_quanitized8bit&lt; uint8_t, uint8_t &gt;(const ITensor *src, const ITensor *weights, const ITensor *biases, ITensor *dst, const Window &amp;window, bool has_biases, const ConvolutionInfo &amp;info)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_aa24e71dcbdb8bc6a6f42e5803790b71f"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#aa24e71dcbdb8bc6a6f42e5803790b71f">arm_compute::cpu::saturating_doubling_high_mul</a></div><div class="ttdeci">int32x4_t saturating_doubling_high_mul(const int32x4_t &amp;a, const int32_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8cpp_source.xhtml#l00035">impl.cpp:35</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ab11d49bc60990d21ee07967c219129ae"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ab11d49bc60990d21ee07967c219129ae">arm_compute::cpu::dim_single_unit_step</a></div><div class="ttdeci">constexpr auto dim_single_unit_step</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00042">impl.h:42</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_ac07fe0eb0607dbbd9e369137a01bb860"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#ac07fe0eb0607dbbd9e369137a01bb860">arm_compute::cpu::is_valid_input_region</a></div><div class="ttdeci">bool is_valid_input_region(int32_t base_w, uint32_t base_h, uint32_t w, uint32_t h, const DepthwiseConvolutionRunInfo &amp;run_info, const Size2D &amp;dilation)</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00097">impl.h:97</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1cpu_xhtml_afdf11c92be0cb1099e5fdcf3d5c94055"><div class="ttname"><a href="namespacearm__compute_1_1cpu.xhtml#afdf11c92be0cb1099e5fdcf3d5c94055">arm_compute::cpu::dim_manual_loop</a></div><div class="ttdeci">constexpr auto dim_manual_loop</div><div class="ttdef"><b>Definition:</b> <a href="depthwiseconv2d_2generic_2neon_2impl_8h_source.xhtml#l00041">impl.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_aada9ec2ea42d767854b2b7545ffd310b"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#aada9ec2ea42d767854b2b7545ffd310b">arm_compute::quantization::calculate_quantized_multiplier</a></div><div class="ttdeci">Status calculate_quantized_multiplier(float multiplier, int32_t *quant_multiplier, int32_t *shift, bool ignore_epsilon=false)</div><div class="ttdoc">Calculate quantized representation of multiplier.</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00043">AsymmHelpers.cpp:43</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1support_1_1cpp11_xhtml_a73e352c61baaf9c1178da2d30105b04e"><div class="ttname"><a href="namespacearm__compute_1_1support_1_1cpp11.xhtml#a73e352c61baaf9c1178da2d30105b04e">arm_compute::support::cpp11::lowest</a></div><div class="ttdeci">T lowest()</div><div class="ttdef"><b>Definition:</b> <a href="_toolchain_support_8h_source.xhtml#l00278">ToolchainSupport.h:278</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a0886942393a3ba0dfefaa7516b159784"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a0886942393a3ba0dfefaa7516b159784">arm_compute::test::validation::for</a></div><div class="ttdeci">for(size_t k=0;k&lt; _target.size();++k)</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_unstack_8cpp_source.xhtml#l00091">Unstack.cpp:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1643f4cb252152ed8ffc0df84744ad5d"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1643f4cb252152ed8ffc0df84744ad5d">arm_compute::test::validation::fill</a></div><div class="ttdeci">library fill(src, distribution, 0)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1a367830ae09bf6138df822888ec1d71"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1a367830ae09bf6138df822888ec1d71">arm_compute::test::validation::w</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; w</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00156">DFT.cpp:156</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a70879f7be69f6738d9f76339725c9532"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a70879f7be69f6738d9f76339725c9532">arm_compute::test::validation::src</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; src</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00155">DFT.cpp:155</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_adbf67dcee294e673cf796f1ed8aeb6a4"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#adbf67dcee294e673cf796f1ed8aeb6a4">arm_compute::test::validation::dst</a></div><div class="ttdeci">auto dst</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00170">DFT.cpp:170</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1598e7eb12a58fc53559332cd0c3ab6f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1598e7eb12a58fc53559332cd0c3ab6f">arm_compute::wrapper::vcombine</a></div><div class="ttdeci">uint8x16_t vcombine(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="combine_8h_source.xhtml#l00039">combine.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a1894e825a225f3b2013f594cbffdae73"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a1894e825a225f3b2013f594cbffdae73">arm_compute::wrapper::vadd</a></div><div class="ttdeci">uint8x8_t vadd(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00039">add.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a55bc37be5f14e4c561d3ca93b2a34aa9"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a55bc37be5f14e4c561d3ca93b2a34aa9">arm_compute::wrapper::vqmovn</a></div><div class="ttdeci">uint32x2_t vqmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00052">movn.h:52</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66d15db8e989b58b61603ce73d8696b5"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66d15db8e989b58b61603ce73d8696b5">arm_compute::wrapper::vmlal</a></div><div class="ttdeci">uint16x8_t vmlal(const uint16x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00076">mla.h:76</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a77f54eded7fef436d3a4f21ad5a00da6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a77f54eded7fef436d3a4f21ad5a00da6">arm_compute::wrapper::vloadq</a></div><div class="ttdeci">uint8x16_t vloadq(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00058">load.h:58</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8d1d14000c959f1146a8a64e1dafae5f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8d1d14000c959f1146a8a64e1dafae5f">arm_compute::wrapper::vmax</a></div><div class="ttdeci">uint8x8_t vmax(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="max_8h_source.xhtml#l00039">max.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ab026a1aeec48074092f548c130c323f4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ab026a1aeec48074092f548c130c323f4">arm_compute::wrapper::vmin</a></div><div class="ttdeci">uint8x8_t vmin(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="min_8h_source.xhtml#l00039">min.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_acae4ec59246f93845fa78120d83d7c1e"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#acae4ec59246f93845fa78120d83d7c1e">arm_compute::wrapper::vsub</a></div><div class="ttdeci">uint8x8_t vsub(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2sub_8h_source.xhtml#l00039">sub.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae1a6f6dde14fc3b0470cd0b08041ea9f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">arm_compute::wrapper::vload</a></div><div class="ttdeci">uint8x8_t vload(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00039">load.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae7943ea9c1f74dc72c62d4cc3966a459"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae7943ea9c1f74dc72c62d4cc3966a459">arm_compute::wrapper::vstore</a></div><div class="ttdeci">void vstore(uint8_t *ptr, uint8x8_t val)</div><div class="ttdef"><b>Definition:</b> <a href="store_8h_source.xhtml#l00039">store.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aea0b656edc428c1f7702d86bbb97df6b"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aea0b656edc428c1f7702d86bbb97df6b">arm_compute::wrapper::vmovn</a></div><div class="ttdeci">uint32x2_t vmovn(const uint64x2_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movn_8h_source.xhtml#l00039">movn.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:25</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a6c0dcc38187027dcb89cd9724bc5a823"><div class="ttname"><a href="namespacearm__compute.xhtml#a6c0dcc38187027dcb89cd9724bc5a823">arm_compute::execute_window_loop</a></div><div class="ttdeci">void execute_window_loop(const Window &amp;w, L &amp;&amp;lambda_function, Ts &amp;&amp;...iterators)</div><div class="ttdoc">Iterate through the passed window, automatically adjusting the iterators and calling the lambda_funct...</div><div class="ttdef"><b>Definition:</b> <a href="_helpers_8inl_source.xhtml#l00074">Helpers.inl:74</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a84437d80241f6a31e1a07c231ee8e3ac"><div class="ttname"><a href="namespacearm__compute.xhtml#a84437d80241f6a31e1a07c231ee8e3ac">arm_compute::is_data_type_quantized_per_channel</a></div><div class="ttdeci">bool is_data_type_quantized_per_channel(DataType dt)</div><div class="ttdoc">Check if a given data type is of per channel type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00401">DataTypeUtils.h:401</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_convolution_info_xhtml"><div class="ttname"><a href="structarm__compute_1_1_convolution_info.xhtml">arm_compute::ConvolutionInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="_convolution_info_8h_source.xhtml#l00033">ConvolutionInfo.h:34</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_uniform_quantization_info_xhtml_a97bd6c077f3c7769f575b82988b9b668"><div class="ttname"><a href="structarm__compute_1_1_uniform_quantization_info.xhtml#a97bd6c077f3c7769f575b82988b9b668">arm_compute::UniformQuantizationInfo::offset</a></div><div class="ttdeci">int32_t offset</div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00063">QuantizationInfo.h:63</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1neon__vector_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1neon__vector.xhtml">arm_compute::wrapper::traits::neon_vector</a></div><div class="ttdoc">Create the appropriate SIMD vector given its type and size in terms of elements.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00057">traits.h:57</a></div></div>
<div class="ttc" id="astructarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag_xhtml"><div class="ttname"><a href="structarm__compute_1_1wrapper_1_1traits_1_1vector__128__tag.xhtml">arm_compute::wrapper::traits::vector_128_tag</a></div><div class="ttdoc">128-bit vector tag</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00054">traits.h:54</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_2c61f424fd391396db977702a2beee9a.xhtml">cpu</a></li><li class="navelem"><a class="el" href="dir_1de7bcbbdec2bf3559cb3c688662d4f5.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_6ea70737f7957110aafe418ec507e756.xhtml">depthwiseconv2d</a></li><li class="navelem"><a class="el" href="dir_eaa5e6f503e04e7a59bfa7670ffbd507.xhtml">generic</a></li><li class="navelem"><a class="el" href="dir_977d095e705204645eb5f61ea73ccab0.xhtml">neon</a></li><li class="navelem"><a class="el" href="depthwiseconv2d_2generic_2neon_2impl_8cpp.xhtml">impl.cpp</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:44 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
