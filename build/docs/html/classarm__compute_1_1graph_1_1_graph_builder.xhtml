<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: GraphBuilder Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1graph_1_1_graph_builder.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">GraphBuilder Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> builder class.  
 <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_graph_builder_8h_source.xhtml">GraphBuilder.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aa7b1756a674d54d96df4e02a31169082"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aa7b1756a674d54d96df4e02a31169082">add_const_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;desc, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> accessor=nullptr)</td></tr>
<tr class="memdesc:aa7b1756a674d54d96df4e02a31169082"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a Const node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aa7b1756a674d54d96df4e02a31169082">More...</a><br /></td></tr>
<tr class="separator:aa7b1756a674d54d96df4e02a31169082"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60f996c5c698c7b9cbd82ee414b41d2e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a60f996c5c698c7b9cbd82ee414b41d2e">add_input_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;desc, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> accessor=nullptr)</td></tr>
<tr class="memdesc:a60f996c5c698c7b9cbd82ee414b41d2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an input layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a60f996c5c698c7b9cbd82ee414b41d2e">More...</a><br /></td></tr>
<tr class="separator:a60f996c5c698c7b9cbd82ee414b41d2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0db6223a8a4c44a263fbc5e9ec039e18"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db6223a8a4c44a263fbc5e9ec039e18">add_output_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> accessor=nullptr)</td></tr>
<tr class="memdesc:a0db6223a8a4c44a263fbc5e9ec039e18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an output layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db6223a8a4c44a263fbc5e9ec039e18">More...</a><br /></td></tr>
<tr class="separator:a0db6223a8a4c44a263fbc5e9ec039e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cd4c7258f59e2c5d03ed8ae5849a650"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a5cd4c7258f59e2c5d03ed8ae5849a650">add_activation_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:a5cd4c7258f59e2c5d03ed8ae5849a650"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an activation layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a5cd4c7258f59e2c5d03ed8ae5849a650">More...</a><br /></td></tr>
<tr class="separator:a5cd4c7258f59e2c5d03ed8ae5849a650"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac663bef61cee6df859e8a441a9fa9c0d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac663bef61cee6df859e8a441a9fa9c0d">add_arg_min_max_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> op, unsigned int axis, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> out_data_type=<a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a>, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:ac663bef61cee6df859e8a441a9fa9c0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an activation layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac663bef61cee6df859e8a441a9fa9c0d">More...</a><br /></td></tr>
<tr class="separator:ac663bef61cee6df859e8a441a9fa9c0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09979aca2a60b08c6cdbe6aebb942e53"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a09979aca2a60b08c6cdbe6aebb942e53">add_batch_normalization_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, float epsilon, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> mean_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> var_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> beta_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> gamma_accessor=nullptr)</td></tr>
<tr class="memdesc:a09979aca2a60b08c6cdbe6aebb942e53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a batch normalization layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a09979aca2a60b08c6cdbe6aebb942e53">More...</a><br /></td></tr>
<tr class="separator:a09979aca2a60b08c6cdbe6aebb942e53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e02d090f0b711a7adf97367606e6857"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9e02d090f0b711a7adf97367606e6857">add_bounding_box_transform_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> deltas, <a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a> info)</td></tr>
<tr class="memdesc:a9e02d090f0b711a7adf97367606e6857"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a bounding box transform layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9e02d090f0b711a7adf97367606e6857">More...</a><br /></td></tr>
<tr class="separator:a9e02d090f0b711a7adf97367606e6857"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19b8128b8e78988834c00c4e9cd97c3e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a19b8128b8e78988834c00c4e9cd97c3e">add_channel_shuffle_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, unsigned int num_groups)</td></tr>
<tr class="memdesc:a19b8128b8e78988834c00c4e9cd97c3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an channel shuffle layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a19b8128b8e78988834c00c4e9cd97c3e">More...</a><br /></td></tr>
<tr class="separator:a19b8128b8e78988834c00c4e9cd97c3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbb302ca2e2f509f976568ba0928c2ce"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#afbb302ca2e2f509f976568ba0928c2ce">add_convolution_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> kernel_spatial_extend, unsigned int depth, <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info, unsigned int num_groups=1, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a> method=<a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">ConvolutionMethod::Default</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint=<a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">FastMathHint::Disabled</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> weights_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> bias_accessor=nullptr, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;weights_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(), const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:afbb302ca2e2f509f976568ba0928c2ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a convolution layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#afbb302ca2e2f509f976568ba0928c2ce">More...</a><br /></td></tr>
<tr class="separator:afbb302ca2e2f509f976568ba0928c2ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1735fd3d9b774a2c92ca1619886d2ede"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a1735fd3d9b774a2c92ca1619886d2ede">add_deconvolution_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> kernel_spatial_extend, unsigned int depth, <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> deconv_info, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> weights_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> bias_accessor=nullptr)</td></tr>
<tr class="memdesc:a1735fd3d9b774a2c92ca1619886d2ede"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a deconvolution layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a1735fd3d9b774a2c92ca1619886d2ede">More...</a><br /></td></tr>
<tr class="separator:a1735fd3d9b774a2c92ca1619886d2ede"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a667742f5b5d3574fb50c8180609efac4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a667742f5b5d3574fb50c8180609efac4">add_concatenate_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, const std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt; &amp;inputs, const <a class="el" href="structarm__compute_1_1graph_1_1descriptors_1_1_concat_layer_descriptor.xhtml">descriptors::ConcatLayerDescriptor</a> &amp;concat_descriptor)</td></tr>
<tr class="memdesc:a667742f5b5d3574fb50c8180609efac4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a depth concatenate node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a667742f5b5d3574fb50c8180609efac4">More...</a><br /></td></tr>
<tr class="separator:a667742f5b5d3574fb50c8180609efac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80e3bef3b70c6b443b7e42e68397a5c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae80e3bef3b70c6b443b7e42e68397a5c">add_depth_to_space_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, int32_t block_shape)</td></tr>
<tr class="memdesc:ae80e3bef3b70c6b443b7e42e68397a5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an depth to space layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae80e3bef3b70c6b443b7e42e68397a5c">More...</a><br /></td></tr>
<tr class="separator:ae80e3bef3b70c6b443b7e42e68397a5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c59d071c7e6c2574e1d5587ba50949c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9c59d071c7e6c2574e1d5587ba50949c">add_depthwise_convolution_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a> kernel_spatial_extend, <a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a> conv_info, int depth_multiplier=1, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a> method=<a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">DepthwiseConvolutionMethod::Default</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> weights_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> bias_accessor=nullptr, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(), const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:a9c59d071c7e6c2574e1d5587ba50949c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a depth-wise convolution layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9c59d071c7e6c2574e1d5587ba50949c">More...</a><br /></td></tr>
<tr class="separator:a9c59d071c7e6c2574e1d5587ba50949c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a193c384a821bc30573b13975eccbe58a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a193c384a821bc30573b13975eccbe58a">add_elementwise_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input0, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input1, <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a> operation)</td></tr>
<tr class="memdesc:a193c384a821bc30573b13975eccbe58a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds an element-wise layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a193c384a821bc30573b13975eccbe58a">More...</a><br /></td></tr>
<tr class="separator:a193c384a821bc30573b13975eccbe58a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50410fc54c8540887d600849043327d5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a50410fc54c8540887d600849043327d5">add_dequantization_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input)</td></tr>
<tr class="memdesc:a50410fc54c8540887d600849043327d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a dequantization node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a50410fc54c8540887d600849043327d5">More...</a><br /></td></tr>
<tr class="separator:a50410fc54c8540887d600849043327d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff2fa3e8e802bcefd6fdd5780aa096e1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aff2fa3e8e802bcefd6fdd5780aa096e1">add_detection_output_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_loc, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_conf, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_priorbox, const <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;detect_info)</td></tr>
<tr class="memdesc:aff2fa3e8e802bcefd6fdd5780aa096e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a detection output layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aff2fa3e8e802bcefd6fdd5780aa096e1">More...</a><br /></td></tr>
<tr class="separator:aff2fa3e8e802bcefd6fdd5780aa096e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17fe8b7f4dbd6cf0747ab9d328a56f88"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a17fe8b7f4dbd6cf0747ab9d328a56f88">add_detection_post_process_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_box_encoding, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input_class_prediction, const <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;detect_info, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> anchors_accessor=nullptr, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;anchor_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>())</td></tr>
<tr class="memdesc:a17fe8b7f4dbd6cf0747ab9d328a56f88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a detection post process layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a17fe8b7f4dbd6cf0747ab9d328a56f88">More...</a><br /></td></tr>
<tr class="separator:a17fe8b7f4dbd6cf0747ab9d328a56f88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3484452057c88a68b9242816b50a0687"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3484452057c88a68b9242816b50a0687">add_dummy_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape)</td></tr>
<tr class="memdesc:a3484452057c88a68b9242816b50a0687"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a Dummy node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3484452057c88a68b9242816b50a0687">More...</a><br /></td></tr>
<tr class="separator:a3484452057c88a68b9242816b50a0687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a639fab29a682a532ca20615210b366ad"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a639fab29a682a532ca20615210b366ad">add_flatten_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input)</td></tr>
<tr class="memdesc:a639fab29a682a532ca20615210b366ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a flatten layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a639fab29a682a532ca20615210b366ad">More...</a><br /></td></tr>
<tr class="separator:a639fab29a682a532ca20615210b366ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af65d66a907a0cd5a01a2dc4bd93de984"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af65d66a907a0cd5a01a2dc4bd93de984">add_fully_connected_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, unsigned int num_outputs, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> weights_nid, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> bias_nid=<a class="el" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>, const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> fc_info=<a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>(), const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(), <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint=<a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">FastMathHint::Disabled</a>)</td></tr>
<tr class="memdesc:af65d66a907a0cd5a01a2dc4bd93de984"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a fully connected layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af65d66a907a0cd5a01a2dc4bd93de984">More...</a><br /></td></tr>
<tr class="separator:af65d66a907a0cd5a01a2dc4bd93de984"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae51862b54968049c361aaf37b3795549"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae51862b54968049c361aaf37b3795549">add_fully_connected_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, unsigned int num_outputs, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> weights_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> bias_accessor=nullptr, const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a> fc_info=<a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>(), const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;weights_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(), const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info=<a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>(), <a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a> fast_math_hint=<a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">FastMathHint::Disabled</a>)</td></tr>
<tr class="memdesc:ae51862b54968049c361aaf37b3795549"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a fully connected layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae51862b54968049c361aaf37b3795549">More...</a><br /></td></tr>
<tr class="separator:ae51862b54968049c361aaf37b3795549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8965f4ef424a3b9142706cfe50b7e6cf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a8965f4ef424a3b9142706cfe50b7e6cf">add_generate_proposals_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> scores, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> deltas, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> anchors, <a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a> info)</td></tr>
<tr class="memdesc:a8965f4ef424a3b9142706cfe50b7e6cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a generate proposals layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a8965f4ef424a3b9142706cfe50b7e6cf">More...</a><br /></td></tr>
<tr class="separator:a8965f4ef424a3b9142706cfe50b7e6cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bf51d4ae4adaffc5511b756d27ae069"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6bf51d4ae4adaffc5511b756d27ae069">add_l2_normalize_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, int axis, float epsilon)</td></tr>
<tr class="memdesc:a6bf51d4ae4adaffc5511b756d27ae069"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a L2 Normalize layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6bf51d4ae4adaffc5511b756d27ae069">More...</a><br /></td></tr>
<tr class="separator:a6bf51d4ae4adaffc5511b756d27ae069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a542464b49825a7f82b42909409405010"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a542464b49825a7f82b42909409405010">add_normalization_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a> norm_info)</td></tr>
<tr class="memdesc:a542464b49825a7f82b42909409405010"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a normalization layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a542464b49825a7f82b42909409405010">More...</a><br /></td></tr>
<tr class="separator:a542464b49825a7f82b42909409405010"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bf294b4d12b6430e4e6b6ba8db8273b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a2bf294b4d12b6430e4e6b6ba8db8273b">add_normalize_planar_yuv_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> mean_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> std_accessor=nullptr)</td></tr>
<tr class="memdesc:a2bf294b4d12b6430e4e6b6ba8db8273b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a normalize planar YUV layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a2bf294b4d12b6430e4e6b6ba8db8273b">More...</a><br /></td></tr>
<tr class="separator:a2bf294b4d12b6430e4e6b6ba8db8273b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6ee8c6a5e3b98c697aacf55a251c986"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac6ee8c6a5e3b98c697aacf55a251c986">add_pad_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;paddings, <a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> pad_value=<a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>())</td></tr>
<tr class="memdesc:ac6ee8c6a5e3b98c697aacf55a251c986"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a pad layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ac6ee8c6a5e3b98c697aacf55a251c986">More...</a><br /></td></tr>
<tr class="separator:ac6ee8c6a5e3b98c697aacf55a251c986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0a6a6580be03b445d9dcc64ced5e2ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ad0a6a6580be03b445d9dcc64ced5e2ef">add_permute_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a> perm, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a> layout=<a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a>)</td></tr>
<tr class="memdesc:ad0a6a6580be03b445d9dcc64ced5e2ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a permute layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ad0a6a6580be03b445d9dcc64ced5e2ef">More...</a><br /></td></tr>
<tr class="separator:ad0a6a6580be03b445d9dcc64ced5e2ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab52fa970654d32e0c0621cf718a6861f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab52fa970654d32e0c0621cf718a6861f">add_pooling_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a> pool_info)</td></tr>
<tr class="memdesc:ab52fa970654d32e0c0621cf718a6861f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a pooling layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab52fa970654d32e0c0621cf718a6861f">More...</a><br /></td></tr>
<tr class="separator:ab52fa970654d32e0c0621cf718a6861f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a613c0d9db4a80d400c8dc220648d337e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a613c0d9db4a80d400c8dc220648d337e">add_prelu_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> alpha)</td></tr>
<tr class="memdesc:a613c0d9db4a80d400c8dc220648d337e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a prelu layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a613c0d9db4a80d400c8dc220648d337e">More...</a><br /></td></tr>
<tr class="separator:a613c0d9db4a80d400c8dc220648d337e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69a669c24a8f0db98f3f980e161ab890"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a69a669c24a8f0db98f3f980e161ab890">add_print_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, std::ostream &amp;stream, const <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> &amp;format_info=<a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>(), const std::function&lt; <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *(<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *)&gt; transform=nullptr)</td></tr>
<tr class="memdesc:a69a669c24a8f0db98f3f980e161ab890"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a print layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a69a669c24a8f0db98f3f980e161ab890">More...</a><br /></td></tr>
<tr class="separator:a69a669c24a8f0db98f3f980e161ab890"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc61dbaf7ce5612ac8d1566c1c222e3"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6dc61dbaf7ce5612ac8d1566c1c222e3">add_priorbox_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input0, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input1, const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;prior_info)</td></tr>
<tr class="memdesc:a6dc61dbaf7ce5612ac8d1566c1c222e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a priorbox layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a6dc61dbaf7ce5612ac8d1566c1c222e3">More...</a><br /></td></tr>
<tr class="separator:a6dc61dbaf7ce5612ac8d1566c1c222e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44fe1be81ac7e5aadbc73f05bb95aae1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a44fe1be81ac7e5aadbc73f05bb95aae1">add_quantization_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;out_quant_info)</td></tr>
<tr class="memdesc:a44fe1be81ac7e5aadbc73f05bb95aae1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a quantization layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a44fe1be81ac7e5aadbc73f05bb95aae1">More...</a><br /></td></tr>
<tr class="separator:a44fe1be81ac7e5aadbc73f05bb95aae1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3494a111bde4adf09b7bcb3648981e9f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3494a111bde4adf09b7bcb3648981e9f">add_reduction_operation_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a> op, int axis, bool keep_dims=true)</td></tr>
<tr class="memdesc:a3494a111bde4adf09b7bcb3648981e9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a reduction sum layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a3494a111bde4adf09b7bcb3648981e9f">More...</a><br /></td></tr>
<tr class="separator:a3494a111bde4adf09b7bcb3648981e9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d0c83a96ca66565407885ff41214665"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9d0c83a96ca66565407885ff41214665">add_reorg_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, int stride)</td></tr>
<tr class="memdesc:a9d0c83a96ca66565407885ff41214665"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a reorg layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a9d0c83a96ca66565407885ff41214665">More...</a><br /></td></tr>
<tr class="separator:a9d0c83a96ca66565407885ff41214665"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96b9a9be8e6bc94f1a245d9625c5b596"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a96b9a9be8e6bc94f1a245d9625c5b596">add_reshape_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> shape)</td></tr>
<tr class="memdesc:a96b9a9be8e6bc94f1a245d9625c5b596"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a reshape layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a96b9a9be8e6bc94f1a245d9625c5b596">More...</a><br /></td></tr>
<tr class="separator:a96b9a9be8e6bc94f1a245d9625c5b596"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e6a956431d508ac913a77cf1f9eaa69"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a4e6a956431d508ac913a77cf1f9eaa69">add_resize_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a> policy, float width_scale, float height_scale)</td></tr>
<tr class="memdesc:a4e6a956431d508ac913a77cf1f9eaa69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a resize layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a4e6a956431d508ac913a77cf1f9eaa69">More...</a><br /></td></tr>
<tr class="separator:a4e6a956431d508ac913a77cf1f9eaa69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeebbfe02ab3fe0320a82d6c3413eeeb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aeeebbfe02ab3fe0320a82d6c3413eeeb">add_roi_align_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> rois, <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a> pool_info)</td></tr>
<tr class="memdesc:aeeebbfe02ab3fe0320a82d6c3413eeeb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a ROI align layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#aeeebbfe02ab3fe0320a82d6c3413eeeb">More...</a><br /></td></tr>
<tr class="separator:aeeebbfe02ab3fe0320a82d6c3413eeeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7396e101536756a6aaf05f043a6f0b13"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a7396e101536756a6aaf05f043a6f0b13">add_scale_layer</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, const <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> &amp;params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> mul_accessor=nullptr, <a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a> add_accessor=nullptr)</td></tr>
<tr class="memdesc:a7396e101536756a6aaf05f043a6f0b13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a scale layer node to the graph This layer computes a product of the input with a scale (read from mul_accessor) and it applies an offset (read from add_accessor).  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a7396e101536756a6aaf05f043a6f0b13">More...</a><br /></td></tr>
<tr class="separator:a7396e101536756a6aaf05f043a6f0b13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af06fa4df1027c97658c0c26570b2bdb5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af06fa4df1027c97658c0c26570b2bdb5">add_softmax_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, float beta=1.f)</td></tr>
<tr class="memdesc:af06fa4df1027c97658c0c26570b2bdb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a softmax node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#af06fa4df1027c97658c0c26570b2bdb5">More...</a><br /></td></tr>
<tr class="separator:af06fa4df1027c97658c0c26570b2bdb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a819d4ebfd6c79e430f7dc0a5e5241203"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a819d4ebfd6c79e430f7dc0a5e5241203">add_slice_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends)</td></tr>
<tr class="memdesc:a819d4ebfd6c79e430f7dc0a5e5241203"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a slice node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a819d4ebfd6c79e430f7dc0a5e5241203">More...</a><br /></td></tr>
<tr class="separator:a819d4ebfd6c79e430f7dc0a5e5241203"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0df296d05af531f77715dfeaf27f48cd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0df296d05af531f77715dfeaf27f48cd">add_split_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, unsigned int num_splits, unsigned int axis=0)</td></tr>
<tr class="memdesc:a0df296d05af531f77715dfeaf27f48cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a split node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0df296d05af531f77715dfeaf27f48cd">More...</a><br /></td></tr>
<tr class="separator:a0df296d05af531f77715dfeaf27f48cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0a382c6800d4ebe51ba9ced8841e2b5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae0a382c6800d4ebe51ba9ced8841e2b5">add_stack_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, const std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt; &amp;inputs, int axis)</td></tr>
<tr class="memdesc:ae0a382c6800d4ebe51ba9ced8841e2b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a stack layer node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ae0a382c6800d4ebe51ba9ced8841e2b5">More...</a><br /></td></tr>
<tr class="separator:ae0a382c6800d4ebe51ba9ced8841e2b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab37711b90876e57bfcade525e3233c4d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab37711b90876e57bfcade525e3233c4d">add_strided_slice_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;starts, <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;ends, <a class="el" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a> &amp;strides, <a class="el" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a> info)</td></tr>
<tr class="memdesc:ab37711b90876e57bfcade525e3233c4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a strided slice node to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#ab37711b90876e57bfcade525e3233c4d">More...</a><br /></td></tr>
<tr class="separator:ab37711b90876e57bfcade525e3233c4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0db084ff8c5adc5876cffecd617b9118"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db084ff8c5adc5876cffecd617b9118">add_yolo_node</a> (<a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;g, <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> params, <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> input, <a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a> act_info)</td></tr>
<tr class="memdesc:a0db084ff8c5adc5876cffecd617b9118"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a yolo layer to the graph.  <a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a0db084ff8c5adc5876cffecd617b9118">More...</a><br /></td></tr>
<tr class="separator:a0db084ff8c5adc5876cffecd617b9118"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> builder class. </p>
<p>Builds and compiles a graph </p>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8h_source.xhtml#l00042">42</a> of file <a class="el" href="_graph_builder_8h_source.xhtml">GraphBuilder.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a5cd4c7258f59e2c5d03ed8ae5849a650"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cd4c7258f59e2c5d03ed8ae5849a650">&#9670;&nbsp;</a></span>add_activation_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_activation_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an activation layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the activation layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">act_info</td><td>Activation layer information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_quant_info</td><td>(Optional) Output quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;ActivationLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>, out_quant_info);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a1f8aca235c095df227e7444f6b237eb1"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">arm_compute::test::validation::act_info</a></div><div class="ttdeci">act_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a8fcf2ddd9a1d58b1b280f5c0aed71845"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">arm_compute::test::validation::input</a></div><div class="ttdeci">auto input</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">LSTMLayerQuantized.cpp:486</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00131">ActivationLayer::create_layer()</a>.</p>

</div>
</div>
<a id="ac663bef61cee6df859e8a441a9fa9c0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac663bef61cee6df859e8a441a9fa9c0d">&#9670;&nbsp;</a></span>add_arg_min_max_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_arg_min_max_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>out_data_type</em> = <code><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a696b031073e74bf2cb98e5ef201d4aa3">DataType::UNKNOWN</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an activation layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the activation layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Reduction Operation: min or max </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis to perform reduction operation across </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_data_type</td><td>(Optional) Output data type </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_quant_info</td><td>(Optional) Output quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;ArgMinMaxLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, op, axis, out_data_type,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                                                      out_quant_info);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00169">ArgMinMaxLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a09979aca2a60b08c6cdbe6aebb942e53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09979aca2a60b08c6cdbe6aebb942e53">&#9670;&nbsp;</a></span>add_batch_normalization_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_batch_normalization_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>mean_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>var_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>beta_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>gamma_accessor</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a batch normalization layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the batch normalization layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">epsilon</td><td>Epsilon parameter </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mean_accessor</td><td>Const Node ID that contains the mean values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">var_accessor</td><td>Const Node ID that contains the variance values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta_accessor</td><td>Const Node ID that contains the beta values. Can be EmptyNodeID </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">gamma_accessor</td><td>Const Node ID that contains the gamma values. Can be EmptyNodeID</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;{</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">bool</span> has_beta  = (beta_accessor != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">bool</span> has_gamma = (gamma_accessor != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Calculate Common Descriptor</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    TensorDescriptor common_desc = input_tensor_desc;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    common_desc.shape            = TensorShape(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(input_tensor_desc, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>));</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="comment">// Create mean and var nodes</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">auto</span> mean_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Mean&quot;</span>, common_desc, std::move(mean_accessor));</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">auto</span> var_nid  = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Variance&quot;</span>, common_desc, std::move(var_accessor));</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Create beta node</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> beta_nid = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">if</span> (has_beta)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        beta_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Beta&quot;</span>, common_desc, std::move(beta_accessor));</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    }</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// Create gamma node</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> gamma_nid = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span> (has_gamma)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        gamma_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Gamma&quot;</span>, common_desc, std::move(gamma_accessor));</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Create batch normalization node and add connections</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> batch_norm_nid = g.add_node&lt;BatchNormalizationLayerNode&gt;(<a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, batch_norm_nid, 0);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    g.add_connection(mean_nid, 0, batch_norm_nid, 1);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    g.add_connection(var_nid, 0, batch_norm_nid, 2);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> (has_beta)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        g.add_connection(beta_nid, 0, batch_norm_nid, 3);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (has_gamma)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        g.add_connection(gamma_nid, 0, batch_norm_nid, 4);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    set_node_params(g, batch_norm_nid, params);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> batch_norm_nid;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a56952a8591a9d8481450ae707ae355e7"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">arm_compute::graph::NodeID</a></div><div class="ttdeci">unsigned int NodeID</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00072">Types.h:72</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a75f8e464c6b01b0a4771de38669ee9a1"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">arm_compute::graph::get_dimension_size</a></div><div class="ttdeci">size_t get_dimension_size(const TensorDescriptor &amp;descriptor, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get size of a tensor's given dimension depending on its layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00143">Utils.cpp:143</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aad3f5296ec88b9d552c109b04b89ad9f"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">arm_compute::graph::EmptyNodeID</a></div><div class="ttdeci">constexpr NodeID EmptyNodeID</div><div class="ttdoc">Constant EdgeID specifying an equivalent of null edge.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_ade2275ecfd6f344e3ec7086427863aa8"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">arm_compute::graph::get_tensor_descriptor</a></div><div class="ttdeci">TensorDescriptor get_tensor_descriptor(const Graph &amp;g, TensorID tid)</div><div class="ttdoc">Returns the tensor descriptor of a given tensor.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">Utils.h:50</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1quantization_xhtml_a552dc3787d7ea1675f3e4e8993501d58"><div class="ttname"><a href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">arm_compute::quantization::epsilon</a></div><div class="ttdeci">constexpr float epsilon</div><div class="ttdef"><b>Definition:</b> <a href="_asymm_helpers_8cpp_source.xhtml#l00041">AsymmHelpers.cpp:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::DataLayoutDimension::CHANNEL</a></div><div class="ttdeci">@ CHANNEL</div><div class="ttdoc">channel</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00079">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00143">arm_compute::graph::get_dimension_size()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, and <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00209">BatchNormalizationLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a9e02d090f0b711a7adf97367606e6857"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e02d090f0b711a7adf97367606e6857">&#9670;&nbsp;</a></span>add_bounding_box_transform_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_bounding_box_transform_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_bounding_box_transform_info.xhtml">BoundingBoxTransformInfo</a>&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a bounding box transform layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the bounding box transform layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">deltas</td><td>Deltas input to the bounding box transform layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Bounding Box Transform information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00222">222</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    check_nodeidx_pair(deltas, g);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid = g.add_node&lt;BoundingBoxTransformLayerNode&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, nid, 0);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    g.add_connection(deltas.node_id, deltas.index, nid, 1);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    set_node_params(g, nid, params);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00251">BoundingBoxTransformLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a19b8128b8e78988834c00c4e9cd97c3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19b8128b8e78988834c00c4e9cd97c3e">&#9670;&nbsp;</a></span>add_channel_shuffle_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_channel_shuffle_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_groups</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an channel shuffle layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the activation layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_groups</td><td>Number of groups</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00237">237</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;ChannelShuffleLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a2270b3e1d20651d2d8341c858c890830"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">arm_compute::test::validation::num_groups</a></div><div class="ttdeci">const unsigned int num_groups</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">Im2Col.cpp:153</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">arm_compute::test::validation::num_groups</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00277">ChannelShuffleLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a667742f5b5d3574fb50c8180609efac4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a667742f5b5d3574fb50c8180609efac4">&#9670;&nbsp;</a></span>add_concatenate_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_concatenate_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1graph_1_1descriptors_1_1_concat_layer_descriptor.xhtml">descriptors::ConcatLayerDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>concat_descriptor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a depth concatenate node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputs</td><td>Inputs to the concatenate layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">concat_descriptor</td><td>Concatenation layer descriptor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00361">361</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;{</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">return</span> create_simple_multiple_input_single_output_node&lt;ConcatenateLayerNode&gt;(g, params, inputs, inputs.size(),</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                                                                                 concat_descriptor);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00339">ConcatLayer::create_layer()</a>.</p>

</div>
</div>
<a id="aa7b1756a674d54d96df4e02a31169082"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7b1756a674d54d96df4e02a31169082">&#9670;&nbsp;</a></span>add_const_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_const_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>accessor</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a Const node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">desc</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> descriptor of the node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">accessor</td><td>(Optional) Accessor of the const node data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00115">115</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keyword">auto</span> nid = g.add_node&lt;ConstNode&gt;(desc);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    set_node_params(g, nid, params);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    set_accessor_on_node(g, nid, <span class="keyword">true</span>, 0, std::move(accessor));</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00080">ConstantLayer::create_layer()</a>.</p>

</div>
</div>
<a id="afbb302ca2e2f509f976568ba0928c2ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbb302ca2e2f509f976568ba0928c2ce">&#9670;&nbsp;</a></span>add_convolution_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_convolution_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>&#160;</td>
          <td class="paramname"><em>kernel_spatial_extend</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_groups</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517d">ConvolutionMethod</a>&#160;</td>
          <td class="paramname"><em>method</em> = <code><a class="el" href="namespacearm__compute_1_1graph.xhtml#a683661ae75dcb7aef16b9c9bde31517da7a1920d61156abc05a60135aefe8bc67">ConvolutionMethod::Default</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a>&#160;</td>
          <td class="paramname"><em>fast_math_hint</em> = <code><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">FastMathHint::Disabled</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>weights_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>bias_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a convolution layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the convolution layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_spatial_extend</td><td>Spatial extend of convolution kernels </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depth</td><td>Number of convolution kernels </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Convolution layer information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_groups</td><td>(Optional) Number of groups for a grouped convolution. Defaults to 1 </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">method</td><td>(Optional) Convolution method to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fast_math_hint</td><td>(Optional) Fast math hint </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_accessor</td><td>(Optional) Accessor of the weights node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias_accessor</td><td>(Optional) Accessor of the bias node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_quant_info</td><td>(Optional) Weights quantization info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_quant_info</td><td>(Optional) Output quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00242">242</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(depth == 0);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((kernel_spatial_extend.width == 0) || (kernel_spatial_extend.height == 0));</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160; </div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a> = (bias_accessor != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>       input_data_layout = input_tensor_desc.layout;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160; </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// Create weights node</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    TensorDescriptor w_desc = input_tensor_desc;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>), kernel_spatial_extend.width);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>), kernel_spatial_extend.height);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>),</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                     <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(input_tensor_desc, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>) / <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">DataLayoutDimension::BATCHES</a>), depth);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">if</span> (!weights_quant_info.empty())</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        w_desc.quant_info = weights_quant_info;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160; </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> w_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Weights&quot;</span>, w_desc, std::move(weights_accessor));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="comment">// Create bias nodes</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> b_nid = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        TensorDescriptor b_desc = input_tensor_desc;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        b_desc.shape            = TensorShape(depth);</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(input_tensor_desc.data_type))</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            b_desc.data_type = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        b_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Bias&quot;</span>, b_desc, std::move(bias_accessor));</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">// Create convolution node and connect</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> conv_nid = g.add_node&lt;ConvolutionLayerNode&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a2270b3e1d20651d2d8341c858c890830">num_groups</a>, method, fast_math_hint, out_quant_info);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, conv_nid, 0);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    g.add_connection(w_nid, 0, conv_nid, 1);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        g.add_connection(b_nid, 0, conv_nid, 2);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    set_node_params(g, conv_nid, params);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> conv_nid;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_a1df15aed3ed531f442ecea2a131d65a4"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">arm_compute::graph::get_dimension_idx</a></div><div class="ttdeci">size_t get_dimension_idx(DataLayout data_layout, const DataLayoutDimension data_layout_dimension)</div><div class="ttdoc">Get index of a tensor's given dimension depending on its layout.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2_utils_8cpp_source.xhtml#l00150">Utils.cpp:150</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a00525ff582f16038a1d3819aa44a23a3"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">arm_compute::test::validation::conv_info</a></div><div class="ttdeci">conv_info</div><div class="ttdef"><b>Definition:</b> <a href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">DirectConvolutionLayer.cpp:547</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a9aeced5a5128f60a31ea3e327a45ee21"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">arm_compute::test::validation::has_bias</a></div><div class="ttdeci">const bool has_bias</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">Im2Col.cpp:152</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a14f46283f316e7f0fad301d5c1507e9f"><div class="ttname"><a href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">arm_compute::is_data_type_quantized_asymmetric</a></div><div class="ttdeci">bool is_data_type_quantized_asymmetric(DataType dt)</div><div class="ttdoc">Check if a given data type is of asymmetric quantized type.</div><div class="ttdef"><b>Definition:</b> <a href="_data_type_utils_8h_source.xhtml#l00346">DataTypeUtils.h:346</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::DataLayoutDimension::WIDTH</a></div><div class="ttdeci">@ WIDTH</div><div class="ttdoc">width</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::DataLayoutDimension::BATCHES</a></div><div class="ttdeci">@ BATCHES</div><div class="ttdoc">batches</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6"><div class="ttname"><a href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::DataLayoutDimension::HEIGHT</a></div><div class="ttdeci">@ HEIGHT</div><div class="ttdoc">height</div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">arm_compute::DataLayout</a></div><div class="ttdeci">DataLayout</div><div class="ttdoc">[DataLayout enum definition]</div><div class="ttdef"><b>Definition:</b> <a href="_core_types_8h_source.xhtml#l00110">CoreTypes.h:111</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::DataType::S32</a></div><div class="ttdeci">@ S32</div><div class="ttdoc">signed 32-bit number</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::BATCHES</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00114">TensorDescriptor::data_type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00132">QuantizationInfo::empty()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00079">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00150">arm_compute::graph::get_dimension_idx()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00143">arm_compute::graph::get_dimension_size()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00115">TensorDescriptor::layout</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00153">arm_compute::test::validation::num_groups</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00116">TensorDescriptor::quant_info</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::shape</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00409">ConvolutionLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a1735fd3d9b774a2c92ca1619886d2ede"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1735fd3d9b774a2c92ca1619886d2ede">&#9670;&nbsp;</a></span>add_deconvolution_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_deconvolution_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>&#160;</td>
          <td class="paramname"><em>kernel_spatial_extend</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td>
          <td class="paramname"><em>deconv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>weights_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>bias_accessor</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a deconvolution layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the convolution layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_spatial_extend</td><td>Spatial extend of convolution kernels </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depth</td><td>Number of convolution kernels </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">deconv_info</td><td>Convolution layer information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_accessor</td><td>(Optional) Accessor of the weights node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias_accessor</td><td>(Optional) Accessor of the bias node data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00306">306</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(depth == 0);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((kernel_spatial_extend.width == 0) || (kernel_spatial_extend.height == 0));</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a> = (bias_accessor != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>       input_data_layout = input_tensor_desc.layout;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// Create weights node</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    TensorDescriptor w_desc = input_tensor_desc;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>), kernel_spatial_extend.width);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>), kernel_spatial_extend.height);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>),</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                     <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(input_tensor_desc, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>));</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">DataLayoutDimension::BATCHES</a>), depth);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> w_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Weights&quot;</span>, w_desc, std::move(weights_accessor));</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="comment">// Create bias nodes</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> b_nid = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        TensorDescriptor b_desc = input_tensor_desc;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        b_desc.shape            = TensorShape(depth);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(input_tensor_desc.data_type))</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            b_desc.data_type = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        b_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Bias&quot;</span>, b_desc, std::move(bias_accessor));</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="comment">// Create convolution node and connect</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> deconv_nid = g.add_node&lt;DeconvolutionLayerNode&gt;(descriptors::DeconvolutionLayerDescriptor{deconv_info});</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, deconv_nid, 0);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    g.add_connection(w_nid, 0, deconv_nid, 1);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        g.add_connection(b_nid, 0, deconv_nid, 2);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    set_node_params(g, deconv_nid, params);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> deconv_nid;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a628bcf7e10fc1c2a984f379a1ec3393a">arm_compute::BATCHES</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00114">TensorDescriptor::data_type</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00079">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00150">arm_compute::graph::get_dimension_idx()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00143">arm_compute::graph::get_dimension_size()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00115">TensorDescriptor::layout</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::shape</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00459">DeconvolutionLayer::create_layer()</a>.</p>

</div>
</div>
<a id="ae80e3bef3b70c6b443b7e42e68397a5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae80e3bef3b70c6b443b7e42e68397a5c">&#9670;&nbsp;</a></span>add_depth_to_space_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_depth_to_space_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int32_t&#160;</td>
          <td class="paramname"><em>block_shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an depth to space layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the depth to space layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">block_shape</td><td>Block shape to reshape tensor with</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00433">433</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;{</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;DepthToSpaceLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, block_shape);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00543">DepthToSpaceLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a9c59d071c7e6c2574e1d5587ba50949c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c59d071c7e6c2574e1d5587ba50949c">&#9670;&nbsp;</a></span>add_depthwise_convolution_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_depthwise_convolution_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_size2_d.xhtml">Size2D</a>&#160;</td>
          <td class="paramname"><em>kernel_spatial_extend</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml">PadStrideInfo</a>&#160;</td>
          <td class="paramname"><em>conv_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth_multiplier</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821f">DepthwiseConvolutionMethod</a>&#160;</td>
          <td class="paramname"><em>method</em> = <code><a class="el" href="namespacearm__compute_1_1graph.xhtml#a75ce9b1baad4303a53124d6f0795821fa7a1920d61156abc05a60135aefe8bc67">DepthwiseConvolutionMethod::Default</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>weights_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>bias_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a depth-wise convolution layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the depthwise convolution layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">kernel_spatial_extend</td><td>Spatial extend of convolution kernels </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">conv_info</td><td>Convolution layer information </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">depth_multiplier</td><td>(Optional) Depth multiplier parameter. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">method</td><td>(Optional) Convolution method to use </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_accessor</td><td>(Optional) Accessor of the weights node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias_accessor</td><td>(Optional) Accessor of the bias node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">quant_info</td><td>(Optional) Weights quantization info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_quant_info</td><td>(Optional) Output quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00370">370</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;{</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>((kernel_spatial_extend.width == 0) || (kernel_spatial_extend.height == 0));</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a> = (bias_accessor != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>       input_data_layout = input_tensor_desc.layout;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Create weights node</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    TensorDescriptor w_desc = input_tensor_desc;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>), kernel_spatial_extend.width);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>), kernel_spatial_extend.height);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    w_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>),</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                     <a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(input_tensor_desc, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>) * depth_multiplier);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">if</span> (!quant_info.empty())</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        w_desc.quant_info = quant_info;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> w_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Weights&quot;</span>, w_desc, std::move(weights_accessor));</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="comment">// Create bias nodes</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> b_nid = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        TensorDescriptor b_desc = input_tensor_desc;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        b_desc.shape =</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            TensorShape(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(input_tensor_desc, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>) * depth_multiplier);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(b_desc.data_type))</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            b_desc.data_type = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160; </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        b_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Bias&quot;</span>, b_desc, std::move(bias_accessor));</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="comment">// Create convolution node and connect</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> conv_nid = g.add_node&lt;DepthwiseConvolutionLayerNode&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a00525ff582f16038a1d3819aa44a23a3">conv_info</a>, depth_multiplier, method, out_quant_info);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, conv_nid, 0);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    g.add_connection(w_nid, 0, conv_nid, 1);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        g.add_connection(b_nid, 0, conv_nid, 2);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    set_node_params(g, conv_nid, params);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">return</span> conv_nid;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::conv_info</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00114">TensorDescriptor::data_type</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00132">QuantizationInfo::empty()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00079">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00150">arm_compute::graph::get_dimension_idx()</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00143">arm_compute::graph::get_dimension_size()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="_size2_d_8h_source.xhtml#l00089">Size2D::height</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00115">TensorDescriptor::layout</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00116">TensorDescriptor::quant_info</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::shape</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>, and <a class="el" href="_size2_d_8h_source.xhtml#l00088">Size2D::width</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00510">DepthwiseConvolutionLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a50410fc54c8540887d600849043327d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50410fc54c8540887d600849043327d5">&#9670;&nbsp;</a></span>add_dequantization_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_dequantization_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a dequantization node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the dequantization node as a NodeID-Index pair</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00438">438</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;DequantizationLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00565">DequantizationLayer::create_layer()</a>.</p>

</div>
</div>
<a id="aff2fa3e8e802bcefd6fdd5780aa096e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff2fa3e8e802bcefd6fdd5780aa096e1">&#9670;&nbsp;</a></span>add_detection_output_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_detection_output_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input_loc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input_conf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input_priorbox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_detection_output_layer_info.xhtml">DetectionOutputLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detect_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a detection output layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_loc</td><td>Location input to the detection output layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_conf</td><td>Confidence input to the detection output layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_priorbox</td><td>PriorBox input to the detection output layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">detect_info</td><td>Detection output layer parameters</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00443">443</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;{</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    check_nodeidx_pair(input_loc, g);</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    check_nodeidx_pair(input_conf, g);</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    check_nodeidx_pair(input_priorbox, g);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="comment">// Create detection_output node and connect</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> detect_nid = g.add_node&lt;DetectionOutputLayerNode&gt;(detect_info);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    g.add_connection(input_loc.node_id, input_loc.index, detect_nid, 0);</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    g.add_connection(input_conf.node_id, input_conf.index, detect_nid, 1);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    g.add_connection(input_priorbox.node_id, input_priorbox.index, detect_nid, 2);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    set_node_params(g, detect_nid, params);</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">return</span> detect_nid;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00590">DetectionOutputLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a17fe8b7f4dbd6cf0747ab9d328a56f88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17fe8b7f4dbd6cf0747ab9d328a56f88">&#9670;&nbsp;</a></span>add_detection_post_process_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_detection_post_process_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input_box_encoding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input_class_prediction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>detect_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>anchors_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>anchor_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a detection post process layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_box_encoding</td><td>Boxes input to the detection output layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_class_prediction</td><td>Class prediction input to the detection output layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">detect_info</td><td>Detection output layer parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">anchors_accessor</td><td>(Optional) Const Node ID that contains the anchor values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">anchor_quant_info</td><td>(Optional) Anchor quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00465">465</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;{</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    check_nodeidx_pair(input_box_encoding, g);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    check_nodeidx_pair(input_class_prediction, g);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_box_encoding_tensor_desc =</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(input_box_encoding.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160; </div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="comment">// Calculate anchor descriptor</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    TensorDescriptor anchor_desc = input_box_encoding_tensor_desc;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordflow">if</span> (!anchor_quant_info.empty())</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        anchor_desc.quant_info = anchor_quant_info;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    }</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="comment">// Create anchors nodes</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keyword">auto</span> anchors_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Anchors&quot;</span>, anchor_desc, std::move(anchors_accessor));</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="comment">// Create detection_output node and connect</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> detect_nid = g.add_node&lt;DetectionPostProcessLayerNode&gt;(detect_info);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    g.add_connection(input_box_encoding.node_id, input_box_encoding.index, detect_nid, 0);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    g.add_connection(input_class_prediction.node_id, input_class_prediction.index, detect_nid, 1);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    g.add_connection(anchors_nid, 0, detect_nid, 2);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160; </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    set_node_params(g, detect_nid, params);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160; </div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keywordflow">return</span> detect_nid;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00132">QuantizationInfo::empty()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, and <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00116">TensorDescriptor::quant_info</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00627">DetectionPostProcessLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a3484452057c88a68b9242816b50a0687"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3484452057c88a68b9242816b50a0687">&#9670;&nbsp;</a></span>add_dummy_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_dummy_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a Dummy node to the graph. </p>
<dl class="section note"><dt>Note</dt><dd>this node if for debugging purposes. Just alters the shape of the graph pipeline as requested.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the dummy node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Output shape</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00501">501</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;{</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;DummyNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;}</div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00114">DFT.cpp:115</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00657">DummyLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a193c384a821bc30573b13975eccbe58a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a193c384a821bc30573b13975eccbe58a">&#9670;&nbsp;</a></span>add_elementwise_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_elementwise_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4">EltwiseOperation</a>&#160;</td>
          <td class="paramname"><em>operation</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an element-wise layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input0</td><td>First input to the element-wise operation layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input1</td><td>Second input to the element-wise operation layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">operation</td><td>Element-wise operation to perform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00506">506</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;{</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    check_nodeidx_pair(input0, g);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    check_nodeidx_pair(input1, g);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160; </div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid = g.add_node&lt;EltwiseLayerNode&gt;(descriptors::EltwiseLayerDescriptor{operation});</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160; </div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    g.add_connection(input0.node_id, input0.index, nid, 0);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    g.add_connection(input1.node_id, input1.index, nid, 1);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    set_node_params(g, nid, params);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160; </div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_graph_builder_8cpp_source.xhtml#l00771">GraphBuilder::add_scale_layer()</a>, and <a class="el" href="_layers_8h_source.xhtml#l00682">EltwiseLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a639fab29a682a532ca20615210b366ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a639fab29a682a532ca20615210b366ad">&#9670;&nbsp;</a></span>add_flatten_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_flatten_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a flatten layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the flatten layer node as a NodeID-Index pair</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00522">522</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;{</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;FlattenLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00705">FlattenLayer::create_layer()</a>.</p>

</div>
</div>
<a id="ae51862b54968049c361aaf37b3795549"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae51862b54968049c361aaf37b3795549">&#9670;&nbsp;</a></span>add_fully_connected_layer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_fully_connected_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>weights_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>bias_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>&#160;</td>
          <td class="paramname"><em>fc_info</em> = <code><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>weights_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a>&#160;</td>
          <td class="paramname"><em>fast_math_hint</em> = <code><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">FastMathHint::Disabled</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a fully connected layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the layer to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the fully connected layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_outputs</td><td>Number of output neurons </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_accessor</td><td>(Optional) Accessor of the weights node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias_accessor</td><td>(Optional) Accessor of the bias node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fc_info</td><td>(Optional) Fully connected layer metadata </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_quant_info</td><td>(Optional) Weights quantization info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_quant_info</td><td>(Optional) Output quantization info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fast_math_hint</td><td>(Optional) Fast math hint</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00560">560</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;{</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_outputs == 0);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160; </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a> = (bias_accessor != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160; </div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160; </div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="comment">// Create weights node</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    TensorDescriptor w_desc = <a class="code" href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#a52400aeb76f277dca0ad7df201c7a196">FullyConnectedLayerNode::compute_weights_descriptor</a>(input_tensor_desc, num_outputs,</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                                                                  fc_info, weights_quant_info);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>           w_nid  = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Weights&quot;</span>, w_desc, std::move(weights_accessor));</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="comment">// Create bias nodes</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> b_nid = <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    {</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        TensorDescriptor b_desc = input_tensor_desc;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        b_desc.shape            = TensorShape(num_outputs);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute.xhtml#a14f46283f316e7f0fad301d5c1507e9f">is_data_type_quantized_asymmetric</a>(input_tensor_desc.data_type))</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            b_desc.data_type = <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        }</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        b_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Bias&quot;</span>, b_desc, std::move(bias_accessor));</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    }</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160; </div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="comment">// Create fully connected node and connect</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fc_nid = g.add_node&lt;FullyConnectedLayerNode&gt;(num_outputs, out_quant_info, fc_info, fast_math_hint);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, fc_nid, 0);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    g.add_connection(w_nid, 0, fc_nid, 1);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        g.add_connection(b_nid, 0, fc_nid, 2);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    set_node_params(g, fc_nid, params);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160; </div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> fc_nid;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_fully_connected_layer_node_xhtml_a52400aeb76f277dca0ad7df201c7a196"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_fully_connected_layer_node.xhtml#a52400aeb76f277dca0ad7df201c7a196">arm_compute::graph::FullyConnectedLayerNode::compute_weights_descriptor</a></div><div class="ttdeci">static TensorDescriptor compute_weights_descriptor(const TensorDescriptor &amp;input_descriptor, unsigned int num_outputs, FullyConnectedLayerInfo fc_info=FullyConnectedLayerInfo(), const QuantizationInfo &amp;weights_quant_info=QuantizationInfo())</div><div class="ttdoc">Computes weights descriptor.</div><div class="ttdef"><b>Definition:</b> <a href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00060">FullyConnectedLayer.cpp:60</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="src_2graph_2nodes_2_fully_connected_layer_8cpp_source.xhtml#l00060">FullyConnectedLayerNode::compute_weights_descriptor()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00114">TensorDescriptor::data_type</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00079">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_data_type_utils_8h_source.xhtml#l00346">arm_compute::is_data_type_quantized_asymmetric()</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, and <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::shape</a>.</p>

</div>
</div>
<a id="af65d66a907a0cd5a01a2dc4bd93de984"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af65d66a907a0cd5a01a2dc4bd93de984">&#9670;&nbsp;</a></span>add_fully_connected_layer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_fully_connected_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_outputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>weights_nid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>&#160;</td>
          <td class="paramname"><em>bias_nid</em> = <code><a class="el" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>&#160;</td>
          <td class="paramname"><em>fc_info</em> = <code><a class="el" href="structarm__compute_1_1_fully_connected_layer_info.xhtml">FullyConnectedLayerInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_quant_info</em> = <code><a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11">FastMathHint</a>&#160;</td>
          <td class="paramname"><em>fast_math_hint</em> = <code><a class="el" href="namespacearm__compute_1_1graph.xhtml#ac85a46f3ebd3ab09f576a994ac2dce11ab9f5c797ebbf55adccdd8539a65a0241">FastMathHint::Disabled</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a fully connected layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the layer to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the fully connected layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_outputs</td><td>Number of output neurons </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">weights_nid</td><td>Node ID of the weights node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bias_nid</td><td>(Optional) Node ID of the bias node data. Defaults to EmptyNodeID </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fc_info</td><td>(Optional) Fully connected layer metadata </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_quant_info</td><td>(Optional) Output quantization info </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fast_math_hint</td><td>(Optional) Fast math hint</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00527">527</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;{</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(num_outputs == 0);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(weights_nid == <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160; </div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a> = (bias_nid != <a class="code" href="namespacearm__compute_1_1graph.xhtml#aad3f5296ec88b9d552c109b04b89ad9f">EmptyNodeID</a>);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160; </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="comment">// Create fully connected node and connect</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> fc_nid = g.add_node&lt;FullyConnectedLayerNode&gt;(num_outputs, out_quant_info, fc_info, fast_math_hint);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, fc_nid, 0);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    g.add_connection(weights_nid, 0, fc_nid, 1);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a9aeced5a5128f60a31ea3e327a45ee21">has_bias</a>)</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        g.add_connection(bias_nid, 0, fc_nid, 2);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    }</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    set_node_params(g, fc_nid, params);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">return</span> fc_nid;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00079">arm_compute::graph::EmptyNodeID</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_n_e_o_n_2_im2_col_8cpp_source.xhtml#l00152">arm_compute::test::validation::has_bias</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00775">FullyConnectedLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a8965f4ef424a3b9142706cfe50b7e6cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8965f4ef424a3b9142706cfe50b7e6cf">&#9670;&nbsp;</a></span>add_generate_proposals_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_generate_proposals_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>scores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>deltas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_generate_proposals_info.xhtml">GenerateProposalsInfo</a>&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a generate proposals layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the layer to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scores</td><td>Input scores to the generate proposals layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">deltas</td><td>Input deltas to the generate proposals layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">anchors</td><td>Input anchors to the generate proposals layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Generate proposals operation information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00611">611</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;{</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    check_nodeidx_pair(scores, g);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    check_nodeidx_pair(deltas, g);</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    check_nodeidx_pair(anchors, g);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160; </div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid = g.add_node&lt;GenerateProposalsLayerNode&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    g.add_connection(scores.node_id, scores.index, nid, 0);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    g.add_connection(deltas.node_id, deltas.index, nid, 1);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    g.add_connection(anchors.node_id, anchors.index, nid, 2);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160; </div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    set_node_params(g, nid, params);</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00835">GenerateProposalsLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a60f996c5c698c7b9cbd82ee414b41d2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60f996c5c698c7b9cbd82ee414b41d2e">&#9670;&nbsp;</a></span>add_input_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_input_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1graph_1_1_tensor_descriptor.xhtml">TensorDescriptor</a> &amp;&#160;</td>
          <td class="paramname"><em>desc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>accessor</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an input layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">desc</td><td><a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> descriptor of the <a class="el" href="classarm__compute_1_1graph_1_1_tensor.xhtml" title="Tensor object.">Tensor</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">accessor</td><td>(Optional) Accessor of the input node data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00124">124</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">auto</span> nid = g.add_node&lt;InputNode&gt;(desc);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    set_node_params(g, nid, params);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    set_accessor_on_node(g, nid, <span class="keyword">true</span>, 0, std::move(accessor));</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00056">InputLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a6bf51d4ae4adaffc5511b756d27ae069"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bf51d4ae4adaffc5511b756d27ae069">&#9670;&nbsp;</a></span>add_l2_normalize_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_l2_normalize_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>epsilon</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a L2 Normalize layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the normalization layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis to perform normalization on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">epsilon</td><td>Lower bound value for the normalization</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00632">632</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;{</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;L2NormalizeLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, axis, <a class="code" href="namespacearm__compute_1_1quantization.xhtml#a552dc3787d7ea1675f3e4e8993501d58">epsilon</a>);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_asymm_helpers_8cpp_source.xhtml#l00041">arm_compute::quantization::epsilon</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00864">L2NormalizeLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a542464b49825a7f82b42909409405010"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a542464b49825a7f82b42909409405010">&#9670;&nbsp;</a></span>add_normalization_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_normalization_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml">NormalizationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>norm_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a normalization layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the normalization layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">norm_info</td><td>Normalization layer information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00638">638</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;{</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;NormalizationLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, norm_info);</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00888">NormalizationLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a2bf294b4d12b6430e4e6b6ba8db8273b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bf294b4d12b6430e4e6b6ba8db8273b">&#9670;&nbsp;</a></span>add_normalize_planar_yuv_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_normalize_planar_yuv_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>mean_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>std_accessor</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a normalize planar YUV layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the normalize planar YUV layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mean_accessor</td><td>Const Node ID that contains the mean values </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">std_accessor</td><td>Const Node ID that contains the variance values</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00643">643</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;{</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160; </div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160; </div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="comment">// Calculate Common Descriptor</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    TensorDescriptor common_desc = input_tensor_desc;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    common_desc.shape            = TensorShape(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a75f8e464c6b01b0a4771de38669ee9a1">get_dimension_size</a>(input_tensor_desc, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>));</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160; </div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="comment">// Create mean and std nodes</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keyword">auto</span> mean_nid = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Mean&quot;</span>, common_desc, std::move(mean_accessor));</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keyword">auto</span> std_nid  = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Std&quot;</span>, common_desc, std::move(std_accessor));</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160; </div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="comment">// Create normalize planar YUV node and add connections</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> norm_planar_yuv_nid = g.add_node&lt;NormalizePlanarYUVLayerNode&gt;();</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, norm_planar_yuv_nid, 0);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    g.add_connection(mean_nid, 0, norm_planar_yuv_nid, 1);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    g.add_connection(std_nid, 0, norm_planar_yuv_nid, 2);</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    set_node_params(g, norm_planar_yuv_nid, params);</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160; </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordflow">return</span> norm_planar_yuv_nid;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00143">arm_compute::graph::get_dimension_size()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, and <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00913">NormalizePlanarYUVLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a0db6223a8a4c44a263fbc5e9ec039e18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0db6223a8a4c44a263fbc5e9ec039e18">&#9670;&nbsp;</a></span>add_output_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_output_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>accessor</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds an output layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the output node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">accessor</td><td>(Optional) Accessor of the output node data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00132">132</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid = g.add_node&lt;OutputNode&gt;();</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, nid, 0);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    set_node_params(g, nid, params);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    set_accessor_on_node(g, nid, <span class="keyword">false</span>, 0, std::move(accessor));</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00105">OutputLayer::create_layer()</a>.</p>

</div>
</div>
<a id="ac6ee8c6a5e3b98c697aacf55a251c986"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6ee8c6a5e3b98c697aacf55a251c986">&#9670;&nbsp;</a></span>add_pad_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_pad_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#ac1a1b012674e0f1de071a611391828ad">PaddingList</a> &amp;&#160;</td>
          <td class="paramname"><em>paddings</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>&#160;</td>
          <td class="paramname"><em>pad_value</em> = <code><a class="el" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a pad layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the reshape layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">paddings</td><td>The padding for each spatial dimension of the input tensor. The pair padding[i] specifies the front and the end padding in the i-th dimension. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pad_value</td><td>Padding value to be used. Defaults to 0</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00669">669</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;{</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;PadLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, paddings, pad_value);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00943">PadLayer::create_layer()</a>.</p>

</div>
</div>
<a id="ad0a6a6580be03b445d9dcc64ced5e2ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0a6a6580be03b445d9dcc64ced5e2ef">&#9670;&nbsp;</a></span>add_permute_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_permute_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a33e65be485104e2e9e69fca551d6f492">PermutationVector</a>&#160;</td>
          <td class="paramname"><em>perm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>&#160;</td>
          <td class="paramname"><em>layout</em> = <code><a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0a696b031073e74bf2cb98e5ef201d4aa3">DataLayout::UNKNOWN</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a permute layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the reshape layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">perm</td><td>Permutation vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">layout</td><td>(Optional) Data layout to assign to permuted tensor. If UNKNOWN then the input's layout will be used.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00675">675</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;{</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;PermuteLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, perm, layout);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00969">PermuteLayer::create_layer()</a>.</p>

</div>
</div>
<a id="ab52fa970654d32e0c0621cf718a6861f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab52fa970654d32e0c0621cf718a6861f">&#9670;&nbsp;</a></span>add_pooling_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_pooling_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_pooling_layer_info.xhtml">PoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a pooling layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the pooling layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_info</td><td>Pooling layer information</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00695">695</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;{</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;PoolingLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, pool_info);</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l00993">PoolingLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a613c0d9db4a80d400c8dc220648d337e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a613c0d9db4a80d400c8dc220648d337e">&#9670;&nbsp;</a></span>add_prelu_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_prelu_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>alpha</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a prelu layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the PRelu node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">alpha</td><td>Alpha input to the PRelu node as a NodeID-Index pair</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00681">681</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;{</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    check_nodeidx_pair(alpha, g);</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160; </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> prelu_nid = g.add_node&lt;PReluLayerNode&gt;();</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, prelu_nid, 0);</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    g.add_connection(alpha.node_id, alpha.index, prelu_nid, 1);</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160; </div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    set_node_params(g, prelu_nid, params);</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160; </div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keywordflow">return</span> prelu_nid;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01018">PReluLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a69a669c24a8f0db98f3f980e161ab890"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69a669c24a8f0db98f3f980e161ab890">&#9670;&nbsp;</a></span>add_print_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_print_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>format_info</em> = <code><a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml">IOFormatInfo</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *(<a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *)&gt;&#160;</td>
          <td class="paramname"><em>transform</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a print layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the print layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stream</td><td>Output stream. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format_info</td><td>(Optional) Format info. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">transform</td><td>(Optional) Transformation function to be applied to the input tensor before printing.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00700">700</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;{</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;PrintLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, stream, format_info, transform);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01078">PrintLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a6dc61dbaf7ce5612ac8d1566c1c222e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc61dbaf7ce5612ac8d1566c1c222e3">&#9670;&nbsp;</a></span>add_priorbox_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_priorbox_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_prior_box_layer_info.xhtml">PriorBoxLayerInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>prior_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a priorbox layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input0</td><td>First input to the priorbox layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input1</td><td>Second input to the priorbox layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">prior_info</td><td>PriorBox parameters</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00710">710</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;{</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    check_nodeidx_pair(input0, g);</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    check_nodeidx_pair(input1, g);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160; </div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="comment">// Create priorbox node and connect</span></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> prior_nid = g.add_node&lt;PriorBoxLayerNode&gt;(prior_info);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    g.add_connection(input0.node_id, input0.index, prior_nid, 0);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    g.add_connection(input1.node_id, input1.index, prior_nid, 1);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160; </div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    set_node_params(g, prior_nid, params);</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160; </div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">return</span> prior_nid;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01105">PriorBoxLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a44fe1be81ac7e5aadbc73f05bb95aae1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44fe1be81ac7e5aadbc73f05bb95aae1">&#9670;&nbsp;</a></span>add_quantization_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_quantization_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_quantization_info.xhtml">QuantizationInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>out_quant_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a quantization layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the quantization layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">out_quant_info</td><td>Output quantization info</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00726">726</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;{</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;QuantizationLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, out_quant_info);</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01130">QuantizationLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a3494a111bde4adf09b7bcb3648981e9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3494a111bde4adf09b7bcb3648981e9f">&#9670;&nbsp;</a></span>add_reduction_operation_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_reduction_operation_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a5827eb9cb394e74af87f74bd354fb45b">ReductionOperation</a>&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>keep_dims</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a reduction sum layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the reorg layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">op</td><td>Reduction operation </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Reduction axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">keep_dims</td><td>(Optional) Whether to keep the reduced dimension after the operation. Defaults to true.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00734">734</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;{</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;ReductionLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, op, axis, keep_dims);</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01156">ReductionLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a9d0c83a96ca66565407885ff41214665"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d0c83a96ca66565407885ff41214665">&#9670;&nbsp;</a></span>add_reorg_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_reorg_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>stride</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a reorg layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the reorg layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">stride</td><td>Stride value to use for reorganizing the values in the output tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00740">740</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;{</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;ReorgLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, stride);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01182">ReorgLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a96b9a9be8e6bc94f1a245d9625c5b596"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96b9a9be8e6bc94f1a245d9625c5b596">&#9670;&nbsp;</a></span>add_reshape_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_reshape_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&#160;</td>
          <td class="paramname"><em>shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a reshape layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the reshape layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">shape</td><td>Output reshaped shape</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00745">745</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;{</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;ReshapeLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>);</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01205">ReshapeLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a4e6a956431d508ac913a77cf1f9eaa69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e6a956431d508ac913a77cf1f9eaa69">&#9670;&nbsp;</a></span>add_resize_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_resize_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a966a9c417ce5e94dca08d9b5e745c0c9">InterpolationPolicy</a>&#160;</td>
          <td class="paramname"><em>policy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>width_scale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>height_scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a resize layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the reshape layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">policy</td><td>Interpolation policy </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width_scale</td><td>Width scaling factor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height_scale</td><td>Height scaling factor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00750">750</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;{</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;ResizeLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, policy, width_scale, height_scale);</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01225">ResizeLayer::create_layer()</a>.</p>

</div>
</div>
<a id="aeeebbfe02ab3fe0320a82d6c3413eeeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeeebbfe02ab3fe0320a82d6c3413eeeb">&#9670;&nbsp;</a></span>add_roi_align_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_roi_align_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>rois</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>&#160;</td>
          <td class="paramname"><em>pool_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a ROI align layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the reshape layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">rois</td><td>Input containing the ROIs. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pool_info</td><td>Contains pooling operation information described in <a class="el" href="classarm__compute_1_1_r_o_i_pooling_layer_info.xhtml">ROIPoolingLayerInfo</a>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00756">756</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;{</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    check_nodeidx_pair(rois, g);</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160; </div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> nid = g.add_node&lt;ROIAlignLayerNode&gt;(pool_info);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160; </div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, nid, 0);</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    g.add_connection(rois.node_id, rois.index, nid, 1);</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160; </div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    set_node_params(g, nid, params);</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="keywordflow">return</span> nid;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00219">NodeIdxPair::index</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, and <a class="el" href="arm__compute_2graph_2_types_8h_source.xhtml#l00218">NodeIdxPair::node_id</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01258">ROIAlignLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a7396e101536756a6aaf05f043a6f0b13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7396e101536756a6aaf05f043a6f0b13">&#9670;&nbsp;</a></span>add_scale_layer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_scale_layer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>mul_accessor</em> = <code>nullptr</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a41c3f59161734b8492782359f583b676">ITensorAccessorUPtr</a>&#160;</td>
          <td class="paramname"><em>add_accessor</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a scale layer node to the graph This layer computes a product of the input with a scale (read from mul_accessor) and it applies an offset (read from add_accessor). </p>
<p>output = input * mul_w + add_w</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the layer to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the fully connected layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">mul_accessor</td><td>(Optional) Accessor of the mul node data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">add_accessor</td><td>(Optional) Accessor of the add node data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00771">771</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;{</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160; </div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keyword">const</span> <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0">DataLayout</a>       input_data_layout = input_tensor_desc.layout;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160; </div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="comment">// Create mul node</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    TensorDescriptor mul_desc = input_tensor_desc;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>     C = input_tensor_desc.shape[<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>)];</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    mul_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">DataLayoutDimension::WIDTH</a>), 1);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    mul_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">DataLayoutDimension::HEIGHT</a>), 1);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    mul_desc.shape.set(<a class="code" href="namespacearm__compute_1_1graph.xhtml#a1df15aed3ed531f442ecea2a131d65a4">get_dimension_idx</a>(input_data_layout, <a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>), C);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>      mul_const_nid   = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Mul&quot;</span>, mul_desc, std::move(mul_accessor));</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    NodeIdxPair mul_const_nidxp = {mul_const_nid, 0};</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160; </div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="comment">// Create add node</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    TensorDescriptor add_desc        = mul_desc;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>           add_const_nid   = add_const_node_with_name(g, params, <span class="stringliteral">&quot;Add&quot;</span>, add_desc, std::move(add_accessor));</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    NodeIdxPair      add_const_nidxp = {add_const_nid, 0};</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160; </div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="comment">// Create node and connect</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>      mul_node = <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a193c384a821bc30573b13975eccbe58a">GraphBuilder::add_elementwise_node</a>(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, mul_const_nidxp, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">EltwiseOperation::Mul</a>);</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    NodeIdxPair mulnode_nidxp = {mul_node, 0};</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>      add_node =</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <a class="code" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a193c384a821bc30573b13975eccbe58a">GraphBuilder::add_elementwise_node</a>(g, params, mulnode_nidxp, add_const_nidxp, <a class="code" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">EltwiseOperation::Add</a>);</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160; </div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordflow">return</span> add_node;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1graph_1_1_graph_builder_xhtml_a193c384a821bc30573b13975eccbe58a"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph_builder.xhtml#a193c384a821bc30573b13975eccbe58a">arm_compute::graph::GraphBuilder::add_elementwise_node</a></div><div class="ttdeci">static NodeID add_elementwise_node(Graph &amp;g, NodeParams params, NodeIdxPair input0, NodeIdxPair input1, EltwiseOperation operation)</div><div class="ttdoc">Adds an element-wise layer node to the graph.</div><div class="ttdef"><b>Definition:</b> <a href="_graph_builder_8cpp_source.xhtml#l00506">GraphBuilder.cpp:506</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">arm_compute::graph::EltwiseOperation::Mul</a></div><div class="ttdeci">@ Mul</div><div class="ttdoc">Arithmetic multiplication.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1graph_xhtml_aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">arm_compute::graph::EltwiseOperation::Add</a></div><div class="ttdeci">@ Add</div><div class="ttdoc">Arithmetic addition.</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4aec211f7c20af43e742bf2570c3cb84f9">arm_compute::graph::Add</a>, <a class="el" href="_graph_builder_8cpp_source.xhtml#l00506">GraphBuilder::add_elementwise_node()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="src_2graph_2_utils_8cpp_source.xhtml#l00150">arm_compute::graph::get_dimension_idx()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02ad770ba3ce18fa409965dfdf5e7c348e6">arm_compute::HEIGHT</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00115">TensorDescriptor::layout</a>, <a class="el" href="namespacearm__compute_1_1graph.xhtml#aa12973876c037bddff8e9ece94aca0e4a62b6d55816cf737bfc6f42e60df1a3f2">arm_compute::graph::Mul</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>, <a class="el" href="_tensor_shape_8h_source.xhtml#l00078">TensorShape::set()</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00113">TensorDescriptor::shape</a>, and <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02a49da85b69bc6285eeee286ca49fa7195">arm_compute::WIDTH</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01286">ScaleLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a819d4ebfd6c79e430f7dc0a5e5241203"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a819d4ebfd6c79e430f7dc0a5e5241203">&#9670;&nbsp;</a></span>add_slice_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_slice_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>starts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>ends</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a slice node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the slice layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts</td><td>The starts of the dimensions of the input tensor to be sliced. The length must be of rank(input). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends</td><td>The ends of the dimensions of the input tensor to be sliced. The length must be of rank(input).</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00812">812</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;{</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;SliceLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, starts, ends);</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01311">SliceLayer::create_layer()</a>.</p>

</div>
</div>
<a id="af06fa4df1027c97658c0c26570b2bdb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af06fa4df1027c97658c0c26570b2bdb5">&#9670;&nbsp;</a></span>add_softmax_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_softmax_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>beta</em> = <code>1.f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a softmax node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the softmax layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">beta</td><td>Beta parameter</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00806">806</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;{</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;SoftmaxLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, beta);</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01335">SoftmaxLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a0df296d05af531f77715dfeaf27f48cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0df296d05af531f77715dfeaf27f48cd">&#9670;&nbsp;</a></span>add_split_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_split_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>num_splits</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>axis</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a split node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the split layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_splits</td><td>Number of different splits </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>(Optional) Split axis. Defaults to 0</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00818">818</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;{</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;SplitLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, num_splits, axis);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

</div>
</div>
<a id="ae0a382c6800d4ebe51ba9ced8841e2b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0a382c6800d4ebe51ba9ced8841e2b5">&#9670;&nbsp;</a></span>add_stack_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_stack_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>inputs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a stack layer node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">inputs</td><td>Inputs to the reorg layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">axis</td><td>Axis along which the input tensors have to be packed</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00834">834</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;{</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keywordflow">return</span> create_simple_multiple_input_single_output_node&lt;StackLayerNode&gt;(g, params, inputs, inputs.size(), axis);</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01393">StackLayer::create_layer()</a>.</p>

</div>
</div>
<a id="ab37711b90876e57bfcade525e3233c4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab37711b90876e57bfcade525e3233c4d">&#9670;&nbsp;</a></span>add_strided_slice_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_strided_slice_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>starts</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>ends</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#a11916d4148a39a67794050373f54825a">BiStrides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_strided_slice_layer_info.xhtml">StridedSliceLayerInfo</a>&#160;</td>
          <td class="paramname"><em>info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a strided slice node to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the strided slice layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">starts</td><td>The starts of the dimensions of the input tensor to be sliced. The length must be of rank(input). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ends</td><td>The ends of the dimensions of the input tensor to be sliced. The length must be of rank(input). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides</td><td>The strides of the dimensions of the input tensor to be sliced. The length must be of rank(input). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>Contains masks for the starts, ends and strides</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00823">823</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;{</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    <span class="keywordflow">return</span> create_simple_single_input_output_node&lt;StridedSliceLayerNode&gt;(g, params, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, starts, ends, strides, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, and <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01445">StridedSliceLayer::create_layer()</a>.</p>

</div>
</div>
<a id="a0db084ff8c5adc5876cffecd617b9118"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0db084ff8c5adc5876cffecd617b9118">&#9670;&nbsp;</a></span>add_yolo_node()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> add_yolo_node </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml">Graph</a> &amp;&#160;</td>
          <td class="paramname"><em>g</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_params.xhtml">NodeParams</a>&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1graph_1_1_node_idx_pair.xhtml">NodeIdxPair</a>&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml">ActivationLayerInfo</a>&#160;</td>
          <td class="paramname"><em>act_info</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a yolo layer to the graph. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">g</td><td><a class="el" href="classarm__compute_1_1graph_1_1_graph.xhtml" title="Graph class.">Graph</a> to add the node to </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">params</td><td>Common node parameters </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input</td><td>Input to the yolo layer node as a NodeID-Index pair </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">act_info</td><td>Activation layer parameters</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Node ID of the created node, EmptyNodeID in case of error </dd></dl>

<p class="definition">Definition at line <a class="el" href="_graph_builder_8cpp_source.xhtml#l00839">839</a> of file <a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;{</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    check_nodeidx_pair(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>, g);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160; </div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    <span class="comment">// Get input tensor descriptor</span></div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="keyword">const</span> TensorDescriptor input_tensor_desc = <a class="code" href="namespacearm__compute_1_1graph.xhtml#ade2275ecfd6f344e3ec7086427863aa8">get_tensor_descriptor</a>(g, g.node(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id)-&gt;outputs()[0]);</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>             is_nhwc           = input_tensor_desc.layout == <a class="code" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">DataLayout::NHWC</a>;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160; </div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="comment">// Box format: [Objectness:1][Box:4][Classes:N]</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160; </div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <span class="comment">// Activate objectness and front part of the box</span></div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keyword">const</span> Coordinates box_start(0, 0, 0);</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keyword">const</span> Coordinates box_end = is_nhwc ? Coordinates(3, -1, -1) : Coordinates(-1, -1, 3);</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>            box     = g.add_node&lt;SliceLayerNode&gt;(box_start, box_end);</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>            act_box = g.add_node&lt;ActivationLayerNode&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    set_node_params(g, box, params);</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    set_node_params(g, act_box, params);</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, box, 0);</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    g.add_connection(box, 0, act_box, 0);</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160; </div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="comment">// Immutable part</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    <span class="keyword">const</span> Coordinates imm_start = is_nhwc ? Coordinates(3, 0, 0) : Coordinates(0, 0, 3);</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keyword">const</span> Coordinates imm_end   = is_nhwc ? Coordinates(5, -1, -1) : Coordinates(-1, -1, 5);</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>            imm       = g.add_node&lt;SliceLayerNode&gt;(imm_start, imm_end);</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    set_node_params(g, imm, params);</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, imm, 0);</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160; </div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="comment">// Activation classes and end part of box</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keyword">const</span> Coordinates cls_start = is_nhwc ? Coordinates(5, 0, 0) : Coordinates(0, 0, 5);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keyword">const</span> Coordinates cls_end   = Coordinates(-1, -1, -1);</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>            cls       = g.add_node&lt;SliceLayerNode&gt;(cls_start, cls_end);</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a>            cls_act   = g.add_node&lt;ActivationLayerNode&gt;(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a1f8aca235c095df227e7444f6b237eb1">act_info</a>);</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    set_node_params(g, cls, params);</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    set_node_params(g, cls_act, params);</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    g.add_connection(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.node_id, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a8fcf2ddd9a1d58b1b280f5c0aed71845">input</a>.index, cls, 0);</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    g.add_connection(cls, 0, cls_act, 0);</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160; </div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <a class="code" href="namespacearm__compute_1_1graph.xhtml#a56952a8591a9d8481450ae707ae355e7">NodeID</a> <a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml#a20b2c46a6ccea85acf64c599a68251d7">concat</a> =</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        g.add_node&lt;ConcatenateLayerNode&gt;(3, descriptors::ConcatLayerDescriptor(<a class="code" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">DataLayoutDimension::CHANNEL</a>));</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    set_node_params(g, <a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml#a20b2c46a6ccea85acf64c599a68251d7">concat</a>, params);</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    g.add_connection(act_box, 0, <a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml#a20b2c46a6ccea85acf64c599a68251d7">concat</a>, 0);</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    g.add_connection(imm, 0, <a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml#a20b2c46a6ccea85acf64c599a68251d7">concat</a>, 1);</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    g.add_connection(cls_act, 0, <a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml#a20b2c46a6ccea85acf64c599a68251d7">concat</a>, 2);</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160; </div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml#a20b2c46a6ccea85acf64c599a68251d7">concat</a>;</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;}</div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1framework_1_1dataset_xhtml_a20b2c46a6ccea85acf64c599a68251d7"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1framework_1_1dataset.xhtml#a20b2c46a6ccea85acf64c599a68251d7">arm_compute::test::framework::dataset::concat</a></div><div class="ttdeci">JoinDataset&lt; T, U &gt; concat(T &amp;&amp;dataset1, U &amp;&amp;dataset2)</div><div class="ttdoc">Helper function to create a JoinDataset.</div><div class="ttdef"><b>Definition:</b> <a href="_join_dataset_8h_source.xhtml#l00160">JoinDataset.h:160</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51"><div class="ttname"><a href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::DataLayout::NHWC</a></div><div class="ttdeci">@ NHWC</div><div class="ttdoc">Num samples, height, width, channels.</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_c_l_2_direct_convolution_layer_8cpp_source.xhtml#l00547">arm_compute::test::validation::act_info</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00069">Graph::add_connection()</a>, <a class="el" href="graph_2_graph_8h_source.xhtml#l00234">Graph::add_node()</a>, <a class="el" href="namespacearm__compute.xhtml#a74ce3f7420453d3446218ff3b7453e02af52e9c50a060add65a035429b2a22229">arm_compute::CHANNEL</a>, <a class="el" href="_join_dataset_8h_source.xhtml#l00160">arm_compute::test::framework::dataset::concat()</a>, <a class="el" href="arm__compute_2graph_2_utils_8h_source.xhtml#l00050">arm_compute::graph::get_tensor_descriptor()</a>, <a class="el" href="_c_l_2_l_s_t_m_layer_quantized_8cpp_source.xhtml#l00486">arm_compute::test::validation::input</a>, <a class="el" href="_tensor_descriptor_8h_source.xhtml#l00115">TensorDescriptor::layout</a>, <a class="el" href="namespacearm__compute.xhtml#ad1d5cce2d9e9a5d61c243e5c989112e0ad066db54b89b0912e7e7c6da51e2da51">arm_compute::NHWC</a>, <a class="el" href="_graph_8cpp_source.xhtml#l00208">Graph::node()</a>, and <a class="el" href="_i_node_8cpp_source.xhtml#l00122">INode::outputs()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_layers_8h_source.xhtml#l01471">YOLOLayer::create_layer()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/graph/<a class="el" href="_graph_builder_8h_source.xhtml">GraphBuilder.h</a></li>
<li>src/graph/<a class="el" href="_graph_builder_8cpp_source.xhtml">GraphBuilder.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="namespacearm__compute_1_1graph.xhtml">graph</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1graph_1_1_graph_builder.xhtml">GraphBuilder</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:55 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
