<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: src/core/NEON/kernels/detail/NEDirectConvolutionDetail.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('_n_e_direct_convolution_detail_8h_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">NEDirectConvolutionDetail.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_n_e_direct_convolution_detail_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2021, 2023 Arm Limited.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef ARM_COMPUTE_NEDIRECTCONVOLUTIONDETAIL_H</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#define ARM_COMPUTE_NEDIRECTCONVOLUTIONDETAIL_H</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_n_e_fixed_point_8h.xhtml">src/core/NEON/NEFixedPoint.h</a>&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="wrapper_8h.xhtml">src/core/NEON/wrapper/wrapper.h</a>&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_acl_requires_8h.xhtml">support/AclRequires.h</a>&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;arm_neon.h&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>detail</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">/** Loads a 3x3 matrix as a row  (float).</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * @param[in] ptr            Pointer to a float 3x3 matrix.</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> * @param[in] weights_offset (Optional) Weights quantization offset.</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> * @return The loaded matrix.</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a5db34f1ae85326efebbe1dadb65f0301">   45</a></span>&#160;<span class="keyword">inline</span> float32x4x3_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(<span class="keyword">const</span> <span class="keywordtype">float</span> *ptr, <span class="keywordtype">int</span> weights_offset = 0)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(weights_offset);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">const</span> float32x4x3_t r = {{vld1q_dup_f32(ptr), vld1q_dup_f32(1 + ptr), vld1q_dup_f32(2 + ptr)}};</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/** Loads a 3x3 matrix as a row (uint8_t/int8_t).</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> * @param[in] ptr            Pointer to a uint8_t/int8_t 3x3 matrix.</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> * @param[in] weights_offset (Optional) Weights quantization offset.</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> * @return The loaded matrix.</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ARM_COMPUTE_REQUIRES_TA(std::is_same&lt;T, u<span class="keywordtype">int</span>8_t&gt;::value || std::is_same&lt;T, <span class="keywordtype">int</span>8_t&gt;::value)&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a87d22164f804124f911636193e4c10e6">   60</a></span>&#160;<span class="keyword">inline</span> int32x4x3_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(<span class="keyword">const</span> T *ptr, <span class="keywordtype">int</span> weights_offset = 0)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">const</span> int32x4_t v_weights_offset = vdupq_n_s32(weights_offset);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">/* ptr is a pointer to a row in a 3x3 matrix, the function returns 3 vectors holding exactly the same value in all lanes:</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">       r.val[0] contains the first element, r.val[1] the second element and r.val[2] the third element (in all lanes) */</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    int32x4x3_t r = {{vaddq_s32(v_weights_offset, vdupq_n_s32(*ptr)),</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                      vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 1))),</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                      vaddq_s32(v_weights_offset, vdupq_n_s32(*(ptr + 2)))}};</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/** Stores a float32x4x2_t array into a memory location.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> * @param[in] buffer Pointer to the memory location where the values will be stored.</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * @param[in] values Values that will be stored.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    vst1q_f32(buffer, values.val[0]);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    vst1q_f32(buffer + 4, values.val[1]);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    vst1q_f32(buffer, values.val[0]);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    vst1_f32(buffer, vget_low_f32(values.val[0]));</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">/** Stores a uint32_t array into a memory location.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> * @param[in] buffer Pointer to the memory location where the values will be stored.</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * @param[in] values Values that will be stored.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#aa9f26cd83047a111336033fb7466faf1">  107</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a143f43b1fb56a8d806145e95d4c3995e">  110</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    vst1q_s32(buffer, values.val[0]);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    vst1q_s32(buffer + 4, values.val[1]);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#af63e34203346681c35b68fcca2026a06">  117</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    vst1q_s32(buffer, values.val[0]);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a991bde46f2841422fb98258127305050">  123</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    vst1_s32(buffer, vget_low_s32(values.val[0]));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">  129</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">accumulate_results</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">  132</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">accumulate_results&lt;1&gt;</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    vst1q_f32(buffer, vaddq_f32(vld1q_f32(buffer), values.val[0]));</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    vst1q_f32(buffer + 4, vaddq_f32(vld1q_f32(buffer + 4), values.val[1]));</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">  139</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">accumulate_results&lt;2&gt;</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    vst1q_f32(buffer, vaddq_f32(vld1q_f32(buffer), values.val[0]));</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">  145</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">accumulate_results&lt;3&gt;</a>(<span class="keywordtype">float</span> *buffer, <span class="keyword">const</span> float32x4x2_t &amp;values)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    vst1_f32(buffer, vadd_f32(vld1_f32(buffer), vget_low_f32(values.val[0])));</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div>
<div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a31dcca2f3a7368cdd24e6a634b51de4b">  151</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">accumulate_results</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#ada0c5c8101ce3172ca465bb3ff6843b1">  154</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">accumulate_results&lt;1&gt;</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    vst1q_s32(buffer, vaddq_s32(vld1q_s32(buffer), values.val[0]));</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    vst1q_s32(buffer + 4, vaddq_s32(vld1q_s32(buffer + 4), values.val[1]));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#acf4d4b5e75140c76124c95c0b28b28b7">  161</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">accumulate_results&lt;2&gt;</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    vst1q_s32(buffer, vaddq_s32(vld1q_s32(buffer), values.val[0]));</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a33b299a9a74e372d06b83c033958d428">  167</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">accumulate_results&lt;3&gt;</a>(int32_t *buffer, <span class="keyword">const</span> int32x4x2_t &amp;values)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    vst1_s32(buffer, vadd_s32(vld1_s32(buffer), vget_low_s32(values.val[0])));</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span><span class="comment"></span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">/** Stores a float16x8x2_t array into a memory location.</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"> * @param[in] buffer Pointer to the memory location where the values will be stored.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"> * @param[in] values Values that will be stored.</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    vst1q_f16(buffer, values.val[0]);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    vst1q_f16(buffer + 8, values.val[1]);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    vst1q_f16(buffer, values.val[0]);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    vst1_f16(buffer, vget_low_f16(values.val[0]));</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> str<span class="keywordtype">id</span>ex&gt;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">accumulate_results</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">accumulate_results&lt;1&gt;</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    vst1q_f16(buffer, <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(vld1q_f16(buffer), values.val[0]));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    vst1q_f16(buffer + 8, <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(vld1q_f16(buffer + 8), values.val[1]));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">accumulate_results&lt;2&gt;</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    vst1q_f16(buffer, <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(vld1q_f16(buffer), values.val[0]));</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">accumulate_results&lt;3&gt;</a>(float16_t *buffer, <span class="keyword">const</span> float16x8x2_t &amp;values)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    vst1_f16(buffer, <a class="code" href="clang-tidy_8h.xhtml#a608fb0db3de44492fcc96a836eadf11b">vadd_f16</a>(vld1_f16(buffer), vget_low_f16(values.val[0])));</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_FEATURE_FP16_VECTOR_ARITHMETIC */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">/** Perform a 3x3 convolution for 4 consecutive elements on float32 when dilation.x() or dilation.y() is not 1.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * @param[in] in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * @param[in] in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> * @param[in] in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * @param[in] m0           First row of the filter.</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> * @param[in] m1           Second row of the filter.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> * @param[in] m2           Third row of the filter.</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> * @param[in] dilation_x   Dilation, in elements across x.</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> * @param[in] input_offset (Optional) Input quantization offset.</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00236"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">  236</a></span>&#160;<span class="keyword">inline</span> float32x4_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>         *in_top,</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_mid,</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_low,</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                <span class="keyword">const</span> float32x4x3_t &amp;m0,</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                <span class="keyword">const</span> float32x4x3_t &amp;m1,</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                                <span class="keyword">const</span> float32x4x3_t &amp;m2,</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">size_t</span>         dilation_x,</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                                <span class="keywordtype">int</span>                  input_offset)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keyword">const</span> float32x4x3_t vtop = {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        {vld1q_f32(in_top), vld1q_f32(in_top + dilation_x), vld1q_f32(in_top + 2 * dilation_x)}};</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">const</span> float32x4x3_t vmid = {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        {vld1q_f32(in_mid), vld1q_f32(in_mid + dilation_x), vld1q_f32(in_mid + 2 * dilation_x)}};</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> float32x4x3_t vlow = {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        {vld1q_f32(in_low), vld1q_f32(in_low + dilation_x), vld1q_f32(in_low + 2 * dilation_x)}};</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    float32x4_t out = vmulq_f32(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    out             = vmlaq_f32(out, vtop.val[1], m0.val[1]);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    out             = vmlaq_f32(out, vtop.val[2], m0.val[2]);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    out = vmlaq_f32(out, vmid.val[0], m1.val[0]);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    out = vmlaq_f32(out, vmid.val[1], m1.val[1]);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    out = vmlaq_f32(out, vmid.val[2], m1.val[2]);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    out = vmlaq_f32(out, vlow.val[0], m2.val[0]);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    out = vmlaq_f32(out, vlow.val[1], m2.val[1]);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    out = vmlaq_f32(out, vlow.val[2], m2.val[2]);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">/** Perform a 3x3 convolution for 8 consecutive elements on float32 when dilation.x() or dilation.y() is not 1.</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> * @param[in] in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"> * @param[in] in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"> * @param[in] in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment"> * @param[in] m0           First row of the filter.</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"> * @param[in] m1           Second row of the filter.</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"> * @param[in] m2           Third row of the filter.</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"> * @param[in] dilation_x   Dilation, in elements across x.</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment"> * @param[in] stridex      Stride value in elements across x.</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"> * @param[in] input_offset (Optional) Input quantization offset.</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#acd78cf020600423cd03654ca37776f87">  281</a></span>&#160;<span class="keyword">inline</span> float32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#acd78cf020600423cd03654ca37776f87">convolve_3x3_dilation</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>         *in_top,</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_mid,</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_low,</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                           <span class="keyword">const</span> float32x4x3_t &amp;m0,</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                           <span class="keyword">const</span> float32x4x3_t &amp;m1,</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                                           <span class="keyword">const</span> float32x4x3_t &amp;m2,</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">size_t</span>         dilation_x,</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         stridex,</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                           <span class="keywordtype">int</span>                  input_offset = 0)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;{</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    float32x4x2_t out = {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        {<a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset),</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;         <a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(in_top + 4, in_mid + 4, in_low + 4, m0, m1, m2, dilation_x, input_offset)}};</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 0), out.val[0], 2);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[1], 2), out.val[0], 3);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;}</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">/** Perform a convolve3x3 on float32.</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> * @param[in]  in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> * @param[in]  in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> * @param[in]  in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> * @param[out] out_ptr      Pointer to the output.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"> * @param[in]  m0           First row of the filter.</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"> * @param[in]  m1           Second row of the filter.</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"> * @param[in]  m2           Third row of the filter.</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment"> * @param[in]  stridex      Stride value in elements across x.</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"> * @param[in]  input_offset (Optional) Input quantization offset.</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> accumulate&gt;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>         *in_top,</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_mid,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_low,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                  <span class="keywordtype">float</span>               *out_ptr,</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                  <span class="keyword">const</span> float32x4x3_t &amp;m0,</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                  <span class="keyword">const</span> float32x4x3_t &amp;m1,</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                  <span class="keyword">const</span> float32x4x3_t &amp;m2,</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         stridex,</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                  <span class="keywordtype">int</span>                  input_offset = 0);</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> accumulate&gt;</div>
<div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a3d385d5e688ccef1d42c7d9285fb0d03">  335</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a>(<span class="keyword">const</span> <span class="keywordtype">float</span>         *in_top,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_mid,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                         <span class="keyword">const</span> <span class="keywordtype">float</span>         *in_low,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                         <span class="keywordtype">float</span>               *out_ptr,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                         <span class="keyword">const</span> float32x4x3_t &amp;m0,</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                         <span class="keyword">const</span> float32x4x3_t &amp;m1,</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                         <span class="keyword">const</span> float32x4x3_t &amp;m2,</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         stridex,</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                         <span class="keywordtype">int</span>                  input_offset)</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;{</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    float32x4x2_t out = {{vdupq_n_f32(0.f), vdupq_n_f32(0.f)}};</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keyword">const</span> float32x4x2_t vtop     = vld2q_f32(in_top);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keyword">const</span> float32x4x2_t vmid     = vld2q_f32(in_mid);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keyword">const</span> float32x4x2_t vlow     = vld2q_f32(in_low);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keyword">const</span> float32x4_t   vtop_end = vld1q_f32(in_top + 8);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keyword">const</span> float32x4_t   vmid_end = vld1q_f32(in_mid + 8);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keyword">const</span> float32x4_t   vlow_end = vld1q_f32(in_low + 8);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        out.val[0] = vmulq_f32(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vtop.val[1], m0.val[1]);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop_end, 1), m0.val[2]);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vmid.val[1], m1.val[1]);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid_end, 1), m1.val[2]);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vlow.val[1], m2.val[1]);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow_end, 1), m2.val[2]);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">accumulate_results&lt;2&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(out_ptr, out);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keyword">const</span> float32x4x3_t vtop = {{vld1q_f32(in_top), vld1q_f32(in_top + 4), vld1q_f32(in_top + 8)}};</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keyword">const</span> float32x4x3_t vmid = {{vld1q_f32(in_mid), vld1q_f32(in_mid + 4), vld1q_f32(in_mid + 8)}};</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keyword">const</span> float32x4x3_t vlow = {{vld1q_f32(in_low), vld1q_f32(in_low + 4), vld1q_f32(in_low + 8)}};</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        out.val[0]               = vmulq_f32(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        out.val[1]               = vmulq_f32(vtop.val[1], m0.val[0]);</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 1), m0.val[1]);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vtop.val[0], vtop.val[1], 2), m0.val[2]);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vmid.val[0], m1.val[0]);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 1), m1.val[1]);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vmid.val[0], vmid.val[1], 2), m1.val[2]);</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vlow.val[0], m2.val[0]);</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 1), m2.val[1]);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        out.val[0] = vmlaq_f32(out.val[0], vextq_f32(vlow.val[0], vlow.val[1], 2), m2.val[2]);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 1), m0.val[1]);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vtop.val[1], vtop.val[2], 2), m0.val[2]);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vmid.val[1], m1.val[0]);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 1), m1.val[1]);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vmid.val[1], vmid.val[2], 2), m1.val[2]);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vlow.val[1], m2.val[0]);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 1), m2.val[1]);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        out.val[1] = vmlaq_f32(out.val[1], vextq_f32(vlow.val[1], vlow.val[2], 2), m2.val[2]);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            out.val[0] = vsetq_lane_f32(vgetq_lane_f32(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">accumulate_results&lt;3&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(out_ptr, out);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">accumulate_results&lt;1&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(out_ptr, out);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;}</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment">/** Perform a 3x3 convolution for 4 consecutive 8-bit elements when dilation.x() or dilation.y() is not 1.</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"> * @param[in] in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"> * @param[in] in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"> * @param[in] in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"> * @param[in] m0           First row of the filter.</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"> * @param[in] m1           Second row of the filter.</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment"> * @param[in] m2           Third row of the filter.</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment"> * @param[in] dilation_x   Dilation, in elements across x.</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment"> * @param[in] input_offset Input quantization offset.</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ARM_COMPUTE_REQUIRES_TA(std::is_same&lt;T, u<span class="keywordtype">int</span>8_t&gt;::value || std::is_same&lt;T, <span class="keywordtype">int</span>8_t&gt;::value)&gt;</div>
<div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#ae63552b4bf3d8bda8762cf39c8082ce0">  428</a></span>&#160;<span class="keyword">inline</span> int32x4_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(<span class="keyword">const</span> T           *in_top,</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                                              <span class="keyword">const</span> T           *in_mid,</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                              <span class="keyword">const</span> T           *in_low,</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                                              <span class="keyword">const</span> int32x4x3_t &amp;m0,</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                                              <span class="keyword">const</span> int32x4x3_t &amp;m1,</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                                              <span class="keyword">const</span> int32x4x3_t &amp;m2,</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                                              <span class="keywordtype">size_t</span>             dilation_x,</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                                              int32_t            input_offset)</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;{</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keyword">using</span> VectorType    = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T, uint8_t&gt;::value, uint8x8x3_t, int8x8x3_t&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keyword">using</span> OutputTagType = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">wrapper::traits::neon_bitvector_tag_t&lt;int32_t, wrapper::traits::BitWidth::W128&gt;</a>;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keyword">const</span> int32x4_t v_input_offset = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(input_offset, OutputTagType{});</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keyword">const</span> VectorType vtop = {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        {<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top + dilation_x), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top + 2 * dilation_x)}};</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="keyword">const</span> VectorType vmid = {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        {<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid + dilation_x), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid + 2 * dilation_x)}};</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keyword">const</span> VectorType vlow = {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        {<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low + dilation_x), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low + 2 * dilation_x)}};</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">const</span> int32x4x3_t vtop_s32 = {{</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[0])))),</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[1])))),</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[2])))),</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }};</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keyword">const</span> int32x4x3_t vmid_s32 = {{</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[0])))),</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[1])))),</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[2])))),</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }};</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keyword">const</span> int32x4x3_t vlow_s32 = {{</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[0])))),</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[1])))),</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[2])))),</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }};</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    int32x4_t out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">wrapper::vmul</a>(vtop_s32.val[0], m0.val[0]);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    out           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vtop_s32.val[1], m0.val[1]);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    out           = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vtop_s32.val[2], m0.val[2]);</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vmid_s32.val[0], m1.val[0]);</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vmid_s32.val[1], m1.val[1]);</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vmid_s32.val[2], m1.val[2]);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vlow_s32.val[0], m2.val[0]);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vlow_s32.val[1], m2.val[1]);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    out = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out, vlow_s32.val[2], m2.val[2]);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160; </div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;}</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="comment">/** Perform a 3x3 convolution for 4 consecutive 8-bit elements when dilation.x() or dilation.y() is not 1.</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment"> * @param[in] in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="comment"> * @param[in] in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;<span class="comment"> * @param[in] in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment"> * @param[in] m0           First row of the filter.</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment"> * @param[in] m1           Second row of the filter.</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment"> * @param[in] m2           Third row of the filter.</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment"> * @param[in] dilation_x   Dilation, in elements across x.</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="comment"> * @param[in] stridex      Stride value in elements across x.</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="comment"> * @param[in] input_offset Input quantization offset.</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, ARM_COMPUTE_REQUIRES_TA(std::is_same&lt;T, u<span class="keywordtype">int</span>8_t&gt;::value || std::is_same&lt;T, <span class="keywordtype">int</span>8_t&gt;::value)&gt;</div>
<div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a3714766fb92e59c3264d5a981e58d7ee">  494</a></span>&#160;<span class="keyword">inline</span> int32x4x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#acd78cf020600423cd03654ca37776f87">convolve_3x3_dilation</a>(<span class="keyword">const</span> T           *in_top,</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                                         <span class="keyword">const</span> T           *in_mid,</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                         <span class="keyword">const</span> T           *in_low,</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                                         <span class="keyword">const</span> int32x4x3_t &amp;m0,</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                                         <span class="keyword">const</span> int32x4x3_t &amp;m1,</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                                         <span class="keyword">const</span> int32x4x3_t &amp;m2,</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                                         <span class="keyword">const</span> <span class="keywordtype">size_t</span>       dilation_x,</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       stridex,</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                                         <span class="keywordtype">int</span>                input_offset)</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;{</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    int32x4x2_t out = {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        {<a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset),</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;         <a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(in_top + 4, in_mid + 4, in_low + 4, m0, m1, m2, dilation_x, input_offset)}};</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160; </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 0), out.val[0], 2);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 2), out.val[0], 3);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    {</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">/** Perform a convolve3x3 on 8-bit elements</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment"> * @param[in]  in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment"> * @param[in]  in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment"> * @param[in]  in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment"> * @param[out] out_ptr      Pointer to the output.</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment"> * @param[in]  m0           First row of the filter.</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment"> * @param[in]  m1           Second row of the filter.</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment"> * @param[in]  m2           Third row of the filter.</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment"> * @param[in]  stridex      Stride value in elements across x.</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment"> * @param[in]  input_offset Input quantization offset.</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a>,</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;          <span class="keyword">typename</span> T1,</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;          <span class="keyword">typename</span> T2,</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;          <a class="code" href="_acl_requires_8h.xhtml#a5dad751dde99c6148c9e02cb2704f181">ARM_COMPUTE_REQUIRES_TA</a>(std::is_same&lt;T1, uint8_t&gt;::value || std::is_same&lt;T1, int8_t&gt;::value)&gt;</div>
<div class="line"><a name="l00539"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#ab7917579d8077eb6d044b63f675409cd">  539</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a>(<span class="keyword">const</span> T1          *in_top,</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                  <span class="keyword">const</span> T1          *in_mid,</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                  <span class="keyword">const</span> T1          *in_low,</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                  T2                *out_ptr,</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                  <span class="keyword">const</span> int32x4x3_t &amp;m0,</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                  <span class="keyword">const</span> int32x4x3_t &amp;m1,</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                  <span class="keyword">const</span> int32x4x3_t &amp;m2,</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       stridex,</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                  int32_t            input_offset)</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;{</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(stridex &gt; 3);</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">using</span> VectorType    = <span class="keyword">typename</span> std::conditional&lt;std::is_same&lt;T1, uint8_t&gt;::value, uint8x8x2_t, int8x8x2_t&gt;<a class="code" href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">::type</a>;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">using</span> OutputTagType = <span class="keyword">typename</span> <a class="code" href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">wrapper::traits::neon_bitvector_tag_t&lt;int32_t, wrapper::traits::BitWidth::W128&gt;</a>;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keyword">const</span> int32x4_t v_input_offset = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(input_offset, OutputTagType{});</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160; </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keyword">const</span> VectorType vtop = {{<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_top + 8)}};</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keyword">const</span> VectorType vmid = {{<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_mid + 8)}};</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keyword">const</span> VectorType vlow = {{<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low), <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">wrapper::vload</a>(in_low + 8)}};</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160; </div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keyword">const</span> int32x4x3_t vtop_s32 = {{</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[0])))),</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[0])))),</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vtop.val[1])))),</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    }};</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keyword">const</span> int32x4x3_t vmid_s32 = {{</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[0])))),</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[0])))),</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vmid.val[1])))),</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    }};</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keyword">const</span> int32x4x3_t vlow_s32 = {{</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[0])))),</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">wrapper::vgethigh</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[0])))),</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">wrapper::vaddw</a>(v_input_offset, <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">wrapper::vreinterpret</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">wrapper::vgetlow</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">wrapper::vmovl</a>(vlow.val[1])))),</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }};</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    int32x4x2_t out{{</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(0), OutputTagType{}),</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">wrapper::vdup_n</a>(<span class="keyword">static_cast&lt;</span>int32_t<span class="keyword">&gt;</span>(0), OutputTagType{}),</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    }};</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160; </div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="comment">// 0</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], vtop_s32.val[0], m0.val[0]);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vtop_s32.val[0], vtop_s32.val[1]), m0.val[1]);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vtop_s32.val[0], vtop_s32.val[1]), m0.val[2]);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160; </div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], vmid_s32.val[0], m1.val[0]);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vmid_s32.val[0], vmid_s32.val[1]), m1.val[1]);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vmid_s32.val[0], vmid_s32.val[1]), m1.val[2]);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160; </div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], vlow_s32.val[0], m2.val[0]);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vlow_s32.val[0], vlow_s32.val[1]), m2.val[1]);</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[0], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vlow_s32.val[0], vlow_s32.val[1]), m2.val[2]);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160; </div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">// 1</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], vtop_s32.val[1], m0.val[0]);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vtop_s32.val[1], vtop_s32.val[2]), m0.val[1]);</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vtop_s32.val[1], vtop_s32.val[2]), m0.val[2]);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160; </div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], vmid_s32.val[1], m1.val[0]);</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vmid_s32.val[1], vmid_s32.val[2]), m1.val[1]);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vmid_s32.val[1], vmid_s32.val[2]), m1.val[2]);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], vlow_s32.val[1], m2.val[0]);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">wrapper::vext_1</a>(vlow_s32.val[1], vlow_s32.val[2]), m2.val[1]);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    out.val[1] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">wrapper::vmla</a>(out.val[1], <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">wrapper::vext_2</a>(vlow_s32.val[1], vlow_s32.val[2]), m2.val[2]);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">if</span> (stridex == 1)</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">accumulate_results&lt;1&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">store_results&lt;1&gt;</a>(out_ptr, out);</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 0), out.val[0], 2);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[1], 2), out.val[0], 3);</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">accumulate_results&lt;2&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">store_results&lt;2&gt;</a>(out_ptr, out);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    {</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        out.val[0] = <a class="code" href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">wrapper::vsetlane</a>(<a class="code" href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">wrapper::vgetlane</a>(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">accumulate_results&lt;3&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">store_results&lt;3&gt;</a>(out_ptr, out);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;}</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160; </div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="preprocessor">#ifdef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC</span><span class="comment"></span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">/** Loads a 3x3 matrix as a row (float16_t).</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment"> * @param[in] ptr Pointer to a float 3x3 matrix.</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="comment"> * @return The loaded matrix.</span></div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="keyword">inline</span> float16x8x3_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">load_matrix_row</a>(<span class="keyword">const</span> float16_t *ptr, <span class="keywordtype">int</span> weights_offset = 0)</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;{</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(weights_offset);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="comment">/* ptr is a pointer to a row in a 3x3 matrix, the function returns 3 vectors holding exactly the same value in all lanes:</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">       r.val[0] contains the first element, r.val[1] the second element and r.val[2] the third element (in all lanes) */</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">const</span> float16x8x3_t r = {{vld1q_dup_f16(ptr), vld1q_dup_f16(1 + ptr), vld1q_dup_f16(2 + ptr)}};</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">return</span> r;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;}</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment">/** Perform a 3x3 convolution for 8 consecutive elements on float16 when dilation.x() or dilation.y() is not 1.</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment"> * @param[in] in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment"> * @param[in] in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="comment"> * @param[in] in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="comment"> * @param[in] m0           First row of the filter.</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="comment"> * @param[in] m1           Second row of the filter.</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="comment"> * @param[in] m2           Third row of the filter.</span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="comment"> * @param[in] dilation_x   Dilation, in elements across x.</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment"> * @param[in] input_offset (Optional)Input quantization offset.</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="keyword">inline</span> float16x8_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(<span class="keyword">const</span> float16_t     *in_top,</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                                                <span class="keyword">const</span> float16_t     *in_mid,</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                                                <span class="keyword">const</span> float16_t     *in_low,</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                                                <span class="keyword">const</span> float16x8x3_t &amp;m0,</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                                                <span class="keyword">const</span> float16x8x3_t &amp;m1,</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                                                <span class="keyword">const</span> float16x8x3_t &amp;m2,</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                                                <span class="keyword">const</span> <span class="keywordtype">size_t</span>         dilation_x,</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                                                <span class="keywordtype">int</span>                  input_offset = 0)</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;{</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">const</span> float16x8x3_t vtop = {</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        {vld1q_f16(in_top), vld1q_f16(in_top + dilation_x), vld1q_f16(in_top + 2 * dilation_x)}};</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keyword">const</span> float16x8x3_t vmid = {</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        {vld1q_f16(in_mid), vld1q_f16(in_mid + dilation_x), vld1q_f16(in_mid + 2 * dilation_x)}};</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    <span class="keyword">const</span> float16x8x3_t vlow = {</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        {vld1q_f16(in_low), vld1q_f16(in_low + dilation_x), vld1q_f16(in_low + 2 * dilation_x)}};</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    float16x8_t out = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    out             = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vtop.val[1], m0.val[1]));</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    out             = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vtop.val[2], m0.val[2]));</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160; </div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    out = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vmid.val[0], m1.val[0]));</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    out = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vmid.val[1], m1.val[1]));</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    out = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vmid.val[2], m1.val[2]));</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160; </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    out = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vlow.val[0], m2.val[0]));</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    out = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vlow.val[1], m2.val[1]));</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    out = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out, <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vlow.val[2], m2.val[2]));</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160; </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="comment">/** Perform a 3x3 convolution for 16 consecutive elements on float16 when dilation.x() or dilation.y() is not 1.</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="comment"> * @param[in] in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="comment"> * @param[in] in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="comment"> * @param[in] in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="comment"> * @param[in] m0           First row of the filter.</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;<span class="comment"> * @param[in] m1           Second row of the filter.</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="comment"> * @param[in] m2           Third row of the filter.</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="comment"> * @param[in] dilation_x   Dilation, in elements across x.</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="comment"> * @param[in] stridex      Stride value in elements across x.</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="comment"> * @param[in] input_offset (Optional) Input quantization offset.</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="keyword">inline</span> float16x8x2_t <a class="code" href="namespacearm__compute_1_1detail.xhtml#acd78cf020600423cd03654ca37776f87">convolve_3x3_dilation</a>(<span class="keyword">const</span> float16_t     *in_top,</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                           <span class="keyword">const</span> float16_t     *in_mid,</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                           <span class="keyword">const</span> float16_t     *in_low,</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;                                           <span class="keyword">const</span> float16x8x3_t &amp;m0,</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                                           <span class="keyword">const</span> float16x8x3_t &amp;m1,</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                                           <span class="keyword">const</span> float16x8x3_t &amp;m2,</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                                           <span class="keyword">const</span> <span class="keywordtype">size_t</span>         dilation_x,</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                                           <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         stridex,</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                                           <span class="keywordtype">int</span>                  input_offset = 0)</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;{</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    float16x8x2_t out = {</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        {<a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(in_top, in_mid, in_low, m0, m1, m2, dilation_x, input_offset),</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;         <a class="code" href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">single_convolve_3x3_dilation</a>(in_top + 8, in_mid + 8, in_low + 8, m0, m1, m2, dilation_x, input_offset)}};</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160; </div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    {</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 2), out.val[0], 1);</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 4), out.val[0], 2);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 6), out.val[0], 3);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 0), out.val[0], 4);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 2), out.val[0], 5);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 4), out.val[0], 6);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 6), out.val[0], 7);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    }</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    {</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 6), out.val[0], 2);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 1), out.val[0], 3);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    }</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160; </div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keywordflow">return</span> out;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;}</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">/** Perform a convolve3x3 on float16.</span></div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="comment"> * @param[in]  in_top       Pointer to the first row of the input.</span></div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;<span class="comment"> * @param[in]  in_mid       Pointer to the second row of the input.</span></div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="comment"> * @param[in]  in_low       Pointer to the third row of the input.</span></div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="comment"> * @param[out] out_ptr      Pointer to the output.</span></div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="comment"> * @param[in]  m0           First row of the filter.</span></div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment"> * @param[in]  m1           Second row of the filter.</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;<span class="comment"> * @param[in]  m2           Third row of the filter.</span></div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;<span class="comment"> * @param[in]  stridex      Stride value in elements across x.</span></div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment"> * @param[in]  input_offset (Optional) Input quantization offset.</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> accumulate&gt;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">convolve_3x3</a>(<span class="keyword">const</span> float16_t     *in_top,</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                         <span class="keyword">const</span> float16_t     *in_mid,</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                         <span class="keyword">const</span> float16_t     *in_low,</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                         float16_t           *out_ptr,</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                         <span class="keyword">const</span> float16x8x3_t &amp;m0,</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                         <span class="keyword">const</span> float16x8x3_t &amp;m1,</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                         <span class="keyword">const</span> float16x8x3_t &amp;m2,</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>         stridex,</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                         <span class="keywordtype">int</span>                  input_offset = 0)</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;{</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    <a class="code" href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a>(input_offset);</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160; </div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    float16x8x2_t out = {{vdupq_n_f16(0), vdupq_n_f16(0)}};</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    <span class="keywordflow">if</span> (stridex == 2)</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    {</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        <span class="keyword">const</span> float16x8x2_t vtop     = vld2q_f16(in_top);</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="keyword">const</span> float16x8x2_t vmid     = vld2q_f16(in_mid);</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <span class="keyword">const</span> float16x8x2_t vlow     = vld2q_f16(in_low);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        <span class="keyword">const</span> float16x8_t   vtop_end = vld1q_f16(in_top + 16);</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keyword">const</span> float16x8_t   vmid_end = vld1q_f16(in_mid + 16);</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keyword">const</span> float16x8_t   vlow_end = vld1q_f16(in_low + 16);</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160; </div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160; </div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vtop.val[1], m0.val[1]));</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vtop.val[0], vtop_end, 1), m0.val[2]));</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160; </div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vmid.val[0], m1.val[0]));</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vmid.val[1], m1.val[1]));</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vmid.val[0], vmid_end, 1), m1.val[2]));</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160; </div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vlow.val[0], m2.val[0]));</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vlow.val[1], m2.val[1]));</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vlow.val[0], vlow_end, 1), m2.val[2]));</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160; </div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">accumulate_results&lt;2&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt;2&gt;(out_ptr, out);</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    }</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    {</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <span class="keyword">const</span> float16x8x3_t vtop = {{vld1q_f16(in_top), vld1q_f16(in_top + 8), vld1q_f16(in_top + 16)}};</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keyword">const</span> float16x8x3_t vmid = {{vld1q_f16(in_mid), vld1q_f16(in_mid + 8), vld1q_f16(in_mid + 16)}};</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        <span class="keyword">const</span> float16x8x3_t vlow = {{vld1q_f16(in_low), vld1q_f16(in_low + 8), vld1q_f16(in_low + 16)}};</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        out.val[0]               = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vtop.val[0], m0.val[0]);</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        out.val[1]               = <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vtop.val[1], m0.val[0]);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160; </div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vtop.val[0], vtop.val[1], 1), m0.val[1]));</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vtop.val[0], vtop.val[1], 2), m0.val[2]));</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vmid.val[0], m1.val[0]));</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vmid.val[0], vmid.val[1], 1), m1.val[1]));</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vmid.val[0], vmid.val[1], 2), m1.val[2]));</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vlow.val[0], m2.val[0]));</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vlow.val[0], vlow.val[1], 1), m2.val[1]));</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        out.val[0] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[0], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vlow.val[0], vlow.val[1], 2), m2.val[2]));</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vtop.val[1], vtop.val[2], 1), m0.val[1]));</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vtop.val[1], vtop.val[2], 2), m0.val[2]));</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vmid.val[1], m1.val[0]));</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vmid.val[1], vmid.val[2], 1), m1.val[1]));</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vmid.val[1], vmid.val[2], 2), m1.val[2]));</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(vlow.val[1], m2.val[0]));</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vlow.val[1], vlow.val[2], 1), m2.val[1]));</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        out.val[1] = <a class="code" href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a>(out.val[1], <a class="code" href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a>(<a class="code" href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a>(vlow.val[1], vlow.val[2], 2), m2.val[2]));</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160; </div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordflow">if</span> (stridex == 3)</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 3), out.val[0], 1);</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[0], 6), out.val[0], 2);</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            out.val[0] = vsetq_lane_f16(vgetq_lane_f16(out.val[1], 1), out.val[0], 3);</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160; </div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">accumulate_results&lt;3&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt;3&gt;(out_ptr, out);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        }</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        {</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            <a class="code" href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">accumulate</a> ? <a class="code" href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">accumulate_results&lt;1&gt;</a>(out_ptr, out) : <a class="code" href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">store_results</a>&lt;1&gt;(out_ptr, out);</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        }</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    }</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;}</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/** __ARM_FEATURE_FP16_VECTOR_ARITHMETIC **/</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;<span class="comment">/** Get the number of elements processed on 3x3 convolution.</span></div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;<span class="comment"> * @param[in] num_elems_written_per_iteration Number of elements written per iteration on 3x3 convolution.</span></div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="comment"> * @param[in] stridex                         Stride value in elements across x.</span></div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="comment"> * @return The number of elements processed.</span></div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00830"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1detail.xhtml#a17a8ccb1f281296a0ee7eb00693febbd">  830</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">get_input_num_elems_processed</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_elems_written_per_iteration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> stridex)</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;{</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="keywordflow">switch</span> (stridex)</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    {</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="keywordflow">case</span> 1:</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            <span class="keywordflow">return</span> num_elems_written_per_iteration;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        <span class="keywordflow">case</span> 2:</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="keywordflow">return</span> num_elems_written_per_iteration &lt;&lt; 1;</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        <span class="keywordflow">case</span> 3:</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="keywordflow">return</span> num_elems_written_per_iteration * 3;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <a class="code" href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a>(<span class="stringliteral">&quot;stridex not supported&quot;</span>);</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;}</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;} <span class="comment">// namespace detail</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;} <span class="comment">// namespace arm_compute</span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* ARM_COMPUTE_NEDIRECTCONVOLUTIONDETAIL_H */</span><span class="preprocessor"></span></div>
<div class="ttc" id="a_acl_requires_8h_xhtml"><div class="ttname"><a href="_acl_requires_8h.xhtml">AclRequires.h</a></div></div>
<div class="ttc" id="a_acl_requires_8h_xhtml_a5dad751dde99c6148c9e02cb2704f181"><div class="ttname"><a href="_acl_requires_8h.xhtml#a5dad751dde99c6148c9e02cb2704f181">ARM_COMPUTE_REQUIRES_TA</a></div><div class="ttdeci">#define ARM_COMPUTE_REQUIRES_TA(...)</div><div class="ttdoc">Requirements as template argument.</div><div class="ttdef"><b>Definition:</b> <a href="_acl_requires_8h_source.xhtml#l00043">AclRequires.h:43</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a6dc630a6ae9cc063b3924bcea8dee9d6"><div class="ttname"><a href="_error_8h.xhtml#a6dc630a6ae9cc063b3924bcea8dee9d6">ARM_COMPUTE_UNUSED</a></div><div class="ttdeci">#define ARM_COMPUTE_UNUSED(...)</div><div class="ttdoc">To avoid unused variables warnings.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00151">Error.h:151</a></div></div>
<div class="ttc" id="a_error_8h_xhtml_a7cf8d8b669b8f7b05680230be30d60f4"><div class="ttname"><a href="_error_8h.xhtml#a7cf8d8b669b8f7b05680230be30d60f4">ARM_COMPUTE_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR(msg)</div><div class="ttdoc">Print the given message then throw an std::runtime_error.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00354">Error.h:354</a></div></div>
<div class="ttc" id="a_n_e_fixed_point_8h_xhtml"><div class="ttname"><a href="_n_e_fixed_point_8h.xhtml">NEFixedPoint.h</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a1a949aa651397f3ecb893466c2046d98"><div class="ttname"><a href="clang-tidy_8h.xhtml#a1a949aa651397f3ecb893466c2046d98">vextq_f16</a></div><div class="ttdeci">float16x8_t vextq_f16(float16x8_t, float16x8_t, int)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00115">clang-tidy.h:115</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a2c2032af67addd543930e3027b04e8d4"><div class="ttname"><a href="clang-tidy_8h.xhtml#a2c2032af67addd543930e3027b04e8d4">vmulq_f16</a></div><div class="ttdeci">float16x8_t vmulq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00085">clang-tidy.h:85</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a608fb0db3de44492fcc96a836eadf11b"><div class="ttname"><a href="clang-tidy_8h.xhtml#a608fb0db3de44492fcc96a836eadf11b">vadd_f16</a></div><div class="ttdeci">float16x4_t vadd_f16(float16x4_t, float16x4_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00040">clang-tidy.h:40</a></div></div>
<div class="ttc" id="aclang-tidy_8h_xhtml_a79c9aca60e8cf347407d072168faf2aa"><div class="ttname"><a href="clang-tidy_8h.xhtml#a79c9aca60e8cf347407d072168faf2aa">vaddq_f16</a></div><div class="ttdeci">float16x8_t vaddq_f16(float16x8_t, float16x8_t)</div><div class="ttdef"><b>Definition:</b> <a href="clang-tidy_8h_source.xhtml#l00075">clang-tidy.h:75</a></div></div>
<div class="ttc" id="agemm__interleaved_8hpp_xhtml_a6fbca3dca9ecb372332fc525529cc086"><div class="ttname"><a href="gemm__interleaved_8hpp.xhtml#a6fbca3dca9ecb372332fc525529cc086">type</a></div><div class="ttdeci">decltype(strategy::transforms) typedef type</div><div class="ttdef"><b>Definition:</b> <a href="gemm__interleaved_8hpp_source.xhtml#l00261">gemm_interleaved.hpp:261</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a1ac67082e6f68cb7ed1939240fb6bdb5"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a1ac67082e6f68cb7ed1939240fb6bdb5">arm_compute::detail::store_results</a></div><div class="ttdeci">void store_results(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdoc">Stores a float32x4x2_t array into a memory location.</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a208468ac4ffbfe19d7fb03402ca927f6"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a208468ac4ffbfe19d7fb03402ca927f6">arm_compute::detail::store_results&lt; 3 &gt;</a></div><div class="ttdeci">void store_results&lt; 3 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00129">NEDirectConvolution3x3.h:129</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a2e42bf13e98e9df972c85e0789c20917"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a2e42bf13e98e9df972c85e0789c20917">arm_compute::detail::accumulate_results&lt; 2 &gt;</a></div><div class="ttdeci">void accumulate_results&lt; 2 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00139">NEDirectConvolutionDetail.h:139</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a703f0d5487e077348c2ac6bce80d9abb"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a703f0d5487e077348c2ac6bce80d9abb">arm_compute::detail::single_convolve_3x3_dilation</a></div><div class="ttdeci">float32x4_t single_convolve_3x3_dilation(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, int input_offset)</div><div class="ttdoc">Perform a 3x3 convolution for 4 consecutive elements on float32 when dilation.x() or dilation....</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00236">NEDirectConvolutionDetail.h:236</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a707ebe432919e3b95fc164bc682a6a52"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a707ebe432919e3b95fc164bc682a6a52">arm_compute::detail::accumulate_results</a></div><div class="ttdeci">void accumulate_results(float *buffer, const float32x4x2_t &amp;values)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a81988c246feb5c82855f969e072bce0b"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a81988c246feb5c82855f969e072bce0b">arm_compute::detail::accumulate_results&lt; 3 &gt;</a></div><div class="ttdeci">void accumulate_results&lt; 3 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00145">NEDirectConvolutionDetail.h:145</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a8412c50a5db2c94cc74cc899096c3556"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a8412c50a5db2c94cc74cc899096c3556">arm_compute::detail::accumulate_results&lt; 1 &gt;</a></div><div class="ttdeci">void accumulate_results&lt; 1 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00132">NEDirectConvolutionDetail.h:132</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_a87f8e27c52a10ec90100fd5b0fcf663d"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#a87f8e27c52a10ec90100fd5b0fcf663d">arm_compute::detail::convolve_3x3</a></div><div class="ttdeci">float32x4x2_t convolve_3x3(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_ab8ad28c706dc842c9d532e04ed697f0d"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ab8ad28c706dc842c9d532e04ed697f0d">arm_compute::detail::get_input_num_elems_processed</a></div><div class="ttdeci">int get_input_num_elems_processed(unsigned int num_elems_written_per_iteration)</div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_abaf3037739c190361ad3f827d73440a1"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#abaf3037739c190361ad3f827d73440a1">arm_compute::detail::store_results&lt; 2 &gt;</a></div><div class="ttdeci">void store_results&lt; 2 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00123">NEDirectConvolution3x3.h:123</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_acd78cf020600423cd03654ca37776f87"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#acd78cf020600423cd03654ca37776f87">arm_compute::detail::convolve_3x3_dilation</a></div><div class="ttdeci">float32x4x2_t convolve_3x3_dilation(const float *in_top, const float *in_mid, const float *in_low, const float32x4x3_t &amp;m0, const float32x4x3_t &amp;m1, const float32x4x3_t &amp;m2, const size_t dilation_x, unsigned int stridex, int input_offset=0)</div><div class="ttdoc">Perform a 3x3 convolution for 8 consecutive elements on float32 when dilation.x() or dilation....</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution_detail_8h_source.xhtml#l00281">NEDirectConvolutionDetail.h:281</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_ad61a01ef06cc3c41e4bb5006d9307687"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#ad61a01ef06cc3c41e4bb5006d9307687">arm_compute::detail::store_results&lt; 1 &gt;</a></div><div class="ttdeci">void store_results&lt; 1 &gt;(float *buffer, const float32x4x2_t &amp;values)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00116">NEDirectConvolution3x3.h:116</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1detail_xhtml_afaba543670e99c2483e0bd1996201ba3"><div class="ttname"><a href="namespacearm__compute_1_1detail.xhtml#afaba543670e99c2483e0bd1996201ba3">arm_compute::detail::load_matrix_row</a></div><div class="ttdeci">float32x4x3_t load_matrix_row(const float *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="_n_e_direct_convolution3x3_8h_source.xhtml#l00034">NEDirectConvolution3x3.h:34</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_1_1reference_xhtml_a48e7832f8e28c3f7fc0ded12467f8bb0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation_1_1reference.xhtml#a48e7832f8e28c3f7fc0ded12467f8bb0">arm_compute::test::validation::reference::accumulate</a></div><div class="ttdeci">SimpleTensor&lt; T2 &gt; accumulate(const SimpleTensor&lt; T1 &gt; &amp;src, DataType output_data_type)</div><div class="ttdef"><b>Definition:</b> <a href="_accumulate_8cpp_source.xhtml#l00038">Accumulate.cpp:38</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_1_1traits_xhtml_acf6b3be295be8dbd7897536bcd7561a3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper_1_1traits.xhtml#acf6b3be295be8dbd7897536bcd7561a3">arm_compute::wrapper::traits::neon_bitvector_tag_t</a></div><div class="ttdeci">typename neon_bitvector&lt; T, BW &gt;::tag_type neon_bitvector_tag_t</div><div class="ttdoc">Helper type template to get the tag type of a neon vector.</div><div class="ttdef"><b>Definition:</b> <a href="src_2core_2_n_e_o_n_2wrapper_2_traits_8h_source.xhtml#l00141">traits.h:141</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a2902775707bc7bf7d6da1bda1cc15783"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a2902775707bc7bf7d6da1bda1cc15783">arm_compute::wrapper::vgetlow</a></div><div class="ttdeci">uint8x8_t vgetlow(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="getlow_8h_source.xhtml#l00039">getlow.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a39e87435be178fba49b76f49426ef873"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a39e87435be178fba49b76f49426ef873">arm_compute::wrapper::vdup_n</a></div><div class="ttdeci">uint8x8_t vdup_n(uint8_t value, traits::vector_64_tag)</div><div class="ttdef"><b>Definition:</b> <a href="dup__n_8h_source.xhtml#l00041">dup_n.h:41</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4287931a2912ecb6cece71219ca5478c"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4287931a2912ecb6cece71219ca5478c">arm_compute::wrapper::vmla</a></div><div class="ttdeci">uint8x8_t vmla(const uint8x8_t &amp;a, const uint8x8_t &amp;b, const uint8x8_t &amp;c)</div><div class="ttdef"><b>Definition:</b> <a href="mla_8h_source.xhtml#l00046">mla.h:46</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a4f61df728949636afc38761f6ab319d3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a4f61df728949636afc38761f6ab319d3">arm_compute::wrapper::vext_1</a></div><div class="ttdeci">uint8x8_t vext_1(uint8x8_t value_a, uint8x8_t value_b)</div><div class="ttdef"><b>Definition:</b> <a href="ext_8h_source.xhtml#l00039">ext.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a57b24ba39d5191e1946dcc87a7e88b10"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a57b24ba39d5191e1946dcc87a7e88b10">arm_compute::wrapper::vreinterpret</a></div><div class="ttdeci">int16x4_t vreinterpret(const uint16x4_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="reinterpret_8h_source.xhtml#l00044">reinterpret.h:44</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a66c8dd218a4863a14fec363e3dd13dc4"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a66c8dd218a4863a14fec363e3dd13dc4">arm_compute::wrapper::vmul</a></div><div class="ttdeci">uint8x8_t vmul(const uint8x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="mul_8h_source.xhtml#l00039">mul.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a6ee3531f4293703c9b32e28421bfc061"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a6ee3531f4293703c9b32e28421bfc061">arm_compute::wrapper::vsetlane</a></div><div class="ttdeci">uint8x8_t vsetlane(const uint8_t value, const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="setlane_8h_source.xhtml#l00091">setlane.h:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a8dbba1731c32d176ae6635be1c65cbd6"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a8dbba1731c32d176ae6635be1c65cbd6">arm_compute::wrapper::vmovl</a></div><div class="ttdeci">uint16x8_t vmovl(const uint8x8_t &amp;a)</div><div class="ttdef"><b>Definition:</b> <a href="movl_8h_source.xhtml#l00039">movl.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_a95ee388aa7c5bccab918235dc538a6b3"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#a95ee388aa7c5bccab918235dc538a6b3">arm_compute::wrapper::vgethigh</a></div><div class="ttdeci">uint8x8_t vgethigh(const uint8x16_t val)</div><div class="ttdef"><b>Definition:</b> <a href="gethigh_8h_source.xhtml#l00039">gethigh.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa16ace001ab8287faa46d6962f369219"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa16ace001ab8287faa46d6962f369219">arm_compute::wrapper::vgetlane</a></div><div class="ttdeci">uint8_t vgetlane(const uint8x8_t vector, const unsigned int lane)</div><div class="ttdef"><b>Definition:</b> <a href="getlane_8h_source.xhtml#l00091">getlane.h:91</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa247597303350172b1bf018e34402d47"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa247597303350172b1bf018e34402d47">arm_compute::wrapper::vext_2</a></div><div class="ttdeci">uint8x8_t vext_2(uint8x8_t value_a, uint8x8_t value_b)</div><div class="ttdef"><b>Definition:</b> <a href="ext_8h_source.xhtml#l00040">ext.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_aa58ed08eab6c63a3afd3fe48ad06a8fa"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#aa58ed08eab6c63a3afd3fe48ad06a8fa">arm_compute::wrapper::vaddw</a></div><div class="ttdeci">uint16x8_t vaddw(const uint16x8_t &amp;a, const uint8x8_t &amp;b)</div><div class="ttdef"><b>Definition:</b> <a href="intrinsics_2add_8h_source.xhtml#l00107">add.h:107</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1wrapper_xhtml_ae1a6f6dde14fc3b0470cd0b08041ea9f"><div class="ttname"><a href="namespacearm__compute_1_1wrapper.xhtml#ae1a6f6dde14fc3b0470cd0b08041ea9f">arm_compute::wrapper::vload</a></div><div class="ttdeci">uint8x8_t vload(const uint8_t *ptr)</div><div class="ttdef"><b>Definition:</b> <a href="load_8h_source.xhtml#l00039">load.h:39</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">Copyright (c) 2017-2024 Arm Limited.</div><div class="ttdef"><b>Definition:</b> <a href="introduction_8dox_source.xhtml#l00024">introduction.dox:25</a></div></div>
<div class="ttc" id="awrapper_8h_xhtml"><div class="ttname"><a href="wrapper_8h.xhtml">wrapper.h</a></div><div class="ttdoc">Includes all wrapper headers at once.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_aebb8dcc11953d78e620bbef0b9e2183.xhtml">core</a></li><li class="navelem"><a class="el" href="dir_d91e1966cc57df4f49d1e07be7697713.xhtml">NEON</a></li><li class="navelem"><a class="el" href="dir_1ce938f580a6f304b99685e2c1dd19db.xhtml">kernels</a></li><li class="navelem"><a class="el" href="dir_47c52b626b579a630a004d74c906e8a5.xhtml">detail</a></li><li class="navelem"><a class="el" href="_n_e_direct_convolution_detail_8h.xhtml">NEDirectConvolutionDetail.h</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:43 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
