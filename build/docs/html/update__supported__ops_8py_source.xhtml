<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: scripts/update_supported_ops.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('update__supported__ops_8py_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">update_supported_ops.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="update__supported__ops_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml">    1</a></span>&#160;<span class="comment">#!/usr/bin/env python3</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"># -*- coding: utf-8 -*-</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2024 Arm Limited.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># SPDX-License-Identifier: MIT</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># Permission is hereby granted, free of charge, to any person obtaining a copy</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># of this software and associated documentation files (the &quot;Software&quot;), to</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># deal in the Software without restriction, including without limitation the</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># sell copies of the Software, and to permit persons to whom the Software is</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># furnished to do so, subject to the following conditions:</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># The above copyright notice and this permission notice shall be included in all</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># copies or substantial portions of the Software.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"># FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"># AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"># LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"># OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"># SOFTWARE.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="stringliteral">Updates the Doxygen documentation pages with a table of operators supported by Compute Library.</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral">The script builds up a table in XML format internally containing the different operators and their respective supported</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">compute backends, data types and layouts, and the equivalent operator in the Android Neural Networks API. The list of</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral">operators is pulled from the OperatorList.h header file and further implementation details are provided in the function</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="stringliteral">headers for the backend-specific operator e.g., NEStridedSlice.h.</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">Usage:</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">    python update_supported_ops.py</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">import</span> argparse</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">import</span> logging</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">import</span> re</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">from</span> enum <span class="keyword">import</span> Enum</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml">   45</a></span>&#160;<span class="keyword">class </span><a class="code" href="classupdate__supported__ops_1_1_states.xhtml">States</a>(Enum):</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#ae8b61202beac9cbe6ae7f0186e1ccd24">   46</a></span>&#160;    INIT = 0</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a90d445bfcebd71dd2dc33092d23755f2">   47</a></span>&#160;    DESCRIPTION = 1</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#ac01ef00c6ccc199fed0c3d94707ec141">   48</a></span>&#160;    DESCRIPTION_END = 2</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#afba551632d2802afef4ce19ff1af2177">   49</a></span>&#160;    IN_CLASS = 3</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a84e2c244f390d5a92b3fac81ccf6b91c">   50</a></span>&#160;    DATA_TYPE_START = 4</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a8c41a5074e7a3a7c053a9bf3f4fed43b">   51</a></span>&#160;    DATA_TYPE_END = 5</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a018ab1cad7a700b1a7a6ea303e79eece">   52</a></span>&#160;    NN_OPERATOR = 6</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a54b0f6aef1c6bc85fee00212783f22e6">   53</a></span>&#160;    NN_OPERATOR_END = 7</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a185dcfdabfe49db102b60a421a2f390a">   54</a></span>&#160;    SKIP_OPERATOR = 8</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a83e2bff5f3f9ea1f0d50ea2e71a955e6">   55</a></span>&#160;    DATA_LAYOUT_START = 9</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_states.xhtml#a6311e41c56d2fa710d095fe0af14dac7">   56</a></span>&#160;    DATA_LAYOUT_END = 10</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml">   59</a></span>&#160;<span class="keyword">class </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml">OperatorsTable</a>:</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#ae64f0875afe3067b97ba370b354b9213">   60</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#ae64f0875afe3067b97ba370b354b9213">__init__</a>(self):</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a5e3861cd0e27e7ce07a9c7f0924688de">   61</a></span>&#160;        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a5e3861cd0e27e7ce07a9c7f0924688de">project_dir</a>project_dir = Path(__file__).resolve().parents[1]  <span class="comment"># ComputeLibrary directory</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">   62</a></span>&#160;        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml = <span class="stringliteral">&quot;&quot;</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a54bc87d745b14da1268e00d2c66c12ce">   64</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a54bc87d745b14da1268e00d2c66c12ce">generate_operator_list</a>(self):</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        operator_list_head_file = self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a5e3861cd0e27e7ce07a9c7f0924688de">project_dir</a>project_dir / <span class="stringliteral">&quot;arm_compute&quot;</span> / <span class="stringliteral">&quot;runtime&quot;</span> / <span class="stringliteral">&quot;OperatorList.h&quot;</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        neon_file_name_prefix = <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a5e3861cd0e27e7ce07a9c7f0924688de">project_dir</a>project_dir / <span class="stringliteral">&quot;arm_compute&quot;</span> / <span class="stringliteral">&quot;runtime&quot;</span> / <span class="stringliteral">&quot;NEON&quot;</span> / <span class="stringliteral">&quot;functions&quot;</span> / <span class="stringliteral">&quot;NE&quot;</span>)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        cl_file_name_prefix = <a class="code" href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">str</a>(self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a5e3861cd0e27e7ce07a9c7f0924688de">project_dir</a>project_dir / <span class="stringliteral">&quot;arm_compute&quot;</span> / <span class="stringliteral">&quot;runtime&quot;</span> / <span class="stringliteral">&quot;CL&quot;</span> / <span class="stringliteral">&quot;functions&quot;</span> / <span class="stringliteral">&quot;CL&quot;</span>)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        logging.debug(operator_list_head_file)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        f = open(operator_list_head_file, <span class="stringliteral">&#39;r&#39;</span>)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment"># Iterates over the lines of the file</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        state = States.INIT</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        operator_desc = <span class="stringliteral">&quot;&quot;</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        nn_op_list = []</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> f:</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="comment"># /** ActivationLayer</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="comment"># *</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="comment"># * Description:</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="comment"># * Function to simulate an activation layer with the specified activation function.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="comment"># *</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="comment"># * Equivalent Android NNAPI Op:</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="comment"># * ANEURALNETWORKS_ELU</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment"># * ANEURALNETWORKS_HARD_SWISH</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="comment"># * ANEURALNETWORKS_LOGISTIC</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="comment"># * ANEURALNETWORKS_RELU</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="comment"># * ANEURALNETWORKS_RELU1</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="comment"># * ANEURALNETWORKS_RELU6</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="comment"># * ANEURALNETWORKS_TANH</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="comment"># *</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="comment"># */</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="comment"># Check for &quot;/**&quot; of the start of the operator</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            r = re.search(<span class="stringliteral">&#39;^\s*/\*\*(.*)&#39;</span>, line)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.INIT:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                <span class="comment"># Skip below ones</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">&#39;.*\&zwj;(not ported\&zwj;)&#39;</span>, line):</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    state = States.SKIP_OPERATOR</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">&#39;.*\&zwj;(only CL\&zwj;)&#39;</span>, line):</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    state = States.SKIP_OPERATOR</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">&#39;.*\&zwj;(no CL\&zwj;)&#39;</span>, line):</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    state = States.SKIP_OPERATOR</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">&#39;.*\&zwj;(skip\&zwj;)&#39;</span>, line):</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    state = States.SKIP_OPERATOR</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="comment"># Check&quot; */&quot;</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            r = re.match(<span class="stringliteral">&#39;\s*\*/\s*$&#39;</span>, line)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.SKIP_OPERATOR:</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                state = States.INIT</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment"># Check &quot; *&quot;</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            r = re.match(<span class="stringliteral">&#39;\s*\*\s*$&#39;</span>, line)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.SKIP_OPERATOR:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="comment"># Check non &quot; *&quot; lines</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            r = re.search(<span class="stringliteral">&#39;^\s*\*(.*)&#39;</span>, line)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.SKIP_OPERATOR:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="comment"># Check for &quot;/**&quot; of the start of the operator</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            r = re.search(<span class="stringliteral">&#39;^\s*/\*\*(.*)&#39;</span>, line)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.INIT:</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                tmp = r.groups()[0]</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                class_name = tmp.strip()</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                logging.debug(class_name)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="comment"># Check whether &quot;Description: &quot; exists</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            r = re.search(<span class="stringliteral">&#39;\s*\*\s*Description:\s*&#39;</span>, line)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.INIT:</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                state = States.DESCRIPTION</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="comment"># Treat description ends with a blank line only with &quot; *&quot;</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            r = re.match(<span class="stringliteral">&#39;\s*\*\s*$&#39;</span>, line)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DESCRIPTION:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                logging.debug(operator_desc)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                state = States.DESCRIPTION_END</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="comment"># Find continuing class description in the following lines</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            r = re.search(<span class="stringliteral">&#39;^\s*\*(.*)&#39;</span>, line)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DESCRIPTION:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                tmp = r.groups()[0]</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                operator_desc = operator_desc + <span class="stringliteral">&#39; &#39;</span> + tmp.strip()</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="comment"># Check whether &quot;Equivalent AndroidNN Op: &quot; exists</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            r = re.search(<span class="stringliteral">&#39;\s*\*\s*Equivalent Android NNAPI Op:\s*&#39;</span>, line)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DESCRIPTION_END:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                state = States.NN_OPERATOR</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="comment"># Treat AndroidNN Op ends with a blank line only with &quot; *&quot;</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            r = re.match(<span class="stringliteral">&#39;\s*\*\s*$&#39;</span>, line)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.NN_OPERATOR:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                logging.debug(nn_op_list)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                state = States.NN_OPERATOR_END</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                <span class="comment"># Check NE#class_name</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                neon_file_name = neon_file_name_prefix + class_name + <span class="stringliteral">&quot;.h&quot;</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                logging.debug(neon_file_name)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="comment"># Check CL#class_name</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                cl_file_name = cl_file_name_prefix + class_name + <span class="stringliteral">&quot;.h&quot;</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                logging.debug(cl_file_name)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="comment"># Check whether CL/Neon file exists</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keywordflow">if</span> Path(neon_file_name).is_file() <span class="keywordflow">and</span> Path(cl_file_name).is_file():</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    <span class="keywordflow">if</span> neon_file_name.find(<span class="stringliteral">&quot;NEElementwiseOperations.h&quot;</span>) != -1:</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        logging.debug(neon_file_name)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">generate_operator_common_info</a>generate_operator_common_info(class_name, operator_desc, nn_op_list, <span class="stringliteral">&quot;13&quot;</span>)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">elif</span> neon_file_name.find(<span class="stringliteral">&quot;NEElementwiseUnaryLayer.h&quot;</span>) != -1:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                        logging.debug(neon_file_name)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">generate_operator_common_info</a>generate_operator_common_info(class_name, operator_desc, nn_op_list, <span class="stringliteral">&quot;8&quot;</span>)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">generate_operator_common_info</a>generate_operator_common_info(class_name, operator_desc, nn_op_list, <span class="stringliteral">&quot;2&quot;</span>)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a1fe1969415e18e55395ec7eb5ae6097c">generate_operator_info</a>generate_operator_info(neon_file_name)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                    self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a0ce3816fddb747f046d8376900e4658e">generate_operator_cl_begin</a>generate_operator_cl_begin()</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a1fe1969415e18e55395ec7eb5ae6097c">generate_operator_info</a>generate_operator_info(cl_file_name)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                    <span class="keywordflow">if</span> neon_file_name.find(<span class="stringliteral">&quot;NELogical.h&quot;</span>) != -1:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        logging.debug(neon_file_name)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">generate_operator_common_info</a>generate_operator_common_info(class_name, operator_desc, nn_op_list, <span class="stringliteral">&quot;3&quot;</span>)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">generate_operator_common_info</a>generate_operator_common_info(class_name, operator_desc, nn_op_list, <span class="stringliteral">&quot;1&quot;</span>)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keywordflow">if</span> Path(neon_file_name).is_file():</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a1fe1969415e18e55395ec7eb5ae6097c">generate_operator_info</a>generate_operator_info(neon_file_name)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                    <span class="keywordflow">if</span> Path(cl_file_name).is_file():</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a1fe1969415e18e55395ec7eb5ae6097c">generate_operator_info</a>generate_operator_info(cl_file_name)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="comment"># Find continuing AndroidNN Op in the following lines</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            r = re.search(<span class="stringliteral">&#39;^\s*\*(.*)&#39;</span>, line)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.NN_OPERATOR:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                tmp = r.groups()[0]</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                nn_op = tmp.strip()</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                nn_op_list.append(nn_op)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment"># Treat operator ends with a blank line only with &quot; */&quot;</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            r = re.match(<span class="stringliteral">&#39;\s*\*/\s*$&#39;</span>, line)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.NN_OPERATOR_END:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                operator_desc = <span class="stringliteral">&quot;&quot;</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                nn_op_list = []</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                state = States.INIT</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        f.close()</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a1fe1969415e18e55395ec7eb5ae6097c">  206</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a1fe1969415e18e55395ec7eb5ae6097c">generate_operator_info</a>(self, file_name):</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        logging.debug(file_name)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        f = open(file_name, <span class="stringliteral">&#39;r&#39;</span>)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="comment"># iterates over the lines of the file</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        state = States.INIT</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        data_type_list = []</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        data_layout_list = []</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        io_list = []</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        class_no = 0</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> f:</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="comment"># Locate class definition by &quot;class...: public IFunction&quot;,</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment"># There are also exceptions, which will need to support in later version</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            r = re.match(<span class="stringliteral">&quot;\s*class\s+(\S+)\s*:\s*(public)*&quot;</span>, line)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.INIT:</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                class_name = r.groups()[0]</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                logging.debug(<span class="stringliteral">&quot;class name is %s&quot;</span> % (class_name))</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                state = States.IN_CLASS</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            r = re.match(<span class="stringliteral">&quot;\s*\}\;&quot;</span>, line)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.IN_CLASS:</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                state = States.INIT</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="comment"># * Valid data layouts:</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="comment"># * - All</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            r = re.search(<span class="stringliteral">&#39;\s*\*\s*Valid data layouts:&#39;</span>, line)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.IN_CLASS:</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                state = States.DATA_LAYOUT_START</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="comment"># Treat data configuration ends with a blank line only with &quot; *&quot;</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            r = re.match(<span class="stringliteral">&#39;\s*\*\s*$&#39;</span>, line)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DATA_LAYOUT_START:</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                state = States.DATA_LAYOUT_END</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="comment"># Data layout continues</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            r = re.search(<span class="stringliteral">&#39;\s*\*\s*\-\s*(.*)&#39;</span>, line)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DATA_LAYOUT_START:</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                tmp = r.groups()[0]</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                tmp = tmp.strip()</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                logging.debug(tmp)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                data_layout_list.append(tmp)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            <span class="comment"># * Valid data type configurations:</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            <span class="comment"># * |src0           |dst            |</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="comment"># * |:--------------|:--------------|</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="comment"># * |QASYMM8        |QASYMM8        |</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            <span class="comment"># * |QASYMM8_SIGNED |QASYMM8_SIGNED |</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="comment"># * |QSYMM16        |QSYMM16        |</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="comment"># * |F16            |F16            |</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="comment"># * |F32            |F32            |</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            r = re.search(<span class="stringliteral">&#39;\s*\*\s*Valid data type configurations:\s*&#39;</span>, line)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DATA_LAYOUT_END:</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                state = States.DATA_TYPE_START</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                logging.debug(line)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <span class="comment"># Treat data configuration ends with a blank line only with &quot; *&quot;</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            r = re.match(<span class="stringliteral">&#39;\s*\*\s*$&#39;</span>, line)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DATA_TYPE_START:</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                logging.debug(class_name)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                logging.debug(data_layout_list)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                logging.debug(io_list)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                logging.debug(data_type_list)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                class_no = class_no + 1</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <span class="keywordflow">if</span> class_no &gt; 1:</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                    logging.debug(class_no)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a0ce3816fddb747f046d8376900e4658e">generate_operator_cl_begin</a>generate_operator_cl_begin()</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a2dd19d64bb3f9c1ac3a98a3e3e0d50c8">generate_operator_dl_dt_info</a>generate_operator_dl_dt_info(class_name, data_layout_list, io_list, data_type_list)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                state = States.INIT</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                data_type_list = []</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                data_layout_list = []</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="comment"># Data type continues</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            r = re.search(<span class="stringliteral">&#39;\s*\*(.*)&#39;</span>, line)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">if</span> r <span class="keywordflow">and</span> state == States.DATA_TYPE_START:</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                tmp = r.groups()[0]</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                tmp = tmp.strip()</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                <span class="keywordflow">if</span> re.search(<span class="stringliteral">&#39;\|\:\-\-\-&#39;</span>, tmp):</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    <span class="comment"># Skip the table split row &quot;|:-----&quot;</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    tmp = tmp.strip()</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    <span class="keywordflow">if</span> re.search(<span class="stringliteral">&#39;.*(src|input|dst)&#39;</span>, tmp):</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        io_list = tmp.split(<span class="stringliteral">&#39;|&#39;</span>)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        data_type = tmp.split(<span class="stringliteral">&#39;|&#39;</span>)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                        logging.debug(data_type)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        data_type_list.append(data_type)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        f.close()</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a0ce3816fddb747f046d8376900e4658e">  298</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a0ce3816fddb747f046d8376900e4658e">generate_operator_cl_begin</a>(self):</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml += <span class="stringliteral">&quot;&lt;tr&gt;\n&quot;</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">  301</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">generate_operator_common_info</a>(self, class_name, operator_desc, nn_op_list, rowspan):</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        tmp = <span class="stringliteral">&quot;&lt;tr&gt;\n&quot;</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment"># Store class name</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;td rowspan=\&quot;&quot;</span> + rowspan + <span class="stringliteral">&quot;\&quot;&gt;&quot;</span> + class_name + <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;td rowspan=\&quot;&quot;</span> + rowspan + <span class="stringliteral">&quot;\&quot; style=\&quot;width:200px;\&quot;&gt;&quot;</span> + operator_desc + <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;td rowspan=\&quot;&quot;</span> + rowspan + <span class="stringliteral">&quot;\&quot;&gt;\n&quot;</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        tmp += <span class="stringliteral">&quot;      &lt;ul&gt;\n&quot;</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">for</span> item <span class="keywordflow">in</span> nn_op_list:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;            tmp += <span class="stringliteral">&quot;       &lt;li&gt;&quot;</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            tmp += item.strip()</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            tmp += <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        tmp += <span class="stringliteral">&quot;      &lt;/ul&gt;\n&quot;</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml += tmp</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a2dd19d64bb3f9c1ac3a98a3e3e0d50c8">  315</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a2dd19d64bb3f9c1ac3a98a3e3e0d50c8">generate_operator_dl_dt_info</a>(self, class_name, data_layout, io_list, data_type_list):</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        tmp = <span class="stringliteral">&quot;  &lt;td&gt;&quot;</span> + class_name + <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="comment"># Store data layout info</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;td&gt;\n&quot;</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        tmp += <span class="stringliteral">&quot;      &lt;ul&gt;\n&quot;</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">for</span> item <span class="keywordflow">in</span> data_layout:</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            tmp += <span class="stringliteral">&quot;       &lt;li&gt;&quot;</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            tmp += item.strip()</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            tmp += <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        tmp += <span class="stringliteral">&quot;      &lt;/ul&gt;\n&quot;</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;td&gt;\n&quot;</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="comment"># Store data type table</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        tmp += <span class="stringliteral">&quot;    &lt;table&gt;\n&quot;</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        tmp += <span class="stringliteral">&quot;    &lt;tr&gt;&quot;</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">for</span> io <span class="keywordflow">in</span> io_list:</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="comment"># Make sure it&#39;s not empty string</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">if</span> len(io) != 0:</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                tmp += <span class="stringliteral">&quot;&lt;th&gt;&quot;</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                tmp += io.strip()</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        tmp += <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">for</span> item <span class="keywordflow">in</span> data_type_list:</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            tmp += <span class="stringliteral">&quot;    &lt;tr&gt;&quot;</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">for</span> i <span class="keywordflow">in</span> item:</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="comment"># Make sure it&#39;s not empty string</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keywordflow">if</span> len(i) != 0:</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    tmp += <span class="stringliteral">&quot;&lt;td&gt;&quot;</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    tmp += i.strip()</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            tmp += <span class="stringliteral">&quot;\n&quot;</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        tmp += <span class="stringliteral">&quot;    &lt;/table&gt;\n&quot;</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml += tmp</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a04b8e0811c6c0ce93ab59cbc3d039008">  346</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a04b8e0811c6c0ce93ab59cbc3d039008">generate_table_prefix</a>(self):</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        tmp = <span class="stringliteral">&quot;&lt;table&gt;\n&quot;</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        tmp += <span class="stringliteral">&quot;&lt;caption id=\&quot;multi_row\&quot;&gt;&lt;/caption&gt;\n&quot;</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        tmp += <span class="stringliteral">&quot;&lt;tr&gt;\n&quot;</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;th&gt;Function\n&quot;</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;th&gt;Description\n&quot;</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;th&gt;Equivalent Android NNAPI Op\n&quot;</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;th&gt;Backends\n&quot;</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;th&gt;Data Layouts\n&quot;</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        tmp += <span class="stringliteral">&quot;  &lt;th&gt;Data Types\n&quot;</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml += tmp</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#ac20d4e2611150ec2325a9b9e4c5e8aaf">  358</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#ac20d4e2611150ec2325a9b9e4c5e8aaf">generate_table_ending</a>(self):</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml += <span class="stringliteral">&quot;&lt;/table&gt;\n&quot;</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#ae08fd4f17567d644a2f72e7a88f4c2d8">  361</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#ae08fd4f17567d644a2f72e7a88f4c2d8">dump_xml</a>(self):</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        print(self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="classupdate__supported__ops_1_1_operators_table.xhtml#a2e9a88e5f6bd42cd5b89ec7d7d467439">  364</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a2e9a88e5f6bd42cd5b89ec7d7d467439">update_dox_file</a>(self):</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        operator_list_dox = self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a5e3861cd0e27e7ce07a9c7f0924688de">project_dir</a>project_dir / <span class="stringliteral">&quot;docs&quot;</span> / <span class="stringliteral">&quot;user_guide&quot;</span> / <span class="stringliteral">&quot;operator_list.dox&quot;</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">with</span> open(operator_list_dox, <span class="stringliteral">&quot;r&quot;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            dox_content = f.read()</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="comment"># Check that there is only one non-indented table (This table should be the operator list)</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        x = re.findall(<span class="stringliteral">&quot;\n&lt;table&gt;&quot;</span>, dox_content)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        y = re.findall(<span class="stringliteral">&quot;\n&lt;/table&gt;&quot;</span>, dox_content)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">if</span> len(x) != 1 <span class="keywordflow">or</span> len(y) != 1:</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keywordflow">raise</span> RuntimeError(<span class="stringliteral">&quot;Invalid .dox file&quot;</span>)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        repl_str = <span class="stringliteral">&quot;\n&quot;</span> + self.<a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">xml</a>xml[:-1]  <span class="comment"># Extra / removed &quot;\n&quot; characters needed to make up for search regex</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        new_file = re.sub(<span class="stringliteral">&quot;\n&lt;table&gt;(.|\n)*\n&lt;\/table&gt;&quot;</span>, repl_str, dox_content)</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keyword">with</span> open(operator_list_dox, <span class="stringliteral">&quot;w&quot;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            f.write(new_file)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            print(<span class="stringliteral">&quot;Successfully updated operator_list.dox with the XML table of supported operators.&quot;</span>)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&quot;__main__&quot;</span>:</div>
<div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#a90eee7a4677ca8b1ed116364a24367f9">  385</a></span>&#160;    parser = argparse.ArgumentParser(</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        description=<span class="stringliteral">&quot;Updates the Compute Library documentation with a table of supported operators.&quot;</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    )</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    parser.add_argument(</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="stringliteral">&quot;--dump_xml&quot;</span>,</div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#a7aead736a07eaf25623ad7bfa1f0ee2d">  390</a></span>&#160;        type=bool,</div>
<div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#affb1327b18bf08a379d19eef89cf1ed1">  391</a></span>&#160;        default=<span class="keyword">False</span>,</div>
<div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#ae81948490ddf54e80a22593640178350">  392</a></span>&#160;        required=<span class="keyword">False</span>,</div>
<div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#a81ae9faedaa69e3e28e2960a0548df8d">  393</a></span>&#160;        help=<span class="stringliteral">&quot;Dump the supported operators table XML to stdout&quot;</span>,</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    )</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    parser.add_argument(</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="stringliteral">&quot;--debug&quot;</span>,</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        type=bool,</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        default=<span class="keyword">False</span>,</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        required=<span class="keyword">False</span>,</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        help=<span class="stringliteral">&quot;Enables logging, helpful for debugging. Default: False&quot;</span>,</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    )</div>
<div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#a8187411843a6284ffb964ef3fb9fcab3">  402</a></span>&#160;    args = parser.parse_args()</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordflow">if</span> args.debug:</div>
<div class="line"><a name="l00405"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#a387137c43ed9616d39ba90e890d181eb">  405</a></span>&#160;        logging.basicConfig(format=<span class="stringliteral">&quot;%(message)s&quot;</span>, level=logging.DEBUG)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="namespaceupdate__supported__ops.xhtml#ae005ce780f53b06c8b56b76e4cf060ff">  407</a></span>&#160;    table_xml = <a class="code" href="classupdate__supported__ops_1_1_operators_table.xhtml">OperatorsTable</a>()</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    table_xml.generate_table_prefix()</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    table_xml.generate_operator_list()</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    table_xml.generate_table_ending()</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    table_xml.update_dox_file()</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">if</span> args.dump_xml:</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        table_xml.dump_xml()</div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml">update_supported_ops.OperatorsTable</a></div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00059">update_supported_ops.py:59</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a04b8e0811c6c0ce93ab59cbc3d039008"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a04b8e0811c6c0ce93ab59cbc3d039008">update_supported_ops.OperatorsTable.generate_table_prefix</a></div><div class="ttdeci">def generate_table_prefix(self)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00346">update_supported_ops.py:346</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a0ce3816fddb747f046d8376900e4658e"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a0ce3816fddb747f046d8376900e4658e">update_supported_ops.OperatorsTable.generate_operator_cl_begin</a></div><div class="ttdeci">def generate_operator_cl_begin(self)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00298">update_supported_ops.py:298</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a1fe1969415e18e55395ec7eb5ae6097c"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a1fe1969415e18e55395ec7eb5ae6097c">update_supported_ops.OperatorsTable.generate_operator_info</a></div><div class="ttdeci">def generate_operator_info(self, file_name)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00206">update_supported_ops.py:206</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a2dd19d64bb3f9c1ac3a98a3e3e0d50c8"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a2dd19d64bb3f9c1ac3a98a3e3e0d50c8">update_supported_ops.OperatorsTable.generate_operator_dl_dt_info</a></div><div class="ttdeci">def generate_operator_dl_dt_info(self, class_name, data_layout, io_list, data_type_list)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00315">update_supported_ops.py:315</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a2e9a88e5f6bd42cd5b89ec7d7d467439"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a2e9a88e5f6bd42cd5b89ec7d7d467439">update_supported_ops.OperatorsTable.update_dox_file</a></div><div class="ttdeci">def update_dox_file(self)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00364">update_supported_ops.py:364</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a514df46b4babf055e4d2306e5df27788"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a514df46b4babf055e4d2306e5df27788">update_supported_ops.OperatorsTable.generate_operator_common_info</a></div><div class="ttdeci">def generate_operator_common_info(self, class_name, operator_desc, nn_op_list, rowspan)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00301">update_supported_ops.py:301</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a54bc87d745b14da1268e00d2c66c12ce"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a54bc87d745b14da1268e00d2c66c12ce">update_supported_ops.OperatorsTable.generate_operator_list</a></div><div class="ttdeci">def generate_operator_list(self)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00064">update_supported_ops.py:64</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a5e3861cd0e27e7ce07a9c7f0924688de"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a5e3861cd0e27e7ce07a9c7f0924688de">update_supported_ops.OperatorsTable.project_dir</a></div><div class="ttdeci">project_dir</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00061">update_supported_ops.py:61</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_a7d4a44f150312a29a9eea8d3075ff74d"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#a7d4a44f150312a29a9eea8d3075ff74d">update_supported_ops.OperatorsTable.xml</a></div><div class="ttdeci">xml</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00062">update_supported_ops.py:62</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_ac20d4e2611150ec2325a9b9e4c5e8aaf"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#ac20d4e2611150ec2325a9b9e4c5e8aaf">update_supported_ops.OperatorsTable.generate_table_ending</a></div><div class="ttdeci">def generate_table_ending(self)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00358">update_supported_ops.py:358</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_ae08fd4f17567d644a2f72e7a88f4c2d8"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#ae08fd4f17567d644a2f72e7a88f4c2d8">update_supported_ops.OperatorsTable.dump_xml</a></div><div class="ttdeci">def dump_xml(self)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00361">update_supported_ops.py:361</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_operators_table_xhtml_ae64f0875afe3067b97ba370b354b9213"><div class="ttname"><a href="classupdate__supported__ops_1_1_operators_table.xhtml#ae64f0875afe3067b97ba370b354b9213">update_supported_ops.OperatorsTable.__init__</a></div><div class="ttdeci">def __init__(self)</div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00060">update_supported_ops.py:60</a></div></div>
<div class="ttc" id="aclassupdate__supported__ops_1_1_states_xhtml"><div class="ttname"><a href="classupdate__supported__ops_1_1_states.xhtml">update_supported_ops.States</a></div><div class="ttdef"><b>Definition:</b> <a href="update__supported__ops_8py_source.xhtml#l00045">update_supported_ops.py:45</a></div></div>
<div class="ttc" id="anamespacecaffe__mnist__image__extractor_xhtml_a4b99ff73a8a869319570237b5c57ab03"><div class="ttname"><a href="namespacecaffe__mnist__image__extractor.xhtml#a4b99ff73a8a869319570237b5c57ab03">caffe_mnist_image_extractor.str</a></div><div class="ttdeci">str</div><div class="ttdef"><b>Definition:</b> <a href="caffe__mnist__image__extractor_8py_source.xhtml#l00021">caffe_mnist_image_extractor.py:21</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_53e6fa9553ac22a5646d2a2b2d7b97a1.xhtml">scripts</a></li><li class="navelem"><a class="el" href="update__supported__ops_8py.xhtml">update_supported_ops.py</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:41 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
