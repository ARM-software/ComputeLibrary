<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: AccessWindowTranspose Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classarm__compute_1_1_access_window_transpose.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">AccessWindowTranspose Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Implementation of a XY-transpose access pattern.  
 <a href="classarm__compute_1_1_access_window_transpose.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_access_window_transpose_8h_source.xhtml">AccessWindowTranspose.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for AccessWindowTranspose:</div>
<div class="dyncontent">
<div class="center"><!-- SVG 0 -->
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7ad9fe991410dc3550f6c4fd6e87a708"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#a7ad9fe991410dc3550f6c4fd6e87a708">update_window_if_needed</a> (<a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window) const override</td></tr>
<tr class="memdesc:a7ad9fe991410dc3550f6c4fd6e87a708"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shrink the window if padding is not large enough.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#a7ad9fe991410dc3550f6c4fd6e87a708">More...</a><br /></td></tr>
<tr class="separator:a7ad9fe991410dc3550f6c4fd6e87a708"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69cb887416c766f20cbec0677b3c8e88"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#a69cb887416c766f20cbec0677b3c8e88">update_padding_if_needed</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window) override</td></tr>
<tr class="memdesc:a69cb887416c766f20cbec0677b3c8e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increase the padding to be large enough for the window.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#a69cb887416c766f20cbec0677b3c8e88">More...</a><br /></td></tr>
<tr class="separator:a69cb887416c766f20cbec0677b3c8e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80edc371ba9f02d756aed720040878b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#ae80edc371ba9f02d756aed720040878b">compute_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> input_valid_region, bool border_undefined, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size) const override</td></tr>
<tr class="memdesc:ae80edc371ba9f02d756aed720040878b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the valid region based on access pattern and valid region of the inputs.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#ae80edc371ba9f02d756aed720040878b">More...</a><br /></td></tr>
<tr class="separator:ae80edc371ba9f02d756aed720040878b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae89409b4c8b08f06ab694e829223932b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#ae89409b4c8b08f06ab694e829223932b">AccessWindowRectangle</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info, int x, int y, int width, int height)</td></tr>
<tr class="memdesc:ae89409b4c8b08f06ab694e829223932b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor for a rectangular access pattern.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#ae89409b4c8b08f06ab694e829223932b">More...</a><br /></td></tr>
<tr class="separator:ae89409b4c8b08f06ab694e829223932b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8bd157ea64c2b37dec8b035b1b78a07"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#aa8bd157ea64c2b37dec8b035b1b78a07">AccessWindowRectangle</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info, int x, int y, int width, int height, float scale_x, float scale_y)</td></tr>
<tr class="memdesc:aa8bd157ea64c2b37dec8b035b1b78a07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor for a rectangular access pattern.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#aa8bd157ea64c2b37dec8b035b1b78a07">More...</a><br /></td></tr>
<tr class="separator:aa8bd157ea64c2b37dec8b035b1b78a07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c22b1f2583d9a660f7bb13e0b07fa1f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#a4c22b1f2583d9a660f7bb13e0b07fa1f">AccessWindowRectangle</a> (const <a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;)=delete</td></tr>
<tr class="memdesc:a4c22b1f2583d9a660f7bb13e0b07fa1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1_access_window_transpose.xhtml#a4c22b1f2583d9a660f7bb13e0b07fa1f">More...</a><br /></td></tr>
<tr class="separator:a4c22b1f2583d9a660f7bb13e0b07fa1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e61df99b87b429b0f8a7a1dfbc10139"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#a4e61df99b87b429b0f8a7a1dfbc10139">AccessWindowRectangle</a> (<a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a4e61df99b87b429b0f8a7a1dfbc10139"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#a4e61df99b87b429b0f8a7a1dfbc10139">More...</a><br /></td></tr>
<tr class="separator:a4e61df99b87b429b0f8a7a1dfbc10139"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae56df086bde04273b067b844c378db01"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#ae56df086bde04273b067b844c378db01">compute_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;input_valid_region) const</td></tr>
<tr class="memdesc:ae56df086bde04273b067b844c378db01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the valid region based on access pattern, valid region of the inputs and border mode.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#ae56df086bde04273b067b844c378db01">More...</a><br /></td></tr>
<tr class="separator:ae56df086bde04273b067b844c378db01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae80edc371ba9f02d756aed720040878b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml#ae80edc371ba9f02d756aed720040878b">compute_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> input_valid_region, bool border_undefined, <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> border_size) const override</td></tr>
<tr class="memdesc:ae80edc371ba9f02d756aed720040878b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the valid region based on access pattern and valid region of the inputs.  <a href="classarm__compute_1_1_access_window_transpose.xhtml#ae80edc371ba9f02d756aed720040878b">More...</a><br /></td></tr>
<tr class="separator:ae80edc371ba9f02d756aed720040878b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_access_window_rectangle"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_access_window_rectangle')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a></td></tr>
<tr class="memitem:ae89409b4c8b08f06ab694e829223932b inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#ae89409b4c8b08f06ab694e829223932b">AccessWindowRectangle</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info, int x, int y, int width, int height)</td></tr>
<tr class="memdesc:ae89409b4c8b08f06ab694e829223932b inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor for a rectangular access pattern.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#ae89409b4c8b08f06ab694e829223932b">More...</a><br /></td></tr>
<tr class="separator:ae89409b4c8b08f06ab694e829223932b inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8bd157ea64c2b37dec8b035b1b78a07 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#aa8bd157ea64c2b37dec8b035b1b78a07">AccessWindowRectangle</a> (<a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *info, int x, int y, int width, int height, float scale_x, float scale_y)</td></tr>
<tr class="memdesc:aa8bd157ea64c2b37dec8b035b1b78a07 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor for a rectangular access pattern.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#aa8bd157ea64c2b37dec8b035b1b78a07">More...</a><br /></td></tr>
<tr class="separator:aa8bd157ea64c2b37dec8b035b1b78a07 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c22b1f2583d9a660f7bb13e0b07fa1f inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#a4c22b1f2583d9a660f7bb13e0b07fa1f">AccessWindowRectangle</a> (const <a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;)=delete</td></tr>
<tr class="memdesc:a4c22b1f2583d9a660f7bb13e0b07fa1f inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#a4c22b1f2583d9a660f7bb13e0b07fa1f">More...</a><br /></td></tr>
<tr class="separator:a4c22b1f2583d9a660f7bb13e0b07fa1f inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e61df99b87b429b0f8a7a1dfbc10139 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#a4e61df99b87b429b0f8a7a1dfbc10139">AccessWindowRectangle</a> (<a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a4e61df99b87b429b0f8a7a1dfbc10139 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#a4e61df99b87b429b0f8a7a1dfbc10139">More...</a><br /></td></tr>
<tr class="separator:a4e61df99b87b429b0f8a7a1dfbc10139 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdf21e65ee4cc7cf79a43e3de64dcc7e inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#abdf21e65ee4cc7cf79a43e3de64dcc7e">operator=</a> (const <a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;)=delete</td></tr>
<tr class="memdesc:abdf21e65ee4cc7cf79a43e3de64dcc7e inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#abdf21e65ee4cc7cf79a43e3de64dcc7e">More...</a><br /></td></tr>
<tr class="separator:abdf21e65ee4cc7cf79a43e3de64dcc7e inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21ab33d8ab185c1321f4c213335e6802 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#a21ab33d8ab185c1321f4c213335e6802">operator=</a> (<a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a21ab33d8ab185c1321f4c213335e6802 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#a21ab33d8ab185c1321f4c213335e6802">More...</a><br /></td></tr>
<tr class="separator:a21ab33d8ab185c1321f4c213335e6802 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32733393d362ac5cd19a588bb248e5c6 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#a32733393d362ac5cd19a588bb248e5c6">~AccessWindowRectangle</a> ()=default</td></tr>
<tr class="memdesc:a32733393d362ac5cd19a588bb248e5c6 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#a32733393d362ac5cd19a588bb248e5c6">More...</a><br /></td></tr>
<tr class="separator:a32733393d362ac5cd19a588bb248e5c6 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a718cd06814abc688b1abdc729ed3a71b inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#a718cd06814abc688b1abdc729ed3a71b">set_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;input_valid_region, bool border_undefined=false, const <a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a> &amp;border_size=<a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0))</td></tr>
<tr class="memdesc:a718cd06814abc688b1abdc729ed3a71b inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region based on access pattern, valid region of the inputs and border mode.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#a718cd06814abc688b1abdc729ed3a71b">More...</a><br /></td></tr>
<tr class="separator:a718cd06814abc688b1abdc729ed3a71b inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae56df086bde04273b067b844c378db01 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#ae56df086bde04273b067b844c378db01">compute_valid_region</a> (const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;window, const <a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> &amp;input_valid_region) const</td></tr>
<tr class="memdesc:ae56df086bde04273b067b844c378db01 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compute the valid region based on access pattern, valid region of the inputs and border mode.  <a href="classarm__compute_1_1_access_window_rectangle.xhtml#ae56df086bde04273b067b844c378db01">More...</a><br /></td></tr>
<tr class="separator:ae56df086bde04273b067b844c378db01 inherit pub_methods_classarm__compute_1_1_access_window_rectangle"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_access_window"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_access_window')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_access_window.xhtml">IAccessWindow</a></td></tr>
<tr class="memitem:abc3996ab36cfa27811d661debfca5b5f inherit pub_methods_classarm__compute_1_1_i_access_window"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_access_window.xhtml#abc3996ab36cfa27811d661debfca5b5f">~IAccessWindow</a> ()=default</td></tr>
<tr class="memdesc:abc3996ab36cfa27811d661debfca5b5f inherit pub_methods_classarm__compute_1_1_i_access_window"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default virtual destructor.  <a href="classarm__compute_1_1_i_access_window.xhtml#abc3996ab36cfa27811d661debfca5b5f">More...</a><br /></td></tr>
<tr class="separator:abc3996ab36cfa27811d661debfca5b5f inherit pub_methods_classarm__compute_1_1_i_access_window"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Implementation of a XY-transpose access pattern. </p>

<p class="definition">Definition at line <a class="el" href="_access_window_transpose_8h_source.xhtml#l00038">38</a> of file <a class="el" href="_access_window_transpose_8h_source.xhtml">AccessWindowTranspose.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a4e61df99b87b429b0f8a7a1dfbc10139"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e61df99b87b429b0f8a7a1dfbc10139">&#9670;&nbsp;</a></span>AccessWindowRectangle() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a id="a4c22b1f2583d9a660f7bb13e0b07fa1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c22b1f2583d9a660f7bb13e0b07fa1f">&#9670;&nbsp;</a></span>AccessWindowRectangle() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="ae89409b4c8b08f06ab694e829223932b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae89409b4c8b08f06ab694e829223932b">&#9670;&nbsp;</a></span>AccessWindowRectangle() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor for a rectangular access pattern. </p>
<dl class="section note"><dt>Note</dt><dd>Width and height have to be non-negative.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info of the accessed kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Offset of the access in X direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>Offset of the access in Y direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Number of elements that are accessed in X direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Number of elements that are accessed in Y direction. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_access_window_8h_source.xhtml#l00123">123</a> of file <a class="el" href="_i_access_window_8h_source.xhtml">IAccessWindow.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        : <a class="code" href="classarm__compute_1_1_access_window_transpose.xhtml#ae89409b4c8b08f06ab694e829223932b">AccessWindowRectangle</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, x, y, width, height, 1.f, 1.f)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="ttc" id="aclassarm__compute_1_1_access_window_transpose_xhtml_ae89409b4c8b08f06ab694e829223932b"><div class="ttname"><a href="classarm__compute_1_1_access_window_transpose.xhtml#ae89409b4c8b08f06ab694e829223932b">arm_compute::AccessWindowTranspose::AccessWindowRectangle</a></div><div class="ttdeci">AccessWindowRectangle(ITensorInfo *info, int x, int y, int width, int height)</div><div class="ttdoc">Constructor for a rectangular access pattern.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00123">IAccessWindow.h:123</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa8bd157ea64c2b37dec8b035b1b78a07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8bd157ea64c2b37dec8b035b1b78a07">&#9670;&nbsp;</a></span>AccessWindowRectangle() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml">AccessWindowRectangle</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor for a rectangular access pattern. </p>
<dl class="section note"><dt>Note</dt><dd>Width, height and scale have to be non-negative.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">info</td><td><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface.">Tensor</a> info of the accessed kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>Offset of the access in X direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>Offset of the access in Y direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Number of elements that are accessed in X direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Number of elements that are accessed in Y direction. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_x</td><td>Ratio along the X direction between the window used by the execute_window_loop and the rectangular access pattern defined </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">scale_y</td><td>Ratio along the Y direction between the window used by the execute_window_loop and the rectangular access pattern defined </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_i_access_window_8h_source.xhtml#l00140">140</a> of file <a class="el" href="_i_access_window_8h_source.xhtml">IAccessWindow.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        : _info(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>), _x(x), _y(y), _width(width), _height(height), _scale_x(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a>), _scale_y(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(width &lt; 0);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(height &lt; 0);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">scale_x</a> &lt; 0);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">scale_y</a> &lt; 0);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div>
<div class="ttc" id="a_error_8h_xhtml_a54a6080c9f4df1f908e57a9bbb46f5da"><div class="ttname"><a href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON(cond)</div><div class="ttdoc">If the condition is true then an error message is printed and an exception thrown.</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00466">Error.h:466</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_aaaab31fd732b950bf0d4b98f00e259c0"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aaaab31fd732b950bf0d4b98f00e259c0">arm_compute::test::validation::scale_y</a></div><div class="ttdeci">const float scale_y</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00260">Scale.cpp:260</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_ae78a2afc8cb469d8629dc419237e5c68"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ae78a2afc8cb469d8629dc419237e5c68">arm_compute::test::validation::scale_x</a></div><div class="ttdeci">const float scale_x</div><div class="ttdef"><b>Definition:</b> <a href="validation_2_n_e_o_n_2_scale_8cpp_source.xhtml#l00259">Scale.cpp:259</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae56df086bde04273b067b844c378db01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae56df086bde04273b067b844c378db01">&#9670;&nbsp;</a></span>compute_valid_region() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> compute_valid_region</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compute the valid region based on access pattern, valid region of the inputs and border mode. </p>
<dl class="section note"><dt>Note</dt><dd>This method assumes that there is no border.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window of the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_valid_region</td><td>Combined valid region of all inputs.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a valid region. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_access_window_8cpp_source.xhtml#l00182">182</a> of file <a class="el" href="_i_access_window_8cpp_source.xhtml">IAccessWindow.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classarm__compute_1_1_access_window_transpose.xhtml#ae56df086bde04273b067b844c378db01">compute_valid_region</a>(window, input_valid_region, <span class="keyword">false</span>, <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0));</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_access_window_transpose_xhtml_ae56df086bde04273b067b844c378db01"><div class="ttname"><a href="classarm__compute_1_1_access_window_transpose.xhtml#ae56df086bde04273b067b844c378db01">arm_compute::AccessWindowTranspose::compute_valid_region</a></div><div class="ttdeci">ValidRegion compute_valid_region(const Window &amp;window, const ValidRegion &amp;input_valid_region) const</div><div class="ttdoc">Compute the valid region based on access pattern, valid region of the inputs and border mode.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8cpp_source.xhtml#l00182">IAccessWindow.cpp:32</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml">arm_compute::BorderSize</a></div><div class="ttdoc">Container for 2D border size.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00239">Types.h:240</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_access_window_8h_source.xhtml#l00063">arm_compute::adjust_up()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, and <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>.</p>

</div>
</div>
<a id="ae80edc371ba9f02d756aed720040878b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae80edc371ba9f02d756aed720040878b">&#9670;&nbsp;</a></span>compute_valid_region() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> compute_valid_region</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the valid region based on access pattern and valid region of the inputs. </p>
<dl class="section note"><dt>Note</dt><dd>This method assumes that all elements written by the kernel are valid.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window of the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_valid_region</td><td>Combined valid region of all inputs. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>Undefined borders are excluded from the valid region. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_size</td><td>Size of the border around the XY-plane of the tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a valid region. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_i_access_window_8cpp_source.xhtml#l00198">198</a> of file <a class="el" href="_i_access_window_8cpp_source.xhtml">IAccessWindow.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">if</span> (_info == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">return</span> input_valid_region;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;anchor = input_valid_region.anchor;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>  old_anchor(anchor);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = input_valid_region.shape;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">if</span> (!border_undefined)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        border_size = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// Start of the valid region is equal to the start of the window. But it</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// cannot be less than the start of the input&#39;s valid region plus the border</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// size required by this kernel (if undefined).</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// Additionally the valid region is shifted by the offset that is used by</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// the kernel to write back output values.</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(0, std::max&lt;int&gt;(window.x().start() * _scale_x, anchor[0] + border_size.left) + _x);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span> (_info-&gt;num_dimensions() &gt; 1)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, std::max&lt;int&gt;(window.y().start() * _scale_y, anchor[1] + border_size.top) + _y);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// End of the valid region is equal to the start of the last write of the</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// kernel plus the number of written elements. (This assumes that all</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// written elements are valid). Nevertheless the end cannot be larger than</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// the end of the input&#39;s valid region minus the border size.</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// Note: not the end points of the region are stored but its size. Thus the</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// old size is first converted into end points to compared against the</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// execution window. Afterwards the new end points are converted back into</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// a size of the region.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(0, std::min&lt;int&gt;(old_anchor[0] + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0] - border_size.right,</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                               (window.x().end() - window.x().step()) * _scale_x + _width) -</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                     anchor[0]);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> (_info-&gt;num_dimensions() &gt; 1)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(1, std::min&lt;int&gt;(old_anchor[1] + <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1] - border_size.bottom,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                                   (window.y().end() - window.y().step()) * _scale_y + _height) -</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                         anchor[1]);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// For higher dimensions use the intersection of the window size and the</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="comment">// valid region of the input</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 2; d &lt; _info-&gt;num_dimensions(); ++d)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(d, std::max(window[d].start(), input_valid_region.anchor[d]));</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(d, std::min&lt;int&gt;(window[d].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), input_valid_region.shape[d]) - anchor[d]);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> input_valid_region;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_coordinates_xhtml"><div class="ttname"><a href="classarm__compute_1_1_coordinates.xhtml">arm_compute::Coordinates</a></div><div class="ttdoc">Coordinates of an item.</div><div class="ttdef"><b>Definition:</b> <a href="_coordinates_8h_source.xhtml#l00037">Coordinates.h:38</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_dimensions_xhtml_a71d9685536fceae3487102a0cc105397"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">arm_compute::Dimensions::set</a></div><div class="ttdeci">void set(size_t dimension, T value, bool increase_dim_unit=true)</div><div class="ttdoc">Accessor to set the value of one of the dimensions.</div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00075">Dimensions.h:75</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_tensor_shape_xhtml"><div class="ttname"><a href="classarm__compute_1_1_tensor_shape.xhtml">arm_compute::TensorShape</a></div><div class="ttdoc">Shape of a tensor.</div><div class="ttdef"><b>Definition:</b> <a href="_tensor_shape_8h_source.xhtml#l00039">TensorShape.h:40</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1mlgo_1_1parser_xhtml_a9fe67a1da3e2628bade473115ecbb5be"><div class="ttname"><a href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">arm_compute::mlgo::parser::end</a></div><div class="ttdeci">void end(TokenStream &amp;in, bool &amp;valid)</div><div class="ttdef"><b>Definition:</b> <a href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">MLGOParser.cpp:283</a></div></div>
<div class="ttc" id="anamespacearm__compute_1_1test_1_1validation_xhtml_a45cde9abb508c62d67c3bb2b9bf566a5"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">arm_compute::test::validation::shape</a></div><div class="ttdeci">shape</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00114">DFT.cpp:115</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ae80edc371ba9f02d756aed720040878b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae80edc371ba9f02d756aed720040878b">&#9670;&nbsp;</a></span>compute_valid_region() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> compute_valid_region </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td>
          <td class="paramname"><em>input_valid_region</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>border_undefined</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>&#160;</td>
          <td class="paramname"><em>border_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compute the valid region based on access pattern and valid region of the inputs. </p>
<dl class="section note"><dt>Note</dt><dd>This method assumes that all elements written by the kernel are valid.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td>Execution window of the kernel. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_valid_region</td><td>Combined valid region of all inputs. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_undefined</td><td>Undefined borders are excluded from the valid region. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">border_size</td><td>Size of the border around the XY-plane of the tensor.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a valid region. </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#ae80edc371ba9f02d756aed720040878b">AccessWindowRectangle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="_access_window_transpose_8cpp_source.xhtml">AccessWindowTranspose.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (_info == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">return</span> input_valid_region;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;anchor = input_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>  = input_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a>  old_anchor(anchor);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>  old_shape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">if</span> (!border_undefined)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        border_size = <a class="code" href="structarm__compute_1_1_border_size.xhtml">BorderSize</a>(0);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// Start of the valid region is equal to the start of the window. But it</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// cannot be less than the start of the input&#39;s valid region plus the border</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// size required by this kernel (if undefined).</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// Additionally the valid region is shifted by the offset that is used by</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// the kernel to write back output values.</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// As the relation between input and output is transposed window.y() is</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// used for x anchor and window.x() for y anchor.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span> (_info-&gt;dimension(0) &gt; 1)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(0, std::max&lt;int&gt;(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_x, anchor[1] + border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>) + _x);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(1, std::max&lt;int&gt;(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_y, anchor[0] + border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>) + _y);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// End of the valid region is equal to the start of the last write of the</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// kernel plus the number of written elements. (This assumes that all</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// written elements are valid). Nevertheless the end cannot be larger than</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// the end of the input&#39;s valid region minus the border size.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Note: not the end points of the region are stored but its size. Thus the</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// old size is first converted into end points to compared against the</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// execution window. Afterwards the new end points are converted back into</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// a size of the region.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// As the relation between input and output is transposed window.y() is</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// used for x shape and window.x() for y shape.</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (_info-&gt;dimension(0) &gt; 1)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(0, std::min&lt;int&gt;((old_anchor[1] + old_shape[0]) * _scale_x - border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                                   (window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()) * _scale_x + _width) -</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                         anchor[0]);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(1, std::min&lt;int&gt;((old_anchor[0] + old_shape[1]) * _scale_y - border_size.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a>,</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                               (window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()) * _scale_y + _height) -</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                     anchor[1]);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// For higher dimensions use the intersection of the window size and the</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="comment">// valid region of the input</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> d = 2; d &lt; _info-&gt;num_dimensions(); ++d)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        anchor.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a71d9685536fceae3487102a0cc105397">set</a>(d, std::max(window[d].start(), input_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">anchor</a>[d]));</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>.set(d, std::min&lt;int&gt;(window[d].<a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a>(), input_valid_region.<a class="code" href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">shape</a>[d]) - anchor[d]);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">return</span> input_valid_region;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a0f590bfcf19110f44efc502e7b5c1d9e"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">arm_compute::Window::Dimension::end</a></div><div class="ttdeci">constexpr int end() const</div><div class="ttdoc">Return the end of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00101">Window.h:101</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_a918580dc9188825d67dbb203a43d02fe"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">arm_compute::Window::Dimension::step</a></div><div class="ttdeci">constexpr int step() const</div><div class="ttdoc">Return the step of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00106">Window.h:106</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml_ab24e31d1a4830bf79564ee902ec6c060"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">arm_compute::Window::Dimension::start</a></div><div class="ttdeci">constexpr int start() const</div><div class="ttdoc">Return the start of the dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00096">Window.h:96</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a1b522b073f3ca32d24eb4e03495ef8a6"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">arm_compute::Window::y</a></div><div class="ttdeci">constexpr const Dimension &amp; y() const</div><div class="ttdoc">Alias to access the second dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00167">Window.h:167</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_a273fd2ecdd45169b2f702f01a7e5e382"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">arm_compute::Window::x</a></div><div class="ttdeci">constexpr const Dimension &amp; x() const</div><div class="ttdoc">Alias to access the first dimension of the window.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00158">Window.h:158</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a05374b750b0fc472c34ee61e6f028bba"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">arm_compute::BorderSize::left</a></div><div class="ttdeci">unsigned int left</div><div class="ttdoc">left of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00342">Types.h:342</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a3fdd42ea34070a54e696b3adc28c4be3"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">arm_compute::BorderSize::top</a></div><div class="ttdeci">unsigned int top</div><div class="ttdoc">top of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00339">Types.h:339</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a78b0fed184c642b78f32fd34b228a5f9"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">arm_compute::BorderSize::right</a></div><div class="ttdeci">unsigned int right</div><div class="ttdoc">right of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00340">Types.h:340</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_border_size_xhtml_a802ffcf1b49237efe5be8a314d3f3869"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">arm_compute::BorderSize::bottom</a></div><div class="ttdeci">unsigned int bottom</div><div class="ttdoc">bottom of the border</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00341">Types.h:341</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a1fcd64682b37ed3c2098d0094ce788d8"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a1fcd64682b37ed3c2098d0094ce788d8">arm_compute::ValidRegion::shape</a></div><div class="ttdeci">TensorShape shape</div><div class="ttdoc">Shape of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00223">Types.h:223</a></div></div>
<div class="ttc" id="astructarm__compute_1_1_valid_region_xhtml_a55a69b397082accd94221dd10b722cf7"><div class="ttname"><a href="structarm__compute_1_1_valid_region.xhtml#a55a69b397082accd94221dd10b722cf7">arm_compute::ValidRegion::anchor</a></div><div class="ttdeci">Coordinates anchor</div><div class="ttdoc">Anchor for the start of the valid region.</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00222">Types.h:222</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00222">ValidRegion::anchor</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="_dimensions_8h_source.xhtml#l00075">Dimensions&lt; T &gt;::set()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00223">ValidRegion::shape</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a69cb887416c766f20cbec0677b3c8e88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69cb887416c766f20cbec0677b3c8e88">&#9670;&nbsp;</a></span>update_padding_if_needed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool update_padding_if_needed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Increase the padding to be large enough for the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> used by the kernel.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the padding has been changed. </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#a69cb887416c766f20cbec0677b3c8e88">AccessWindowRectangle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00201">201</a> of file <a class="el" href="_access_window_transpose_8cpp_source.xhtml">AccessWindowTranspose.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Only update the padding if the tensor allows it</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span> (_info == <span class="keyword">nullptr</span> || !_info-&gt;is_resizable())</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="_error_8h.xhtml#a54a6080c9f4df1f908e57a9bbb46f5da">ARM_COMPUTE_ERROR_ON</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() == 0);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_x = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_x + _x;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_x = (window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()) * _scale_x + _x + _width;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_y = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_y + _y;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_y = (window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() - window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()) * _scale_y + _y + _height;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a> = _info-&gt;tensor_shape();</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="structarm__compute_1_1_border_size.xhtml">PaddingSize</a> padding;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a05374b750b0fc472c34ee61e6f028bba">left</a>   = std::max(0, -min_x);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a78b0fed184c642b78f32fd34b228a5f9">right</a>  = std::max&lt;int&gt;(0, max_x - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0]);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a3fdd42ea34070a54e696b3adc28c4be3">top</a>    = std::max(0, -min_y);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#a802ffcf1b49237efe5be8a314d3f3869">bottom</a> = std::max&lt;int&gt;(0, max_y - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1]);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// Update strides in tensor info</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">return</span> _info-&gt;extend_padding(padding);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00466">ARM_COMPUTE_ERROR_ON</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00341">BorderSize::bottom</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00342">BorderSize::left</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00340">BorderSize::right</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l00339">BorderSize::top</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<a id="a7ad9fe991410dc3550f6c4fd6e87a708"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ad9fe991410dc3550f6c4fd6e87a708">&#9670;&nbsp;</a></span>update_window_if_needed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool update_window_if_needed </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_window.xhtml">Window</a> &amp;&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shrink the window if padding is not large enough. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">window</td><td><a class="el" href="classarm__compute_1_1_window.xhtml" title="Describe a multidimensional execution window.">Window</a> used by the kernel.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the window has been changed. </dd></dl>

<p>Reimplemented from <a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml#a7ad9fe991410dc3550f6c4fd6e87a708">AccessWindowRectangle</a>.</p>

<p class="definition">Definition at line <a class="el" href="_access_window_transpose_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="_access_window_transpose_8cpp_source.xhtml">AccessWindowTranspose.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// Only update the window size if we can&#39;t use padding</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">if</span> (_info == <span class="keyword">nullptr</span> || _info-&gt;is_resizable())</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>                = _info-&gt;tensor_shape();</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">const</span> <a class="code" href="classarm__compute_1_1_strides.xhtml">Strides</a>     &amp;strides              = _info-&gt;strides_in_bytes();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span>       offset_first_element = _info-&gt;offset_first_element_in_bytes();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">bool</span> window_modified = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">int</span> front_pad_y = 0;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Transpose and scale</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_y = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_y + _y;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_y = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() * _scale_y + _y;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// Adjust window start for output&#39;s Y dimension (so X in (input) window)</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (min_y &lt; 0)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Calculate rows available above the tensor</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> front_pad_y_available = -offset_first_element / strides[1];</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (min_y &lt; front_pad_y_available)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// Not enough padding available, need to shrink the window</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> start = <a class="code" href="namespacearm__compute.xhtml#ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2">adjust_up</a>(min_y, front_pad_y_available, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() * _scale_y) - _y;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(0, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(start / _scale_y, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>(), window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()));</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            window_modified = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="comment">// Update front padding with reconstructed value</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        front_pad_y = std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(-window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_y)) - _y);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Adjust window end for Y dimension</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">if</span> (max_y &gt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1]))</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> stride_z = _info-&gt;num_dimensions() &gt; 2 ? strides[2] : _info-&gt;total_size();</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// Calculate rows available below the tensor</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> tail_pad_y_available = (stride_z / strides[1]) - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1] - front_pad_y;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1]) + tail_pad_y_available &lt; max_y)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="comment">// Not enough padding available, need to shrink the window</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> = <a class="code" href="namespacearm__compute.xhtml#a41c1523098580451b378f76b8c37a0f0">adjust_down</a>(max_y, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[1] + tail_pad_y_available, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() * _scale_y) +</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() * _scale_y - _y - _height;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(0, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>(), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> / _scale_y, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a273fd2ecdd45169b2f702f01a7e5e382">x</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()));</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            window_modified = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordtype">int</span> front_pad_x = 0;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// Transpose and scale</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> min_x = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_x + _x;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> max_x = window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>() * _scale_x + _x;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> stride_y = _info-&gt;num_dimensions() &gt; 1 ? strides[1] : _info-&gt;total_size();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Adjust window start for X dimension</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">if</span> (min_x &lt; 0)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> front_pad_x_available =</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            -std::min&lt;int&gt;(<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(offset_first_element) - front_pad_y * strides[1],</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                           stride_y - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0] * strides[0]) /</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(strides[0]);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span> (min_x &lt; front_pad_x_available)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="comment">// Not enough padding available, need to shrink the window</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> start = <a class="code" href="namespacearm__compute.xhtml#ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2">adjust_up</a>(min_x, front_pad_x_available, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() * _scale_x) - _x;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(1, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(start / _scale_x, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a0f590bfcf19110f44efc502e7b5c1d9e">end</a>(), window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            window_modified = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// Update front padding with reconstructed value</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        front_pad_x = std::max(0, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(-window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>() * _scale_x)) - _x);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// Adjust window end for X dimension</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">if</span> (max_x &gt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0]))</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    {</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> tail_pad_x_available = (stride_y / strides[0]) - <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0] - front_pad_x;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0]) + tail_pad_x_available &lt; max_x)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// Not enough padding available, need to shrink the window</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> = <a class="code" href="namespacearm__compute.xhtml#a41c1523098580451b378f76b8c37a0f0">adjust_down</a>(max_x, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#a45cde9abb508c62d67c3bb2b9bf566a5">shape</a>[0] + tail_pad_x_available, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() * _scale_x) +</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                            window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>() * _scale_x - _x - _width;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            window.<a class="code" href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">set</a>(1, <a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml">Window::Dimension</a>(window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#ab24e31d1a4830bf79564ee902ec6c060">start</a>(), <a class="code" href="namespacearm__compute_1_1mlgo_1_1parser.xhtml#a9fe67a1da3e2628bade473115ecbb5be">end</a> / _scale_x, window.<a class="code" href="classarm__compute_1_1_window.xhtml#a1b522b073f3ca32d24eb4e03495ef8a6">y</a>().<a class="code" href="classarm__compute_1_1_window_1_1_dimension.xhtml#a918580dc9188825d67dbb203a43d02fe">step</a>()));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            window_modified = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    window.<a class="code" href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">validate</a>();</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> window_modified;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="ttc" id="aclassarm__compute_1_1_strides_xhtml"><div class="ttname"><a href="classarm__compute_1_1_strides.xhtml">arm_compute::Strides</a></div><div class="ttdoc">Strides of an item in bytes.</div><div class="ttdef"><b>Definition:</b> <a href="_strides_8h_source.xhtml#l00038">Strides.h:39</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_1_1_dimension_xhtml"><div class="ttname"><a href="classarm__compute_1_1_window_1_1_dimension.xhtml">arm_compute::Window::Dimension</a></div><div class="ttdoc">Describe one of the image's dimensions with a start, end and step.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8h_source.xhtml#l00079">Window.h:80</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_ab3a68a01a1c7c22bfbd9f3f6d20e7d5a"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#ab3a68a01a1c7c22bfbd9f3f6d20e7d5a">arm_compute::Window::validate</a></div><div class="ttdeci">void validate() const</div><div class="ttdoc">Will validate all the window's dimensions' values when asserts are enabled.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00187">Window.inl:187</a></div></div>
<div class="ttc" id="aclassarm__compute_1_1_window_xhtml_acd3d2bba51cb84d34dd7656ad2375a6e"><div class="ttname"><a href="classarm__compute_1_1_window.xhtml#acd3d2bba51cb84d34dd7656ad2375a6e">arm_compute::Window::set</a></div><div class="ttdeci">void set(size_t dimension, const Dimension &amp;dim)</div><div class="ttdoc">Set the values of a given dimension.</div><div class="ttdef"><b>Definition:</b> <a href="_window_8inl_source.xhtml#l00053">Window.inl:53</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_a41c1523098580451b378f76b8c37a0f0"><div class="ttname"><a href="namespacearm__compute.xhtml#a41c1523098580451b378f76b8c37a0f0">arm_compute::adjust_down</a></div><div class="ttdeci">int adjust_down(int required, int available, int step)</div><div class="ttdoc">Decrease required in steps of step until it's less than available.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00047">IAccessWindow.h:47</a></div></div>
<div class="ttc" id="anamespacearm__compute_xhtml_ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2"><div class="ttname"><a href="namespacearm__compute.xhtml#ab16fcfbfc3ee6dbc0c112f0bc9b3d9c2">arm_compute::adjust_up</a></div><div class="ttdeci">int adjust_up(int required, int available, int step)</div><div class="ttdoc">Increase required in steps of step until it's greater than available.</div><div class="ttdef"><b>Definition:</b> <a href="_i_access_window_8h_source.xhtml#l00063">IAccessWindow.h:63</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_i_access_window_8h_source.xhtml#l00047">arm_compute::adjust_down()</a>, <a class="el" href="_i_access_window_8h_source.xhtml#l00063">arm_compute::adjust_up()</a>, <a class="el" href="_window_8h_source.xhtml#l00101">Window::Dimension::end()</a>, <a class="el" href="_m_l_g_o_parser_8cpp_source.xhtml#l00283">arm_compute::mlgo::parser::end()</a>, <a class="el" href="_window_8inl_source.xhtml#l00053">Window::set()</a>, <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00115">arm_compute::test::validation::shape</a>, <a class="el" href="_window_8h_source.xhtml#l00096">Window::Dimension::start()</a>, <a class="el" href="_window_8h_source.xhtml#l00106">Window::Dimension::step()</a>, <a class="el" href="_window_8inl_source.xhtml#l00187">Window::validate()</a>, <a class="el" href="_window_8h_source.xhtml#l00158">Window::x()</a>, and <a class="el" href="_window_8h_source.xhtml#l00167">Window::y()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/core/<a class="el" href="_access_window_transpose_8h_source.xhtml">AccessWindowTranspose.h</a></li>
<li>src/core/<a class="el" href="_access_window_transpose_8cpp_source.xhtml">AccessWindowTranspose.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml">AccessWindowTranspose</a></li>
    <li class="footer">Generated on Mon Feb 12 2024 13:44:53 for Compute Library by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
