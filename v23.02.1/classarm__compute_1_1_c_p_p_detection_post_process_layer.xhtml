<!-- HTML header for doxygen 1.8.15-->
<!-- Remember to use version doxygen 1.8.15 +-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: CPPDetectionPostProcessLayer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="stylesheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <img alt="Compute Library" src="https://raw.githubusercontent.com/ARM-software/ComputeLibrary/gh-pages/ACL_logo.png" style="max-width: 100%;margin-top: 15px;margin-left: 10px"/>
  <td style="padding-left: 0.5em;">
   <div id="projectname">
   &#160;<span id="projectnumber">23.02.1</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">CPPDetectionPostProcessLayer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>CPP Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression.  
 <a href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_c_p_p_detection_post_process_layer_8h_source.xhtml">CPPDetectionPostProcessLayer.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CPPDetectionPostProcessLayer:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classarm__compute_1_1_c_p_p_detection_post_process_layer__coll__graph.svg" width="235" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a target="top" href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a39f8e99aae48c88ae3b3d98692c4107f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a39f8e99aae48c88ae3b3d98692c4107f">CPPDetectionPostProcessLayer</a> (std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt; memory_manager=nullptr)</td></tr>
<tr class="memdesc:a39f8e99aae48c88ae3b3d98692c4107f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a39f8e99aae48c88ae3b3d98692c4107f">More...</a><br /></td></tr>
<tr class="separator:a39f8e99aae48c88ae3b3d98692c4107f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75ee749d85809114423c208e4a84547"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#aa75ee749d85809114423c208e4a84547">CPPDetectionPostProcessLayer</a> (const <a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:aa75ee749d85809114423c208e4a84547"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#aa75ee749d85809114423c208e4a84547">More...</a><br /></td></tr>
<tr class="separator:aa75ee749d85809114423c208e4a84547"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a760aa257f0b27cc6e0b32cd2b44c6db3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a760aa257f0b27cc6e0b32cd2b44c6db3">operator=</a> (const <a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a> &amp;)=delete</td></tr>
<tr class="memdesc:a760aa257f0b27cc6e0b32cd2b44c6db3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevent instances of this class from being copied (As this class contains pointers)  <a href="#a760aa257f0b27cc6e0b32cd2b44c6db3">More...</a><br /></td></tr>
<tr class="separator:a760aa257f0b27cc6e0b32cd2b44c6db3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8136561c7a7d555b3a2c3bf0614986c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ab8136561c7a7d555b3a2c3bf0614986c">configure</a> (const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_box_encoding, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_score, const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *input_anchors, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_boxes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_classes, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *output_scores, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *num_detection, <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> info=<a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>())</td></tr>
<tr class="memdesc:ab8136561c7a7d555b3a2c3bf0614986c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure the detection output layer CPP function.  <a href="#ab8136561c7a7d555b3a2c3bf0614986c">More...</a><br /></td></tr>
<tr class="separator:ab8136561c7a7d555b3a2c3bf0614986c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1717410afd0be936c6213a63c8005fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#ad1717410afd0be936c6213a63c8005fb">run</a> () override</td></tr>
<tr class="memdesc:ad1717410afd0be936c6213a63c8005fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Run the kernels contained in the function.  <a href="#ad1717410afd0be936c6213a63c8005fb">More...</a><br /></td></tr>
<tr class="separator:ad1717410afd0be936c6213a63c8005fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classarm__compute_1_1_i_function"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classarm__compute_1_1_i_function')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classarm__compute_1_1_i_function.xhtml">IFunction</a></td></tr>
<tr class="memitem:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">~IFunction</a> ()=default</td></tr>
<tr class="memdesc:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="classarm__compute_1_1_i_function.xhtml#ab921ecc3f3f6ae2b4bd61f3e1998d8c4">More...</a><br /></td></tr>
<tr class="separator:ab921ecc3f3f6ae2b4bd61f3e1998d8c4 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">prepare</a> ()</td></tr>
<tr class="memdesc:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepare the function for executing.  <a href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26">More...</a><br /></td></tr>
<tr class="separator:a820f7291c24155a2980512fae45aac26 inherit pub_methods_classarm__compute_1_1_i_function"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a08744faa3f68379fa82bcbd96bbec691"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classarm__compute_1_1_status.xhtml">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml#a08744faa3f68379fa82bcbd96bbec691">validate</a> (const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_box_encoding, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_class_score, const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *input_anchors, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_boxes, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_classes, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *output_scores, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *num_detection, <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a> info=<a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>())</td></tr>
<tr class="memdesc:a08744faa3f68379fa82bcbd96bbec691"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a>.  <a href="#a08744faa3f68379fa82bcbd96bbec691">More...</a><br /></td></tr>
<tr class="separator:a08744faa3f68379fa82bcbd96bbec691"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>CPP Function to generate the detection output based on center size encoded boxes, class prediction and anchors by doing non maximum suppression. </p>
<dl class="section note"><dt>Note</dt><dd>Intended for use with MultiBox detection method. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_p_p_detection_post_process_layer_8h_source.xhtml#l00046">46</a> of file <a class="el" href="_c_p_p_detection_post_process_layer_8h_source.xhtml">CPPDetectionPostProcessLayer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a39f8e99aae48c88ae3b3d98692c4107f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39f8e99aae48c88ae3b3d98692c4107f">&#9670;&nbsp;</a></span>CPPDetectionPostProcessLayer() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a> </td>
          <td>(</td>
          <td class="paramtype">std::shared_ptr&lt; <a class="el" href="classarm__compute_1_1_i_memory_manager.xhtml">IMemoryManager</a> &gt;&#160;</td>
          <td class="paramname"><em>memory_manager</em> = <code>nullptr</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

<p class="definition">Definition at line <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00211">211</a> of file <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml">CPPDetectionPostProcessLayer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    : _memory_group(std::move(memory_manager)), _nms(), _input_box_encoding(<span class="keyword">nullptr</span>), _input_scores(<span class="keyword">nullptr</span>), _input_anchors(<span class="keyword">nullptr</span>), _output_boxes(<span class="keyword">nullptr</span>), _output_classes(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      _output_scores(<span class="keyword">nullptr</span>), _num_detection(<span class="keyword">nullptr</span>), _info(), _num_boxes(), _num_classes_with_background(), _num_max_detected_boxes(), _dequantize_scores(<span class="keyword">false</span>), _decoded_boxes(), _decoded_scores(),</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      _selected_indices(), _class_scores(), _input_scores_to_use(<span class="keyword">nullptr</span>)</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa75ee749d85809114423c208e4a84547"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa75ee749d85809114423c208e4a84547">&#9670;&nbsp;</a></span>CPPDetectionPostProcessLayer() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab8136561c7a7d555b3a2c3bf0614986c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8136561c7a7d555b3a2c3bf0614986c">&#9670;&nbsp;</a></span>configure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void configure </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input_box_encoding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input_score</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>input_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output_classes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>output_scores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> *&#160;</td>
          <td class="paramname"><em>num_detection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>&#160;</td>
          <td class="paramname"><em>info</em> = <code><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Configure the detection output layer CPP function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_box_encoding</td><td>The bounding box input tensor. Data types supported: F32/QASYMM8/QASYMM8_SIGNED. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_score</td><td>The class prediction input tensor. Data types supported: Same as <code>input_box_encoding</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_anchors</td><td>The anchors input tensor. Data types supported: Same as <code>input_box_encoding</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_boxes</td><td>The boxes output tensor. Data types supported: F32. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_classes</td><td>The classes output tensor. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_scores</td><td>The scores output tensor. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_detection</td><td>The number of output detection. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>(Optional) <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info. ">DetectionPostProcessLayerInfo</a> information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>Output contains all the detections. Of those, only the ones selected by the valid region are valid. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00218">218</a> of file <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml">CPPDetectionPostProcessLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator::allocate()</a>, <a class="el" href="src_2runtime_2_tensor_8cpp_source.xhtml#l00048">Tensor::allocator()</a>, <a class="el" href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">ARM_COMPUTE_ERROR_ON_NULLPTR</a>, <a class="el" href="_error_8h_source.xhtml#l00455">ARM_COMPUTE_ERROR_THROW_ON</a>, <a class="el" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>, <a class="el" href="_auto_configuration_8h_source.xhtml#l00042">arm_compute::auto_init_if_empty()</a>, <a class="el" href="_c_p_p_non_maximum_suppression_8cpp_source.xhtml#l00032">CPPNonMaximumSuppression::configure()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01184">DetectionPostProcessLayerInfo::dequantize_scores()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01135">DetectionPostProcessLayerInfo::detection_per_class()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="src_2runtime_2_tensor_8cpp_source.xhtml#l00033">Tensor::info()</a>, <a class="el" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01145">DetectionPostProcessLayerInfo::iou_threshold()</a>, <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">arm_compute::is_data_type_quantized()</a>, <a class="el" href="_memory_group_8h_source.xhtml#l00079">MemoryGroup::manage()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01130">DetectionPostProcessLayerInfo::max_classes_per_detection()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01125">DetectionPostProcessLayerInfo::max_detections()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01140">DetectionPostProcessLayerInfo::nms_score_threshold()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01150">DetectionPostProcessLayerInfo::num_classes()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::U</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01155">DetectionPostProcessLayerInfo::use_regular_nms()</a>, and <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00042">NEDetectionPostProcessLayer::configure()</a>.</p>
<div class="fragment"><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a>(input_box_encoding, input_scores, input_anchors, output_boxes, output_classes, output_scores);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a>(input_box_encoding, input_scores, input_anchors, output_boxes, output_classes, output_scores,</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                           num_detection, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    _num_max_detected_boxes = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_detections() * <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_classes_per_detection();</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*output_boxes-&gt;info(), TensorInfo(TensorShape(_kNumCoordBox, _num_max_detected_boxes, _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*output_classes-&gt;info(), TensorInfo(TensorShape(_num_max_detected_boxes, _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*output_scores-&gt;info(), TensorInfo(TensorShape(_num_max_detected_boxes, _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*num_detection-&gt;info(), TensorInfo(TensorShape(1<a class="code" href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">U</a>), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="comment">// Perform validation step</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <a class="code" href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(input_box_encoding-&gt;info(), input_scores-&gt;info(), input_anchors-&gt;info(), output_boxes-&gt;info(), output_classes-&gt;info(), output_scores-&gt;info(),</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                                  num_detection-&gt;info(),</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                                  <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, _kBatchSize, _kNumCoordBox));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    _input_box_encoding          = input_box_encoding;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    _input_scores                = input_scores;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    _input_anchors               = input_anchors;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    _output_boxes                = output_boxes;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    _output_classes              = output_classes;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    _output_scores               = output_scores;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    _num_detection               = num_detection;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    _info                        = <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    _num_boxes                   = input_box_encoding-&gt;info()-&gt;dimension(1);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    _num_classes_with_background = _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    _dequantize_scores           = (<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.dequantize_scores() &amp;&amp; <a class="code" href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">is_data_type_quantized</a>(input_box_encoding-&gt;info()-&gt;data_type()));</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_decoded_boxes.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), TensorInfo(TensorShape(_kNumCoordBox, _input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1), _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_decoded_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), TensorInfo(TensorShape(_input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(0), _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">dimension</a>(1), _kBatchSize), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>));</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_selected_indices.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), TensorInfo(TensorShape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.use_regular_nms() ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.detection_per_class() : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_detections()), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>));</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_classes_per_box = std::min(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_classes_per_detection(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.num_classes());</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">auto_init_if_empty</a>(*_class_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">info</a>(), TensorInfo(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.use_regular_nms() ? TensorShape(_num_boxes) : TensorShape(_num_boxes * num_classes_per_box), 1, <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>::<a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">F32</a>));</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    _input_scores_to_use = _dequantize_scores ? &amp;_decoded_scores : _input_scores;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// Manage intermediate buffers</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_decoded_boxes);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_decoded_scores);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_selected_indices);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    _memory_group.<a class="code" href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">manage</a>(&amp;_class_scores);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    _nms.<a class="code" href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ad8387a0ef4a1e0f7382c06146857e4be">configure</a>(&amp;_decoded_boxes, &amp;_class_scores, &amp;_selected_indices, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.use_regular_nms() ? <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.detection_per_class() : <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_detections(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.nms_score_threshold(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.iou_threshold());</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="comment">// Allocate and reserve intermediate tensors and vectors</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    _decoded_boxes.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    _decoded_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    _selected_indices.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    _class_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">allocator</a>()-&gt;<a class="code" href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">allocate</a>();</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="ttc" id="namespacearm__compute_xhtml_a0bee325b210f81bb89fe1f9e15badf9c"><div class="ttname"><a href="namespacearm__compute.xhtml#a0bee325b210f81bb89fe1f9e15badf9c">arm_compute::is_data_type_quantized</a></div><div class="ttdeci">bool is_data_type_quantized(DataType dt)</div><div class="ttdoc">Check if a given data type is of quantized type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l01030">Utils.h:1030</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a178f0d3d87f959e00a743328d95359d2"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">arm_compute::ITensorInfo::dimension</a></div><div class="ttdeci">virtual size_t dimension(size_t index) const =0</div><div class="ttdoc">Return the size of the requested dimension. </div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="_error_8h_xhtml_a938dcd406ce611ef5345ad2531cdb948"><div class="ttname"><a href="_error_8h.xhtml#a938dcd406ce611ef5345ad2531cdb948">ARM_COMPUTE_ERROR_THROW_ON</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_THROW_ON(status)</div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00455">Error.h:455</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_1_1kernels_xhtml_acf9ea6633274730cd08b8b8fab3a6fe6"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">arm_compute::cpu::kernels::validate_arguments</a></div><div class="ttdeci">Status validate_arguments(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">CpuDirectConv2dKernel.cpp:60</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_adbd0cf83a8e1b335a9bf405a8e5019fa"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#adbd0cf83a8e1b335a9bf405a8e5019fa">arm_compute::Tensor::allocator</a></div><div class="ttdeci">TensorAllocator * allocator()</div><div class="ttdoc">Return a pointer to the tensor&amp;#39;s allocator. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00048">Tensor.cpp:48</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a47d74e4e51f9b1a636c4831bd747a97c"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a47d74e4e51f9b1a636c4831bd747a97c">arm_compute::Tensor::info</a></div><div class="ttdeci">ITensorInfo * info() const override</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00033">Tensor.cpp:33</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_memory_group_xhtml_a6fc0a49304c152c20a0f6df0634fb3cd"><div class="ttname"><a href="classarm__compute_1_1_memory_group.xhtml#a6fc0a49304c152c20a0f6df0634fb3cd">arm_compute::MemoryGroup::manage</a></div><div class="ttdeci">void manage(IMemoryManageable *obj) override</div><div class="ttdoc">Sets a object to be managed by the given memory group. </div><div class="ttdef"><b>Definition:</b> <a href="_memory_group_8h_source.xhtml#l00079">MemoryGroup.h:79</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb"><div class="ttname"><a href="namespacearm__compute.xhtml#a1ce9b523fd4f3b5bbcadcd796183455aa4c614360da93c0a041b22e537de151eb">arm_compute::Channel::U</a></div><div class="ttdoc">Cb/U channel. </div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_allocator_xhtml_a6e509c2a177b0b29e9e2369535094dee"><div class="ttname"><a href="classarm__compute_1_1_tensor_allocator.xhtml#a6e509c2a177b0b29e9e2369535094dee">arm_compute::TensorAllocator::allocate</a></div><div class="ttdeci">void allocate() override</div><div class="ttdoc">Allocate size specified by TensorInfo of CPU memory. </div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_allocator_8cpp_source.xhtml#l00132">TensorAllocator.cpp:132</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_a37c28ce239ce7092298245ce59694917"><div class="ttname"><a href="namespacearm__compute.xhtml#a37c28ce239ce7092298245ce59694917">arm_compute::auto_init_if_empty</a></div><div class="ttdeci">bool auto_init_if_empty(ITensorInfo &amp;info, const TensorShape &amp;shape, int num_channels, DataType data_type, QuantizationInfo quantization_info=QuantizationInfo())</div><div class="ttdoc">Auto initialize the tensor info (shape, number of channels and data type) if the current assignment i...</div><div class="ttdef"><b>Definition:</b> <a href="_auto_configuration_8h_source.xhtml#l00042">AutoConfiguration.h:42</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
<div class="ttc" id="src_2common_2utils_2_log_8h_xhtml_a3ae35e22a098d589ff54ed85647ed87e"><div class="ttname"><a href="src_2common_2utils_2_log_8h.xhtml#a3ae35e22a098d589ff54ed85647ed87e">ARM_COMPUTE_LOG_PARAMS</a></div><div class="ttdeci">#define ARM_COMPUTE_LOG_PARAMS(...)</div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_non_maximum_suppression_xhtml_ad8387a0ef4a1e0f7382c06146857e4be"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ad8387a0ef4a1e0f7382c06146857e4be">arm_compute::CPPNonMaximumSuppression::configure</a></div><div class="ttdeci">void configure(const ITensor *bboxes, const ITensor *scores, ITensor *indices, unsigned int max_output_size, const float score_threshold, const float nms_threshold)</div><div class="ttdoc">Configure the function to perform non maximal suppression. </div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_non_maximum_suppression_8cpp_source.xhtml#l00032">CPPNonMaximumSuppression.cpp:32</a></div></div>
<div class="ttc" id="arm__compute_2core_2_validate_8h_xhtml_a921b705e9e3e0fe928928447869e62a5"><div class="ttname"><a href="arm__compute_2core_2_validate_8h.xhtml#a921b705e9e3e0fe928928447869e62a5">ARM_COMPUTE_ERROR_ON_NULLPTR</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_NULLPTR(...)</div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_validate_8h_source.xhtml#l00157">Validate.h:157</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">arm_compute::DataType</a></div><div class="ttdeci">DataType</div><div class="ttdoc">Available data types. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l00079">Types.h:79</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a760aa257f0b27cc6e0b32cd2b44c6db3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a760aa257f0b27cc6e0b32cd2b44c6db3">&#9670;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">delete</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prevent instances of this class from being copied (As this class contains pointers) </p>

</div>
</div>
<a id="ad1717410afd0be936c6213a63c8005fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1717410afd0be936c6213a63c8005fb">&#9670;&nbsp;</a></span>run()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void run </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Run the kernels contained in the function. </p>
<p>For CPU kernels:</p><ul>
<li>Multi-threading is used for the kernels which are parallelisable.</li>
<li>By default std::thread::hardware_concurrency() threads are used.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml#ae64eebaa07f4d2da6cc2ba538c3cb095">CPPScheduler::set_num_threads()</a> can be used to manually set the number of threads</dd></dl>
<p>For OpenCL kernels:</p><ul>
<li>All the kernels are enqueued on the queue associated with <a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" title="Provides global access to a CL context and command queue. ">CLScheduler</a>.</li>
<li>The queue is then flushed.</li>
</ul>
<dl class="section note"><dt>Note</dt><dd>The function will not block until the kernels are executed. It is the user's responsibility to wait. </dd>
<dd>
Will call <a class="el" href="classarm__compute_1_1_i_function.xhtml#a820f7291c24155a2980512fae45aac26" title="Prepare the function for executing. ">prepare()</a> on first run if hasn't been done </dd></dl>

<p>Implements <a class="el" href="classarm__compute_1_1_i_function.xhtml#a18954417d3124a8095783ea13dc6d00b">IFunction</a>.</p>

<p class="definition">Definition at line <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00288">288</a> of file <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml">CPPDetectionPostProcessLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">arm_compute::test::validation::b</a>, <a class="el" href="src_2runtime_2_tensor_8cpp_source.xhtml#l00043">Tensor::buffer()</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">ITensorInfo::data_type()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00359">arm_compute::dequantize_qasymm8()</a>, <a class="el" href="_quantization_info_8h_source.xhtml#l00372">arm_compute::dequantize_qasymm8_signed()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01135">DetectionPostProcessLayerInfo::detection_per_class()</a>, <a class="el" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">ITensor::info()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01130">DetectionPostProcessLayerInfo::max_classes_per_detection()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01125">DetectionPostProcessLayerInfo::max_detections()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01150">DetectionPostProcessLayerInfo::num_classes()</a>, <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::QASYMM8</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::QASYMM8_SIGNED</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">ITensorInfo::quantization_info()</a>, <a class="el" href="_i_c_p_p_simple_function_8cpp_source.xhtml#l00035">ICPPSimpleFunction::run()</a>, and <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01155">DetectionPostProcessLayerInfo::use_regular_nms()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00088">NEDetectionPostProcessLayer::run()</a>.</p>
<div class="fragment"><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;{</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_classes    = _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>();</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max_detections = _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>();</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    DecodeCenterSizeBoxes(_input_box_encoding, _input_anchors, _info, &amp;_decoded_boxes);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Decode scores if necessary</span></div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span>(_dequantize_scores)</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    {</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span>(_input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">DataType::QASYMM8</a>)</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        {</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_c = 0; idx_c &lt; _num_classes_with_background; ++idx_c)</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_b = 0; idx_b &lt; _num_boxes; ++idx_b)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_decoded_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(idx_c, idx_b)))) =</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                        <a class="code" href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">dequantize_qasymm8</a>(*(reinterpret_cast&lt;qasymm8_t *&gt;(_input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(idx_c, idx_b)))), _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>());</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(_input_box_encoding-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">data_type</a>() == <a class="code" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">DataType::QASYMM8_SIGNED</a>)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_c = 0; idx_c &lt; _num_classes_with_background; ++idx_c)</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx_b = 0; idx_b &lt; _num_boxes; ++idx_b)</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_decoded_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(idx_c, idx_b)))) =</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        <a class="code" href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">dequantize_qasymm8_signed</a>(*(reinterpret_cast&lt;qasymm8_signed_t *&gt;(_input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(idx_c, idx_b)))), _input_scores-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">info</a>()-&gt;<a class="code" href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">quantization_info</a>());</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            }</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Regular NMS</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">if</span>(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">use_regular_nms</a>())</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        std::vector&lt;int&gt;          result_idx_boxes_after_nms;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        std::vector&lt;int&gt;          result_classes_after_nms;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        std::vector&lt;float&gt;        result_scores_after_nms;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        std::vector&lt;unsigned int&gt; sorted_indices;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; num_classes; ++c)</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        {</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="comment">// For each boxes get scores of the boxes for the class c</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _num_boxes; ++i)</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_class_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(i)))) =</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_input_scores_to_use-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(c + 1, i)))); <span class="comment">// i * _num_classes_with_background + c + 1</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <span class="comment">// Run Non-maxima Suppression</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            _nms.<a class="code" href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">detection_per_class</a>(); ++i)</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keyword">const</span> <span class="keyword">auto</span> selected_index = *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">int</span> *<span class="keyword">&gt;</span>(_selected_indices.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(i))));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                <span class="keywordflow">if</span>(selected_index == -1)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                {</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                    <span class="comment">// Nms will return -1 for all the last M-elements not valid</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                result_idx_boxes_after_nms.emplace_back(selected_index);</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                result_scores_after_nms.emplace_back((reinterpret_cast&lt;float *&gt;(_class_scores.<a class="code" href="classarm__compute_1_1_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">buffer</a>()))[selected_index]);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                result_classes_after_nms.emplace_back(c);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="comment">// We select the max detection numbers of the highest score of all classes</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> num_selected = result_scores_after_nms.size();</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> num_output   = std::min&lt;unsigned int&gt;(max_detections, num_selected);</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="comment">// Sort selected indices based on result scores</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        sorted_indices.resize(num_selected);</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        std::iota(sorted_indices.begin(), sorted_indices.end(), 0);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        std::partial_sort(sorted_indices.data(),</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                          sorted_indices.data() + num_output,</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                          sorted_indices.data() + num_selected,</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                          [&amp;](<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> second)</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        {</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">return</span> result_scores_after_nms[first] &gt; result_scores_after_nms[second];</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        });</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        SaveOutputs(&amp;_decoded_boxes, result_idx_boxes_after_nms, result_scores_after_nms, result_classes_after_nms, sorted_indices,</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    num_output, max_detections, _output_boxes, _output_classes, _output_scores, _num_detection);</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    }</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">// Fast NMS</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> num_classes_per_box = std::min&lt;unsigned int&gt;(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">max_classes_per_detection</a>(), _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>());</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        std::vector&lt;float&gt; max_scores;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        std::vector&lt;int&gt;   box_indices;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        std::vector&lt;int&gt;   max_score_classes;</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> = 0; <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> &lt; _num_boxes; ++<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            std::vector&lt;float&gt; box_scores;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; num_classes; ++c)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                box_scores.emplace_back(*(reinterpret_cast&lt;float *&gt;(_input_scores_to_use-&gt;<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(c + 1, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>)))));</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            std::vector&lt;unsigned int&gt; max_score_indices;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            max_score_indices.resize(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>());</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            std::iota(max_score_indices.data(), max_score_indices.data() + _info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">num_classes</a>(), 0);</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            std::partial_sort(max_score_indices.data(),</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                              max_score_indices.data() + num_classes_per_box,</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                              max_score_indices.data() + num_classes,</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                              [&amp;](<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> first, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> second)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            {</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                <span class="keywordflow">return</span> box_scores[first] &gt; box_scores[second];</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            });</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; num_classes_per_box; ++i)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">float</span> score_to_add                                                                             = box_scores[max_score_indices[i]];</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                *(<span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">float</span> *<span class="keyword">&gt;</span>(_class_scores.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a> * num_classes_per_box + i)))) = score_to_add;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                max_scores.emplace_back(score_to_add);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                box_indices.emplace_back(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">b</a>);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                max_score_classes.emplace_back(max_score_indices[i]);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="comment">// Run Non-maxima Suppression</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        _nms.<a class="code" href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">run</a>();</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        std::vector&lt;unsigned int&gt; selected_indices;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; max_detections; ++i)</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            <span class="comment">// NMS returns M valid indices, the not valid tail is filled with -1</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">if</span>(*(reinterpret_cast&lt;int *&gt;(_selected_indices.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(i)))) == -1)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            {</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                <span class="comment">// Nms will return -1 for all the last M-elements not valid</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            selected_indices.emplace_back(*(reinterpret_cast&lt;int *&gt;(_selected_indices.<a class="code" href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">ptr_to_element</a>(Coordinates(i)))));</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="comment">// We select the max detection numbers of the highest score of all classes</span></div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> num_output = std::min&lt;unsigned int&gt;(_info.<a class="code" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">max_detections</a>(), selected_indices.size());</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        SaveOutputs(&amp;_decoded_boxes, box_indices, max_scores, max_score_classes, selected_indices,</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    num_output, max_detections, _output_boxes, _output_classes, _output_scores, _num_detection);</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    }</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div><div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_adbd73147d41e8a640bc299d12613c31e"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#adbd73147d41e8a640bc299d12613c31e">arm_compute::ITensor::ptr_to_element</a></div><div class="ttdeci">uint8_t * ptr_to_element(const Coordinates &amp;id) const</div><div class="ttdoc">Return a pointer to the element at the passed coordinates. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00063">ITensor.h:63</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ac1d8253f8b422e143ab989ad2a4d29dd"><div class="ttname"><a href="namespacearm__compute.xhtml#ac1d8253f8b422e143ab989ad2a4d29dd">arm_compute::dequantize_qasymm8</a></div><div class="ttdeci">float dequantize_qasymm8(uint8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given an unsigned 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00359">QuantizationInfo.h:359</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_aa76b4a6e74940dabc5b7fc6b2dab3545"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#aa76b4a6e74940dabc5b7fc6b2dab3545">arm_compute::test::validation::b</a></div><div class="ttdeci">SimpleTensor&lt; float &gt; b</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_2_d_f_t_8cpp_source.xhtml#l00157">DFT.cpp:157</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a23e83519067d74d4f1855d38741151eb"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a23e83519067d74d4f1855d38741151eb">arm_compute::DetectionPostProcessLayerInfo::max_detections</a></div><div class="ttdeci">unsigned int max_detections() const</div><div class="ttdoc">Get max detections. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01125">Types.h:1125</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a7cfb31af63202568efef5214acfbf3ba"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a7cfb31af63202568efef5214acfbf3ba">arm_compute::ITensorInfo::data_type</a></div><div class="ttdeci">virtual DataType data_type() const =0</div><div class="ttdoc">Data type used for each element of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ae1c2cc7a6c3db74d8be5f6e23aa84476"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ae1c2cc7a6c3db74d8be5f6e23aa84476">arm_compute::DetectionPostProcessLayerInfo::use_regular_nms</a></div><div class="ttdeci">bool use_regular_nms() const</div><div class="ttdoc">Get if use regular nms. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01155">Types.h:1155</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6af14462d71aa842202c3e4b272c7ec924">arm_compute::DataType::QASYMM8</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number unsigned </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml_a0e95dc1e53c361348314873b168ae237"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml#a0e95dc1e53c361348314873b168ae237">arm_compute::ITensor::info</a></div><div class="ttdeci">virtual ITensorInfo * info() const =0</div><div class="ttdoc">Interface to be implemented by the child class to return the tensor&amp;#39;s metadata. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_info_xhtml_a3f3e1a3200223e6a304a533b1016e749"><div class="ttname"><a href="classarm__compute_1_1_i_tensor_info.xhtml#a3f3e1a3200223e6a304a533b1016e749">arm_compute::ITensorInfo::quantization_info</a></div><div class="ttdeci">virtual QuantizationInfo quantization_info() const =0</div><div class="ttdoc">Get the quantization settings (scale and offset) of the tensor. </div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_ad54d768454ff1000504546898078d0de"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#ad54d768454ff1000504546898078d0de">arm_compute::DetectionPostProcessLayerInfo::max_classes_per_detection</a></div><div class="ttdeci">unsigned int max_classes_per_detection() const</div><div class="ttdoc">Get max_classes per detection. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01130">Types.h:1130</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_a36e65a7f80a07a2393e6a1cadd974740"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#a36e65a7f80a07a2393e6a1cadd974740">arm_compute::DetectionPostProcessLayerInfo::detection_per_class</a></div><div class="ttdeci">unsigned int detection_per_class() const</div><div class="ttdoc">Get detection per class. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01135">Types.h:1135</a></div></div>
<div class="ttc" id="classarm__compute_1_1_detection_post_process_layer_info_xhtml_adda82c28c368106734620f105bb0e1e3"><div class="ttname"><a href="classarm__compute_1_1_detection_post_process_layer_info.xhtml#adda82c28c368106734620f105bb0e1e3">arm_compute::DetectionPostProcessLayerInfo::num_classes</a></div><div class="ttdeci">unsigned int num_classes() const</div><div class="ttdoc">Get num classes. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_types_8h_source.xhtml#l01150">Types.h:1150</a></div></div>
<div class="ttc" id="classarm__compute_1_1_tensor_xhtml_a24954cca5108a24706441fd99a7fb04c"><div class="ttname"><a href="classarm__compute_1_1_tensor.xhtml#a24954cca5108a24706441fd99a7fb04c">arm_compute::Tensor::buffer</a></div><div class="ttdeci">uint8_t * buffer() const override</div><div class="ttdoc">Interface to be implemented by the child class to return a pointer to CPU memory. ...</div><div class="ttdef"><b>Definition:</b> <a href="src_2runtime_2_tensor_8cpp_source.xhtml#l00043">Tensor.cpp:43</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_afe6fcf1a0c6f6c2d2cb10a8c14fa9131"><div class="ttname"><a href="namespacearm__compute.xhtml#afe6fcf1a0c6f6c2d2cb10a8c14fa9131">arm_compute::dequantize_qasymm8_signed</a></div><div class="ttdeci">float dequantize_qasymm8_signed(int8_t value, const INFO_TYPE &amp;qinfo)</div><div class="ttdoc">Dequantize a value given a signed 8-bit asymmetric quantization scheme. </div><div class="ttdef"><b>Definition:</b> <a href="_quantization_info_8h_source.xhtml#l00372">QuantizationInfo.h:372</a></div></div>
<div class="ttc" id="classarm__compute_1_1_i_c_p_p_simple_function_xhtml_a92fe532c342ae2b07956a65520c05362"><div class="ttname"><a href="classarm__compute_1_1_i_c_p_p_simple_function.xhtml#a92fe532c342ae2b07956a65520c05362">arm_compute::ICPPSimpleFunction::run</a></div><div class="ttdeci">void run() override final</div><div class="ttdoc">Run the kernels contained in the function. </div><div class="ttdef"><b>Definition:</b> <a href="_i_c_p_p_simple_function_8cpp_source.xhtml#l00035">ICPPSimpleFunction.cpp:35</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9"><div class="ttname"><a href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6a329f5d0c4b0c80e3474951d2c4435dd9">arm_compute::DataType::QASYMM8_SIGNED</a></div><div class="ttdoc">quantized, asymmetric fixed-point 8-bit number signed </div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a08744faa3f68379fa82bcbd96bbec691"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08744faa3f68379fa82bcbd96bbec691">&#9670;&nbsp;</a></span>validate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_status.xhtml">Status</a> validate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_box_encoding</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_class_score</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>input_anchors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_boxes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_classes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>output_scores</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml">ITensorInfo</a> *&#160;</td>
          <td class="paramname"><em>num_detection</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>&#160;</td>
          <td class="paramname"><em>info</em> = <code><a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml">DetectionPostProcessLayerInfo</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static function to check if given info will lead to a valid configuration of <a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_box_encoding</td><td>The bounding box input tensor info. Data types supported: F32/QASYMM8/QASYMM8_SIGNED. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_class_score</td><td>The class prediction input tensor info. Data types supported: Same as <code>input_box_encoding</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">input_anchors</td><td>The anchors input tensor. Data types supported: F32, QASYMM8. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_boxes</td><td>The output tensor. Data types supported: F32. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_classes</td><td>The output tensor. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">output_scores</td><td>The output tensor. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">num_detection</td><td>The number of output detection. Data types supported: Same as <code>output_boxes</code>. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">info</td><td>(Optional) <a class="el" href="classarm__compute_1_1_detection_post_process_layer_info.xhtml" title="Detection Output layer info. ">DetectionPostProcessLayerInfo</a> information.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a status </dd></dl>

<p class="definition">Definition at line <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml#l00272">272</a> of file <a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml">CPPDetectionPostProcessLayer.cpp</a>.</p>

<p class="reference">References <a class="el" href="_error_8h_source.xhtml#l00204">ARM_COMPUTE_RETURN_ON_ERROR</a>, <a class="el" href="classarm__compute_1_1_i_tensor_info.xhtml#a178f0d3d87f959e00a743328d95359d2">ITensorInfo::dimension()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::F32</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01145">DetectionPostProcessLayerInfo::iou_threshold()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01125">DetectionPostProcessLayerInfo::max_detections()</a>, <a class="el" href="arm__compute_2core_2_types_8h_source.xhtml#l01140">DetectionPostProcessLayerInfo::nms_score_threshold()</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::S32</a>, <a class="el" href="_c_p_p_non_maximum_suppression_8cpp_source.xhtml#l00043">CPPNonMaximumSuppression::validate()</a>, and <a class="el" href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">arm_compute::cpu::kernels::validate_arguments()</a>.</p>

<p class="reference">Referenced by <a class="el" href="_c_p_p_2_detection_post_process_layer_8cpp_source.xhtml#l00212">arm_compute::test::validation::DATA_TEST_CASE()</a>, and <a class="el" href="_n_e_detection_post_process_layer_8cpp_source.xhtml#l00074">NEDetectionPostProcessLayer::validate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kBatchSize             = 1;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    constexpr <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> kNumCoordBox           = 4;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keyword">const</span> TensorInfo       _decoded_boxes_info    = TensorInfo(TensorShape(kNumCoordBox, input_box_encoding-&gt;dimension(1)), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">const</span> TensorInfo       _decoded_scores_info   = TensorInfo(TensorShape(input_box_encoding-&gt;dimension(1)), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">DataType::F32</a>);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keyword">const</span> TensorInfo       _selected_indices_info = TensorInfo(TensorShape(<a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_detections()), 1, <a class="code" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">DataType::S32</a>);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ac36104d178e32cb6e30af07e69d978d4">CPPNonMaximumSuppression::validate</a>(&amp;_decoded_boxes_info, &amp;_decoded_scores_info, &amp;_selected_indices_info, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.max_detections(), <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.nms_score_threshold(),</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                                                                   <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>.iou_threshold()));</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a>(<a class="code" href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">validate_arguments</a>(input_box_encoding, input_class_score, input_anchors, output_boxes, output_classes, output_scores, num_detection, <a class="code" href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">info</a>, kBatchSize, kNumCoordBox));</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> Status{};</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}</div><div class="ttc" id="_error_8h_xhtml_a8a1e1c105f0bdaf37db408c7cfcb77a4"><div class="ttname"><a href="_error_8h.xhtml#a8a1e1c105f0bdaf37db408c7cfcb77a4">ARM_COMPUTE_RETURN_ON_ERROR</a></div><div class="ttdeci">#define ARM_COMPUTE_RETURN_ON_ERROR(status)</div><div class="ttdoc">Checks if a status contains an error and returns it. </div><div class="ttdef"><b>Definition:</b> <a href="_error_8h_source.xhtml#l00204">Error.h:204</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58a44ad4ef5a76e6aa6fb3e3fa079a54fda">arm_compute::Format::F32</a></div><div class="ttdoc">1 channel, 1 F32 per channel </div></div>
<div class="ttc" id="namespacearm__compute_1_1cpu_1_1kernels_xhtml_acf9ea6633274730cd08b8b8fab3a6fe6"><div class="ttname"><a href="namespacearm__compute_1_1cpu_1_1kernels.xhtml#acf9ea6633274730cd08b8b8fab3a6fe6">arm_compute::cpu::kernels::validate_arguments</a></div><div class="ttdeci">Status validate_arguments(const ITensorInfo *src, const ITensorInfo *weights, const ITensorInfo *dst, const PadStrideInfo &amp;conv_info)</div><div class="ttdef"><b>Definition:</b> <a href="_cpu_direct_conv2d_kernel_8cpp_source.xhtml#l00060">CpuDirectConv2dKernel.cpp:60</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml_ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c"><div class="ttname"><a href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58aa1e28eee0339658d39a8b4d325b56e9c">arm_compute::Format::S32</a></div><div class="ttdoc">1 channel, 1 S32 per channel </div></div>
<div class="ttc" id="classarm__compute_1_1_c_p_p_non_maximum_suppression_xhtml_ac36104d178e32cb6e30af07e69d978d4"><div class="ttname"><a href="classarm__compute_1_1_c_p_p_non_maximum_suppression.xhtml#ac36104d178e32cb6e30af07e69d978d4">arm_compute::CPPNonMaximumSuppression::validate</a></div><div class="ttdeci">static Status validate(const ITensorInfo *bboxes, const ITensorInfo *scores, const ITensorInfo *indices, unsigned int max_output_size, const float score_threshold, const float nms_threshold)</div><div class="ttdoc">Static function to check if given arguments will lead to a valid configuration of CPPNonMaximumSuppre...</div><div class="ttdef"><b>Definition:</b> <a href="_c_p_p_non_maximum_suppression_8cpp_source.xhtml#l00043">CPPNonMaximumSuppression.cpp:43</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1test_1_1validation_xhtml_ac57b92957968088a392021cac1d2076b"><div class="ttname"><a href="namespacearm__compute_1_1test_1_1validation.xhtml#ac57b92957968088a392021cac1d2076b">arm_compute::test::validation::info</a></div><div class="ttdeci">ScaleKernelInfo info(interpolation_policy, default_border_mode, PixelValue(), sampling_policy, false)</div></div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>arm_compute/runtime/CPP/functions/<a class="el" href="_c_p_p_detection_post_process_layer_8h_source.xhtml">CPPDetectionPostProcessLayer.h</a></li>
<li>src/runtime/CPP/functions/<a class="el" href="_c_p_p_detection_post_process_layer_8cpp_source.xhtml">CPPDetectionPostProcessLayer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_c_p_p_detection_post_process_layer.xhtml">CPPDetectionPostProcessLayer</a></li>
    <li class="footer">Generated on Thu Mar 16 2023 12:24:57 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
